void GroupKitCryptoError.error.getter(_BYTE *a1@<X8>)
{
  _BYTE *v1;

  *a1 = *v1;
}

uint64_t GroupKitCryptoError.subError.getter@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 60);
  v5 = sub_23D66C5B8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t GroupKitCryptoError.subError.setter(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 60);
  v5 = sub_23D66C5B8();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*GroupKitCryptoError.subError.modify())()
{
  return nullsub_1;
}

BOOL sub_23D5A99B0(char a1, char a2)
{
  return a1 == a2;
}

uint64_t sub_23D5A99C0()
{
  return sub_23D66C8F4();
}

uint64_t sub_23D5A99E4(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x6F4E656E696CLL && a2 == 0xE600000000000000;
  if (v2 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E6F6974636E7566 && a2 == 0xE800000000000000 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 1701603686 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    v6 = sub_23D66C84C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 2;
    else
      return 3;
  }
}

uint64_t sub_23D5A9B20()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t sub_23D5A9B64(char a1)
{
  if (!a1)
    return 0x6F4E656E696CLL;
  if (a1 == 1)
    return 0x6E6F6974636E7566;
  return 1701603686;
}

BOOL sub_23D5A9BB0(char *a1, char *a2)
{
  return sub_23D5A99B0(*a1, *a2);
}

uint64_t sub_23D5A9BCC()
{
  return sub_23D5A9B20();
}

uint64_t sub_23D5A9BE0()
{
  return sub_23D5A99C0();
}

uint64_t sub_23D5A9BF4()
{
  sub_23D66C8E8();
  sub_23D5A99C0();
  return sub_23D66C90C();
}

uint64_t sub_23D5A9C40()
{
  char *v0;

  return sub_23D5A9B64(*v0);
}

uint64_t sub_23D5A9C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23D5AA4AC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23D5A99E4, a4);
}

uint64_t sub_23D5A9C60()
{
  return 0;
}

uint64_t sub_23D5A9C6C@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23D5AA4F0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23D5AD18C, a2);
}

uint64_t sub_23D5A9C78(uint64_t a1)
{
  MEMORY[0x242636790](&unk_23D66DD80, a1);
  return sub_23D66C930();
}

uint64_t sub_23D5A9CAC(uint64_t a1)
{
  MEMORY[0x242636790](&unk_23D66DD80, a1);
  return sub_23D66C93C();
}

void sub_23D5A9CE0()
{
  type metadata accessor for GroupKitCryptoError.ErrorLocation.CodingKeys();
}

uint64_t sub_23D5A9D28(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v9;

  MEMORY[0x242636790](&unk_23D66DD80, a1);
  v3 = sub_23D66C81C();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8]();
  v6 = (char *)&v9 - v5;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23D66C924();
  *(_BYTE *)(v2 - 128) = 0;
  v7 = *(_QWORD *)(v2 - 72);
  sub_23D66C804();
  if (!v7)
  {
    *(_BYTE *)(v2 - 128) = 1;
    sub_23D66C7F8();
    *(_BYTE *)(v2 - 128) = 2;
    sub_23D66C7F8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v6, v3);
}

void sub_23D5A9E54()
{
  type metadata accessor for GroupKitCryptoError.ErrorLocation.CodingKeys();
}

uint64_t sub_23D5A9E98(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(char *, uint64_t);
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;

  MEMORY[0x242636790](&unk_23D66DD80, a1);
  v4 = sub_23D66C7D4();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8]();
  v7 = (char *)&v20 - v6;
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  sub_23D66C918();
  if (v2)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  v8 = *(uint64_t **)(v3 - 72);
  *(_BYTE *)(v3 - 120) = 0;
  v9 = sub_23D66C7B0();
  *(_BYTE *)(v3 - 120) = 1;
  v10 = sub_23D66C7A4();
  v12 = v11;
  *(_QWORD *)(v3 - 128) = v10;
  *(_BYTE *)(v3 - 120) = 2;
  swift_bridgeObjectRetain();
  v13 = sub_23D66C7A4();
  v15 = v14;
  v16 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17 = v13;
  v16(v7, v4);
  swift_bridgeObjectRetain();
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v1);
  swift_bridgeObjectRelease();
  result = swift_bridgeObjectRelease();
  v19 = *(_QWORD *)(v3 - 128);
  *v8 = v9;
  v8[1] = v19;
  v8[2] = v12;
  v8[3] = v17;
  v8[4] = v15;
  return result;
}

void sub_23D5AA060()
{
  sub_23D5A9E54();
}

void sub_23D5AA08C()
{
  uint64_t v0;
  uint64_t v1;
  __int128 v2;
  __int128 v3;
  uint64_t v4;

  if (!v1)
  {
    *(_OWORD *)v0 = v2;
    *(_OWORD *)(v0 + 16) = v3;
    *(_QWORD *)(v0 + 32) = v4;
  }
}

void sub_23D5AA0B4()
{
  sub_23D5A9CE0();
}

uint64_t sub_23D5AA0C8()
{
  uint64_t v0;
  unsigned int v1;

  v0 = sub_23D66C774();
  swift_bridgeObjectRelease();
  if (v0 == 1)
    v1 = 1;
  else
    v1 = 2;
  if (v0)
    return v1;
  else
    return 0;
}

uint64_t sub_23D5AA118(char a1)
{
  if ((a1 & 1) != 0)
    return 0x726F727245627573;
  else
    return 0x726F727265;
}

uint64_t sub_23D5AA14C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x242636790](&unk_23D66D918, a3);
  return sub_23D66C858();
}

uint64_t sub_23D5AA1A0(char a1, char a2)
{
  BOOL v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  char v7;

  v2 = (a1 & 1) == 0;
  if ((a1 & 1) != 0)
    v3 = 1701080931;
  else
    v3 = 0x6E69616D6F64;
  if (v2)
    v4 = 0xE600000000000000;
  else
    v4 = 0xE400000000000000;
  if ((a2 & 1) != 0)
    v5 = 1701080931;
  else
    v5 = 0x6E69616D6F64;
  if ((a2 & 1) != 0)
    v6 = 0xE400000000000000;
  else
    v6 = 0xE600000000000000;
  if (v3 == v5 && v4 == v6)
    v7 = 1;
  else
    v7 = sub_23D66C84C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v7 & 1;
}

uint64_t sub_23D5AA238(unsigned __int8 a1, unsigned __int8 a2)
{
  int v2;
  uint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;
  char v8;

  v2 = a1;
  if (a1)
  {
    if (a1 == 1)
      v3 = 0x6C616E7265746E69;
    else
      v3 = 0x424470756F7247;
    if (v2 == 1)
      v4 = 0xE800000000000000;
    else
      v4 = 0xE700000000000000;
    v5 = a2;
    if (a2)
    {
LABEL_9:
      if (v5 == 1)
        v6 = 0x6C616E7265746E69;
      else
        v6 = 0x424470756F7247;
      if (v5 == 1)
        v7 = 0xE800000000000000;
      else
        v7 = 0xE700000000000000;
      if (v3 != v6)
        goto LABEL_21;
      goto LABEL_19;
    }
  }
  else
  {
    v4 = 0xE800000000000000;
    v3 = 0x6C616E7265747865;
    v5 = a2;
    if (a2)
      goto LABEL_9;
  }
  v7 = 0xE800000000000000;
  if (v3 != 0x6C616E7265747865)
  {
LABEL_21:
    v8 = sub_23D66C84C();
    goto LABEL_22;
  }
LABEL_19:
  if (v4 != v7)
    goto LABEL_21;
  v8 = 1;
LABEL_22:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_23D5AA328(uint64_t a1)
{
  MEMORY[0x242636790](&unk_23D66D918, a1);
  return sub_23D66C474();
}

uint64_t sub_23D5AA374()
{
  MEMORY[0x242636790](&unk_23D66D918);
  return sub_23D66C48C();
}

uint64_t sub_23D5AA3C4()
{
  MEMORY[0x242636790](&unk_23D66D918);
  return sub_23D66C480();
}

uint64_t sub_23D5AA414@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = sub_23D5AA0C8();
  *a1 = result;
  return result;
}

uint64_t sub_23D5AA450@<X0>(uint64_t *a1@<X8>)
{
  char *v1;
  uint64_t result;
  uint64_t v4;

  result = sub_23D5AA118(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_23D5AA488()
{
  char *v0;

  return sub_23D5AA118(*v0);
}

uint64_t sub_23D5AA4A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _BYTE *a4@<X8>)
{
  return sub_23D5AA4AC(a1, a2, a3, (uint64_t (*)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23D5AA0C8, a4);
}

uint64_t sub_23D5AA4AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t (*a4)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X4>, _BYTE *a5@<X8>)
{
  uint64_t result;

  result = a4(a1, a2, a3[2], a3[3], a3[4], a3[5], a3[6]);
  *a5 = result;
  return result;
}

uint64_t sub_23D5AA4E4@<X0>(_QWORD *a1@<X1>, _BYTE *a2@<X8>)
{
  return sub_23D5AA4F0(a1, (uint64_t (*)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD))sub_23D5AD194, a2);
}

uint64_t sub_23D5AA4F0@<X0>(_QWORD *a1@<X1>, uint64_t (*a2)(_QWORD, _QWORD, _QWORD, _QWORD, _QWORD)@<X3>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = a2(a1[2], a1[3], a1[4], a1[5], a1[6]);
  *a3 = result;
  return result;
}

uint64_t sub_23D5AA528(uint64_t a1)
{
  MEMORY[0x242636790](&unk_23D66DBE8, a1);
  return sub_23D66C930();
}

uint64_t sub_23D5AA55C(uint64_t a1)
{
  MEMORY[0x242636790](&unk_23D66DBE8, a1);
  return sub_23D66C93C();
}

void static GroupKitCryptoError.== infix<A>(_:_:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[18];

  v24[10] = a2;
  v13 = sub_23D66C5B8();
  v14 = MEMORY[0x24BDAC7A8](v13);
  v24[5] = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = MEMORY[0x24BDAC7A8](v14);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v24[2] = (char *)v24 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v24[1] = (char *)v24 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v24[3] = (char *)v24 - v22;
  MEMORY[0x24BDAC7A8](v21);
  v24[4] = (char *)v24 - v23;
  v24[12] = a4;
  v24[13] = a9;
  v24[6] = a9;
  v24[7] = a10;
  v24[14] = a10;
  v24[15] = a11;
  v24[8] = a12;
  v24[9] = a11;
  v24[16] = a12;
  type metadata accessor for GroupKitCryptoError();
}

uint64_t sub_23D5AA6D0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v9;
  _BYTE *v10;
  void (*v11)(uint64_t, _BYTE *, uint64_t);
  uint64_t v12;
  unsigned int (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  void (*v16)(uint64_t, uint64_t, uint64_t);
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v9 = v4;
  v10 = &v4[*(int *)(a1 + 60)];
  v11 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v6 + 16);
  v12 = v3;
  v11(v5, v10, v3);
  v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48);
  if (v13(v5, 1, v1) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v3);
    *(_BYTE *)(v7 - 129) = *v9;
    v14 = *(_QWORD *)(v7 - 176);
    *(_QWORD *)(v7 - 128) = v1;
    *(_QWORD *)(v7 - 120) = v14;
    v15 = *(_QWORD *)(v7 - 152);
    *(_QWORD *)(v7 - 112) = *(_QWORD *)(v7 - 168);
    *(_QWORD *)(v7 - 104) = v15;
    *(_QWORD *)(v7 - 96) = *(_QWORD *)(v7 - 160);
    type metadata accessor for GroupKitCryptoError.ErrorDescription();
  }
  *(_QWORD *)(v7 - 224) = v9;
  v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32);
  v17 = *(_QWORD *)(v7 - 192);
  v16(v17, v5, v1);
  v18 = (_BYTE *)(*(_QWORD *)(v7 - 144) + *(int *)(a1 + 60));
  v19 = *(_QWORD *)(v7 - 184);
  v11(v19, v18, v12);
  if (v13(v19, 1, v1) != 1)
  {
    v16(*(_QWORD *)(v7 - 200), v19, v1);
    *(_BYTE *)(v7 - 129) = **(_BYTE **)(v7 - 224);
    v20 = *(_QWORD *)(v7 - 176);
    *(_QWORD *)(v7 - 128) = v1;
    *(_QWORD *)(v7 - 120) = v20;
    v21 = *(_QWORD *)(v7 - 152);
    *(_QWORD *)(v7 - 112) = *(_QWORD *)(v7 - 168);
    *(_QWORD *)(v7 - 104) = v21;
    *(_QWORD *)(v7 - 96) = *(_QWORD *)(v7 - 160);
    type metadata accessor for GroupKitCryptoError.ErrorDescription();
  }
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v17, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v19, v12);
  return 0;
}

uint64_t GroupKitCryptoError.ErrorDescription.rawValue.getter()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D5AAA20 + 4 * word_23D66CFA0[*v0]))(0x4164696C61766E69, 0xEF746E656D756772);
}

unint64_t sub_23D5AAA20()
{
  return 0xD000000000000017;
}

void type metadata accessor for GroupKitCryptoError()
{
  JUMPOUT(0x24263673CLL);
}

void type metadata accessor for GroupKitCryptoError.ErrorDescription()
{
  JUMPOUT(0x24263673CLL);
}

void GroupKitCryptoError.localizedDescription.getter(uint64_t a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 16);
  sub_23D66C5B8();
  v4 = ((uint64_t (*)(void))MEMORY[0x24BDAC7A8])();
  MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v8 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = *v1;
  v6 = *(_QWORD *)(a1 + 40);
  v7 = *(_QWORD *)(a1 + 48);
  v10 = v3;
  v11 = *(_OWORD *)(a1 + 24);
  v12 = v6;
  v13 = v7;
  type metadata accessor for GroupKitCryptoError.ErrorDescription();
}

uint64_t sub_23D5ABAF0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  GroupKitCryptoError.ErrorDescription.rawValue.getter();
  *(_QWORD *)(v7 - 120) = 0xD000000000000014;
  *(_QWORD *)(v7 - 112) = 0x800000023D676D30;
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(v7 - 112);
  *(_QWORD *)(v7 - 120) = *(_QWORD *)(v7 - 120);
  *(_QWORD *)(v7 - 112) = v8;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 16))(v3, v4 + *(int *)(v5 + 60), v2);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v3, 1, v0) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
  }
  else
  {
    v9 = *(_QWORD *)(v7 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9, v3, v0);
    sub_23D66C8A0();
    *(_QWORD *)(v7 - 136) = 0xD000000000000013;
    *(_QWORD *)(v7 - 128) = 0x800000023D676D50;
    sub_23D66C3D8();
    swift_bridgeObjectRelease();
    v10 = *(_QWORD *)(v7 - 128);
    *(_QWORD *)(v7 - 136) = *(_QWORD *)(v7 - 136);
    *(_QWORD *)(v7 - 128) = v10;
    swift_bridgeObjectRetain();
    sub_23D66C3D8();
    swift_bridgeObjectRelease();
    sub_23D66C3D8();
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v9, v0);
  }
  return *(_QWORD *)(v7 - 120);
}

uint64_t GroupKitCryptoError.ErrorDescription.init(rawValue:)@<X0>(char *a1@<X8>)
{
  unint64_t v2;
  uint64_t result;
  unint64_t v4;
  char v5;

  v2 = sub_23D66C864();
  result = swift_bridgeObjectRelease();
  v4 = v2 - 128;
  if (v2 >= 0x80)
  {
    v5 = -101;
    LOBYTE(v2) = 0x80;
    switch(v4)
    {
      case 0uLL:
        goto LABEL_2;
      case 1uLL:
        LOBYTE(v2) = -127;
        goto LABEL_2;
      case 2uLL:
        LOBYTE(v2) = -126;
        goto LABEL_2;
      case 3uLL:
        LOBYTE(v2) = -125;
        goto LABEL_2;
      case 4uLL:
        LOBYTE(v2) = -124;
        goto LABEL_2;
      case 5uLL:
        LOBYTE(v2) = -123;
        goto LABEL_2;
      case 6uLL:
        LOBYTE(v2) = -122;
        goto LABEL_2;
      case 7uLL:
        LOBYTE(v2) = -121;
        goto LABEL_2;
      case 8uLL:
        LOBYTE(v2) = -120;
        goto LABEL_2;
      case 9uLL:
        LOBYTE(v2) = -119;
        goto LABEL_2;
      case 0xAuLL:
        LOBYTE(v2) = -118;
        goto LABEL_2;
      case 0xBuLL:
        LOBYTE(v2) = -117;
        goto LABEL_2;
      case 0xCuLL:
        LOBYTE(v2) = -116;
        goto LABEL_2;
      case 0xDuLL:
        LOBYTE(v2) = -115;
        goto LABEL_2;
      case 0xEuLL:
        LOBYTE(v2) = -114;
        goto LABEL_2;
      case 0xFuLL:
        LOBYTE(v2) = -113;
        goto LABEL_2;
      case 0x10uLL:
        LOBYTE(v2) = -112;
        goto LABEL_2;
      case 0x11uLL:
        LOBYTE(v2) = -111;
        goto LABEL_2;
      case 0x12uLL:
        LOBYTE(v2) = -110;
        goto LABEL_2;
      case 0x13uLL:
        LOBYTE(v2) = -109;
        goto LABEL_2;
      case 0x14uLL:
        LOBYTE(v2) = -108;
        goto LABEL_2;
      case 0x15uLL:
        LOBYTE(v2) = -107;
        goto LABEL_2;
      case 0x16uLL:
        LOBYTE(v2) = -106;
        goto LABEL_2;
      case 0x17uLL:
        LOBYTE(v2) = -105;
        goto LABEL_2;
      case 0x18uLL:
        LOBYTE(v2) = -104;
        goto LABEL_2;
      case 0x19uLL:
        LOBYTE(v2) = -103;
        goto LABEL_2;
      case 0x1AuLL:
        LOBYTE(v2) = -102;
        goto LABEL_2;
      case 0x1BuLL:
        break;
      case 0x1CuLL:
        v5 = -100;
        break;
      case 0x1DuLL:
        v5 = -99;
        break;
      case 0x1EuLL:
        v5 = -98;
        break;
      case 0x1FuLL:
        v5 = -97;
        break;
      case 0x20uLL:
        v5 = -96;
        break;
      case 0x21uLL:
        v5 = -95;
        break;
      case 0x22uLL:
        v5 = -94;
        break;
      case 0x23uLL:
        v5 = -93;
        break;
      case 0x24uLL:
        v5 = -92;
        break;
      case 0x25uLL:
        v5 = -91;
        break;
      case 0x26uLL:
        v5 = -90;
        break;
      case 0x27uLL:
        v5 = -89;
        break;
      case 0x28uLL:
        v5 = -88;
        break;
      case 0x29uLL:
        v5 = -87;
        break;
      case 0x2AuLL:
        v5 = -86;
        break;
      case 0x2BuLL:
        v5 = -85;
        break;
      case 0x2CuLL:
        v5 = -84;
        break;
      default:
        v5 = -83;
        break;
    }
  }
  else
  {
LABEL_2:
    v5 = v2;
  }
  *a1 = v5;
  return result;
}

uint64_t sub_23D5ABE2C(uint64_t a1)
{
  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription, a1);
  return sub_23D66C474();
}

uint64_t sub_23D5ABE78()
{
  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription);
  return sub_23D66C48C();
}

uint64_t sub_23D5ABEC8()
{
  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription);
  return sub_23D66C480();
}

uint64_t sub_23D5ABF18@<X0>(char *a1@<X8>)
{
  return GroupKitCryptoError.ErrorDescription.init(rawValue:)(a1);
}

uint64_t sub_23D5ABF24@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;

  result = GroupKitCryptoError.ErrorDescription.rawValue.getter();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_23D5ABF48()
{
  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription);
  return sub_23D66C498();
}

uint64_t sub_23D5ABFAC()
{
  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription);
  return sub_23D66C468();
}

uint64_t sub_23D5AC000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription, a3);
  return sub_23D66C858();
}

void GroupKitCryptoError.encode(to:)()
{
  type metadata accessor for GroupKitCryptoError.CodingKeys();
}

void sub_23D5AC0AC(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;

  MEMORY[0x242636790](&unk_23D66DBE8, a1);
  v4 = sub_23D66C81C();
  *(_QWORD *)(v3 - 136) = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  __swift_project_boxed_opaque_existential_1(v1, v1[3]);
  v5 = *(_QWORD *)(v3 - 176);
  v6 = *(_BYTE **)(v3 - 144);
  sub_23D66C924();
  *(_BYTE *)(v3 - 65) = *v6;
  *(_BYTE *)(v3 - 66) = 0;
  v7 = *(_QWORD *)(v3 - 152);
  *(_QWORD *)(v3 - 120) = v5;
  *(_QWORD *)(v3 - 112) = v7;
  v8 = *(_QWORD *)(v3 - 160);
  *(_QWORD *)(v3 - 104) = v2;
  *(_QWORD *)(v3 - 96) = v8;
  *(_QWORD *)(v3 - 88) = *(_QWORD *)(v3 - 168);
  type metadata accessor for GroupKitCryptoError.ErrorDescription();
}

uint64_t sub_23D5AC170(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;

  MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>.ErrorDescription, a1);
  v4 = *(_QWORD *)(v3 - 128);
  sub_23D66C810();
  if (v4)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 136) + 8))(v1, v2);
  v6 = *(_QWORD *)(v3 - 136);
  *(_BYTE *)(v3 - 120) = 1;
  sub_23D66C7EC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v1, v2);
}

void type metadata accessor for GroupKitCryptoError.CodingKeys()
{
  JUMPOUT(0x24263673CLL);
}

_QWORD *__swift_project_boxed_opaque_existential_1(_QWORD *result, uint64_t a2)
{
  if ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) & 0x20000) != 0)
    return (_QWORD *)(*result
                    + ((*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80) + 16) & ~(unint64_t)*(_DWORD *)(*(_QWORD *)(a2 - 8) + 80)));
  return result;
}

void GroupKitCryptoError.init(from:)(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[22];

  v13[1] = a6;
  v11 = sub_23D66C5B8();
  v13[11] = *(_QWORD *)(v11 - 8);
  v13[12] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13[3] = (char *)v13 - v12;
  v13[16] = a1;
  v13[17] = a2;
  v13[18] = a3;
  v13[19] = a4;
  v13[20] = a5;
  type metadata accessor for GroupKitCryptoError.CodingKeys();
}

void sub_23D5AC2E0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(v6 - 144) = MEMORY[0x242636790](&unk_23D66DBE8, a1);
  v7 = sub_23D66C7D4();
  *(_QWORD *)(v6 - 184) = v7;
  *(_QWORD *)(v6 - 240) = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  *(_QWORD *)(v6 - 128) = v5;
  *(_QWORD *)(v6 - 120) = v1;
  *(_QWORD *)(v6 - 208) = v2;
  *(_QWORD *)(v6 - 200) = v1;
  *(_QWORD *)(v6 - 224) = v4;
  *(_QWORD *)(v6 - 216) = v3;
  *(_QWORD *)(v6 - 112) = v4;
  *(_QWORD *)(v6 - 104) = v3;
  *(_QWORD *)(v6 - 96) = v2;
  type metadata accessor for GroupKitCryptoError();
}

uint64_t sub_23D5AC358(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  _BYTE *v9;
  void (*v10)(void);
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v20[96];

  *(_QWORD *)(v4 - 256) = *(_QWORD *)(a1 - 8);
  v6 = MEMORY[0x24BDAC7A8](a1);
  v8 = &v20[-v7];
  v9 = &v20[*(int *)(v6 + 60) - v7];
  v10 = *(void (**)(void))(*(_QWORD *)(v2 - 8) + 56);
  *(_QWORD *)(v4 - 176) = v9;
  v10();
  v11 = (uint64_t *)&v8[*(int *)(a1 + 64)];
  v11[4] = 0;
  *(_OWORD *)v11 = 0u;
  *((_OWORD *)v11 + 1) = 0u;
  v12 = v1[3];
  *(_QWORD *)(v4 - 152) = v1;
  __swift_project_boxed_opaque_existential_1(v1, v12);
  *(_QWORD *)(v4 - 192) = v3;
  v13 = *(_QWORD *)(v4 - 136);
  sub_23D66C918();
  if (!v13)
  {
    *(_QWORD *)(v4 - 136) = a1;
    *(_QWORD *)(v4 - 128) = v2;
    v14 = *(_QWORD *)(v4 - 224);
    *(_QWORD *)(v4 - 120) = *(_QWORD *)(v4 - 200);
    *(_QWORD *)(v4 - 112) = v14;
    v15 = *(_QWORD *)(v4 - 208);
    *(_QWORD *)(v4 - 104) = *(_QWORD *)(v4 - 216);
    *(_QWORD *)(v4 - 96) = v15;
    type metadata accessor for GroupKitCryptoError.ErrorDescription();
  }
  v16 = *(_QWORD *)(v4 - 160);
  v18 = *(_QWORD *)(v4 - 176);
  v17 = *(_QWORD *)(v4 - 168);
  __swift_destroy_boxed_opaque_existential_1(*(_QWORD *)(v4 - 152));
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v18, v16);
  return sub_23D5AC594(*v11, v11[1], v11[2]);
}

uint64_t __swift_destroy_boxed_opaque_existential_1(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(*(_QWORD *)(a1 + 24) - 8);
  if ((*(_BYTE *)(v1 + 82) & 2) != 0)
    return swift_release();
  else
    return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_23D5AC594(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

void sub_23D5AC5C4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  static GroupKitCryptoError.== infix<A>(_:_:)(a1, a2, (uint64_t)a3, a3[2], a5, a6, a7, a8, a3[3], a3[4], a3[5], a3[6]);
}

uint64_t sub_23D5AC5E8(char a1)
{
  return a1 & 1;
}

void sub_23D5AC608(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  GroupKitCryptoError.init(from:)(a1[2], a1[3], a1[4], a1[5], a1[6], a2);
}

void sub_23D5AC62C()
{
  GroupKitCryptoError.encode(to:)();
}

uint64_t static NoGKCSubError.== infix(_:_:)()
{
  return 1;
}

uint64_t sub_23D5AC648()
{
  return 0;
}

uint64_t sub_23D5AC654@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result;

  result = swift_bridgeObjectRelease();
  *a1 = 1;
  return result;
}

void sub_23D5AC680(_BYTE *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_23D5AC68C()
{
  sub_23D5AC7E0();
  return sub_23D66C930();
}

uint64_t sub_23D5AC6B4()
{
  sub_23D5AC7E0();
  return sub_23D66C93C();
}

uint64_t NoGKCSubError.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C78DC8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5AC7E0();
  sub_23D66C924();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t __swift_instantiateConcreteTypeFromMangledName(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242636778]((char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

unint64_t sub_23D5AC7E0()
{
  unint64_t result;

  result = qword_256C78DD0;
  if (!qword_256C78DD0)
  {
    result = MEMORY[0x242636790](&unk_23D66DB98, &type metadata for NoGKCSubError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C78DD0);
  }
  return result;
}

uint64_t NoGKCSubError.init(from:)(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_23D5AC848(uint64_t a1)
{
  return __swift_destroy_boxed_opaque_existential_1(a1);
}

uint64_t sub_23D5AC86C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C78DC8);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5AC7E0();
  sub_23D66C924();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t sub_23D5AC930()
{
  return 1;
}

id PCSError.rawError.getter()
{
  id *v0;
  id v1;
  id v2;

  v1 = *v0;
  v2 = *v0;
  return v1;
}

uint64_t PCSError.init(_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  _QWORD *v5;

  type metadata accessor for CFError(0);
  sub_23D5AE928(&qword_256C78DD8, (uint64_t (*)(uint64_t))type metadata accessor for CFError, MEMORY[0x24BDCFD90]);
  result = swift_allocError();
  *v5 = a1;
  *a2 = result;
  return result;
}

void type metadata accessor for CFError(uint64_t a1)
{
  sub_23D5AE888(a1, qword_256C78F88);
}

uint64_t PCSError.init(_:)@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  return result;
}

uint64_t sub_23D5AC9E8(char *a1, char *a2)
{
  return sub_23D5AA1A0(*a1, *a2);
}

uint64_t sub_23D5AC9F4()
{
  sub_23D66C8E8();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  return sub_23D66C90C();
}

uint64_t sub_23D5ACA68()
{
  sub_23D66C3CC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D5ACAB8()
{
  sub_23D66C8E8();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  return sub_23D66C90C();
}

uint64_t sub_23D5ACB28@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23D66C774();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_23D5ACB84(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = 1701080931;
  if (!*v1)
    v2 = 0x6E69616D6F64;
  v3 = 0xE600000000000000;
  if (*v1)
    v3 = 0xE400000000000000;
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_23D5ACBB8()
{
  _BYTE *v0;

  if (*v0)
    return 1701080931;
  else
    return 0x6E69616D6F64;
}

uint64_t sub_23D5ACBE8@<X0>(char *a1@<X8>)
{
  uint64_t v2;
  uint64_t result;
  char v4;

  v2 = sub_23D66C774();
  result = swift_bridgeObjectRelease();
  if (v2 == 1)
    v4 = 1;
  else
    v4 = 2;
  if (!v2)
    v4 = 0;
  *a1 = v4;
  return result;
}

void sub_23D5ACC48(_BYTE *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_23D5ACC54()
{
  sub_23D5ACE5C();
  return sub_23D66C930();
}

uint64_t sub_23D5ACC7C()
{
  sub_23D5ACE5C();
  return sub_23D66C93C();
}

uint64_t PCSError.init(from:)@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  void *v10;
  id v11;
  uint64_t v13;
  id v14;
  char v15;
  char v16;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C78DE0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ACE5C();
  sub_23D66C918();
  if (!v2)
  {
    v16 = 0;
    sub_23D66C7A4();
    v15 = 1;
    v9 = sub_23D66C7B0();
    v14 = objc_allocWithZone(MEMORY[0x24BDD1540]);
    v10 = (void *)sub_23D66C390();
    swift_bridgeObjectRelease();
    v11 = objc_msgSend(v14, sel_initWithDomain_code_userInfo_, v10, v9, 0);

    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

unint64_t sub_23D5ACE5C()
{
  unint64_t result;

  result = qword_256C78DE8;
  if (!qword_256C78DE8)
  {
    result = MEMORY[0x242636790](&unk_23D66DB48, &type metadata for PCSError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C78DE8);
  }
  return result;
}

void PCSError.encode(to:)(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  id v8;
  uint64_t v9;
  char v10;
  char v11;

  v3 = __swift_instantiateConcreteTypeFromMangledName(qword_256C78DF0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v9 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = (void *)sub_23D66BCD0();
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ACE5C();
  sub_23D66C924();
  objc_msgSend(v7, sel_code);
  v11 = 1;
  sub_23D66C804();
  if (v1)
  {
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

  }
  else
  {
    v8 = objc_msgSend(v7, sel_domain);
    sub_23D66C39C();

    v10 = 0;
    sub_23D66C7F8();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);

    swift_bridgeObjectRelease();
  }
}

uint64_t sub_23D5AD028@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  return PCSError.init(from:)(a1, a2);
}

void sub_23D5AD03C(_QWORD *a1)
{
  PCSError.encode(to:)(a1);
}

void sub_23D5AD050(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_23D5AD058(uint64_t a1)
{
  MEMORY[0x242636790](&unk_23D66DDD0, a1);
  return sub_23D66BE44();
}

uint64_t sub_23D5AD094()
{
  MEMORY[0x242636790](&unk_23D66DDD0);
  return sub_23D66BE38();
}

uint64_t sub_23D5AD0DC(uint64_t a1, uint64_t a2)
{
  sub_23D66C8E8();
  MEMORY[0x242636790](&unk_23D66DDD0, a2);
  sub_23D66BE38();
  return sub_23D66C90C();
}

_QWORD *sub_23D5AD134@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_23D5AD140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MEMORY[0x242636790](&unk_23D66DDD0, a3);
  return sub_23D66BE2C();
}

uint64_t sub_23D5AD18C()
{
  return 3;
}

uint64_t sub_23D5AD194()
{
  return 2;
}

uint64_t _s14GroupKitCrypto8PCSErrorV2eeoiySbAC_ACtFZ_0()
{
  void *v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v12;

  v0 = (void *)sub_23D66BCD0();
  v1 = (void *)sub_23D66BCD0();
  v2 = objc_msgSend(v0, sel_code);
  if (v2 == objc_msgSend(v1, sel_code))
  {
    v3 = objc_msgSend(v0, sel_domain);
    v4 = sub_23D66C39C();
    v6 = v5;

    v7 = objc_msgSend(v1, sel_domain);
    v8 = sub_23D66C39C();
    v10 = v9;

    if (v4 == v8 && v6 == v10)
      v12 = 1;
    else
      v12 = sub_23D66C84C();

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {

    v12 = 0;
  }
  return v12 & 1;
}

void sub_23D5AD2C0()
{
  JUMPOUT(0x242636790);
}

uint64_t sub_23D5AD2D0()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23D5AD2D8()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66C5B8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D5AD358(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  size_t v8;
  size_t v9;
  int v10;
  uint64_t v13;
  void *v14;
  const void *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;

  v3 = a1;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  v7 = v6;
  if (*(_DWORD *)(v5 + 84))
    v8 = *(_QWORD *)(v5 + 64);
  else
    v8 = *(_QWORD *)(v5 + 64) + 1;
  v9 = v8 + 7;
  v10 = v6 & 0x100000;
  if (v7 > 7 || v10 != 0 || ((v8 + 7 + ((v7 + 1) & ~v7)) & 0xFFFFFFFFFFFFFFF8) + 40 > 0x18)
  {
    v13 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v13 + ((v7 & 0xF8 ^ 0x1F8) & (v7 + 16)));
    swift_retain();
  }
  else
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    v14 = (void *)(((unint64_t)a1 + v7 + 1) & ~v7);
    v15 = (const void *)(((unint64_t)a2 + v7 + 1) & ~v7);
    if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v15, 1, v4))
    {
      memcpy(v14, v15, v8);
    }
    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v14, v15, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v14, 0, 1, v4);
    }
    v16 = ((unint64_t)v14 + v9) & 0xFFFFFFFFFFFFFFF8;
    v17 = ((unint64_t)v15 + v9) & 0xFFFFFFFFFFFFFFF8;
    if (*(_QWORD *)(v17 + 16) < 0xFFFFFFFFuLL)
    {
      v18 = *(_OWORD *)v17;
      v19 = *(_OWORD *)(v17 + 16);
      *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
      *(_OWORD *)v16 = v18;
      *(_OWORD *)(v16 + 16) = v19;
    }
    else
    {
      *(_QWORD *)v16 = *(_QWORD *)v17;
      *(_QWORD *)(v16 + 8) = *(_QWORD *)(v17 + 8);
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v16 + 24) = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v16 + 32) = *(_QWORD *)(v17 + 32);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
    }
  }
  return v3;
}

unint64_t sub_23D5AD4E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t result;

  v2 = *(_QWORD *)(a2 + 16);
  v3 = *(_QWORD *)(v2 - 8);
  v4 = (a1 + *(unsigned __int8 *)(v3 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  if (!(*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1, v2))
    (*(void (**)(unint64_t, uint64_t))(v3 + 8))(v4, v2);
  v5 = v4 + *(_QWORD *)(v3 + 64);
  if (!*(_DWORD *)(v3 + 84))
    ++v5;
  result = *(_QWORD *)(((v5 + 7) & 0xFFFFFFFFFFFFFFF8) + 16);
  if (result >= 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

_BYTE *sub_23D5AD584(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (const void *)((unint64_t)&a2[v6 + 1] & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = ((unint64_t)v7 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v14 = ((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 16) < 0xFFFFFFFFuLL)
  {
    v15 = *(_OWORD *)v14;
    v16 = *(_OWORD *)(v14 + 16);
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
    *(_OWORD *)v13 = v15;
    *(_OWORD *)(v13 + 16) = v16;
  }
  else
  {
    *(_QWORD *)v13 = *(_QWORD *)v14;
    *(_QWORD *)(v13 + 8) = *(_QWORD *)(v14 + 8);
    *(_QWORD *)(v13 + 16) = *(_QWORD *)(v14 + 16);
    *(_QWORD *)(v13 + 24) = *(_QWORD *)(v14 + 24);
    *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  return a1;
}

_BYTE *sub_23D5AD6C0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (void *)((unint64_t)&a2[v6 + 1] & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 16))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = (_QWORD *)(((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v15 = (_QWORD *)(((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8);
  v16 = v15[2];
  if (v14[2] < 0xFFFFFFFFuLL)
  {
    if (v16 >= 0xFFFFFFFF)
    {
      *v14 = *v15;
      v14[1] = v15[1];
      v14[2] = v15[2];
      v14[3] = v15[3];
      v14[4] = v15[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      return a1;
    }
LABEL_19:
    v17 = *(_OWORD *)v15;
    v18 = *((_OWORD *)v15 + 1);
    v14[4] = v15[4];
    *(_OWORD *)v14 = v17;
    *((_OWORD *)v14 + 1) = v18;
    return a1;
  }
  if (v16 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_19;
  }
  *v14 = *v15;
  v14[1] = v15[1];
  v14[2] = v15[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14[3] = v15[3];
  v14[4] = v15[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_BYTE *sub_23D5AD8BC(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  const void *v8;
  int v9;
  size_t v10;
  size_t v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  __int128 v16;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (const void *)((unint64_t)&a2[v6 + 1] & ~v6);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(v8, 1, v4))
  {
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
    if (v9)
      v11 = v10;
    else
      v11 = v10 + 1;
    memcpy(v7, v8, v11);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(v7, v8, v4);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
    v9 = *(_DWORD *)(v5 + 84);
    v10 = *(_QWORD *)(v5 + 64);
  }
  if (v9)
    v12 = v10;
  else
    v12 = v10 + 1;
  v13 = (uint64_t)v7 + v12 + 7;
  v14 = ((unint64_t)v8 + v12 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = *(_OWORD *)v14;
  v16 = *(_OWORD *)(v14 + 16);
  v13 &= 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)(v13 + 32) = *(_QWORD *)(v14 + 32);
  *(_OWORD *)v13 = v15;
  *(_OWORD *)(v13 + 16) = v16;
  return a1;
}

_BYTE *sub_23D5AD9B0(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  void *v8;
  uint64_t (*v9)(void *, uint64_t, uint64_t);
  int v10;
  int v11;
  size_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;

  *a1 = *a2;
  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(unsigned __int8 *)(v5 + 80);
  v7 = (void *)((unint64_t)&a1[v6 + 1] & ~v6);
  v8 = (void *)((unint64_t)&a2[v6 + 1] & ~v6);
  v9 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  v10 = v9(v7, 1, v4);
  v11 = v9(v8, 1, v4);
  if (v10)
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 32))(v7, v8, v4);
      (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v5 + 56))(v7, 0, 1, v4);
      goto LABEL_10;
    }
  }
  else
  {
    if (!v11)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(v7, v8, v4);
      goto LABEL_10;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(v7, v4);
  }
  if (*(_DWORD *)(v5 + 84))
    v12 = *(_QWORD *)(v5 + 64);
  else
    v12 = *(_QWORD *)(v5 + 64) + 1;
  memcpy(v7, v8, v12);
LABEL_10:
  if (*(_DWORD *)(v5 + 84))
    v13 = *(_QWORD *)(v5 + 64);
  else
    v13 = *(_QWORD *)(v5 + 64) + 1;
  v14 = ((unint64_t)v7 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  v15 = ((unint64_t)v8 + v13 + 7) & 0xFFFFFFFFFFFFFFF8;
  if (*(_QWORD *)(v14 + 16) < 0xFFFFFFFFuLL)
    goto LABEL_17;
  if (*(_QWORD *)(v15 + 16) < 0xFFFFFFFFuLL)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_17:
    v16 = *(_OWORD *)v15;
    v17 = *(_OWORD *)(v15 + 16);
    *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
    *(_OWORD *)v14 = v16;
    *(_OWORD *)(v14 + 16) = v17;
    return a1;
  }
  *(_QWORD *)v14 = *(_QWORD *)v15;
  *(_QWORD *)(v14 + 8) = *(_QWORD *)(v15 + 8);
  *(_QWORD *)(v14 + 16) = *(_QWORD *)(v15 + 16);
  swift_bridgeObjectRelease();
  *(_QWORD *)(v14 + 24) = *(_QWORD *)(v15 + 24);
  *(_QWORD *)(v14 + 32) = *(_QWORD *)(v15 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23D5ADB54(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5)
    v6 = v5 - 1;
  else
    v6 = 0;
  if (v6 <= 0x7FFFFFFE)
    v7 = 2147483646;
  else
    v7 = v6;
  v8 = *(_QWORD *)(v4 + 64);
  if (!v5)
    ++v8;
  if (!a2)
    return 0;
  v9 = *(unsigned __int8 *)(v4 + 80);
  v10 = v8 + 7;
  if (v7 < a2)
  {
    if (((((v10 + ((v9 + 1) & ~v9)) & 0xFFFFFFFFFFFFFFF8) + 40) & 0xFFFFFFF8) != 0)
      v11 = 2;
    else
      v11 = a2 - v7 + 1;
    if (v11 >= 0x10000)
      v12 = 4;
    else
      v12 = 2;
    if (v11 < 0x100)
      v12 = 1;
    if (v11 >= 2)
      v13 = v12;
    else
      v13 = 0;
    __asm { BR              X17 }
  }
  v15 = (a1 + v9 + 1) & ~v9;
  if (v6 < 0x7FFFFFFE)
  {
    v17 = *(_QWORD *)(((v10 + v15) & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v17 >= 0xFFFFFFFF)
      LODWORD(v17) = -1;
    if ((v17 + 1) >= 2)
      return v17;
    else
      return 0;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(v4 + 48))(v15);
    if (v16 >= 2)
      return v16 - 1;
    else
      return 0;
  }
}

void sub_23D5ADCB0(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  int v14;
  unsigned int v15;

  v6 = 0;
  v7 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v8 = *(_DWORD *)(v7 + 84);
  if (v8)
    v9 = v8 - 1;
  else
    v9 = 0;
  if (v9 <= 0x7FFFFFFE)
    v10 = 2147483646;
  else
    v10 = v9;
  v11 = *(_QWORD *)(v7 + 64);
  if (!v8)
    ++v11;
  if (v10 < a3)
  {
    v12 = a3 - v10;
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 1) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) == 0xFFFFFFD8)
      v13 = v12 + 1;
    else
      v13 = 2;
    if (v13 >= 0x10000)
      v14 = 4;
    else
      v14 = 2;
    if (v13 < 0x100)
      v14 = 1;
    if (v13 >= 2)
      v6 = v14;
    else
      v6 = 0;
  }
  if (a2 > v10)
  {
    if ((((_DWORD)v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 1) & ~*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFF8) != 0xFFFFFFD8)
    {
      v15 = ~v10 + a2;
      bzero(a1, ((v11 + 7 + ((*(unsigned __int8 *)(v7 + 80) + 1) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))) & 0xFFFFFFFFFFFFFFF8)+ 40);
      *a1 = v15;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X16 }
}

uint64_t sub_23D5ADDBC@<X0>(unsigned int a1@<W1>, size_t a2@<X8>, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  int v18;
  unint64_t v19;
  uint64_t result;

  *(_BYTE *)(v15 + v16) = 0;
  if (a1)
  {
    v17 = (void *)((v15 + v14 + 1) & v10);
    if (v11 < 0x7FFFFFFE)
    {
      v19 = ((unint64_t)v17 + v13) & 0xFFFFFFFFFFFFFFF8;
      if (a1 > 0x7FFFFFFE)
      {
        *(_QWORD *)(v19 + 32) = 0;
        *(_OWORD *)v19 = 0u;
        *(_OWORD *)(v19 + 16) = 0u;
        *(_DWORD *)v19 = a1 - 0x7FFFFFFF;
      }
      else
      {
        *(_QWORD *)(v19 + 16) = a1;
      }
    }
    else if (v11 >= a1)
    {
      return (*(uint64_t (**)(void *, _QWORD))(v12 + 56))(v17, a1 + 1);
    }
    else if ((_DWORD)a2)
    {
      if (a2 <= 3)
        v18 = a2;
      else
        v18 = 4;
      bzero(v17, a2);
      __asm { BR              X10 }
    }
  }
  return result;
}

void sub_23D5ADED4()
{
  uint64_t v0;
  int v1;

  *(_WORD *)v0 = v1;
  *(_BYTE *)(v0 + 2) = BYTE2(v1);
}

void sub_23D5ADEE4()
{
  _WORD *v0;
  __int16 v1;

  *v0 = v1;
}

void sub_23D5ADEEC()
{
  _DWORD *v0;
  int v1;

  *v0 = v1;
}

uint64_t sub_23D5ADEF8()
{
  return swift_allocateGenericValueMetadata();
}

_BYTE *__swift_memcpy1_1(_BYTE *result, _BYTE *a2)
{
  *result = *a2;
  return result;
}

uint64_t sub_23D5ADF10(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0x54)
    goto LABEL_17;
  if (a2 + 172 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 172) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 172;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 172;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 172;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xAD;
  v8 = v6 - 173;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23D5ADFA0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 172 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 172) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0x54)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0x53)
    return ((uint64_t (*)(void))((char *)&loc_23D5ADFEC + 4 * byte_23D66D13F[v4]))();
  *a1 = a2 - 84;
  return ((uint64_t (*)(void))((char *)sub_23D5AE020 + 4 * byte_23D66D13A[v4]))();
}

uint64_t sub_23D5AE020(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE028(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D5AE030);
  return result;
}

uint64_t sub_23D5AE03C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D5AE044);
  *(_BYTE *)result = a2 - 84;
  return result;
}

uint64_t sub_23D5AE048(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE050(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE05C(unsigned __int8 *a1)
{
  return *a1;
}

_BYTE *sub_23D5AE064(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

ValueMetadata *type metadata accessor for NoGKCSubError()
{
  return &type metadata for NoGKCSubError;
}

_QWORD *initializeBufferWithCopyOfBuffer for PCSError(_QWORD *a1, id *a2)
{
  id v3;
  id v4;

  v3 = *a2;
  v4 = *a2;
  *a1 = v3;
  return a1;
}

void destroy for PCSError(id *a1)
{

}

void **assignWithCopy for PCSError(void **a1, id *a2)
{
  id v3;
  id v4;
  void *v5;

  v3 = *a2;
  v4 = *a2;
  v5 = *a1;
  *a1 = v3;

  return a1;
}

_QWORD *__swift_memcpy8_8(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  return result;
}

void **assignWithTake for PCSError(void **a1, void **a2)
{
  void *v3;

  v3 = *a1;
  *a1 = *a2;

  return a1;
}

uint64_t getEnumTagSinglePayload for PCSError(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 8))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PCSError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 8) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for PCSError()
{
  return &type metadata for PCSError;
}

void type metadata accessor for PCSIdentitySet(uint64_t a1)
{
  sub_23D5AE888(a1, &qword_256C78EF8);
}

void type metadata accessor for PCSIdentity(uint64_t a1)
{
  sub_23D5AE888(a1, qword_256C78F00);
}

uint64_t initializeBufferWithCopyOfBuffer for AdminSeed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a2;
  *a1 = *a2;
  v3 = v2 + 16;
  swift_retain();
  return v3;
}

uint64_t sub_23D5AE214()
{
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D5AE23C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 24) = v3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

_QWORD *sub_23D5AE280(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 __swift_memcpy40_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t sub_23D5AE308(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v4 = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 32) = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_23D5AE354(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 40))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t sub_23D5AE39C(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 40) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 40) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

void type metadata accessor for GroupKitCryptoError.ErrorLocation()
{
  JUMPOUT(0x24263673CLL);
}

ValueMetadata *type metadata accessor for PCSError.CodingKeys()
{
  return &type metadata for PCSError.CodingKeys;
}

ValueMetadata *type metadata accessor for NoGKCSubError.CodingKeys()
{
  return &type metadata for NoGKCSubError.CodingKeys;
}

uint64_t getEnumTagSinglePayload for Invite.InviteResponse(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFF)
    goto LABEL_17;
  if (a2 + 1 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 1;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 1;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 1;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 2;
  v8 = v6 - 2;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14GroupKitCrypto8PCSErrorV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D5AE4F4 + 4 * byte_23D66D149[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D5AE528 + 4 * byte_23D66D144[v4]))();
}

uint64_t sub_23D5AE528(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE530(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D5AE538);
  return result;
}

uint64_t sub_23D5AE544(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D5AE54CLL);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D5AE550(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE558(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

_BYTE *sub_23D5AE564(_BYTE *result, char a2)
{
  *result = a2 & 1;
  return result;
}

void sub_23D5AE570()
{
  JUMPOUT(0x242636790);
}

unint64_t sub_23D5AE584()
{
  unint64_t result;

  result = qword_256C79010;
  if (!qword_256C79010)
  {
    result = MEMORY[0x242636790](&unk_23D66DAD0, &type metadata for PCSError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79010);
  }
  return result;
}

unint64_t sub_23D5AE5CC()
{
  unint64_t result;

  result = qword_256C79018;
  if (!qword_256C79018)
  {
    result = MEMORY[0x242636790](&unk_23D66DA08, &type metadata for PCSError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79018);
  }
  return result;
}

unint64_t sub_23D5AE614()
{
  unint64_t result;

  result = qword_256C79020;
  if (!qword_256C79020)
  {
    result = MEMORY[0x242636790](&unk_23D66DA30, &type metadata for PCSError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79020);
  }
  return result;
}

unint64_t sub_23D5AE65C()
{
  unint64_t result;

  result = qword_256C79028;
  if (!qword_256C79028)
  {
    result = MEMORY[0x242636790](&unk_23D66D9B8, &type metadata for NoGKCSubError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79028);
  }
  return result;
}

unint64_t sub_23D5AE6A4()
{
  unint64_t result;

  result = qword_256C79030[0];
  if (!qword_256C79030[0])
  {
    result = MEMORY[0x242636790](&unk_23D66D9E0, &type metadata for NoGKCSubError.CodingKeys);
    atomic_store(result, qword_256C79030);
  }
  return result;
}

void sub_23D5AE6E8()
{
  JUMPOUT(0x242636790);
}

void sub_23D5AE6F8()
{
  JUMPOUT(0x242636790);
}

void type metadata accessor for GroupKitCryptoError.ErrorLocation.CodingKeys()
{
  JUMPOUT(0x24263673CLL);
}

uint64_t sub_23D5AE714(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFE)
    goto LABEL_17;
  if (a2 + 2 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 2) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 2;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 2;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 2;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 3;
  v8 = v6 - 3;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t sub_23D5AE7A4(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 2 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 2) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFE)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFD)
    return ((uint64_t (*)(void))((char *)&loc_23D5AE7F0 + 4 * byte_23D66D153[v4]))();
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_23D5AE824 + 4 * byte_23D66D14E[v4]))();
}

uint64_t sub_23D5AE824(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE82C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D5AE834);
  return result;
}

uint64_t sub_23D5AE840(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D5AE848);
  *(_BYTE *)result = a2 + 2;
  return result;
}

uint64_t sub_23D5AE84C(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5AE854(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

void type metadata accessor for CFArray(uint64_t a1)
{
  sub_23D5AE888(a1, &qword_256C790B8);
}

void type metadata accessor for CFString(uint64_t a1)
{
  sub_23D5AE888(a1, &qword_256C790C0);
}

void sub_23D5AE888(uint64_t a1, unint64_t *a2)
{
  unint64_t ForeignTypeMetadata;
  uint64_t v4;

  if (!*a2)
  {
    ForeignTypeMetadata = swift_getForeignTypeMetadata();
    if (!v4)
      atomic_store(ForeignTypeMetadata, a2);
  }
}

void sub_23D5AE8CC()
{
  JUMPOUT(0x242636790);
}

void sub_23D5AE8DC()
{
  JUMPOUT(0x242636790);
}

void sub_23D5AE8EC()
{
  JUMPOUT(0x242636790);
}

uint64_t sub_23D5AE8FC()
{
  return sub_23D5AE928(&qword_256C790C8, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23D66DDFC);
}

uint64_t sub_23D5AE928(unint64_t *a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = a2(255);
    result = MEMORY[0x242636790](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23D5AE968()
{
  return sub_23D5AE928(&qword_256C790D0, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23D66DC9C);
}

uint64_t sub_23D5AE9A4(uint64_t a1)
{
  return sub_23D5AEA5C(a1, qword_256C88B60);
}

uint64_t *__swift_allocate_value_buffer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  if ((*(_DWORD *)(*(_QWORD *)(a1 - 8) + 80) & 0x20000) != 0)
  {
    v3 = swift_slowAlloc();
    *a2 = v3;
    return (uint64_t *)v3;
  }
  return a2;
}

uint64_t __swift_project_value_buffer(uint64_t a1, uint64_t a2)
{
  if ((*(_BYTE *)(*(_QWORD *)(a1 - 8) + 82) & 2) != 0)
    return *(_QWORD *)a2;
  return a2;
}

uint64_t sub_23D5AEA20(uint64_t a1)
{
  return sub_23D5AEA5C(a1, qword_25431AB50);
}

uint64_t sub_23D5AEA40(uint64_t a1)
{
  return sub_23D5AEA5C(a1, qword_256C88B78);
}

uint64_t sub_23D5AEA5C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = sub_23D66BFDC();
  __swift_allocate_value_buffer(v3, a2);
  __swift_project_value_buffer(v3, (uint64_t)a2);
  return sub_23D66BFD0();
}

uint64_t deleteMessagesQAShadowGroup(groupID:userID:)(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  os_log_type_t v8;
  NSObject *v9;
  uint8_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  os_log_type_t v15;
  NSObject *v16;
  uint8_t *v17;
  os_log_type_t v18;
  NSObject *v19;
  os_log_type_t v20;
  uint8_t *v21;
  __int128 v22;
  uint64_t v23;
  _QWORD v24[3];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *a1;
  v4 = a1[1];
  v5 = *a2;
  v6 = a2[1];
  if (qword_256C78B10 != -1)
    swift_once();
  v7 = sub_23D66BFDC();
  __swift_project_value_buffer(v7, (uint64_t)qword_256C88B78);
  v8 = sub_23D66C570();
  v9 = sub_23D66BFC4();
  if (os_log_type_enabled(v9, v8))
  {
    v10 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v10 = 0;
    _os_log_impl(&dword_23D5A8000, v9, v8, "Deleting GroupAccessInfo values from Keychain", v10, 2u);
    MEMORY[0x242636844](v10, -1, -1);
  }

  if (qword_25431AB48 != -1)
    swift_once();
  v11 = v5;
  swift_beginAccess();
  sub_23D5AEF48((uint64_t)&unk_25431AB70, (uint64_t)&v22, &qword_25431A848);
  if (!v23)
  {
    sub_23D5AEF8C((uint64_t)&v22, &qword_25431A848);
LABEL_19:
    result = sub_23D66C720();
    __break(1u);
    return result;
  }
  sub_23D5AEF30(&v22, (uint64_t)v24);
  swift_endAccess();
  v12 = v25;
  v13 = v26;
  __swift_project_boxed_opaque_existential_1(v24, v25);
  *(_QWORD *)&v22 = v3;
  *((_QWORD *)&v22 + 1) = v4;
  v27 = v11;
  v28 = v6;
  (*(void (**)(__int128 *, uint64_t *, uint64_t, uint64_t))(v13 + 32))(&v22, &v27, v12, v13);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  if (v2)
    return result;
  v15 = sub_23D66C570();
  v16 = sub_23D66BFC4();
  if (os_log_type_enabled(v16, v15))
  {
    v17 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v17 = 0;
    _os_log_impl(&dword_23D5A8000, v16, v15, "Deleting GroupBlob values for Manatee from CloudKit", v17, 2u);
    MEMORY[0x242636844](v17, -1, -1);
  }

  swift_beginAccess();
  sub_23D5AEF48((uint64_t)&unk_25431ABE8, (uint64_t)&v22, &qword_25431A9A8);
  if (!v23)
    goto LABEL_18;
  sub_23D5AEF30(&v22, (uint64_t)v24);
  swift_endAccess();
  __swift_project_boxed_opaque_existential_1(v24, v25);
  *(_QWORD *)&v22 = v3;
  *((_QWORD *)&v22 + 1) = v4;
  v27 = v11;
  v28 = v6;
  sub_23D64E628((uint64_t *)&v22, &v27);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
  v18 = sub_23D66C570();
  v19 = sub_23D66BFC4();
  v20 = v18;
  if (os_log_type_enabled(v19, v18))
  {
    v21 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v21 = 0;
    _os_log_impl(&dword_23D5A8000, v19, v20, "Deleting GroupAccessInfo for Manatee from CloudKit", v21, 2u);
    MEMORY[0x242636844](v21, -1, -1);
  }

  swift_beginAccess();
  sub_23D5AEF48((uint64_t)&unk_25431ABE8, (uint64_t)&v22, &qword_25431A9A8);
  if (!v23)
  {
LABEL_18:
    sub_23D5AEF8C((uint64_t)&v22, &qword_25431A9A8);
    goto LABEL_19;
  }
  sub_23D5AEF30(&v22, (uint64_t)v24);
  swift_endAccess();
  __swift_project_boxed_opaque_existential_1(v24, v25);
  *(_QWORD *)&v22 = v3;
  *((_QWORD *)&v22 + 1) = v4;
  v27 = v11;
  v28 = v6;
  sub_23D64ED0C((uint64_t *)&v22, &v27);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v24);
}

Swift::Bool __swiftcall isValidStrictPeersDevice()()
{
  return 1;
}

uint64_t sub_23D5AEF30(__int128 *a1, uint64_t a2)
{
  __int128 v2;
  __int128 v3;

  v2 = *a1;
  v3 = a1[1];
  *(_QWORD *)(a2 + 32) = *((_QWORD *)a1 + 4);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + 16) = v3;
  return a2;
}

uint64_t sub_23D5AEF48(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23D5AEF8C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;

  v3 = __swift_instantiateConcreteTypeFromMangledName(a2);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_23D5AEFC8(uint64_t result, _BYTE **a2)
{
  _BYTE *v2;

  v2 = *a2;
  *v2 = result;
  *a2 = v2 + 1;
  return result;
}

uint64_t sub_23D5AEFD8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000021, 0x800000023D677890);
  qword_256C88B90 = result;
  *(_QWORD *)algn_256C88B98 = v1;
  return result;
}

uint64_t sub_23D5AF010()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000036, 0x800000023D677A10);
  qword_256C88BA0 = result;
  *(_QWORD *)algn_256C88BA8 = v1;
  return result;
}

uint64_t sub_23D5AF048()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000045, 0x800000023D677E30);
  qword_256C88BB0 = result;
  *(_QWORD *)algn_256C88BB8 = v1;
  return result;
}

uint64_t sub_23D5AF080()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000039, 0x800000023D677D40);
  qword_256C88BC0 = result;
  *(_QWORD *)algn_256C88BC8 = v1;
  return result;
}

uint64_t sub_23D5AF0B8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000003ALL, 0x800000023D677D00);
  qword_256C88BD0 = result;
  *(_QWORD *)algn_256C88BD8 = v1;
  return result;
}

uint64_t sub_23D5AF0F0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000033, 0x800000023D677830);
  qword_256C88BE0 = result;
  *(_QWORD *)algn_256C88BE8 = v1;
  return result;
}

uint64_t sub_23D5AF128()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000033, 0x800000023D677740);
  qword_256C88BF0 = result;
  *(_QWORD *)algn_256C88BF8 = v1;
  return result;
}

uint64_t sub_23D5AF160()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000038, 0x800000023D6777F0);
  qword_256C88C00 = result;
  *(_QWORD *)algn_256C88C08 = v1;
  return result;
}

uint64_t sub_23D5AF198()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000002FLL, 0x800000023D677680);
  qword_256C88C10 = result;
  *(_QWORD *)algn_256C88C18 = v1;
  return result;
}

uint64_t sub_23D5AF1D0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000003FLL, 0x800000023D6779A0);
  qword_256C88C20 = result;
  *(_QWORD *)algn_256C88C28 = v1;
  return result;
}

uint64_t sub_23D5AF208()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000037, 0x800000023D677B90);
  qword_256C88C30 = result;
  *(_QWORD *)algn_256C88C38 = v1;
  return result;
}

uint64_t sub_23D5AF240()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000038, 0x800000023D678450);
  qword_256C88C40 = result;
  *(_QWORD *)algn_256C88C48 = v1;
  return result;
}

uint64_t sub_23D5AF278()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000003FLL, 0x800000023D677900);
  *(_QWORD *)&xmmword_256C88C50 = result;
  *((_QWORD *)&xmmword_256C88C50 + 1) = v1;
  return result;
}

uint64_t sub_23D5AF2B0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000003CLL, 0x800000023D6778C0);
  qword_256C88C60 = result;
  *(_QWORD *)algn_256C88C68 = v1;
  return result;
}

uint64_t FirstGroupVersion.getter()
{
  return 1;
}

uint64_t ProtocolVersion.getter()
{
  return 1;
}

uint64_t sub_23D5AF304@<X0>(uint64_t result@<X0>, char a2@<W1>, BOOL *a3@<X8>)
{
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  uint8_t *v6;
  uint64_t v7;

  if ((a2 & 1) != 0)
  {
    *a3 = result == 0;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v3 = sub_23D66BFDC();
    __swift_project_value_buffer(v3, (uint64_t)qword_256C88B78);
    v4 = sub_23D66C588();
    v5 = sub_23D66BFC4();
    if (os_log_type_enabled(v5, v4))
    {
      v6 = (uint8_t *)swift_slowAlloc();
      *(_DWORD *)v6 = 134217984;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v5, v4, "unrecognized GroupRole in encoded protobuf, got %ld", v6, 0xCu);
      MEMORY[0x242636844](v6, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v7 = 335;
    *(_OWORD *)(v7 + 8) = xmmword_23D66DE90;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  return result;
}

uint64_t GroupRole.RSVPStatus.hash(into:)()
{
  return sub_23D66C8F4();
}

BOOL static GroupRole.RSVPStatus.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t sub_23D5AF4DC()
{
  sub_23D5ED7FC();
  return sub_23D66C930();
}

uint64_t sub_23D5AF504()
{
  sub_23D5ED7FC();
  return sub_23D66C93C();
}

uint64_t sub_23D5AF52C()
{
  unsigned __int8 *v0;

  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D5AF558 + 4 * byte_23D66E5A0[*v0]))(0x747065636341, 0xE600000000000000);
}

uint64_t sub_23D5AF558()
{
  return 0x7463656A6552;
}

unint64_t sub_23D5AF568()
{
  return 0xD000000000000017;
}

uint64_t sub_23D5AF584()
{
  return 0x657661654CLL;
}

uint64_t sub_23D5AF598()
{
  return 0x796F7274736544;
}

uint64_t sub_23D5AF5B0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23D5E6A6C(a1, a2);
  *a3 = result;
  return result;
}

void sub_23D5AF5D4(_BYTE *a1@<X8>)
{
  *a1 = 5;
}

uint64_t sub_23D5AF5E0()
{
  sub_23D5ED6A8();
  return sub_23D66C930();
}

uint64_t sub_23D5AF608()
{
  sub_23D5ED6A8();
  return sub_23D66C93C();
}

uint64_t sub_23D5AF630()
{
  sub_23D5ED774();
  return sub_23D66C930();
}

uint64_t sub_23D5AF658()
{
  sub_23D5ED774();
  return sub_23D66C93C();
}

uint64_t sub_23D5AF680()
{
  sub_23D5ED6EC();
  return sub_23D66C930();
}

uint64_t sub_23D5AF6A8()
{
  sub_23D5ED6EC();
  return sub_23D66C93C();
}

uint64_t sub_23D5AF6D0()
{
  sub_23D5ED730();
  return sub_23D66C930();
}

uint64_t sub_23D5AF6F8()
{
  sub_23D5ED730();
  return sub_23D66C93C();
}

uint64_t sub_23D5AF720()
{
  sub_23D5ED7B8();
  return sub_23D66C930();
}

uint64_t sub_23D5AF748()
{
  sub_23D5ED7B8();
  return sub_23D66C93C();
}

uint64_t GroupRole.RSVPStatus.hashValue.getter()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t sub_23D5AF7B4()
{
  return sub_23D66C8F4();
}

BOOL sub_23D5AF7DC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

uint64_t GroupRole.hash(into:)()
{
  return sub_23D66C8F4();
}

BOOL static GroupRole.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23D5AF830()
{
  sub_23D5ED664();
  return sub_23D66C930();
}

uint64_t sub_23D5AF858()
{
  sub_23D5ED664();
  return sub_23D66C93C();
}

BOOL sub_23D5AF880(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t sub_23D5AF898()
{
  _BYTE *v0;

  if (*v0)
    return 0x7265626D654DLL;
  else
    return 0x7473696E696D6441;
}

uint64_t sub_23D5AF8DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result;

  result = sub_23D5E6C68(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_23D5AF900()
{
  sub_23D5ED5DC();
  return sub_23D66C930();
}

uint64_t sub_23D5AF928()
{
  sub_23D5ED5DC();
  return sub_23D66C93C();
}

uint64_t sub_23D5AF950()
{
  sub_23D5ED620();
  return sub_23D66C930();
}

uint64_t sub_23D5AF978()
{
  sub_23D5ED620();
  return sub_23D66C93C();
}

uint64_t _s14GroupKitCrypto21SynchronizationResultO9hashValueSivg_0()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t sub_23D5AF9E8()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t static GroupID.groupIDLength.getter()
{
  return 16;
}

uint64_t GroupID.rawValue.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23D5AFA60(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_23D5AFA60(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_retain();
  }
  return swift_retain();
}

void GroupID.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_23D5AFAE4(uint64_t *a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  uint64_t v7;

  if (BYTE6(v1) == 16)
  {
    *a1 = v2;
    a1[1] = v1;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v4 = sub_23D66BFDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_256C88B78);
    v5 = sub_23D66C588();
    sub_23D5AFA60(v2, v1);
    v6 = sub_23D66BFC4();
    if (os_log_type_enabled(v6, v5))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v2, v1);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v7 = 257;
    *(_OWORD *)(v7 + 8) = xmmword_23D66DEB0;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v2, v1);
  }
}

void GroupID.hintHash.getter()
{
  uint64_t *v0;

  sub_23D5AFD60(*v0, v0[1]);
}

void sub_23D5AFD60(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t (*v4)(uint64_t);
  uint64_t v5;
  uint64_t v6;

  v3 = sub_23D66C354();
  v4 = (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8];
  MEMORY[0x24BDAC7A8](v3);
  v5 = sub_23D66C018();
  MEMORY[0x24BDAC7A8](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79B20);
  MEMORY[0x24BDAC7A8](v6);
  sub_23D5AE928((unint64_t *)&qword_256C79AC0, v4, MEMORY[0x24BDC6AE8]);
  sub_23D66C00C();
  __asm { BR              X10 }
}

uint64_t sub_23D5AFE9C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v8 - 112) = v4;
  *(_WORD *)(v8 - 104) = v3;
  *(_BYTE *)(v8 - 102) = BYTE2(v3);
  *(_BYTE *)(v8 - 101) = BYTE3(v3);
  *(_BYTE *)(v8 - 100) = BYTE4(v3);
  *(_BYTE *)(v8 - 99) = BYTE5(v3);
  sub_23D66BFF4();
  sub_23D5DDA20(v4, v3);
  sub_23D66C000();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v2, v0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 120) + 32))(v7, v5, v1);
  *(_QWORD *)(v7 + *(int *)(*(_QWORD *)(v8 - 128) + 36)) = 2;
  return sub_23D62868C(v7);
}

void static GroupID.== infix(_:_:)(uint64_t *a1)
{
  sub_23D5E6578(*a1, a1[1]);
}

uint64_t sub_23D5B00B8()
{
  return sub_23D66C8F4();
}

uint64_t sub_23D5B00E0()
{
  return 0x65756C6156776172;
}

uint64_t sub_23D5B00FC()
{
  sub_23D5ED840();
  return sub_23D66C930();
}

uint64_t sub_23D5B0124()
{
  sub_23D5ED840();
  return sub_23D66C93C();
}

void sub_23D5B015C(uint64_t *a1)
{
  sub_23D5E6578(*a1, a1[1]);
}

uint64_t static GroupKitUserID.groupKitUserIDLength.getter()
{
  return 20;
}

void GroupKitUserID.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_23D5B01B8(uint64_t *a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  uint64_t v7;

  if (BYTE6(v1) == 20)
  {
    *a1 = v2;
    a1[1] = v1;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v4 = sub_23D66BFDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_256C88B78);
    v5 = sub_23D66C588();
    sub_23D5AFA60(v2, v1);
    v6 = sub_23D66BFC4();
    if (os_log_type_enabled(v6, v5))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v2, v1);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v7 = 258;
    *(_OWORD *)(v7 + 8) = xmmword_23D66DEC0;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v2, v1);
  }
}

uint64_t sub_23D5B0430()
{
  sub_23D5ED90C();
  return sub_23D66C930();
}

uint64_t sub_23D5B0458()
{
  sub_23D5ED90C();
  return sub_23D66C93C();
}

GroupKitCrypto::UserDSID __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> UserDSID.init(_:)(GroupKitCrypto::UserDSID result)
{
  GroupKitCrypto::UserDSID *v1;

  *v1 = result;
  return result;
}

uint64_t UserDSID.hash(into:)()
{
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  return swift_bridgeObjectRelease();
}

uint64_t static UserDSID.== infix(_:_:)(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23D66C84C();
}

uint64_t sub_23D5B0500()
{
  sub_23D5ED950();
  return sub_23D66C930();
}

uint64_t sub_23D5B0528()
{
  sub_23D5ED950();
  return sub_23D66C93C();
}

uint64_t UserDSID.hashValue.getter()
{
  sub_23D66C8E8();
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  return sub_23D66C90C();
}

uint64_t sub_23D5B05A8()
{
  sub_23D66C8E8();
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  return sub_23D66C90C();
}

uint64_t sub_23D5B0600()
{
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D5B0644()
{
  sub_23D66C8E8();
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  return sub_23D66C90C();
}

uint64_t sub_23D5B0698(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2 && a1[1] == a2[1])
    return 1;
  else
    return sub_23D66C84C();
}

void sub_23D5B06C8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_23D5B0720(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v22;

  v4 = BYTE6(v22);
  if (BYTE6(v22))
  {
    *(_QWORD *)(v3 - 104) = v2;
    v5 = BYTE6(v22);
    sub_23D5DE288(0, BYTE6(v22), 0);
    v2 = *(_QWORD *)(v3 - 104);
    if ((_DWORD)v1)
    {
      if ((_DWORD)v1 == 1)
        v6 = (int)a1;
      else
        v6 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v6 = 0;
    }
    *(_QWORD *)(v3 - 136) = v22 & 0x3FFFFFFFFFFFFFFFLL;
    *(_QWORD *)(v3 - 128) = v1;
    while (v5)
    {
      if ((_DWORD)v1)
      {
        if ((_DWORD)v1 == 1)
        {
          if (v6 < (int)a1 || v6 >= a1 >> 32)
            goto LABEL_29;
          v7 = sub_23D66BC88();
          if (!v7)
          {
            __break(1u);
LABEL_36:
            __break(1u);
          }
          v8 = v7;
          v9 = sub_23D66BCAC();
          v10 = v6 - v9;
          if (__OFSUB__(v6, v9))
            goto LABEL_32;
        }
        else
        {
          if (v6 < *(_QWORD *)(a1 + 16))
            goto LABEL_31;
          if (v6 >= *(_QWORD *)(a1 + 24))
            goto LABEL_33;
          v12 = sub_23D66BC88();
          if (!v12)
            goto LABEL_36;
          v8 = v12;
          v13 = sub_23D66BCAC();
          v10 = v6 - v13;
          if (__OFSUB__(v6, v13))
            goto LABEL_34;
        }
        v11 = *(_BYTE *)(v8 + v10);
      }
      else
      {
        if (v6 >= BYTE6(v22))
          goto LABEL_30;
        *(_QWORD *)(v3 - 118) = a1;
        *(_WORD *)(v3 - 110) = v22;
        *(_BYTE *)(v3 - 108) = BYTE2(v22);
        *(_BYTE *)(v3 - 107) = BYTE3(v22);
        *(_BYTE *)(v3 - 106) = BYTE4(v22);
        *(_BYTE *)(v3 - 105) = BYTE5(v22);
        v11 = *(_BYTE *)(v3 - 118 + v6);
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A40);
      v14 = swift_allocObject();
      *(_OWORD *)(v14 + 16) = xmmword_23D66DED0;
      *(_QWORD *)(v14 + 56) = MEMORY[0x24BEE4260];
      *(_QWORD *)(v14 + 64) = MEMORY[0x24BEE42B0];
      *(_BYTE *)(v14 + 32) = v11;
      v15 = sub_23D66C3A8();
      v17 = v16;
      *(_QWORD *)(v3 - 104) = v2;
      v19 = *(_QWORD *)(v2 + 16);
      v18 = *(_QWORD *)(v2 + 24);
      if (v19 >= v18 >> 1)
      {
        sub_23D5DE288(v18 > 1, v19 + 1, 1);
        v2 = *(_QWORD *)(v3 - 104);
      }
      *(_QWORD *)(v2 + 16) = v19 + 1;
      v20 = v2 + 16 * v19;
      *(_QWORD *)(v20 + 32) = v15;
      *(_QWORD *)(v20 + 40) = v17;
      ++v6;
      --v5;
      --v4;
      v1 = *(_QWORD *)(v3 - 128);
      if (!v4)
        return v2;
    }
    __break(1u);
LABEL_29:
    __break(1u);
LABEL_30:
    __break(1u);
LABEL_31:
    __break(1u);
LABEL_32:
    __break(1u);
LABEL_33:
    __break(1u);
LABEL_34:
    __break(1u);
    __break(1u);
    JUMPOUT(0x23D5B0A34);
  }
  return v2;
}

uint64_t sub_23D5B0A5C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int64_t v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  int64_t v20;
  int64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v52 = *(_QWORD *)(v3 - 8);
  v53 = v3;
  v4 = MEMORY[0x24BDAC7A8](v3);
  v51 = (uint64_t)&v42 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v50 = (uint64_t *)((char *)&v42 - v7);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v49 = (uint64_t *)((char *)&v42 - v9);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v42 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  v13 = MEMORY[0x24BEE4AF8];
  if (!v12)
    return v13;
  v42 = v1;
  v56 = MEMORY[0x24BEE4AF8];
  sub_23D5DE308(0, v12, 0);
  result = sub_23D5E5BC0(a1);
  v16 = result;
  v17 = 0;
  v18 = a1 + 64;
  v43 = a1 + 80;
  v44 = v12;
  v47 = v11;
  v48 = a1;
  v45 = v15;
  v46 = a1 + 64;
  v19 = v49;
  while ((v16 & 0x8000000000000000) == 0 && v16 < 1 << *(_BYTE *)(a1 + 32))
  {
    v22 = (unint64_t)v16 >> 6;
    if ((*(_QWORD *)(v18 + 8 * ((unint64_t)v16 >> 6)) & (1 << v16)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15)
      goto LABEL_26;
    v54 = v17;
    v55 = 1 << v16;
    v23 = v53;
    v24 = (uint64_t)v19 + *(int *)(v53 + 48);
    v25 = *(_QWORD *)(a1 + 48);
    v26 = *(_QWORD *)(a1 + 56);
    v27 = (uint64_t *)(v25 + 16 * v16);
    v29 = *v27;
    v28 = v27[1];
    *v19 = *v27;
    v19[1] = v28;
    v30 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_23D5E7298(v26 + *(_QWORD *)(*(_QWORD *)(v30 - 8) + 72) * v16, v24, type metadata accessor for GroupMembership.MemberProperties);
    v31 = (uint64_t)v50;
    *v50 = v29;
    *(_QWORD *)(v31 + 8) = v28;
    v32 = *(int *)(v23 + 48);
    v33 = (uint64_t)v47;
    sub_23D5E7298(v24, v31 + v32, type metadata accessor for GroupMembership.MemberProperties);
    v34 = v51;
    sub_23D5F16C4(v31, v51, &qword_256C799A0);
    sub_23D5AFA60(v29, v28);
    sub_23D5AFA60(v29, v28);
    sub_23D5AEF8C((uint64_t)v19, &qword_256C799A0);
    sub_23D5AEF48(v34, v33, &qword_256C799A0);
    sub_23D5AEF8C(v34, &qword_256C799A0);
    v13 = v56;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23D5DE308(0, *(_QWORD *)(v13 + 16) + 1, 1);
      v13 = v56;
    }
    v36 = *(_QWORD *)(v13 + 16);
    v35 = *(_QWORD *)(v13 + 24);
    a1 = v48;
    if (v36 >= v35 >> 1)
    {
      sub_23D5DE308(v35 > 1, v36 + 1, 1);
      v13 = v56;
    }
    *(_QWORD *)(v13 + 16) = v36 + 1;
    result = sub_23D5F16C4(v33, v13+ ((*(unsigned __int8 *)(v52 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80))+ *(_QWORD *)(v52 + 72) * v36, &qword_256C799A0);
    v20 = 1 << *(_BYTE *)(a1 + 32);
    if (v16 >= v20)
      goto LABEL_27;
    v18 = v46;
    v37 = *(_QWORD *)(v46 + 8 * v22);
    if ((v37 & v55) == 0)
      goto LABEL_28;
    LODWORD(v15) = v45;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v45)
      goto LABEL_29;
    v38 = v37 & (-2 << (v16 & 0x3F));
    if (v38)
    {
      v20 = __clz(__rbit64(v38)) | v16 & 0xFFFFFFFFFFFFFFC0;
      v21 = v44;
    }
    else
    {
      v39 = v22 + 1;
      v40 = (unint64_t)(v20 + 63) >> 6;
      v21 = v44;
      if (v22 + 1 < v40)
      {
        v41 = *(_QWORD *)(v46 + 8 * v39);
        if (v41)
        {
LABEL_22:
          v20 = __clz(__rbit64(v41)) + (v39 << 6);
        }
        else
        {
          while (v40 - 2 != v22)
          {
            v41 = *(_QWORD *)(v43 + 8 * v22++);
            if (v41)
            {
              v39 = v22 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v17 = v54 + 1;
    v16 = v20;
    if (v54 + 1 == v21)
      return v13;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23D5B0E08(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  _QWORD v45[2];
  uint64_t v46;
  int64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v55 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v3 = MEMORY[0x24BDAC7A8](v55);
  v54 = (_QWORD *)((char *)v45 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x24BDAC7A8](v3);
  v53 = (_QWORD *)((char *)v45 - v6);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v52 = (_QWORD *)((char *)v45 - v8);
  MEMORY[0x24BDAC7A8](v7);
  v51 = (_QWORD *)((char *)v45 - v9);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v45[1] = v1;
  v58 = MEMORY[0x24BEE4AF8];
  sub_23D5DE38C(0, v10, 0);
  result = sub_23D5E5BC0(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v46 = a1 + 80;
  v47 = v10;
  v49 = a1 + 64;
  v50 = a1;
  v48 = v13;
  v17 = v51;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << *(_BYTE *)(a1 + 32))
  {
    v20 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_26;
    v56 = v15;
    v57 = 1 << v14;
    v21 = v55;
    v22 = (uint64_t)v17 + *(int *)(v55 + 48);
    v23 = *(_QWORD *)(a1 + 48);
    v24 = *(_QWORD *)(a1 + 56);
    v25 = (uint64_t *)(v23 + 16 * v14);
    v26 = *v25;
    v27 = v25[1];
    *v17 = *v25;
    v17[1] = v27;
    v28 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_23D5E7298(v24 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v14, v22, type metadata accessor for GroupMembership.MemberProperties);
    v29 = v52;
    *v52 = v26;
    v29[1] = v27;
    sub_23D5E7298(v22, (uint64_t)v29 + *(int *)(v21 + 48), type metadata accessor for GroupMembership.MemberProperties);
    v30 = (uint64_t)v29;
    v31 = v53;
    sub_23D5F16C4(v30, (uint64_t)v53, &qword_256C799A0);
    sub_23D5AFA60(v26, v27);
    sub_23D5AFA60(v26, v27);
    sub_23D5AEF8C((uint64_t)v17, &qword_256C799A0);
    v32 = *(int *)(v21 + 48);
    v33 = v54;
    v34 = (uint64_t)v54 + v32;
    v36 = *v31;
    v35 = v31[1];
    *v54 = *v31;
    v33[1] = v35;
    sub_23D5E7298((uint64_t)v31 + v32, (uint64_t)v33 + v32, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5AFA60(v36, v35);
    sub_23D5E6950(v34, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5AEF8C((uint64_t)v31, &qword_256C799A0);
    v11 = v58;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_23D5DE38C(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = v58;
    }
    v38 = *(_QWORD *)(v11 + 16);
    v37 = *(_QWORD *)(v11 + 24);
    if (v38 >= v37 >> 1)
    {
      result = sub_23D5DE38C(v37 > 1, v38 + 1, 1);
      v11 = v58;
    }
    *(_QWORD *)(v11 + 16) = v38 + 1;
    v39 = v11 + 16 * v38;
    *(_QWORD *)(v39 + 32) = v36;
    *(_QWORD *)(v39 + 40) = v35;
    a1 = v50;
    v18 = 1 << *(_BYTE *)(v50 + 32);
    if (v14 >= v18)
      goto LABEL_27;
    v16 = v49;
    v40 = *(_QWORD *)(v49 + 8 * v20);
    if ((v40 & v57) == 0)
      goto LABEL_28;
    LODWORD(v13) = v48;
    if (*(_DWORD *)(v50 + 36) != (_DWORD)v48)
      goto LABEL_29;
    v41 = v40 & (-2 << (v14 & 0x3F));
    if (v41)
    {
      v18 = __clz(__rbit64(v41)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v19 = v47;
    }
    else
    {
      v42 = v20 + 1;
      v43 = (unint64_t)(v18 + 63) >> 6;
      v19 = v47;
      if (v20 + 1 < v43)
      {
        v44 = *(_QWORD *)(v49 + 8 * v42);
        if (v44)
        {
LABEL_22:
          v18 = __clz(__rbit64(v44)) + (v42 << 6);
        }
        else
        {
          while (v43 - 2 != v20)
          {
            v44 = *(_QWORD *)(v46 + 8 * v20++);
            if (v44)
            {
              v42 = v20 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v15 = v56 + 1;
    v14 = v18;
    if (v56 + 1 == v19)
      return v11;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23D5B11C4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v3 = MEMORY[0x24BDAC7A8](v48);
  v47 = (uint64_t *)((char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x24BDAC7A8](v3);
  v46 = (uint64_t *)((char *)&v39 - v6);
  MEMORY[0x24BDAC7A8](v5);
  v45 = (uint64_t *)((char *)&v39 - v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (!v8)
    return v9;
  v39 = v1;
  v51 = MEMORY[0x24BEE4AF8];
  sub_23D5DE38C(0, v8, 0);
  result = sub_23D5E5BC0(a1);
  v12 = result;
  v13 = 0;
  v14 = a1 + 64;
  v40 = a1 + 80;
  v41 = v8;
  v43 = a1 + 64;
  v44 = a1;
  v42 = v11;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v12 >> 6;
    if ((*(_QWORD *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_26;
    v49 = v13;
    v50 = 1 << v12;
    v18 = v48;
    v19 = (uint64_t)v45;
    v20 = (uint64_t)v45 + *(int *)(v48 + 48);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 56);
    v23 = (uint64_t *)(v21 + 16 * v12);
    v24 = *v23;
    v25 = v23[1];
    *v45 = *v23;
    *(_QWORD *)(v19 + 8) = v25;
    v26 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_23D5E7298(v22 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v12, v20, type metadata accessor for GroupMembership.MemberProperties);
    v27 = (uint64_t)v46;
    *v46 = v24;
    *(_QWORD *)(v27 + 8) = v25;
    sub_23D5E7298(v20, v27 + *(int *)(v18 + 48), type metadata accessor for GroupMembership.MemberProperties);
    v28 = v47;
    sub_23D5F16C4(v27, (uint64_t)v47, &qword_256C799A0);
    sub_23D5AFA60(v24, v25);
    sub_23D5AFA60(v24, v25);
    sub_23D5AEF8C(v19, &qword_256C799A0);
    v30 = *v28;
    v29 = v28[1];
    sub_23D5AFA60(*v28, v29);
    sub_23D5AEF8C((uint64_t)v28, &qword_256C799A0);
    v9 = v51;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_23D5DE38C(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v9 = v51;
    }
    v32 = *(_QWORD *)(v9 + 16);
    v31 = *(_QWORD *)(v9 + 24);
    if (v32 >= v31 >> 1)
    {
      result = sub_23D5DE38C(v31 > 1, v32 + 1, 1);
      v9 = v51;
    }
    *(_QWORD *)(v9 + 16) = v32 + 1;
    v33 = v9 + 16 * v32;
    *(_QWORD *)(v33 + 32) = v30;
    *(_QWORD *)(v33 + 40) = v29;
    a1 = v44;
    v15 = 1 << *(_BYTE *)(v44 + 32);
    if (v12 >= v15)
      goto LABEL_27;
    v14 = v43;
    v34 = *(_QWORD *)(v43 + 8 * v17);
    if ((v34 & v50) == 0)
      goto LABEL_28;
    LODWORD(v11) = v42;
    if (*(_DWORD *)(v44 + 36) != (_DWORD)v42)
      goto LABEL_29;
    v35 = v34 & (-2 << (v12 & 0x3F));
    if (v35)
    {
      v15 = __clz(__rbit64(v35)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v16 = v41;
    }
    else
    {
      v36 = v17 + 1;
      v37 = (unint64_t)(v15 + 63) >> 6;
      v16 = v41;
      if (v17 + 1 < v37)
      {
        v38 = *(_QWORD *)(v43 + 8 * v36);
        if (v38)
        {
LABEL_22:
          v15 = __clz(__rbit64(v38)) + (v36 << 6);
        }
        else
        {
          while (v37 - 2 != v17)
          {
            v38 = *(_QWORD *)(v40 + 8 * v17++);
            if (v38)
            {
              v36 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v13 = v49 + 1;
    v12 = v15;
    if (v49 + 1 == v16)
      return v9;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23D5B1530(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  int64_t v6;
  uint64_t v7;
  uint64_t result;
  int64_t v9;
  int v10;
  int v11;
  char v12;
  int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  uint64_t v19;
  char *v20;
  char v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  _QWORD v28[2];
  uint64_t v29;
  uint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t *v33;
  int v34;
  uint64_t v35;

  v33 = a2;
  v4 = type metadata accessor for GroupMembership.MemberProperties(0);
  v32 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v31 = (char *)v28 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = *(_QWORD *)(a1 + 16);
  v7 = MEMORY[0x24BEE4AF8];
  if (!v6)
    return v7;
  v28[1] = v2;
  v35 = MEMORY[0x24BEE4AF8];
  sub_23D5DE3D4(0, v6, 0);
  v7 = v35;
  result = sub_23D5E6224(a1);
  v9 = result;
  v11 = v10;
  v13 = v12 & 1;
  v29 = a1;
  v30 = a1 + 56;
  while ((v9 & 0x8000000000000000) == 0 && v9 < 1 << *(_BYTE *)(a1 + 32))
  {
    if (((*(_QWORD *)(v30 + (((unint64_t)v9 >> 3) & 0xFFFFFFFFFFFFF8)) >> v9) & 1) == 0)
      goto LABEL_15;
    if (*(_DWORD *)(a1 + 36) != v11)
      goto LABEL_16;
    v14 = *v33;
    if (!*(_QWORD *)(*v33 + 16))
      goto LABEL_17;
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v9);
    v16 = *v15;
    v17 = v15[1];
    sub_23D5AFA60(*v15, v17);
    sub_23D5AFA60(v16, v17);
    result = sub_23D5DF394(v16, v17);
    if ((v18 & 1) == 0)
      goto LABEL_18;
    v34 = v13;
    v19 = *(_QWORD *)(v14 + 56);
    v20 = v31;
    sub_23D5E7298(v19 + *(_QWORD *)(v32 + 72) * result, (uint64_t)v31, type metadata accessor for GroupMembership.MemberProperties);
    v21 = *v20;
    sub_23D5E6950((uint64_t)v20, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5DDA20(v16, v17);
    v35 = v7;
    v23 = *(_QWORD *)(v7 + 16);
    v22 = *(_QWORD *)(v7 + 24);
    v24 = v7;
    if (v23 >= v22 >> 1)
    {
      sub_23D5DE3D4(v22 > 1, v23 + 1, 1);
      v24 = v35;
    }
    *(_QWORD *)(v24 + 16) = v23 + 1;
    v25 = v24 + 24 * v23;
    *(_QWORD *)(v25 + 32) = v16;
    *(_QWORD *)(v25 + 40) = v17;
    *(_BYTE *)(v25 + 48) = (v21 ^ 1) & 1;
    a1 = v29;
    result = sub_23D5E62C4(v9, v11, v34 & 1, v29);
    v9 = result;
    v11 = v26;
    v13 = v27 & 1;
    --v6;
    v7 = v24;
    if (!v6)
    {
      sub_23D5F16B8(result, v26, v27 & 1);
      return v7;
    }
  }
  __break(1u);
LABEL_15:
  __break(1u);
LABEL_16:
  __break(1u);
LABEL_17:
  __break(1u);
LABEL_18:
  __break(1u);
  return result;
}

uint64_t sub_23D5B1784(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  int v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int64_t v42;
  uint64_t v43;
  uint64_t v44;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v2;
  v3 = a1;
  v44 = MEMORY[0x24BEE4AF8];
  sub_23D5DE2A4(0, v1, 0);
  v2 = v44;
  result = sub_23D5E5BC0(v3);
  v6 = result;
  v7 = 0;
  v8 = v3 + 64;
  v33 = v3 + 80;
  v34 = v1;
  v35 = v5;
  v36 = v3 + 64;
  v37 = v3;
  while ((v6 & 0x8000000000000000) == 0 && (uint64_t)v6 < 1 << *(_BYTE *)(v3 + 32))
  {
    v11 = v6 >> 6;
    if ((*(_QWORD *)(v8 + 8 * (v6 >> 6)) & (1 << v6)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v3 + 36) != v5)
      goto LABEL_24;
    v38 = v7;
    v39 = 1 << v6;
    v12 = *(_QWORD *)(v3 + 56);
    v13 = (uint64_t *)(*(_QWORD *)(v3 + 48) + 16 * v6);
    v15 = *v13;
    v14 = v13[1];
    v42 = v6;
    v43 = v2;
    v16 = (uint64_t *)(v12 + 48 * v6);
    v17 = *v16;
    v18 = v16[1];
    v19 = v16[2];
    v20 = v16[3];
    v21 = v16[4];
    v22 = v16[5];
    sub_23D5AFA60(v15, v14);
    sub_23D5AFA60(v17, v18);
    sub_23D5AFA60(v19, v20);
    sub_23D5AFA60(v21, v22);
    sub_23D5AFA60(v15, v14);
    sub_23D5AFA60(v17, v18);
    sub_23D5AFA60(v19, v20);
    sub_23D5AFA60(v21, v22);
    sub_23D5DDA20(v15, v14);
    sub_23D5DDA20(v17, v18);
    sub_23D5DDA20(v19, v20);
    sub_23D5DDA20(v21, v22);
    sub_23D5AFA60(v21, v22);
    sub_23D62899C(v21, v22);
    v40 = v24;
    v41 = v23;
    sub_23D5DDA20(v15, v14);
    sub_23D5DDA20(v17, v18);
    sub_23D5DDA20(v19, v20);
    result = sub_23D5DDA20(v21, v22);
    v26 = *(_QWORD *)(v43 + 16);
    v25 = *(_QWORD *)(v43 + 24);
    v2 = v43;
    if (v26 >= v25 >> 1)
    {
      result = sub_23D5DE2A4(v25 > 1, v26 + 1, 1);
      v2 = v43;
    }
    *(_QWORD *)(v2 + 16) = v26 + 1;
    v27 = v2 + 16 * v26;
    *(_QWORD *)(v27 + 32) = v41;
    *(_QWORD *)(v27 + 40) = v40;
    v3 = v37;
    v9 = 1 << *(_BYTE *)(v37 + 32);
    if (v42 >= v9)
      goto LABEL_25;
    v8 = v36;
    v28 = *(_QWORD *)(v36 + 8 * v11);
    if ((v28 & v39) == 0)
      goto LABEL_26;
    v5 = v35;
    if (*(_DWORD *)(v37 + 36) != v35)
      goto LABEL_27;
    v29 = v28 & (-2 << (v42 & 0x3F));
    if (v29)
    {
      v9 = __clz(__rbit64(v29)) | v42 & 0xFFFFFFFFFFFFFFC0;
      v10 = v34;
    }
    else
    {
      v30 = v11 + 1;
      v31 = (unint64_t)(v9 + 63) >> 6;
      v10 = v34;
      if (v11 + 1 < v31)
      {
        v32 = *(_QWORD *)(v36 + 8 * v30);
        if (v32)
        {
LABEL_20:
          v9 = __clz(__rbit64(v32)) + (v30 << 6);
        }
        else
        {
          while (v31 - 2 != v11)
          {
            v32 = *(_QWORD *)(v33 + 8 * v11++);
            if (v32)
            {
              v30 = v11 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v7 = v38 + 1;
    v6 = v9;
    if (v38 + 1 == v10)
      return v2;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

unint64_t sub_23D5B1A98(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t result;
  int v4;
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  int64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int64_t v36;
  uint64_t v37;
  uint64_t v38;

  v1 = *(_QWORD *)(a1 + 16);
  v37 = MEMORY[0x24BEE4AF8];
  if (!v1)
    return v37;
  v2 = a1;
  v38 = MEMORY[0x24BEE4AF8];
  sub_23D5DE41C(0, v1, 0);
  v37 = v38;
  result = sub_23D5E5BC0(v2);
  v5 = 0;
  v6 = v2 + 64;
  v28 = v2 + 80;
  v29 = v1;
  v30 = v4;
  v31 = v2 + 64;
  v32 = v2;
  while ((result & 0x8000000000000000) == 0 && (uint64_t)result < 1 << *(_BYTE *)(v2 + 32))
  {
    v9 = result >> 6;
    if ((*(_QWORD *)(v6 + 8 * (result >> 6)) & (1 << result)) == 0)
      goto LABEL_23;
    if (*(_DWORD *)(v2 + 36) != v4)
      goto LABEL_24;
    v33 = v5;
    v34 = 1 << result;
    v10 = *(_QWORD *)(v2 + 56);
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * result);
    v12 = *v11;
    v13 = v11[1];
    v14 = (uint64_t *)(v10 + 48 * result);
    v16 = *v14;
    v15 = v14[1];
    v18 = v14[2];
    v17 = v14[3];
    v19 = v14[4];
    v35 = v14[5];
    v36 = result;
    sub_23D5AFA60(v12, v13);
    sub_23D5AFA60(v16, v15);
    sub_23D5AFA60(v18, v17);
    sub_23D5AFA60(v19, v35);
    sub_23D5AFA60(v12, v13);
    sub_23D5AFA60(v16, v15);
    sub_23D5AFA60(v18, v17);
    sub_23D5AFA60(v19, v35);
    sub_23D5DDA20(v12, v13);
    sub_23D5DDA20(v16, v15);
    sub_23D5DDA20(v18, v17);
    sub_23D5DDA20(v19, v35);
    sub_23D5AFA60(v12, v13);
    sub_23D5AFA60(v16, v15);
    sub_23D5DDA20(v12, v13);
    sub_23D5DDA20(v16, v15);
    sub_23D5DDA20(v18, v17);
    result = sub_23D5DDA20(v19, v35);
    v21 = *(_QWORD *)(v38 + 16);
    v20 = *(_QWORD *)(v38 + 24);
    if (v21 >= v20 >> 1)
      result = sub_23D5DE41C(v20 > 1, v21 + 1, 1);
    *(_QWORD *)(v38 + 16) = v21 + 1;
    v22 = (_QWORD *)(v38 + 32 * v21);
    v22[4] = v12;
    v22[5] = v13;
    v22[6] = v16;
    v22[7] = v15;
    v2 = v32;
    v7 = 1 << *(_BYTE *)(v32 + 32);
    if (v36 >= v7)
      goto LABEL_25;
    v6 = v31;
    v23 = *(_QWORD *)(v31 + 8 * v9);
    if ((v23 & v34) == 0)
      goto LABEL_26;
    v4 = v30;
    if (*(_DWORD *)(v32 + 36) != v30)
      goto LABEL_27;
    v24 = v23 & (-2 << (v36 & 0x3F));
    if (v24)
    {
      v7 = __clz(__rbit64(v24)) | v36 & 0xFFFFFFFFFFFFFFC0;
      v8 = v29;
    }
    else
    {
      v25 = v9 + 1;
      v26 = (unint64_t)(v7 + 63) >> 6;
      v8 = v29;
      if (v9 + 1 < v26)
      {
        v27 = *(_QWORD *)(v31 + 8 * v25);
        if (v27)
        {
LABEL_20:
          v7 = __clz(__rbit64(v27)) + (v25 << 6);
        }
        else
        {
          while (v26 - 2 != v9)
          {
            v27 = *(_QWORD *)(v28 + 8 * v9++);
            if (v27)
            {
              v25 = v9 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }
    v5 = v33 + 1;
    result = v7;
    if (v33 + 1 == v8)
      return v37;
  }
  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

uint64_t sub_23D5B1DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  int64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;

  v50 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v3 = MEMORY[0x24BDAC7A8](v50);
  v49 = (uint64_t *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x24BDAC7A8](v3);
  v48 = (uint64_t *)((char *)&v41 - v6);
  MEMORY[0x24BDAC7A8](v5);
  v47 = (uint64_t *)((char *)&v41 - v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = MEMORY[0x24BEE4AF8];
  if (!v8)
    return v9;
  v41 = v1;
  v53 = MEMORY[0x24BEE4AF8];
  sub_23D5DE448(0, v8, 0);
  result = sub_23D5E5BC0(a1);
  v12 = result;
  v13 = 0;
  v14 = a1 + 64;
  v42 = a1 + 80;
  v43 = v8;
  v45 = a1 + 64;
  v46 = a1;
  v44 = v11;
  while ((v12 & 0x8000000000000000) == 0 && v12 < 1 << *(_BYTE *)(a1 + 32))
  {
    v17 = (unint64_t)v12 >> 6;
    if ((*(_QWORD *)(v14 + 8 * ((unint64_t)v12 >> 6)) & (1 << v12)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v11)
      goto LABEL_26;
    v51 = v13;
    v52 = 1 << v12;
    v18 = v50;
    v19 = (uint64_t)v47;
    v20 = (uint64_t)v47 + *(int *)(v50 + 48);
    v21 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 56);
    v23 = (uint64_t *)(v21 + 16 * v12);
    v24 = *v23;
    v25 = v23[1];
    *v47 = *v23;
    *(_QWORD *)(v19 + 8) = v25;
    v26 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_23D5E7298(v22 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v12, v20, type metadata accessor for GroupMembership.MemberProperties);
    v27 = (uint64_t)v48;
    *v48 = v24;
    *(_QWORD *)(v27 + 8) = v25;
    sub_23D5E7298(v20, v27 + *(int *)(v18 + 48), type metadata accessor for GroupMembership.MemberProperties);
    v28 = v49;
    sub_23D5F16C4(v27, (uint64_t)v49, &qword_256C799A0);
    sub_23D5AFA60(v24, v25);
    sub_23D5AFA60(v24, v25);
    sub_23D5AEF8C(v19, &qword_256C799A0);
    v29 = *(int *)(v18 + 48);
    v30 = *v28;
    v31 = v28[1];
    v32 = *((_BYTE *)v28 + v29);
    sub_23D5AFA60(*v28, v31);
    sub_23D5AEF8C((uint64_t)v28, &qword_256C799A0);
    v9 = v53;
    result = swift_isUniquelyReferenced_nonNull_native();
    if ((result & 1) == 0)
    {
      result = sub_23D5DE448(0, *(_QWORD *)(v9 + 16) + 1, 1);
      v9 = v53;
    }
    v34 = *(_QWORD *)(v9 + 16);
    v33 = *(_QWORD *)(v9 + 24);
    if (v34 >= v33 >> 1)
    {
      result = sub_23D5DE448(v33 > 1, v34 + 1, 1);
      v9 = v53;
    }
    *(_QWORD *)(v9 + 16) = v34 + 1;
    v35 = v9 + 24 * v34;
    *(_QWORD *)(v35 + 32) = v30;
    *(_QWORD *)(v35 + 40) = v31;
    *(_BYTE *)(v35 + 48) = v32;
    a1 = v46;
    v15 = 1 << *(_BYTE *)(v46 + 32);
    if (v12 >= v15)
      goto LABEL_27;
    v14 = v45;
    v36 = *(_QWORD *)(v45 + 8 * v17);
    if ((v36 & v52) == 0)
      goto LABEL_28;
    LODWORD(v11) = v44;
    if (*(_DWORD *)(v46 + 36) != (_DWORD)v44)
      goto LABEL_29;
    v37 = v36 & (-2 << (v12 & 0x3F));
    if (v37)
    {
      v15 = __clz(__rbit64(v37)) | v12 & 0xFFFFFFFFFFFFFFC0;
      v16 = v43;
    }
    else
    {
      v38 = v17 + 1;
      v39 = (unint64_t)(v15 + 63) >> 6;
      v16 = v43;
      if (v17 + 1 < v39)
      {
        v40 = *(_QWORD *)(v45 + 8 * v38);
        if (v40)
        {
LABEL_22:
          v15 = __clz(__rbit64(v40)) + (v38 << 6);
        }
        else
        {
          while (v39 - 2 != v17)
          {
            v40 = *(_QWORD *)(v42 + 8 * v17++);
            if (v40)
            {
              v38 = v17 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v13 = v51 + 1;
    v12 = v15;
    if (v51 + 1 == v16)
      return v9;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_23D5B214C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t result;
  int64_t v20;
  unint64_t v21;
  unint64_t i;
  int64_t v23;
  unint64_t v24;
  int64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  int64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v2);
  v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v41 = type metadata accessor for UserKeyingInfo(0);
  v42 = *(_QWORD *)(v41 - 8);
  v5 = MEMORY[0x24BDAC7A8](v41);
  v36 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v35 = (uint64_t)&v33 - v7;
  v8 = type metadata accessor for GroupMembership.MemberProperties(0);
  v40 = *(_QWORD *)(v8 - 8);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v33 - v12;
  v14 = *(_QWORD *)(a1 + 64);
  v38 = a1 + 64;
  v15 = 1 << *(_BYTE *)(a1 + 32);
  v16 = -1;
  if (v15 < 64)
    v16 = ~(-1 << v15);
  v17 = v16 & v14;
  v39 = (unint64_t)(v15 + 63) >> 6;
  v18 = a1;
  result = swift_bridgeObjectRetain();
  v20 = 0;
  v37 = MEMORY[0x24BEE4AF8];
  if (!v17)
    goto LABEL_7;
LABEL_4:
  v21 = __clz(__rbit64(v17));
  v17 &= v17 - 1;
  for (i = v21 | (v20 << 6); ; i = __clz(__rbit64(v24)) + (v20 << 6))
  {
    sub_23D5E7298(*(_QWORD *)(v18 + 56) + *(_QWORD *)(v40 + 72) * i, (uint64_t)v13, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5E7F64((uint64_t)v13, (uint64_t)v11, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5AEF48((uint64_t)&v11[*(int *)(v8 + 24)], (uint64_t)v4, &qword_256C79990);
    sub_23D5E6950((uint64_t)v11, type metadata accessor for GroupMembership.MemberProperties);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v42 + 48))(v4, 1, v41) == 1)
    {
      result = sub_23D5AEF8C((uint64_t)v4, &qword_256C79990);
      if (v17)
        goto LABEL_4;
    }
    else
    {
      v26 = v35;
      sub_23D5E7F64((uint64_t)v4, v35, type metadata accessor for UserKeyingInfo);
      sub_23D5E7F64(v26, v36, type metadata accessor for UserKeyingInfo);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v37 = sub_23D62B758(0, *(_QWORD *)(v37 + 16) + 1, 1, v37);
      v28 = *(_QWORD *)(v37 + 16);
      v27 = *(_QWORD *)(v37 + 24);
      v29 = v28 + 1;
      if (v28 >= v27 >> 1)
      {
        v34 = v28 + 1;
        v32 = sub_23D62B758(v27 > 1, v28 + 1, 1, v37);
        v29 = v34;
        v37 = v32;
      }
      v30 = v36;
      v31 = v37;
      *(_QWORD *)(v37 + 16) = v29;
      result = sub_23D5E7F64(v30, v31+ ((*(unsigned __int8 *)(v42 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80))+ *(_QWORD *)(v42 + 72) * v28, type metadata accessor for UserKeyingInfo);
      if (v17)
        goto LABEL_4;
    }
LABEL_7:
    v23 = v20 + 1;
    if (__OFADD__(v20, 1))
    {
      __break(1u);
      goto LABEL_31;
    }
    if (v23 >= v39)
      goto LABEL_29;
    v24 = *(_QWORD *)(v38 + 8 * v23);
    ++v20;
    if (!v24)
    {
      v20 = v23 + 1;
      if (v23 + 1 >= v39)
        goto LABEL_29;
      v24 = *(_QWORD *)(v38 + 8 * v20);
      if (!v24)
      {
        v20 = v23 + 2;
        if (v23 + 2 >= v39)
          goto LABEL_29;
        v24 = *(_QWORD *)(v38 + 8 * v20);
        if (!v24)
        {
          v20 = v23 + 3;
          if (v23 + 3 >= v39)
            goto LABEL_29;
          v24 = *(_QWORD *)(v38 + 8 * v20);
          if (!v24)
            break;
        }
      }
    }
LABEL_22:
    v17 = (v24 - 1) & v24;
  }
  v25 = v23 + 4;
  if (v25 >= v39)
  {
LABEL_29:
    swift_release();
    return v37;
  }
  v24 = *(_QWORD *)(v38 + 8 * v25);
  if (v24)
  {
    v20 = v25;
    goto LABEL_22;
  }
  while (1)
  {
    v20 = v25 + 1;
    if (__OFADD__(v25, 1))
      break;
    if (v20 >= v39)
      goto LABEL_29;
    v24 = *(_QWORD *)(v38 + 8 * v20);
    ++v25;
    if (v24)
      goto LABEL_22;
  }
LABEL_31:
  __break(1u);
  return result;
}

uint64_t KeyShare.init()@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  sub_23D66BCB8();
  swift_allocObject();
  v4 = 0x2000000000;
  v5 = sub_23D66BC94();
  result = sub_23D5DE1E0((int *)&v4);
  v3 = v5 | 0x4000000000000000;
  *a1 = v4;
  a1[1] = v3;
  return result;
}

void KeyShare.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

void sub_23D5B25E8(uint64_t *a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  if (BYTE6(v1) == 32)
  {
    *a1 = v2;
    a1[1] = v1;
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v3 = 263;
    *(_OWORD *)(v3 + 8) = xmmword_23D66DEE0;
    *(_OWORD *)(v3 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v3 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v2, v1);
  }
}

uint64_t static KeyShare.^ infix(_:_:)()
{
  sub_23D66C054();
  return sub_23D66C030();
}

{
  sub_23D66C054();
  return sub_23D66C030();
}

void sub_23D5B2734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_23D5B2798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unsigned __int8 v8;
  uint64_t v9;

  v3 = v8;
  if (a2 - v9 < v8)
    v3 = a2 - v9;
  if (v9)
    v4 = v3;
  else
    v4 = 0;
  *(_QWORD *)(v2 - 112) = sub_23D62C920(v4);
  *(_QWORD *)(v2 - 104) = v5;
  sub_23D62EDD8(v2 - 112);
  v6 = *(_QWORD *)(v2 - 112);
  v7 = *(_QWORD *)(v2 - 104);
  *(_QWORD *)(v2 - 112) = v6;
  *(_QWORD *)(v2 - 104) = v7;
  if ((v4 & 0x8000000000000000) == 0)
  {
    if (v4)
      __asm { BR              X11 }
    *(_QWORD *)(v2 - 128) = v6;
    *(_QWORD *)(v2 - 120) = v7;
    sub_23D5AFA60(v6, v7);
    sub_23D66C03C();
    __asm { BR              X9 }
  }
  __break(1u);
  JUMPOUT(0x23D5B2B24);
}

uint64_t sub_23D5B2BE8()
{
  sub_23D5ED994();
  return sub_23D66C930();
}

uint64_t sub_23D5B2C10()
{
  sub_23D5ED994();
  return sub_23D66C93C();
}

void KeyOffset.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_23D5B2C7C(uint64_t *a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  uint64_t v7;

  if (BYTE6(v1) == 32)
  {
    *a1 = v2;
    a1[1] = v1;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v4 = sub_23D66BFDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_256C88B78);
    v5 = sub_23D66C588();
    sub_23D5AFA60(v2, v1);
    v6 = sub_23D66BFC4();
    if (os_log_type_enabled(v6, v5))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v2, v1);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v7 = 264;
    *(_OWORD *)(v7 + 8) = xmmword_23D66DEF0;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v2, v1);
  }
}

uint64_t sub_23D5B2EF4()
{
  sub_23D5ED9D8();
  return sub_23D66C930();
}

uint64_t sub_23D5B2F1C()
{
  sub_23D5ED9D8();
  return sub_23D66C93C();
}

uint64_t static Nonce.nonceLength.getter()
{
  return 12;
}

void Nonce.init(_:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

void sub_23D5B2F90(uint64_t *a1@<X8>)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  uint64_t v7;

  if (BYTE6(v1) == 12)
  {
    *a1 = v2;
    a1[1] = v1;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v4 = sub_23D66BFDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_256C88B78);
    v5 = sub_23D66C588();
    sub_23D5AFA60(v2, v1);
    v6 = sub_23D66BFC4();
    if (os_log_type_enabled(v6, v5))
    {
      *(_DWORD *)swift_slowAlloc() = 134218240;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v2, v1);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v7 = 262;
    *(_OWORD *)(v7 + 8) = xmmword_23D66DF00;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v2, v1);
  }
}

uint64_t _s14GroupKitCrypto0A2IDV4hash4intoys6HasherVz_tF_0()
{
  uint64_t *v0;
  unint64_t v1;
  uint64_t v2;

  v2 = *v0;
  v1 = v0[1];
  sub_23D5AFA60(v2, v1);
  sub_23D66BDA8();
  return sub_23D5DDA20(v2, v1);
}

uint64_t _s14GroupKitCrypto0A0C0A15DBDecryptionKeyV0E4TypeO9hashValueSivg_0()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t sub_23D5B3294()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t sub_23D5B32D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  char v5;
  uint64_t result;
  char v7;

  if (a1 == 0x65756C6156776172 && a2 == 0xE800000000000000)
  {
    result = swift_bridgeObjectRelease();
    v7 = 0;
  }
  else
  {
    v5 = sub_23D66C84C();
    result = swift_bridgeObjectRelease();
    v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_23D5B3364()
{
  sub_23D5EDA1C();
  return sub_23D66C930();
}

uint64_t sub_23D5B338C()
{
  sub_23D5EDA1C();
  return sub_23D66C93C();
}

uint64_t _s14GroupKitCrypto0A2IDV9hashValueSivg_0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23D66C8E8();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  return sub_23D66C90C();
}

uint64_t sub_23D5B3418()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *v0;
  v2 = v0[1];
  sub_23D66C8E8();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  return sub_23D66C90C();
}

uint64_t signRequestForGroupBlob(groupKitUserId:groupID:dsid:nonce:)(_OWORD *a1, __int128 *a2, _QWORD *a3, _OWORD *a4)
{
  uint64_t v4;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;

  v9 = sub_23D66C2DC();
  *(_QWORD *)(v4 + 512) = v9;
  *(_QWORD *)(v4 + 520) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 528) = swift_task_alloc();
  *(_QWORD *)(v4 + 536) = type metadata accessor for GKCrypto_GroupBlobRequest(0);
  *(_QWORD *)(v4 + 544) = swift_task_alloc();
  v10 = sub_23D66C2AC();
  *(_QWORD *)(v4 + 552) = v10;
  *(_QWORD *)(v4 + 560) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 568) = swift_task_alloc();
  type metadata accessor for PCSKeyPair();
  *(_QWORD *)(v4 + 576) = swift_task_alloc();
  v11 = *a2;
  *(_OWORD *)(v4 + 584) = *a1;
  *(_OWORD *)(v4 + 600) = v11;
  v12 = a3[1];
  *(_QWORD *)(v4 + 616) = *a3;
  *(_QWORD *)(v4 + 624) = v12;
  *(_OWORD *)(v4 + 632) = *a4;
  return swift_task_switch();
}

uint64_t sub_23D5B3580()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD v10[3];

  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5E6808(&byte_25431AB68, v0 + 16);
  sub_23D5AEF48(v0 + 232, v0 + 336, &qword_25431A828);
  if (*(_QWORD *)(v0 + 360))
  {
    v1 = *(_QWORD *)(v0 + 624);
    v2 = *(_QWORD *)(v0 + 616);
    sub_23D5AEF30((__int128 *)(v0 + 336), v0 + 376);
    sub_23D5E6844((_QWORD *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 400);
    v4 = *(_QWORD *)(v0 + 408);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 376), v3);
    v10[0] = v2;
    v10[1] = v1;
    (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v10, 0xD000000000000022, 0x800000023D676F50, v3, v4);
    __swift_destroy_boxed_opaque_existential_1(v0 + 376);
    v5 = *(_QWORD *)(v0 + 440);
    v6 = *(_QWORD *)(v0 + 448);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 416), v5);
    v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 16) + *(_QWORD *)(v6 + 16));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 648) = v7;
    *v7 = v0;
    v7[1] = sub_23D5B37CC;
    return v9(*(_QWORD *)(v0 + 576), v5, v6);
  }
  else
  {
    sub_23D5AEF8C(v0 + 336, &qword_25431A828);
    return sub_23D66C720();
  }
}

uint64_t sub_23D5B37CC()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 656) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23D5B3830()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  os_log_type_t v9;
  NSObject *v10;
  os_log_type_t v11;
  _BOOL4 v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t inited;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  os_log_type_t type;
  os_log_t log;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  NSObject *v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  __int128 v78;
  __int128 v79;

  v1 = v0 + 416;
  v2 = *(_QWORD *)(v0 + 656);
  v3 = *(_OWORD *)(v0 + 584);
  v78 = *(_OWORD *)(v0 + 600);
  v79 = v3;
  sub_23D63FCA4((uint64_t *)&v78, (uint64_t *)&v79);
  if (v2)
  {
    sub_23D5E6950(*(_QWORD *)(v0 + 576), (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
LABEL_13:
    __swift_destroy_boxed_opaque_existential_1(v1);
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  if (v71 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v4 = *(_QWORD *)(v0 + 608);
    v5 = *(_QWORD *)(v0 + 600);
    v6 = *(_QWORD *)(v0 + 592);
    v7 = *(_QWORD *)(v0 + 584);
    v8 = sub_23D66BFDC();
    __swift_project_value_buffer(v8, (uint64_t)qword_256C88B78);
    v9 = sub_23D66C588();
    sub_23D5AFA60(v5, v4);
    sub_23D5AFA60(v7, v6);
    sub_23D5AFA60(v5, v4);
    sub_23D5AFA60(v7, v6);
    v10 = sub_23D66BFC4();
    v11 = v9;
    v12 = os_log_type_enabled(v10, v9);
    v13 = *(_QWORD *)(v0 + 608);
    v14 = *(_QWORD *)(v0 + 600);
    v15 = *(_QWORD *)(v0 + 592);
    v16 = *(_QWORD *)(v0 + 584);
    if (v12)
    {
      v17 = swift_slowAlloc();
      v68 = swift_slowAlloc();
      v70 = v68;
      *(_DWORD *)v17 = 136315394;
      sub_23D5AFA60(v14, v13);
      v18 = sub_23D66BD30();
      type = v11;
      v20 = v19;
      sub_23D5DDA20(v14, v13);
      *(_QWORD *)(v0 + 496) = sub_23D5DDBDC(v18, v20, &v70);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v14, v13);
      sub_23D5DDA20(v14, v13);
      *(_WORD *)(v17 + 12) = 2080;
      sub_23D5AFA60(v16, v15);
      v21 = sub_23D66BD30();
      v23 = v22;
      sub_23D5DDA20(v16, v15);
      *(_QWORD *)(v0 + 504) = sub_23D5DDBDC(v21, v23, &v70);
      sub_23D66C5D0();
      v1 = v0 + 416;
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v16, v15);
      sub_23D5DDA20(v16, v15);
      _os_log_impl(&dword_23D5A8000, v10, type, "GroupAccessInfo not found in storage for groupID %s and userID %s", (uint8_t *)v17, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242636844](v68, -1, -1);
      MEMORY[0x242636844](v17, -1, -1);
    }
    else
    {
      sub_23D5DDA20(*(_QWORD *)(v0 + 600), *(_QWORD *)(v0 + 608));
      sub_23D5DDA20(v14, v13);
      sub_23D5DDA20(v16, v15);
      sub_23D5DDA20(v16, v15);
    }

    v37 = *(_QWORD *)(v0 + 576);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v38 = 358;
    *(_OWORD *)(v38 + 8) = xmmword_23D66DF20;
    *(_QWORD *)(v38 + 24) = 0x800000023D676F80;
    *(_QWORD *)(v38 + 32) = 0xD000000000000052;
    *(_QWORD *)(v38 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5E6950(v37, (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
    goto LABEL_13;
  }
  log = v72;
  v69 = v73;
  v57 = v70;
  v58 = v74;
  v59 = v75;
  v60 = v76;
  v61 = v77;
  v62 = v71;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  if (qword_256C78D78 != -1)
    swift_once();
  v63 = *(_QWORD *)(v0 + 632);
  v25 = *(_QWORD *)(v0 + 608);
  v26 = *(_QWORD *)(v0 + 600);
  v27 = *(_QWORD *)(v0 + 568);
  v65 = *(_QWORD *)(v0 + 640);
  v28 = qword_256C891A0;
  v29 = *(_QWORD *)algn_256C891A8;
  *(_QWORD *)(inited + 32) = qword_256C891A0;
  *(_QWORD *)(inited + 40) = v29;
  *(_QWORD *)(inited + 48) = v26;
  *(_QWORD *)(inited + 56) = v25;
  sub_23D5AFA60(v28, v29);
  sub_23D5AFA60(v26, v25);
  v30 = sub_23D62FE18(inited);
  v32 = v31;
  swift_setDeallocating();
  swift_arrayDestroy();
  v56 = v30;
  v64 = v32;
  sub_23D66C294();
  v33 = (_QWORD *)swift_task_alloc();
  v33[2] = v26;
  v33[3] = v25;
  v33[4] = v27;
  v33[5] = v63;
  v33[6] = v65;
  sub_23D5AE928(&qword_256C790F8, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D672C14);
  sub_23D66BF4C();
  swift_task_dealloc();
  v34 = sub_23D5DA1E8(&qword_256C78B70, &qword_256C88C40, (unint64_t *)algn_256C88C48);
  v36 = v35;
  *(_QWORD *)(v0 + 480) = v34;
  *(_QWORD *)(v0 + 488) = v35;
  sub_23D5E6898();
  sub_23D66C2A0();
  v39 = *(_QWORD *)(v0 + 544);
  v40 = *(_QWORD *)(v0 + 528);
  v41 = *(_QWORD *)(v0 + 520);
  v42 = *(_QWORD *)(v0 + 512);
  sub_23D5DDA20(v34, v36);
  v43 = sub_23D66C2B8();
  v45 = v44;
  (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
  sub_23D5DDA20(*(_QWORD *)(v39 + 56), *(_QWORD *)(v39 + 64));
  *(_QWORD *)(v39 + 56) = v43;
  *(_QWORD *)(v39 + 64) = v45;
  v46 = sub_23D66BF1C();
  v47 = *(_QWORD *)(v0 + 576);
  v48 = *(_QWORD *)(v0 + 568);
  v49 = *(_QWORD *)(v0 + 560);
  v50 = *(_QWORD *)(v0 + 552);
  v51 = *(_QWORD *)(v0 + 544);
  v52 = v46;
  v54 = v53;
  sub_23D5DDA20(v56, v64);
  sub_23D5E68DC(v57, v62, (uint64_t)log, v69, v58, v59, v60, v61);
  sub_23D5E6950(v51, type metadata accessor for GKCrypto_GroupBlobRequest);
  sub_23D5E6950(v47, (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
  (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v48, v50);
  __swift_destroy_boxed_opaque_existential_1(v0 + 416);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v52, v54);
}

uint64_t sub_23D5B4040()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 416);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D5B40A8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  unint64_t v24;

  v23 = a5;
  v24 = a6;
  v9 = sub_23D66C330();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  v13 = *(_QWORD *)(a1 + 24);
  v14 = *(_QWORD *)(a1 + 32);
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v13, v14);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  sub_23D66C264();
  v15 = sub_23D66C1F8();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v17;
  v18 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 16);
  v21 = v23;
  v20 = v24;
  sub_23D5AFA60(v23, v24);
  result = sub_23D5DDA20(v18, v19);
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v20;
  return result;
}

uint64_t sub_23D5B41BC()
{
  return sub_23D5DA1E8(&qword_256C78B70, &qword_256C88C40, (unint64_t *)algn_256C88C48);
}

uint64_t sub_23D5B421C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_23D5B4258 + 4 * byte_23D66E5A5[a1]))(0x4777654E74696E69, 0xEC00000070756F72);
}

unint64_t sub_23D5B4258()
{
  return 0xD000000000000014;
}

uint64_t sub_23D5B4358()
{
  return 0x6C654470756F7267;
}

uint64_t Group.groupID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t sub_23D5B4384@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v1;
  uint64_t result;

  result = swift_beginAccess();
  *a1 = *(_BYTE *)(v1 + 32);
  return result;
}

uint64_t Group.member.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  *a1 = v2;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t sub_23D5B43D0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  v3 = *a2;
  swift_beginAccess();
  *(_QWORD *)(v3 + 56) = v2;
  swift_bridgeObjectRetain();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D5B442C@<X0>(_QWORD *a1@<X8>)
{
  uint64_t v1;

  swift_beginAccess();
  *a1 = *(_QWORD *)(v1 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23D5B4470()
{
  uint64_t v0;

  swift_beginAccess();
  return *(unsigned int *)(v0 + 64);
}

uint64_t sub_23D5B44A0()
{
  uint64_t v0;
  int v1;

  v1 = *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
  if (v1 == 5)
    return 1;
  else
    return 2 * (v1 != 6);
}

uint64_t sub_23D5B44C4()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  __int128 v7;
  uint64_t v8;
  uint64_t v9[3];
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v2 = v0[2];
  v3 = v0[3];
  v9[0] = v2;
  v9[1] = v3;
  v4 = v0[5];
  v5 = v0[6];
  *(_QWORD *)&v7 = v4;
  *((_QWORD *)&v7 + 1) = v5;
  result = sub_23D63FE0C(v9, (uint64_t *)&v7);
  if (!v1)
  {
    if (qword_25431AB48 != -1)
      swift_once();
    swift_beginAccess();
    sub_23D5AEF48((uint64_t)&unk_25431AC10, (uint64_t)&v7, &qword_25431A9A8);
    if (!v8)
      goto LABEL_8;
    sub_23D5AEF30(&v7, (uint64_t)v9);
    swift_endAccess();
    __swift_project_boxed_opaque_existential_1(v9, v10);
    *(_QWORD *)&v7 = v2;
    *((_QWORD *)&v7 + 1) = v3;
    v11 = v4;
    v12 = v5;
    sub_23D5AFA60(v2, v3);
    sub_23D5AFA60(v4, v5);
    sub_23D64E628((uint64_t *)&v7, &v11);
    sub_23D5DDA20(v4, v5);
    sub_23D5DDA20(v2, v3);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
    swift_beginAccess();
    sub_23D5AEF48((uint64_t)&unk_25431AC10, (uint64_t)&v7, &qword_25431A9A8);
    if (v8)
    {
      sub_23D5AEF30(&v7, (uint64_t)v9);
      swift_endAccess();
      __swift_project_boxed_opaque_existential_1(v9, v10);
      *(_QWORD *)&v7 = v2;
      *((_QWORD *)&v7 + 1) = v3;
      v11 = v4;
      v12 = v5;
      sub_23D5AFA60(v2, v3);
      sub_23D5AFA60(v4, v5);
      sub_23D64ED0C((uint64_t *)&v7, &v11);
      sub_23D5DDA20(v4, v5);
      sub_23D5DDA20(v2, v3);
      result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v9);
      *((_BYTE *)v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 11;
    }
    else
    {
LABEL_8:
      sub_23D5AEF8C((uint64_t)&v7, &qword_25431A9A8);
      result = sub_23D66C720();
      __break(1u);
    }
  }
  return result;
}

uint64_t sub_23D5B471C(uint64_t *a1, int a2, char *a3, uint64_t *a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, unint64_t a13, unsigned __int8 a14, uint64_t a15, unint64_t a16)
{
  uint64_t v16;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  int v66;
  uint64_t v67;
  void (*v68)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v69;
  unint64_t v70;
  char *v71;
  unint64_t v72;
  uint64_t v73;

  v73 = a8;
  v60 = a2;
  v70 = a16;
  v67 = a15;
  v66 = a14;
  v64 = a12;
  v65 = a13;
  v63 = a11;
  v61 = a5;
  v62 = a10;
  v72 = a9;
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79128);
  MEMORY[0x24BDAC7A8](v22);
  v71 = (char *)&v58 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = *a1;
  v24 = a1[1];
  v26 = *a3;
  v27 = *a4;
  v28 = a4[1];
  v29 = a6[1];
  v59 = *a6;
  *(_OWORD *)(v16 + 88) = xmmword_23D66DF30;
  *(_QWORD *)(v16 + 104) = 0;
  *(_QWORD *)(v16 + 112) = 0;
  *(_OWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset) = xmmword_23D66DF30;
  *(_OWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_23D66DF30;
  v30 = v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  v31 = *a7;
  v32 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  v68 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56);
  v69 = v32;
  v68(v30, 1, 1, v32);
  v33 = v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
  *(_OWORD *)v33 = 0u;
  *(_OWORD *)(v33 + 16) = 0u;
  *(_QWORD *)(v33 + 32) = 0;
  *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  *(_BYTE *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  *(_QWORD *)(v16 + 16) = v25;
  *(_QWORD *)(v16 + 24) = v24;
  *(_DWORD *)(v16 + 64) = v60;
  *(_BYTE *)(v16 + 32) = v26;
  *(_QWORD *)(v16 + 40) = v27;
  *(_QWORD *)(v16 + 48) = v28;
  v34 = v61;
  sub_23D5E7298(v61, v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
  v35 = (_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  v36 = *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  v37 = *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  *v35 = v59;
  v35[1] = v29;
  sub_23D5E725C(v36, v37);
  *(_QWORD *)(v16 + 56) = v31;
  v39 = v72;
  v38 = v73;
  *(_QWORD *)(v16 + 72) = v73;
  *(_QWORD *)(v16 + 80) = v39;
  v40 = *(_QWORD *)(v16 + 88);
  v41 = *(_QWORD *)(v16 + 96);
  v42 = *(_QWORD *)(v16 + 104);
  v43 = *(_QWORD *)(v16 + 112);
  v44 = v62;
  v45 = v63;
  *(_QWORD *)(v16 + 88) = v62;
  *(_QWORD *)(v16 + 96) = v45;
  v46 = v64;
  v47 = v65;
  *(_QWORD *)(v16 + 104) = v64;
  *(_QWORD *)(v16 + 112) = v47;
  sub_23D5AFA60(v38, v39);
  sub_23D5E7FA8(v44, v45, v46, v47);
  sub_23D5E7220(v40, v41, v42, v43);
  *(_BYTE *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = v66;
  v48 = (uint64_t *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  v49 = *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  v50 = *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
  v51 = v67;
  v52 = v70;
  *v48 = v67;
  v48[1] = v52;
  sub_23D5AFA60(v51, v52);
  sub_23D5E725C(v49, v50);
  v53 = MEMORY[0x24BEE4AF8];
  *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites) = sub_23D5B4EE4(MEMORY[0x24BEE4AF8]);
  v54 = sub_23D5B5070(v53, &qword_256C79B00, &qword_256C79B08, type metadata accessor for MembershipVerifier);
  sub_23D5DDA20(v51, v52);
  sub_23D5E7220(v44, v45, v46, v47);
  sub_23D5DDA20(v73, v72);
  sub_23D5E6950(v34, type metadata accessor for UserKeyingInfo);
  *(_QWORD *)(v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers) = v54;
  v55 = (uint64_t)v71;
  v68((uint64_t)v71, 1, 1, v69);
  v56 = v16 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  swift_beginAccess();
  sub_23D5F1788(v55, v56, &qword_256C79128);
  swift_endAccess();
  return v16;
}

unint64_t sub_23D5B4A54(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t result;
  char v10;
  uint64_t *v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79928);
  v2 = sub_23D66C75C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23D5AEF48(v6, (uint64_t)&v15, &qword_256C79930);
    v7 = v15;
    v8 = v16;
    result = sub_23D5DF330(v15, v16);
    if ((v10 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v11 = (uint64_t *)(v3[6] + 16 * result);
    *v11 = v7;
    v11[1] = v8;
    result = (unint64_t)sub_23D5F1150(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 48;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23D5B4B88(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  id v7;
  unint64_t result;
  char v9;
  _QWORD *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79948);
  v2 = (_QWORD *)sub_23D66C75C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 1);
    v6 = *v4;
    v7 = (id)*(v4 - 2);
    swift_bridgeObjectRetain();
    result = sub_23D5DF41C((uint64_t)v7);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    *(_QWORD *)(v2[6] + 8 * result) = v7;
    v10 = (_QWORD *)(v2[7] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v4 += 3;
    v2[2] = v13;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23D5B4C9C(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79958);
  v2 = (_QWORD *)sub_23D66C75C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 40);
  while (1)
  {
    v6 = (_QWORD *)*(v4 - 1);
    v5 = *v4;
    swift_retain();
    swift_retain();
    result = sub_23D5DF4A4(v6);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v9 = 8 * result;
    *(_QWORD *)(v2[6] + v9) = v6;
    *(_QWORD *)(v2[7] + v9) = v5;
    v10 = v2[2];
    v11 = __OFADD__(v10, 1);
    v12 = v10 + 1;
    if (v11)
      goto LABEL_11;
    v2[2] = v12;
    v4 += 2;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23D5B4DA4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t result;
  char v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  _OWORD v15[2];
  uint64_t v16;
  __int128 v17;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79960);
  v2 = sub_23D66C75C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v5 = v2 + 64;
  v6 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_23D5AEF48(v6, (uint64_t)v15, &qword_256C79968);
    result = sub_23D5DF538((uint64_t)v15);
    if ((v8 & 1) != 0)
      break;
    *(_QWORD *)(v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v9 = v3[6] + 40 * result;
    v10 = v15[0];
    v11 = v15[1];
    *(_QWORD *)(v9 + 32) = v16;
    *(_OWORD *)v9 = v10;
    *(_OWORD *)(v9 + 16) = v11;
    result = (unint64_t)sub_23D5F1150(&v17, (_OWORD *)(v3[7] + 32 * result));
    v12 = v3[2];
    v13 = __OFADD__(v12, 1);
    v14 = v12 + 1;
    if (v13)
      goto LABEL_11;
    v3[2] = v14;
    v6 += 72;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23D5B4EE4(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t result;
  char v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  if (!*(_QWORD *)(a1 + 16))
  {
    v3 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79B10);
  v2 = sub_23D66C75C();
  v3 = (_QWORD *)v2;
  v4 = *(_QWORD *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }
  v21 = v2 + 64;
  swift_retain();
  v5 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v22 = v4;
    v6 = *(v5 - 2);
    v7 = *(v5 - 1);
    v8 = *v5;
    v9 = v5[1];
    v10 = v5[2];
    v11 = v5[3];
    v12 = v5[4];
    v13 = v5[5];
    sub_23D5AFA60(v6, v7);
    sub_23D5AFA60(v8, v9);
    sub_23D5AFA60(v10, v11);
    sub_23D5AFA60(v12, v13);
    result = sub_23D5DF394(v6, v7);
    if ((v15 & 1) != 0)
      break;
    *(_QWORD *)(v21 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v16 = (uint64_t *)(v3[6] + 16 * result);
    *v16 = v6;
    v16[1] = v7;
    v17 = (uint64_t *)(v3[7] + 48 * result);
    *v17 = v8;
    v17[1] = v9;
    v17[2] = v10;
    v17[3] = v11;
    v17[4] = v12;
    v17[5] = v13;
    v18 = v3[2];
    v19 = __OFADD__(v18, 1);
    v20 = v18 + 1;
    if (v19)
      goto LABEL_11;
    v5 += 8;
    v3[2] = v20;
    v4 = v22 - 1;
    if (v22 == 1)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23D5B5054(uint64_t a1)
{
  return sub_23D5B5070(a1, &qword_256C79AD8, &qword_256C79AF8, type metadata accessor for GroupMembership.MemberProperties);
}

unint64_t sub_23D5B5070(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(_QWORD))
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t result;
  char v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;

  v31 = a2;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (_QWORD *)((char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  if (!*(_QWORD *)(a1 + 16))
  {
    v12 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(a3);
  v11 = sub_23D66C75C();
  v12 = (_QWORD *)v11;
  v13 = *(_QWORD *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }
  v14 = (uint64_t)v10 + *(int *)(v7 + 48);
  v29[1] = a1;
  v30 = v14;
  v15 = v11 + 64;
  v16 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  v17 = *(_QWORD *)(v8 + 72);
  swift_retain();
  while (1)
  {
    sub_23D5AEF48(v16, (uint64_t)v10, v31);
    v18 = *v10;
    v19 = v10[1];
    result = sub_23D5DF394(*v10, v19);
    if ((v21 & 1) != 0)
      break;
    v22 = result;
    *(_QWORD *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << result;
    v23 = (uint64_t *)(v12[6] + 16 * result);
    *v23 = v18;
    v23[1] = v19;
    v24 = v12[7];
    v25 = a4(0);
    result = sub_23D5E7F64(v30, v24 + *(_QWORD *)(*(_QWORD *)(v25 - 8) + 72) * v22, a4);
    v26 = v12[2];
    v27 = __OFADD__(v26, 1);
    v28 = v26 + 1;
    if (v27)
      goto LABEL_11;
    v12[2] = v28;
    v16 += v17;
    if (!--v13)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_23D5B5208(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t result;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;

  if (!*(_QWORD *)(a1 + 16))
  {
    v2 = (_QWORD *)MEMORY[0x24BEE4B00];
    goto LABEL_9;
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79978);
  v2 = (_QWORD *)sub_23D66C75C();
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v2;
  }
  swift_retain();
  v4 = (uint64_t *)(a1 + 48);
  while (1)
  {
    v5 = *(v4 - 2);
    v6 = *(v4 - 1);
    v7 = *v4;
    sub_23D5AFA60(v5, v6);
    swift_bridgeObjectRetain();
    result = sub_23D5DF394(v5, v6);
    if ((v9 & 1) != 0)
      break;
    *(_QWORD *)((char *)v2 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
    v10 = (uint64_t *)(v2[6] + 16 * result);
    *v10 = v5;
    v10[1] = v6;
    *(_QWORD *)(v2[7] + 8 * result) = v7;
    v11 = v2[2];
    v12 = __OFADD__(v11, 1);
    v13 = v11 + 1;
    if (v12)
      goto LABEL_11;
    v2[2] = v13;
    v4 += 3;
    if (!--v3)
    {
      swift_release();
      goto LABEL_9;
    }
  }
  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t Group.__allocating_init(groupID:originatorGroupUserID:dsid:)(_OWORD *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v7;

  swift_allocObject();
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23D5B539C;
  return Group.init(groupID:originatorGroupUserID:dsid:)(a1, a2, a3);
}

uint64_t sub_23D5B539C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v4;
  uint64_t v5;

  v4 = *v2;
  v5 = swift_task_dealloc();
  if (!v1)
    v5 = a1;
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(v5);
}

uint64_t Group.init(groupID:originatorGroupUserID:dsid:)(_OWORD *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v4 + 400) = v3;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79118);
  *(_QWORD *)(v4 + 408) = swift_task_alloc();
  v8 = sub_23D66C210();
  *(_QWORD *)(v4 + 416) = v8;
  *(_QWORD *)(v4 + 424) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v4 + 432) = swift_task_alloc();
  *(_QWORD *)(v4 + 440) = type metadata accessor for Invite(0);
  *(_QWORD *)(v4 + 448) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  *(_QWORD *)(v4 + 456) = swift_task_alloc();
  v9 = sub_23D66C2AC();
  *(_QWORD *)(v4 + 464) = v9;
  *(_QWORD *)(v4 + 472) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v4 + 480) = swift_task_alloc();
  *(_QWORD *)(v4 + 488) = swift_task_alloc();
  v10 = sub_23D66C330();
  *(_QWORD *)(v4 + 496) = v10;
  *(_QWORD *)(v4 + 504) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v4 + 512) = swift_task_alloc();
  v11 = type metadata accessor for MembershipVerifier(0);
  *(_QWORD *)(v4 + 520) = v11;
  *(_QWORD *)(v4 + 528) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v4 + 536) = swift_task_alloc();
  *(_QWORD *)(v4 + 544) = swift_task_alloc();
  *(_QWORD *)(v4 + 552) = type metadata accessor for GKCrypto_UserKeys(0);
  *(_QWORD *)(v4 + 560) = swift_task_alloc();
  *(_QWORD *)(v4 + 568) = type metadata accessor for UserKeyingInfo(0);
  *(_QWORD *)(v4 + 576) = swift_task_alloc();
  *(_QWORD *)(v4 + 584) = swift_task_alloc();
  v12 = *a2;
  *(_OWORD *)(v4 + 592) = *a1;
  *(_OWORD *)(v4 + 608) = v12;
  v13 = a3[1];
  *(_QWORD *)(v4 + 624) = *a3;
  *(_QWORD *)(v4 + 632) = v13;
  return swift_task_switch();
}

uint64_t sub_23D5B55D8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  unint64_t v28;
  unint64_t v29;

  v1 = *(_QWORD *)(v0 + 616);
  v2 = *(_QWORD *)(v0 + 608);
  v3 = *(_QWORD *)(v0 + 600);
  v4 = *(_QWORD *)(v0 + 592);
  v5 = *(_QWORD *)(v0 + 400);
  *(_OWORD *)(v5 + 88) = xmmword_23D66DF30;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  v6 = OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset;
  *(_QWORD *)(v0 + 640) = OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset;
  *(_OWORD *)(v5 + v6) = xmmword_23D66DF30;
  *(_OWORD *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_23D66DF30;
  v7 = v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  v8 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 56))(v7, 1, 1, v8);
  v9 = v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
  *(_OWORD *)v9 = 0u;
  *(_OWORD *)(v9 + 16) = 0u;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 0;
  *(_DWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 16) = v4;
  *(_QWORD *)(v5 + 24) = v3;
  *(_BYTE *)(v5 + 32) = 0;
  *(_QWORD *)(v5 + 40) = v2;
  *(_QWORD *)(v5 + 48) = v1;
  sub_23D66BCB8();
  swift_allocObject();
  sub_23D5AFA60(v4, v3);
  sub_23D5AFA60(v2, v1);
  v10 = sub_23D66BC94();
  sub_23D61BC58(0x4000000000, v10 | 0x4000000000000000);
  *(_QWORD *)(v0 + 648) = v11;
  *(_QWORD *)(v0 + 656) = v12;
  *(_QWORD *)(v0 + 664) = v13;
  *(_QWORD *)(v0 + 672) = v14;
  v15 = v13;
  v16 = v14;
  v17 = *(_QWORD *)(v5 + 88);
  v18 = *(_QWORD *)(v5 + 104);
  v28 = *(_QWORD *)(v5 + 112);
  v29 = *(_QWORD *)(v5 + 96);
  *(_QWORD *)(v5 + 88) = v11;
  *(_QWORD *)(v5 + 96) = v12;
  *(_QWORD *)(v5 + 104) = v13;
  *(_QWORD *)(v5 + 112) = v14;
  sub_23D5AFA60(v11, v12);
  sub_23D5E7284(v15, v16);
  sub_23D5E7220(v17, v29, v18, v28);
  swift_allocObject();
  v19 = sub_23D66BC94();
  sub_23D61BF0C(0x4000000000, v19 | 0x4000000000000000);
  v20 = *(_QWORD *)(v0 + 632);
  v21 = *(_QWORD *)(v0 + 624);
  v22 = *(_QWORD *)(v0 + 400);
  v23 = *(_OWORD *)(v0 + 608);
  *(_QWORD *)(v22 + 72) = v24;
  *(_QWORD *)(v22 + 80) = v25;
  *(_OWORD *)(v0 + 384) = v23;
  *(_QWORD *)(v0 + 368) = v21;
  *(_QWORD *)(v0 + 376) = v20;
  v26 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 680) = v26;
  *v26 = v0;
  v26[1] = sub_23D5B59E4;
  return UserKeyingInfo.init(userID:dsid:)(*(_QWORD *)(v0 + 584), (_OWORD *)(v0 + 384), (_QWORD *)(v0 + 368));
}

uint64_t sub_23D5B59E4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 688) = v0;
  swift_task_dealloc();
  if (v0)
    sub_23D5DDA20(*(_QWORD *)(v2 + 592), *(_QWORD *)(v2 + 600));
  return swift_task_switch();
}

uint64_t sub_23D5B5A54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  void (*v34)(uint64_t, uint64_t, uint64_t);
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t inited;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  void (*v80)(uint64_t, uint64_t);
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  void (*v107)(char *, uint64_t, uint64_t);
  uint64_t v108;
  uint64_t v109;
  __int128 v110;
  unint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135[2];
  uint64_t v136[2];
  _OWORD v137[4];

  v132 = *(_QWORD *)(v0 + 688);
  v1 = *(_QWORD *)(v0 + 576);
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_QWORD *)(v0 + 560);
  v4 = *(_QWORD *)(v0 + 400);
  v5 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  sub_23D5E7F64(*(_QWORD *)(v0 + 584), v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
  v6 = *(_QWORD *)(v4 + 40);
  v7 = *(_QWORD *)(v4 + 48);
  swift_beginAccess();
  v8 = *(_BYTE *)(v4 + 32);
  swift_beginAccess();
  v126 = v5;
  sub_23D5E7298(v5, v1, type metadata accessor for UserKeyingInfo);
  *(_QWORD *)(v3 + 72) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(v3 + 80) = xmmword_23D66DF40;
  v134 = v6;
  sub_23D5AFA60(v6, v7);
  sub_23D66BE5C();
  *(_DWORD *)v3 = 1;
  *(_QWORD *)(v3 + 8) = sub_23D66C1F8();
  *(_QWORD *)(v3 + 16) = v9;
  *(_QWORD *)(v3 + 24) = sub_23D66C1F8();
  *(_QWORD *)(v3 + 32) = v10;
  *(_QWORD *)(v3 + 40) = sub_23D66C2B8();
  *(_QWORD *)(v3 + 48) = v11;
  v129 = v2;
  *(_QWORD *)(v3 + 56) = sub_23D66C2B8();
  *(_QWORD *)(v3 + 64) = v12;
  sub_23D5AE928((unint64_t *)&qword_256C79138, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D672B9C);
  v13 = v132;
  v14 = sub_23D66BF1C();
  if (v132)
  {
    v16 = *(_QWORD *)(v0 + 672);
    v17 = *(_QWORD *)(v0 + 664);
    v18 = *(_QWORD *)(v0 + 656);
    v19 = *(_QWORD *)(v0 + 648);
    v20 = *(_QWORD *)(v0 + 600);
    v21 = *(_QWORD *)(v0 + 592);
    v22 = *(_QWORD *)(v0 + 576);
    sub_23D5E6950(*(_QWORD *)(v0 + 560), type metadata accessor for GKCrypto_UserKeys);
    sub_23D5DDA20(v19, v18);
    sub_23D5E725C(v17, v16);
    sub_23D5DDA20(v21, v20);
    sub_23D5E6950(v22, type metadata accessor for UserKeyingInfo);
    sub_23D5DDA20(v134, v7);
LABEL_6:
    v57 = *(_QWORD *)(v0 + 400);
    sub_23D5DDA20(*(_QWORD *)(v57 + 16), *(_QWORD *)(v57 + 24));
    sub_23D5DDA20(*(_QWORD *)(v57 + 40), *(_QWORD *)(v57 + 48));
    sub_23D5DDA20(*(_QWORD *)(*(_QWORD *)(v0 + 400) + 72), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 80));
    sub_23D5E7220(*(_QWORD *)(*(_QWORD *)(v0 + 400) + 88), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 96), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 104), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 112));
    sub_23D5E6950(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
    sub_23D5E725C(*(_QWORD *)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset), *(_QWORD *)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8));
    if (!v13)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    v58 = *(_QWORD *)(v0 + 400);
    sub_23D5E725C(*(_QWORD *)(v58 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(_QWORD *)(v58 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
    sub_23D5AEF8C(v58 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, &qword_256C79128);
    sub_23D5AEF8C(v58 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_256C79130);
    swift_release();
    type metadata accessor for Group(0);
    swift_deallocPartialClassInstance();
LABEL_9:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v115 = v8;
  v124 = v14;
  v125 = v15;
  v123 = v7;
  v23 = *(_QWORD *)(v0 + 600);
  v24 = *(_QWORD *)(v0 + 592);
  v25 = *(_QWORD *)(v0 + 576);
  v26 = *(_QWORD *)(v0 + 544);
  v28 = *(_QWORD *)(v0 + 504);
  v27 = *(_QWORD *)(v0 + 512);
  v29 = *(_QWORD *)(v0 + 496);
  v117 = *(_QWORD *)(v0 + 568);
  v120 = *(_QWORD *)(v0 + 472);
  v30 = *(_QWORD *)(v0 + 456);
  v130 = *(_QWORD *)(v0 + 464);
  v31 = *(_QWORD *)(v0 + 400);
  sub_23D5E6950(*(_QWORD *)(v0 + 560), type metadata accessor for GKCrypto_UserKeys);
  sub_23D5E6950(v25, type metadata accessor for UserKeyingInfo);
  v32 = MEMORY[0x24BEE4AF8];
  v33 = sub_23D5B4EE4(MEMORY[0x24BEE4AF8]);
  v114 = (uint64_t *)(v31 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
  *(_QWORD *)(v31 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites) = v33;
  *(_QWORD *)(v31 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers) = sub_23D5B5070(v32, &qword_256C79B00, &qword_256C79B08, type metadata accessor for MembershipVerifier);
  *(_QWORD *)&v137[0] = v24;
  *((_QWORD *)&v137[0] + 1) = v23;
  v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v28 + 16);
  v34(v27, v126 + *(int *)(v129 + 28), v29);
  sub_23D5AFA60(v24, v23);
  sub_23D6301BC((uint64_t *)v137, v27, v26);
  sub_23D5AEF48(v126 + *(int *)(v117 + 44), v30, &qword_256C79120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v120 + 48))(v30, 1, v130) == 1)
  {
    v35 = *(_QWORD *)(v0 + 672);
    v36 = *(_QWORD *)(v0 + 664);
    v37 = *(_QWORD *)(v0 + 656);
    v38 = *(_QWORD *)(v0 + 648);
    v39 = *(_QWORD *)(v0 + 544);
    v40 = *(_QWORD *)(v0 + 456);
    sub_23D5DDA20(*(_QWORD *)(v0 + 592), *(_QWORD *)(v0 + 600));
    sub_23D5AEF8C(v40, &qword_256C79120);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v41 = 329;
    *(_OWORD *)(v41 + 8) = xmmword_23D66DF60;
    *(_QWORD *)(v41 + 24) = 0x800000023D676FC0;
    *(_QWORD *)(v41 + 32) = 0xD000000000000052;
    *(_QWORD *)(v41 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v134, v123);
    sub_23D5DDA20(v124, v125);
    sub_23D5DDA20(v38, v37);
    sub_23D5E725C(v36, v35);
    sub_23D5E6950(v39, type metadata accessor for MembershipVerifier);
    v13 = 0;
    goto LABEL_6;
  }
  v107 = (void (*)(char *, uint64_t, uint64_t))v34;
  v110 = *(_OWORD *)(v0 + 592);
  v42 = *(_QWORD *)(v0 + 544);
  v43 = *(_QWORD *)(v0 + 520);
  v45 = *(_QWORD *)(v0 + 480);
  v44 = *(_QWORD *)(v0 + 488);
  v46 = *(_QWORD *)(v0 + 464);
  v47 = *(_QWORD *)(v0 + 472);
  v131 = *(_QWORD **)(v0 + 448);
  v113 = *(_QWORD *)(v0 + 432);
  v112 = *(_QWORD *)(v0 + 424);
  v118 = *(_QWORD *)(v0 + 536);
  v121 = *(_QWORD *)(v0 + 416);
  v48 = *(_QWORD *)(v0 + 400);
  v49 = (uint64_t *)(v48 + *(_QWORD *)(v0 + 640));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(v47 + 32))(v44, *(_QWORD *)(v0 + 456), v46);
  v50 = (uint64_t *)(v42 + *(int *)(v43 + 24));
  v51 = *v50;
  v52 = v50[1];
  v53 = *v49;
  v54 = v49[1];
  *v49 = *v50;
  v49[1] = v52;
  sub_23D5AFA60(v51, v52);
  sub_23D5E725C(v53, v54);
  v55 = *(_QWORD *)(v48 + 48);
  v135[0] = *(_QWORD *)(v48 + 40);
  v56 = v135[0];
  v135[1] = v55;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v45, v44, v46);
  v136[0] = v135[0];
  v136[1] = v55;
  v137[0] = v110;
  swift_beginAccess();
  LODWORD(v44) = *(_DWORD *)(v48 + 64);
  sub_23D5E7298(v42, v118, type metadata accessor for MembershipVerifier);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v112 + 16))(v113, v126 + *(int *)(v129 + 20), v121);
  sub_23D5AFA60(v135[0], v55);
  sub_23D5AFA60(v135[0], v55);
  Invite.init(invitersID:invitersSigningKey:invitedID:groupID:groupVersion:invitedMembershipVerifier:invitedEncryptionPK:)(v135, v45, v136, (uint64_t *)v137, v44, v118, v113, v131);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79140);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DED0;
  *(_QWORD *)(inited + 32) = v134;
  *(_QWORD *)(inited + 40) = v123;
  *(_BYTE *)(inited + 48) = v115;
  *(_QWORD *)(inited + 56) = v124;
  *(_QWORD *)(inited + 64) = v125;
  sub_23D5AFA60(v134, v123);
  sub_23D5AFA60(v124, v125);
  sub_23D5B6D40(inited, (unint64_t *)v137);
  v62 = *(_QWORD *)(v0 + 440);
  v61 = *(_QWORD *)(v0 + 448);
  *(_QWORD *)(*(_QWORD *)(v0 + 400) + 56) = *(_QWORD *)&v137[0];
  v63 = (uint64_t *)(v61 + *(int *)(v62 + 28));
  v64 = v63[1];
  if (v64 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v65 = sub_23D66BFDC();
    __swift_project_value_buffer(v65, (uint64_t)qword_256C88B78);
    v66 = sub_23D66C588();
    v67 = sub_23D66BFC4();
    v68 = v66;
    if (os_log_type_enabled(v67, v66))
    {
      v69 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v69 = 0;
      _os_log_impl(&dword_23D5A8000, v67, v68, "invite has missing KeyShare", v69, 2u);
      MEMORY[0x242636844](v69, -1, -1);
    }
    v70 = *(_QWORD *)(v0 + 672);
    v71 = *(_QWORD *)(v0 + 664);
    v72 = *(_QWORD *)(v0 + 656);
    v73 = *(_QWORD *)(v0 + 648);
    v133 = *(_QWORD *)(v0 + 544);
    v74 = *(_QWORD *)(v0 + 488);
    v75 = v0;
    v76 = *(_QWORD *)(v0 + 472);
    v77 = *(_QWORD *)(v75 + 464);
    v78 = *(_QWORD *)(v75 + 448);
    v127 = v74;

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v79 = 356;
    *(_OWORD *)(v79 + 8) = xmmword_23D66DF50;
    *(_QWORD *)(v79 + 24) = 0x800000023D676FC0;
    *(_QWORD *)(v79 + 32) = 0xD000000000000052;
    *(_QWORD *)(v79 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v134, v123);
    sub_23D5DDA20(v124, v125);
    sub_23D5DDA20(v73, v72);
    sub_23D5E725C(v71, v70);
    sub_23D5E6950(v78, type metadata accessor for Invite);
    v80 = *(void (**)(uint64_t, uint64_t))(v76 + 8);
    v0 = v75;
    v80(v127, v77);
    sub_23D5E6950(v133, type metadata accessor for MembershipVerifier);
    swift_release();
    goto LABEL_9;
  }
  v81 = *v63;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79148);
  v82 = swift_initStackObject();
  *(_OWORD *)(v82 + 16) = xmmword_23D66DED0;
  *(_QWORD *)(v82 + 32) = v56;
  *(_QWORD *)(v82 + 40) = v55;
  *(_QWORD *)(v82 + 48) = v81;
  *(_QWORD *)(v82 + 56) = v64;
  swift_beginAccess();
  sub_23D5E7284(v81, v64);
  sub_23D5AFA60(v56, v55);
  sub_23D5E7284(v81, v64);
  sub_23D5B72C0(v82);
  v116 = v81;
  v119 = v64;
  v122 = *(_QWORD *)(v0 + 544);
  v83 = *(_QWORD *)(v0 + 520);
  v128 = *(_QWORD *)(v0 + 496);
  v84 = *(_QWORD *)(v0 + 400);
  swift_endAccess();
  swift_setDeallocating();
  swift_arrayDestroy();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79150);
  v85 = type metadata accessor for UserAndDiversifiedVerificationKey(0);
  v86 = *(unsigned __int8 *)(*(_QWORD *)(v85 - 8) + 80);
  v87 = (v86 + 32) & ~v86;
  v88 = swift_allocObject();
  *(_OWORD *)(v88 + 16) = xmmword_23D66DED0;
  v89 = (uint64_t *)(v88 + v87);
  v90 = *(_QWORD *)(v84 + 40);
  v91 = *(_QWORD *)(v84 + 48);
  v107((char *)v89 + *(int *)(v85 + 20), v122 + *(int *)(v83 + 20), v128);
  *v89 = v90;
  v89[1] = v91;
  swift_beginAccess();
  sub_23D5AFA60(v90, v91);
  sub_23D5B8110(v88);
  v92 = *(_QWORD *)(v0 + 544);
  v93 = *(_QWORD *)(v0 + 528);
  v94 = *(_QWORD *)(v0 + 520);
  v96 = *(_QWORD *)(v0 + 400);
  v95 = *(_QWORD *)(v0 + 408);
  swift_endAccess();
  swift_setDeallocating();
  swift_arrayDestroy();
  swift_deallocClassInstance();
  v97 = *(_QWORD *)(v96 + 40);
  v98 = *(_QWORD *)(v96 + 48);
  sub_23D5E7298(v92, v95, type metadata accessor for MembershipVerifier);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v93 + 56))(v95, 0, 1, v94);
  swift_beginAccess();
  sub_23D5AFA60(v97, v98);
  sub_23D5B917C(v95, v97, v98);
  swift_endAccess();
  sub_23D5AFA60(v97, v98);
  sub_23D6306E4((uint64_t)v137);
  v104 = *(_QWORD *)(v0 + 648);
  v105 = *(_QWORD *)(v0 + 656);
  v111 = *(_QWORD *)(v0 + 672);
  v99 = *(_QWORD *)(v0 + 544);
  v100 = *(_QWORD *)(v0 + 488);
  v106 = *(_QWORD *)(v0 + 472);
  v108 = *(_QWORD *)(v0 + 664);
  v109 = *(_QWORD *)(v0 + 464);
  v101 = *(_QWORD *)(v0 + 448);
  v102 = v137[1];
  *(_OWORD *)(v0 + 152) = v137[0];
  *(_OWORD *)(v0 + 168) = v102;
  *(_OWORD *)(v0 + 184) = v137[2];
  swift_beginAccess();
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v136[0] = *v114;
  *v114 = 0x8000000000000000;
  sub_23D5E0750((_OWORD *)(v0 + 152), v97, v98, isUniquelyReferenced_nonNull_native);
  *v114 = v136[0];
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v97, v98);
  swift_endAccess();
  sub_23D5E725C(v116, v119);
  sub_23D5DDA20(v134, v123);
  sub_23D5DDA20(v124, v125);
  sub_23D5DDA20(v104, v105);
  sub_23D5E725C(v108, v111);
  sub_23D5E6950(v101, type metadata accessor for Invite);
  (*(void (**)(uint64_t, uint64_t))(v106 + 8))(v100, v109);
  sub_23D5E6950(v99, type metadata accessor for MembershipVerifier);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(_QWORD))(v0 + 8))(*(_QWORD *)(v0 + 400));
}

uint64_t sub_23D5B6B84()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *(_QWORD *)(v0 + 672);
  v2 = *(_QWORD *)(v0 + 664);
  sub_23D5DDA20(*(_QWORD *)(v0 + 648), *(_QWORD *)(v0 + 656));
  sub_23D5E725C(v2, v1);
  v3 = *(_QWORD *)(v0 + 400);
  sub_23D5DDA20(*(_QWORD *)(v3 + 16), *(_QWORD *)(v3 + 24));
  sub_23D5DDA20(*(_QWORD *)(v3 + 40), *(_QWORD *)(v3 + 48));
  sub_23D5DDA20(*(_QWORD *)(*(_QWORD *)(v0 + 400) + 72), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 80));
  sub_23D5E7220(*(_QWORD *)(*(_QWORD *)(v0 + 400) + 88), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 96), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 104), *(_QWORD *)(*(_QWORD *)(v0 + 400) + 112));
  sub_23D5E725C(*(_QWORD *)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset), *(_QWORD *)(*(_QWORD *)(v0 + 400) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8));
  v4 = *(_QWORD *)(v0 + 400);
  sub_23D5E725C(*(_QWORD *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(_QWORD *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
  sub_23D5AEF8C(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, &qword_256C79128);
  sub_23D5AEF8C(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_256C79130);
  swift_release();
  type metadata accessor for Group(0);
  swift_deallocPartialClassInstance();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D5B6D40@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  _QWORD v44[2];
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;

  v3 = v2;
  v50 = type metadata accessor for GroupMembership.MemberProperties(0);
  v6 = MEMORY[0x24BDAC7A8](v50);
  v49 = (uint64_t)v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v48 = (char *)v44 - v8;
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v9);
  v52 = (char *)v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v11);
  v51 = (char *)v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for UserKeyingInfo(0);
  v46 = *(_QWORD *)(v13 - 8);
  v47 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (_QWORD *)((char *)v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = sub_23D5B5070(MEMORY[0x24BEE4AF8], &qword_256C79AD8, &qword_256C79AF8, type metadata accessor for GroupMembership.MemberProperties);
  v17 = *(_QWORD *)(a1 + 16);
  if (v17)
  {
    v44[0] = a2;
    v57 = v3;
    swift_bridgeObjectRetain();
    v44[1] = a1;
    v18 = (unint64_t *)(a1 + 64);
    v45 = xmmword_23D66DF30;
    while (1)
    {
      v56 = v17;
      v20 = *(v18 - 4);
      v19 = *(v18 - 3);
      v21 = *((_BYTE *)v18 - 16);
      v23 = *(v18 - 1);
      v22 = *v18;
      v60 = v16;
      v58 = v20;
      v59 = v19;
      sub_23D5AFA60(v20, v19);
      sub_23D5AFA60(v23, v22);
      if ((sub_23D662D30((uint64_t *)&v58) & 1) != 0)
        break;
      v55 = v16;
      v58 = v20;
      v59 = v19;
      v24 = sub_23D66C2AC();
      v25 = (uint64_t)v51;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v24 - 8) + 56))(v51, 1, 1, v24);
      v26 = sub_23D66C258();
      v27 = (uint64_t)v52;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 56))(v52, 1, 1, v26);
      sub_23D5AFA60(v20, v19);
      sub_23D5AFA60(v23, v22);
      v28 = v57;
      sub_23D61F210((uint64_t *)&v58, v23, v22, v25, v27, v15);
      v57 = v28;
      if (v28)
      {
        sub_23D5DDA20(v20, v19);
        sub_23D5DDA20(v23, v22);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease_n();
      }
      v18 += 5;
      v53 = v23;
      v54 = v22;
      v29 = v50;
      v30 = (uint64_t)v48;
      v31 = (uint64_t)&v48[*(int *)(v50 + 24)];
      sub_23D5E7298((uint64_t)v15, v31, type metadata accessor for UserKeyingInfo);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v46 + 56))(v31, 0, 1, v47);
      v32 = v30 + *(int *)(v29 + 28);
      v33 = sub_23D66C330();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 56))(v32, 1, 1, v33);
      *(_BYTE *)v30 = v21;
      *(_OWORD *)(v30 + 8) = v45;
      v34 = v49;
      sub_23D5E7F64(v30, v49, type metadata accessor for GroupMembership.MemberProperties);
      sub_23D5AFA60(v20, v19);
      v35 = v55;
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v58 = v35;
      sub_23D5E087C(v34, v20, v19, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_23D666FF8, (void (*)(void))sub_23D6650E8, type metadata accessor for GroupMembership.MemberProperties, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_23D666948);
      v16 = v58;
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v20, v19);
      sub_23D5DDA20(v20, v19);
      sub_23D5DDA20(v53, v54);
      sub_23D5E6950((uint64_t)v15, type metadata accessor for UserKeyingInfo);
      v17 = v56 - 1;
      if (v56 == 1)
      {
        result = swift_bridgeObjectRelease_n();
        *(_QWORD *)v44[0] = v16;
        return result;
      }
    }
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v38 = sub_23D66BFDC();
    __swift_project_value_buffer(v38, (uint64_t)qword_256C88B78);
    v39 = sub_23D66C588();
    v40 = sub_23D66BFC4();
    v41 = v39;
    if (os_log_type_enabled(v40, v39))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_23D5A8000, v40, v41, "duplicated group member", v42, 2u);
      MEMORY[0x242636844](v42, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v43 = 270;
    *(_OWORD *)(v43 + 8) = xmmword_23D66DF70;
    *(_QWORD *)(v43 + 24) = 0x800000023D678430;
    *(_QWORD *)(v43 + 32) = 0xD00000000000005CLL;
    *(_QWORD *)(v43 + 40) = 0x800000023D6782C0;
    swift_willThrow();
    sub_23D5DDA20(v20, v19);
    sub_23D5DDA20(v23, v22);
    return swift_bridgeObjectRelease_n();
  }
  else
  {
    result = swift_bridgeObjectRelease();
    *a2 = v16;
  }
  return result;
}

uint64_t sub_23D5B72C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  uint64_t v19;
  uint64_t (*v20)(uint64_t);
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  void (*v28)(char *, uint64_t, uint64_t, uint64_t);
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t *v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _BOOL8 v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  NSObject *v64;
  uint8_t *v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  os_log_type_t v75;
  uint64_t v76;
  NSObject *v77;
  uint8_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t v87;
  NSObject *v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t result;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t (*v106)(uint64_t);
  unsigned int (*v107)(char *, uint64_t, uint64_t);
  void (*v108)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t v110;
  unint64_t v111;
  uint64_t v112[2];
  uint64_t v113;
  uint64_t v114;

  v3 = v2;
  v5 = type metadata accessor for GroupMembership.MemberProperties(0);
  v105 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v101 = (uint64_t)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v99 - v11;
  MEMORY[0x24BDAC7A8](v10);
  v16 = (char *)&v99 - v15;
  v114 = MEMORY[0x24BEE4B08];
  v17 = *(_QWORD *)(a1 + 16);
  if (!v17)
    return swift_bridgeObjectRelease();
  v102 = v13;
  v103 = v14;
  v110 = v1;
  v99 = v3;
  swift_bridgeObjectRetain();
  v100 = a1;
  v18 = (unint64_t *)(a1 + 56);
  v104 = v17;
  v19 = v17;
  v109 = v5;
  while (1)
  {
    v20 = (uint64_t (*)(uint64_t))*(v18 - 3);
    v21 = *(v18 - 2);
    v22 = *v18;
    v111 = *(v18 - 1);
    v23 = *(_QWORD *)v110;
    if (!*(_QWORD *)(*(_QWORD *)v110 + 16))
    {
LABEL_30:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56))(v16, 1, 1, v5);
      sub_23D5AFA60((uint64_t)v20, v21);
      sub_23D5AFA60(v111, v22);
LABEL_31:
      sub_23D5AEF8C((uint64_t)v16, &qword_256C79178);
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
LABEL_52:
        swift_once();
      v61 = sub_23D66BFDC();
      __swift_project_value_buffer(v61, (uint64_t)qword_256C88B78);
      v62 = sub_23D66C588();
      sub_23D5AFA60((uint64_t)v20, v21);
      v63 = v111;
      sub_23D5AFA60(v111, v22);
      sub_23D5AFA60((uint64_t)v20, v21);
      sub_23D5AFA60(v63, v22);
      v64 = sub_23D66BFC4();
      if (os_log_type_enabled(v64, v62))
      {
        v65 = (uint8_t *)swift_slowAlloc();
        v109 = swift_slowAlloc();
        v112[0] = v109;
        v110 = v22;
        *(_DWORD *)v65 = 136315138;
        v108 = (void (*)(char *, uint64_t, uint64_t, uint64_t))(v65 + 4);
        sub_23D5AFA60((uint64_t)v20, v21);
        v66 = sub_23D66BD30();
        v68 = v67;
        sub_23D5DDA20((uint64_t)v20, v21);
        v69 = v111;
        v113 = sub_23D5DDBDC(v66, v68, v112);
        v22 = v110;
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v69, v22);
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v69, v22);
        _os_log_impl(&dword_23D5A8000, v64, v62, "attempted adding key share for non-member %s", v65, 0xCu);
        v70 = v109;
        swift_arrayDestroy();
        MEMORY[0x242636844](v70, -1, -1);
        MEMORY[0x242636844](v65, -1, -1);
      }
      else
      {
        sub_23D5DDA20((uint64_t)v20, v21);
        v71 = v111;
        sub_23D5DDA20(v111, v22);
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v71, v22);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v72 = 27;
      v73 = 99;
LABEL_49:
      *(_BYTE *)(v72 + 1) = 1;
      *(_QWORD *)(v72 + 8) = v73;
      *(_QWORD *)(v72 + 16) = 0xD000000000000014;
      *(_QWORD *)(v72 + 24) = 0x800000023D678410;
      *(_QWORD *)(v72 + 32) = 0xD00000000000005CLL;
      *(_QWORD *)(v72 + 40) = 0x800000023D6782C0;
      swift_willThrow();
      sub_23D5DDA20((uint64_t)v20, v21);
      sub_23D5DDA20(v111, v22);
      return swift_bridgeObjectRelease();
    }
    sub_23D5AFA60((uint64_t)v20, v21);
    sub_23D5AFA60(v111, v22);
    sub_23D5AFA60((uint64_t)v20, v21);
    v24 = sub_23D5DF394((uint64_t)v20, v21);
    if ((v25 & 1) != 0)
    {
      v26 = *(_QWORD *)(v23 + 56);
      v27 = v105;
      sub_23D5E7298(v26 + *(_QWORD *)(v105 + 72) * v24, (uint64_t)v16, type metadata accessor for GroupMembership.MemberProperties);
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v27 + 56);
      v29 = v16;
      v30 = 0;
    }
    else
    {
      v27 = v105;
      v28 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v105 + 56);
      v29 = v16;
      v30 = 1;
    }
    v108 = v28;
    v28(v29, v30, 1, v5);
    sub_23D5DDA20((uint64_t)v20, v21);
    v107 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48);
    if (v107(v16, 1, v5) == 1)
      goto LABEL_31;
    sub_23D5AEF8C((uint64_t)v16, &qword_256C79178);
    v31 = *(_QWORD *)v110;
    if (!*(_QWORD *)(*(_QWORD *)v110 + 16))
      break;
    sub_23D5AFA60((uint64_t)v20, v21);
    v32 = sub_23D5DF394((uint64_t)v20, v21);
    if ((v33 & 1) != 0)
    {
      sub_23D5E7298(*(_QWORD *)(v31 + 56) + *(_QWORD *)(v105 + 72) * v32, (uint64_t)v12, type metadata accessor for GroupMembership.MemberProperties);
      v34 = 0;
    }
    else
    {
      v34 = 1;
    }
    v35 = v22;
    v36 = v109;
    v108(v12, v34, 1, v109);
    sub_23D5DDA20((uint64_t)v20, v21);
    if (v107(v12, 1, v36) == 1)
      goto LABEL_54;
    v37 = *((_QWORD *)v12 + 2);
    sub_23D5E6950((uint64_t)v12, type metadata accessor for GroupMembership.MemberProperties);
    v38 = v114;
    if (v37 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v74 = sub_23D66BFDC();
      __swift_project_value_buffer(v74, (uint64_t)qword_256C88B78);
      v75 = sub_23D66C588();
      sub_23D5AFA60((uint64_t)v20, v21);
      v76 = v111;
      v22 = v35;
      sub_23D5AFA60(v111, v35);
      sub_23D5AFA60((uint64_t)v20, v21);
      sub_23D5AFA60(v76, v35);
      v77 = sub_23D66BFC4();
      if (os_log_type_enabled(v77, v75))
      {
        v78 = (uint8_t *)swift_slowAlloc();
        v110 = swift_slowAlloc();
        v112[0] = v110;
        *(_DWORD *)v78 = 136315138;
        v109 = (uint64_t)(v78 + 4);
        sub_23D5AFA60((uint64_t)v20, v21);
        v79 = sub_23D66BD30();
        v81 = v80;
        sub_23D5DDA20((uint64_t)v20, v21);
        v82 = v79;
        v83 = v111;
        v113 = sub_23D5DDBDC(v82, v81, v112);
        v22 = v35;
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v83, v35);
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v83, v35);
        _os_log_impl(&dword_23D5A8000, v77, v75, "attempted overwriting user key share for member %s", v78, 0xCu);
        v84 = v110;
        swift_arrayDestroy();
        MEMORY[0x242636844](v84, -1, -1);
        MEMORY[0x242636844](v78, -1, -1);
      }
      else
      {
        sub_23D5DDA20((uint64_t)v20, v21);
        v96 = v111;
        sub_23D5DDA20(v111, v35);
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v96, v35);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v72 = 28;
      v73 = 103;
      goto LABEL_49;
    }
    sub_23D5AFA60((uint64_t)v20, v21);
    swift_bridgeObjectRetain();
    v39 = sub_23D63D584((uint64_t)v20, v21, v38);
    swift_bridgeObjectRelease();
    sub_23D5DDA20((uint64_t)v20, v21);
    if ((v39 & 1) != 0)
    {
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v85 = sub_23D66BFDC();
      __swift_project_value_buffer(v85, (uint64_t)qword_256C88B78);
      v86 = sub_23D66C588();
      sub_23D5AFA60((uint64_t)v20, v21);
      v87 = v111;
      v22 = v35;
      sub_23D5AFA60(v111, v35);
      sub_23D5AFA60((uint64_t)v20, v21);
      sub_23D5AFA60(v87, v35);
      v88 = sub_23D66BFC4();
      if (os_log_type_enabled(v88, v86))
      {
        v89 = (uint8_t *)swift_slowAlloc();
        v110 = swift_slowAlloc();
        v112[0] = v110;
        *(_DWORD *)v89 = 136315138;
        v109 = (uint64_t)(v89 + 4);
        sub_23D5AFA60((uint64_t)v20, v21);
        v90 = sub_23D66BD30();
        v92 = v91;
        sub_23D5DDA20((uint64_t)v20, v21);
        v93 = v90;
        v94 = v111;
        v113 = sub_23D5DDBDC(v93, v92, v112);
        v22 = v35;
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v94, v35);
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v94, v35);
        _os_log_impl(&dword_23D5A8000, v88, v86, "duplicate key share update for member %s", v89, 0xCu);
        v95 = v110;
        swift_arrayDestroy();
        MEMORY[0x242636844](v95, -1, -1);
        MEMORY[0x242636844](v89, -1, -1);
      }
      else
      {
        sub_23D5DDA20((uint64_t)v20, v21);
        v97 = v111;
        sub_23D5DDA20(v111, v35);
        sub_23D5DDA20((uint64_t)v20, v21);
        sub_23D5DDA20(v97, v35);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v72 = 30;
      v73 = 107;
      goto LABEL_49;
    }
    v18 += 4;
    sub_23D5AFA60((uint64_t)v20, v21);
    sub_23D65AF2C(v112, (uint64_t)v20, v21);
    sub_23D5DDA20((uint64_t)v20, v21);
    sub_23D5DDA20(v111, v35);
    sub_23D5DDA20(v112[0], v112[1]);
    --v19;
    v5 = v109;
    if (!v19)
    {
      v40 = v100;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      v41 = (unint64_t *)(v40 + 56);
      v42 = (uint64_t *)v110;
      v21 = v103;
      while (1)
      {
        v16 = (char *)*(v41 - 3);
        v44 = *(v41 - 2);
        v20 = (uint64_t (*)(uint64_t))*(v41 - 1);
        v45 = *v41;
        sub_23D5AFA60((uint64_t)v16, v44);
        sub_23D5AFA60((uint64_t)v16, v44);
        sub_23D5AFA60((uint64_t)v16, v44);
        sub_23D5AFA60((uint64_t)v20, v45);
        v106 = v20;
        v111 = v45;
        sub_23D5AFA60((uint64_t)v20, v45);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v112[0] = *v42;
        v47 = v112[0];
        *v42 = 0x8000000000000000;
        sub_23D5AFA60((uint64_t)v16, v44);
        v22 = sub_23D5DF394((uint64_t)v16, v44);
        v49 = *(_QWORD *)(v47 + 16);
        v50 = (v48 & 1) == 0;
        v51 = v49 + v50;
        if (__OFADD__(v49, v50))
          break;
        v5 = v48;
        if (*(_QWORD *)(v47 + 24) >= v51)
        {
          v20 = type metadata accessor for GroupMembership.MemberProperties;
          if ((isUniquelyReferenced_nonNull_native & 1) != 0)
          {
            if ((v48 & 1) == 0)
              goto LABEL_29;
          }
          else
          {
            sub_23D666FF8();
            if ((v5 & 1) == 0)
              goto LABEL_29;
          }
        }
        else
        {
          sub_23D6650E8(v51, isUniquelyReferenced_nonNull_native);
          v52 = sub_23D5DF394((uint64_t)v16, v44);
          if ((v5 & 1) != (v53 & 1))
            goto LABEL_55;
          v22 = v52;
          v20 = type metadata accessor for GroupMembership.MemberProperties;
          if ((v5 & 1) == 0)
          {
LABEL_29:
            v108((char *)v21, 1, 1, v109);
            sub_23D5DDA20((uint64_t)v106, v111);
            __break(1u);
            goto LABEL_30;
          }
        }
        v54 = v112[0];
        v55 = *(_QWORD *)(v105 + 72) * v22;
        sub_23D5E7F64(*(_QWORD *)(v112[0] + 56) + v55, v21, type metadata accessor for GroupMembership.MemberProperties);
        v56 = v109;
        v108((char *)v21, 0, 1, v109);
        sub_23D5E725C(*(_QWORD *)(v21 + 8), *(_QWORD *)(v21 + 16));
        v57 = v111;
        *(_QWORD *)(v21 + 8) = v106;
        *(_QWORD *)(v21 + 16) = v57;
        v58 = v21;
        v59 = v102;
        sub_23D5AEF48(v58, v102, &qword_256C79178);
        if (v107((char *)v59, 1, v56) == 1)
        {
          sub_23D5AEF8C(v59, &qword_256C79178);
          v43 = v112[0];
          swift_arrayDestroy();
          sub_23D666440(v22, v43);
        }
        else
        {
          v60 = v101;
          sub_23D5E7F64(v59, v101, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5E7F64(v60, *(_QWORD *)(v54 + 56) + v55, type metadata accessor for GroupMembership.MemberProperties);
          v43 = v112[0];
        }
        v41 += 4;
        v21 = v103;
        sub_23D5AEF8C(v103, &qword_256C79178);
        sub_23D5DDA20((uint64_t)v16, v44);
        v42 = (uint64_t *)v110;
        *(_QWORD *)v110 = v43;
        sub_23D5DDA20((uint64_t)v16, v44);
        sub_23D5DDA20((uint64_t)v16, v44);
        sub_23D5DDA20((uint64_t)v106, v111);
        sub_23D5DDA20((uint64_t)v16, v44);
        if (!--v104)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
      goto LABEL_52;
    }
  }
  v108(v12, 1, 1, v5);
LABEL_54:
  __break(1u);
LABEL_55:
  result = sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5B8110(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t isUniquelyReferenced_nonNull_native;
  uint64_t v33;
  uint64_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  char v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char v72;
  unint64_t v73;
  uint64_t v74;
  _BOOL8 v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  char v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  os_log_type_t v86;
  uint64_t *v87;
  NSObject *v88;
  uint8_t *v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  unint64_t v95;
  uint64_t v96;
  uint8_t *v97;
  void (*v98)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  os_log_type_t v102;
  uint64_t *v103;
  NSObject *v104;
  uint8_t *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  uint64_t v112;
  uint8_t *v113;
  void (*v114)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v115;
  os_log_type_t v116;
  uint64_t *v117;
  NSObject *v118;
  uint8_t *v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint8_t *v126;
  uint64_t result;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint8_t *v147;
  uint8_t *v148;
  void (*v149)(_QWORD, _QWORD, _QWORD, _QWORD);
  uint64_t v150[2];
  uint64_t v151;
  uint64_t v152;

  v2 = v1;
  v4 = type metadata accessor for GroupMembership.MemberProperties(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v134 = (uint64_t)&v128 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v145 = (uint64_t)&v128 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v137 = (uint64_t)&v128 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v135 = (char *)&v128 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = MEMORY[0x24BDAC7A8](v12);
  v144 = (uint64_t)&v128 - v15;
  v16 = MEMORY[0x24BDAC7A8](v14);
  v138 = (uint64_t)&v128 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v139 = (uint64_t)&v128 - v18;
  v19 = type metadata accessor for UserAndDiversifiedVerificationKey(0);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  v23 = (uint64_t *)((char *)&v128 - v22);
  v24 = MEMORY[0x24BDAC7A8](v21);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v136 = (uint64_t *)((char *)&v128 - v26);
  MEMORY[0x24BDAC7A8](v25);
  isUniquelyReferenced_nonNull_native = (uint64_t)&v128 - v31;
  v152 = MEMORY[0x24BEE4B08];
  v33 = *(_QWORD *)(a1 + 16);
  if (!v33)
    return swift_bridgeObjectRelease();
  v129 = v27;
  v131 = v23;
  v130 = (uint64_t *)v30;
  v132 = (uint64_t *)v29;
  v146 = v5;
  v128 = v2;
  v34 = a1 + ((*(unsigned __int8 *)(v28 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
  v141 = *(_QWORD *)(v28 + 72);
  v133 = a1;
  swift_bridgeObjectRetain();
  v142 = v4;
  v143 = v34;
  v140 = v33;
  while (1)
  {
    sub_23D5E7298(v34, isUniquelyReferenced_nonNull_native, type metadata accessor for UserAndDiversifiedVerificationKey);
    v35 = v147;
    v36 = *(_QWORD *)v147;
    if (!*(_QWORD *)(*(_QWORD *)v147 + 16))
    {
      v43 = v139;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v146 + 56))(v139, 1, 1, v4);
LABEL_30:
      sub_23D5AEF8C(v43, &qword_256C79178);
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
LABEL_51:
        swift_once();
      v85 = sub_23D66BFDC();
      __swift_project_value_buffer(v85, (uint64_t)qword_256C88B78);
      v86 = sub_23D66C588();
      v87 = v132;
      sub_23D5E7298(isUniquelyReferenced_nonNull_native, (uint64_t)v132, type metadata accessor for UserAndDiversifiedVerificationKey);
      v88 = sub_23D66BFC4();
      if (os_log_type_enabled(v88, v86))
      {
        v89 = (uint8_t *)swift_slowAlloc();
        v149 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))swift_slowAlloc();
        v150[0] = (uint64_t)v149;
        *(_DWORD *)v89 = 136315138;
        v147 = v89 + 4;
        v148 = v89;
        v90 = *v87;
        v91 = v87[1];
        sub_23D5AFA60(*v87, v91);
        v92 = isUniquelyReferenced_nonNull_native;
        v93 = sub_23D66BD30();
        v95 = v94;
        sub_23D5DDA20(v90, v91);
        v96 = v93;
        isUniquelyReferenced_nonNull_native = v92;
        v151 = sub_23D5DDBDC(v96, v95, v150);
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5E6950((uint64_t)v87, type metadata accessor for UserAndDiversifiedVerificationKey);
        v97 = v148;
        _os_log_impl(&dword_23D5A8000, v88, v86, "attempted adding diversification key for non-member %s", v148, 0xCu);
        v98 = v149;
        swift_arrayDestroy();
        MEMORY[0x242636844](v98, -1, -1);
        MEMORY[0x242636844](v97, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v87, type metadata accessor for UserAndDiversifiedVerificationKey);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v99 = 34;
      v100 = 124;
LABEL_48:
      *(_BYTE *)(v99 + 1) = 1;
      *(_QWORD *)(v99 + 8) = v100;
      *(_QWORD *)(v99 + 16) = 0xD000000000000021;
      *(_QWORD *)(v99 + 24) = 0x800000023D6783E0;
      *(_QWORD *)(v99 + 32) = 0xD00000000000005CLL;
      *(_QWORD *)(v99 + 40) = 0x800000023D6782C0;
      swift_willThrow();
      sub_23D5E6950(isUniquelyReferenced_nonNull_native, type metadata accessor for UserAndDiversifiedVerificationKey);
      return swift_bridgeObjectRelease();
    }
    v37 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    v38 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8);
    sub_23D5AFA60(*(_QWORD *)isUniquelyReferenced_nonNull_native, v38);
    v39 = sub_23D5DF394(v37, v38);
    v40 = (_QWORD *)v146;
    if ((v41 & 1) != 0)
    {
      v42 = *(_QWORD *)(v36 + 56) + *(_QWORD *)(v146 + 72) * v39;
      v43 = v139;
      sub_23D5E7298(v42, v139, type metadata accessor for GroupMembership.MemberProperties);
      v44 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))v40[7];
      v45 = v43;
      v46 = 0;
    }
    else
    {
      v44 = *(void (**)(_QWORD, _QWORD, _QWORD, _QWORD))(v146 + 56);
      v43 = v139;
      v45 = v139;
      v46 = 1;
    }
    v149 = v44;
    v44(v45, v46, 1, v4);
    sub_23D5DDA20(v37, v38);
    v148 = (uint8_t *)v40[6];
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v148)(v43, 1, v4) == 1)
      goto LABEL_30;
    sub_23D5AEF8C(v43, &qword_256C79178);
    v47 = *(_QWORD *)v35;
    if (!*(_QWORD *)(*(_QWORD *)v35 + 16))
      break;
    v48 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    v49 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8);
    sub_23D5AFA60(*(_QWORD *)isUniquelyReferenced_nonNull_native, v49);
    v50 = sub_23D5DF394(v48, v49);
    v51 = v138;
    if ((v52 & 1) != 0)
    {
      sub_23D5E7298(*(_QWORD *)(v47 + 56) + v40[9] * v50, v138, type metadata accessor for GroupMembership.MemberProperties);
      v53 = 0;
    }
    else
    {
      v53 = 1;
    }
    v149(v51, v53, 1, v4);
    sub_23D5DDA20(v48, v49);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v148)(v51, 1, v4) == 1)
      goto LABEL_53;
    v54 = v137;
    sub_23D5AEF48(v51 + *(int *)(v4 + 28), v137, &qword_256C799E0);
    v55 = sub_23D66C330();
    v56 = *(_QWORD *)(v55 - 8);
    v57 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v56 + 48))(v54, 1, v55);
    sub_23D5AEF8C(v54, &qword_256C799E0);
    sub_23D5E6950(v51, type metadata accessor for GroupMembership.MemberProperties);
    v58 = v152;
    if (v57 != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v101 = sub_23D66BFDC();
      __swift_project_value_buffer(v101, (uint64_t)qword_256C88B78);
      v102 = sub_23D66C588();
      v103 = v131;
      sub_23D5E7298(isUniquelyReferenced_nonNull_native, (uint64_t)v131, type metadata accessor for UserAndDiversifiedVerificationKey);
      v104 = sub_23D66BFC4();
      if (os_log_type_enabled(v104, v102))
      {
        v105 = (uint8_t *)swift_slowAlloc();
        v149 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))swift_slowAlloc();
        v150[0] = (uint64_t)v149;
        *(_DWORD *)v105 = 136315138;
        v147 = v105 + 4;
        v148 = v105;
        v106 = *v103;
        v107 = v103[1];
        sub_23D5AFA60(*v103, v107);
        v108 = isUniquelyReferenced_nonNull_native;
        v109 = sub_23D66BD30();
        v111 = v110;
        sub_23D5DDA20(v106, v107);
        v112 = v109;
        isUniquelyReferenced_nonNull_native = v108;
        v151 = sub_23D5DDBDC(v112, v111, v150);
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5E6950((uint64_t)v103, type metadata accessor for UserAndDiversifiedVerificationKey);
        v113 = v148;
        _os_log_impl(&dword_23D5A8000, v104, v102, "attempted overwriting diversification key for member %s", v148, 0xCu);
        v114 = v149;
        swift_arrayDestroy();
        MEMORY[0x242636844](v114, -1, -1);
        MEMORY[0x242636844](v113, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v103, type metadata accessor for UserAndDiversifiedVerificationKey);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v99 = 29;
      v100 = 128;
      goto LABEL_48;
    }
    v60 = *(_QWORD *)isUniquelyReferenced_nonNull_native;
    v59 = *(_QWORD *)(isUniquelyReferenced_nonNull_native + 8);
    swift_bridgeObjectRetain();
    sub_23D5AFA60(v60, v59);
    v61 = sub_23D63D584(v60, v59, v58);
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v60, v59);
    if ((v61 & 1) != 0)
    {
      v149 = (void (*)(_QWORD, _QWORD, _QWORD, _QWORD))isUniquelyReferenced_nonNull_native;
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v115 = sub_23D66BFDC();
      __swift_project_value_buffer(v115, (uint64_t)qword_256C88B78);
      v116 = sub_23D66C588();
      isUniquelyReferenced_nonNull_native = (uint64_t)v149;
      v117 = v130;
      sub_23D5E7298((uint64_t)v149, (uint64_t)v130, type metadata accessor for UserAndDiversifiedVerificationKey);
      v118 = sub_23D66BFC4();
      if (os_log_type_enabled(v118, v116))
      {
        v119 = (uint8_t *)swift_slowAlloc();
        v148 = (uint8_t *)swift_slowAlloc();
        v150[0] = (uint64_t)v148;
        *(_DWORD *)v119 = 136315138;
        v147 = v119 + 4;
        v120 = *v117;
        v121 = v117[1];
        sub_23D5AFA60(*v117, v121);
        v122 = sub_23D66BD30();
        v124 = v123;
        sub_23D5DDA20(v120, v121);
        v125 = v122;
        isUniquelyReferenced_nonNull_native = (uint64_t)v149;
        v151 = sub_23D5DDBDC(v125, v124, v150);
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5E6950((uint64_t)v117, type metadata accessor for UserAndDiversifiedVerificationKey);
        _os_log_impl(&dword_23D5A8000, v118, v116, "duplicate diversification key update for member %s", v119, 0xCu);
        v126 = v148;
        swift_arrayDestroy();
        MEMORY[0x242636844](v126, -1, -1);
        MEMORY[0x242636844](v119, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v117, type metadata accessor for UserAndDiversifiedVerificationKey);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v99 = 30;
      v100 = 132;
      goto LABEL_48;
    }
    sub_23D5AFA60(v60, v59);
    sub_23D65AF2C(v150, v60, v59);
    sub_23D5DDA20(v150[0], v150[1]);
    sub_23D5E6950(isUniquelyReferenced_nonNull_native, type metadata accessor for UserAndDiversifiedVerificationKey);
    v4 = v142;
    v34 += v141;
    if (!--v33)
    {
      v138 = v55;
      swift_bridgeObjectRelease();
      v139 = (uint64_t)v136 + *(int *)(v129 + 20);
      swift_bridgeObjectRetain();
      v62 = (uint64_t *)v147;
      v63 = v143;
      v137 = v56;
      while (1)
      {
        v143 = v63;
        v66 = v136;
        sub_23D5E7298(v63, (uint64_t)v136, type metadata accessor for UserAndDiversifiedVerificationKey);
        v68 = *v66;
        v67 = v66[1];
        v69 = v145;
        v70 = v138;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v145, v139, v138);
        sub_23D5AFA60(v68, v67);
        sub_23D5E6950((uint64_t)v66, type metadata accessor for UserAndDiversifiedVerificationKey);
        (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v56 + 56))(v69, 0, 1, v70);
        sub_23D5AFA60(v68, v67);
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v150[0] = *v62;
        v71 = v150[0];
        *v62 = 0x8000000000000000;
        sub_23D5AFA60(v68, v67);
        v73 = sub_23D5DF394(v68, v67);
        v74 = *(_QWORD *)(v71 + 16);
        v75 = (v72 & 1) == 0;
        v76 = v74 + v75;
        if (__OFADD__(v74, v75))
          break;
        v77 = v72;
        if (*(_QWORD *)(v71 + 24) >= v76)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            sub_23D666FF8();
          v80 = (uint64_t)v135;
        }
        else
        {
          sub_23D6650E8(v76, isUniquelyReferenced_nonNull_native);
          v78 = sub_23D5DF394(v68, v67);
          if ((v77 & 1) != (v79 & 1))
            goto LABEL_55;
          v73 = v78;
          v80 = (uint64_t)v135;
        }
        if ((v77 & 1) == 0)
          goto LABEL_54;
        v81 = *(_QWORD *)(v146 + 72) * v73;
        v82 = v144;
        sub_23D5E7F64(*(_QWORD *)(v150[0] + 56) + v81, v144, type metadata accessor for GroupMembership.MemberProperties);
        v83 = v142;
        v149(v82, 0, 1, v142);
        sub_23D5F1788(v145, v82 + *(int *)(v83 + 28), &qword_256C799E0);
        sub_23D5AEF48(v82, v80, &qword_256C79178);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v148)(v80, 1, v83) == 1)
        {
          sub_23D5AEF8C(v80, &qword_256C79178);
          v64 = v150[0];
          swift_arrayDestroy();
          sub_23D666440(v73, v64);
        }
        else
        {
          v84 = v134;
          sub_23D5E7F64(v80, v134, type metadata accessor for GroupMembership.MemberProperties);
          v64 = v150[0];
          sub_23D5E7F64(v84, *(_QWORD *)(v150[0] + 56) + v81, type metadata accessor for GroupMembership.MemberProperties);
        }
        v65 = v140;
        v56 = v137;
        sub_23D5AEF8C(v144, &qword_256C79178);
        sub_23D5DDA20(v68, v67);
        v62 = (uint64_t *)v147;
        *(_QWORD *)v147 = v64;
        sub_23D5DDA20(v68, v67);
        sub_23D5DDA20(v68, v67);
        v63 = v143 + v141;
        v140 = v65 - 1;
        if (v65 == 1)
        {
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
      }
      __break(1u);
      goto LABEL_51;
    }
  }
  v149(v138, 1, 1, v4);
LABEL_53:
  __break(1u);
LABEL_54:
  v149(v144, 1, 1, v142);
  __break(1u);
LABEL_55:
  result = sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5B8FF0(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GroupMembership.MemberProperties(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_23D5AEF8C(a1, &qword_256C79178);
    sub_23D6644FC(a2, a3, (uint64_t)v10);
    sub_23D5DDA20(a2, a3);
    return sub_23D5AEF8C((uint64_t)v10, &qword_256C79178);
  }
  else
  {
    sub_23D5E7F64(a1, (uint64_t)v13, type metadata accessor for GroupMembership.MemberProperties);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_23D5E087C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_23D666FF8, (void (*)(void))sub_23D6650E8, type metadata accessor for GroupMembership.MemberProperties, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_23D666948);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return sub_23D5DDA20(a2, a3);
  }
}

uint64_t sub_23D5B917C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v17;
  uint64_t v18;

  v4 = v3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79118);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MembershipVerifier(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v17 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if ((*(unsigned int (**)(uint64_t, uint64_t))(v14 + 48))(a1, 1) == 1)
  {
    sub_23D5AEF8C(a1, &qword_256C79118);
    sub_23D664618(a2, a3, (uint64_t)v10);
    sub_23D5DDA20(a2, a3);
    return sub_23D5AEF8C((uint64_t)v10, &qword_256C79118);
  }
  else
  {
    sub_23D5E7F64(a1, (uint64_t)v13, type metadata accessor for MembershipVerifier);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v18 = *v4;
    *v4 = 0x8000000000000000;
    sub_23D5E087C((uint64_t)v13, a2, a3, isUniquelyReferenced_nonNull_native, (void (*)(void))sub_23D66729C, (void (*)(void))sub_23D665494, type metadata accessor for MembershipVerifier, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_23D6669B0);
    *v4 = v18;
    swift_bridgeObjectRelease();
    return sub_23D5DDA20(a2, a3);
  }
}

uint64_t Group.__allocating_init(groupID:version:memberGroupKitID:dsid:groupBlob:)(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  _QWORD *v13;
  uint64_t (*v15)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t);

  v15 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))((char *)&dword_256C79160
                                                                                     + dword_256C79160);
  v13 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v6 + 16) = v13;
  *v13 = v6;
  v13[1] = sub_23D5F2D84;
  return v15(a1, a2, a3, a4, a5, a6);
}

_QWORD *sub_23D5B93A4(uint64_t *a1, int a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  os_log_type_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  char v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  os_log_type_t v87;
  uint64_t v88;
  unint64_t v89;
  NSObject *v90;
  os_log_type_t v91;
  uint8_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  unint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  unint64_t v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  _QWORD *v140;
  uint64_t v141;
  unint64_t v142;
  void (*v143)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  uint64_t *v147;
  char *v148;
  char *v149;
  uint64_t *v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  unint64_t v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  _QWORD *v165;
  unint64_t v166;
  unint64_t v167;
  uint64_t v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint8_t *v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177[2];

  v171 = a8;
  v174 = a5;
  v158 = a4;
  LODWORD(v164) = a2;
  v172 = a9;
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79128);
  MEMORY[0x24BDAC7A8](v14);
  v146 = (uint64_t)&v143 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23D66C258();
  v162 = *(_QWORD *)(v16 - 8);
  v163 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v149 = (char *)&v143 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23D66C2AC();
  v19 = *(_QWORD *)(v18 - 8);
  v159 = v18;
  v160 = v19;
  MEMORY[0x24BDAC7A8](v18);
  v148 = (char *)&v143 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for UserKeyingInfo(0);
  MEMORY[0x24BDAC7A8](v21);
  v150 = (uint64_t *)((char *)&v143 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v23);
  v153 = (uint64_t)&v143 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = type metadata accessor for GroupMembership.MemberProperties(0);
  v154 = *(_QWORD *)(v152 - 8);
  MEMORY[0x24BDAC7A8](v152);
  v151 = (char *)&v143 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&v143 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  v29 = *a1;
  v30 = a1[1];
  v31 = a3[1];
  v168 = *a3;
  v169 = v31;
  v32 = a6[1];
  v173 = (uint8_t *)*a6;
  v161 = *a7;
  v156 = a7[1];
  v33 = v171;
  *(_OWORD *)(v9 + 88) = xmmword_23D66DF30;
  *(_QWORD *)(v9 + 104) = 0;
  *(_QWORD *)(v9 + 112) = 0;
  *(_OWORD *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset) = xmmword_23D66DF30;
  v147 = (uint64_t *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  *(_OWORD *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_23D66DF30;
  v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56);
  v35(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, 1, 1, v26);
  v36 = v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
  *(_OWORD *)v36 = 0u;
  *(_OWORD *)(v36 + 16) = 0u;
  *(_QWORD *)(v36 + 32) = 0;
  *(_QWORD *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  v165 = (_QWORD *)v9;
  *(_BYTE *)(v9 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  v37 = type metadata accessor for Group(0);
  v166 = v29;
  v167 = v30;
  v175 = v29;
  v176 = v30;
  v38 = (uint64_t)v173;
  v177[0] = (uint64_t)v173;
  v177[1] = v32;
  v157 = v32;
  v39 = v174;
  v40 = v172;
  v155 = v37;
  v41 = v170;
  sub_23D5BA564(&v175, v164, v174, v177, v33, v172, v28);
  if (v41)
  {
    v170 = v41;
    sub_23D5DDA20(v161, v156);
    sub_23D5DDA20(v33, (unint64_t)v40);
    (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v39, v163);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v158, v159);
    sub_23D5DDA20(v38, v157);
    sub_23D5DDA20(v168, v169);
    sub_23D5DDA20(v166, v167);
    v42 = (_QWORD *)&unk_256C88000;
    v43 = (_QWORD *)&unk_256C88000;
LABEL_27:
    v85 = v165;
    goto LABEL_28;
  }
  v44 = v152;
  v143 = v35;
  v144 = v26;
  v145 = v28;
  v45 = *v28;
  if (!*(_QWORD *)(*v28 + 16))
  {
    v50 = v153;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v154 + 56))(v153, 1, 1, v152);
    v46 = v168;
    v47 = v169;
    v55 = v161;
    v49 = v167;
LABEL_9:
    sub_23D5DDA20((uint64_t)v173, v157);
    sub_23D5DDA20(v166, v49);
    sub_23D5DDA20(v55, v156);
    sub_23D5AEF8C(v50, &qword_256C79178);
    if (qword_256C78B10 != -1)
      swift_once();
    v57 = sub_23D66BFDC();
    __swift_project_value_buffer(v57, (uint64_t)qword_256C88B78);
    v58 = sub_23D66C588();
    sub_23D5AFA60(v46, v47);
    v59 = sub_23D66BFC4();
    v60 = v58;
    if (os_log_type_enabled(v59, v58))
    {
      v61 = (uint8_t *)swift_slowAlloc();
      v62 = swift_slowAlloc();
      v175 = v62;
      *(_DWORD *)v61 = 136315138;
      v173 = v61 + 4;
      sub_23D5AFA60(v46, v47);
      v63 = sub_23D66BD30();
      v65 = v64;
      sub_23D5DDA20(v46, v47);
      v177[0] = sub_23D5DDBDC(v63, v65, &v175);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v46, v47);
      sub_23D5DDA20(v46, v47);
      _os_log_impl(&dword_23D5A8000, v59, v60, "user %s is not a member of the group", v61, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v62, -1, -1);
      MEMORY[0x242636844](v61, -1, -1);
    }
    else
    {
      sub_23D5DDA20(v46, v47);
      sub_23D5DDA20(v46, v47);
    }

    v42 = (_QWORD *)&unk_256C88000;
    v43 = (_QWORD *)&unk_256C88000;
    v66 = v174;
    v67 = (uint64_t)v145;
    v68 = v160;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    v69 = swift_allocError();
    *(_WORD *)v70 = 338;
    *(_OWORD *)(v70 + 8) = xmmword_23D66DF90;
    *(_QWORD *)(v70 + 24) = 0x800000023D678360;
    *(_QWORD *)(v70 + 32) = 0xD000000000000052;
    *(_QWORD *)(v70 + 40) = 0x800000023D676EF0;
    v170 = v69;
    swift_willThrow();
    sub_23D5DDA20(v171, (unint64_t)v172);
    (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v66, v163);
    (*(void (**)(uint64_t, uint64_t))(v68 + 8))(v158, v159);
LABEL_26:
    sub_23D5E6950(v67, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    goto LABEL_27;
  }
  v170 = 0;
  swift_bridgeObjectRetain();
  v46 = v168;
  v47 = v169;
  sub_23D5AFA60(v168, v169);
  v48 = sub_23D5DF394(v46, v47);
  v49 = v167;
  v50 = v153;
  if ((v51 & 1) != 0)
  {
    v52 = v154;
    sub_23D5E7298(*(_QWORD *)(v45 + 56) + *(_QWORD *)(v154 + 72) * v48, v153, type metadata accessor for GroupMembership.MemberProperties);
    v53 = 0;
    v54 = v151;
  }
  else
  {
    v53 = 1;
    v54 = v151;
    v52 = v154;
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v52 + 56))(v50, v53, 1, v44);
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v46, v47);
  v56 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v52 + 48))(v50, 1, v44);
  v55 = v161;
  if (v56 == 1)
    goto LABEL_9;
  sub_23D5E7F64(v50, (uint64_t)v54, type metadata accessor for GroupMembership.MemberProperties);
  v71 = *((_QWORD *)v54 + 1);
  v72 = *((_QWORD *)v54 + 2);
  v73 = (uint64_t)v173;
  v74 = v157;
  sub_23D5AFA60((uint64_t)v173, v157);
  if (v72 >> 60 == 15)
  {
    sub_23D5DDA20(v73, v74);
    sub_23D5E725C(v73, v74);
    sub_23D5E725C(v71, v72);
    v75 = v166;
LABEL_20:
    sub_23D5DDA20(v75, v49);
    sub_23D5DDA20(v55, v156);
    if (qword_256C78B10 != -1)
      swift_once();
    v86 = sub_23D66BFDC();
    __swift_project_value_buffer(v86, (uint64_t)qword_256C88B78);
    v87 = sub_23D66C588();
    v88 = v168;
    v89 = v169;
    sub_23D5AFA60(v168, v169);
    v90 = sub_23D66BFC4();
    v91 = v87;
    if (os_log_type_enabled(v90, v87))
    {
      v92 = (uint8_t *)swift_slowAlloc();
      v93 = swift_slowAlloc();
      v175 = v93;
      *(_DWORD *)v92 = 136315138;
      v173 = v92 + 4;
      sub_23D5AFA60(v88, v89);
      v94 = sub_23D66BD30();
      v96 = v95;
      sub_23D5DDA20(v88, v89);
      v177[0] = sub_23D5DDBDC(v94, v96, &v175);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v88, v89);
      sub_23D5DDA20(v88, v89);
      _os_log_impl(&dword_23D5A8000, v90, v91, "member %s key share does not match group key share", v92, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v93, -1, -1);
      MEMORY[0x242636844](v92, -1, -1);
    }
    else
    {
      sub_23D5DDA20(v88, v89);
      sub_23D5DDA20(v88, v89);
    }

    v42 = &unk_256C88000;
    v43 = &unk_256C88000;
    v97 = v174;
    v67 = (uint64_t)v145;
    v98 = v160;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    v99 = swift_allocError();
    *(_WORD *)v100 = 344;
    *(_OWORD *)(v100 + 8) = xmmword_23D66DF80;
    *(_QWORD *)(v100 + 24) = 0x800000023D678360;
    *(_QWORD *)(v100 + 32) = 0xD000000000000052;
    *(_QWORD *)(v100 + 40) = 0x800000023D676EF0;
    v170 = v99;
    swift_willThrow();
    sub_23D5DDA20(v171, (unint64_t)v172);
    (*(void (**)(uint64_t, uint64_t))(v162 + 8))(v97, v163);
    (*(void (**)(uint64_t, uint64_t))(v98 + 8))(v158, v159);
    sub_23D5E6950((uint64_t)v151, type metadata accessor for GroupMembership.MemberProperties);
    goto LABEL_26;
  }
  sub_23D5E7284(v71, v72);
  sub_23D5E6578(v73, v74);
  v77 = v76;
  sub_23D5E725C(v71, v72);
  sub_23D5DDA20(v73, v74);
  sub_23D5DDA20(v73, v74);
  v75 = v166;
  if ((v77 & 1) == 0)
    goto LABEL_20;
  v78 = swift_bridgeObjectRetain();
  v79 = v170;
  v80 = sub_23D5B0A5C(v78);
  swift_bridgeObjectRelease();
  sub_23D6607A0(v80, &v175);
  v81 = v174;
  v82 = (uint64_t)v145;
  v83 = v162;
  v84 = v163;
  v85 = v165;
  if (!v79)
  {
    v102 = v175;
    v103 = v167;
    v104 = v168;
    v165[2] = v166;
    v85[3] = v103;
    *((_BYTE *)v85 + 32) = *v151;
    v85[5] = v104;
    v105 = v169;
    v85[6] = v169;
    v85[7] = v102;
    *((_DWORD *)v85 + 16) = v164;
    sub_23D66BCB8();
    swift_allocObject();
    sub_23D5AFA60(v104, v105);
    v106 = sub_23D66BC94();
    sub_23D61BC58(0x4000000000, v106 | 0x4000000000000000);
    v107 = v165;
    v108 = v165[11];
    v109 = v165[12];
    v111 = v165[13];
    v110 = v165[14];
    v165[11] = v112;
    v107[12] = v113;
    v107[13] = v114;
    v107[14] = v115;
    v116 = v112;
    v166 = v113;
    v117 = v115;
    v118 = v114;
    sub_23D5AFA60(v112, v113);
    v167 = v118;
    v173 = (uint8_t *)v117;
    sub_23D5E7284(v118, v117);
    sub_23D5E7220(v108, v109, v111, v110);
    swift_allocObject();
    v119 = sub_23D66BC94();
    sub_23D61BF0C(0x4000000000, v119 | 0x4000000000000000);
    v164 = v116;
    v120 = v165;
    v165[9] = v121;
    v120[10] = v122;
    v123 = MEMORY[0x24BEE4AF8];
    *(_QWORD *)((char *)v120 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites) = sub_23D5B4EE4(MEMORY[0x24BEE4AF8]);
    *(_QWORD *)((char *)v120 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers) = sub_23D5B5070(v123, &qword_256C79B00, &qword_256C79B08, type metadata accessor for MembershipVerifier);
    *((_BYTE *)v120 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 4;
    v124 = v147;
    v125 = *v147;
    v126 = v147[1];
    v127 = v171;
    v128 = v172;
    *v147 = v171;
    v124[1] = (uint64_t)v128;
    sub_23D5AFA60(v127, (unint64_t)v128);
    sub_23D5E725C(v125, v126);
    v175 = v168;
    v176 = v169;
    v129 = v159;
    v130 = (uint64_t)v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v160 + 16))(v148, v158, v159);
    v132 = v162;
    v131 = v163;
    v133 = (uint64_t)v149;
    v134 = v174;
    (*(void (**)(char *, uint64_t, uint64_t))(v162 + 16))(v149, v174, v163);
    sub_23D61EB88(&v175, v130, v133, v150);
    v135 = (uint64_t)v145;
    v170 = 0;
    v136 = v156;
    sub_23D5DDA20(v127, (unint64_t)v128);
    sub_23D5DDA20(v164, v166);
    sub_23D5E725C(v167, (unint64_t)v173);
    (*(void (**)(uint64_t, uint64_t))(v132 + 8))(v134, v131);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v158, v129);
    sub_23D5E6950((uint64_t)v151, type metadata accessor for GroupMembership.MemberProperties);
    v85 = v165;
    sub_23D5E7F64((uint64_t)v150, (uint64_t)v165 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
    v137 = v135;
    v138 = v146;
    sub_23D5E7F64(v137, v146, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    v143(v138, 0, 1, v144);
    v139 = (uint64_t)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
    swift_beginAccess();
    sub_23D5F1788(v138, v139, &qword_256C79128);
    swift_endAccess();
    v140 = (_QWORD *)((char *)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    v141 = *(_QWORD *)((char *)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    v142 = *(_QWORD *)((char *)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    *v140 = v161;
    v140[1] = v136;
    sub_23D5E725C(v141, v142);
    return v85;
  }
  v170 = v79;
  sub_23D5DDA20(v166, v167);
  sub_23D5DDA20(v55, v156);
  sub_23D5DDA20(v171, (unint64_t)v172);
  sub_23D5DDA20(v168, v169);
  (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v81, v84);
  (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v158, v159);
  sub_23D5E6950((uint64_t)v151, type metadata accessor for GroupMembership.MemberProperties);
  sub_23D5E6950(v82, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  v42 = (_QWORD *)&unk_256C88000;
  v43 = (_QWORD *)&unk_256C88000;
LABEL_28:
  sub_23D5E7220(v85[11], v85[12], v85[13], v85[14]);
  sub_23D5E725C(*(_QWORD *)((char *)v85 + v43[399]), *(_QWORD *)((char *)v85 + v43[399] + 8));
  sub_23D5E725C(*(_QWORD *)((char *)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(_QWORD *)((char *)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
  sub_23D5AEF8C((uint64_t)v85 + v42[401], &qword_256C79128);
  sub_23D5AEF8C((uint64_t)v85 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_256C79130);
  swift_release();
  swift_deallocPartialClassInstance();
  return v85;
}

uint64_t sub_23D5BA564@<X0>(uint64_t *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X4>, uint64_t *a4@<X5>, uint64_t a5@<X6>, _QWORD *a6@<X7>, _QWORD *a7@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  uint64_t v48;
  unsigned int *v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t inited;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int (*v57)(uint64_t, uint64_t, uint64_t);
  uint64_t result;
  unsigned int *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int (*v63)(uint64_t, uint64_t, uint64_t);
  uint64_t v64;
  os_log_type_t v65;
  int *v66;
  NSObject *v67;
  os_log_type_t v68;
  uint64_t v69;
  int v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unsigned int (*v74)(uint64_t, uint64_t, uint64_t);
  uint64_t v75;
  uint64_t v76;
  unsigned int (*v77)(uint64_t, uint64_t, uint64_t);
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  unint64_t v88;
  unint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  char v94;
  uint64_t v95;
  _OWORD *v96;
  uint64_t v97;
  os_log_type_t v98;
  NSObject *v99;
  os_log_type_t v100;
  _BOOL4 v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint8_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  _OWORD *v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  unint64_t v121;
  _QWORD *v122;
  unint64_t v123;
  unint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  char *v129;
  char v130;
  uint64_t v131;
  char *v132;
  char *v133;
  uint64_t v134;
  os_log_type_t v135;
  NSObject *v136;
  os_log_type_t v137;
  uint8_t *v138;
  uint64_t v139;
  void (*v140)(char *, uint64_t);
  void (*v141)(char *, uint64_t);
  uint64_t v142;
  char *v143;
  uint64_t *v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  os_log_type_t v155;
  uint64_t v156;
  NSObject *v157;
  uint64_t v158;
  uint64_t v159;
  _DWORD *v160;
  char *v161;
  void (*v162)(char *, uint64_t);
  void (*v163)(char *, uint64_t);
  uint64_t v164;
  uint64_t v165;
  _QWORD *v166;
  int v167;
  uint64_t v168;
  void (*v169)(char *, uint64_t);
  uint64_t v170;
  char *v171;
  _DWORD *v172;
  uint64_t v173;
  uint64_t v174;
  char *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _DWORD *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  _OWORD *v189;
  uint64_t v190;
  char *v191;
  _OWORD *v192;
  uint64_t v193;
  char *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  char *v202;
  uint64_t v203;
  unsigned int (*v204)(uint64_t, uint64_t, uint64_t);
  unsigned int *v205;
  unint64_t v206;
  uint64_t v207;
  uint64_t v208;
  _QWORD *v209;
  unsigned int (*v210)(uint64_t, uint64_t, uint64_t);
  unsigned int v211;
  __int128 v212[2];
  uint64_t v213;
  uint64_t v214;

  v209 = a6;
  v208 = a5;
  v187 = a3;
  v211 = a2;
  v176 = a7;
  v214 = *MEMORY[0x24BDAC8D0];
  v9 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  v174 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v175 = (char *)&v170 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v173 = (uint64_t)&v170 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v181 = (uint64_t)&v170 - v14;
  v183 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v179 = *(_QWORD *)(v183 - 8);
  v15 = MEMORY[0x24BDAC7A8](v183);
  v172 = (_DWORD *)((char *)&v170 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v15);
  v180 = (_DWORD *)((char *)&v170 - v17);
  v182 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v18 = MEMORY[0x24BDAC7A8](v182);
  v177 = (uint64_t)&v170 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v184 = (uint64_t *)((char *)&v170 - v20);
  v178 = type metadata accessor for Group.GroupCiphertextContents(0);
  MEMORY[0x24BDAC7A8](v178);
  v188 = (uint64_t)&v170 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v190 = (uint64_t)&v170 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v197 = (uint64_t)&v170 - v25;
  v201 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v207 = *(_QWORD *)(v201 - 8);
  v26 = MEMORY[0x24BDAC7A8](v201);
  v189 = (_OWORD *)((char *)&v170 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v26);
  *(_QWORD *)&v198 = (char *)&v170 - v28;
  v196 = sub_23D66C330();
  v195 = *(_QWORD *)(v196 - 8);
  v29 = MEMORY[0x24BDAC7A8](v196);
  v191 = (char *)&v170 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v29);
  v202 = (char *)&v170 - v31;
  v32 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
  v33 = MEMORY[0x24BDAC7A8](v32);
  v193 = (uint64_t)&v170 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v33);
  v206 = (unint64_t)&v170 - v35;
  v203 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v205 = *(unsigned int **)(v203 - 8);
  v36 = MEMORY[0x24BDAC7A8](v203);
  v192 = (_OWORD *)((char *)&v170 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v36);
  v204 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))((char *)&v170 - v38);
  v200 = sub_23D66C2DC();
  v199 = *(_QWORD *)(v200 - 8);
  v39 = MEMORY[0x24BDAC7A8](v200);
  v194 = (char *)&v170 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v39);
  v42 = (char *)&v170 - v41;
  v43 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v43);
  v44 = type metadata accessor for GKCrypto_GroupBlob(0);
  v45 = MEMORY[0x24BDAC7A8](v44);
  v47 = (char *)&v170 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v49 = (unsigned int *)((char *)&v170 - v48);
  v50 = *a1;
  v51 = a1[1];
  v186 = *a4;
  v185 = a4[1];
  v52 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  *(_QWORD *)(inited + 32) = v50;
  *(_QWORD *)(inited + 40) = v51;
  LODWORD(v212[0]) = bswap32(v211);
  v54 = v50;
  v55 = (_QWORD *)inited;
  sub_23D5AFA60(v54, v51);
  v55[6] = sub_23D628C44((uint64_t)v212, (uint64_t)v212 + 4);
  v55[7] = v56;
  v213 = 0;
  memset(v212, 0, sizeof(v212));
  sub_23D5AFA60(v208, (unint64_t)v209);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C79A80, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6726CC);
  v57 = v210;
  sub_23D66BF10();
  if (v57)
    return swift_bridgeObjectRelease();
  v59 = v205;
  v210 = 0;
  v60 = (uint64_t)v204;
  v61 = v207;
  v208 = v52;
  v171 = v42;
  if (*v49 != 1)
  {
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v64 = sub_23D66BFDC();
    __swift_project_value_buffer(v64, (uint64_t)qword_256C88B78);
    v65 = sub_23D66C588();
    v66 = (int *)v47;
    sub_23D5E7298((uint64_t)v49, (uint64_t)v47, type metadata accessor for GKCrypto_GroupBlob);
    v67 = sub_23D66BFC4();
    v68 = v65;
    if (os_log_type_enabled(v67, v65))
    {
      v69 = swift_slowAlloc();
      *(_DWORD *)v69 = 67109376;
      v70 = *v66;
      sub_23D5E6950((uint64_t)v66, type metadata accessor for GKCrypto_GroupBlob);
      LODWORD(v212[0]) = v70;
      sub_23D66C5D0();
      *(_WORD *)(v69 + 8) = 1024;
      LODWORD(v212[0]) = 1;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v67, v68, "unsupported version in GroupBlob, got %u expected %u", (uint8_t *)v69, 0xEu);
      MEMORY[0x242636844](v69, -1, -1);
    }
    else
    {
      sub_23D5E6950((uint64_t)v66, type metadata accessor for GKCrypto_GroupBlob);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v75 = 355;
    *(_OWORD *)(v75 + 8) = xmmword_23D66DFA0;
    *(_QWORD *)(v75 + 24) = 0x800000023D677C30;
    *(_QWORD *)(v75 + 32) = 0xD000000000000052;
    *(_QWORD *)(v75 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_GroupBlob);
  }
  v209 = v55;
  v170 = (uint64_t)v49 + *(int *)(v44 + 40);
  v62 = v206;
  sub_23D5AEF48(v170, v206, qword_256C79750);
  v63 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v59 + 6);
  if (v63(v62, 1, v203) == 1)
  {
    *(_OWORD *)v60 = xmmword_23D66DF40;
    *(_OWORD *)(v60 + 16) = xmmword_23D66DF40;
    *(_OWORD *)(v60 + 32) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v62, qword_256C79750);
  }
  else
  {
    sub_23D5E7F64(v62, v60, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  v72 = *(_QWORD *)v60;
  v71 = *(_QWORD *)(v60 + 8);
  sub_23D5AFA60(*(_QWORD *)v60, v71);
  sub_23D5E6950(v60, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  *(_QWORD *)&v212[0] = v72;
  *((_QWORD *)&v212[0] + 1) = v71;
  v73 = sub_23D5E6898();
  v74 = v210;
  sub_23D66C2C4();
  if (v74)
  {
    sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_GroupBlob);
    return swift_bridgeObjectRelease();
  }
  v210 = v63;
  v207 = (uint64_t)v49 + *(int *)(v44 + 36);
  v76 = v197;
  sub_23D5AEF48(v207, v197, &qword_256C79748);
  v77 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48);
  if (v77(v76, 1, v201) == 1)
  {
    v78 = v198;
    *(_OWORD *)v198 = xmmword_23D66DF40;
    *(_OWORD *)(v78 + 16) = xmmword_23D66DF40;
    *(_OWORD *)(v78 + 32) = xmmword_23D66DF40;
    *(_OWORD *)(v78 + 48) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v76, &qword_256C79748);
  }
  else
  {
    v78 = v198;
    sub_23D5E7F64(v76, v198, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  v79 = *(_QWORD *)(v78 + 16);
  v80 = *(_QWORD *)(v78 + 24);
  sub_23D5AFA60(v79, v80);
  sub_23D5E6950(v78, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  *(_QWORD *)&v212[0] = v79;
  *((_QWORD *)&v212[0] + 1) = v80;
  sub_23D66C324();
  v206 = v73;
  v81 = swift_initStackObject();
  v198 = xmmword_23D66DED0;
  *(_OWORD *)(v81 + 16) = xmmword_23D66DED0;
  LODWORD(v212[0]) = bswap32(*v49);
  *(_QWORD *)(v81 + 32) = sub_23D628C44((uint64_t)v212, (uint64_t)v212 + 4);
  *(_QWORD *)(v81 + 40) = v82;
  *(_QWORD *)&v212[0] = v81;
  v83 = swift_bridgeObjectRetain();
  sub_23D5E0AF4(v83);
  v84 = *(_QWORD **)&v212[0];
  if (qword_256C78B30 != -1)
    swift_once();
  v204 = v77;
  v205 = v49;
  v85 = qword_256C88BC0;
  v86 = *(_QWORD *)algn_256C88BC8;
  sub_23D5AFA60(qword_256C88BC0, *(unint64_t *)algn_256C88BC8);
  sub_23D5AFA60(v85, v86);
  swift_bridgeObjectRetain();
  v87 = v84;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v87 = sub_23D62B638(0, v84[2] + 1, 1, v84);
  v89 = v87[2];
  v88 = v87[3];
  if (v89 >= v88 >> 1)
    v87 = sub_23D62B638((_QWORD *)(v88 > 1), v89 + 1, 1, v87);
  v87[2] = v89 + 1;
  v90 = &v87[2 * v89];
  v90[4] = v85;
  v90[5] = v86;
  sub_23D5DDA20(v85, v86);
  swift_bridgeObjectRelease();
  v49 = v205;
  v91 = sub_23D5C565C(v87);
  v93 = v92;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v212[0] = v91;
  *((_QWORD *)&v212[0] + 1) = v93;
  v94 = sub_23D66C2E8();
  sub_23D5DDA20(v91, v93);
  if ((v94 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v97 = sub_23D66BFDC();
    __swift_project_value_buffer(v97, (uint64_t)qword_256C88B78);
    v98 = sub_23D66C588();
    v99 = sub_23D66BFC4();
    v100 = v98;
    v101 = os_log_type_enabled(v99, v98);
    v102 = v196;
    v103 = v200;
    v104 = v195;
    v105 = v199;
    if (v101)
    {
      v106 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v106 = 0;
      _os_log_impl(&dword_23D5A8000, v99, v100, "GroupBlob not signed by administrator key", v106, 2u);
      MEMORY[0x242636844](v106, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v107 = 332;
    *(_OWORD *)(v107 + 8) = xmmword_23D66DFB0;
    *(_QWORD *)(v107 + 24) = 0x800000023D677C30;
    *(_QWORD *)(v107 + 32) = 0xD000000000000052;
    *(_QWORD *)(v107 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v104 + 8))(v202, v102);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v171, v103);
    return sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_GroupBlob);
  }
  v95 = v193;
  sub_23D5AEF48(v170, v193, qword_256C79750);
  if (v210(v95, 1, v203) == 1)
  {
    v96 = v192;
    *v192 = xmmword_23D66DF40;
    v96[1] = xmmword_23D66DF40;
    v96[2] = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v95, qword_256C79750);
  }
  else
  {
    v96 = v192;
    sub_23D5E7F64(v95, (uint64_t)v192, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  v108 = v196;
  v109 = *((_QWORD *)v96 + 4);
  v110 = *((_QWORD *)v96 + 5);
  sub_23D5AFA60(v109, v110);
  sub_23D5E6950((uint64_t)v96, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  *(_QWORD *)&v212[0] = v109;
  *((_QWORD *)&v212[0] + 1) = v110;
  sub_23D66C2C4();
  v111 = v190;
  sub_23D5AEF48(v207, v190, &qword_256C79748);
  if (v204(v111, 1, v201) == 1)
  {
    v112 = v189;
    *v189 = xmmword_23D66DF40;
    v112[1] = xmmword_23D66DF40;
    v112[2] = xmmword_23D66DF40;
    v112[3] = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v111, &qword_256C79748);
  }
  else
  {
    v112 = v189;
    sub_23D5E7F64(v111, (uint64_t)v189, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  v113 = (uint64_t)v112;
  v114 = *(_QWORD *)v112;
  v115 = *((_QWORD *)v112 + 1);
  sub_23D5AFA60(v114, v115);
  sub_23D5E6950(v113, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  *(_QWORD *)&v212[0] = v114;
  *((_QWORD *)&v212[0] + 1) = v115;
  sub_23D66C324();
  v116 = swift_initStackObject();
  *(_OWORD *)(v116 + 16) = v198;
  LODWORD(v212[0]) = bswap32(*v49);
  *(_QWORD *)(v116 + 32) = sub_23D628C44((uint64_t)v212, (uint64_t)v212 + 4);
  *(_QWORD *)(v116 + 40) = v117;
  *(_QWORD *)&v212[0] = v116;
  v118 = swift_bridgeObjectRetain();
  sub_23D5E0AF4(v118);
  v119 = *(_QWORD **)&v212[0];
  if (qword_256C78B38 != -1)
    swift_once();
  v120 = qword_256C88BD0;
  v121 = *(_QWORD *)algn_256C88BD8;
  sub_23D5AFA60(qword_256C88BD0, *(unint64_t *)algn_256C88BD8);
  sub_23D5AFA60(v120, v121);
  swift_bridgeObjectRetain();
  v122 = v119;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v122 = sub_23D62B638(0, v119[2] + 1, 1, v119);
  v124 = v122[2];
  v123 = v122[3];
  if (v124 >= v123 >> 1)
    v122 = sub_23D62B638((_QWORD *)(v123 > 1), v124 + 1, 1, v122);
  v122[2] = v124 + 1;
  v125 = &v122[2 * v124];
  v125[4] = v120;
  v125[5] = v121;
  sub_23D5DDA20(v120, v121);
  swift_bridgeObjectRelease();
  v126 = sub_23D5C5D74(v122);
  v128 = v127;
  swift_bridgeObjectRelease();
  *(_QWORD *)&v212[0] = v126;
  *((_QWORD *)&v212[0] + 1) = v128;
  v129 = v194;
  v130 = sub_23D66C2E8();
  sub_23D5DDA20(v126, v128);
  if ((v130 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v132 = v202;
    v133 = v171;
    if (qword_256C78B10 != -1)
      swift_once();
    v134 = sub_23D66BFDC();
    __swift_project_value_buffer(v134, (uint64_t)qword_256C88B78);
    v135 = sub_23D66C588();
    v136 = sub_23D66BFC4();
    v137 = v135;
    if (os_log_type_enabled(v136, v135))
    {
      v138 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v138 = 0;
      _os_log_impl(&dword_23D5A8000, v136, v137, "GroupBlob not signed by member key", v138, 2u);
      MEMORY[0x242636844](v138, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v139 = 333;
    *(_OWORD *)(v139 + 8) = xmmword_23D66DFC0;
    *(_QWORD *)(v139 + 24) = 0x800000023D677C30;
    *(_QWORD *)(v139 + 32) = 0xD000000000000052;
    *(_QWORD *)(v139 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    v140 = *(void (**)(char *, uint64_t))(v195 + 8);
    v140(v191, v108);
    v141 = *(void (**)(char *, uint64_t))(v199 + 8);
    v142 = v200;
    v141(v129, v200);
    v140(v132, v108);
    v143 = v133;
    goto LABEL_50;
  }
  *(_QWORD *)&v212[0] = v186;
  *((_QWORD *)&v212[0] + 1) = v185;
  v131 = v188;
  sub_23D5D0D30(v49, v187, v212, v209, v188);
  swift_bridgeObjectRelease();
  v144 = v184;
  sub_23D5E7298(v131 + *(int *)(v178 + 20), (uint64_t)v184, type metadata accessor for GKCrypto_GroupAETextToSign);
  v145 = v181;
  sub_23D5AEF48((uint64_t)v144 + *(int *)(v182 + 24), v181, &qword_256C799D0);
  v210 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v179 + 48);
  if (v210(v145, 1, v183) == 1)
  {
    v146 = v180;
    *v180 = 0;
    *(_OWORD *)(v146 + 2) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v145, &qword_256C799D0);
  }
  else
  {
    v146 = v180;
    sub_23D5E7F64(v145, (uint64_t)v180, type metadata accessor for GKCrypto_VersionedSeed);
  }
  v147 = *v146;
  sub_23D5E6950((uint64_t)v146, type metadata accessor for GKCrypto_VersionedSeed);
  if (v147 != v211)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v154 = sub_23D66BFDC();
    __swift_project_value_buffer(v154, (uint64_t)qword_256C88B78);
    v155 = sub_23D66C588();
    v156 = v177;
    sub_23D5E7298((uint64_t)v184, v177, type metadata accessor for GKCrypto_GroupAETextToSign);
    v157 = sub_23D66BFC4();
    if (os_log_type_enabled(v157, v155))
    {
      v158 = swift_slowAlloc();
      *(_DWORD *)v158 = 67109376;
      LODWORD(v212[0]) = v211;
      sub_23D66C5D0();
      *(_WORD *)(v158 + 8) = 1024;
      v159 = v173;
      sub_23D5AEF48(v156 + *(int *)(v182 + 24), v173, &qword_256C799D0);
      if (v210(v159, 1, v183) == 1)
      {
        v160 = v172;
        *v172 = 0;
        *(_OWORD *)(v160 + 2) = xmmword_23D66DF40;
        sub_23D66BE5C();
        sub_23D5AEF8C(v159, &qword_256C799D0);
      }
      else
      {
        v160 = v172;
        sub_23D5E7F64(v159, (uint64_t)v172, type metadata accessor for GKCrypto_VersionedSeed);
      }
      v167 = *v160;
      sub_23D5E6950((uint64_t)v160, type metadata accessor for GKCrypto_VersionedSeed);
      sub_23D5E6950(v177, type metadata accessor for GKCrypto_GroupAETextToSign);
      LODWORD(v212[0]) = v167;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v157, v155, "seed and group versions do not match, got %u expected %u", (uint8_t *)v158, 0xEu);
      MEMORY[0x242636844](v158, -1, -1);
      v49 = v205;
      v108 = v196;
      v161 = v171;
      v129 = v194;
    }
    else
    {
      sub_23D5E6950(v156, type metadata accessor for GKCrypto_GroupAETextToSign);
      v161 = v171;
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v168 = 334;
    *(_OWORD *)(v168 + 8) = xmmword_23D66DFD0;
    *(_QWORD *)(v168 + 24) = 0x800000023D677C30;
    *(_QWORD *)(v168 + 32) = 0xD000000000000052;
    *(_QWORD *)(v168 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5E6950((uint64_t)v184, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_23D5E6950(v188, type metadata accessor for Group.GroupCiphertextContents);
    v169 = *(void (**)(char *, uint64_t))(v195 + 8);
    v169(v191, v108);
    v141 = *(void (**)(char *, uint64_t))(v199 + 8);
    v142 = v200;
    v141(v129, v200);
    v169(v202, v108);
    v143 = v161;
LABEL_50:
    v141(v143, v142);
    return sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_GroupBlob);
  }
  v148 = *v144;
  *(_QWORD *)&v212[0] = MEMORY[0x24BEE4B00];
  v149 = *(_QWORD *)(v148 + 16);
  if (v149)
  {
    v150 = v148 + ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80));
    v151 = *(_QWORD *)(v174 + 72);
    v210 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v148;
    swift_bridgeObjectRetain_n();
    v152 = (uint64_t)v175;
    do
    {
      sub_23D5E7298(v150, v152, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      sub_23D5D1518((uint64_t)v212, v152);
      sub_23D5E6950(v152, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      v150 += v151;
      --v149;
    }
    while (v149);
    swift_bridgeObjectRelease();
    v153 = *(_QWORD *)&v212[0];
    v131 = v188;
  }
  else
  {
    swift_bridgeObjectRetain();
    v153 = MEMORY[0x24BEE4B00];
  }
  sub_23D5E6950((uint64_t)v184, type metadata accessor for GKCrypto_GroupAETextToSign);
  sub_23D5E6950(v131, type metadata accessor for Group.GroupCiphertextContents);
  v162 = *(void (**)(char *, uint64_t))(v195 + 8);
  v162(v191, v108);
  v163 = *(void (**)(char *, uint64_t))(v199 + 8);
  v164 = v200;
  v163(v129, v200);
  v162(v202, v108);
  v163(v171, v164);
  swift_bridgeObjectRelease();
  v165 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  v166 = v176;
  result = sub_23D5E7F64((uint64_t)v49, (uint64_t)v176 + *(int *)(v165 + 20), type metadata accessor for GKCrypto_GroupBlob);
  *v166 = v153;
  *(_DWORD *)((char *)v166 + *(int *)(v165 + 24)) = v211;
  return result;
}

uint64_t static Group.loadPreviousGroup(groupID:memberGroupKitID:dsid:)(_OWORD *a1, __int128 *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  *(_QWORD *)(v3 + 152) = swift_task_alloc();
  v7 = sub_23D66C258();
  *(_QWORD *)(v3 + 160) = v7;
  *(_QWORD *)(v3 + 168) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 176) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  *(_QWORD *)(v3 + 184) = swift_task_alloc();
  *(_QWORD *)(v3 + 192) = type metadata accessor for UserKeyingInfo(0);
  *(_QWORD *)(v3 + 200) = swift_task_alloc();
  *(_QWORD *)(v3 + 208) = swift_task_alloc();
  v8 = sub_23D66C2AC();
  *(_QWORD *)(v3 + 216) = v8;
  *(_QWORD *)(v3 + 224) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v3 + 232) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  *(_QWORD *)(v3 + 240) = swift_task_alloc();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79128);
  *(_QWORD *)(v3 + 248) = swift_task_alloc();
  v9 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  *(_QWORD *)(v3 + 256) = v9;
  *(_QWORD *)(v3 + 264) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v3 + 272) = swift_task_alloc();
  v10 = *a2;
  *(_OWORD *)(v3 + 280) = *a1;
  *(_OWORD *)(v3 + 296) = v10;
  v11 = a3[1];
  *(_QWORD *)(v3 + 312) = *a3;
  *(_QWORD *)(v3 + 320) = v11;
  return swift_task_switch();
}

uint64_t sub_23D5BC1C8()
{
  uint64_t v0;
  __int128 v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  os_log_type_t v13;
  _BOOL4 v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v34;
  os_log_type_t type;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39[3];

  v1 = *(_OWORD *)(v0 + 296);
  v38 = *(_OWORD *)(v0 + 280);
  *(_OWORD *)v39 = v1;
  v2 = sub_23D64D754((uint64_t *)&v38, v39);
  *(_QWORD *)(v0 + 328) = v2;
  *(_QWORD *)(v0 + 336) = v3;
  *(_QWORD *)(v0 + 344) = v4;
  v5 = v4;
  if (v4 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v6 = *(_QWORD *)(v0 + 296);
    v7 = *(_QWORD *)(v0 + 304);
    v9 = *(_QWORD *)(v0 + 280);
    v8 = *(_QWORD *)(v0 + 288);
    v10 = sub_23D66BFDC();
    __swift_project_value_buffer(v10, (uint64_t)qword_256C88B78);
    v11 = sub_23D66C588();
    sub_23D5AFA60(v9, v8);
    sub_23D5AFA60(v6, v7);
    sub_23D5AFA60(v9, v8);
    sub_23D5AFA60(v6, v7);
    v12 = sub_23D66BFC4();
    v13 = v11;
    v14 = os_log_type_enabled(v12, v11);
    v16 = *(_QWORD *)(v0 + 296);
    v15 = *(_QWORD *)(v0 + 304);
    v17 = *(_QWORD *)(v0 + 280);
    v18 = *(_QWORD *)(v0 + 288);
    if (v14)
    {
      v19 = swift_slowAlloc();
      v37 = swift_slowAlloc();
      v39[0] = v37;
      *(_DWORD *)v19 = 136315394;
      sub_23D5AFA60(v17, v18);
      v20 = sub_23D66BD30();
      type = v13;
      v22 = v21;
      sub_23D5DDA20(v17, v18);
      *(_QWORD *)(v0 + 144) = sub_23D5DDBDC(v20, v22, v39);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v17, v18);
      sub_23D5DDA20(v17, v18);
      *(_WORD *)(v19 + 12) = 2080;
      sub_23D5AFA60(v16, v15);
      v23 = sub_23D66BD30();
      v25 = v24;
      sub_23D5DDA20(v16, v15);
      *(_QWORD *)(v0 + 136) = sub_23D5DDBDC(v23, v25, v39);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v16, v15);
      sub_23D5DDA20(v16, v15);
      _os_log_impl(&dword_23D5A8000, v12, type, "GroupBlob not found in encrypted container for groupID %s and userID %s", (uint8_t *)v19, 0x16u);
      swift_arrayDestroy();
      MEMORY[0x242636844](v37, -1, -1);
      MEMORY[0x242636844](v19, -1, -1);
    }
    else
    {
      sub_23D5DDA20(*(_QWORD *)(v0 + 280), *(_QWORD *)(v0 + 288));
      sub_23D5DDA20(v17, v18);
      sub_23D5DDA20(v16, v15);
      sub_23D5DDA20(v16, v15);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v34 = 384;
    *(_OWORD *)(v34 + 8) = xmmword_23D66DFE0;
    *(_QWORD *)(v34 + 24) = 0x800000023D676FF0;
    *(_QWORD *)(v34 + 32) = 0xD000000000000052;
    *(_QWORD *)(v34 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  else
  {
    v26 = v2;
    v27 = v3;
    v28 = *(_QWORD *)(v0 + 320);
    v30 = *(_QWORD *)(v0 + 288);
    v29 = *(_QWORD *)(v0 + 296);
    v31 = *(_QWORD *)(v0 + 280);
    *(_QWORD *)(v0 + 120) = v31;
    *(_QWORD *)(v0 + 128) = v30;
    *(_QWORD *)(v0 + 88) = v29;
    v36 = *(_OWORD *)(v0 + 304);
    *(_OWORD *)(v0 + 96) = v36;
    *(_QWORD *)(v0 + 112) = v28;
    sub_23D5E7F2C(v2, v3, v4);
    sub_23D5E7F2C(v26, v27, v5);
    sub_23D5AFA60(v31, v30);
    sub_23D5AFA60(v29, v36);
    *(_QWORD *)&v36 = (char *)&dword_256C79160 + dword_256C79160;
    swift_bridgeObjectRetain();
    v32 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 352) = v32;
    *v32 = v0;
    v32[1] = sub_23D5BC69C;
    return ((uint64_t (*)(_OWORD *, int, __int128 *, _QWORD *, uint64_t, uint64_t))v36)((_OWORD *)(v0 + 120), v26, (__int128 *)(v0 + 88), (_QWORD *)(v0 + 104), v27, v5);
  }
}

uint64_t sub_23D5BC69C(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;

  v3 = *v2;
  *(_QWORD *)(v3 + 360) = a1;
  *(_QWORD *)(v3 + 368) = v1;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23D5BC708()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  uint8_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91[2];
  uint64_t v92[2];
  uint64_t v93[2];
  uint64_t v94[4];

  v1 = *(_QWORD *)(v0 + 256);
  v2 = *(_QWORD *)(v0 + 264);
  v3 = *(_QWORD *)(v0 + 248);
  v4 = *(_QWORD *)(v0 + 360) + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  swift_beginAccess();
  sub_23D5AEF48(v4, v3, &qword_256C79128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1, v1) == 1)
  {
    sub_23D5AEF8C(*(_QWORD *)(v0 + 248), &qword_256C79128);
    if (qword_256C78B10 != -1)
      swift_once();
    v5 = sub_23D66BFDC();
    __swift_project_value_buffer(v5, (uint64_t)qword_256C88B78);
    v6 = sub_23D66C588();
    v7 = sub_23D66BFC4();
    if (os_log_type_enabled(v7, v6))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23D5A8000, v7, v6, "missing transition state", v8, 2u);
      MEMORY[0x242636844](v8, -1, -1);
    }
    v10 = *(_QWORD *)(v0 + 336);
    v9 = *(_QWORD *)(v0 + 344);
    v11 = *(_QWORD *)(v0 + 328);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v12 = 346;
    *(_OWORD *)(v12 + 8) = xmmword_23D66E000;
    *(_QWORD *)(v12 + 24) = 0x800000023D676FF0;
    *(_QWORD *)(v12 + 32) = 0xD000000000000052;
    *(_QWORD *)(v12 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    swift_release();
    sub_23D5E7F48(v11, v10, v9);
    sub_23D5E7F48(v11, v10, v9);
    goto LABEL_21;
  }
  v13 = *(_QWORD **)(v0 + 360);
  sub_23D5E7F64(*(_QWORD *)(v0 + 248), *(_QWORD *)(v0 + 272), type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  v15 = v13[5];
  v14 = v13[6];
  swift_beginAccess();
  v16 = v13[7];
  if (*(_QWORD *)(v16 + 16))
  {
    swift_retain();
    sub_23D5AFA60(v15, v14);
    swift_bridgeObjectRetain();
    v17 = sub_23D5DF394(v15, v14);
    v18 = *(_QWORD *)(v0 + 240);
    if ((v19 & 1) != 0)
    {
      v20 = v17;
      v21 = *(_QWORD *)(v16 + 56);
      v22 = type metadata accessor for GroupMembership.MemberProperties(0);
      v23 = *(_QWORD *)(v22 - 8);
      sub_23D5E7298(v21 + *(_QWORD *)(v23 + 72) * v20, v18, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v23 + 56))(v18, 0, 1, v22);
    }
    else
    {
      v22 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v18, 1, 1, v22);
    }
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v15, v14);
  }
  else
  {
    v24 = *(_QWORD *)(v0 + 240);
    v22 = type metadata accessor for GroupMembership.MemberProperties(0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 56))(v24, 1, 1, v22);
    swift_retain();
  }
  v25 = *(_QWORD *)(v0 + 240);
  type metadata accessor for GroupMembership.MemberProperties(0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 48))(v25, 1, v22))
  {
    swift_release();
    v26 = &qword_256C79178;
LABEL_15:
    sub_23D5AEF8C(v25, v26);
LABEL_16:
    if (qword_256C78B10 != -1)
      swift_once();
    v27 = sub_23D66BFDC();
    __swift_project_value_buffer(v27, (uint64_t)qword_256C88B78);
    v28 = sub_23D66C588();
    v29 = sub_23D66BFC4();
    if (os_log_type_enabled(v29, v28))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23D5A8000, v29, v28, "missing member key information", v30, 2u);
      MEMORY[0x242636844](v30, -1, -1);
    }
    v32 = *(_QWORD *)(v0 + 336);
    v31 = *(_QWORD *)(v0 + 344);
    v33 = *(_QWORD *)(v0 + 328);
    v34 = *(_QWORD *)(v0 + 272);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v35 = 345;
    *(_OWORD *)(v35 + 8) = xmmword_23D66DFF0;
    *(_QWORD *)(v35 + 24) = 0x800000023D676FF0;
    *(_QWORD *)(v35 + 32) = 0xD000000000000052;
    *(_QWORD *)(v35 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    swift_release();
    sub_23D5E7F48(v33, v32, v31);
    sub_23D5E7F48(v33, v32, v31);
    sub_23D5E6950(v34, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    goto LABEL_21;
  }
  v38 = *(_QWORD *)(v25 + 8);
  v37 = *(_QWORD *)(v25 + 16);
  sub_23D5E7284(v38, v37);
  sub_23D5AEF8C(v25, &qword_256C79178);
  if (v37 >> 60 == 15)
  {
    swift_release();
    goto LABEL_16;
  }
  v90 = v38;
  v39 = *(_QWORD *)(v0 + 216);
  v40 = *(_QWORD *)(v0 + 224);
  v41 = *(_QWORD *)(v0 + 208);
  v43 = *(_QWORD *)(v0 + 184);
  v42 = *(_QWORD *)(v0 + 192);
  v44 = *(_QWORD *)(v0 + 360) + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  sub_23D5E7298(v44, v41, type metadata accessor for UserKeyingInfo);
  sub_23D5AEF48(v41 + *(int *)(v42 + 44), v43, &qword_256C79120);
  sub_23D5E6950(v41, type metadata accessor for UserKeyingInfo);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v40 + 48))(v43, 1, v39) == 1)
  {
    v25 = *(_QWORD *)(v0 + 184);
    sub_23D5E725C(v90, v37);
    swift_release();
    v26 = &qword_256C79120;
    goto LABEL_15;
  }
  v46 = *(_QWORD *)(v0 + 192);
  v45 = *(_QWORD *)(v0 + 200);
  v47 = *(_QWORD *)(v0 + 160);
  v48 = *(_QWORD *)(v0 + 168);
  v49 = *(_QWORD *)(v0 + 152);
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 32))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 184), *(_QWORD *)(v0 + 216));
  sub_23D5E7298(v44, v45, type metadata accessor for UserKeyingInfo);
  sub_23D5AEF48(v45 + *(int *)(v46 + 40), v49, &qword_256C79170);
  sub_23D5E6950(v45, type metadata accessor for UserKeyingInfo);
  v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v48 + 48))(v49, 1, v47);
  v51 = *(_QWORD *)(v0 + 360);
  if (v50 == 1)
  {
    v25 = *(_QWORD *)(v0 + 152);
    (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)(v0 + 224) + 8))(*(_QWORD *)(v0 + 232), *(_QWORD *)(v0 + 216));
    sub_23D5E725C(v90, v37);
    swift_release();
    v26 = &qword_256C79170;
    goto LABEL_15;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)(v0 + 168) + 32))(*(_QWORD *)(v0 + 176), *(_QWORD *)(v0 + 152), *(_QWORD *)(v0 + 160));
  v52 = *(_QWORD *)(v51 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v52 >> 60 == 15)
  {
    v54 = *(_QWORD *)(v0 + 224);
    v53 = *(_QWORD *)(v0 + 232);
    v55 = *(_QWORD *)(v0 + 216);
    v57 = *(_QWORD *)(v0 + 168);
    v56 = *(_QWORD *)(v0 + 176);
    v58 = *(_QWORD *)(v0 + 160);
    sub_23D5E725C(v90, v37);
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v56, v58);
    (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
    goto LABEL_16;
  }
  v59 = *(_QWORD *)(v51 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  v60 = *(_QWORD *)(v0 + 360);
  v87 = *(_QWORD *)(v0 + 368);
  v82 = *(_QWORD *)(v0 + 232);
  v84 = *(_QWORD *)(v0 + 272);
  v80 = *(_QWORD *)(v0 + 176);
  type metadata accessor for Group(0);
  v61 = *(_QWORD *)(v60 + 24);
  v91[0] = *(_QWORD *)(v60 + 16);
  v91[1] = v61;
  v63 = v13[5];
  v62 = v13[6];
  sub_23D5E7284(v59, v52);
  v86 = v91[0];
  sub_23D5AFA60(v91[0], v61);
  sub_23D5AFA60(v63, v62);
  swift_release();
  v92[0] = v63;
  v92[1] = v62;
  v93[0] = v90;
  v93[1] = v37;
  v89 = v59;
  v94[0] = v59;
  v94[1] = v52;
  v64 = sub_23D5BD25C(v91, v92, v82, v80, v93, v94, 0, v84);
  v65 = v87;
  v66 = *(_QWORD *)(v0 + 328);
  v83 = *(_QWORD *)(v0 + 336);
  v85 = *(_QWORD *)(v0 + 344);
  v88 = *(_QWORD *)(v0 + 272);
  if (v65)
  {
    v79 = *(_QWORD *)(v0 + 216);
    v81 = *(_QWORD *)(v0 + 232);
    v77 = *(_QWORD *)(v0 + 176);
    v78 = *(_QWORD *)(v0 + 224);
    v75 = *(_QWORD *)(v0 + 168);
    v76 = *(_QWORD *)(v0 + 160);
    swift_release();
    sub_23D5E7F48(v66, v83, v85);
    sub_23D5E7F48(v66, v83, v85);
    sub_23D5DDA20(v63, v62);
    sub_23D5DDA20(v86, v61);
    (*(void (**)(uint64_t, uint64_t))(v75 + 8))(v77, v76);
    (*(void (**)(uint64_t, uint64_t))(v78 + 8))(v81, v79);
    sub_23D5E6950(v88, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    sub_23D5E725C(v89, v52);
    sub_23D5E725C(v90, v37);
LABEL_21:
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    swift_task_dealloc();
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v67 = *(_QWORD *)(v0 + 232);
  v73 = *(_QWORD *)(v0 + 224);
  v74 = *(_QWORD *)(v0 + 216);
  v70 = *(_QWORD *)(v0 + 168);
  v71 = *(_QWORD *)(v0 + 160);
  v72 = *(_QWORD *)(v0 + 176);
  swift_release();
  sub_23D5DDA20(v63, v62);
  sub_23D5DDA20(v86, v61);
  *(_BYTE *)(v64 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 6;
  v68 = *(_QWORD *)(v64 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
  v69 = *(_QWORD *)(v64 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
  *(_OWORD *)(v64 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_23D66DF30;
  swift_retain();
  sub_23D5E725C(v68, v69);
  sub_23D5E725C(v90, v37);
  sub_23D5E725C(v89, v52);
  sub_23D5E7F48(v66, v83, v85);
  sub_23D5E7F48(v66, v83, v85);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v72, v71);
  (*(void (**)(uint64_t, uint64_t))(v73 + 8))(v67, v74);
  sub_23D5E6950(v88, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v64);
}

uint64_t sub_23D5BD18C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;

  v1 = *(_QWORD *)(v0 + 336);
  v2 = *(_QWORD *)(v0 + 344);
  v3 = *(_QWORD *)(v0 + 328);
  sub_23D5E7F48(v3, v1, v2);
  sub_23D5E7F48(v3, v1, v2);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D5BD25C(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, uint64_t *a5, uint64_t *a6, _QWORD *a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t inited;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t (*v91)(uint64_t, uint64_t, uint64_t);
  uint64_t v92;
  int v93;
  int64_t v94;
  uint64_t v95;
  uint64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  os_log_type_t v114;
  NSObject *v115;
  os_log_type_t v116;
  _BOOL4 v117;
  uint64_t v118;
  uint8_t *v119;
  uint64_t v120;
  __int128 v121;
  uint64_t v122;
  unint64_t v124;
  __int128 *v125;
  uint64_t (*v126)(uint64_t);
  uint64_t v127;
  uint64_t *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unint64_t v136;
  unsigned int (*v137)(_QWORD, _QWORD, _QWORD);
  char v138;
  char v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  os_log_type_t v148;
  NSObject *v149;
  os_log_type_t v150;
  uint8_t *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  unint64_t v156;
  uint64_t v157;
  os_log_type_t v158;
  NSObject *v159;
  os_log_type_t v160;
  uint8_t *v161;
  uint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  os_log_type_t v168;
  NSObject *v169;
  os_log_type_t v170;
  _BOOL4 v171;
  uint8_t *v172;
  unint64_t v173;
  unint64_t v174;
  uint64_t v175;
  unint64_t v176;
  char isUniquelyReferenced_nonNull_native;
  _QWORD *v178;
  unint64_t v179;
  unint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unint64_t v187;
  uint64_t v188;
  uint64_t v189;
  void (*v190)(uint64_t, uint64_t);
  uint64_t v191;
  char *v192;
  char *v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int (*v198)(uint64_t, uint64_t, uint64_t);
  _OWORD *v199;
  uint64_t v200;
  uint64_t v201;
  unint64_t v202;
  char v203;
  char *v204;
  char *v205;
  uint64_t v206;
  unint64_t v207;
  unint64_t v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  unint64_t v213;
  char v214;
  char v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  char v219;
  uint64_t v220;
  uint64_t v221;
  os_log_type_t v222;
  NSObject *v223;
  os_log_type_t v224;
  uint8_t *v225;
  uint64_t v226;
  __int128 v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  os_log_type_t v232;
  NSObject *v233;
  os_log_type_t v234;
  uint8_t *v235;
  char *v236;
  unint64_t v237;
  uint64_t v238;
  unint64_t v239;
  uint64_t v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  char *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t *v247;
  uint64_t v248;
  _OWORD *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  uint64_t v257;
  unint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  unint64_t v263;
  unint64_t v264;
  unsigned int (*v265)(_QWORD, _QWORD, _QWORD);
  uint64_t v266;
  uint64_t v267;
  unint64_t v268;
  unint64_t v269;
  unint64_t v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  _QWORD *v274;
  uint64_t v275;
  unint64_t v276;
  unint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  char *v281;
  char *v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  char *v290;
  _OWORD *v291;
  uint64_t *v292;
  char *v293;
  uint64_t v294;
  uint64_t v295;
  char *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  uint64_t v303;
  char *v304;
  char *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  char *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  __int128 *v331;
  uint64_t v332;
  char *v333;
  uint64_t v334;
  uint64_t v335;
  unsigned int (*v336)(uint64_t, uint64_t, uint64_t);
  __int128 *v337;
  uint64_t v338;
  uint64_t v339;
  _QWORD *v340;
  uint64_t *v341;
  uint64_t v342;
  uint64_t *v343;
  unint64_t v344;
  uint64_t v345;
  uint64_t *v346;
  uint64_t v347;
  uint64_t v348;
  unsigned int (*v349)(_QWORD, _QWORD, _QWORD);
  __int128 *v350;
  unint64_t v351;
  uint64_t v352;
  __int128 v353;
  __int128 *v354;
  char v355;
  uint64_t v356;
  unint64_t v357;
  __int128 *v358;
  unint64_t v359;
  __int128 v360;
  ValueMetadata *v361;
  unint64_t v362;
  uint64_t v363;

  v340 = a7;
  v351 = a4;
  v283 = a3;
  v363 = *MEMORY[0x24BDAC8D0];
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
  MEMORY[0x24BDAC7A8](v13);
  v288 = (uint64_t)&v271 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v327 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v326 = *(_QWORD *)(v327 - 8);
  MEMORY[0x24BDAC7A8](v327);
  v292 = (uint64_t *)((char *)&v271 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v16);
  v301 = (uint64_t)&v271 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v294 = type metadata accessor for GroupMembership.MemberProperties(0);
  v295 = *(_QWORD *)(v294 - 8);
  MEMORY[0x24BDAC7A8](v294);
  v293 = (char *)&v271 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v298 = sub_23D66C330();
  v297 = *(_QWORD *)(v298 - 8);
  MEMORY[0x24BDAC7A8](v298);
  v296 = (char *)&v271 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v300 = sub_23D66C2AC();
  v299 = *(_QWORD *)(v300 - 8);
  v20 = MEMORY[0x24BDAC7A8](v300);
  v282 = (char *)&v271 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v304 = (char *)&v271 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  v24 = MEMORY[0x24BDAC7A8](v23);
  v287 = (uint64_t)&v271 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v303 = (uint64_t)&v271 - v27;
  MEMORY[0x24BDAC7A8](v26);
  v311 = (uint64_t)&v271 - v28;
  v309 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v308 = *(_QWORD *)(v309 - 8);
  v29 = MEMORY[0x24BDAC7A8](v309);
  v291 = (_OWORD *)((char *)&v271 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v31 = MEMORY[0x24BDAC7A8](v29);
  v302 = (uint64_t *)((char *)&v271 - v32);
  MEMORY[0x24BDAC7A8](v31);
  v310 = (uint64_t)&v271 - v33;
  v307 = sub_23D66C210();
  v306 = *(_QWORD *)(v307 - 8);
  MEMORY[0x24BDAC7A8](v307);
  v305 = (char *)&v271 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0);
  v314 = sub_23D66C054();
  v313 = *(_QWORD *)(v314 - 8);
  MEMORY[0x24BDAC7A8](v314);
  v315 = (uint64_t)&v271 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  v316 = sub_23D66C258();
  v334 = *(_QWORD *)(v316 - 8);
  v36 = MEMORY[0x24BDAC7A8](v316);
  v281 = (char *)&v271 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = MEMORY[0x24BDAC7A8](v36);
  v312 = (char *)&v271 - v39;
  MEMORY[0x24BDAC7A8](v38);
  v317 = (uint64_t)&v271 - v40;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  v42 = MEMORY[0x24BDAC7A8](v41);
  v286 = (uint64_t)&v271 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v42);
  v318 = (uint64_t)&v271 - v44;
  v319 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v332 = *(_QWORD *)(v319 - 8);
  v45 = MEMORY[0x24BDAC7A8](v319);
  v285 = (uint64_t)&v271 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v45);
  v333 = (char *)&v271 - v47;
  v348 = type metadata accessor for UserKeyingInfo(0);
  v347 = *(_QWORD *)(v348 - 8);
  v48 = MEMORY[0x24BDAC7A8](v348);
  v279 = (uint64_t)&v271 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = MEMORY[0x24BDAC7A8](v48);
  v289 = (uint64_t *)((char *)&v271 - v51);
  MEMORY[0x24BDAC7A8](v50);
  v346 = (uint64_t *)((char *)&v271 - v52);
  v53 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  v54 = MEMORY[0x24BDAC7A8](v53);
  v344 = (unint64_t)&v271 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v54);
  v345 = (uint64_t)&v271 - v56;
  v57 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
  MEMORY[0x24BDAC7A8](v57);
  v323 = (uint64_t)&v271 - ((v58 + 15) & 0xFFFFFFFFFFFFFFF0);
  v329 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v322 = *(_QWORD *)(v329 - 8);
  MEMORY[0x24BDAC7A8](v329);
  v324 = (uint64_t *)((char *)&v271 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0));
  v60 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  v328 = *(_QWORD *)(v60 - 8);
  MEMORY[0x24BDAC7A8](v60);
  v62 = (uint64_t *)((char *)&v271 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0));
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
  v64 = MEMORY[0x24BDAC7A8](v63);
  v284 = (uint64_t)&v271 - ((v65 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v64);
  v337 = (__int128 *)((char *)&v271 - v66);
  v338 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v336 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v338 - 8);
  v67 = MEMORY[0x24BDAC7A8](v338);
  v290 = (char *)&v271 - ((v68 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v67);
  v341 = (uint64_t *)((char *)&v271 - v69);
  v339 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  MEMORY[0x24BDAC7A8](v339);
  v343 = (uint64_t *)((char *)&v271 - ((v70 + 15) & 0xFFFFFFFFFFFFFFF0));
  v71 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  MEMORY[0x24BDAC7A8](v71);
  v342 = (uint64_t)&v271 - ((v72 + 15) & 0xFFFFFFFFFFFFFFF0);
  v335 = type metadata accessor for Group.GroupCiphertextContents(0);
  MEMORY[0x24BDAC7A8](v335);
  v352 = (uint64_t)&v271 - ((v73 + 15) & 0xFFFFFFFFFFFFFFF0);
  v325 = type metadata accessor for GKCrypto_GroupBlob(0);
  MEMORY[0x24BDAC7A8](v325);
  v75 = *a1;
  v76 = a1[1];
  v331 = (__int128 *)*a2;
  v330 = a2[1];
  v77 = a5[1];
  v350 = (__int128 *)*a5;
  v78 = (uint64_t *)((char *)&v271 - ((v74 + 15) & 0xFFFFFFFFFFFFFFF0));
  v278 = *a6;
  v277 = a6[1];
  v79 = a8;
  v80 = swift_bridgeObjectRetain();
  v349 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))sub_23D65558C(v80);
  v81 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  v275 = a8 + *(int *)(v81 + 20);
  sub_23D5E7298(v275, (uint64_t)v78, type metadata accessor for GKCrypto_GroupBlob);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  *(_QWORD *)(inited + 32) = v75;
  *(_QWORD *)(inited + 40) = v76;
  v83 = *(int *)(v81 + 24);
  v320 = v79;
  LODWORD(v360) = bswap32(*(_DWORD *)(v79 + v83));
  v280 = v75;
  sub_23D5AFA60(v75, v76);
  v84 = v351;
  v85 = v352;
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v360, (uint64_t)&v360 + 4);
  *(_QWORD *)(inited + 56) = v86;
  *(_QWORD *)&v360 = v350;
  *((_QWORD *)&v360 + 1) = v77;
  v276 = v77;
  v87 = v353;
  sub_23D5D0D30(v78, v84, &v360, (_QWORD *)inited, v85);
  *(_QWORD *)&v353 = v87;
  if (v87)
  {
    sub_23D5E6950((uint64_t)v78, type metadata accessor for GKCrypto_GroupBlob);
    swift_bridgeObjectRelease();
LABEL_3:
    swift_bridgeObjectRelease();
    return v75;
  }
  v274 = (_QWORD *)inited;
  v321 = v78;
  v273 = v83;
  v272 = v76;
  v88 = v342;
  sub_23D5E7298(v85, v342, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  v89 = v343;
  sub_23D5E7298(v85 + *(int *)(v335 + 20), (uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
  v335 = (uint64_t)v89 + *(int *)(v339 + 28);
  v90 = (uint64_t)v337;
  sub_23D5AEF48(v335, (uint64_t)v337, &qword_256C799D8);
  v91 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v336 + 6);
  v92 = v338;
  v93 = v91(v90, 1, v338);
  v336 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v91;
  v94 = (int64_t)v341;
  if (v93 == 1)
  {
    *(_OWORD *)v341 = xmmword_23D66DF40;
    sub_23D66BE5C();
    (*(void (**)(int64_t, uint64_t, uint64_t, uint64_t))(v326 + 56))(v94 + *(int *)(v92 + 24), 1, 1, v327);
    sub_23D5AEF8C(v90, &qword_256C799D8);
  }
  else
  {
    sub_23D5E7F64(v90, (uint64_t)v341, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  }
  v95 = (uint64_t)v321;
  v96 = *v89;
  v97 = *(_QWORD *)(v96 + 16);
  v337 = (__int128 *)v96;
  if (v97)
  {
    v358 = (__int128 *)MEMORY[0x24BEE4AF8];
    swift_bridgeObjectRetain_n();
    sub_23D5DE38C(0, v97, 0);
    v98 = v96 + ((*(unsigned __int8 *)(v328 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80));
    v99 = *(_QWORD *)(v328 + 72);
    v100 = v353;
    while (1)
    {
      sub_23D5E7298(v98, (uint64_t)v62, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      v75 = *v62;
      v101 = v62[1];
      sub_23D5AFA60(*v62, v101);
      GroupKitUserID.init(_:)(v75, v101);
      if (v100)
        break;
      sub_23D5E6950((uint64_t)v62, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      v353 = v360;
      v102 = (uint64_t)v358;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23D5DE38C(0, *(_QWORD *)(v102 + 16) + 1, 1);
        v102 = (uint64_t)v358;
      }
      v104 = *(_QWORD *)(v102 + 16);
      v103 = *(_QWORD *)(v102 + 24);
      if (v104 >= v103 >> 1)
      {
        sub_23D5DE38C(v103 > 1, v104 + 1, 1);
        v102 = (uint64_t)v358;
      }
      *(_QWORD *)(v102 + 16) = v104 + 1;
      *(_OWORD *)(v102 + 16 * v104 + 32) = v353;
      v98 += v99;
      if (!--v97)
      {
        swift_bridgeObjectRelease();
        v95 = (uint64_t)v321;
        v88 = v342;
        v94 = (int64_t)v341;
        goto LABEL_19;
      }
    }
    sub_23D5E6950((uint64_t)v62, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    swift_release();
    swift_bridgeObjectRelease_n();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  v102 = MEMORY[0x24BEE4AF8];
  v100 = v353;
LABEL_19:
  v106 = (uint64_t)v333;
  v107 = sub_23D65F978(v102);
  swift_bridgeObjectRelease();
  v108 = sub_23D63D584((uint64_t)v331, v330, v107);
  v109 = v332;
  v110 = v329;
  if ((v108 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v113 = sub_23D66BFDC();
    __swift_project_value_buffer(v113, (uint64_t)qword_256C88B78);
    v114 = sub_23D66C588();
    v115 = sub_23D66BFC4();
    v116 = v114;
    v117 = os_log_type_enabled(v115, v114);
    v118 = v352;
    if (v117)
    {
      v119 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v119 = 0;
      _os_log_impl(&dword_23D5A8000, v115, v116, "user is not a member of the group", v119, 2u);
      MEMORY[0x242636844](v119, -1, -1);
    }

    v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v120 = 338;
    v121 = xmmword_23D66E010;
    goto LABEL_27;
  }
  *(_QWORD *)&v353 = v107;
  v111 = v323;
  sub_23D5AEF48(v95 + *(int *)(v325 + 32), v323, &qword_256C79740);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v322 + 48))(v111, 1, v110) == 1)
  {
    v112 = v324;
    *v324 = MEMORY[0x24BEE4AF8];
    sub_23D66BE5C();
    sub_23D5AEF8C(v111, &qword_256C79740);
  }
  else
  {
    v112 = v324;
    sub_23D5E7F64(v111, (uint64_t)v324, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  }
  v75 = *v112;
  swift_bridgeObjectRetain();
  sub_23D5E6950((uint64_t)v112, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_23D5D1930((uint64_t)v337, v75, (uint64_t *)&v360);
  if (v100)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23D5E6950(v94, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_23D5E6950(v88, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    v122 = v352;
    goto LABEL_31;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v337 = (__int128 *)v360;
  if (v340)
  {
    v124 = v340[2];
    sub_23D5F15D4();
    swift_bridgeObjectRetain();
    v125 = (__int128 *)sub_23D66C534();
    v94 = 0;
    v358 = v125;
    v126 = type metadata accessor for UserKeyingInfo;
    while (1)
    {
      v127 = v348;
      v128 = v346;
      v129 = v345;
      if (v94 == v124)
      {
        v130 = 1;
        v94 = v124;
        v131 = v347;
      }
      else
      {
        v131 = v347;
        if (v94 >= v124)
        {
          __break(1u);
          goto LABEL_72;
        }
        sub_23D5E7298((uint64_t)v340+ ((*(unsigned __int8 *)(v347 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v347 + 80))+ *(_QWORD *)(v347 + 72) * v94, v345, type metadata accessor for UserKeyingInfo);
        v130 = 0;
        ++v94;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v131 + 56))(v129, v130, 1, v127);
      v132 = v129;
      v133 = v344;
      sub_23D5F16C4(v132, v344, &qword_256C79990);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v131 + 48))(v133, 1, v127) == 1)
        break;
      sub_23D5E7F64(v133, (uint64_t)v128, type metadata accessor for UserKeyingInfo);
      v134 = (uint64_t)v128;
      v135 = *v128;
      v136 = *(_QWORD *)(v134 + 8);
      sub_23D5AFA60(v135, v136);
      sub_23D5E6950(v134, type metadata accessor for UserKeyingInfo);
      sub_23D65AF2C((uint64_t *)&v360, v135, v136);
      v125 = (__int128 *)sub_23D5DDA20(v360, *((unint64_t *)&v360 + 1));
    }
    swift_bridgeObjectRelease();
    v137 = v349;
    v138 = sub_23D656BA8((uint64_t)v349, (uint64_t)v358);
    swift_bridgeObjectRelease();
    if ((v138 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v143 = (uint64_t)v321;
      v144 = v352;
      v145 = v342;
      v146 = v341;
      if (qword_256C78B10 != -1)
        swift_once();
      v147 = sub_23D66BFDC();
      __swift_project_value_buffer(v147, (uint64_t)qword_256C88B78);
      v148 = sub_23D66C588();
      v149 = sub_23D66BFC4();
      v150 = v148;
      if (os_log_type_enabled(v149, v148))
      {
        v151 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v151 = 0;
        _os_log_impl(&dword_23D5A8000, v149, v150, "missing key info", v151, 2u);
        MEMORY[0x242636844](v151, -1, -1);
      }

      v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v152 = 339;
      *(_OWORD *)(v152 + 8) = xmmword_23D66E020;
      *(_QWORD *)(v152 + 24) = 0x800000023D678000;
      *(_QWORD *)(v152 + 32) = 0xD000000000000052;
      *(_QWORD *)(v152 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5E6950((uint64_t)v146, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
      sub_23D5E6950(v145, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
      sub_23D5E6950(v144, type metadata accessor for Group.GroupCiphertextContents);
      v105 = v143;
      goto LABEL_32;
    }
    v139 = sub_23D656BA8(v353, (uint64_t)v137);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v95 = (uint64_t)v321;
    v118 = v352;
    v88 = v342;
    v94 = (int64_t)v341;
    if ((v139 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v157 = sub_23D66BFDC();
      __swift_project_value_buffer(v157, (uint64_t)qword_256C88B78);
      v158 = sub_23D66C588();
      v159 = sub_23D66BFC4();
      v160 = v158;
      if (os_log_type_enabled(v159, v158))
      {
        v161 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v161 = 0;
        _os_log_impl(&dword_23D5A8000, v159, v160, "invalid member list between group decode and key verification", v161, 2u);
        MEMORY[0x242636844](v161, -1, -1);
      }

      v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v120 = 340;
      v121 = xmmword_23D66E030;
      goto LABEL_27;
    }
    *(_QWORD *)&v360 = v337;
    v140 = sub_23D5E80BC((uint64_t *)&v360, v340);
    v141 = (uint64_t)v343;
    v106 = (uint64_t)v333;
    v109 = v332;
    if ((v140 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v167 = sub_23D66BFDC();
      __swift_project_value_buffer(v167, (uint64_t)qword_256C88B78);
      v168 = sub_23D66C588();
      v169 = sub_23D66BFC4();
      v170 = v168;
      v171 = os_log_type_enabled(v169, v168);
      v118 = v352;
      if (v171)
      {
        v172 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v172 = 0;
        _os_log_impl(&dword_23D5A8000, v169, v170, "supplied user keying info does not match embedded user keying info", v172, 2u);
        MEMORY[0x242636844](v172, -1, -1);
      }

      v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v120 = 342;
      v121 = xmmword_23D66E040;
LABEL_27:
      *(_OWORD *)(v120 + 8) = v121;
      *(_QWORD *)(v120 + 24) = 0x800000023D678000;
      *(_QWORD *)(v120 + 32) = 0xD000000000000052;
      *(_QWORD *)(v120 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5E6950(v94, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
      sub_23D5E6950(v88, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
      v122 = v118;
LABEL_31:
      sub_23D5E6950(v122, type metadata accessor for Group.GroupCiphertextContents);
      v105 = v95;
      goto LABEL_32;
    }
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v141 = (uint64_t)v343;
  }
  v348 = v141 + *(int *)(v339 + 24);
  v142 = v318;
  sub_23D5AEF48(v348, v318, &qword_256C799D0);
  v349 = *(unsigned int (**)(_QWORD, _QWORD, _QWORD))(v109 + 48);
  if (v349(v142, 1, v319) == 1)
  {
    *(_DWORD *)v106 = 0;
    *(_OWORD *)(v106 + 8) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v142, &qword_256C799D0);
  }
  else
  {
    sub_23D5E7F64(v142, v106, type metadata accessor for GKCrypto_VersionedSeed);
  }
  v153 = *(unsigned int *)(v320 + v273);
  *(_QWORD *)&v360 = v337;
  v154 = sub_23D5E9040();
  v156 = v155;
  v162 = sub_23D5E9A78(v106, v153);
  v164 = v163;
  sub_23D5E6950(v106, type metadata accessor for GKCrypto_VersionedSeed);
  sub_23D5DDA20(v154, v156);
  v165 = *(_QWORD *)v94;
  v166 = *(_QWORD *)(v94 + 8);
  sub_23D5AFA60(*(_QWORD *)v94, v166);
  GroupKitUserID.init(_:)(v165, v166);
  v347 = v162;
  v124 = *((_QWORD *)&v360 + 1);
  v131 = v360;
  v358 = v337;
  sub_23D5E9D7C((uint64_t *)&v360, (uint64_t *)&v358, v88);
  v361 = &type metadata for MemberSeed;
  v173 = sub_23D5ED1F8();
  v174 = v164;
  v126 = (uint64_t (*)(uint64_t))v173;
  v362 = v173;
  *(_QWORD *)&v360 = v347;
  *((_QWORD *)&v360 + 1) = v174;
  v346 = (uint64_t *)v174;
  sub_23D5AFA60(v347, v174);
  if (qword_256C78D38 != -1)
    swift_once();
  sub_23D61D638((uint64_t)&v360, 1, qword_256C89120, *(uint64_t *)algn_256C89128);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
  v361 = &type metadata for MemberSeed;
  v362 = (unint64_t)v126;
  *(_QWORD *)&v360 = v347;
  *((_QWORD *)&v360 + 1) = v346;
  sub_23D5AFA60(v347, (unint64_t)v346);
  if (qword_256C78D28 != -1)
    swift_once();
  sub_23D61D4A8(&v360, 1, v315);
  v125 = &v360;
LABEL_72:
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v125);
  *(_QWORD *)&v360 = v337;
  if (qword_256C78B48 != -1)
    swift_once();
  v175 = qword_256C88BF0;
  v176 = *(_QWORD *)algn_256C88BF8;
  sub_23D5AFA60(qword_256C88BF0, *(unint64_t *)algn_256C88BF8);
  sub_23D5AFA60(v175, v176);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v345 = v131;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    v274 = sub_23D62B638(0, v274[2] + 1, 1, v274);
  v178 = v274;
  v180 = v274[2];
  v179 = v274[3];
  *(_QWORD *)&v353 = 0;
  if (v180 >= v179 >> 1)
    v178 = sub_23D62B638((_QWORD *)(v179 > 1), v180 + 1, 1, v274);
  v178[2] = v180 + 1;
  v181 = &v178[2 * v180];
  v181[4] = v175;
  v181[5] = v176;
  v182 = (uint64_t)v178;
  sub_23D5DDA20(v175, v176);
  v75 = sub_23D62FE18(v182);
  v184 = v183;
  swift_bridgeObjectRelease();
  v185 = (uint64_t)v321;
  v186 = v321[1];
  v187 = v321[2];
  sub_23D5AFA60(v186, v187);
  v188 = v315;
  v189 = v353;
  sub_23D646874(v317, v315, (uint64_t *)&v360, v75, v184, v186, v187);
  *(_QWORD *)&v353 = v189;
  if (v189)
  {
    sub_23D5DDA20(v186, v187);
    sub_23D5DDA20(v75, v184);
    sub_23D5DDA20(v345, v124);
    sub_23D5DDA20(v347, (unint64_t)v346);
    (*(void (**)(uint64_t, uint64_t))(v313 + 8))(v188, v314);
    (*(void (**)(uint64_t, uint64_t))(v334 + 8))(v317, v316);
    sub_23D5E6950(v94, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_23D5E6950(v342, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    sub_23D5E6950(v352, type metadata accessor for Group.GroupCiphertextContents);
    sub_23D5E6950(v185, type metadata accessor for GKCrypto_GroupBlob);
    goto LABEL_3;
  }
  v344 = v124;
  sub_23D5DDA20(v186, v187);
  sub_23D5DDA20(v75, v184);
  (*(void (**)(uint64_t, uint64_t))(v313 + 8))(v188, v314);
  v190 = *(void (**)(uint64_t, uint64_t))(v334 + 8);
  v190(v317, v316);
  v361 = &type metadata for MemberSeed;
  v362 = (unint64_t)v126;
  *(_QWORD *)&v360 = v347;
  *((_QWORD *)&v360 + 1) = v346;
  sub_23D5AFA60(v347, (unint64_t)v346);
  if (qword_256C78D40 != -1)
    swift_once();
  v191 = v353;
  sub_23D61D638((uint64_t)&v360, 1, qword_256C89130, *(uint64_t *)algn_256C89138);
  if (v191)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
    sub_23D5DDA20(v345, v344);
    sub_23D5DDA20(v347, (unint64_t)v346);
    swift_bridgeObjectRelease();
    sub_23D5E6950((uint64_t)v341, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_23D5E6950(v342, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    sub_23D5E6950(v352, type metadata accessor for Group.GroupCiphertextContents);
    sub_23D5E6950((uint64_t)v321, type metadata accessor for GKCrypto_GroupBlob);
    return v75;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
  v192 = v305;
  v193 = v312;
  sub_23D66C228();
  v190((uint64_t)v193, v316);
  v194 = sub_23D66C1F8();
  v196 = v195;
  (*(void (**)(char *, uint64_t))(v306 + 8))(v192, v307);
  *(_QWORD *)&v353 = (char *)v321 + *(int *)(v325 + 36);
  v197 = v311;
  sub_23D5AEF48(v353, v311, &qword_256C79748);
  v198 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v308 + 48);
  if (v198(v197, 1, v309) == 1)
  {
    v199 = (_OWORD *)v310;
    *(_OWORD *)v310 = xmmword_23D66DF40;
    v199[1] = xmmword_23D66DF40;
    v199[2] = xmmword_23D66DF40;
    v199[3] = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v311, &qword_256C79748);
  }
  else
  {
    sub_23D5E7F64(v311, v310, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  v200 = v310;
  v201 = *(_QWORD *)(v310 + 32);
  v202 = *(_QWORD *)(v310 + 40);
  sub_23D5AFA60(v201, v202);
  sub_23D5E6950(v200, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_23D5E6578(v194, v196);
  LOBYTE(v200) = v203;
  sub_23D5DDA20(v194, v196);
  sub_23D5DDA20(v201, v202);
  if ((v200 & 1) == 0)
    goto LABEL_97;
  v361 = &type metadata for MemberSeed;
  v362 = (unint64_t)v126;
  *(_QWORD *)&v360 = v347;
  *((_QWORD *)&v360 + 1) = v346;
  sub_23D5AFA60(v347, (unint64_t)v346);
  if (qword_256C78D48 != -1)
    swift_once();
  sub_23D61D674((uint64_t)&v360, 1, qword_256C89140, *(uint64_t *)algn_256C89148);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v360);
  v204 = v296;
  v205 = v304;
  sub_23D66C264();
  (*(void (**)(char *, uint64_t))(v299 + 8))(v205, v300);
  v206 = sub_23D66C1F8();
  v208 = v207;
  (*(void (**)(char *, uint64_t))(v297 + 8))(v204, v298);
  v209 = v303;
  sub_23D5AEF48(v353, v303, &qword_256C79748);
  if (v198(v209, 1, v309) == 1)
  {
    v210 = v302;
    *(_OWORD *)v302 = xmmword_23D66DF40;
    *((_OWORD *)v210 + 1) = xmmword_23D66DF40;
    *((_OWORD *)v210 + 2) = xmmword_23D66DF40;
    *((_OWORD *)v210 + 3) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v303, &qword_256C79748);
  }
  else
  {
    sub_23D5E7F64(v303, (uint64_t)v302, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  v211 = v302;
  v212 = *v302;
  v213 = v302[1];
  sub_23D5AFA60(*v302, v213);
  sub_23D5E6950((uint64_t)v211, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_23D5E6578(v206, v208);
  v215 = v214;
  sub_23D5DDA20(v206, v208);
  sub_23D5DDA20(v212, v213);
  if ((v215 & 1) == 0)
  {
LABEL_97:
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v221 = sub_23D66BFDC();
    __swift_project_value_buffer(v221, (uint64_t)qword_256C88B78);
    v222 = sub_23D66C588();
    v223 = sub_23D66BFC4();
    v224 = v222;
    if (os_log_type_enabled(v223, v222))
    {
      v225 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v225 = 0;
      _os_log_impl(&dword_23D5A8000, v223, v224, "failed to construct member keys from member seed", v225, 2u);
      MEMORY[0x242636844](v225, -1, -1);
    }

    v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v226 = 354;
    v227 = xmmword_23D66E050;
    goto LABEL_102;
  }
  if (!*((_QWORD *)v337 + 2))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v295 + 56))(v301, 1, 1, v294);
LABEL_106:
    swift_bridgeObjectRelease();
    sub_23D5AEF8C(v301, &qword_256C79178);
    if (qword_256C78B10 != -1)
      swift_once();
    v231 = sub_23D66BFDC();
    __swift_project_value_buffer(v231, (uint64_t)qword_256C88B78);
    v232 = sub_23D66C588();
    v233 = sub_23D66BFC4();
    v234 = v232;
    if (os_log_type_enabled(v233, v232))
    {
      v235 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v235 = 0;
      _os_log_impl(&dword_23D5A8000, v233, v234, "user is not a member of the group", v235, 2u);
      MEMORY[0x242636844](v235, -1, -1);
    }

    v75 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v226 = 338;
    v227 = xmmword_23D66E060;
LABEL_102:
    *(_OWORD *)(v226 + 8) = v227;
    *(_QWORD *)(v226 + 24) = 0x800000023D678000;
    *(_QWORD *)(v226 + 32) = 0xD000000000000052;
    *(_QWORD *)(v226 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v345, v344);
    sub_23D5DDA20(v347, (unint64_t)v346);
LABEL_18:
    sub_23D5E6950((uint64_t)v341, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
    sub_23D5E6950(v342, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    sub_23D5E6950(v352, type metadata accessor for Group.GroupCiphertextContents);
    v105 = (uint64_t)v321;
LABEL_32:
    sub_23D5E6950(v105, type metadata accessor for GKCrypto_GroupBlob);
    return v75;
  }
  swift_bridgeObjectRetain();
  v216 = (uint64_t)v331;
  v217 = v330;
  sub_23D5AFA60((uint64_t)v331, v330);
  v218 = sub_23D5DF394(v216, v217);
  if ((v219 & 1) != 0)
  {
    sub_23D5E7298(*((_QWORD *)v337 + 7) + *(_QWORD *)(v295 + 72) * v218, v301, type metadata accessor for GroupMembership.MemberProperties);
    v220 = 0;
  }
  else
  {
    v220 = 1;
  }
  v228 = v295;
  v229 = v301;
  v230 = v294;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v295 + 56))(v301, v220, 1, v294);
  swift_bridgeObjectRelease();
  sub_23D5DDA20((uint64_t)v331, v330);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v228 + 48))(v229, 1, v230) == 1)
    goto LABEL_106;
  v236 = v293;
  sub_23D5E7F64(v301, (uint64_t)v293, type metadata accessor for GroupMembership.MemberProperties);
  if ((*v236 & 1) != 0)
  {
    v350 = 0;
    *(_QWORD *)&v353 = 0;
    v237 = 0;
    v349 = (unsigned int (*)(_QWORD, _QWORD, _QWORD))0xF000000000000000;
  }
  else
  {
    *(_QWORD *)&v360 = v280;
    *((_QWORD *)&v360 + 1) = v272;
    v242 = *(_DWORD *)(v320 + v273);
    v243 = v284;
    sub_23D5AEF48(v335, v284, &qword_256C799D8);
    if (v336(v243, 1, v338) == 1)
    {
      v244 = v290;
      *(_OWORD *)v290 = xmmword_23D66DF40;
      v245 = v338;
      sub_23D66BE5C();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v326 + 56))(&v244[*(int *)(v245 + 24)], 1, 1, v327);
      sub_23D5AEF8C(v284, &qword_256C799D8);
    }
    else
    {
      sub_23D5E7F64(v284, (uint64_t)v290, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    }
    v246 = v288;
    sub_23D5AEF48((uint64_t)&v290[*(int *)(v338 + 24)], v288, &qword_256C799F0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v326 + 48))(v246, 1, v327) == 1)
    {
      v247 = v292;
      *(_OWORD *)v292 = xmmword_23D66DF40;
      *((_OWORD *)v247 + 1) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v288, &qword_256C799F0);
    }
    else
    {
      sub_23D5E7F64(v288, (uint64_t)v292, type metadata accessor for GKCrypto_AdminGroupBlob);
    }
    sub_23D5E6950((uint64_t)v290, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    v248 = v287;
    sub_23D5AEF48(v353, v287, &qword_256C79748);
    if (v198(v248, 1, v309) == 1)
    {
      v249 = v291;
      *v291 = xmmword_23D66DF40;
      v249[1] = xmmword_23D66DF40;
      v249[2] = xmmword_23D66DF40;
      v249[3] = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v287, &qword_256C79748);
    }
    else
    {
      sub_23D5E7F64(v287, (uint64_t)v291, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
    }
    v358 = v350;
    v359 = v276;
    v356 = v345;
    v357 = v344;
    v354 = v337;
    v250 = v286;
    sub_23D5AEF48(v348, v286, &qword_256C799D0);
    if (v349(v250, 1, v319) == 1)
    {
      v251 = v285;
      *(_DWORD *)v285 = 0;
      *(_OWORD *)(v251 + 8) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v286, &qword_256C799D0);
    }
    else
    {
      sub_23D5E7F64(v286, v285, type metadata accessor for GKCrypto_VersionedSeed);
    }
    v252 = v285;
    v253 = *(_QWORD *)(v285 + 8);
    v254 = *(_QWORD *)(v285 + 16);
    sub_23D5AFA60(v253, v254);
    sub_23D5E6950(v252, type metadata accessor for GKCrypto_VersionedSeed);
    sub_23D61BF0C(v253, v254);
    v262 = v261;
    v264 = v263;
    v350 = (__int128 *)sub_23D5EA584((uint64_t *)&v360, v242, v292, (uint64_t)v291, v351, (uint64_t *)&v358, &v356, (uint64_t *)&v354, v261, v263);
    v349 = v265;
    *(_QWORD *)&v353 = v266;
    v237 = v270;
    sub_23D5DDA20(v262, v264);
    sub_23D5E6950((uint64_t)v291, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
    sub_23D5E6950((uint64_t)v292, type metadata accessor for GKCrypto_AdminGroupBlob);
  }
  v238 = (uint64_t)v331;
  v239 = v330;
  *(_QWORD *)&v360 = v331;
  *((_QWORD *)&v360 + 1) = v330;
  v240 = (uint64_t)v282;
  (*(void (**)(char *, uint64_t, uint64_t))(v299 + 16))(v282, v283, v300);
  v241 = (uint64_t)v281;
  (*(void (**)(char *, unint64_t, uint64_t))(v334 + 16))(v281, v351, v316);
  sub_23D5AFA60(v238, v239);
  sub_23D61EB88((uint64_t *)&v360, v240, v241, v289);
  v255 = v280;
  v256 = v272;
  *(_QWORD *)&v360 = v280;
  *((_QWORD *)&v360 + 1) = v272;
  LODWORD(v351) = *(_DWORD *)(v320 + v273);
  v355 = *v293;
  v257 = (uint64_t)v331;
  v258 = v330;
  v358 = v331;
  v359 = v330;
  sub_23D5E7298((uint64_t)v289, v279, type metadata accessor for UserKeyingInfo);
  v259 = v278;
  v260 = v277;
  v356 = v278;
  v357 = v277;
  v354 = v337;
  sub_23D5AFA60(v255, v256);
  sub_23D5AFA60(v257, v258);
  sub_23D5AFA60(v259, v260);
  sub_23D5AE928(&qword_256C79A80, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6726CC);
  v267 = sub_23D66BF1C();
  v269 = v268;
  type metadata accessor for Group(0);
  v75 = swift_allocObject();
  sub_23D5B471C((uint64_t *)&v360, v351, &v355, (uint64_t *)&v358, v279, &v356, (uint64_t *)&v354, v347, (unint64_t)v346, (uint64_t)v350, (unint64_t)v349, v353, v237, 5u, v267, v269);
  sub_23D5DDA20(v345, v344);
  sub_23D5E6950((uint64_t)v289, type metadata accessor for UserKeyingInfo);
  sub_23D5E6950((uint64_t)v293, type metadata accessor for GroupMembership.MemberProperties);
  sub_23D5E6950((uint64_t)v341, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_23D5E6950((uint64_t)v343, type metadata accessor for GKCrypto_GroupAETextToSign);
  sub_23D5E6950(v342, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  sub_23D5E6950(v352, type metadata accessor for Group.GroupCiphertextContents);
  sub_23D5E6950((uint64_t)v321, type metadata accessor for GKCrypto_GroupBlob);
  return v75;
}

void sub_23D5C03EC()
{
  sub_23D66C720();
  __break(1u);
}

uint64_t sub_23D5C0444(void (**a1)(uint64_t, uint64_t), uint64_t *a2, unint64_t *a3, unint64_t a4, uint64_t a5, void (*a6)(char *, uint64_t), void (*a7)(uint64_t *, uint64_t), unint64_t a8, unint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void (*a13)(uint64_t, uint64_t), unint64_t a14)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  unint64_t v57;
  uint64_t v58;
  void (*v59)(uint64_t, uint64_t);
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  _QWORD *v67;
  unint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  char v70;
  uint64_t v71;
  os_log_type_t v72;
  NSObject *v73;
  uint8_t *v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  os_log_type_t v80;
  NSObject *v81;
  uint8_t *v82;
  uint64_t v83;
  __int128 v84;
  uint64_t v85;
  os_log_type_t v86;
  NSObject *v87;
  uint8_t *v88;
  uint64_t v89;
  os_log_type_t v90;
  NSObject *v91;
  uint8_t *v92;
  uint64_t v93;
  os_log_type_t v94;
  NSObject *v95;
  uint8_t *v96;
  char v97;
  uint64_t v98;
  os_log_type_t v99;
  NSObject *v100;
  uint8_t *v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  void (*v105)(uint64_t, uint64_t);
  int v106;
  int v107;
  void (*v108)(uint64_t, uint64_t);
  uint64_t v110;
  unint64_t v111;
  void (*v112)(uint64_t, uint64_t);
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  void (*v116)(uint64_t, uint64_t);
  unint64_t v117;
  void (*v118)(uint64_t, uint64_t);
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  void (*v127)(uint64_t, uint64_t);
  void (*v128)(uint64_t, uint64_t);
  uint64_t v129;
  uint64_t v130;
  __int128 v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  void (*v135)(uint64_t, uint64_t);
  uint64_t *v136;
  uint64_t inited;
  uint64_t v138;
  unint64_t v139;
  int v140;
  uint64_t v141;
  __int128 v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  unint64_t v147;
  uint64_t v148;
  unint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unint64_t v152;
  unint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  void (*v161)(uint64_t, uint64_t);
  uint64_t v162;
  unint64_t v163;
  _QWORD *v164;
  unint64_t v165;
  unint64_t v166;
  _QWORD *v167;
  void (*v168)(uint64_t, uint64_t);
  unint64_t v169;
  unint64_t v170;
  void (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  __int128 v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  void (*v188)(uint64_t, uint64_t);
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  void (*v192)(uint64_t, uint64_t);
  uint64_t v193;
  unint64_t v194;
  _QWORD *v195;
  unint64_t v196;
  unint64_t v197;
  _QWORD *v198;
  void (*v199)(uint64_t, uint64_t);
  unint64_t v200;
  unint64_t v201;
  void (*v202)(uint64_t, uint64_t);
  uint64_t v203;
  unint64_t v204;
  char *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t *v212;
  uint64_t v213;
  uint64_t v214;
  void (*v215)(uint64_t, uint64_t);
  uint64_t v216;
  unint64_t v217;
  _QWORD *v218;
  unint64_t v219;
  unint64_t v220;
  _QWORD *v221;
  void (*v222)(uint64_t, uint64_t);
  unint64_t v223;
  unint64_t v224;
  void (*v225)(uint64_t, uint64_t);
  char *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t *v233;
  __int128 v234;
  void (*v235)(uint64_t, uint64_t);
  unint64_t v236;
  uint64_t v237;
  void (*v238)(uint64_t, uint64_t);
  unint64_t v239;
  uint64_t *v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  uint64_t v249;
  void (*v250)(uint64_t, uint64_t);
  void (*v251)(uint64_t, uint64_t);
  void (**v252)(uint64_t, uint64_t);
  uint64_t v253;
  uint64_t *v254;
  uint64_t *v255;
  uint64_t *v256;
  void (*v257)(uint64_t, uint64_t);
  unint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  unint64_t v265;
  uint64_t v266;
  uint64_t v267;
  _QWORD *v268;
  unint64_t v269;
  void (*v270)(uint64_t, uint64_t);
  char *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  char *v277;
  char *v278;
  uint64_t *v279;
  uint64_t v280;
  char *v281;
  uint64_t v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  void (**v288)(uint64_t, uint64_t);
  uint64_t *v289;
  void (*v290)(char *, uint64_t);
  void (*v291)(uint64_t *, uint64_t);
  unint64_t v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  __int128 v298;
  uint64_t v299;
  void (*v300)(uint64_t, uint64_t);
  uint64_t *v301;
  void (*v302)(uint64_t, uint64_t);
  void (*v303)(uint64_t, uint64_t);
  uint64_t v304;
  unint64_t v305;
  _QWORD *v306;
  unint64_t v307;
  void (*v308)(uint64_t, uint64_t);
  unint64_t v309;
  uint64_t v310;
  __int128 v311;
  void (*v312)(uint64_t, uint64_t);
  uint64_t v313;
  void (*v314[27])(uint64_t, uint64_t);
  void (*v315)(uint64_t, uint64_t);
  uint64_t *v316;
  ValueMetadata *v317;
  unint64_t v318;
  __int128 v319;
  void (*v320)(uint64_t, uint64_t);
  uint64_t v321;
  uint64_t v322;

  v307 = a4;
  v291 = a7;
  v292 = a8;
  v290 = a6;
  *(_QWORD *)&v311 = a5;
  v288 = a1;
  v309 = a14;
  v308 = a13;
  v322 = *MEMORY[0x24BDAC8D0];
  v16 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v285 = (uint64_t)&v262 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v280 = (uint64_t)&v262 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v275 = (uint64_t)&v262 - v21;
  v286 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v276 = *(_QWORD *)(v286 - 8);
  v22 = MEMORY[0x24BDAC7A8](v286);
  v284 = (uint64_t)&v262 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = MEMORY[0x24BDAC7A8](v22);
  v279 = (uint64_t *)((char *)&v262 - v25);
  MEMORY[0x24BDAC7A8](v24);
  v274 = (uint64_t)&v262 - v26;
  v287 = sub_23D66C2AC();
  v273 = *(_QWORD *)(v287 - 8);
  v27 = MEMORY[0x24BDAC7A8](v287);
  v283 = (char *)&v262 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = MEMORY[0x24BDAC7A8](v27);
  v278 = (char *)&v262 - v30;
  MEMORY[0x24BDAC7A8](v29);
  v293 = (uint64_t *)((char *)&v262 - v31);
  v282 = sub_23D66C2DC();
  v272 = *(_QWORD *)(v282 - 8);
  v32 = MEMORY[0x24BDAC7A8](v282);
  v281 = (char *)&v262 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v277 = (char *)&v262 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v271 = (char *)&v262 - v36;
  v294 = type metadata accessor for GKCrypto_GroupBlob(0);
  MEMORY[0x24BDAC7A8](v294);
  v295 = (uint64_t)&v262 - ((v37 + 15) & 0xFFFFFFFFFFFFFFF0);
  v38 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  MEMORY[0x24BDAC7A8](v38);
  v296 = (uint64_t)&v262 - ((v39 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_QWORD *)&v298 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v40 = MEMORY[0x24BDAC7A8](v298);
  v299 = (uint64_t)&v262 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v40);
  v297 = (uint64_t)&v262 - v42;
  v43 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  MEMORY[0x24BDAC7A8](v43);
  v300 = (void (*)(uint64_t, uint64_t))((char *)&v262 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = sub_23D66C084();
  MEMORY[0x24BDAC7A8](v45);
  v301 = (uint64_t *)((char *)&v262 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0));
  v47 = sub_23D66C054();
  v303 = *(void (**)(uint64_t, uint64_t))(v47 - 8);
  v304 = v47;
  v48 = MEMORY[0x24BDAC7A8](v47);
  v302 = (void (*)(uint64_t, uint64_t))((char *)&v262 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0));
  v310 = a12;
  v50 = *(_QWORD *)(a12 - 8);
  v51 = MEMORY[0x24BDAC7A8](v48);
  v53 = (char *)&v262 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  v54 = *(_QWORD *)(a11 - 8);
  MEMORY[0x24BDAC7A8](v51);
  v56 = (char *)&v262 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0);
  v57 = *a3;
  v289 = a2;
  v305 = v57;
  if (v57)
  {
    v58 = swift_bridgeObjectRetain();
    v59 = v312;
    v60 = sub_23D5B0E08(v58);
    v312 = v59;
    swift_bridgeObjectRelease();
  }
  else
  {
    v60 = MEMORY[0x24BEE4AF8];
  }
  v61 = sub_23D65F978(v60);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, unint64_t, uint64_t))(v54 + 16))(v56, v307, a11);
  sub_23D5F15D4();
  v62 = sub_23D66C540();
  (*(void (**)(char *, _QWORD, uint64_t))(v50 + 16))(v53, v311, v310);
  v63 = sub_23D66C540();
  v64 = swift_bridgeObjectRetain();
  v65 = sub_23D65558C(v64);
  if ((sub_23D5E0C44(v65, v62) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v79 = sub_23D66BFDC();
    __swift_project_value_buffer(v79, (uint64_t)qword_256C88B78);
    v80 = sub_23D66C588();
    v81 = sub_23D66BFC4();
    if (os_log_type_enabled(v81, v80))
    {
      v82 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v82 = 0;
      _os_log_impl(&dword_23D5A8000, v81, v80, "attempting to remove group member not in group", v82, 2u);
      MEMORY[0x242636844](v82, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v83 = 313;
    v84 = xmmword_23D66E070;
    goto LABEL_45;
  }
  if ((sub_23D5E0C44(v65, v63) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v85 = sub_23D66BFDC();
    __swift_project_value_buffer(v85, (uint64_t)qword_256C88B78);
    v86 = sub_23D66C588();
    v87 = sub_23D66BFC4();
    if (os_log_type_enabled(v87, v86))
    {
      v88 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v88 = 0;
      _os_log_impl(&dword_23D5A8000, v87, v86, "attempting to toggle role of non group member", v88, 2u);
      MEMORY[0x242636844](v88, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v83 = 314;
    v84 = xmmword_23D66E080;
    goto LABEL_45;
  }
  v66 = sub_23D5C2CB0(v61, v65);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v66 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v89 = sub_23D66BFDC();
    __swift_project_value_buffer(v89, (uint64_t)qword_256C88B78);
    v90 = sub_23D66C588();
    v91 = sub_23D66BFC4();
    if (os_log_type_enabled(v91, v90))
    {
      v92 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v92 = 0;
      _os_log_impl(&dword_23D5A8000, v91, v90, "attempting to add group member already in group", v92, 2u);
      MEMORY[0x242636844](v92, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v83 = 315;
    v84 = xmmword_23D66E090;
    goto LABEL_45;
  }
  if ((sub_23D5C2CB0(v62, v63) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v93 = sub_23D66BFDC();
    __swift_project_value_buffer(v93, (uint64_t)qword_256C88B78);
    v94 = sub_23D66C588();
    v95 = sub_23D66BFC4();
    if (os_log_type_enabled(v95, v94))
    {
      v96 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v96 = 0;
      _os_log_impl(&dword_23D5A8000, v95, v94, "attempting to simultaneously remove and toggle membership of user", v96, 2u);
      MEMORY[0x242636844](v96, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v83 = 317;
    v84 = xmmword_23D66E0A0;
    goto LABEL_45;
  }
  v67 = v306;
  v69 = (void (*)(uint64_t, uint64_t))v306[5];
  v68 = v306[6];
  sub_23D5AFA60((uint64_t)v69, v68);
  v70 = sub_23D63D584((uint64_t)v69, v68, v63);
  sub_23D5DDA20((uint64_t)v69, v68);
  if ((v70 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v71 = sub_23D66BFDC();
    __swift_project_value_buffer(v71, (uint64_t)qword_256C88B78);
    v72 = sub_23D66C588();
    swift_retain_n();
    v73 = sub_23D66BFC4();
    if (os_log_type_enabled(v73, v72))
    {
      v74 = (uint8_t *)swift_slowAlloc();
      v312 = (void (*)(uint64_t, uint64_t))swift_slowAlloc();
      v315 = v312;
      *(_DWORD *)v74 = 136315138;
      *(_QWORD *)&v311 = v74 + 4;
      sub_23D5AFA60((uint64_t)v69, v68);
      v75 = sub_23D66BD30();
      v77 = v76;
      sub_23D5DDA20((uint64_t)v69, v68);
      *(_QWORD *)&v319 = sub_23D5DDBDC(v75, v77, (uint64_t *)&v315);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23D5A8000, v73, v72, "attempting to demote self %s from admin role director", v74, 0xCu);
      v78 = v312;
      swift_arrayDestroy();
      MEMORY[0x242636844](v78, -1, -1);
      MEMORY[0x242636844](v74, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v83 = 318;
    v84 = xmmword_23D66E0C0;
LABEL_45:
    *(_OWORD *)(v83 + 8) = v84;
    *(_QWORD *)(v83 + 24) = 0x800000023D677D80;
    *(_QWORD *)(v83 + 32) = 0xD000000000000052;
    *(_QWORD *)(v83 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  sub_23D5AFA60((uint64_t)v69, v68);
  v97 = sub_23D63D584((uint64_t)v69, v68, v62);
  sub_23D5DDA20((uint64_t)v69, v68);
  if ((v97 & 1) != 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v98 = sub_23D66BFDC();
    __swift_project_value_buffer(v98, (uint64_t)qword_256C88B78);
    v99 = sub_23D66C588();
    swift_retain_n();
    v100 = sub_23D66BFC4();
    if (os_log_type_enabled(v100, v99))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      v312 = (void (*)(uint64_t, uint64_t))swift_slowAlloc();
      v315 = v312;
      *(_DWORD *)v101 = 136315138;
      *(_QWORD *)&v311 = v101 + 4;
      sub_23D5AFA60((uint64_t)v69, v68);
      v102 = sub_23D66BD30();
      v104 = v103;
      sub_23D5DDA20((uint64_t)v69, v68);
      *(_QWORD *)&v319 = sub_23D5DDBDC(v102, v104, (uint64_t *)&v315);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23D5A8000, v100, v99, "attempting to remove self %s from group director", v101, 0xCu);
      v105 = v312;
      swift_arrayDestroy();
      MEMORY[0x242636844](v105, -1, -1);
      MEMORY[0x242636844](v101, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v83 = 319;
    v84 = xmmword_23D66E0B0;
    goto LABEL_45;
  }
  swift_beginAccess();
  v106 = *((_DWORD *)v67 + 16);
  v107 = v106 + 1;
  if (v106 == -1)
  {
    __break(1u);
  }
  else
  {
    swift_beginAccess();
    v314[0] = *((void (**)(uint64_t, uint64_t))v67 + 7);
    swift_bridgeObjectRetain();
    v108 = v312;
    sub_23D5C3868(v62);
    if (v108)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    LODWORD(v312) = v107;
    swift_bridgeObjectRelease();
    v110 = sub_23D5B1530(v63, (uint64_t *)v314);
    swift_bridgeObjectRelease();
    sub_23D5C3B94(v110);
    v53 = 0;
    swift_bridgeObjectRelease();
    *(void (**)(uint64_t, uint64_t))&v319 = v314[0];
    v315 = v69;
    v316 = (uint64_t *)v68;
    GroupMembership.validMembershipRolesForGroup(memberID:)((uint64_t *)&v315);
    v111 = sub_23D5B4EE4(MEMORY[0x24BEE4AF8]);
    v112 = (void (*)(uint64_t, uint64_t))v305;
    if (v305)
    {
      swift_bridgeObjectRelease();
      v315 = v112;
      v113 = sub_23D5D658C((uint64_t *)&v315, (int)v312);
      v115 = v114;
      sub_23D5C40DC(v113);
      v53 = 0;
      v310 = v115;
      swift_bridgeObjectRelease();
    }
    else
    {
      v310 = v111;
    }
    sub_23D66C06C();
    v116 = v302;
    sub_23D66C048();
    sub_23D66C030();
    (*((void (**)(_QWORD, uint64_t))v303 + 1))(v116, v304);
    v118 = v315;
    v117 = (unint64_t)v316;
    v308 = v314[0];
    v315 = v314[0];
    v119 = sub_23D5E9040();
    v121 = v120;
    v317 = &type metadata for AdminSeed;
    v309 = sub_23D5E803C();
    v318 = v309;
    v122 = swift_allocObject();
    v315 = (void (*)(uint64_t, uint64_t))v122;
    *(_QWORD *)(v122 + 16) = v118;
    *(_QWORD *)(v122 + 24) = v117;
    *(_OWORD *)(v122 + 32) = xmmword_23D66DF30;
    sub_23D5AFA60((uint64_t)v118, v117);
    sub_23D5E7284(0, 0xF000000000000000);
    v123 = v119;
    *(_QWORD *)&v311 = v121;
    v124 = sub_23D61E134(&v315, 1);
    v126 = v125;
    v128 = v127;
    v130 = v129;
    v307 = v117;
    v305 = (unint64_t)v118;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
    *(_QWORD *)&v319 = v124;
    *((_QWORD *)&v319 + 1) = v126;
    v320 = v128;
    v321 = v130;
    sub_23D619308(v123, v311);
    v304 = v123;
    v131 = v319;
    v132 = (uint64_t)v320;
    v133 = v321;
    v317 = &type metadata for AdminSeed;
    v318 = v309;
    v134 = swift_allocObject();
    v315 = (void (*)(uint64_t, uint64_t))v134;
    *(_OWORD *)(v134 + 16) = v131;
    *(_QWORD *)(v134 + 32) = v132;
    *(_QWORD *)(v134 + 40) = v133;
    sub_23D5AFA60(v131, *((unint64_t *)&v131 + 1));
    sub_23D5E7284(v132, v133);
    if (qword_256C78B20 != -1)
      swift_once();
    v302 = (void (*)(uint64_t, uint64_t))sub_23D61DD8C(&v315, 1);
    v303 = v135;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
    v317 = &type metadata for MemberSeed;
    v269 = sub_23D5ED1F8();
    v318 = v269;
    v315 = v302;
    v316 = (uint64_t *)v303;
    sub_23D5AFA60((uint64_t)v302, (unint64_t)v303);
    v270 = (void (*)(uint64_t, uint64_t))sub_23D61DD8C(&v315, 1);
    v301 = v136;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
  v267 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  v138 = v306[2];
  v139 = v306[3];
  *(_QWORD *)(inited + 32) = v138;
  *(_QWORD *)(inited + 40) = v139;
  v140 = (int)v312;
  LODWORD(v315) = bswap32(v312);
  sub_23D5AFA60(v138, v139);
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v315, (uint64_t)&v315 + 4);
  *(_QWORD *)(inited + 56) = v141;
  v315 = v308;
  v142 = v319;
  v144 = (uint64_t)v320;
  v143 = v321;
  swift_bridgeObjectRetain();
  sub_23D5AFA60(v142, *((unint64_t *)&v142 + 1));
  sub_23D5E7284(v144, v143);
  LODWORD(v260) = v140;
  v268 = (_QWORD *)inited;
  v145 = v143;
  sub_23D5D28CC(v305, v307, 0, 0xF000000000000000, v142, *((unint64_t **)&v142 + 1), v144, (uint64_t)v300, v143, (_QWORD *)inited, v260);
  if (v53)
  {
    sub_23D5DDA20(v142, *((unint64_t *)&v142 + 1));
    sub_23D5E725C(v144, v143);
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v304, v311);
    sub_23D5DDA20((uint64_t)v270, (unint64_t)v301);
    sub_23D5DDA20((uint64_t)v302, (unint64_t)v303);
    sub_23D5DDA20(v305, v307);
    sub_23D5E725C(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v142, *((unint64_t *)&v142 + 1));
    sub_23D5E725C(v144, v143);
    return swift_bridgeObjectRelease();
  }
  v146 = v308;
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v142, *((unint64_t *)&v142 + 1));
  sub_23D5E725C(v144, v145);
  v315 = v146;
  swift_bridgeObjectRetain();
  v264 = sub_23D5D3C24(&v315, v302, v303, v270, (unint64_t)v301, v268, (int)v312, v300);
  v265 = v147;
  v266 = v148;
  v263 = v149;
  v150 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v150);
  *((_OWORD *)&v262 - 3) = v142;
  v261 = v301;
  sub_23D5AFA60(v142, *((unint64_t *)&v142 + 1));
  sub_23D5E7284(v144, v145);
  sub_23D5AE928(&qword_256C79AB0, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723FC);
  sub_23D66BF4C();
  type metadata accessor for Group(0);
  sub_23D5E7F64(v299, v297, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_23D5DDA20(v142, *((unint64_t *)&v142 + 1));
  sub_23D5E725C(v144, v145);
  v315 = v314[0];
  swift_bridgeObjectRetain();
  sub_23D5C48A4((uint64_t *)&v315, v296);
  v151 = swift_bridgeObjectRelease();
  MEMORY[0x24BDAC7A8](v151);
  *((_DWORD *)&v262 - 16) = 1;
  v152 = v265;
  *(&v262 - 7) = v264;
  *(&v262 - 6) = v152;
  v153 = v263;
  *(&v262 - 5) = v266;
  v258 = v153;
  v259 = v297;
  v260 = v296;
  v299 = sub_23D5AE928(&qword_256C79A80, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6726CC);
  sub_23D66BF4C();
  v317 = &type metadata for AdminSeed;
  v318 = v309;
  v154 = swift_allocObject();
  v315 = (void (*)(uint64_t, uint64_t))v154;
  v156 = (uint64_t)v290;
  v155 = (unint64_t)v291;
  *(_QWORD *)(v154 + 16) = v290;
  *(_QWORD *)(v154 + 24) = v155;
  v157 = v292;
  *(_QWORD *)(v154 + 32) = v292;
  *(_QWORD *)(v154 + 40) = a9;
  sub_23D5AFA60(v156, v155);
  sub_23D5E7284(v157, a9);
  if (qword_256C78D20 != -1)
    swift_once();
  sub_23D61D674((uint64_t)&v315, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
  v308 = 0;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
  v158 = swift_initStackObject();
  v298 = xmmword_23D66DED0;
  *(_OWORD *)(v158 + 16) = xmmword_23D66DED0;
  LODWORD(v315) = 0x1000000;
  *(_QWORD *)(v158 + 32) = sub_23D628C44((uint64_t)&v315, (uint64_t)&v315 + 4);
  *(_QWORD *)(v158 + 40) = v159;
  v315 = (void (*)(uint64_t, uint64_t))v158;
  v160 = swift_bridgeObjectRetain();
  sub_23D5E0AF4(v160);
  v161 = v315;
  if (qword_256C78B28 != -1)
    swift_once();
  v162 = qword_256C88BB0;
  v163 = *(_QWORD *)algn_256C88BB8;
  sub_23D5AFA60(qword_256C88BB0, *(unint64_t *)algn_256C88BB8);
  sub_23D5AFA60(v162, v163);
  swift_bridgeObjectRetain();
  v164 = v161;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v164 = sub_23D62B638(0, *((_QWORD *)v161 + 2) + 1, 1, v161);
  v166 = v164[2];
  v165 = v164[3];
  if (v166 >= v165 >> 1)
    v164 = sub_23D62B638((_QWORD *)(v165 > 1), v166 + 1, 1, v164);
  v164[2] = v166 + 1;
  v167 = &v164[2 * v166];
  v167[4] = v162;
  v167[5] = v163;
  sub_23D5DDA20(v162, v163);
  swift_bridgeObjectRelease();
  v168 = (void (*)(uint64_t, uint64_t))sub_23D5C50D4(v164);
  v170 = v169;
  swift_bridgeObjectRelease();
  v315 = v168;
  v316 = (uint64_t *)v170;
  v292 = sub_23D5E6898();
  v171 = v308;
  sub_23D66C2A0();
  v308 = v171;
  if (v171)
  {
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v264, v265);
    sub_23D5DDA20(v266, v263);
    sub_23D5DDA20(v304, v311);
    sub_23D5DDA20((uint64_t)v270, (unint64_t)v301);
    sub_23D5DDA20((uint64_t)v302, (unint64_t)v303);
    sub_23D5DDA20(v305, v307);
    sub_23D5E725C(0, 0xF000000000000000);
    swift_bridgeObjectRelease();
    sub_23D5DDA20((uint64_t)v168, v170);
    (*(void (**)(uint64_t *, uint64_t))(v273 + 8))(v293, v287);
  }
  else
  {
    sub_23D5DDA20((uint64_t)v168, v170);
    v291 = *(void (**)(uint64_t *, uint64_t))(v273 + 8);
    v291(v293, v287);
    v174 = v271;
    v175 = sub_23D66C2B8();
    v177 = v176;
    v290 = *(void (**)(char *, uint64_t))(v272 + 8);
    v290(v174, v282);
    v293 = (uint64_t *)(v295 + *(int *)(v294 + 40));
    v178 = v275;
    sub_23D5AEF48((uint64_t)v293, v275, qword_256C79750);
    v273 = *(_QWORD *)(v276 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v273)(v178, 1, v286) == 1)
    {
      v179 = v274;
      *(_OWORD *)v274 = xmmword_23D66DF40;
      *(_OWORD *)(v179 + 16) = xmmword_23D66DF40;
      *(_OWORD *)(v179 + 32) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v275, qword_256C79750);
    }
    else
    {
      sub_23D5E7F64(v275, v274, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    }
    v180 = v274;
    sub_23D5DDA20(*(_QWORD *)(v274 + 16), *(_QWORD *)(v274 + 24));
    *(_QWORD *)(v180 + 16) = v175;
    *(_QWORD *)(v180 + 24) = v177;
    v181 = v293;
    sub_23D5AEF8C((uint64_t)v293, qword_256C79750);
    sub_23D5E7F64(v180, (uint64_t)v181, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    v276 = *(_QWORD *)(v276 + 56);
    ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v276)(v181, 0, 1, v286);
    v182 = v319;
    v183 = (uint64_t)v320;
    v184 = v321;
    v317 = &type metadata for AdminSeed;
    v318 = v309;
    v185 = swift_allocObject();
    v315 = (void (*)(uint64_t, uint64_t))v185;
    *(_OWORD *)(v185 + 16) = v182;
    *(_QWORD *)(v185 + 32) = v183;
    *(_QWORD *)(v185 + 40) = v184;
    v186 = qword_256C890F0;
    v187 = *(_QWORD *)algn_256C890F8;
    sub_23D5AFA60(v182, *((unint64_t *)&v182 + 1));
    sub_23D5E7284(v183, v184);
    sub_23D5AFA60(v182, *((unint64_t *)&v182 + 1));
    sub_23D5E7284(v183, v184);
    v188 = v308;
    sub_23D61D674((uint64_t)&v315, 1, v186, v187);
    v308 = v188;
    if (v188)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
      sub_23D5DDA20(v182, *((unint64_t *)&v182 + 1));
      sub_23D5E725C(v183, v184);
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v264, v265);
      sub_23D5DDA20(v266, v263);
      sub_23D5DDA20(v304, v311);
      sub_23D5DDA20((uint64_t)v270, (unint64_t)v301);
      sub_23D5DDA20((uint64_t)v302, (unint64_t)v303);
      sub_23D5DDA20(v305, v307);
      sub_23D5E725C(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
    }
    else
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
      sub_23D5DDA20(v182, *((unint64_t *)&v182 + 1));
      sub_23D5E725C(v183, v184);
      v189 = swift_initStackObject();
      *(_OWORD *)(v189 + 16) = v298;
      LODWORD(v315) = 0x1000000;
      *(_QWORD *)(v189 + 32) = sub_23D628C44((uint64_t)&v315, (uint64_t)&v315 + 4);
      *(_QWORD *)(v189 + 40) = v190;
      v315 = (void (*)(uint64_t, uint64_t))v189;
      v191 = swift_bridgeObjectRetain();
      sub_23D5E0AF4(v191);
      v192 = v315;
      if (qword_256C78B30 != -1)
        swift_once();
      v193 = qword_256C88BC0;
      v194 = *(_QWORD *)algn_256C88BC8;
      sub_23D5AFA60(qword_256C88BC0, *(unint64_t *)algn_256C88BC8);
      sub_23D5AFA60(v193, v194);
      swift_bridgeObjectRetain();
      v195 = v192;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v195 = sub_23D62B638(0, *((_QWORD *)v192 + 2) + 1, 1, v192);
      v197 = v195[2];
      v196 = v195[3];
      if (v197 >= v196 >> 1)
        v195 = sub_23D62B638((_QWORD *)(v196 > 1), v197 + 1, 1, v195);
      v195[2] = v197 + 1;
      v198 = &v195[2 * v197];
      v198[4] = v193;
      v198[5] = v194;
      sub_23D5DDA20(v193, v194);
      swift_bridgeObjectRelease();
      v199 = (void (*)(uint64_t, uint64_t))sub_23D5C565C(v195);
      v201 = v200;
      swift_bridgeObjectRelease();
      v315 = v199;
      v316 = (uint64_t *)v201;
      v202 = v308;
      sub_23D66C2A0();
      if (v202)
      {
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v264, v265);
        sub_23D5DDA20(v266, v263);
        sub_23D5DDA20(v304, v311);
        sub_23D5DDA20((uint64_t)v270, (unint64_t)v301);
        sub_23D5DDA20((uint64_t)v302, (unint64_t)v303);
        sub_23D5DDA20(v305, v307);
        sub_23D5E725C(0, 0xF000000000000000);
        swift_bridgeObjectRelease();
        sub_23D5DDA20((uint64_t)v199, v201);
        v291((uint64_t *)v278, v287);
        sub_23D5E6950(v295, type metadata accessor for GKCrypto_GroupBlob);
        sub_23D5E6950((uint64_t)v300, type metadata accessor for GKCrypto_AdminGroupBlob);
        v203 = (uint64_t)v320;
        v204 = v321;
        sub_23D5DDA20(v319, *((unint64_t *)&v319 + 1));
        sub_23D5E725C(v203, v204);
        sub_23D5E6950(v296, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
        sub_23D5E6950(v297, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
        return swift_bridgeObjectRelease();
      }
      sub_23D5DDA20((uint64_t)v199, v201);
      v291((uint64_t *)v278, v287);
      v205 = v277;
      v206 = sub_23D66C2B8();
      v208 = v207;
      v290(v205, v282);
      v209 = v280;
      sub_23D5AEF48((uint64_t)v293, v280, qword_256C79750);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v273)(v209, 1, v286) == 1)
      {
        v210 = (uint64_t)v279;
        *(_OWORD *)v279 = xmmword_23D66DF40;
        *(_OWORD *)(v210 + 16) = xmmword_23D66DF40;
        *(_OWORD *)(v210 + 32) = xmmword_23D66DF40;
        sub_23D66BE5C();
        sub_23D5AEF8C(v280, qword_256C79750);
      }
      else
      {
        sub_23D5E7F64(v280, (uint64_t)v279, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
      }
      v211 = v279;
      sub_23D5DDA20(*v279, v279[1]);
      *v211 = v206;
      v211[1] = v208;
      v212 = v293;
      sub_23D5AEF8C((uint64_t)v293, qword_256C79750);
      sub_23D5E7F64((uint64_t)v211, (uint64_t)v212, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
      ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v276)(v212, 0, 1, v286);
      v317 = &type metadata for MemberSeed;
      v318 = v269;
      v315 = v270;
      v316 = v301;
      sub_23D5AFA60((uint64_t)v270, (unint64_t)v301);
      if (qword_256C78D48 != -1)
        swift_once();
      sub_23D61D674((uint64_t)&v315, 1, qword_256C89140, *(uint64_t *)algn_256C89148);
      v308 = 0;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v315);
      v213 = swift_initStackObject();
      *(_OWORD *)(v213 + 16) = v298;
      LODWORD(v315) = 0x1000000;
      *(_QWORD *)(v213 + 32) = sub_23D628C44((uint64_t)&v315, (uint64_t)&v315 + 4);
      *(_QWORD *)(v213 + 40) = v214;
      v315 = (void (*)(uint64_t, uint64_t))v213;
      sub_23D5E0AF4((uint64_t)v268);
      v215 = v315;
      if (qword_256C78B38 != -1)
        swift_once();
      v216 = qword_256C88BD0;
      v217 = *(_QWORD *)algn_256C88BD8;
      sub_23D5AFA60(qword_256C88BD0, *(unint64_t *)algn_256C88BD8);
      sub_23D5AFA60(v216, v217);
      swift_bridgeObjectRetain();
      v218 = v215;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v218 = sub_23D62B638(0, *((_QWORD *)v215 + 2) + 1, 1, v215);
      v220 = v218[2];
      v219 = v218[3];
      if (v220 >= v219 >> 1)
        v218 = sub_23D62B638((_QWORD *)(v219 > 1), v220 + 1, 1, v218);
      v218[2] = v220 + 1;
      v221 = &v218[2 * v220];
      v221[4] = v216;
      v221[5] = v217;
      sub_23D5DDA20(v216, v217);
      swift_bridgeObjectRelease();
      v222 = (void (*)(uint64_t, uint64_t))sub_23D5C5D74(v218);
      v224 = v223;
      swift_bridgeObjectRelease();
      v315 = v222;
      v316 = (uint64_t *)v224;
      v225 = v308;
      sub_23D66C2A0();
      if (!v225)
      {
        sub_23D5DDA20((uint64_t)v222, v224);
        v291((uint64_t *)v283, v287);
        v226 = v281;
        v227 = sub_23D66C2B8();
        v229 = v228;
        v290(v226, v282);
        v230 = v285;
        sub_23D5AEF48((uint64_t)v293, v285, qword_256C79750);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v273)(v230, 1, v286) == 1)
        {
          v231 = v284;
          *(_OWORD *)v284 = xmmword_23D66DF40;
          *(_OWORD *)(v231 + 16) = xmmword_23D66DF40;
          *(_OWORD *)(v231 + 32) = xmmword_23D66DF40;
          sub_23D66BE5C();
          sub_23D5AEF8C(v285, qword_256C79750);
        }
        else
        {
          sub_23D5E7F64(v285, v284, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
        }
        v232 = v284;
        sub_23D5DDA20(*(_QWORD *)(v284 + 32), *(_QWORD *)(v284 + 40));
        *(_QWORD *)(v232 + 32) = v227;
        *(_QWORD *)(v232 + 40) = v229;
        v233 = v293;
        sub_23D5AEF8C((uint64_t)v293, qword_256C79750);
        sub_23D5E7F64(v232, (uint64_t)v233, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
        ((void (*)(uint64_t *, _QWORD, uint64_t, uint64_t))v276)(v233, 0, 1, v286);
        v234 = v319;
        v235 = v320;
        v236 = v321;
        sub_23D5AFA60(v319, *((unint64_t *)&v319 + 1));
        sub_23D5E7284((uint64_t)v235, v236);
        v293 = sub_23D5D79E0(v234, *((unint64_t *)&v234 + 1), v235, v236, (uint64_t)v270, v301, (int)v312);
        *(_QWORD *)&v298 = v237;
        v308 = v238;
        v309 = v239;
        sub_23D5DDA20(v234, *((unint64_t *)&v234 + 1));
        sub_23D5E725C((uint64_t)v235, v236);
        v240 = sub_23D5D824C();
        v242 = v241;
        v243 = (_QWORD *)((char *)v306 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
        swift_beginAccess();
        isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        v313 = *v243;
        *v243 = 0x8000000000000000;
        sub_23D5E17C0(v310, (uint64_t)sub_23D5E61B4, 0, isUniquelyReferenced_nonNull_native, &v313);
        *v243 = v313;
        swift_bridgeObjectRelease();
        swift_endAccess();
        v245 = sub_23D66BF1C();
        v247 = v246;
        v248 = swift_bridgeObjectRetain();
        v249 = sub_23D5B1784(v248);
        sub_23D5DDA20(v264, v265);
        sub_23D5DDA20(v266, v263);
        sub_23D5DDA20(v304, v311);
        sub_23D5DDA20((uint64_t)v302, (unint64_t)v303);
        sub_23D5DDA20(v305, v307);
        sub_23D5E725C(0, 0xF000000000000000);
        swift_bridgeObjectRelease();
        sub_23D5E6950(v295, type metadata accessor for GKCrypto_GroupBlob);
        sub_23D5E6950((uint64_t)v300, type metadata accessor for GKCrypto_AdminGroupBlob);
        v250 = v314[0];
        v311 = v319;
        v251 = v320;
        v310 = v321;
        swift_bridgeObjectRetain();
        sub_23D5AFA60(v245, v247);
        sub_23D5E6950(v296, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
        sub_23D5E6950(v297, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
        v252 = v288;
        *v288 = v250;
        *((_DWORD *)v252 + 2) = (_DWORD)v312;
        *((_OWORD *)v252 + 1) = v311;
        v253 = v310;
        v252[4] = v251;
        v252[5] = (void (*)(uint64_t, uint64_t))v253;
        v254 = v301;
        v252[6] = v270;
        v252[7] = (void (*)(uint64_t, uint64_t))v254;
        v252[8] = (void (*)(uint64_t, uint64_t))v245;
        v252[9] = (void (*)(uint64_t, uint64_t))v247;
        v255 = v289;
        *v289 = v245;
        v255[1] = v247;
        v256 = v293;
        v255[2] = v249;
        v255[3] = (uint64_t)v256;
        v257 = v308;
        v255[4] = v298;
        v255[5] = (uint64_t)v257;
        v255[6] = v309;
        v255[7] = (uint64_t)v240;
        v255[8] = v242;
        return swift_bridgeObjectRelease();
      }
      sub_23D5DDA20(v264, v265);
      sub_23D5DDA20(v266, v263);
      sub_23D5DDA20(v304, v311);
      sub_23D5DDA20((uint64_t)v270, (unint64_t)v301);
      sub_23D5DDA20((uint64_t)v302, (unint64_t)v303);
      sub_23D5DDA20(v305, v307);
      sub_23D5E725C(0, 0xF000000000000000);
      swift_bridgeObjectRelease();
      sub_23D5DDA20((uint64_t)v222, v224);
      v291((uint64_t *)v283, v287);
    }
  }
  sub_23D5E6950(v295, type metadata accessor for GKCrypto_GroupBlob);
  sub_23D5E6950((uint64_t)v300, type metadata accessor for GKCrypto_AdminGroupBlob);
  v172 = (uint64_t)v320;
  v173 = v321;
  sub_23D5DDA20(v319, *((unint64_t *)&v319 + 1));
  sub_23D5E725C(v172, v173);
  sub_23D5E6950(v296, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_23D5E6950(v297, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D5C2CB0(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  int64_t v10;
  unint64_t v11;
  unint64_t v12;
  int64_t v13;
  unint64_t v14;
  int64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int64_t v21;
  int64_t v22;
  uint64_t v23;
  uint64_t v24;

  v2 = *(_QWORD *)(a2 + 16);
  if (!v2)
    return 1;
  v3 = *(_QWORD *)(a1 + 16);
  if (!v3)
    return 1;
  if (v2 >= v3)
    v4 = a1;
  else
    v4 = a2;
  if (v2 >= v3)
    v5 = a2;
  else
    v5 = a1;
  v23 = v4;
  v24 = v4 + 56;
  v6 = -1 << *(_BYTE *)(v4 + 32);
  if (-v6 < 64)
    v7 = ~(-1 << -(char)v6);
  else
    v7 = -1;
  v8 = v7 & *(_QWORD *)(v4 + 56);
  v21 = (unint64_t)(63 - v6) >> 6;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v9 = 0;
  while (1)
  {
    while (1)
    {
      v10 = v9;
      if (!v8)
        break;
      v11 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      v12 = v11 | (v9 << 6);
      if (*(_QWORD *)(v5 + 16))
        goto LABEL_31;
    }
    v13 = v9 + 1;
    if (__OFADD__(v9, 1))
    {
      __break(1u);
      JUMPOUT(0x23D5C37A8);
    }
    if (v13 >= v21)
      goto LABEL_34;
    v14 = *(_QWORD *)(v24 + 8 * v13);
    ++v9;
    if (!v14)
    {
      v9 = v10 + 2;
      if (v10 + 2 >= v21)
        goto LABEL_34;
      v14 = *(_QWORD *)(v24 + 8 * v9);
      if (!v14)
      {
        v9 = v10 + 3;
        if (v10 + 3 >= v21)
          goto LABEL_34;
        v14 = *(_QWORD *)(v24 + 8 * v9);
        if (!v14)
          break;
      }
    }
LABEL_30:
    v8 = (v14 - 1) & v14;
    v12 = __clz(__rbit64(v14)) + (v9 << 6);
    if (*(_QWORD *)(v5 + 16))
    {
LABEL_31:
      v22 = v9;
      v16 = (uint64_t *)(*(_QWORD *)(v23 + 48) + 16 * v12);
      v17 = *v16;
      v18 = v16[1];
      sub_23D66C8E8();
      sub_23D5AFA60(v17, v18);
      sub_23D5AFA60(v17, v18);
      sub_23D66BDA8();
      sub_23D5DDA20(v17, v18);
      v19 = sub_23D66C90C() & ~(-1 << *(_BYTE *)(v5 + 32));
      if (((*(_QWORD *)(v5 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8)) >> v19) & 1) != 0)
        __asm { BR              X8 }
      sub_23D5DDA20(v17, v18);
      v9 = v22;
    }
  }
  v15 = v10 + 4;
  if (v10 + 4 >= v21)
    goto LABEL_34;
  v14 = *(_QWORD *)(v24 + 8 * v15);
  if (v14)
  {
    v9 = v10 + 4;
    goto LABEL_30;
  }
  while (1)
  {
    v9 = v15 + 1;
    if (__OFADD__(v15, 1))
      __break(1u);
    if (v9 >= v21)
      break;
    v14 = *(_QWORD *)(v24 + 8 * v9);
    ++v15;
    if (v14)
      goto LABEL_30;
  }
LABEL_34:
  swift_bridgeObjectRelease();
  sub_23D5F165C();
  return 1;
}

uint64_t sub_23D5C3868(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t *v33;
  _QWORD v34[2];
  uint64_t *v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  int64_t v39;
  int64_t v40;
  uint64_t v41;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = *v1;
  result = sub_23D6635F8(a1, *v1);
  if (v2)
    return result;
  v34[1] = 0;
  v35 = v1;
  v9 = *(_QWORD *)(a1 + 56);
  v38 = a1 + 56;
  v10 = 1 << *(_BYTE *)(a1 + 32);
  v11 = -1;
  if (v10 < 64)
    v11 = ~(-1 << v10);
  v12 = v11 & v9;
  v39 = (unint64_t)(v10 + 63) >> 6;
  swift_bridgeObjectRetain();
  result = swift_bridgeObjectRetain();
  v13 = 0;
  v36 = v6;
  v37 = a1;
  while (1)
  {
    if (v12)
    {
      v15 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      v40 = v13;
      v16 = v15 | (v13 << 6);
      goto LABEL_25;
    }
    v17 = v13 + 1;
    if (__OFADD__(v13, 1))
    {
      __break(1u);
      goto LABEL_32;
    }
    if (v17 >= v39)
      goto LABEL_29;
    v18 = *(_QWORD *)(v38 + 8 * v17);
    v19 = v13 + 1;
    if (!v18)
    {
      v19 = v13 + 2;
      if (v13 + 2 >= v39)
        goto LABEL_29;
      v18 = *(_QWORD *)(v38 + 8 * v19);
      if (!v18)
      {
        v19 = v13 + 3;
        if (v13 + 3 >= v39)
          goto LABEL_29;
        v18 = *(_QWORD *)(v38 + 8 * v19);
        if (!v18)
        {
          v19 = v13 + 4;
          if (v13 + 4 >= v39)
            goto LABEL_29;
          v18 = *(_QWORD *)(v38 + 8 * v19);
          if (!v18)
            break;
        }
      }
    }
LABEL_24:
    v12 = (v18 - 1) & v18;
    v40 = v19;
    v16 = __clz(__rbit64(v18)) + (v19 << 6);
LABEL_25:
    v21 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v16);
    v22 = *v21;
    v23 = v21[1];
    sub_23D5AFA60(*v21, v23);
    swift_bridgeObjectRetain();
    v24 = sub_23D5DF394(v22, v23);
    v26 = v25;
    swift_bridgeObjectRelease();
    if ((v26 & 1) != 0)
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41 = v7;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_23D666FF8();
        v7 = v41;
      }
      sub_23D5DDA20(*(_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v24), *(_QWORD *)(*(_QWORD *)(v7 + 48) + 16 * v24 + 8));
      v28 = *(_QWORD *)(v7 + 56);
      v29 = type metadata accessor for GroupMembership.MemberProperties(0);
      v30 = *(_QWORD *)(v29 - 8);
      v31 = (uint64_t)v36;
      sub_23D5E7F64(v28 + *(_QWORD *)(v30 + 72) * v24, (uint64_t)v36, type metadata accessor for GroupMembership.MemberProperties);
      sub_23D666440(v24, v7);
      swift_bridgeObjectRelease();
      v32 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v30 + 56);
      v6 = (char *)v31;
      v32(v31, 0, 1, v29);
      a1 = v37;
    }
    else
    {
      v14 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 56))(v6, 1, 1, v14);
    }
    sub_23D5AEF8C((uint64_t)v6, &qword_256C79178);
    result = sub_23D5DDA20(v22, v23);
    v13 = v40;
  }
  v20 = v13 + 5;
  if (v13 + 5 >= v39)
  {
LABEL_29:
    swift_release();
    v33 = v35;
    result = swift_bridgeObjectRelease();
    *v33 = v7;
    return result;
  }
  v18 = *(_QWORD *)(v38 + 8 * v20);
  if (v18)
  {
    v19 = v13 + 5;
    goto LABEL_24;
  }
  while (1)
  {
    v19 = v20 + 1;
    if (__OFADD__(v20, 1))
      break;
    if (v19 >= v39)
      goto LABEL_29;
    v18 = *(_QWORD *)(v38 + 8 * v19);
    ++v20;
    if (v18)
      goto LABEL_24;
  }
LABEL_32:
  __break(1u);
  return result;
}

uint64_t sub_23D5C3B94(uint64_t a1)
{
  _QWORD **v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD **v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t (*v24)(uint64_t);
  unsigned __int8 *v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t);
  uint64_t v35;
  int isUniquelyReferenced_nonNull_native;
  uint64_t v37;
  uint64_t v38;
  _BOOL8 v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  unsigned __int8 *v43;
  uint64_t *v44;
  uint64_t v45;
  BOOL v46;
  uint64_t v47;
  uint64_t result;
  uint64_t v49;
  uint64_t v50;
  _QWORD **v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  int64_t v60;
  _QWORD *v61;

  v3 = v2;
  v4 = v1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v6);
  v54 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GroupMembership.MemberProperties(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v59 = (uint64_t)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v53 = (char *)&v49 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v58 = (uint64_t)&v49 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  v61 = (_QWORD *)MEMORY[0x24BEE4AF8];
  sub_23D5DE38C(0, v15, 0);
  v16 = (uint64_t)v61;
  if (v15)
  {
    v57 = v2;
    v55 = v8;
    v51 = v1;
    swift_bridgeObjectRetain();
    v50 = a1;
    v17 = (unint64_t *)(a1 + 40);
    v60 = v15;
    do
    {
      v19 = *(v17 - 1);
      v18 = *v17;
      sub_23D5AFA60(v19, *v17);
      v61 = (_QWORD *)v16;
      v21 = *(_QWORD *)(v16 + 16);
      v20 = *(_QWORD *)(v16 + 24);
      if (v21 >= v20 >> 1)
      {
        sub_23D5DE38C(v20 > 1, v21 + 1, 1);
        v16 = (uint64_t)v61;
      }
      v17 += 3;
      *(_QWORD *)(v16 + 16) = v21 + 1;
      v22 = v16 + 16 * v21;
      *(_QWORD *)(v22 + 32) = v19;
      *(_QWORD *)(v22 + 40) = v18;
      --v15;
    }
    while (v15);
    a1 = v50;
    swift_bridgeObjectRelease();
    v4 = v51;
    v8 = v55;
    v15 = v60;
    v3 = v57;
  }
  v23 = *v4;
  swift_bridgeObjectRetain();
  sub_23D663370(v16, (uint64_t)v23);
  if (v3)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  if (!v15)
  {
    swift_bridgeObjectRetain();
LABEL_29:
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *v4 = v23;
    return swift_bridgeObjectRelease();
  }
  v49 = 0;
  v51 = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v24 = type metadata accessor for GroupMembership.MemberProperties;
  v50 = a1;
  v25 = (unsigned __int8 *)(a1 + 48);
  v26 = (unint64_t)v54;
  v55 = v8;
  v52 = v9;
  while (1)
  {
    v60 = v15;
    v28 = *((_QWORD *)v25 - 2);
    v27 = *((_QWORD *)v25 - 1);
    if (!v23[2])
      break;
    LODWORD(v57) = *v25;
    sub_23D5AFA60(v28, v27);
    sub_23D5AFA60(v28, v27);
    v29 = sub_23D5DF394(v28, v27);
    if ((v30 & 1) != 0)
    {
      sub_23D5E7298(v23[7] + *(_QWORD *)(v9 + 72) * v29, v26, v24);
      v31 = 0;
    }
    else
    {
      v31 = 1;
    }
    v56 = v25;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v26, v31, 1, v8);
    sub_23D5DDA20(v28, v27);
    if ((*(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48))(v26, 1, v8) == 1)
      goto LABEL_34;
    v32 = v58;
    sub_23D5E7F64(v26, v58, v24);
    v33 = *(_QWORD *)(v32 + 8);
    v9 = *(_QWORD *)(v32 + 16);
    v34 = v24;
    v35 = (uint64_t)v53;
    sub_23D5AEF48(v32 + *(int *)(v8 + 24), (uint64_t)&v53[*(int *)(v8 + 24)], &qword_256C79990);
    sub_23D5AEF48(v32 + *(int *)(v8 + 28), v35 + *(int *)(v8 + 28), &qword_256C799E0);
    *(_BYTE *)v35 = v57;
    *(_QWORD *)(v35 + 8) = v33;
    *(_QWORD *)(v35 + 16) = v9;
    sub_23D5E7F64(v35, v59, v34);
    sub_23D5AFA60(v28, v27);
    sub_23D5E7284(v33, v9);
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v61 = v23;
    v26 = sub_23D5DF394(v28, v27);
    v38 = v23[2];
    v39 = (v37 & 1) == 0;
    v40 = v38 + v39;
    if (__OFADD__(v38, v39))
    {
      __break(1u);
LABEL_32:
      __break(1u);
      break;
    }
    v8 = v37;
    if (v23[3] >= v40)
    {
      v9 = v52;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        sub_23D666FF8();
    }
    else
    {
      sub_23D6650E8(v40, isUniquelyReferenced_nonNull_native);
      v41 = sub_23D5DF394(v28, v27);
      v9 = v52;
      if ((v8 & 1) != (v42 & 1))
        goto LABEL_35;
      v26 = v41;
    }
    v24 = v34;
    v23 = v61;
    v43 = v56;
    if ((v8 & 1) != 0)
    {
      sub_23D5F1744(v59, v61[7] + *(_QWORD *)(v9 + 72) * v26, v34);
    }
    else
    {
      v61[(v26 >> 6) + 8] |= 1 << v26;
      v44 = (uint64_t *)(v23[6] + 16 * v26);
      *v44 = v28;
      v44[1] = v27;
      sub_23D5E7F64(v59, v23[7] + *(_QWORD *)(v9 + 72) * v26, v34);
      v45 = v23[2];
      v46 = __OFADD__(v45, 1);
      v47 = v45 + 1;
      if (v46)
        goto LABEL_32;
      v23[2] = v47;
      sub_23D5AFA60(v28, v27);
    }
    v25 = v43 + 24;
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v28, v27);
    sub_23D5DDA20(v28, v27);
    sub_23D5E6950(v58, v34);
    v15 = v60 - 1;
    v26 = (unint64_t)v54;
    v8 = v55;
    if (v60 == 1)
    {
      swift_bridgeObjectRelease();
      v4 = v51;
      goto LABEL_29;
    }
  }
  (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v26, 1, 1, v8);
  sub_23D5AFA60(v28, v27);
LABEL_34:
  __break(1u);
LABEL_35:
  result = sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5C40DC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(uint64_t, uint64_t, uint64_t, uint64_t);
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  char v59;
  unint64_t v60;
  uint64_t v61;
  _BOOL8 v62;
  uint64_t v63;
  char v64;
  uint64_t v65;
  char v66;
  uint64_t *v67;
  uint64_t v68;
  BOOL v69;
  uint64_t v70;
  char isUniquelyReferenced_nonNull_native;
  uint64_t result;
  uint64_t v73;
  uint8_t **v74;
  uint64_t v75;
  uint64_t *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  int64_t v90;
  uint64_t v91[2];
  uint64_t v92;

  v85 = type metadata accessor for GroupMembership.MemberProperties(0);
  v81 = *(_QWORD *)(v85 - 8);
  v3 = MEMORY[0x24BDAC7A8](v85);
  v84 = (uint64_t *)((char *)&v73 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v3);
  v83 = (char *)&v73 - v5;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v6);
  v78 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v8);
  v77 = (char *)&v73 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v76 = (uint64_t *)((char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v11);
  v87 = (uint64_t)&v73 - v13;
  v82 = type metadata accessor for UserAndAllInfo(0);
  v14 = *(_QWORD *)(v82 - 8);
  v15 = MEMORY[0x24BDAC7A8](v82);
  v86 = (uint64_t)&v73 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (uint64_t *)((char *)&v73 - v17);
  v19 = *(_QWORD *)(a1 + 16);
  v91[0] = MEMORY[0x24BEE4AF8];
  sub_23D5DE38C(0, v19, 0);
  v75 = a1;
  v89 = v1;
  v90 = v19;
  v88 = v14;
  if (v19)
  {
    v20 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    v92 = *(_QWORD *)(v14 + 72);
    swift_bridgeObjectRetain();
    do
    {
      sub_23D5E7298(v20, (uint64_t)v18, type metadata accessor for UserAndAllInfo);
      v22 = *v18;
      v21 = v18[1];
      sub_23D5AFA60(*v18, v21);
      sub_23D5E6950((uint64_t)v18, type metadata accessor for UserAndAllInfo);
      v23 = v91[0];
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23D5DE38C(0, *(_QWORD *)(v23 + 16) + 1, 1);
        v23 = v91[0];
      }
      v25 = *(_QWORD *)(v23 + 16);
      v24 = *(_QWORD *)(v23 + 24);
      if (v25 >= v24 >> 1)
      {
        sub_23D5DE38C(v24 > 1, v25 + 1, 1);
        v23 = v91[0];
      }
      *(_QWORD *)(v23 + 16) = v25 + 1;
      v26 = v23 + 16 * v25;
      *(_QWORD *)(v26 + 32) = v22;
      *(_QWORD *)(v26 + 40) = v21;
      v20 += v92;
      --v19;
    }
    while (v19);
  }
  else
  {
    v23 = v91[0];
    swift_bridgeObjectRetain();
  }
  v27 = v75;
  swift_bridgeObjectRelease();
  v28 = (uint64_t *)v74;
  v29 = *v74;
  swift_bridgeObjectRetain();
  v30 = v89;
  sub_23D662F18(v23, v29);
  v31 = v30;
  if (v30)
  {
    swift_release();
    return swift_bridgeObjectRelease();
  }
  swift_release();
  swift_bridgeObjectRelease();
  v32 = (_QWORD *)sub_23D5B5070(MEMORY[0x24BEE4AF8], &qword_256C79AD8, &qword_256C79AF8, type metadata accessor for GroupMembership.MemberProperties);
  if (!v90)
  {
LABEL_32:
    swift_bridgeObjectRetain();
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v91[0] = *v28;
    *v28 = 0x8000000000000000;
    sub_23D667760((uint64_t)v32, (uint64_t)sub_23D6676F0, 0, isUniquelyReferenced_nonNull_native, (uint64_t)v91);
    if (v31)
      goto LABEL_39;
    *v28 = v91[0];
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  v33 = v27 + ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80));
  v79 = *(_QWORD *)(v88 + 72);
  v80 = 0;
  swift_bridgeObjectRetain();
  v35 = v86;
  v34 = v87;
  while (1)
  {
    v92 = (uint64_t)v32;
    v89 = v33;
    sub_23D5E7298(v33, v35, type metadata accessor for UserAndAllInfo);
    v36 = type metadata accessor for UserKeyingInfo(0);
    v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56);
    v37(v34, 1, 1, v36);
    v38 = *(_QWORD *)(v35 + 48);
    if (v38 >> 60 == 15)
    {
      v39 = v34;
    }
    else
    {
      v40 = *(_QWORD *)(v35 + 40);
      v42 = *(_QWORD *)(v35 + 8);
      v91[0] = *(_QWORD *)v35;
      v41 = v91[0];
      v91[1] = v42;
      v43 = sub_23D66C2AC();
      v44 = (uint64_t)v77;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(v77, 1, 1, v43);
      v45 = sub_23D66C258();
      v46 = (uint64_t)v78;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v45 - 8) + 56))(v78, 1, 1, v45);
      sub_23D5E7284(v40, v38);
      sub_23D5AFA60(v41, v42);
      v47 = v76;
      v48 = v80;
      sub_23D61F210(v91, v40, v38, v44, v46, v76);
      if (v48)
      {
        sub_23D5AEF8C(v87, &qword_256C79990);
        sub_23D5E6950(v86, type metadata accessor for UserAndAllInfo);
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      v80 = 0;
      v39 = v87;
      sub_23D5AEF8C(v87, &qword_256C79990);
      v37((uint64_t)v47, 0, 1, v36);
      sub_23D5F16C4((uint64_t)v47, v39, &qword_256C79990);
      v35 = v86;
    }
    v49 = *(_QWORD *)v35;
    v50 = *(_QWORD *)(v35 + 8);
    LODWORD(v88) = *(unsigned __int8 *)(v35 + 16);
    v51 = *(_QWORD *)(v35 + 24);
    v52 = *(_QWORD *)(v35 + 32);
    v53 = v85;
    v54 = (uint64_t)v83;
    sub_23D5AEF48(v39, (uint64_t)&v83[*(int *)(v85 + 24)], &qword_256C79990);
    v55 = v35 + *(int *)(v82 + 32);
    v56 = v49;
    sub_23D5AEF48(v55, v54 + *(int *)(v53 + 28), &qword_256C799E0);
    *(_BYTE *)v54 = v88;
    *(_QWORD *)(v54 + 8) = v51;
    *(_QWORD *)(v54 + 16) = v52;
    v28 = v84;
    sub_23D5E7F64(v54, (uint64_t)v84, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5AFA60(v56, v50);
    sub_23D5E7284(v51, v52);
    v57 = v92;
    v58 = swift_isUniquelyReferenced_nonNull_native();
    v91[0] = v57;
    v60 = sub_23D5DF394(v56, v50);
    v61 = *(_QWORD *)(v57 + 16);
    v62 = (v59 & 1) == 0;
    v63 = v61 + v62;
    if (__OFADD__(v61, v62))
      break;
    v64 = v59;
    if (*(_QWORD *)(v57 + 24) >= v63)
    {
      v34 = v87;
      if ((v58 & 1) != 0)
      {
        v32 = (_QWORD *)v91[0];
        if ((v59 & 1) != 0)
          goto LABEL_14;
      }
      else
      {
        sub_23D666FF8();
        v32 = (_QWORD *)v91[0];
        if ((v64 & 1) != 0)
          goto LABEL_14;
      }
    }
    else
    {
      sub_23D6650E8(v63, v58);
      v65 = sub_23D5DF394(v56, v50);
      v34 = v87;
      if ((v64 & 1) != (v66 & 1))
        goto LABEL_38;
      v60 = v65;
      v32 = (_QWORD *)v91[0];
      if ((v64 & 1) != 0)
      {
LABEL_14:
        sub_23D5F1744((uint64_t)v28, v32[7] + *(_QWORD *)(v81 + 72) * v60, type metadata accessor for GroupMembership.MemberProperties);
        goto LABEL_15;
      }
    }
    v32[(v60 >> 6) + 8] |= 1 << v60;
    v67 = (uint64_t *)(v32[6] + 16 * v60);
    *v67 = v56;
    v67[1] = v50;
    sub_23D5E7F64((uint64_t)v28, v32[7] + *(_QWORD *)(v81 + 72) * v60, type metadata accessor for GroupMembership.MemberProperties);
    v68 = v32[2];
    v69 = __OFADD__(v68, 1);
    v70 = v68 + 1;
    if (v69)
      goto LABEL_37;
    v32[2] = v70;
    sub_23D5AFA60(v56, v50);
LABEL_15:
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v56, v50);
    sub_23D5AEF8C(v34, &qword_256C79990);
    v35 = v86;
    sub_23D5E6950(v86, type metadata accessor for UserAndAllInfo);
    v33 = v89 + v79;
    if (!--v90)
    {
      swift_bridgeObjectRelease();
      v28 = (uint64_t *)v74;
      v31 = v80;
      goto LABEL_32;
    }
  }
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  sub_23D66C894();
  __break(1u);
LABEL_39:
  *v28 = v91[0];
  result = swift_bridgeObjectRelease();
  __break(1u);
  return result;
}

uint64_t sub_23D5C48A4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t result;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int64_t v29;
  unint64_t v30;
  int64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t (*v45)(uint64_t);
  uint64_t v46;
  os_log_type_t v47;
  NSObject *v48;
  os_log_type_t v49;
  uint8_t *v50;
  uint64_t v51;
  _QWORD v52[2];
  uint64_t v53;
  int64_t v54;
  uint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;

  v52[1] = a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  MEMORY[0x24BDAC7A8](v3);
  v56 = (uint64_t)v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23D66C330();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v52 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79998);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (_QWORD *)((char *)v52 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v10);
  v14 = (char *)v52 - v13;
  v15 = *a1;
  v16 = *(_QWORD *)(*a1 + 64);
  v53 = *a1 + 64;
  v60 = (_QWORD *)MEMORY[0x24BEE4AF8];
  v17 = 1 << *(_BYTE *)(v15 + 32);
  v18 = -1;
  if (v17 < 64)
    v18 = ~(-1 << v17);
  v19 = v18 & v16;
  v54 = (unint64_t)(v17 + 63) >> 6;
  v55 = v15;
  v52[0] = v54 - 1;
  result = swift_bridgeObjectRetain();
  v57 = 0;
  v58 = v6;
  v59 = v5;
  if (!v19)
    goto LABEL_6;
LABEL_4:
  v21 = __clz(__rbit64(v19));
  v19 &= v19 - 1;
  v22 = v21 | (v57 << 6);
LABEL_5:
  v23 = *(_QWORD *)(v55 + 56);
  v24 = (uint64_t *)(*(_QWORD *)(v55 + 48) + 16 * v22);
  v25 = *v24;
  v26 = v24[1];
  *v12 = *v24;
  v12[1] = v26;
  v27 = v23
      + *(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupMembership.MemberProperties(0) - 8) + 72) * v22;
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  sub_23D5E7298(v27, (uint64_t)v12 + *(int *)(v28 + 48), type metadata accessor for GroupMembership.MemberProperties);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(v12, 0, 1, v28);
  sub_23D5AFA60(v25, v26);
  v6 = v58;
  v5 = v59;
  while (1)
  {
    sub_23D5F16C4((uint64_t)v12, (uint64_t)v14, &qword_256C79998);
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v33 - 8) + 48))(v14, 1, v33) == 1)
    {
      swift_release();
      v44 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
      MEMORY[0x24BDAC7A8](v44);
      v52[-2] = &v60;
      sub_23D5AE928(&qword_256C79AB8, v45, (uint64_t)&unk_23D672564);
      sub_23D66BF4C();
      return swift_bridgeObjectRelease();
    }
    sub_23D5DDA20(*(_QWORD *)v14, *((_QWORD *)v14 + 1));
    v34 = (uint64_t)&v14[*(int *)(v33 + 48)];
    v35 = type metadata accessor for GroupMembership.MemberProperties(0);
    v36 = v56;
    sub_23D5AEF48(v34 + *(int *)(v35 + 28), v56, &qword_256C799E0);
    sub_23D5E6950(v34, type metadata accessor for GroupMembership.MemberProperties);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v36, 1, v5) == 1)
    {
      sub_23D5AEF8C(v36, &qword_256C799E0);
      if (qword_256C78B10 != -1)
        goto LABEL_39;
      goto LABEL_34;
    }
    (*(void (**)(char *, uint64_t, uint64_t))(v6 + 32))(v8, v36, v5);
    v37 = sub_23D66C1F8();
    v39 = v38;
    v40 = v60;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v40 = sub_23D62B638(0, v40[2] + 1, 1, v40);
    v42 = v40[2];
    v41 = v40[3];
    if (v42 >= v41 >> 1)
      v40 = sub_23D62B638((_QWORD *)(v41 > 1), v42 + 1, 1, v40);
    v40[2] = v42 + 1;
    v43 = &v40[2 * v42];
    v43[4] = v37;
    v43[5] = v39;
    v60 = v40;
    v6 = v58;
    v5 = v59;
    result = (*(uint64_t (**)(char *, uint64_t))(v58 + 8))(v8, v59);
    if (v19)
      goto LABEL_4;
LABEL_6:
    v29 = v57 + 1;
    if (__OFADD__(v57, 1))
      break;
    if (v29 < v54)
    {
      v30 = *(_QWORD *)(v53 + 8 * v29);
      if (v30)
        goto LABEL_9;
      v31 = v57 + 2;
      ++v57;
      if (v29 + 1 < v54)
      {
        v30 = *(_QWORD *)(v53 + 8 * v31);
        if (v30)
          goto LABEL_12;
        v57 = v29 + 1;
        if (v29 + 2 < v54)
        {
          v30 = *(_QWORD *)(v53 + 8 * (v29 + 2));
          if (v30)
          {
            v29 += 2;
            goto LABEL_9;
          }
          v31 = v29 + 3;
          v57 = v29 + 2;
          if (v29 + 3 < v54)
          {
            v30 = *(_QWORD *)(v53 + 8 * v31);
            if (!v30)
            {
              while (1)
              {
                v29 = v31 + 1;
                if (__OFADD__(v31, 1))
                  break;
                if (v29 >= v54)
                {
                  v57 = v52[0];
                  goto LABEL_23;
                }
                v30 = *(_QWORD *)(v53 + 8 * v29);
                ++v31;
                if (v30)
                  goto LABEL_9;
              }
              __break(1u);
              return result;
            }
LABEL_12:
            v29 = v31;
LABEL_9:
            v19 = (v30 - 1) & v30;
            v22 = __clz(__rbit64(v30)) + (v29 << 6);
            v57 = v29;
            goto LABEL_5;
          }
        }
      }
    }
LABEL_23:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v32 - 8) + 56))(v12, 1, 1, v32);
    v19 = 0;
  }
  __break(1u);
LABEL_39:
  swift_once();
LABEL_34:
  v46 = sub_23D66BFDC();
  __swift_project_value_buffer(v46, (uint64_t)qword_256C88B78);
  v47 = sub_23D66C588();
  v48 = sub_23D66BFC4();
  v49 = v47;
  if (os_log_type_enabled(v48, v47))
  {
    v50 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v50 = 0;
    _os_log_impl(&dword_23D5A8000, v48, v49, "member being added to group missing key info", v50, 2u);
    MEMORY[0x242636844](v50, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v51 = 320;
  *(_OWORD *)(v51 + 8) = xmmword_23D66E0D0;
  *(_QWORD *)(v51 + 24) = 0x800000023D677E80;
  *(_QWORD *)(v51 + 32) = 0xD000000000000052;
  *(_QWORD *)(v51 + 40) = 0x800000023D676EF0;
  swift_willThrow();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D5C4EFC(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v30 = a7;
  v31 = a8;
  v28 = a6;
  v13 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v32 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v16 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = a2;
  v20 = *(_QWORD *)(a1 + 8);
  v19 = *(_QWORD *)(a1 + 16);
  sub_23D5AFA60(a3, a4);
  sub_23D5DDA20(v20, v19);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v21 = *(_QWORD *)(a1 + 24);
  v22 = *(_QWORD *)(a1 + 32);
  v23 = v28;
  sub_23D5AFA60(a5, v28);
  sub_23D5DDA20(v21, v22);
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = v23;
  sub_23D5E7298(v30, (uint64_t)v18, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  v24 = type metadata accessor for GKCrypto_GroupBlob(0);
  v25 = a1 + *(int *)(v24 + 36);
  sub_23D5AEF8C(v25, &qword_256C79748);
  sub_23D5E7F64((uint64_t)v18, v25, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56))(v25, 0, 1, v29);
  sub_23D5E7298(v31, (uint64_t)v15, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  v26 = a1 + *(int *)(v24 + 32);
  sub_23D5AEF8C(v26, &qword_256C79740);
  sub_23D5E7F64((uint64_t)v15, v26, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v32 + 56))(v26, 0, 1, v33);
}

uint64_t sub_23D5C50D4(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t inited;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  int64_t v36;
  int64_t v37;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v39;
  _QWORD *v40;
  unint64_t v41;
  int64_t v42;
  _QWORD *v43;
  unint64_t v44;
  int64_t v45;
  _QWORD *v46;
  unint64_t v47;
  unint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  char *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t *v62;
  uint64_t v63;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  MEMORY[0x24BDAC7A8](v3);
  v60 = (uint64_t)&v52 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v59 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v57 = *(_QWORD *)(v59 - 8);
  MEMORY[0x24BDAC7A8](v59);
  v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v62 = (uint64_t *)((char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = v1[1];
  v13 = v1[2];
  v16 = v1[3];
  v15 = v1[4];
  v56 = type metadata accessor for GKCrypto_GroupBlob(0);
  v17 = *(int *)(v56 + 32);
  v58 = v1;
  sub_23D5AEF48((uint64_t)v1 + v17, (uint64_t)v9, &qword_256C79740);
  v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10);
  v55 = v14;
  v54 = v13;
  v53 = v16;
  v52 = (char *)v15;
  v19 = v62;
  if (v18 == 1)
  {
    *v62 = MEMORY[0x24BEE4AF8];
    sub_23D5AFA60(v14, v13);
    sub_23D5AFA60(v16, v15);
    sub_23D66BE5C();
    sub_23D5AEF8C((uint64_t)v9, &qword_256C79740);
  }
  else
  {
    sub_23D5E7F64((uint64_t)v9, (uint64_t)v62, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_23D5AFA60(v14, v13);
    sub_23D5AFA60(v16, v15);
  }
  v63 = *v19;
  swift_bridgeObjectRetain_n();
  sub_23D5DD0CC(&v63);
  swift_bridgeObjectRelease();
  v20 = (uint64_t *)sub_23D62FE18(v63);
  v61 = v21;
  v62 = v20;
  swift_release();
  sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  v22 = v60;
  sub_23D5AEF48((uint64_t)v58 + *(int *)(v56 + 36), v60, &qword_256C79748);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v57 + 48))(v22, 1, v59) == 1)
  {
    *(_OWORD *)v6 = xmmword_23D66DF40;
    *((_OWORD *)v6 + 1) = xmmword_23D66DF40;
    *((_OWORD *)v6 + 2) = xmmword_23D66DF40;
    *((_OWORD *)v6 + 3) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v22, &qword_256C79748);
  }
  else
  {
    sub_23D5E7F64(v22, (uint64_t)v6, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
  v24 = *((_QWORD *)v6 + 6);
  v25 = *((_QWORD *)v6 + 7);
  *(_QWORD *)(inited + 32) = v24;
  v26 = *((_QWORD *)v6 + 2);
  v27 = *((_QWORD *)v6 + 3);
  *(_QWORD *)(inited + 40) = v25;
  *(_QWORD *)(inited + 48) = v26;
  v28 = *((_QWORD *)v6 + 4);
  v29 = *((_QWORD *)v6 + 5);
  *(_QWORD *)(inited + 56) = v27;
  *(_QWORD *)(inited + 64) = v28;
  v30 = *(_QWORD *)v6;
  v31 = *((_QWORD *)v6 + 1);
  *(_QWORD *)(inited + 72) = v29;
  *(_QWORD *)(inited + 80) = v30;
  *(_QWORD *)(inited + 88) = v31;
  sub_23D5AFA60(v24, v25);
  sub_23D5AFA60(v26, v27);
  sub_23D5AFA60(v28, v29);
  sub_23D5AFA60(v30, v31);
  v32 = sub_23D62FE18(inited);
  v34 = v33;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5E6950((uint64_t)v6, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  v36 = a1[2];
  v37 = v36 + 4;
  if (__OFADD__(v36, 4))
  {
    __break(1u);
LABEL_23:
    a1 = sub_23D62B638((_QWORD *)(v35 > 1), v36, 1, a1);
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v37 > a1[3] >> 1)
  {
    if (v36 <= v37)
      v39 = v36 + 4;
    else
      v39 = v36;
    a1 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v39, 1, a1);
  }
  v26 = v55;
  v27 = v54;
  v31 = v53;
  v6 = v52;
  sub_23D5AFA60(v55, v54);
  v37 = a1[2];
  v35 = a1[3];
  v36 = v37 + 1;
  if (v37 >= v35 >> 1)
    goto LABEL_23;
LABEL_15:
  a1[2] = v36;
  v40 = &a1[2 * v37];
  v40[4] = v26;
  v40[5] = v27;
  sub_23D5AFA60(v31, (unint64_t)v6);
  v41 = a1[3];
  v42 = v37 + 2;
  if (v37 + 2 > (uint64_t)(v41 >> 1))
    a1 = sub_23D62B638((_QWORD *)(v41 > 1), v37 + 2, 1, a1);
  a1[2] = v42;
  v43 = &a1[2 * v36];
  v43[4] = v31;
  v43[5] = v6;
  sub_23D5AFA60((uint64_t)v62, v61);
  v44 = a1[3];
  v45 = v37 + 3;
  if (v37 + 3 > (uint64_t)(v44 >> 1))
    a1 = sub_23D62B638((_QWORD *)(v44 > 1), v37 + 3, 1, a1);
  a1[2] = v45;
  v46 = &a1[2 * v42];
  v47 = v61;
  v46[4] = v62;
  v46[5] = v47;
  sub_23D5AFA60(v32, v34);
  v48 = a1[3];
  if (v37 + 4 > (uint64_t)(v48 >> 1))
    a1 = sub_23D62B638((_QWORD *)(v48 > 1), v37 + 4, 1, a1);
  a1[2] = v37 + 4;
  v49 = &a1[2 * v45];
  v49[4] = v32;
  v49[5] = v34;
  sub_23D5DDA20(v31, (unint64_t)v6);
  sub_23D5DDA20((uint64_t)v62, v61);
  sub_23D5DDA20(v32, v34);
  sub_23D5DDA20(v26, v27);
  v50 = sub_23D62FE18((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v50;
}

uint64_t sub_23D5C565C(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t inited;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _OWORD *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  int64_t v45;
  int64_t v46;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v48;
  _QWORD *v49;
  unint64_t v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  _QWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  uint64_t v75;
  _OWORD *v76;
  unint64_t v77;
  uint64_t v78;
  int *v79;
  _QWORD *v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;

  v73 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
  MEMORY[0x24BDAC7A8](v2);
  v75 = (uint64_t)&v68 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v74 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v72 = *(_QWORD *)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v76 = (_OWORD *)((char *)&v68 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  MEMORY[0x24BDAC7A8](v5);
  v71 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v69 = *(_QWORD *)(v70 - 8);
  MEMORY[0x24BDAC7A8](v70);
  v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v68 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (uint64_t *)((char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0));
  v16 = v1[1];
  v17 = v1[2];
  v18 = v1[3];
  v19 = v1[4];
  v79 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v80 = v1;
  sub_23D5AEF48((uint64_t)v1 + v79[8], (uint64_t)v11, &qword_256C79740);
  v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12);
  v78 = v16;
  v77 = v17;
  if (v20 == 1)
  {
    *v15 = MEMORY[0x24BEE4AF8];
    sub_23D5AFA60(v16, v17);
    sub_23D5AFA60(v18, v19);
    sub_23D66BE5C();
    sub_23D5AEF8C((uint64_t)v11, &qword_256C79740);
  }
  else
  {
    sub_23D5E7F64((uint64_t)v11, (uint64_t)v15, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_23D5AFA60(v16, v17);
    sub_23D5AFA60(v18, v19);
  }
  v85 = *v15;
  swift_bridgeObjectRetain_n();
  sub_23D5DD0CC(&v85);
  v21 = v73;
  swift_bridgeObjectRelease();
  v22 = sub_23D62FE18(v85);
  v81 = v23;
  v82 = v22;
  swift_release();
  sub_23D5E6950((uint64_t)v15, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  v24 = v71;
  sub_23D5AEF48((uint64_t)v80 + v79[9], v71, &qword_256C79748);
  v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v24, 1, v70);
  v83 = v19;
  v84 = v18;
  if (v25 == 1)
  {
    *(_OWORD *)v8 = xmmword_23D66DF40;
    *((_OWORD *)v8 + 1) = xmmword_23D66DF40;
    *((_OWORD *)v8 + 2) = xmmword_23D66DF40;
    *((_OWORD *)v8 + 3) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v24, &qword_256C79748);
  }
  else
  {
    sub_23D5E7F64(v24, (uint64_t)v8, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
  v27 = *((_QWORD *)v8 + 6);
  v28 = *((_QWORD *)v8 + 7);
  *(_QWORD *)(inited + 32) = v27;
  v29 = *((_QWORD *)v8 + 2);
  v30 = *((_QWORD *)v8 + 3);
  *(_QWORD *)(inited + 40) = v28;
  *(_QWORD *)(inited + 48) = v29;
  v31 = *((_QWORD *)v8 + 4);
  v32 = *((_QWORD *)v8 + 5);
  *(_QWORD *)(inited + 56) = v30;
  *(_QWORD *)(inited + 64) = v31;
  v34 = *(_QWORD *)v8;
  v33 = *((_QWORD *)v8 + 1);
  *(_QWORD *)(inited + 72) = v32;
  *(_QWORD *)(inited + 80) = v34;
  *(_QWORD *)(inited + 88) = v33;
  sub_23D5AFA60(v27, v28);
  sub_23D5AFA60(v29, v30);
  sub_23D5AFA60(v31, v32);
  sub_23D5AFA60(v34, v33);
  v35 = sub_23D62FE18(inited);
  v37 = v36;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5E6950((uint64_t)v8, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  v38 = v75;
  sub_23D5AEF48((uint64_t)v80 + v79[10], v75, qword_256C79750);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v72 + 48))(v38, 1, v74) == 1)
  {
    v39 = v76;
    *v76 = xmmword_23D66DF40;
    v39[1] = xmmword_23D66DF40;
    v39[2] = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v38, qword_256C79750);
  }
  else
  {
    v39 = v76;
    sub_23D5E7F64(v38, (uint64_t)v76, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  v40 = v78;
  v41 = v77;
  v42 = *((_QWORD *)v39 + 2);
  v43 = *((_QWORD *)v39 + 3);
  sub_23D5AFA60(v42, v43);
  sub_23D5E6950((uint64_t)v39, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  v45 = v21[2];
  v46 = v45 + 5;
  if (__OFADD__(v45, 5))
  {
    __break(1u);
LABEL_28:
    v21 = sub_23D62B638((_QWORD *)(v44 > 1), v45, 1, v21);
    goto LABEL_18;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v46 > v21[3] >> 1)
  {
    if (v45 <= v46)
      v48 = v45 + 5;
    else
      v48 = v45;
    v21 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v48, 1, v21);
  }
  sub_23D5AFA60(v40, v41);
  v34 = v21[2];
  v44 = v21[3];
  v45 = v34 + 1;
  if (v34 >= v44 >> 1)
    goto LABEL_28;
LABEL_18:
  v21[2] = v45;
  v49 = &v21[2 * v34];
  v49[4] = v40;
  v49[5] = v41;
  sub_23D5AFA60(v84, v83);
  v50 = v21[3];
  v51 = v34 + 2;
  if ((uint64_t)(v34 + 2) > (uint64_t)(v50 >> 1))
    v21 = sub_23D62B638((_QWORD *)(v50 > 1), v34 + 2, 1, v21);
  v21[2] = v51;
  v52 = &v21[2 * v45];
  v53 = v82;
  v54 = v83;
  v52[4] = v84;
  v52[5] = v54;
  sub_23D5AFA60(v53, v81);
  v55 = v21[3];
  v56 = v34 + 3;
  if ((uint64_t)(v34 + 3) > (uint64_t)(v55 >> 1))
    v21 = sub_23D62B638((_QWORD *)(v55 > 1), v34 + 3, 1, v21);
  v21[2] = v56;
  v57 = &v21[2 * v51];
  v58 = v81;
  v57[4] = v82;
  v57[5] = v58;
  sub_23D5AFA60(v35, v37);
  v59 = v21[3];
  v60 = v34 + 4;
  if ((uint64_t)(v34 + 4) > (uint64_t)(v59 >> 1))
    v21 = sub_23D62B638((_QWORD *)(v59 > 1), v34 + 4, 1, v21);
  v21[2] = v60;
  v61 = &v21[2 * v56];
  v61[4] = v35;
  v61[5] = v37;
  sub_23D5AFA60(v42, v43);
  v62 = v21[3];
  if ((uint64_t)(v34 + 5) > (uint64_t)(v62 >> 1))
    v21 = sub_23D62B638((_QWORD *)(v62 > 1), v34 + 5, 1, v21);
  v64 = v83;
  v63 = v84;
  v21[2] = v34 + 5;
  v65 = &v21[2 * v60];
  v65[4] = v42;
  v65[5] = v43;
  sub_23D5DDA20(v63, v64);
  sub_23D5DDA20(v82, v81);
  sub_23D5DDA20(v35, v37);
  sub_23D5DDA20(v42, v43);
  sub_23D5DDA20(v40, v41);
  v66 = sub_23D62FE18((uint64_t)v21);
  swift_bridgeObjectRelease();
  return v66;
}

uint64_t sub_23D5C5D74(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t inited;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int (*v43)(uint64_t, uint64_t, uint64_t);
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  int64_t v56;
  int64_t v57;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v59;
  _QWORD *v60;
  unint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  _QWORD *v73;
  unint64_t v74;
  unint64_t v75;
  unint64_t v76;
  _QWORD *v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  _QWORD *v86;
  _OWORD *v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  int *v94;
  _QWORD *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;

  v86 = a1;
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v91 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v88 = (uint64_t)&v82 - v5;
  v89 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v85 = *(_QWORD *)(v89 - 8);
  v6 = MEMORY[0x24BDAC7A8](v89);
  v90 = (char *)&v82 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v87 = (_OWORD *)((char *)&v82 - v8);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  MEMORY[0x24BDAC7A8](v9);
  v96 = (unint64_t)&v82 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v84 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v83 = *(_QWORD *)(v84 - 8);
  MEMORY[0x24BDAC7A8](v84);
  v12 = (char *)&v82 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v82 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v17 = *(_QWORD *)(v16 - 8);
  MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v82 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v21 = v1[1];
  v20 = v1[2];
  v23 = v1[3];
  v22 = v1[4];
  v94 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v95 = v1;
  sub_23D5AEF48((uint64_t)v1 + v94[8], (uint64_t)v15, &qword_256C79740);
  v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16);
  v93 = v20;
  if (v24 == 1)
  {
    *v19 = MEMORY[0x24BEE4AF8];
    sub_23D5AFA60(v21, v20);
    sub_23D5AFA60(v23, v22);
    sub_23D66BE5C();
    sub_23D5AEF8C((uint64_t)v15, &qword_256C79740);
  }
  else
  {
    sub_23D5E7F64((uint64_t)v15, (uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_23D5AFA60(v21, v20);
    sub_23D5AFA60(v23, v22);
  }
  v101 = *v19;
  swift_bridgeObjectRetain_n();
  sub_23D5DD0CC(&v101);
  v25 = v86;
  swift_bridgeObjectRelease();
  v26 = sub_23D62FE18(v101);
  v97 = v27;
  v98 = v26;
  swift_release();
  sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  v28 = v96;
  sub_23D5AEF48((uint64_t)v95 + v94[9], v96, &qword_256C79748);
  v29 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v83 + 48))(v28, 1, v84);
  v92 = v21;
  v99 = v22;
  v100 = v23;
  if (v29 == 1)
  {
    *(_OWORD *)v12 = xmmword_23D66DF40;
    *((_OWORD *)v12 + 1) = xmmword_23D66DF40;
    *((_OWORD *)v12 + 2) = xmmword_23D66DF40;
    *((_OWORD *)v12 + 3) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v28, &qword_256C79748);
  }
  else
  {
    sub_23D5E7F64(v28, (uint64_t)v12, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
  v31 = *((_QWORD *)v12 + 6);
  v32 = *((_QWORD *)v12 + 7);
  *(_QWORD *)(inited + 32) = v31;
  v33 = *((_QWORD *)v12 + 2);
  v34 = *((_QWORD *)v12 + 3);
  *(_QWORD *)(inited + 40) = v32;
  *(_QWORD *)(inited + 48) = v33;
  v36 = *((_QWORD *)v12 + 4);
  v35 = *((_QWORD *)v12 + 5);
  *(_QWORD *)(inited + 56) = v34;
  *(_QWORD *)(inited + 64) = v36;
  v38 = *(_QWORD *)v12;
  v37 = *((_QWORD *)v12 + 1);
  *(_QWORD *)(inited + 72) = v35;
  *(_QWORD *)(inited + 80) = v38;
  *(_QWORD *)(inited + 88) = v37;
  sub_23D5AFA60(v31, v32);
  sub_23D5AFA60(v33, v34);
  sub_23D5AFA60(v36, v35);
  sub_23D5AFA60(v38, v37);
  v39 = sub_23D62FE18(inited);
  v96 = v40;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5E6950((uint64_t)v12, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  v41 = (uint64_t)v95 + v94[10];
  v42 = v88;
  sub_23D5AEF48(v41, v88, qword_256C79750);
  v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  v44 = v89;
  if (v43(v42, 1, v89) == 1)
  {
    v45 = (unint64_t)v87;
    *v87 = xmmword_23D66DF40;
    *(_OWORD *)(v45 + 16) = xmmword_23D66DF40;
    *(_OWORD *)(v45 + 32) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v42, qword_256C79750);
  }
  else
  {
    v45 = (unint64_t)v87;
    sub_23D5E7F64(v42, (uint64_t)v87, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  v46 = (uint64_t)v90;
  v47 = *(_QWORD *)(v45 + 16);
  v48 = *(_QWORD *)(v45 + 24);
  sub_23D5AFA60(v47, v48);
  sub_23D5E6950(v45, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  v49 = v41;
  v50 = v91;
  sub_23D5AEF48(v49, v91, qword_256C79750);
  v51 = v43(v50, 1, v44);
  v52 = v92;
  if (v51 == 1)
  {
    *(_OWORD *)v46 = xmmword_23D66DF40;
    *(_OWORD *)(v46 + 16) = xmmword_23D66DF40;
    *(_OWORD *)(v46 + 32) = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v50, qword_256C79750);
  }
  else
  {
    sub_23D5E7F64(v50, v46, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  }
  v53 = *(_QWORD *)v46;
  v54 = *(_QWORD *)(v46 + 8);
  sub_23D5AFA60(*(_QWORD *)v46, v54);
  sub_23D5E6950(v46, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  v56 = v25[2];
  v57 = v56 + 6;
  if (__OFADD__(v56, 6))
  {
    __break(1u);
LABEL_33:
    v25 = sub_23D62B638((_QWORD *)(v55 > 1), v56, 1, v25);
    goto LABEL_21;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v57 > v25[3] >> 1)
  {
    if (v56 <= v57)
      v59 = v56 + 6;
    else
      v59 = v56;
    v25 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v59, 1, v25);
  }
  v57 = v93;
  sub_23D5AFA60(v52, v93);
  v45 = v25[2];
  v55 = v25[3];
  v56 = v45 + 1;
  if (v45 >= v55 >> 1)
    goto LABEL_33;
LABEL_21:
  v25[2] = v56;
  v60 = &v25[2 * v45];
  v60[4] = v52;
  v60[5] = v57;
  sub_23D5AFA60(v100, v99);
  v61 = v25[3];
  v62 = v45 + 2;
  if ((uint64_t)(v45 + 2) > (uint64_t)(v61 >> 1))
    v25 = sub_23D62B638((_QWORD *)(v61 > 1), v45 + 2, 1, v25);
  v25[2] = v62;
  v63 = &v25[2 * v56];
  v64 = v98;
  v65 = v99;
  v63[4] = v100;
  v63[5] = v65;
  sub_23D5AFA60(v64, v97);
  v66 = v25[3];
  v67 = v45 + 3;
  if ((uint64_t)(v45 + 3) > (uint64_t)(v66 >> 1))
    v25 = sub_23D62B638((_QWORD *)(v66 > 1), v45 + 3, 1, v25);
  v25[2] = v67;
  v68 = &v25[2 * v62];
  v69 = v96;
  v70 = v97;
  v68[4] = v98;
  v68[5] = v70;
  sub_23D5AFA60(v39, v69);
  v71 = v25[3];
  v72 = v45 + 4;
  if ((uint64_t)(v45 + 4) > (uint64_t)(v71 >> 1))
    v25 = sub_23D62B638((_QWORD *)(v71 > 1), v45 + 4, 1, v25);
  v25[2] = v72;
  v73 = &v25[2 * v67];
  v74 = v96;
  v73[4] = v39;
  v73[5] = v74;
  sub_23D5AFA60(v47, v48);
  v75 = v25[3];
  v76 = v45 + 5;
  if ((uint64_t)(v45 + 5) > (uint64_t)(v75 >> 1))
    v25 = sub_23D62B638((_QWORD *)(v75 > 1), v45 + 5, 1, v25);
  v25[2] = v76;
  v77 = &v25[2 * v72];
  v77[4] = v47;
  v77[5] = v48;
  sub_23D5AFA60(v53, v54);
  v78 = v25[3];
  if ((uint64_t)(v45 + 6) > (uint64_t)(v78 >> 1))
    v25 = sub_23D62B638((_QWORD *)(v78 > 1), v45 + 6, 1, v25);
  v25[2] = v45 + 6;
  v79 = &v25[2 * v76];
  v79[4] = v53;
  v79[5] = v54;
  sub_23D5DDA20(v100, v99);
  sub_23D5DDA20(v98, v97);
  sub_23D5DDA20(v39, v96);
  sub_23D5DDA20(v47, v48);
  sub_23D5DDA20(v53, v54);
  sub_23D5DDA20(v52, v93);
  v80 = sub_23D62FE18((uint64_t)v25);
  swift_bridgeObjectRelease();
  return v80;
}

uint64_t Group.ServerUpdateBlobs.groupBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23D5AFA60(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t Group.ServerUpdateBlobs.newRSVPResponseBlobs.getter()
{
  return swift_bridgeObjectRetain();
}

uint64_t Group.ServerUpdateBlobs.memberSeedBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 24);
  sub_23D5E7284(v1, *(_QWORD *)(v0 + 32));
  return v1;
}

uint64_t Group.ServerUpdateBlobs.adminSeedBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 40);
  sub_23D5E7284(v1, *(_QWORD *)(v0 + 48));
  return v1;
}

uint64_t Group.ServerUpdateBlobs.creatorRSVP.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 56);
  sub_23D5E7284(v1, *(_QWORD *)(v0 + 64));
  return v1;
}

uint64_t sub_23D5C6698@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void (*a5)(uint64_t, uint64_t)@<X5>, unint64_t a6@<X6>, _OWORD *a7@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  void (*v21)(char *);
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  __int128 v32;
  uint64_t result;
  void (*v34)(char *, uint64_t);
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  void (*v49)(uint64_t, uint64_t);
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  os_log_type_t v54;
  NSObject *v55;
  os_log_type_t v56;
  uint8_t *v57;
  int v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  _OWORD *v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  void (*v83)(uint64_t, uint64_t);
  unint64_t v84;
  uint64_t v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  __int128 v89;
  unint64_t v90;
  uint64_t v91;
  _OWORD *v92;
  void (*v93)(uint64_t, uint64_t);
  unint64_t v94;
  uint8_t *v95;
  uint64_t v96;
  unint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _OWORD v100[4];
  uint64_t v101;
  void (*v102)(uint64_t, uint64_t);
  int v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  void (*v108)(uint64_t, uint64_t);
  unint64_t v109;
  uint64_t v110;
  unint64_t v111;
  unint64_t v112;

  v97 = a6;
  v92 = a7;
  v11 = *(_QWORD *)(a4 - 8);
  v12 = MEMORY[0x24BDAC7A8](a1);
  v14 = (char *)&v80 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = (unint64_t *)MEMORY[0x24BDAC7A8](v12);
  v19 = (char *)&v80 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = *v17;
  v21 = *(void (**)(char *))(v16 + 16);
  v94 = v22;
  v21(v19);
  v95 = (uint8_t *)a2;
  v93 = a5;
  if (v20)
  {
    (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a3);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a4);
LABEL_4:
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
    goto LABEL_5;
  }
  v23 = sub_23D66C54C();
  (*(void (**)(char *, uint64_t))(v16 + 8))(v19, a3);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, a2, a4);
  if (v23)
    goto LABEL_4;
  v52 = sub_23D66C54C();
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, a4);
  if (!v52)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v53 = sub_23D66BFDC();
    __swift_project_value_buffer(v53, (uint64_t)qword_256C88B78);
    v54 = sub_23D66C570();
    v55 = sub_23D66BFC4();
    v56 = v54;
    if (os_log_type_enabled(v55, v54))
    {
      v57 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v57 = 0;
      _os_log_impl(&dword_23D5A8000, v55, v56, "group update is the identity function", v57, 2u);
      MEMORY[0x242636844](v57, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v31 = 322;
    v32 = xmmword_23D66E110;
    goto LABEL_11;
  }
LABEL_5:
  v24 = v98;
  v25 = v98[12];
  if (v25 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v26 = sub_23D66BFDC();
    __swift_project_value_buffer(v26, (uint64_t)qword_256C88B78);
    v27 = sub_23D66C588();
    v28 = sub_23D66BFC4();
    v29 = v27;
    if (os_log_type_enabled(v28, v27))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23D5A8000, v28, v29, "must be an administrator to request membership update", v30, 2u);
      MEMORY[0x242636844](v30, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v31 = 378;
    v32 = xmmword_23D66E100;
LABEL_11:
    *(_OWORD *)(v31 + 8) = v32;
    *(_QWORD *)(v31 + 24) = 0x800000023D677080;
    *(_QWORD *)(v31 + 32) = 0xD000000000000052;
    *(_QWORD *)(v31 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  v34 = (void (*)(char *, uint64_t))v98[11];
  v35 = v98[13];
  v36 = v98[14];
  v37 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  v38 = *((unsigned __int8 *)v98 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
  if (v38 == 6 || v38 == 0)
  {
    v91 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
    v112 = v20;
    swift_beginAccess();
    v99 = v24[7];
    sub_23D5E7FA8((uint64_t)v34, v25, v35, v36);
    swift_bridgeObjectRetain();
    v40 = v96;
    sub_23D5C0444(&v102, (uint64_t *)v100, &v112, v94, (uint64_t)v95, v34, (void (*)(uint64_t *, uint64_t))v25, v35, v36, (uint64_t)&v99, a3, a4, v93, v97);
    swift_bridgeObjectRelease();
    if (!v40)
    {
      v97 = v35;
      v58 = v103;
      v96 = v104;
      v84 = v36;
      v59 = v105;
      v95 = (uint8_t *)v106;
      v94 = v107;
      v93 = v108;
      v90 = v109;
      v82 = v110;
      v81 = v111;
      v89 = v100[0];
      v88 = v100[1];
      v87 = v100[2];
      v86 = v100[3];
      v85 = v101;
      v83 = v102;
      v24[7] = v102;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      swift_beginAccess();
      *((_DWORD *)v24 + 16) = v58;
      v61 = v24[11];
      v60 = v24[12];
      v62 = v24[13];
      v63 = v24[14];
      v64 = v96;
      v24[11] = v96;
      v24[12] = v59;
      v65 = (uint64_t)v95;
      v66 = v94;
      v24[13] = v95;
      v24[14] = v66;
      sub_23D5E7FA8(v64, v59, v65, v66);
      sub_23D5E7220(v61, v60, v62, v63);
      v67 = v24[9];
      v68 = v24[10];
      v69 = v93;
      v70 = v90;
      v24[9] = v93;
      v24[10] = v70;
      sub_23D5AFA60((uint64_t)v69, v70);
      sub_23D5DDA20(v67, v68);
      v71 = (_QWORD *)((char *)v24 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
      v72 = *(_QWORD *)((char *)v24 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
      v73 = *(_QWORD *)((char *)v24 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
      v74 = v82;
      v75 = v81;
      *v71 = v82;
      v71[1] = v75;
      sub_23D5E7284(v74, v75);
      sub_23D5E725C(v72, v73);
      sub_23D5E7220((uint64_t)v34, v25, v97, v84);
      swift_bridgeObjectRelease();
      sub_23D5E7220(v96, v59, (uint64_t)v95, v94);
      sub_23D5DDA20((uint64_t)v93, v90);
      result = sub_23D5E725C(v74, v75);
      *((_BYTE *)v24 + v91) = 1;
      v76 = v92;
      v77 = v88;
      *v92 = v89;
      v76[1] = v77;
      v78 = v86;
      v76[2] = v87;
      v76[3] = v78;
      *((_QWORD *)v76 + 8) = v85;
      return result;
    }
    v41 = (uint64_t)v34;
    v42 = v25;
    v43 = v35;
  }
  else
  {
    v96 = v98[11];
    sub_23D5AFA60((uint64_t)v34, v25);
    v97 = v35;
    sub_23D5E7284(v35, v36);
    if (qword_256C78B10 != -1)
      swift_once();
    v44 = sub_23D66BFDC();
    __swift_project_value_buffer(v44, (uint64_t)qword_256C88B78);
    v45 = sub_23D66C588();
    swift_retain_n();
    v46 = sub_23D66BFC4();
    v47 = v45;
    if (os_log_type_enabled(v46, v45))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      v49 = (void (*)(uint64_t, uint64_t))swift_slowAlloc();
      v102 = v49;
      *(_DWORD *)v48 = 136315138;
      v95 = v48 + 4;
      v50 = sub_23D5B421C(*((_BYTE *)v24 + v37));
      *(_QWORD *)&v100[0] = sub_23D5DDBDC(v50, v51, (uint64_t *)&v102);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23D5A8000, v46, v47, "improper state change in the group, current state is %s", v48, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v49, -1, -1);
      MEMORY[0x242636844](v48, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v79 = 330;
    *(_OWORD *)(v79 + 8) = xmmword_23D66E0F0;
    *(_QWORD *)(v79 + 24) = 0x800000023D677080;
    *(_QWORD *)(v79 + 32) = 0xD000000000000052;
    *(_QWORD *)(v79 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    v41 = v96;
    v42 = v25;
    v43 = v97;
  }
  return sub_23D5E7220(v41, v42, v43, v36);
}

uint64_t *sub_23D5C6FFC(char *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  os_log_type_t v35;
  NSObject *v36;
  uint8_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  os_log_type_t v48;
  NSObject *v49;
  os_log_type_t v50;
  uint8_t *v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  uint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  char v94;
  unint64_t v95;
  uint64_t v96;
  int v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  unint64_t v105;
  int v106;
  uint64_t v107;
  os_log_type_t v108;
  NSObject *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t *v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  os_log_type_t v125;
  NSObject *v126;
  os_log_type_t v127;
  _BOOL4 v128;
  uint64_t v129;
  uint8_t *v130;
  uint64_t v131;
  uint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  unint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  unint64_t v142;
  char *v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t v149;
  char *v150;
  uint64_t v151;
  uint64_t v152;
  unint64_t v153;
  unint64_t v154;
  uint64_t v155;
  uint64_t v156;
  unint64_t v157;
  unint64_t v158;
  _QWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  unint64_t v172;
  unint64_t v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t *v181;
  unint64_t v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  unint64_t *v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  uint64_t v190;
  uint64_t v191;
  unint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unint64_t v196;
  unint64_t v197;
  char *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  unint64_t v206;
  char *v207;
  __int128 v208;
  uint64_t *v209;
  ValueMetadata *v210;
  uint64_t v211;
  unint64_t v212;
  char *v213;
  unint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t *v217;
  unint64_t v218;
  uint64_t v219;

  v3 = v1;
  v5 = sub_23D66C330();
  v199 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v198 = (char *)&v179 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23D66C2AC();
  v200 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v206 = (unint64_t)&v179 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v204 = sub_23D66C210();
  v202 = *(_QWORD *)(v204 - 8);
  MEMORY[0x24BDAC7A8](v204);
  v201 = (char *)&v179 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v205 = sub_23D66C258();
  v203 = *(_QWORD *)(v205 - 8);
  MEMORY[0x24BDAC7A8](v205);
  v207 = (char *)&v179 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for MembershipVerifier(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v179 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79118);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v179 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = *(_QWORD *)(v3 + 96);
  if (v18 >> 60 != 15 && *(_BYTE *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 1)
  {
    v193 = v2;
    v19 = *a1;
    v20 = *(_QWORD *)(v3 + 88);
    v22 = *(_QWORD *)(v3 + 104);
    v21 = *(_QWORD *)(v3 + 112);
    if ((v19 & 1) != 0)
    {
      v23 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
      *(_BYTE *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 7;
      v195 = v20;
      v196 = v18;
      sub_23D5AFA60(v20, v18);
      sub_23D5E7284(v22, v21);
      v24 = v21;
      if (qword_256C78B10 != -1)
        swift_once();
      v25 = sub_23D66BFDC();
      __swift_project_value_buffer(v25, (uint64_t)qword_256C88B78);
      v26 = sub_23D66C588();
      swift_retain_n();
      v27 = sub_23D66BFC4();
      if (os_log_type_enabled(v27, v26))
      {
        v28 = (uint8_t *)swift_slowAlloc();
        v29 = swift_slowAlloc();
        v197 = v24;
        v30 = v29;
        *(_QWORD *)&v208 = v29;
        *(_DWORD *)v28 = 136315138;
        v31 = sub_23D5B421C(*(_BYTE *)(v3 + v23));
        v219 = sub_23D5DDBDC(v31, v32, (uint64_t *)&v208);
        sub_23D66C5D0();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23D5A8000, v27, v26, "failed to update group, setting state to %s", v28, 0xCu);
        swift_arrayDestroy();
        v33 = v30;
        v24 = v197;
        MEMORY[0x242636844](v33, -1, -1);
        MEMORY[0x242636844](v28, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      v41 = &qword_256C790D8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v56 = 368;
      *(_OWORD *)(v56 + 8) = xmmword_23D66E150;
      *(_QWORD *)(v56 + 24) = 0x800000023D6770D0;
      *(_QWORD *)(v56 + 32) = 0xD000000000000052;
      *(_QWORD *)(v56 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      v53 = v195;
      v54 = v196;
      v55 = v22;
      goto LABEL_22;
    }
    v188 = v5;
    v194 = v22;
    v197 = v21;
    v43 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
    if (v43 >> 60 == 15)
    {
      v44 = v20;
      v45 = v18;
      sub_23D5AFA60(v20, v18);
      v46 = v194;
      v24 = v197;
      sub_23D5E7284(v194, v197);
      if (qword_256C78B10 != -1)
        swift_once();
      v47 = sub_23D66BFDC();
      __swift_project_value_buffer(v47, (uint64_t)qword_256C88B78);
      v48 = sub_23D66C588();
      v49 = sub_23D66BFC4();
      v50 = v48;
      if (os_log_type_enabled(v49, v48))
      {
        v51 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v51 = 0;
        _os_log_impl(&dword_23D5A8000, v49, v50, "finalizing membership updates without group blob", v51, 2u);
        MEMORY[0x242636844](v51, -1, -1);
      }

      v41 = &qword_256C790D8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v52 = 328;
      *(_OWORD *)(v52 + 8) = xmmword_23D66E140;
      *(_QWORD *)(v52 + 24) = 0x800000023D6770D0;
      *(_QWORD *)(v52 + 32) = 0xD000000000000052;
      *(_QWORD *)(v52 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      v53 = v44;
      v54 = v45;
      v55 = v46;
      goto LABEL_22;
    }
    v184 = v7;
    v185 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
    v191 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    v190 = *(_QWORD *)(v3 + 40);
    v192 = *(_QWORD *)(v3 + 48);
    v58 = (unint64_t *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
    v59 = v18;
    v60 = v20;
    swift_beginAccess();
    v186 = v58;
    v61 = *v58;
    v187 = *(_QWORD *)(v61 + 16);
    v195 = v60;
    v196 = v59;
    sub_23D5E7FA8(v60, v59, v194, v197);
    v189 = v43;
    sub_23D5E7284(v191, v43);
    if (v187)
    {
      v62 = v190;
      v63 = v192;
      sub_23D5AFA60(v190, v192);
      swift_bridgeObjectRetain();
      v187 = v61;
      v64 = sub_23D5DF394(v62, v63);
      v65 = v193;
      v66 = v62;
      if ((v67 & 1) == 0)
      {
        swift_bridgeObjectRelease();
        v95 = v192;
        sub_23D5DDA20(v62, v192);
LABEL_35:
        v41 = *(uint64_t **)(v3 + 24);
        *(_QWORD *)&v208 = *(_QWORD *)(v3 + 16);
        v96 = v208;
        *((_QWORD *)&v208 + 1) = v41;
        v215 = v66;
        v216 = v95;
        swift_beginAccess();
        v97 = *(_DWORD *)(v3 + 64);
        sub_23D5AFA60(v66, v95);
        sub_23D5AFA60(v96, (unint64_t)v41);
        v98 = v97;
        v99 = v191;
        v100 = v189;
        v101 = v65;
        sub_23D64D910((uint64_t *)&v208, &v215, v98, v191, v189);
        v102 = v197;
        v103 = v194;
        if (v101)
        {
          sub_23D5E725C(v99, v100);
          sub_23D5E7220(v195, v196, v103, v102);
          sub_23D5DDA20(v190, v192);
          sub_23D5DDA20(v96, (unint64_t)v41);
        }
        else
        {
          v104 = v190;
          v105 = v192;
          sub_23D5DDA20(v190, v192);
          sub_23D5DDA20(v96, (unint64_t)v41);
          *(_QWORD *)&v208 = v96;
          *((_QWORD *)&v208 + 1) = v41;
          v215 = v104;
          v216 = v105;
          v106 = *(_DWORD *)(v3 + 64);
          sub_23D5AFA60(v104, v105);
          sub_23D5AFA60(v96, (unint64_t)v41);
          sub_23D64DABC((uint64_t *)&v208, &v215, v195, v196, v103, v102, v106);
          v115 = v190;
          v116 = v192;
          sub_23D5DDA20(v190, v192);
          sub_23D5DDA20(v96, (unint64_t)v41);
          *(_QWORD *)&v208 = v96;
          *((_QWORD *)&v208 + 1) = v41;
          v215 = v115;
          v216 = v116;
          v117 = *(_QWORD *)(v3 + 72);
          v118 = *(_QWORD *)(v3 + 80);
          LODWORD(v104) = *(_DWORD *)(v3 + 64);
          sub_23D5AFA60(v115, v116);
          sub_23D5AFA60(v96, (unint64_t)v41);
          sub_23D5AFA60(v117, v118);
          sub_23D64DC80((uint64_t *)&v208, &v215, v117, v118, v104);
          sub_23D5DDA20(v117, v118);
          v119 = v190;
          v120 = v192;
          sub_23D5DDA20(v190, v192);
          sub_23D5DDA20(v96, (unint64_t)v41);
          *(_BYTE *)(v3 + v185) = 6;
          v121 = v186;
          swift_beginAccess();
          sub_23D5AFA60(v119, v120);
          sub_23D664510(v119, v120, &v208);
          sub_23D5DDA20(v119, v120);
          sub_23D5E7FE4(v208, *((unint64_t *)&v208 + 1), (uint64_t)v209, (unint64_t)v210, v211, v212);
          swift_endAccess();
          v122 = swift_bridgeObjectRetain();
          v123 = sub_23D5B1A98(v122);
          swift_bridgeObjectRelease();
          *v121 = sub_23D5B4EE4(MEMORY[0x24BEE4AF8]);
          swift_bridgeObjectRelease();
          v41 = (uint64_t *)sub_23D5C88C4(v123);
          swift_bridgeObjectRelease();
          sub_23D5E725C(v191, v189);
          sub_23D5E7220(v195, v196, v194, v197);
        }
        return v41;
      }
      v68 = (uint64_t *)(*(_QWORD *)(v187 + 56) + 48 * v64);
      v69 = v68[1];
      v181 = (uint64_t *)*v68;
      v180 = v69;
      v70 = v68[3];
      v182 = v68[2];
      v71 = v182;
      v72 = v68[5];
      v179 = v68[4];
      v183 = v72;
      sub_23D5AFA60((uint64_t)v181, v69);
      sub_23D5AFA60(v71, v70);
      v73 = v179;
      sub_23D5AFA60(v179, v72);
      swift_bridgeObjectRelease();
      v74 = v192;
      sub_23D5DDA20(v66, v192);
      sub_23D5DDA20((uint64_t)v181, v180);
      sub_23D5DDA20(v182, v70);
      sub_23D5DDA20(v73, v183);
      v75 = *v186;
      if (*(_QWORD *)(*v186 + 16))
      {
        sub_23D5AFA60(v66, v74);
        swift_bridgeObjectRetain();
        v76 = sub_23D5DF394(v66, v74);
        if ((v77 & 1) != 0)
        {
          v78 = (uint64_t *)(*(_QWORD *)(v75 + 56) + 48 * v76);
          v79 = *v78;
          v80 = v78[1];
          v81 = v78[2];
          v187 = v78[3];
          v82 = v78[4];
          v182 = v78[5];
          v181 = (uint64_t *)v79;
          sub_23D5AFA60(v79, v80);
          v183 = v81;
          v83 = v81;
          v84 = v187;
          sub_23D5AFA60(v83, v187);
          v180 = v82;
          v85 = v82;
          v86 = v182;
          sub_23D5AFA60(v85, v182);
          v87 = v80;
          swift_bridgeObjectRelease();
          sub_23D5DDA20(v190, v192);
          if (v80 >> 60 != 15)
          {
            v88 = v183;
            sub_23D5AFA60(v183, v84);
            sub_23D5E7FE4((uint64_t)v181, v87, v88, v84, v180, v86);
            v89 = (uint64_t *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers);
            swift_beginAccess();
            v90 = *v89;
            if (*(_QWORD *)(v90 + 16))
            {
              v91 = v190;
              v92 = v192;
              sub_23D5AFA60(v190, v192);
              swift_bridgeObjectRetain();
              v93 = sub_23D5DF394(v91, v92);
              if ((v94 & 1) != 0)
              {
                sub_23D5E7298(*(_QWORD *)(v90 + 56) + *(_QWORD *)(v12 + 72) * v93, (uint64_t)v17, type metadata accessor for MembershipVerifier);
                (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v12 + 56))(v17, 0, 1, v11);
              }
              else
              {
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v17, 1, 1, v11);
              }
              swift_bridgeObjectRelease();
              sub_23D5DDA20(v91, v92);
            }
            else
            {
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56))(v17, 1, 1, v11);
              v91 = v190;
              v92 = v192;
            }
            if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v17, 1, v11))
            {
              sub_23D5AEF8C((uint64_t)v17, &qword_256C79118);
              if (qword_256C78B10 != -1)
                swift_once();
              v124 = sub_23D66BFDC();
              __swift_project_value_buffer(v124, (uint64_t)qword_256C88B78);
              v125 = sub_23D66C588();
              v126 = sub_23D66BFC4();
              v127 = v125;
              v128 = os_log_type_enabled(v126, v125);
              v24 = v197;
              v112 = v194;
              v129 = v183;
              if (v128)
              {
                v130 = (uint8_t *)swift_slowAlloc();
                *(_WORD *)v130 = 0;
                _os_log_impl(&dword_23D5A8000, v126, v127, "missing originator membership verifier in group creation", v130, 2u);
                MEMORY[0x242636844](v130, -1, -1);
              }

              v41 = &qword_256C790D8;
              __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
              sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
              swift_allocError();
              *(_WORD *)v131 = 327;
              *(_OWORD *)(v131 + 8) = xmmword_23D66E120;
              *(_QWORD *)(v131 + 24) = 0x800000023D6770D0;
              *(_QWORD *)(v131 + 32) = 0xD000000000000052;
              *(_QWORD *)(v131 + 40) = 0x800000023D676EF0;
              swift_willThrow();
              sub_23D5DDA20(v129, v187);
LABEL_44:
              sub_23D5E725C(v191, v189);
              v53 = v195;
              v54 = v196;
              v55 = v112;
LABEL_22:
              sub_23D5E7220(v53, v54, v55, v24);
              return v41;
            }
            sub_23D5E7298((uint64_t)v17, (uint64_t)v14, type metadata accessor for MembershipVerifier);
            sub_23D5AEF8C((uint64_t)v17, &qword_256C79118);
            v132 = (uint64_t *)&v14[*(int *)(v11 + 24)];
            v134 = *v132;
            v133 = v132[1];
            sub_23D5AFA60(*v132, v133);
            sub_23D5E6950((uint64_t)v14, type metadata accessor for MembershipVerifier);
            v135 = *(_QWORD *)(v3 + 24);
            v217 = *(uint64_t **)(v3 + 16);
            v41 = v217;
            v218 = v135;
            v215 = v91;
            v216 = v92;
            v210 = &type metadata for AdminSeed;
            v180 = sub_23D5E803C();
            v211 = v180;
            v136 = (_QWORD *)swift_allocObject();
            *(_QWORD *)&v208 = v136;
            v137 = v195;
            v138 = v196;
            v136[2] = v195;
            v136[3] = v138;
            v139 = v91;
            v140 = v194;
            v141 = v197;
            v136[4] = v194;
            v136[5] = v141;
            sub_23D5E7FA8(v137, v138, v140, v141);
            sub_23D5AFA60(v139, v92);
            v142 = v187;
            sub_23D5AFA60(v183, v187);
            v181 = (uint64_t *)v134;
            v182 = v133;
            sub_23D5AFA60(v134, v133);
            sub_23D5AFA60((uint64_t)v41, v135);
            if (qword_256C78D18 != -1)
              swift_once();
            v143 = v207;
            v144 = v193;
            sub_23D61D638((uint64_t)&v208, 1, qword_256C890E0, *(uint64_t *)algn_256C890E8);
            if (v144)
            {
              __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
              sub_23D5E725C(v191, v189);
              sub_23D5E7220(v195, v196, v140, v197);
              v145 = (uint64_t)v181;
              v146 = v182;
              sub_23D5DDA20((uint64_t)v181, v182);
              v147 = v183;
              sub_23D5DDA20(v183, v142);
              sub_23D5DDA20(v145, v146);
              sub_23D5DDA20(v147, v142);
              sub_23D5DDA20(v190, v192);
              v148 = (uint64_t)v41;
              v149 = v135;
LABEL_58:
              sub_23D5DDA20(v148, v149);
              return v41;
            }
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
            v150 = v201;
            sub_23D66C228();
            v151 = sub_23D66C1F8();
            v152 = v140;
            v154 = v153;
            (*(void (**)(char *, uint64_t))(v202 + 8))(v150, v204);
            sub_23D5AFD60(v151, v154);
            v156 = v155;
            v158 = v157;
            sub_23D5DDA20(v151, v154);
            (*(void (**)(char *, uint64_t))(v203 + 8))(v143, v205);
            v210 = &type metadata for AdminSeed;
            v211 = v180;
            v159 = (_QWORD *)swift_allocObject();
            *(_QWORD *)&v208 = v159;
            v160 = v195;
            v161 = v196;
            v159[2] = v195;
            v159[3] = v161;
            v162 = v197;
            v159[4] = v152;
            v159[5] = v162;
            sub_23D5AFA60(v160, v161);
            sub_23D5E7284(v152, v162);
            if (qword_256C78D20 != -1)
              swift_once();
            v163 = v206;
            sub_23D61D674((uint64_t)&v208, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
            v193 = 0;
            v164 = v182;
            __swift_destroy_boxed_opaque_existential_1((uint64_t)&v208);
            v165 = v158;
            v166 = v198;
            sub_23D66C264();
            v167 = v156;
            v168 = sub_23D66C1F8();
            v170 = v169;
            (*(void (**)(char *, uint64_t))(v199 + 8))(v166, v188);
            sub_23D5AFD60(v168, v170);
            v207 = v171;
            v173 = v172;
            sub_23D5DDA20(v168, v170);
            (*(void (**)(unint64_t, uint64_t))(v200 + 8))(v163, v184);
            v174 = v183;
            v175 = v187;
            *(_QWORD *)&v208 = v183;
            *((_QWORD *)&v208 + 1) = v187;
            v41 = v181;
            v209 = v181;
            v210 = (ValueMetadata *)v164;
            v205 = v167;
            v211 = v167;
            v212 = v165;
            v176 = v173;
            v177 = (uint64_t)v207;
            v206 = v165;
            v213 = v207;
            v214 = v176;
            v178 = v193;
            sub_23D63FF68((uint64_t *)&v217, &v215, (uint64_t *)&v208, 0);
            if (v178)
            {
              sub_23D5E725C(v191, v189);
              sub_23D5E7220(v195, v196, v194, v162);
              sub_23D5DDA20((uint64_t)v41, v164);
              sub_23D5DDA20(v174, v175);
              sub_23D5DDA20(v174, v175);
              sub_23D5DDA20((uint64_t)v41, v164);
              sub_23D5DDA20(v205, v206);
              sub_23D5DDA20(v177, v176);
              sub_23D5DDA20(v215, v216);
              v148 = (uint64_t)v217;
              v149 = v218;
              goto LABEL_58;
            }
            sub_23D5DDA20((uint64_t)v41, v164);
            sub_23D5DDA20(v174, v175);
            sub_23D5DDA20(v174, v175);
            sub_23D5DDA20((uint64_t)v41, v164);
            sub_23D5DDA20(v205, v206);
            sub_23D5DDA20(v177, v176);
            sub_23D5DDA20(v215, v216);
            sub_23D5DDA20((uint64_t)v217, v218);
            v65 = 0;
            goto LABEL_33;
          }
        }
        else
        {
          swift_bridgeObjectRelease();
          sub_23D5DDA20(v66, v192);
        }
      }
      if (qword_256C78B10 != -1)
        swift_once();
      v107 = sub_23D66BFDC();
      __swift_project_value_buffer(v107, (uint64_t)qword_256C88B78);
      v108 = sub_23D66C588();
      v109 = sub_23D66BFC4();
      v110 = v108;
      v111 = os_log_type_enabled(v109, v108);
      v24 = v197;
      v112 = v194;
      if (v111)
      {
        v113 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v113 = 0;
        _os_log_impl(&dword_23D5A8000, v109, v110, "missing originator invite in group creation", v113, 2u);
        MEMORY[0x242636844](v113, -1, -1);
      }

      v41 = &qword_256C790D8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v114 = 326;
      *(_OWORD *)(v114 + 8) = xmmword_23D66E130;
      *(_QWORD *)(v114 + 24) = 0x800000023D6770D0;
      *(_QWORD *)(v114 + 32) = 0xD000000000000052;
      *(_QWORD *)(v114 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      goto LABEL_44;
    }
    v65 = v193;
LABEL_33:
    v95 = v192;
    v66 = v190;
    goto LABEL_35;
  }
  if (qword_256C78B10 != -1)
    swift_once();
  v34 = sub_23D66BFDC();
  __swift_project_value_buffer(v34, (uint64_t)qword_256C88B78);
  v35 = sub_23D66C588();
  swift_retain_n();
  v36 = sub_23D66BFC4();
  if (os_log_type_enabled(v36, v35))
  {
    v37 = (uint8_t *)swift_slowAlloc();
    v38 = swift_slowAlloc();
    *(_DWORD *)v37 = 136315138;
    *(_QWORD *)&v208 = v38;
    v39 = sub_23D5B421C(*(_BYTE *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state));
    v219 = sub_23D5DDBDC(v39, v40, (uint64_t *)&v208);
    sub_23D66C5D0();
    swift_release_n();
    swift_bridgeObjectRelease();
    _os_log_impl(&dword_23D5A8000, v36, v35, "improper state change in the group, current state is %s", v37, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242636844](v38, -1, -1);
    MEMORY[0x242636844](v37, -1, -1);

  }
  else
  {

    swift_release_n();
  }
  v41 = &qword_256C790D8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v42 = 330;
  *(_OWORD *)(v42 + 8) = xmmword_23D66E160;
  *(_QWORD *)(v42 + 24) = 0x800000023D6770D0;
  *(_QWORD *)(v42 + 32) = 0xD000000000000052;
  *(_QWORD *)(v42 + 40) = 0x800000023D676EF0;
  swift_willThrow();
  return v41;
}

uint64_t sub_23D5C88C4(uint64_t a1)
{
  int64_t v1;
  uint64_t v2;
  unint64_t *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v1 = *(_QWORD *)(a1 + 16);
  v2 = MEMORY[0x24BEE4AF8];
  if (v1)
  {
    v15 = MEMORY[0x24BEE4AF8];
    sub_23D5DE3F0(0, v1, 0);
    v2 = v15;
    v4 = (unint64_t *)(a1 + 56);
    do
    {
      v5 = *(v4 - 1);
      v6 = *v4;
      sub_23D5AFA60(*(v4 - 3), *(v4 - 2));
      sub_23D5AFA60(v5, v6);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A88);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A90);
      swift_dynamicCast();
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_23D5DE3F0(0, *(_QWORD *)(v2 + 16) + 1, 1);
        v2 = v15;
      }
      v8 = *(_QWORD *)(v2 + 16);
      v7 = *(_QWORD *)(v2 + 24);
      if (v8 >= v7 >> 1)
      {
        sub_23D5DE3F0(v7 > 1, v8 + 1, 1);
        v2 = v15;
      }
      v4 += 4;
      *(_QWORD *)(v2 + 16) = v8 + 1;
      v9 = (_QWORD *)(v2 + 32 * v8);
      v9[4] = v11;
      v9[5] = v12;
      v9[6] = v13;
      v9[7] = v14;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_23D5C8A14(_OWORD *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *(_QWORD *)(v3 + 80) = v2;
  *(_OWORD *)(v3 + 88) = *a1;
  v4 = a2[1];
  *(_QWORD *)(v3 + 104) = *a2;
  *(_QWORD *)(v3 + 112) = v4;
  return swift_task_switch();
}

uint64_t sub_23D5C8A3C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;

  v2 = *(_QWORD *)(v0 + 104);
  v1 = *(_QWORD *)(v0 + 112);
  v3 = *(_QWORD *)(v0 + 80);
  *(_OWORD *)(v0 + 16) = *(_OWORD *)(v3 + 40);
  *(_OWORD *)(v0 + 32) = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v0 + 48) = v2;
  *(_QWORD *)(v0 + 56) = v1;
  *(_OWORD *)(v0 + 64) = *(_OWORD *)(v0 + 88);
  v4 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v0 + 120) = v4;
  *v4 = v0;
  v4[1] = sub_23D5C8AD0;
  return signRequestForGroupBlob(groupKitUserId:groupID:dsid:nonce:)((_OWORD *)(v0 + 16), (__int128 *)(v0 + 32), (_QWORD *)(v0 + 48), (_OWORD *)(v0 + 64));
}

uint64_t sub_23D5C8AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;

  v6 = *v3;
  *(_QWORD *)(v6 + 128) = v2;
  swift_task_dealloc();
  if (v2)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t sub_23D5C8B58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D5C8B64(unsigned int a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  NSObject *v42;
  _BOOL4 v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  unint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  NSObject *v52;
  os_log_type_t v53;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t v92;
  char *v93;
  uint64_t v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[3];
  uint64_t v100[2];
  uint64_t v101;
  uint64_t v102[3];

  v4 = v3;
  v90 = a3;
  v92 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79128);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v80 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v89 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  v88 = *(_QWORD *)(v89 - 8);
  MEMORY[0x24BDAC7A8](v89);
  v10 = (uint64_t *)((char *)&v80 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v11);
  v94 = (uint64_t)&v80 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23D66C258();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v93 = (char *)&v80 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v80 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23D66C2AC();
  v96 = *(_QWORD *)(v19 - 8);
  v97 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v95 = (char *)&v80 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v80 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v98 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v34 = sub_23D66BFDC();
    __swift_project_value_buffer(v34, (uint64_t)qword_256C88B78);
    v35 = sub_23D66C588();
    swift_retain_n();
    v36 = sub_23D66BFC4();
    v37 = v35;
    if (os_log_type_enabled(v36, (os_log_type_t)v35))
    {
      v35 = swift_slowAlloc();
      v38 = swift_slowAlloc();
      v102[0] = v38;
      *(_DWORD *)v35 = 136315138;
      v39 = sub_23D5B421C(*(_BYTE *)(v4 + v98));
      v101 = sub_23D5DDBDC(v39, v40, v102);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23D5A8000, v36, v37, "improper group state, current state is %s", (uint8_t *)v35, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v38, -1, -1);
      MEMORY[0x242636844](v35, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v46 = 310;
    v47 = xmmword_23D66E170;
    goto LABEL_29;
  }
  swift_beginAccess();
  v24 = *(_DWORD *)(v4 + 64);
  v87 = a1;
  if (v24 >= a1)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v41 = sub_23D66BFDC();
    __swift_project_value_buffer(v41, (uint64_t)qword_256C88B78);
    LOBYTE(v35) = sub_23D66C588();
    swift_retain();
    v42 = sub_23D66BFC4();
    v35 = v35;
    v43 = os_log_type_enabled(v42, (os_log_type_t)v35);
    v44 = v87;
    if (v43)
    {
      v45 = swift_slowAlloc();
      *(_DWORD *)v45 = 67109376;
      LODWORD(v101) = v44;
      sub_23D66C5D0();
      *(_WORD *)(v45 + 8) = 1024;
      LODWORD(v101) = *(_DWORD *)(v4 + 64);
      sub_23D66C5D0();
      swift_release();
      _os_log_impl(&dword_23D5A8000, v42, (os_log_type_t)v35, "cannot update to lower version of the group, checked %u against %u", (uint8_t *)v45, 0xEu);
      MEMORY[0x242636844](v45, -1, -1);
    }
    else
    {
      swift_release();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v46 = 374;
    v47 = xmmword_23D66E180;
    goto LABEL_29;
  }
  v82 = v8;
  v26 = *(_QWORD *)(v4 + 40);
  v25 = *(_QWORD *)(v4 + 48);
  swift_beginAccess();
  v27 = *(_QWORD *)(v4 + 56);
  v28 = *(_QWORD *)(v27 + 16);
  v84 = v10;
  v85 = v13;
  v83 = v26;
  if (v28)
  {
    v86 = v14;
    sub_23D5AFA60(v26, v25);
    swift_bridgeObjectRetain();
    v29 = sub_23D5DF394(v26, v25);
    if ((v30 & 1) != 0)
    {
      v31 = v29;
      v81 = *(_QWORD *)(v27 + 56);
      v32 = type metadata accessor for GroupMembership.MemberProperties(0);
      v33 = *(_QWORD *)(v32 - 8);
      sub_23D5E7298(v81 + *(_QWORD *)(v33 + 72) * v31, (uint64_t)v23, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v23, 0, 1, v32);
    }
    else
    {
      v32 = type metadata accessor for GroupMembership.MemberProperties(0);
      v33 = *(_QWORD *)(v32 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v23, 1, 1, v32);
    }
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v26, v25);
    v14 = v86;
  }
  else
  {
    v32 = type metadata accessor for GroupMembership.MemberProperties(0);
    v33 = *(_QWORD *)(v32 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v33 + 56))(v23, 1, 1, v32);
  }
  v48 = v25;
  type metadata accessor for GroupMembership.MemberProperties(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v33 + 48))(v23, 1, v32))
  {
    v49 = &qword_256C79178;
    v50 = (uint64_t)v23;
LABEL_23:
    sub_23D5AEF8C(v50, v49);
LABEL_24:
    if (qword_256C78B10 != -1)
      swift_once();
    v51 = sub_23D66BFDC();
    __swift_project_value_buffer(v51, (uint64_t)qword_256C88B78);
    v35 = sub_23D66C588();
    v52 = sub_23D66BFC4();
    v53 = v35;
    if (os_log_type_enabled(v52, (os_log_type_t)v35))
    {
      v35 = swift_slowAlloc();
      *(_WORD *)v35 = 0;
      _os_log_impl(&dword_23D5A8000, v52, v53, "missing member key information", (uint8_t *)v35, 2u);
      MEMORY[0x242636844](v35, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v46 = 345;
    v47 = xmmword_23D66E190;
LABEL_29:
    *(_OWORD *)(v46 + 8) = v47;
    *(_QWORD *)(v46 + 24) = 0x800000023D677100;
    *(_QWORD *)(v46 + 32) = 0xD000000000000052;
    *(_QWORD *)(v46 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return v35;
  }
  v55 = *((_QWORD *)v23 + 1);
  v56 = *((_QWORD *)v23 + 2);
  sub_23D5E7284(v55, v56);
  sub_23D5AEF8C((uint64_t)v23, &qword_256C79178);
  if (v56 >> 60 == 15)
    goto LABEL_24;
  v86 = v55;
  v57 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v58 = type metadata accessor for UserKeyingInfo(0);
  sub_23D5AEF48(v57 + *(int *)(v58 + 44), (uint64_t)v18, &qword_256C79120);
  v59 = v96;
  v60 = v97;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v18, 1, v97) == 1)
  {
    sub_23D5E725C(v86, v56);
    v49 = &qword_256C79120;
    v50 = (uint64_t)v18;
    goto LABEL_23;
  }
  v81 = v56;
  v61 = v95;
  (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v95, v18, v60);
  v62 = v57 + *(int *)(v58 + 40);
  v63 = v94;
  sub_23D5AEF48(v62, v94, &qword_256C79170);
  v64 = v85;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48))(v63, 1, v85) == 1)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v61, v60);
    sub_23D5E725C(v86, v81);
    v49 = &qword_256C79170;
    v50 = v63;
    goto LABEL_23;
  }
  v65 = v93;
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 32))(v93, v63, v64);
  type metadata accessor for Group(0);
  v66 = *(_QWORD *)(v4 + 24);
  v99[0] = *(_QWORD *)(v4 + 16);
  v35 = v99[0];
  v99[1] = v66;
  v100[0] = v86;
  v100[1] = v81;
  v67 = v83;
  sub_23D5AFA60(v83, v48);
  sub_23D5AFA60(v35, v66);
  v68 = (uint64_t)v65;
  v69 = v92;
  v70 = v90;
  v71 = v91;
  sub_23D5BA564(v99, v87, v68, v100, v92, v90, v84);
  sub_23D5DDA20(v67, v48);
  sub_23D5DDA20(v35, v66);
  if (v71)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v93, v85);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
    sub_23D5E725C(v86, v81);
  }
  else
  {
    v72 = v84;
    v73 = swift_bridgeObjectRetain();
    v35 = sub_23D5B0E08(v73);
    swift_bridgeObjectRelease();
    *(_BYTE *)(v4 + v98) = 9;
    v74 = (uint64_t *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    v75 = (unint64_t)v70;
    v76 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    v77 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
    *v74 = v69;
    v74[1] = v75;
    sub_23D5AFA60(v69, v75);
    sub_23D5E725C(v76, v77);
    v78 = (uint64_t)v82;
    sub_23D5E7298((uint64_t)v72, (uint64_t)v82, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v88 + 56))(v78, 0, 1, v89);
    v79 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
    swift_beginAccess();
    sub_23D5F1788(v78, v79, &qword_256C79128);
    swift_endAccess();
    sub_23D5E725C(v86, v81);
    sub_23D5E6950((uint64_t)v72, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v93, v85);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v95, v97);
  }
  return v35;
}

uint64_t sub_23D5C96F8()
{
  return sub_23D5C9730((uint64_t (*)(uint64_t, uint64_t *))sub_23D5B1DD0);
}

uint64_t sub_23D5C9714()
{
  return sub_23D5C9730((uint64_t (*)(uint64_t, uint64_t *))sub_23D5B11C4);
}

uint64_t sub_23D5C9730(uint64_t (*a1)(uint64_t, uint64_t *))
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v6;

  sub_23D5CEFEC();
  if (!v2)
  {
    swift_beginAccess();
    v4 = swift_bridgeObjectRetain();
    v1 = a1(v4, &v6);
    swift_bridgeObjectRelease();
  }
  return v1;
}

uint64_t sub_23D5C97B0(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  os_log_type_t v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t result;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  os_log_type_t v71;
  NSObject *v72;
  os_log_type_t v73;
  uint8_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int64_t v78;
  unint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  int v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  char v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  char *v120;
  char *v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  char *v133;
  uint64_t *v134;
  _QWORD *v135;
  uint64_t v136;
  uint64_t v137[3];
  uint64_t v138;
  unint64_t v139;
  uint64_t v140[2];
  uint64_t v141[6];
  uint64_t v142;
  uint64_t v143;

  v2 = v1;
  v126 = a1;
  v135 = (_QWORD *)type metadata accessor for UserKeyingInfo(0);
  v132 = *(v135 - 1);
  MEMORY[0x24BDAC7A8](v135);
  v134 = (uint64_t *)((char *)&v113 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79128);
  MEMORY[0x24BDAC7A8](v4);
  v130 = (uint64_t)&v113 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v129 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
  v128 = *(_QWORD *)(v129 - 8);
  MEMORY[0x24BDAC7A8](v129);
  v127 = (uint64_t)&v113 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v133 = (char *)&v113 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v131 = (uint64_t)&v113 - v10;
  v11 = sub_23D66C258();
  v136 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v113 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v113 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)&v113 - v18;
  v20 = sub_23D66C2AC();
  v21 = *(_QWORD *)(v20 - 8);
  MEMORY[0x24BDAC7A8](v20);
  v23 = (char *)&v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v24);
  v26 = (char *)&v113 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8) >> 60 == 15
    || (v27 = *(unsigned __int8 *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state), v27 != 9) && v27 != 4)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v37 = sub_23D66BFDC();
    __swift_project_value_buffer(v37, (uint64_t)qword_256C88B78);
    v38 = sub_23D66C588();
    swift_retain_n();
    v39 = sub_23D66BFC4();
    if (os_log_type_enabled(v39, v38))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      *(_DWORD *)v40 = 136315138;
      v142 = v41;
      v42 = sub_23D5B421C(*(_BYTE *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state));
      v141[5] = sub_23D5DDBDC(v42, v43, &v142);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      _os_log_impl(&dword_23D5A8000, v39, v38, "invalid state transition in group, current state is %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v41, -1, -1);
      MEMORY[0x242636844](v40, -1, -1);
    }
    else
    {
      swift_release_n();
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v44 = 347;
    v45 = xmmword_23D66E1C0;
    goto LABEL_24;
  }
  v121 = v17;
  v124 = v20;
  v118 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  v120 = v13;
  v28 = *(_QWORD *)(v2 + 40);
  v29 = *(_QWORD *)(v2 + 48);
  swift_beginAccess();
  v30 = *(_QWORD *)(v2 + 56);
  v31 = *(_QWORD *)(v30 + 16);
  v123 = v11;
  v122 = v23;
  v119 = v29;
  if (v31)
  {
    v125 = v21;
    sub_23D5AFA60(v28, v29);
    swift_bridgeObjectRetain();
    v32 = sub_23D5DF394(v28, v29);
    if ((v33 & 1) != 0)
    {
      v34 = v32;
      v117 = *(_QWORD *)(v30 + 56);
      v35 = type metadata accessor for GroupMembership.MemberProperties(0);
      v36 = *(_QWORD *)(v35 - 8);
      sub_23D5E7298(v117 + *(_QWORD *)(v36 + 72) * v34, (uint64_t)v26, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v36 + 56))(v26, 0, 1, v35);
    }
    else
    {
      v35 = type metadata accessor for GroupMembership.MemberProperties(0);
      v36 = *(_QWORD *)(v35 - 8);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v26, 1, 1, v35);
    }
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v28, v29);
    v21 = v125;
  }
  else
  {
    v35 = type metadata accessor for GroupMembership.MemberProperties(0);
    v36 = *(_QWORD *)(v35 - 8);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v36 + 56))(v26, 1, 1, v35);
  }
  type metadata accessor for GroupMembership.MemberProperties(0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v26, 1, v35))
  {
    v46 = &qword_256C79178;
    v47 = (uint64_t)v26;
LABEL_18:
    sub_23D5AEF8C(v47, v46);
LABEL_19:
    if (qword_256C78B10 != -1)
      swift_once();
    v48 = sub_23D66BFDC();
    __swift_project_value_buffer(v48, (uint64_t)qword_256C88B78);
    v49 = sub_23D66C588();
    v50 = sub_23D66BFC4();
    v51 = v49;
    if (os_log_type_enabled(v50, v49))
    {
      v52 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v52 = 0;
      _os_log_impl(&dword_23D5A8000, v50, v51, "missing member key information", v52, 2u);
      MEMORY[0x242636844](v52, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v44 = 345;
    v45 = xmmword_23D66E1B0;
LABEL_24:
    *(_OWORD *)(v44 + 8) = v45;
    *(_QWORD *)(v44 + 24) = 0x800000023D677140;
    *(_QWORD *)(v44 + 32) = 0xD000000000000052;
    *(_QWORD *)(v44 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  v117 = v28;
  v54 = *((_QWORD *)v26 + 1);
  v55 = *((_QWORD *)v26 + 2);
  sub_23D5E7284(v54, v55);
  sub_23D5AEF8C((uint64_t)v26, &qword_256C79178);
  if (v55 >> 60 == 15)
    goto LABEL_19;
  v56 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v57 = v135;
  sub_23D5AEF48(v56 + *((int *)v135 + 11), (uint64_t)v19, &qword_256C79120);
  v58 = v124;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v124) == 1)
  {
    sub_23D5E725C(v54, v55);
    v46 = &qword_256C79120;
    v47 = (uint64_t)v19;
    goto LABEL_18;
  }
  v116 = v54;
  v59 = (uint64_t)v122;
  (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v122, v19, v58);
  v60 = v131;
  sub_23D5AEF48(v56 + *((int *)v57 + 10), v131, &qword_256C79170);
  v61 = v136;
  v62 = v123;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v60, 1, v123) == 1)
  {
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v59, v58);
    sub_23D5E725C(v116, v55);
    v46 = &qword_256C79170;
    v47 = v60;
    goto LABEL_18;
  }
  v115 = v55;
  v63 = (unint64_t)v120;
  (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v120, v60, v62);
  v64 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v64 >> 60 == 15)
  {
    sub_23D5E725C(v116, v115);
    (*(void (**)(unint64_t, uint64_t))(v61 + 8))(v63, v62);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v59, v58);
    goto LABEL_19;
  }
  v65 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  v66 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
  swift_beginAccess();
  v67 = v66;
  v68 = v130;
  sub_23D5AEF48(v67, v130, &qword_256C79128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v68, 1, v129) == 1)
  {
    v69 = v65;
    sub_23D5AFA60(v65, v64);
    sub_23D5AEF8C(v68, &qword_256C79128);
    if (qword_256C78B10 != -1)
      swift_once();
    v70 = sub_23D66BFDC();
    __swift_project_value_buffer(v70, (uint64_t)qword_256C88B78);
    v71 = sub_23D66C588();
    v72 = sub_23D66BFC4();
    v73 = v71;
    if (os_log_type_enabled(v72, v71))
    {
      v74 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v74 = 0;
      _os_log_impl(&dword_23D5A8000, v72, v73, "missing transition state", v74, 2u);
      MEMORY[0x242636844](v74, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v75 = 346;
    *(_OWORD *)(v75 + 8) = xmmword_23D66E1A0;
    *(_QWORD *)(v75 + 24) = 0x800000023D677140;
    *(_QWORD *)(v75 + 32) = 0xD000000000000052;
    *(_QWORD *)(v75 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5E725C(v116, v115);
    sub_23D5E725C(v69, v64);
    (*(void (**)(char *, uint64_t))(v61 + 8))(v120, v123);
    return (*(uint64_t (**)(char *, uint64_t))(v21 + 8))(v122, v58);
  }
  v114 = v64;
  v125 = v21;
  v76 = v127;
  sub_23D5E7F64(v68, v127, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  v77 = v126;
  v78 = *(_QWORD *)(v126 + 16);
  v113 = v65;
  if (!v78)
  {
    v93 = v114;
    sub_23D5AFA60(v65, v114);
    v135 = (_QWORD *)MEMORY[0x24BEE4AF8];
    v94 = v119;
    v92 = v143;
LABEL_47:
    type metadata accessor for Group(0);
    v96 = *(_QWORD *)(v2 + 24);
    v138 = *(_QWORD *)(v2 + 16);
    v95 = v138;
    v139 = v96;
    v97 = v117;
    v137[0] = v117;
    v137[1] = v94;
    v141[0] = v116;
    v141[1] = v115;
    v140[0] = v113;
    v140[1] = v93;
    sub_23D5AFA60(v117, v94);
    sub_23D5AFA60(v95, v96);
    v98 = v94;
    v99 = (unint64_t)v120;
    v100 = sub_23D5BD25C(&v138, v137, (uint64_t)v122, (unint64_t)v120, v141, v140, v135, v76);
    if (v92)
    {
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v97, v98);
      sub_23D5DDA20(v95, v96);
      sub_23D5E6950(v76, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
      (*(void (**)(unint64_t, uint64_t))(v136 + 8))(v99, v123);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v122, v124);
      sub_23D5E725C(v113, v114);
      return sub_23D5E725C(v116, v115);
    }
    v101 = v100;
    v102 = v113;
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v97, v98);
    sub_23D5DDA20(v95, v96);
    swift_beginAccess();
    v103 = *(_DWORD *)(v101 + 64);
    result = swift_beginAccess();
    v104 = *(_DWORD *)(v2 + 64);
    v105 = v104 + 1;
    if (v104 == -1)
    {
      __break(1u);
      return result;
    }
    v106 = v101;
    v107 = *(unsigned __int8 *)(v2 + v118);
    v108 = (uint64_t)v122;
    v109 = v125;
    v110 = v136;
    v111 = v124;
    if (v103 == v105 && v107 == 9)
    {
LABEL_54:
      sub_23D5CA8D8(v106);
      sub_23D5E725C(v116, v115);
      sub_23D5E725C(v102, v114);
      swift_release();
      sub_23D5E6950(v127, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v120, v123);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v108, v111);
    }
    if (v103 == 1)
    {
      if (v107 == 4)
        goto LABEL_54;
    }
    else if (v107 == 4)
    {
      v112 = 1;
LABEL_58:
      *(_BYTE *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = v112;
      *(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = v106;
      swift_retain();
      swift_release();
      sub_23D5E725C(v116, v115);
      sub_23D5E725C(v102, v114);
      swift_release();
      sub_23D5E6950(v127, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
      (*(void (**)(char *, uint64_t))(v110 + 8))(v120, v123);
      result = (*(uint64_t (**)(uint64_t, uint64_t))(v109 + 8))(v108, v111);
      *(_BYTE *)(v2 + v118) = 5;
      return result;
    }
    v112 = 0;
    goto LABEL_58;
  }
  sub_23D5AFA60(v65, v114);
  v137[0] = MEMORY[0x24BEE4AF8];
  sub_23D5DE464(0, v78, 0);
  v135 = (_QWORD *)v137[0];
  v79 = (unint64_t *)(v77 + 56);
  v80 = v134;
  v81 = (uint64_t)v121;
  while (1)
  {
    v131 = v78;
    v82 = *(v79 - 3);
    v83 = *(v79 - 2);
    v84 = *(v79 - 1);
    v85 = *v79;
    sub_23D5AFA60(v82, v83);
    sub_23D5AFA60(v84, v85);
    sub_23D5AFA60(v82, v83);
    sub_23D5AFA60(v84, v85);
    sub_23D5DDA20(v84, v85);
    v138 = v82;
    v139 = v83;
    sub_23D5AFA60(v82, v83);
    sub_23D5AFA60(v84, v85);
    sub_23D5DDA20(v82, v83);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56))(v81, 1, 1, v124);
    v86 = (uint64_t)v133;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v136 + 56))(v133, 1, 1, v123);
    v87 = v143;
    sub_23D61F210(&v138, v84, v85, v81, v86, v80);
    v143 = v87;
    if (v87)
      break;
    sub_23D5DDA20(v82, v83);
    sub_23D5DDA20(v84, v85);
    v88 = v135;
    v137[0] = (uint64_t)v135;
    v90 = v135[2];
    v89 = v135[3];
    if (v90 >= v89 >> 1)
    {
      sub_23D5DE464(v89 > 1, v90 + 1, 1);
      v88 = (_QWORD *)v137[0];
    }
    v79 += 4;
    v88[2] = v90 + 1;
    v91 = (*(unsigned __int8 *)(v132 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v132 + 80);
    v135 = v88;
    v80 = v134;
    sub_23D5E7F64((uint64_t)v134, (uint64_t)v88 + v91 + *(_QWORD *)(v132 + 72) * v90, type metadata accessor for UserKeyingInfo);
    v78 = v131 - 1;
    if (v131 == 1)
    {
      v92 = v143;
      v76 = v127;
      v93 = v114;
      v94 = v119;
      goto LABEL_47;
    }
  }
  sub_23D5DDA20(v82, v83);
  sub_23D5DDA20(v84, v85);
  swift_release();
  sub_23D5E725C(v116, v115);
  sub_23D5E725C(v113, v114);
  sub_23D5E6950(v127, type metadata accessor for Group.ValidateGroupMemberKeysTransition);
  (*(void (**)(char *, uint64_t))(v136 + 8))(v120, v123);
  return (*(uint64_t (**)(char *, uint64_t))(v125 + 8))(v122, v124);
}

uint64_t sub_23D5CA8D8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  os_log_type_t v7;
  uint8_t *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33[3];
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;

  v3 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
  if (v3 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v4 = sub_23D66BFDC();
    __swift_project_value_buffer(v4, (uint64_t)qword_256C88B78);
    v5 = sub_23D66C588();
    v6 = sub_23D66BFC4();
    v7 = v5;
    if (os_log_type_enabled(v6, v5))
    {
      v8 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v8 = 0;
      _os_log_impl(&dword_23D5A8000, v6, v7, "invalid group state (missing group serialization)", v8, 2u);
      MEMORY[0x242636844](v8, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v9 = 310;
    *(_OWORD *)(v9 + 8) = xmmword_23D66E1D0;
    *(_QWORD *)(v9 + 24) = 0x800000023D677BD0;
    *(_QWORD *)(v9 + 32) = 0xD000000000000052;
    *(_QWORD *)(v9 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  else
  {
    v12 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    v13 = *(_QWORD *)(a1 + 96);
    v28 = v1;
    v38 = v12;
    if (v13 >> 60 == 15)
    {
      v29 = v3;
      sub_23D5AFA60(v12, v3);
    }
    else
    {
      v15 = *(_QWORD *)(a1 + 104);
      v14 = *(_QWORD *)(a1 + 112);
      v31 = *(_QWORD *)(a1 + 88);
      v32 = *(_QWORD *)(a1 + 24);
      v33[0] = *(_QWORD *)(a1 + 16);
      v33[1] = v32;
      v16 = *(_QWORD *)(a1 + 48);
      v36 = *(_QWORD *)(a1 + 40);
      v37 = v16;
      swift_beginAccess();
      v30 = *(_DWORD *)(a1 + 64);
      sub_23D5E7284(v12, v3);
      sub_23D5E7FA8(v31, v13, v15, v14);
      v27 = v33[0];
      v17 = v36;
      sub_23D5AFA60(v33[0], v32);
      sub_23D5AFA60(v36, v16);
      sub_23D64DABC(v33, &v36, v31, v13, v15, v14, v30);
      if (v2)
      {
        sub_23D5E7220(v31, v13, v15, v14);
        sub_23D5E725C(v38, v3);
        sub_23D5DDA20(v17, v16);
        return sub_23D5DDA20(v27, v32);
      }
      v29 = v3;
      sub_23D5E7220(v31, v13, v15, v14);
      sub_23D5DDA20(v17, v16);
      sub_23D5DDA20(v27, v32);
    }
    v19 = *(_QWORD *)(a1 + 24);
    v36 = *(_QWORD *)(a1 + 16);
    v18 = v36;
    v37 = v19;
    v21 = *(_QWORD *)(a1 + 48);
    v34 = *(_QWORD *)(a1 + 40);
    v20 = v34;
    v35 = v21;
    v23 = *(_QWORD *)(a1 + 72);
    v22 = *(_QWORD *)(a1 + 80);
    swift_beginAccess();
    v24 = *(_DWORD *)(a1 + 64);
    sub_23D5AFA60(v18, v19);
    sub_23D5AFA60(v20, v21);
    sub_23D5AFA60(v23, v22);
    sub_23D64DC80(&v36, &v34, v23, v22, v24);
    sub_23D5DDA20(v23, v22);
    if (v2)
    {
      sub_23D5E725C(v38, v29);
      sub_23D5DDA20(v20, v21);
      return sub_23D5DDA20(v18, v19);
    }
    else
    {
      sub_23D5DDA20(v20, v21);
      sub_23D5DDA20(v18, v19);
      v36 = v18;
      v37 = v19;
      v34 = v20;
      v35 = v21;
      v25 = *(_DWORD *)(a1 + 64);
      sub_23D5AFA60(v18, v19);
      sub_23D5AFA60(v20, v21);
      v26 = v38;
      sub_23D64D910(&v36, &v34, v25, v38, v29);
      sub_23D5DDA20(v20, v21);
      sub_23D5DDA20(v18, v19);
      sub_23D5CAD58(a1);
      result = sub_23D5E725C(v26, v29);
      *(_BYTE *)(v28 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) = 6;
    }
  }
  return result;
}

uint64_t sub_23D5CAD58(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL4 v8;
  int v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  char v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char v21;
  char v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t result;
  uint64_t v61;
  os_log_type_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  NSObject *v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  _BOOL4 v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  _QWORD *v93;
  unint64_t v94;
  uint64_t v95;
  _QWORD v96[21];
  int v97;
  uint64_t v98[3];
  int v99;
  NSObject *v100;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79128);
  MEMORY[0x24BDAC7A8](v4);
  v92 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for UserKeyingInfo(0);
  MEMORY[0x24BDAC7A8](v6);
  v90 = (uint64_t)&v88 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = 0;
  v91 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  v9 = *(unsigned __int8 *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
  if (v9 == 9)
  {
    LODWORD(v100) = 0;
    v10 = 1;
  }
  else
  {
    if (v9 == 4)
    {
      swift_beginAccess();
      v8 = *(_DWORD *)(a1 + 64) == 1;
    }
    LODWORD(v100) = v8;
    v10 = v9 == 8;
  }
  v89 = v10;
  v12 = *(_QWORD *)(v2 + 16);
  v11 = *(_QWORD *)(v2 + 24);
  v13 = *(_QWORD *)(a1 + 16);
  v14 = *(_QWORD *)(a1 + 24);
  sub_23D5AFA60(v12, v11);
  sub_23D5AFA60(v13, v14);
  sub_23D5E6578(v12, v11);
  v16 = v15;
  v94 = v14;
  v95 = v13;
  sub_23D5DDA20(v13, v14);
  sub_23D5DDA20(v12, v11);
  if ((v16 & 1) == 0)
    goto LABEL_14;
  v18 = *(_QWORD *)(v2 + 40);
  v17 = *(_QWORD *)(v2 + 48);
  v88 = v2;
  v20 = *(_QWORD *)(a1 + 40);
  v19 = *(_QWORD *)(a1 + 48);
  sub_23D5AFA60(v18, v17);
  sub_23D5AFA60(v20, v19);
  sub_23D5E6578(v18, v17);
  v22 = v21;
  v23 = v20;
  v2 = v88;
  sub_23D5DDA20(v23, v19);
  sub_23D5DDA20(v18, v17);
  if ((v22 & 1) == 0)
    goto LABEL_14;
  if ((v100 & 1) != 0
    || v89
    && ((swift_beginAccess(), v24 = *(_DWORD *)(v2 + 64), swift_beginAccess(), v25 = *(_DWORD *)(a1 + 64), v24 < v25)
     || v24 == v25 && (*(_BYTE *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) & 1) != 0))
  {
    swift_beginAccess();
    v26 = *(_BYTE *)(a1 + 32);
    swift_beginAccess();
    *(_BYTE *)(v2 + 32) = v26;
    swift_beginAccess();
    v27 = *(_QWORD *)(a1 + 56);
    swift_beginAccess();
    *(_QWORD *)(v2 + 56) = v27;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_beginAccess();
    LODWORD(v27) = *(_DWORD *)(a1 + 64);
    swift_beginAccess();
    *(_DWORD *)(v2 + 64) = v27;
    v28 = *(_QWORD *)(a1 + 72);
    v29 = *(_QWORD *)(a1 + 80);
    v30 = *(_QWORD *)(v2 + 72);
    v31 = *(_QWORD *)(v2 + 80);
    *(_QWORD *)(v2 + 72) = v28;
    *(_QWORD *)(v2 + 80) = v29;
    sub_23D5AFA60(v28, v29);
    sub_23D5DDA20(v30, v31);
    v32 = *(_QWORD *)(a1 + 88);
    v33 = *(_QWORD *)(a1 + 96);
    v34 = *(_QWORD *)(a1 + 104);
    v35 = *(_QWORD *)(a1 + 112);
    v36 = *(_QWORD *)(v2 + 88);
    v37 = *(_QWORD *)(v2 + 96);
    v38 = (_QWORD *)v2;
    v39 = *(_QWORD *)(v2 + 104);
    v40 = v38[14];
    v38[11] = v32;
    v38[12] = v33;
    v38[13] = v34;
    v38[14] = v35;
    sub_23D5E7FA8(v32, v33, v34, v35);
    sub_23D5E7220(v36, v37, v39, v40);
    v41 = a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    v42 = v90;
    sub_23D5E7298(v41, v90, type metadata accessor for UserKeyingInfo);
    v43 = (uint64_t)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    sub_23D5F1744(v42, v43, type metadata accessor for UserKeyingInfo);
    swift_endAccess();
    v44 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    v45 = *(_QWORD *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    v46 = (_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    v47 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    v48 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    *v46 = v44;
    v46[1] = v45;
    sub_23D5E7284(v44, v45);
    sub_23D5E725C(v47, v48);
    *((_BYTE *)v38 + v91) = *(_BYTE *)(a1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state);
    v49 = MEMORY[0x24BEE4AF8];
    v50 = sub_23D5B5070(MEMORY[0x24BEE4AF8], &qword_256C79B00, &qword_256C79B08, type metadata accessor for MembershipVerifier);
    v51 = (_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newMembershipVerifiers);
    swift_beginAccess();
    *v51 = v50;
    swift_bridgeObjectRelease();
    v52 = sub_23D5B4EE4(v49);
    v53 = (_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
    swift_beginAccess();
    *v53 = v52;
    swift_bridgeObjectRelease();
    v54 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob);
    v55 = *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8);
    *(_OWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob) = xmmword_23D66DF30;
    sub_23D5E725C(v54, v55);
    v56 = type metadata accessor for Group.ValidateGroupMemberKeysTransition(0);
    v57 = (uint64_t)v92;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v56 - 8) + 56))(v92, 1, 1, v56);
    v58 = (uint64_t)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation;
    swift_beginAccess();
    sub_23D5F1788(v57, v58, &qword_256C79128);
    swift_endAccess();
    memset(v96, 0, 40);
    v59 = (uint64_t)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation;
    swift_beginAccess();
    sub_23D5F1788((uint64_t)v96, v59, &qword_256C79130);
    swift_endAccess();
    *(_QWORD *)((char *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
    result = swift_release();
    *((_BYTE *)v38 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) = 0;
  }
  else
  {
LABEL_14:
    if (qword_256C78B10 != -1)
      swift_once();
    v61 = sub_23D66BFDC();
    __swift_project_value_buffer(v61, (uint64_t)qword_256C88B78);
    v62 = sub_23D66C588();
    swift_retain_n();
    swift_retain_n();
    v100 = sub_23D66BFC4();
    if (os_log_type_enabled(v100, v62))
    {
      v63 = swift_slowAlloc();
      v92 = (char *)swift_slowAlloc();
      v98[0] = (uint64_t)v92;
      *(_DWORD *)v63 = 136316418;
      LODWORD(v91) = v62;
      sub_23D5AFA60(v12, v11);
      v64 = v2;
      v65 = sub_23D66BD30();
      v67 = v66;
      sub_23D5DDA20(v12, v11);
      v96[0] = sub_23D5DDBDC(v65, v67, v98);
      v93 = &v96[1];
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v63 + 12) = 2080;
      v68 = v94;
      v69 = v95;
      sub_23D5AFA60(v95, v94);
      v70 = sub_23D66BD30();
      v72 = v71;
      sub_23D5DDA20(v69, v68);
      v96[0] = sub_23D5DDBDC(v70, v72, v98);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v63 + 22) = 2080;
      v95 = v63 + 24;
      v73 = *(_QWORD *)(v64 + 40);
      v74 = *(_QWORD *)(v64 + 48);
      v75 = v64;
      sub_23D5AFA60(v73, v74);
      v76 = sub_23D66BD30();
      v77 = a1;
      v79 = v78;
      sub_23D5DDA20(v73, v74);
      v96[0] = sub_23D5DDBDC(v76, v79, v98);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v63 + 32) = 2080;
      v80 = *(_QWORD *)(v77 + 40);
      v81 = *(_QWORD *)(v77 + 48);
      sub_23D5AFA60(v80, v81);
      v82 = sub_23D66BD30();
      v84 = v83;
      sub_23D5DDA20(v80, v81);
      v96[0] = sub_23D5DDBDC(v82, v84, v98);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      swift_release_n();
      *(_WORD *)(v63 + 42) = 1024;
      swift_beginAccess();
      LODWORD(v68) = *(_DWORD *)(v75 + 64);
      swift_release();
      v99 = v68;
      sub_23D66C5D0();
      swift_release();
      *(_WORD *)(v63 + 48) = 1024;
      swift_beginAccess();
      LODWORD(v80) = *(_DWORD *)(v77 + 64);
      swift_release();
      v97 = v80;
      sub_23D66C5D0();
      swift_release();
      v85 = v100;
      _os_log_impl(&dword_23D5A8000, v100, (os_log_type_t)v91, "new group is inconsistent with the original group, old groupID %s new groupID %s; old member ID %s new member ID"
        " %s; old version %u new verison %u",
        (uint8_t *)v63,
        0x36u);
      v86 = v92;
      swift_arrayDestroy();
      MEMORY[0x242636844](v86, -1, -1);
      MEMORY[0x242636844](v63, -1, -1);

    }
    else
    {
      swift_release_n();
      swift_release_n();

    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v87 = 373;
    *(_OWORD *)(v87 + 8) = xmmword_23D66E1E0;
    *(_QWORD *)(v87 + 24) = 0x800000023D677870;
    *(_QWORD *)(v87 + 32) = 0xD000000000000052;
    *(_QWORD *)(v87 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  return result;
}

_QWORD *sub_23D5CB710(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  os_log_type_t v23;
  uint8_t *v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  void (*v30)(char *, uint64_t);
  uint64_t v31;
  os_log_type_t v32;
  NSObject *v33;
  os_log_type_t v34;
  uint8_t *v35;
  uint64_t v36;
  uint64_t v38;
  uint64_t inited;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void (*v49)(char *, uint64_t);
  void (*v50)(char *, uint64_t);
  uint64_t v51;
  unint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64[3];
  int v65;
  char v66;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23D66C2AC();
  v8 = *(_QWORD *)(v7 - 8);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v51 - v12;
  v14 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 5
    && (v15 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup)) != 0)
  {
    v57 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
    v16 = *a1;
    a1 = (_QWORD *)a1[1];
    v59 = v16;
    swift_beginAccess();
    v17 = *(_DWORD *)(v2 + 64);
    v58 = (char *)(v15 + 32);
    swift_beginAccess();
    v60 = v15;
    if ((*(_BYTE *)(v15 + 32) & 1) == 0)
    {
      swift_beginAccess();
      if (*(_BYTE *)(v2 + 32))
        v17 = 0;
    }
    if (*(_BYTE *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup))
      v17 = 0;
    v18 = v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    v19 = type metadata accessor for UserKeyingInfo(0);
    sub_23D5AEF48(v18 + *(int *)(v19 + 44), (uint64_t)v6, &qword_256C79120);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7) == 1)
    {
      swift_retain();
      sub_23D5AEF8C((uint64_t)v6, &qword_256C79120);
LABEL_18:
      if (qword_256C78B10 != -1)
        swift_once();
      v31 = sub_23D66BFDC();
      __swift_project_value_buffer(v31, (uint64_t)qword_256C88B78);
      v32 = sub_23D66C588();
      v33 = sub_23D66BFC4();
      v34 = v32;
      if (os_log_type_enabled(v33, v32))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v35 = 0;
        _os_log_impl(&dword_23D5A8000, v33, v34, "missing key information", v35, 2u);
        MEMORY[0x242636844](v35, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v36 = 339;
      *(_OWORD *)(v36 + 8) = xmmword_23D66E1F0;
      *(_QWORD *)(v36 + 24) = 0x800000023D677180;
      *(_QWORD *)(v36 + 32) = 0xD000000000000052;
      *(_QWORD *)(v36 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      swift_release();
      return a1;
    }
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v13, v6, v7);
    v29 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
    if (v29 >> 60 == 15)
    {
      v30 = *(void (**)(char *, uint64_t))(v8 + 8);
      swift_retain();
      v30(v13, v7);
      goto LABEL_18;
    }
    v65 = v17;
    v54 = a1;
    v38 = *(_QWORD *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
    v53 = (_QWORD *)(inited + 32);
    swift_retain();
    v56 = v38;
    sub_23D5E7284(v38, v29);
    v52 = v29;
    if (qword_256C78D78 != -1)
      swift_once();
    v40 = qword_256C891A0;
    v41 = *(_QWORD *)algn_256C891A8;
    *(_QWORD *)(inited + 32) = qword_256C891A0;
    *(_QWORD *)(inited + 40) = v41;
    v43 = *(_QWORD *)(v2 + 16);
    v42 = *(_QWORD *)(v2 + 24);
    *(_QWORD *)(inited + 48) = v43;
    *(_QWORD *)(inited + 56) = v42;
    sub_23D5AFA60(v40, v41);
    sub_23D5AFA60(v43, v42);
    v55 = sub_23D62FE18(inited);
    a1 = v44;
    swift_setDeallocating();
    swift_arrayDestroy();
    v45 = v56;
    v46 = v52;
    sub_23D5AFA60(v56, v52);
    v53 = a1;
    sub_23D66C294();
    sub_23D5E725C(v45, v46);
    *(_QWORD *)&v62 = v59;
    *((_QWORD *)&v62 + 1) = v54;
    v66 = *v58;
    v47 = v61;
    v48 = sub_23D5ECFFC((uint64_t)v11, &v62, &v66, v65);
    if (v47)
    {
      sub_23D5DDA20(v55, (unint64_t)v53);
      swift_release();
      sub_23D5E725C(v56, v46);
      v49 = *(void (**)(char *, uint64_t))(v8 + 8);
      v49(v11, v7);
      v49(v13, v7);
    }
    else
    {
      a1 = (_QWORD *)v48;
      sub_23D5DDA20(v55, (unint64_t)v53);
      swift_release();
      sub_23D5E725C(v56, v46);
      v50 = *(void (**)(char *, uint64_t))(v8 + 8);
      v50(v11, v7);
      v50(v13, v7);
      *(_BYTE *)(v2 + v57) = 8;
    }
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v20 = sub_23D66BFDC();
    __swift_project_value_buffer(v20, (uint64_t)qword_256C88B78);
    v21 = sub_23D66C588();
    swift_retain_n();
    v22 = sub_23D66BFC4();
    v23 = v21;
    if (os_log_type_enabled(v22, v21))
    {
      v24 = (uint8_t *)swift_slowAlloc();
      v25 = swift_slowAlloc();
      v64[0] = v25;
      *(_DWORD *)v24 = 136315138;
      a1 = v24 + 4;
      v26 = sub_23D5B421C(*(_BYTE *)(v2 + v14));
      v63 = sub_23D5DDBDC(v26, v27, v64);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v22, v23, "invalid state transition in group, current state %s", v24, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v25, -1, -1);
      MEMORY[0x242636844](v24, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v28 = 347;
    *(_OWORD *)(v28 + 8) = xmmword_23D66E200;
    *(_QWORD *)(v28 + 24) = 0x800000023D677180;
    *(_QWORD *)(v28 + 32) = 0xD000000000000052;
    *(_QWORD *)(v28 + 40) = 0x800000023D676EF0;
    swift_willThrow();
  }
  return a1;
}

uint64_t sub_23D5CBEEC(uint64_t a1, uint64_t a2, unint64_t a3, char a4, int a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  _BOOL8 v20;
  int v21;
  uint64_t v22;

  v22 = a6;
  v21 = a5;
  v20 = (a4 & 1) == 0;
  v9 = sub_23D66C330();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  v14 = *(_QWORD *)(a1 + 8);
  v13 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v14, v13);
  *(_QWORD *)(a1 + 24) = v20;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = v21;
  sub_23D66C264();
  v15 = sub_23D66C1F8();
  v17 = v16;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v17;
  return result;
}

uint64_t sub_23D5CC000(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  uint8_t *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  uint8_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int *v50;
  unsigned int v51;
  uint64_t v52;
  unint64_t v53;
  void (*v54)(uint64_t, char *, uint64_t);
  char v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  unint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  os_log_type_t v69;
  NSObject *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  char v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  os_log_type_t v88;
  NSObject *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  unint64_t v103;
  os_log_t v104;
  NSObject *v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _BYTE *v114;
  uint64_t v115;
  os_log_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  NSObject *v125;
  uint64_t v126;
  uint64_t v127;
  int *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  __int128 v133;
  _QWORD v134[3];
  __int128 v135;
  uint64_t v136;
  ValueMetadata *v137;
  os_log_t v138;
  uint64_t v139;

  v5 = v3;
  v132 = a3;
  v8 = sub_23D66C054();
  v9 = MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v108 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v9);
  v14 = (char *)&v108 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v17 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 8)
  {
    v18 = *(_QWORD *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup);
    if (v18)
    {
      v131 = (uint64_t)&v108 - v15;
      v130 = v16;
      v125 = (v5 + 64);
      swift_beginAccess();
      LODWORD(v129) = *(_DWORD *)(v5 + 64);
      swift_beginAccess();
      v19 = *(_DWORD *)(v18 + 64);
      swift_beginAccess();
      if ((*(_BYTE *)(v18 + 32) & 1) != 0)
      {
        LODWORD(v126) = v19;
        v128 = (int *)a1;
        v127 = v8;
        v20 = *(_QWORD *)(v5 + 72);
        v21 = *(_QWORD *)(v5 + 80);
        v22 = *(_QWORD *)(v18 + 72);
        v23 = *(_QWORD *)(v18 + 80);
        v137 = &type metadata for MemberSeed;
        v125 = sub_23D5ED1F8();
        v138 = v125;
        *(_QWORD *)&v135 = v22;
        *((_QWORD *)&v135 + 1) = v23;
        sub_23D5AFA60(v22, v23);
        swift_retain();
        sub_23D5AFA60(v22, v23);
        sub_23D5AFA60(v20, v21);
        if (qword_256C78D30 != -1)
          swift_once();
        sub_23D61D4A8(&v135, 1, (uint64_t)v11);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
        if (v4)
        {
          sub_23D5DDA20(v20, v21);
          sub_23D5DDA20(v22, v23);
          return swift_release();
        }
        sub_23D5DDA20(v22, v23);
        (*(void (**)(uint64_t, char *, uint64_t))(v130 + 32))(v131, v11, v127);
        if ((*(_BYTE *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) & 1) != 0)
        {
          sub_23D5DDA20(v20, v21);
          LODWORD(v129) = 0;
          v20 = 0;
          v21 = 0xF000000000000000;
        }
        v51 = v126;
        v52 = *(_QWORD *)(v5 + 16);
        v53 = *(_QWORD *)(v5 + 24);
        *(_QWORD *)&v135 = v52;
        *((_QWORD *)&v135 + 1) = v53;
        v134[0] = v20;
        v134[1] = v21;
        sub_23D5AFA60(v52, v53);
        sub_23D5E7284(v20, v21);
        v58 = sub_23D6196B8(&v135, v51, v129, v131, (uint64_t)v128, (char *)v134, &type metadata for MemberSeed, a2, (uint64_t)v125, v132);
        sub_23D5E725C(v20, v21);
        sub_23D5DDA20(v52, v53);
        sub_23D5CDD14(v58);
        sub_23D5E725C(v20, v21);
LABEL_46:
        swift_bridgeObjectRelease();
        sub_23D5CA8D8(v18);
        (*(void (**)(uint64_t, uint64_t))(v130 + 8))(v131, v127);
        return swift_release();
      }
      v122 = a2;
      v33 = *(_QWORD *)(v18 + 96);
      if (v33 >> 60 == 15)
      {
        v34 = qword_256C78B10;
        swift_retain();
        if (v34 != -1)
          swift_once();
        v35 = sub_23D66BFDC();
        __swift_project_value_buffer(v35, (uint64_t)qword_256C88B78);
        v36 = sub_23D66C588();
        v37 = sub_23D66BFC4();
        if (os_log_type_enabled(v37, v36))
        {
          v38 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v38 = 0;
          _os_log_impl(&dword_23D5A8000, v37, v36, "missing admin seed", v38, 2u);
          MEMORY[0x242636844](v38, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v39 = 308;
        *(_OWORD *)(v39 + 8) = xmmword_23D66E230;
        *(_QWORD *)(v39 + 24) = 0x800000023D6771A0;
        *(_QWORD *)(v39 + 32) = 0xD000000000000052;
        *(_QWORD *)(v39 + 40) = 0x800000023D676EF0;
        swift_willThrow();
        return swift_release();
      }
      LODWORD(v126) = v19;
      v128 = (int *)a1;
      v40 = *(_QWORD *)(v18 + 88);
      v41 = v18;
      v42 = *(_QWORD *)(v18 + 104);
      v43 = *(_QWORD *)(v41 + 112);
      v123 = *(_QWORD *)(v5 + 88);
      v124 = *(_QWORD *)(v5 + 96);
      v121 = *(_QWORD *)(v5 + 104);
      v120 = *(_QWORD *)(v5 + 112);
      v137 = &type metadata for AdminSeed;
      v116 = (os_log_t)sub_23D5E803C();
      v138 = v116;
      v44 = (_QWORD *)swift_allocObject();
      *(_QWORD *)&v135 = v44;
      v44[2] = v40;
      v44[3] = v33;
      v44[4] = v42;
      v44[5] = v43;
      sub_23D5E7FA8(v40, v33, v42, v43);
      v117 = v40;
      v45 = v40;
      v46 = v120;
      v118 = v33;
      v47 = v33;
      v48 = v42;
      v18 = v41;
      v49 = v121;
      v119 = v43;
      sub_23D5E7FA8(v45, v47, v48, v43);
      swift_retain();
      sub_23D5E7FA8(v123, v124, v49, v46);
      if (qword_256C78D08 != -1)
        swift_once();
      sub_23D61D4A8(&v135, 1, (uint64_t)v14);
      v50 = v128;
      if (v4)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
        sub_23D5E7220(v123, v124, v49, v46);
        sub_23D5E7220(v117, v118, v48, v119);
        return swift_release();
      }
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v135);
      v54 = *(void (**)(uint64_t, char *, uint64_t))(v130 + 32);
      v127 = v8;
      v54(v131, v14, v8);
      v114 = (_BYTE *)(v5 + 32);
      swift_beginAccess();
      v55 = *(_BYTE *)(v5 + 32);
      v115 = v48;
      if ((v55 & 1) != 0 || *(_BYTE *)(v5 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedValidationForNewGroup) == 1)
      {
        sub_23D5E7220(v123, v124, v49, v46);
        LODWORD(v129) = 0;
        v56 = 0;
        v49 = 0;
        v46 = 0;
        v57 = 0xF000000000000000;
      }
      else
      {
        v57 = v124;
        v56 = v123;
      }
      v59 = v126;
      v60 = *(_QWORD *)(v5 + 24);
      *(_QWORD *)&v133 = *(_QWORD *)(v5 + 16);
      *((_QWORD *)&v133 + 1) = v60;
      *(_QWORD *)&v135 = v56;
      *((_QWORD *)&v135 + 1) = v57;
      v136 = v49;
      v137 = (ValueMetadata *)v46;
      v126 = v133;
      v120 = v60;
      sub_23D5AFA60(v133, v60);
      sub_23D5E7FA8(v56, v57, v49, v46);
      v132 = sub_23D6196B8(&v133, v59, v129, v131, (uint64_t)v50, (char *)&v135, &type metadata for AdminSeed, v122, (uint64_t)v116, v132);
      v123 = v56;
      v124 = v57;
      v121 = v49;
      sub_23D5E7220(v56, v57, v49, v46);
      sub_23D5DDA20(v126, v120);
      if (*v114 != 1)
      {
LABEL_44:
        sub_23D5CD440(v132);
        sub_23D5E7220(v123, v124, v121, v46);
        sub_23D5E7220(v117, v118, v115, v119);
        goto LABEL_46;
      }
      v61 = (LODWORD(v125->isa) - 1);
      if (LODWORD(v125->isa))
      {
        v49 = v121;
        if (*(_QWORD *)(v132 + 16) > v61)
        {
          v50 = (int *)(v132 + 32 + 40 * v61);
          if (LODWORD(v125->isa) == *v50)
          {
            v120 = v46;
            v62 = (_QWORD *)(v132 + 32 + 40 * v61);
            v64 = v62[1];
            v63 = v62[2];
            v66 = v62[3];
            v65 = v62[4];
            sub_23D5AFA60(v64, v63);
            sub_23D5E7284(v66, v65);
            v67 = sub_23D5ED23C(v64, v63, v66, v65);
            v79 = v78;
            v126 = v64;
            v128 = (int *)v66;
            v129 = v65;
            v80 = *(_QWORD *)(v5 + 72);
            v81 = *(_QWORD *)(v5 + 80);
            v82 = v67;
            sub_23D5AFA60(v80, v81);
            sub_23D5AFA60(v82, v79);
            sub_23D5D9848(v80, v81);
            v84 = v83;
            sub_23D5DDA20(v82, v79);
            sub_23D5DDA20(v80, v81);
            if ((v84 & 1) != 0)
            {
              sub_23D5DDA20(v82, v79);
              sub_23D5DDA20(v126, v63);
              sub_23D5E725C((uint64_t)v128, v129);
              v46 = v120;
              goto LABEL_44;
            }
            v86 = v82;
            swift_bridgeObjectRelease();
            v132 = v63;
            if (qword_256C78B10 != -1)
              swift_once();
            v87 = sub_23D66BFDC();
            __swift_project_value_buffer(v87, (uint64_t)qword_256C88B78);
            v88 = sub_23D66C588();
            sub_23D5AFA60(v82, v79);
            swift_retain();
            sub_23D5AFA60(v82, v79);
            swift_retain();
            v89 = sub_23D66BFC4();
            if (os_log_type_enabled(v89, v88))
            {
              v90 = swift_slowAlloc();
              v125 = swift_slowAlloc();
              *(_QWORD *)&v135 = v125;
              *(_DWORD *)v90 = 136315394;
              v112 = v90 + 4;
              v114 = (_BYTE *)v79;
              v91 = *(_QWORD *)(v5 + 72);
              v92 = *(_QWORD *)(v5 + 80);
              v109 = v86;
              v93 = v91;
              sub_23D5AFA60(v91, v92);
              sub_23D5B06C8(v93, v92);
              v113 = 0;
              *(_QWORD *)&v133 = v94;
              v116 = v89;
              LODWORD(v122) = v88;
              v111 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
              v110 = sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
              v95 = sub_23D66C378();
              v97 = v96;
              swift_bridgeObjectRelease();
              v98 = v93;
              v86 = v109;
              sub_23D5DDA20(v98, v92);
              *(_QWORD *)&v133 = sub_23D5DDBDC(v95, v97, (uint64_t *)&v135);
              sub_23D66C5D0();
              swift_bridgeObjectRelease();
              swift_release_n();
              *(_WORD *)(v90 + 12) = 2080;
              v99 = (unint64_t)v114;
              sub_23D5B06C8(v86, (uint64_t)v114);
              *(_QWORD *)&v133 = v100;
              v101 = sub_23D66C378();
              v103 = v102;
              swift_bridgeObjectRelease();
              *(_QWORD *)&v133 = sub_23D5DDBDC(v101, v103, (uint64_t *)&v135);
              sub_23D66C5D0();
              swift_bridgeObjectRelease();
              sub_23D5DDA20(v86, v99);
              sub_23D5DDA20(v86, v99);
              v104 = v116;
              _os_log_impl(&dword_23D5A8000, v116, (os_log_type_t)v122, "mismatch seeds, expected %s got %s", (uint8_t *)v90, 0x16u);
              v105 = v125;
              swift_arrayDestroy();
              MEMORY[0x242636844](v105, -1, -1);
              MEMORY[0x242636844](v90, -1, -1);

            }
            else
            {
              swift_release_n();
              sub_23D5DDA20(v82, v79);
              sub_23D5DDA20(v82, v79);

              v99 = v79;
            }
            v106 = v121;
            __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
            sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
            swift_allocError();
            *(_WORD *)v107 = 364;
            *(_OWORD *)(v107 + 8) = xmmword_23D66E220;
            *(_QWORD *)(v107 + 24) = 0x800000023D6771A0;
            *(_QWORD *)(v107 + 32) = 0xD000000000000052;
            *(_QWORD *)(v107 + 40) = 0x800000023D676EF0;
            swift_willThrow();
            sub_23D5DDA20(v126, v132);
            sub_23D5E725C((uint64_t)v128, v129);
            sub_23D5E7220(v117, v118, v115, v119);
            swift_release();
            sub_23D5DDA20(v86, v99);
            v75 = v123;
            v76 = v124;
            v77 = v106;
            v85 = v120;
            goto LABEL_45;
          }
          if (qword_256C78B10 == -1)
          {
LABEL_38:
            v68 = sub_23D66BFDC();
            __swift_project_value_buffer(v68, (uint64_t)qword_256C88B78);
            v69 = sub_23D66C588();
            swift_retain();
            swift_bridgeObjectRetain();
            v70 = sub_23D66BFC4();
            if (os_log_type_enabled(v70, v69))
            {
              v71 = swift_slowAlloc();
              *(_DWORD *)v71 = 67109376;
              LODWORD(v135) = *(_DWORD *)(v5 + 64);
              sub_23D66C5D0();
              swift_release();
              *(_WORD *)(v71 + 8) = 1024;
              v72 = *v50;
              swift_bridgeObjectRelease();
              LODWORD(v135) = v72;
              sub_23D66C5D0();
              swift_bridgeObjectRelease();
              _os_log_impl(&dword_23D5A8000, v70, v69, "misaligned version, expected %u got %u", (uint8_t *)v71, 0xEu);
              v73 = v71;
              v49 = v121;
              MEMORY[0x242636844](v73, -1, -1);
            }
            else
            {
              swift_bridgeObjectRelease_n();
              swift_release();
            }

            __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
            sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
            swift_allocError();
            *(_WORD *)v74 = 371;
            *(_OWORD *)(v74 + 8) = xmmword_23D66E210;
            *(_QWORD *)(v74 + 24) = 0x800000023D6771A0;
            *(_QWORD *)(v74 + 32) = 0xD000000000000052;
            *(_QWORD *)(v74 + 40) = 0x800000023D676EF0;
            swift_willThrow();
            sub_23D5E7220(v117, v118, v115, v119);
            swift_release();
            v75 = v123;
            v76 = v124;
            v77 = v49;
            v85 = v46;
LABEL_45:
            sub_23D5E7220(v75, v76, v77, v85);
            return (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 8))(v131, v127);
          }
LABEL_55:
          swift_once();
          goto LABEL_38;
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      goto LABEL_55;
    }
  }
  if (qword_256C78B10 != -1)
    swift_once();
  v24 = sub_23D66BFDC();
  __swift_project_value_buffer(v24, (uint64_t)qword_256C88B78);
  v25 = sub_23D66C588();
  swift_retain_n();
  v26 = sub_23D66BFC4();
  if (os_log_type_enabled(v26, v25))
  {
    v27 = (uint8_t *)swift_slowAlloc();
    v28 = swift_slowAlloc();
    *(_QWORD *)&v135 = v28;
    *(_DWORD *)v27 = 136315138;
    v29 = sub_23D5B421C(*(_BYTE *)(v5 + v17));
    v139 = sub_23D5DDBDC(v29, v30, (uint64_t *)&v135);
    sub_23D66C5D0();
    swift_bridgeObjectRelease();
    swift_release_n();
    _os_log_impl(&dword_23D5A8000, v26, v25, "invalid state transition in group, current group %s", v27, 0xCu);
    swift_arrayDestroy();
    MEMORY[0x242636844](v28, -1, -1);
    MEMORY[0x242636844](v27, -1, -1);
  }
  else
  {
    swift_release_n();
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v31 = 347;
  *(_OWORD *)(v31 + 8) = xmmword_23D66E240;
  *(_QWORD *)(v31 + 24) = 0x800000023D6771A0;
  *(_QWORD *)(v31 + 32) = 0xD000000000000052;
  *(_QWORD *)(v31 + 40) = 0x800000023D676EF0;
  return swift_willThrow();
}

uint64_t sub_23D5CD440(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  void *v37;
  id v38;
  id v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  id v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  id v50;
  uint64_t v51;
  unint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  __int128 aBlock;
  uint64_t (*v63)(uint64_t);
  void *v64;
  uint64_t (*v65)();
  uint64_t v66;
  void *v67;
  unsigned __int8 v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  _QWORD v73[3];
  uint64_t v74;

  v3 = v2;
  v4 = *(_QWORD *)(result + 16);
  if (v4)
  {
    v53 = v3;
    v5 = v1[2];
    v6 = v1[3];
    v8 = v1[5];
    v7 = v1[6];
    v48 = swift_bridgeObjectRetain();
    v9 = (unint64_t *)(v48 + 64);
    v54 = v5;
    v60 = v7;
    while (1)
    {
      v51 = v4;
      v10 = *((_DWORD *)v9 - 8);
      v11 = *(v9 - 3);
      v12 = *(v9 - 2);
      v52 = v9;
      v14 = *(v9 - 1);
      v13 = *v9;
      sub_23D5AFA60(v11, v12);
      sub_23D5E7284(v14, v13);
      v61 = v11;
      sub_23D5AFA60(v11, v12);
      sub_23D5E7284(v14, v13);
      sub_23D5AFA60(v5, v6);
      sub_23D5AFA60(v8, v7);
      if (qword_25431AB48 != -1)
        swift_once();
      swift_beginAccess();
      sub_23D5AEF48((uint64_t)&unk_25431AC10, (uint64_t)&aBlock, &qword_25431A9A8);
      if (!v64)
        break;
      sub_23D5AEF30(&aBlock, (uint64_t)v73);
      v15 = __swift_project_boxed_opaque_existential_1(v73, v74);
      v16 = *v15;
      v69 = v61;
      v70 = v12;
      v57 = v12;
      v58 = v14;
      v71 = v14;
      v72 = v13;
      v59 = v13;
      v17 = *(void **)(v16 + 32);
      MEMORY[0x24BDAC7A8](v15);
      *(&v47 - 8) = v18;
      *(&v47 - 7) = v5;
      *(&v47 - 6) = v6;
      *(&v47 - 5) = v8;
      *(&v47 - 4) = v7;
      *((_DWORD *)&v47 - 6) = v10;
      v45 = (uint64_t)&v69;
      v67 = 0;
      v68 = -1;
      v19 = (_QWORD *)swift_allocObject();
      v19[2] = &v67;
      v19[3] = sub_23D5F143C;
      v19[4] = &v47 - 10;
      v20 = swift_allocObject();
      *(_QWORD *)(v20 + 16) = sub_23D5F1488;
      *(_QWORD *)(v20 + 24) = v19;
      v65 = sub_23D5F14A4;
      v66 = v20;
      *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v63 = sub_23D6407D4;
      v64 = &block_descriptor;
      v21 = _Block_copy(&aBlock);
      v22 = v66;
      v23 = v17;
      swift_retain();
      swift_release();
      objc_msgSend(v23, sel_performBlockAndWait_, v21);
      _Block_release(v21);
      LOBYTE(v21) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v21 & 1) != 0)
      {
        __break(1u);
LABEL_21:
        __break(1u);
LABEL_22:
        __break(1u);
LABEL_23:
        __break(1u);
LABEL_24:
        sub_23D5AFA60(v22, (unint64_t)v19);
        sub_23D5AFA60(v8, v60);
        break;
      }
      if (v68 == 255)
        goto LABEL_22;
      v22 = v54;
      if ((v68 & 1) != 0)
      {
        *(_QWORD *)&aBlock = v67;
        v39 = v67;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
        swift_willThrowTypedImpl();
        sub_23D5F14C4(v67, v68);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        v40 = v61;
        v41 = v57;
        sub_23D5DDA20(v61, v57);
        v42 = v58;
        v43 = v59;
        sub_23D5E725C(v58, v59);
        sub_23D5DDA20(v40, v41);
        sub_23D5E725C(v42, v43);
        sub_23D5DDA20(v8, v60);
        sub_23D5DDA20(v22, v6);
        return swift_bridgeObjectRelease();
      }
      sub_23D5F14C4(v67, v68);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      v24 = v61;
      v25 = v57;
      sub_23D5DDA20(v61, v57);
      v26 = v58;
      v27 = v59;
      sub_23D5E725C(v58, v59);
      sub_23D5DDA20(v8, v60);
      sub_23D5DDA20(v22, v6);
      sub_23D5AFA60(v24, v25);
      sub_23D5E7284(v26, v27);
      v28 = v53;
      v55 = sub_23D5ED23C(v24, v25, v26, v27);
      v56 = v29;
      if (v28)
      {
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v24, v25);
        sub_23D5E725C(v26, v27);
        sub_23D5DDA20(v24, v25);
        return sub_23D5E725C(v26, v27);
      }
      v53 = 0;
      v30 = v24;
      v19 = (_QWORD *)v6;
      sub_23D5DDA20(v30, v25);
      sub_23D5E725C(v26, v27);
      sub_23D5AEF48((uint64_t)&unk_25431AC10, (uint64_t)&aBlock, &qword_25431A9A8);
      if (!v64)
        goto LABEL_24;
      sub_23D5AEF30(&aBlock, (uint64_t)v73);
      v31 = __swift_project_boxed_opaque_existential_1(v73, v74);
      v49 = &v47;
      v32 = *v31;
      v69 = v55;
      v70 = v56;
      v50 = *(id *)(v32 + 32);
      MEMORY[0x24BDAC7A8](v31);
      *(&v47 - 8) = v33;
      *(&v47 - 7) = v22;
      *(&v47 - 6) = v6;
      *(&v47 - 5) = v8;
      v34 = v60;
      *(&v47 - 4) = v60;
      *((_DWORD *)&v47 - 6) = v10;
      v45 = (uint64_t)&v69;
      v67 = 0;
      v68 = -1;
      v35 = (_QWORD *)swift_allocObject();
      v35[2] = &v67;
      v35[3] = sub_23D5F14E8;
      v35[4] = &v47 - 10;
      v36 = v22;
      v22 = swift_allocObject();
      *(_QWORD *)(v22 + 16) = sub_23D5F2DA0;
      *(_QWORD *)(v22 + 24) = v35;
      v65 = sub_23D5F2D50;
      v66 = v22;
      *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v63 = sub_23D6407D4;
      v64 = &block_descriptor_48;
      v37 = _Block_copy(&aBlock);
      sub_23D5AFA60(v36, v6);
      sub_23D5AFA60(v8, v34);
      v38 = v50;
      swift_retain();
      swift_release();
      objc_msgSend(v38, sel_performBlockAndWait_, v37);
      _Block_release(v37);
      LOBYTE(v37) = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((v37 & 1) != 0)
        goto LABEL_21;
      if (v68 == 255)
        goto LABEL_23;
      if ((v68 & 1) != 0)
      {
        *(_QWORD *)&aBlock = v67;
        v44 = v67;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
        swift_willThrowTypedImpl();
        sub_23D5F14C4(v67, v68);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
        sub_23D5DDA20(v55, v56);
        sub_23D5DDA20(v61, v57);
        sub_23D5E725C(v58, v59);
        sub_23D5DDA20(v8, v60);
        sub_23D5DDA20(v54, v6);
        return swift_bridgeObjectRelease();
      }
      v9 = v52 + 5;
      sub_23D5F14C4(v67, v68);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v73);
      sub_23D5DDA20(v55, v56);
      sub_23D5DDA20(v61, v57);
      sub_23D5E725C(v58, v59);
      v7 = v60;
      sub_23D5DDA20(v8, v60);
      v5 = v54;
      sub_23D5DDA20(v54, v6);
      v4 = v51 - 1;
      if (v51 == 1)
        return swift_bridgeObjectRelease();
    }
    sub_23D5AEF8C((uint64_t)&aBlock, &qword_25431A9A8);
    v46 = 0;
    v45 = 98;
    result = sub_23D66C720();
    __break(1u);
  }
  return result;
}

uint64_t sub_23D5CDD14(uint64_t result)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  int v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void *v17;
  id v18;
  char isEscapingClosureAtFileLocation;
  id v20;
  _QWORD v21[7];
  int v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  __int128 aBlock;
  uint64_t (*v32)(uint64_t);
  void *v33;
  uint64_t (*v34)();
  uint64_t v35;
  void *v36;
  unsigned __int8 v37;
  _QWORD v38[2];
  _QWORD v39[5];

  v2 = *(_QWORD *)(result + 16);
  if (v2)
  {
    v3 = v1[2];
    v4 = v1[3];
    v5 = v1[5];
    v6 = v1[6];
    v25 = swift_bridgeObjectRetain();
    v7 = (unint64_t *)(v25 + 48);
    v27 = v3;
    v26 = v4;
    v29 = v6;
    v30 = v5;
    while (1)
    {
      v28 = v2;
      v8 = *((_DWORD *)v7 - 4);
      v9 = *(v7 - 1);
      v10 = *v7;
      sub_23D5AFA60(v9, *v7);
      sub_23D5AFA60(v9, v10);
      sub_23D5AFA60(v3, v4);
      sub_23D5AFA60(v5, v6);
      if (qword_25431AB48 != -1)
        swift_once();
      swift_beginAccess();
      sub_23D5AEF48((uint64_t)&unk_25431AC10, (uint64_t)&aBlock, &qword_25431A9A8);
      if (!v33)
        break;
      sub_23D5AEF30(&aBlock, (uint64_t)v39);
      v11 = __swift_project_boxed_opaque_existential_1(v39, v39[3]);
      v12 = *v11;
      v38[0] = v9;
      v38[1] = v10;
      v13 = *(void **)(v12 + 32);
      MEMORY[0x24BDAC7A8](v11);
      v21[2] = v14;
      v21[3] = v3;
      v21[4] = v4;
      v21[5] = v30;
      v21[6] = v29;
      v22 = v8;
      v23 = (uint64_t)v38;
      v36 = 0;
      v37 = -1;
      v15 = (_QWORD *)swift_allocObject();
      v15[2] = &v36;
      v15[3] = sub_23D5F14E8;
      v15[4] = v21;
      v16 = swift_allocObject();
      *(_QWORD *)(v16 + 16) = sub_23D5F2DA0;
      *(_QWORD *)(v16 + 24) = v15;
      v34 = sub_23D5F2D50;
      v35 = v16;
      *(_QWORD *)&aBlock = MEMORY[0x24BDAC760];
      *((_QWORD *)&aBlock + 1) = 1107296256;
      v32 = sub_23D6407D4;
      v33 = &block_descriptor_60;
      v17 = _Block_copy(&aBlock);
      v18 = v13;
      swift_retain();
      swift_release();
      objc_msgSend(v18, sel_performBlockAndWait_, v17);
      _Block_release(v17);
      isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
      swift_release();
      if ((isEscapingClosureAtFileLocation & 1) != 0)
      {
        __break(1u);
LABEL_14:
        __break(1u);
        break;
      }
      if (v37 == 255)
        goto LABEL_14;
      if ((v37 & 1) != 0)
      {
        *(_QWORD *)&aBlock = v36;
        v20 = v36;
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
        swift_willThrowTypedImpl();
        sub_23D5F14C4(v36, v37);

        swift_release();
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
        sub_23D5DDA20(v9, v10);
        sub_23D5DDA20(v9, v10);
        sub_23D5DDA20(v30, v29);
        sub_23D5DDA20(v27, v26);
        return swift_bridgeObjectRelease();
      }
      v7 += 3;
      sub_23D5F14C4(v36, v37);

      swift_release();
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v39);
      sub_23D5DDA20(v9, v10);
      sub_23D5DDA20(v9, v10);
      v6 = v29;
      v5 = v30;
      sub_23D5DDA20(v30, v29);
      v3 = v27;
      v4 = v26;
      sub_23D5DDA20(v27, v26);
      v2 = v28 - 1;
      if (v28 == 1)
        return swift_bridgeObjectRelease();
    }
    sub_23D5AEF8C((uint64_t)&aBlock, &qword_25431A9A8);
    v24 = 0;
    v23 = 98;
    result = sub_23D66C720();
    __break(1u);
  }
  return result;
}

uint64_t *sub_23D5CE144(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  os_log_type_t v14;
  uint8_t *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37[8];
  unint64_t v38;

  v3 = v1;
  v5 = sub_23D66C2AC();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*((_BYTE *)v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v18 = sub_23D66BFDC();
    __swift_project_value_buffer(v18, (uint64_t)qword_256C88B78);
    v19 = sub_23D66C588();
    swift_retain_n();
    v20 = sub_23D66BFC4();
    v21 = v19;
    if (os_log_type_enabled(v20, v19))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      v23 = swift_slowAlloc();
      v37[0] = v23;
      *(_DWORD *)v22 = 136315138;
      v24 = sub_23D5B421C(*((_BYTE *)v3 + v9));
      v37[5] = sub_23D5DDBDC(v24, v25, v37);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v20, v21, "invalid group state, current state %s", v22, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v23, -1, -1);
      MEMORY[0x242636844](v22, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v3 = &qword_256C790D8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v16 = 310;
    v17 = xmmword_23D66E250;
    goto LABEL_15;
  }
  v34 = *a1;
  swift_beginAccess();
  if ((v3[4] & 1) != 0 || (v10 = v3[12], v10 >> 60 == 15))
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v11 = sub_23D66BFDC();
    __swift_project_value_buffer(v11, (uint64_t)qword_256C88B78);
    v12 = sub_23D66C588();
    v13 = sub_23D66BFC4();
    v14 = v12;
    if (os_log_type_enabled(v13, v12))
    {
      v15 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v15 = 0;
      _os_log_impl(&dword_23D5A8000, v13, v14, "must be an administrator to create destroy request", v15, 2u);
      MEMORY[0x242636844](v15, -1, -1);
    }

    v3 = &qword_256C790D8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v16 = 378;
    v17 = xmmword_23D66E260;
LABEL_15:
    *(_OWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v16 + 24) = 0x800000023D6771D0;
    *(_QWORD *)(v16 + 32) = 0xD000000000000052;
    *(_QWORD *)(v16 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return v3;
  }
  v27 = v3[11];
  v28 = v3[13];
  v29 = v3[14];
  v37[3] = (uint64_t)&type metadata for AdminSeed;
  v37[4] = sub_23D5E803C();
  v30 = (_QWORD *)swift_allocObject();
  v37[0] = (uint64_t)v30;
  v30[2] = v27;
  v30[3] = v10;
  v30[4] = v28;
  v30[5] = v29;
  sub_23D5AFA60(v27, v10);
  sub_23D5E7284(v28, v29);
  sub_23D5AFA60(v27, v10);
  sub_23D5E7284(v28, v29);
  if (qword_256C78D20 != -1)
    swift_once();
  sub_23D61D674((uint64_t)v37, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v37);
  if (v2)
  {
    sub_23D5E7220(v27, v10, v28, v29);
  }
  else
  {
    v38 = v29;
    v31 = v3[3];
    v37[0] = v3[2];
    v37[1] = v31;
    v35 = xmmword_23D66DF30;
    v36 = v34;
    v33 = v31;
    *(_QWORD *)&v34 = v37[0];
    sub_23D5AFA60(v37[0], v31);
    v3 = (uint64_t *)sub_23D631A38((uint64_t)v8, 5, 1, v37, (uint64_t *)&v36, (uint64_t *)&v35);
    sub_23D5E7220(v27, v10, v28, v38);
    sub_23D5DDA20(v34, v33);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  }
  return v3;
}

uint8_t *sub_23D5CE6A0(__int128 *a1)
{
  uint64_t v1;
  uint8_t *v2;
  uint8_t *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  NSObject *v18;
  os_log_type_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29[2];
  __int128 v30;
  uint64_t v31[3];

  v3 = v2;
  v4 = v1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v29[-2] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = sub_23D66C2AC();
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v29[-2] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
    goto LABEL_6;
  v28 = *a1;
  v14 = v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v15 = type metadata accessor for UserKeyingInfo(0);
  sub_23D5AEF48(v14 + *(int *)(v15 + 44), (uint64_t)v8, &qword_256C79120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1, v9) == 1)
  {
    sub_23D5AEF8C((uint64_t)v8, &qword_256C79120);
LABEL_6:
    if (qword_256C78B10 != -1)
      swift_once();
    v17 = sub_23D66BFDC();
    __swift_project_value_buffer(v17, (uint64_t)qword_256C88B78);
    v3 = (uint8_t *)sub_23D66C588();
    swift_retain_n();
    v18 = sub_23D66BFC4();
    v19 = v3;
    if (os_log_type_enabled(v18, (os_log_type_t)v3))
    {
      v3 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v31[0] = v20;
      *(_DWORD *)v3 = 136315138;
      v21 = sub_23D5B421C(*(_BYTE *)(v4 + v13));
      *(_QWORD *)&v30 = sub_23D5DDBDC(v21, v22, v31);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v18, v19, "invalid group state, current state %s", v3, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v20, -1, -1);
      MEMORY[0x242636844](v3, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v23 = 310;
    *(_OWORD *)(v23 + 8) = xmmword_23D66E270;
    *(_QWORD *)(v23 + 24) = 0x800000023D677200;
    *(_QWORD *)(v23 + 32) = 0xD000000000000052;
    *(_QWORD *)(v23 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return v3;
  }
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v8, v9);
  v16 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v16 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
    goto LABEL_6;
  }
  v25 = *(_QWORD *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  v26 = *(_OWORD *)(v4 + 16);
  v30 = v28;
  *(_OWORD *)v31 = v26;
  v29[0] = v25;
  v29[1] = v16;
  v27 = sub_23D631A38((uint64_t)v12, 3, 1, v31, (uint64_t *)&v30, v29);
  if (!v2)
    v3 = (uint8_t *)v27;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v3;
}

uint64_t sub_23D5CEA88(__int128 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  os_log_type_t v17;
  NSObject *v18;
  uint8_t *v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  uint8_t *v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34[2];
  __int128 v35;
  __int128 v36;
  uint64_t v37[3];

  v3 = v1;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v34[-2] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23D66C2AC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v34[-2] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
    goto LABEL_6;
  v33 = *a1;
  v13 = v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v14 = type metadata accessor for UserKeyingInfo(0);
  sub_23D5AEF48(v13 + *(int *)(v14 + 44), (uint64_t)v7, &qword_256C79120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_23D5AEF8C((uint64_t)v7, &qword_256C79120);
LABEL_6:
    if (qword_256C78B10 != -1)
      swift_once();
    v16 = sub_23D66BFDC();
    __swift_project_value_buffer(v16, (uint64_t)qword_256C88B78);
    v17 = sub_23D66C588();
    swift_retain_n();
    v18 = sub_23D66BFC4();
    if (os_log_type_enabled(v18, v17))
    {
      v19 = (uint8_t *)swift_slowAlloc();
      v20 = swift_slowAlloc();
      v37[0] = v20;
      *(_DWORD *)v19 = 136315138;
      v21 = sub_23D5B421C(*(_BYTE *)(v3 + v12));
      *(_QWORD *)&v36 = sub_23D5DDBDC(v21, v22, v37);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v18, v17, "invalid group state, current state %s", v19, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v20, -1, -1);
      MEMORY[0x242636844](v19, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v23 = 310;
    *(_OWORD *)(v23 + 8) = xmmword_23D66E290;
    *(_QWORD *)(v23 + 24) = 0x800000023D677220;
    *(_QWORD *)(v23 + 32) = 0xD000000000000052;
    *(_QWORD *)(v23 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return v3;
  }
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v11, v7, v8);
  v15 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
  if (v15 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    goto LABEL_6;
  }
  v25 = *(_QWORD *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
  swift_beginAccess();
  if ((*(_BYTE *)(v3 + 32) & 1) != 0)
  {
    sub_23D5AFA60(v25, v15);
    if (qword_256C78B10 != -1)
      swift_once();
    v26 = sub_23D66BFDC();
    __swift_project_value_buffer(v26, (uint64_t)qword_256C88B78);
    v27 = sub_23D66C588();
    v28 = sub_23D66BFC4();
    if (os_log_type_enabled(v28, v27))
    {
      v29 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v29 = 0;
      _os_log_impl(&dword_23D5A8000, v28, v27, "must be an administrator to create demote request", v29, 2u);
      MEMORY[0x242636844](v29, -1, -1);
    }

    v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v30 = 378;
    *(_OWORD *)(v30 + 8) = xmmword_23D66E280;
    *(_QWORD *)(v30 + 24) = 0x800000023D677220;
    *(_QWORD *)(v30 + 32) = 0xD000000000000052;
    *(_QWORD *)(v30 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5E725C(v25, v15);
  }
  else
  {
    v31 = *(_OWORD *)(v3 + 16);
    v35 = v33;
    v36 = v31;
    v34[0] = v25;
    v34[1] = v15;
    v32 = sub_23D631A38((uint64_t)v11, 4, 1, (uint64_t *)&v36, (uint64_t *)&v35, v34);
    if (!v2)
    {
      v3 = v32;
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      return v3;
    }
  }
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  return v3;
}

void sub_23D5CEFEC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  os_log_type_t v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 7)
  {
    v2 = v0;
    if (qword_256C78B10 != -1)
      swift_once();
    v3 = sub_23D66BFDC();
    __swift_project_value_buffer(v3, (uint64_t)qword_256C88B78);
    v4 = sub_23D66C588();
    swift_retain_n();
    v5 = sub_23D66BFC4();
    v6 = v4;
    if (os_log_type_enabled(v5, v4))
    {
      v7 = (uint8_t *)swift_slowAlloc();
      v8 = swift_slowAlloc();
      v12 = v8;
      *(_DWORD *)v7 = 136315138;
      v9 = sub_23D5B421C(*(_BYTE *)(v2 + v1));
      sub_23D5DDBDC(v9, v10, &v12);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v5, v6, "invalid group state, current state %s", v7, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v8, -1, -1);
      MEMORY[0x242636844](v7, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v11 = 310;
    *(_OWORD *)(v11 + 8) = xmmword_23D66E2A0;
    *(_QWORD *)(v11 + 24) = 0x800000023D677C10;
    *(_QWORD *)(v11 + 32) = 0xD000000000000052;
    *(_QWORD *)(v11 + 40) = 0x800000023D676EF0;
    swift_willThrow();
  }
}

uint64_t *sub_23D5CF234(__int128 *a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  ValueMetadata *v43;
  unint64_t v44;
  uint64_t v45;

  v3 = v1;
  v5 = sub_23D66C2DC();
  v40 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_RSVPQueueRequest(0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23D66C2AC();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*((_BYTE *)v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 6)
  {
    v17 = v5;
    v37 = v13;
    v38 = v12;
    v39 = *a1;
    v18 = v3[9];
    v19 = v3[10];
    v43 = &type metadata for MemberSeed;
    v44 = sub_23D5ED1F8();
    v41 = v18;
    v42 = v19;
    sub_23D5AFA60(v18, v19);
    sub_23D5AFA60(v18, v19);
    if (qword_256C78D48 != -1)
      swift_once();
    sub_23D61D674((uint64_t)&v41, 1, qword_256C89140, *(uint64_t *)algn_256C89148);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v41);
    v20 = sub_23D5DDA20(v18, v19);
    if (!v2)
    {
      MEMORY[0x24BDAC7A8](v20);
      *(&v37 - 4) = (uint64_t)v3;
      *(_OWORD *)(&v37 - 3) = v39;
      *(&v37 - 1) = (uint64_t)v15;
      *(_QWORD *)&v39 = sub_23D5AE928(&qword_256C791A8, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D672B24);
      sub_23D66BF4C();
      v21 = sub_23D5DA1E8(&qword_256C78B60, &qword_256C88C20, (unint64_t *)algn_256C88C28);
      v23 = v22;
      v41 = v21;
      v42 = v22;
      sub_23D5E6898();
      sub_23D66C2A0();
      sub_23D5DDA20(v21, v23);
      v33 = sub_23D66C2B8();
      v35 = v34;
      (*(void (**)(char *, uint64_t))(v40 + 8))(v7, v17);
      sub_23D5DDA20(*((_QWORD *)v10 + 7), *((_QWORD *)v10 + 8));
      *((_QWORD *)v10 + 7) = v33;
      *((_QWORD *)v10 + 8) = v35;
      v3 = (uint64_t *)sub_23D66BF1C();
      sub_23D5E6950((uint64_t)v10, type metadata accessor for GKCrypto_RSVPQueueRequest);
      (*(void (**)(char *, uint64_t))(v37 + 8))(v15, v38);
    }
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v24 = sub_23D66BFDC();
    __swift_project_value_buffer(v24, (uint64_t)qword_256C88B78);
    v25 = sub_23D66C588();
    swift_retain_n();
    v26 = sub_23D66BFC4();
    v27 = v25;
    if (os_log_type_enabled(v26, v25))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      v29 = swift_slowAlloc();
      v41 = v29;
      *(_DWORD *)v28 = 136315138;
      v30 = sub_23D5B421C(*((_BYTE *)v3 + v16));
      v45 = sub_23D5DDBDC(v30, v31, &v41);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v26, v27, "invalid state transition in group, current state %s", v28, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v29, -1, -1);
      MEMORY[0x242636844](v28, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v3 = &qword_256C790D8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v32 = 347;
    *(_OWORD *)(v32 + 8) = xmmword_23D66E2B0;
    *(_QWORD *)(v32 + 24) = 0x800000023D677250;
    *(_QWORD *)(v32 + 32) = 0xD000000000000052;
    *(_QWORD *)(v32 + 40) = 0x800000023D676EF0;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_23D5CF76C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t result;
  uint64_t v22;
  uint64_t v23;

  v22 = a5;
  v23 = sub_23D66C330();
  v9 = *(_QWORD *)(v23 - 8);
  MEMORY[0x24BDAC7A8](v23);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  v13 = *(_QWORD *)(a2 + 16);
  v12 = *(_QWORD *)(a2 + 24);
  v14 = *(_QWORD *)(a1 + 24);
  v15 = *(_QWORD *)(a1 + 32);
  sub_23D5AFA60(v13, v12);
  sub_23D5DDA20(v14, v15);
  *(_QWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 32) = v12;
  v16 = *(_QWORD *)(a1 + 8);
  v17 = *(_QWORD *)(a1 + 16);
  sub_23D5AFA60(a3, a4);
  sub_23D5DDA20(v16, v17);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  sub_23D66C264();
  v18 = sub_23D66C1F8();
  v20 = v19;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v23);
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = v18;
  *(_QWORD *)(a1 + 48) = v20;
  return result;
}

uint64_t sub_23D5CF884@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  int *v27;
  unint64_t v28;
  uint64_t result;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int (*v36)(uint64_t, uint64_t, unint64_t);
  uint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  int *v40;
  NSObject *v41;
  os_log_type_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  os_log_type_t v55;
  NSObject *v56;
  os_log_type_t v57;
  _BOOL4 v58;
  uint64_t v59;
  uint64_t v60;
  uint8_t *v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  uint64_t v65;
  os_log_type_t v66;
  NSObject *v67;
  os_log_type_t v68;
  uint8_t *v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  os_log_type_t v74;
  NSObject *v75;
  os_log_type_t v76;
  _BOOL4 v77;
  uint8_t *v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  char v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  char *v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  char v102;
  void (*v103)(char *, uint64_t);
  unint64_t v104;
  uint64_t v105;
  os_log_type_t v106;
  NSObject *v107;
  os_log_type_t v108;
  uint8_t *v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int *v113;
  uint64_t *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  __int128 v127;
  uint64_t v128[3];
  __int128 v129;
  __int128 v130;
  unint64_t v131;
  char v132;

  v114 = a3;
  v117 = sub_23D66C2AC();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v115 = (char *)&v111 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23D66C330();
  v7 = *(_QWORD *)(v6 - 8);
  v120 = v6;
  v121 = v7;
  v8 = MEMORY[0x24BDAC7A8](v6);
  v118 = (char *)&v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v122 = (uint64_t)&v111 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v125 = (uint64_t)&v111 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v124 = (uint64_t)&v111 - v14;
  v123 = type metadata accessor for GKCrypto_RSVP(0);
  v15 = *(_QWORD *)(v123 - 8);
  v16 = MEMORY[0x24BDAC7A8](v123);
  v18 = (char *)&v111 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v16);
  v20 = (char *)&v111 - v19;
  v21 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v21);
  v22 = type metadata accessor for GKCrypto_SignedRSVP(0);
  v23 = MEMORY[0x24BDAC7A8](v22);
  v25 = (char *)&v111 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v27 = (int *)((char *)&v111 - v26);
  v131 = 0;
  v129 = 0u;
  v130 = 0u;
  sub_23D5AFA60(a1, a2);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C791B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D672AAC);
  v28 = v126;
  result = sub_23D66BF10();
  if (!v28)
  {
    v30 = (uint64_t)v20;
    v126 = 0;
    v113 = (int *)v25;
    v31 = v123;
    v32 = v125;
    v111 = a1;
    v112 = a2;
    if (*v27 != 1)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v38 = sub_23D66BFDC();
      __swift_project_value_buffer(v38, (uint64_t)qword_256C88B78);
      v39 = sub_23D66C588();
      v40 = v113;
      sub_23D5E7298((uint64_t)v27, (uint64_t)v113, type metadata accessor for GKCrypto_SignedRSVP);
      v41 = sub_23D66BFC4();
      v42 = v39;
      if (os_log_type_enabled(v41, v39))
      {
        v43 = swift_slowAlloc();
        *(_DWORD *)v43 = 67109376;
        v44 = *v40;
        sub_23D5E6950((uint64_t)v40, type metadata accessor for GKCrypto_SignedRSVP);
        LODWORD(v129) = v44;
        sub_23D66C5D0();
        *(_WORD *)(v43 + 8) = 1024;
        LODWORD(v129) = 1;
        sub_23D66C5D0();
        _os_log_impl(&dword_23D5A8000, v41, v42, "unsupported group version, got %u expeected %u", (uint8_t *)v43, 0xEu);
        MEMORY[0x242636844](v43, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v40, type metadata accessor for GKCrypto_SignedRSVP);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v48 = 305;
      *(_OWORD *)(v48 + 8) = xmmword_23D66E2C0;
      *(_QWORD *)(v48 + 24) = 0x800000023D677270;
      *(_QWORD *)(v48 + 32) = 0xD000000000000052;
      *(_QWORD *)(v48 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      goto LABEL_27;
    }
    v33 = *(int *)(v22 + 28);
    v113 = v27;
    v34 = (uint64_t)v27 + v33;
    v35 = v124;
    sub_23D5AEF48((uint64_t)v27 + v33, v124, &qword_256C791B0);
    v36 = *(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v15 + 48);
    v37 = v30;
    if (v36(v35, 1, v31) == 1)
    {
      *(_DWORD *)v30 = 0;
      *(_QWORD *)(v30 + 8) = 0;
      *(_BYTE *)(v30 + 16) = 1;
      *(_OWORD *)(v30 + 24) = xmmword_23D66DF40;
      *(_OWORD *)(v30 + 40) = xmmword_23D66DF40;
      *(_OWORD *)(v30 + 56) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v35, &qword_256C791B0);
    }
    else
    {
      sub_23D5E7F64(v35, v30, type metadata accessor for GKCrypto_RSVP);
    }
    v45 = v32;
    v46 = v126;
    v126 = *(_QWORD *)(v37 + 8);
    v47 = *(unsigned __int8 *)(v37 + 16);
    sub_23D5E6950(v37, type metadata accessor for GKCrypto_RSVP);
    sub_23D5AEF48(v34, v45, &qword_256C791B0);
    if (v36(v45, 1, v31) == 1)
    {
      *(_DWORD *)v18 = 0;
      *((_QWORD *)v18 + 1) = 0;
      v18[16] = 1;
      *(_OWORD *)(v18 + 24) = xmmword_23D66DF40;
      *(_OWORD *)(v18 + 40) = xmmword_23D66DF40;
      *(_OWORD *)(v18 + 56) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v45, &qword_256C791B0);
    }
    else
    {
      sub_23D5E7F64(v45, (uint64_t)v18, type metadata accessor for GKCrypto_RSVP);
    }
    v49 = v122;
    v50 = *((_QWORD *)v18 + 7);
    v51 = *((_QWORD *)v18 + 8);
    sub_23D5AFA60(v50, v51);
    sub_23D5E6950((uint64_t)v18, type metadata accessor for GKCrypto_RSVP);
    *(_QWORD *)&v129 = v50;
    *((_QWORD *)&v129 + 1) = v51;
    sub_23D66C324();
    if (v46)
    {
LABEL_16:
      v52 = (uint64_t)v113;
      return sub_23D5E6950(v52, type metadata accessor for GKCrypto_SignedRSVP);
    }
    v27 = v113;
    if (!v47)
      goto LABEL_21;
    v53 = v126;
    if ((unint64_t)(v126 - 1) < 4)
    {
      sub_23D5D07AC((uint64_t)&v129);
      v64 = v120;
      if (v130 == 2)
      {
        if (qword_256C78B10 != -1)
          swift_once();
        v65 = sub_23D66BFDC();
        __swift_project_value_buffer(v65, (uint64_t)qword_256C88B78);
        v66 = sub_23D66C588();
        v67 = sub_23D66BFC4();
        v68 = v66;
        if (os_log_type_enabled(v67, v66))
        {
          v69 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v69 = 0;
          _os_log_impl(&dword_23D5A8000, v67, v68, "diversified key not found in group", v69, 2u);
          MEMORY[0x242636844](v69, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v70 = 379;
        *(_OWORD *)(v70 + 8) = xmmword_23D66E2F0;
        *(_QWORD *)(v70 + 24) = 0x800000023D677270;
        *(_QWORD *)(v70 + 32) = 0xD000000000000052;
        *(_QWORD *)(v70 + 40) = 0x800000023D676EF0;
        swift_willThrow();
        (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v49, v64);
        goto LABEL_27;
      }
      v79 = *(_QWORD *)(v119 + 16);
      v80 = *(_QWORD *)(v119 + 24);
      v128[0] = v79;
      v128[1] = v80;
      v127 = v129;
      v132 = v130 & 1;
      sub_23D5AFA60(v79, v80);
      sub_23D631FF8(v53, 1, v128, (uint64_t *)&v127);
      v82 = *((_QWORD *)&v129 + 1);
      v81 = v129;
      v83 = *((_QWORD *)&v130 + 1);
      v126 = v130;
      v84 = v131;
      LODWORD(v125) = BYTE1(v131);
LABEL_44:
      *(_QWORD *)&v129 = v79;
      *((_QWORD *)&v129 + 1) = v80;
      sub_23D5AFA60(v79, v80);
      v85 = v122;
      sub_23D632138(v122, (uint64_t *)&v129, v111, v112);
      sub_23D5DDA20(v79, v80);
      (*(void (**)(uint64_t, uint64_t))(v121 + 8))(v85, v64);
      result = sub_23D5E6950((uint64_t)v113, type metadata accessor for GKCrypto_SignedRSVP);
      v94 = v114;
      *v114 = v81;
      v94[1] = v82;
      v94[2] = v126;
      v94[3] = v83;
      *((_BYTE *)v94 + 32) = v84;
      *((_BYTE *)v94 + 33) = v125;
      return result;
    }
    if (v126)
    {
      v71 = v119;
      swift_beginAccess();
      if ((*(_BYTE *)(v71 + 32) & 1) == 0)
      {
        v72 = *(_QWORD *)(v71 + 96);
        if (v72 >> 60 != 15)
        {
          v86 = *(_QWORD *)(v71 + 88);
          v88 = *(_QWORD *)(v71 + 104);
          v87 = *(_QWORD *)(v71 + 112);
          *((_QWORD *)&v130 + 1) = &type metadata for AdminSeed;
          v131 = sub_23D5E803C();
          v89 = (_QWORD *)swift_allocObject();
          *(_QWORD *)&v129 = v89;
          v89[2] = v86;
          v89[3] = v72;
          v89[4] = v88;
          v89[5] = v87;
          sub_23D5AFA60(v86, v72);
          sub_23D5E7284(v88, v87);
          v124 = v86;
          sub_23D5AFA60(v86, v72);
          v125 = v88;
          v126 = v87;
          sub_23D5E7284(v88, v87);
          v64 = v120;
          if (qword_256C78D20 != -1)
            swift_once();
          v90 = v115;
          sub_23D61D674((uint64_t)&v129, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
          v92 = v117;
          v91 = v118;
          v93 = v116;
          v123 = v72;
          __swift_destroy_boxed_opaque_existential_1((uint64_t)&v129);
          v95 = v91;
          sub_23D66C264();
          (*(void (**)(char *, uint64_t))(v93 + 8))(v90, v92);
          v96 = sub_23D66C1D4();
          v98 = v97;
          v99 = sub_23D66C1D4();
          v101 = v100;
          sub_23D5E6578(v96, v98);
          LOBYTE(v93) = v102;
          sub_23D5DDA20(v99, v101);
          sub_23D5DDA20(v96, v98);
          v103 = *(void (**)(char *, uint64_t))(v121 + 8);
          v103(v95, v64);
          if ((v93 & 1) == 0)
          {
            v104 = v123;
            if (qword_256C78B10 != -1)
              swift_once();
            v105 = sub_23D66BFDC();
            __swift_project_value_buffer(v105, (uint64_t)qword_256C88B78);
            v106 = sub_23D66C588();
            v107 = sub_23D66BFC4();
            v108 = v106;
            if (os_log_type_enabled(v107, v106))
            {
              v109 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v109 = 0;
              _os_log_impl(&dword_23D5A8000, v107, v108, "administrator verification key does not correspond to the group", v109, 2u);
              MEMORY[0x242636844](v109, -1, -1);
            }

            __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
            sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
            swift_allocError();
            *(_WORD *)v110 = 380;
            *(_OWORD *)(v110 + 8) = xmmword_23D66E2D0;
            *(_QWORD *)(v110 + 24) = 0x800000023D677270;
            *(_QWORD *)(v110 + 32) = 0xD000000000000052;
            *(_QWORD *)(v110 + 40) = 0x800000023D676EF0;
            swift_willThrow();
            sub_23D5E7220(v124, v104, v125, v126);
            v103((char *)v49, v64);
            goto LABEL_16;
          }
          v81 = *(_QWORD *)(v119 + 16);
          v82 = *(_QWORD *)(v119 + 24);
          sub_23D5AFA60(v81, v82);
          sub_23D5E7220(v124, v123, v125, v126);
          v126 = 0;
          LODWORD(v125) = 1;
          v84 = 2;
          v83 = 0xF000000000000000;
          v79 = v81;
          v80 = v82;
          goto LABEL_44;
        }
      }
      v60 = v120;
      if (qword_256C78B10 != -1)
        swift_once();
      v73 = sub_23D66BFDC();
      __swift_project_value_buffer(v73, (uint64_t)qword_256C88B78);
      v74 = sub_23D66C588();
      v75 = sub_23D66BFC4();
      v76 = v74;
      v77 = os_log_type_enabled(v75, v74);
      v59 = v121;
      if (v77)
      {
        v78 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v78 = 0;
        _os_log_impl(&dword_23D5A8000, v75, v76, "member is not an administrator", v78, 2u);
        MEMORY[0x242636844](v78, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v62 = 378;
      v63 = xmmword_23D66E2E0;
    }
    else
    {
LABEL_21:
      if (qword_256C78B10 != -1)
        swift_once();
      v54 = sub_23D66BFDC();
      __swift_project_value_buffer(v54, (uint64_t)qword_256C88B78);
      v55 = sub_23D66C588();
      v56 = sub_23D66BFC4();
      v57 = v55;
      v58 = os_log_type_enabled(v56, v55);
      v60 = v120;
      v59 = v121;
      if (v58)
      {
        v61 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v61 = 0;
        _os_log_impl(&dword_23D5A8000, v56, v57, "unknown RSVPQueueRequest type", v61, 2u);
        MEMORY[0x242636844](v61, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v62 = 381;
      v63 = xmmword_23D66E300;
    }
    *(_OWORD *)(v62 + 8) = v63;
    *(_QWORD *)(v62 + 24) = 0x800000023D677270;
    *(_QWORD *)(v62 + 32) = 0xD000000000000052;
    *(_QWORD *)(v62 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v49, v60);
LABEL_27:
    v52 = (uint64_t)v27;
    return sub_23D5E6950(v52, type metadata accessor for GKCrypto_SignedRSVP);
  }
  return result;
}

uint64_t sub_23D5D07AC@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  char v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint8_t *v13;
  uint64_t v14;

  swift_beginAccess();
  v3 = swift_bridgeObjectRetain();
  v4 = sub_23D5E6D74(v3, (void (*)(__int128 *__return_ptr, uint64_t, uint64_t))sub_23D5F1424);
  result = swift_bridgeObjectRelease();
  if (!v1)
  {
    v6 = *(_QWORD *)(v4 + 16);
    if (v6 > 1)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v10 = sub_23D66BFDC();
      __swift_project_value_buffer(v10, (uint64_t)qword_256C88B78);
      v11 = sub_23D66C588();
      swift_bridgeObjectRetain();
      v12 = sub_23D66BFC4();
      if (os_log_type_enabled(v12, v11))
      {
        v13 = (uint8_t *)swift_slowAlloc();
        *(_DWORD *)v13 = 134217984;
        swift_bridgeObjectRelease();
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23D5A8000, v12, v11, "invalid group state (matching members count %ld", v13, 0xCu);
        MEMORY[0x242636844](v13, -1, -1);

      }
      else
      {

        swift_bridgeObjectRelease_n();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v14 = 310;
      *(_OWORD *)(v14 + 8) = xmmword_23D66E310;
      *(_QWORD *)(v14 + 24) = 0x800000023D677970;
      *(_QWORD *)(v14 + 32) = 0xD000000000000052;
      *(_QWORD *)(v14 + 40) = 0x800000023D676EF0;
      return swift_willThrow();
    }
    else
    {
      if (v6)
      {
        v7 = *(_QWORD *)(v4 + 32);
        v8 = *(_QWORD *)(v4 + 40);
        v9 = *(_BYTE *)(v4 + 48);
        sub_23D5AFA60(v7, v8);
      }
      else
      {
        v7 = 0;
        v8 = 0;
        v9 = 2;
      }
      result = swift_bridgeObjectRelease();
      *(_QWORD *)a1 = v7;
      *(_QWORD *)(a1 + 8) = v8;
      *(_BYTE *)(a1 + 16) = v9;
    }
  }
  return result;
}

uint64_t sub_23D5D0A1C@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t result;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  char v31;
  char v32;
  char v33;
  uint64_t v34;
  uint64_t *v35;
  char *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = a3;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23D66C330();
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v16 = a1[1];
  v39 = v15;
  v17 = type metadata accessor for GroupMembership.MemberProperties(0);
  sub_23D5AEF48((uint64_t)&a2[*(int *)(v17 + 28)], (uint64_t)v10, &qword_256C799E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
  {
    sub_23D5AEF8C((uint64_t)v10, &qword_256C799E0);
    if (qword_256C78B10 != -1)
      swift_once();
    v18 = sub_23D66BFDC();
    __swift_project_value_buffer(v18, (uint64_t)qword_256C88B78);
    v19 = sub_23D66C588();
    v20 = sub_23D66BFC4();
    v21 = v19;
    if (os_log_type_enabled(v20, v19))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_23D5A8000, v20, v21, "invalid group state", v22, 2u);
      MEMORY[0x242636844](v22, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v23 = 310;
    *(_OWORD *)(v23 + 8) = xmmword_23D66E320;
    *(_QWORD *)(v23 + 24) = 0x800000023D677970;
    *(_QWORD *)(v23 + 32) = 0xD000000000000052;
    *(_QWORD *)(v23 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  else
  {
    v36 = a2;
    v37 = a4;
    v38 = v4;
    (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v14, v10, v11);
    v25 = sub_23D66C1D4();
    v27 = v26;
    v28 = sub_23D66C1D4();
    v30 = v29;
    sub_23D5E6578(v25, v27);
    v32 = v31;
    sub_23D5DDA20(v28, v30);
    sub_23D5DDA20(v25, v27);
    result = (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    if ((v32 & 1) != 0)
    {
      v33 = *v36;
      v34 = v39;
      result = sub_23D5AFA60(v39, v16);
    }
    else
    {
      v34 = 0;
      v16 = 0;
      v33 = 2;
    }
    v35 = v37;
    *v37 = v34;
    v35[1] = v16;
    *((_BYTE *)v35 + 16) = v33;
  }
  return result;
}

uint64_t sub_23D5D0D30@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, __int128 *a3@<X2>, _QWORD *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t result;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v37;
  _QWORD *v38;
  unint64_t v39;
  int64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;

  v59 = a5;
  v61 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  MEMORY[0x24BDAC7A8](v61);
  v62 = (uint64_t)&v57 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = sub_23D66BE80();
  v12 = MEMORY[0x24BDAC7A8](v11);
  v60 = (char *)&v57 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v64 = (char *)&v57 - v14;
  v63 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  MEMORY[0x24BDAC7A8](v63);
  v65 = (char *)&v57 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23D66C108();
  v66 = *(_QWORD *)(v16 - 8);
  v67 = v16;
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v57 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23D66C054();
  v69 = *(_QWORD *)(v19 - 8);
  v70 = v19;
  MEMORY[0x24BDAC7A8](v19);
  v74 = (uint64_t)&v57 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = *a3;
  if (qword_256C78B48 != -1)
    swift_once();
  v68 = v18;
  v21 = qword_256C88BF0;
  v22 = *(_QWORD *)algn_256C88BF8;
  sub_23D5AFA60(qword_256C88BF0, *(unint64_t *)algn_256C88BF8);
  sub_23D5AFA60(v21, v22);
  swift_bridgeObjectRetain();
  v23 = a4;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v23 = sub_23D62B638(0, a4[2] + 1, 1, a4);
  v25 = v23[2];
  v24 = v23[3];
  if (v25 >= v24 >> 1)
    v23 = sub_23D62B638((_QWORD *)(v24 > 1), v25 + 1, 1, v23);
  v23[2] = v25 + 1;
  v26 = &v23[2 * v25];
  v26[4] = v21;
  v26[5] = v22;
  sub_23D5DDA20(v21, v22);
  v27 = sub_23D62FE18((uint64_t)v23);
  v29 = v28;
  swift_bridgeObjectRelease();
  v30 = a1[1];
  v31 = a1[2];
  sub_23D6457DC(a2, (uint64_t *)&v71, v27, v29, v30, v31, v74);
  result = sub_23D5DDA20(v27, v29);
  if (!v5)
  {
    v33 = qword_256C78B58;
    if (qword_256C78B58 != -1)
      swift_once();
    v34 = a4[2];
    v35 = v34 + 2;
    if (__OFADD__(v34, 2))
    {
      __break(1u);
    }
    else
    {
      a2 = qword_256C88C10;
      v27 = *(_QWORD *)algn_256C88C18;
      swift_bridgeObjectRetain();
      sub_23D5AFA60(a2, v27);
      sub_23D5AFA60(v30, v31);
      isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
      if (!(_DWORD)isUniquelyReferenced_nonNull_native || v35 > a4[3] >> 1)
      {
        if (v34 <= v35)
          v37 = v34 + 2;
        else
          v37 = v34;
        a4 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v37, 1, a4);
      }
      sub_23D5AFA60(a2, v27);
      v35 = a4[2];
      v33 = a4[3];
      v34 = v35 + 1;
      if (v35 < v33 >> 1)
        goto LABEL_18;
    }
    a4 = sub_23D62B638((_QWORD *)(v33 > 1), v34, 1, a4);
LABEL_18:
    a4[2] = v34;
    v38 = &a4[2 * v35];
    v38[4] = a2;
    v38[5] = v27;
    sub_23D5AFA60(v30, v31);
    v39 = a4[3];
    v40 = v35 + 2;
    if (v40 > (uint64_t)(v39 >> 1))
      a4 = sub_23D62B638((_QWORD *)(v39 > 1), v40, 1, a4);
    a4[2] = v40;
    v41 = &a4[2 * v34];
    v41[4] = v30;
    v41[5] = v31;
    sub_23D5DDA20(v30, v31);
    sub_23D5DDA20(a2, v27);
    v42 = sub_23D62FE18((uint64_t)a4);
    v44 = v43;
    swift_bridgeObjectRelease();
    v45 = a1[3];
    v46 = a1[4];
    sub_23D5AFA60(v45, v46);
    v47 = v68;
    sub_23D6526B0(v45, v46);
    v48 = v42;
    *(_QWORD *)&v71 = v42;
    *((_QWORD *)&v71 + 1) = v44;
    sub_23D5E6898();
    v49 = sub_23D66C090();
    v51 = v50;
    v58 = v44;
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    sub_23D5AFA60(v49, v50);
    sub_23D5AFA60(v49, v51);
    sub_23D66BE74();
    sub_23D5AE928(&qword_256C799B8, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D6717CC);
    v52 = (uint64_t)v65;
    sub_23D66BF10();
    v53 = *(_QWORD *)(v52 + 8);
    v54 = *(_QWORD *)(v52 + 16);
    v73 = 0;
    v71 = 0u;
    v72 = 0u;
    sub_23D5AFA60(v53, v54);
    sub_23D66BE74();
    sub_23D5AE928(&qword_256C799B0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671C04);
    sub_23D66BF10();
    sub_23D5DDA20(v48, v58);
    sub_23D5DDA20(v49, v51);
    sub_23D5DDA20(v49, v51);
    (*(void (**)(char *, uint64_t))(v66 + 8))(v47, v67);
    (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v74, v70);
    v55 = v59;
    sub_23D5E7F64(v52, v59, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
    v56 = type metadata accessor for Group.GroupCiphertextContents(0);
    return sub_23D5E7F64(v62, v55 + *(int *)(v56 + 20), type metadata accessor for GKCrypto_GroupAETextToSign);
  }
  return result;
}

void sub_23D5D1518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v4);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v5);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v6);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v7);
  v8 = *(_QWORD *)a2;
  v9 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v9);
  GroupKitUserID.init(_:)(v8, v9);
  if (!v2)
  {
    sub_23D5AF304(*(_QWORD *)(a2 + 32), *(_BYTE *)(a2 + 40), &v10);
    __asm { BR              X10 }
  }
}

uint64_t sub_23D5D1930@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t *v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t);
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t (*v28)(uint64_t);
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint8_t *v34;
  uint64_t v35;
  uint64_t result;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v7 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79AF0);
  v11 = MEMORY[0x24BDAC7A8](v48);
  v13 = (char *)&v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v47 = (uint64_t)&v41 - v14;
  v15 = *(_QWORD *)(a1 + 16);
  if (v15 == *(_QWORD *)(a2 + 16))
  {
    v50 = v3;
    v42 = a3;
    v51 = MEMORY[0x24BEE4B00];
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain_n();
    v43 = a2;
    v44 = a1;
    if (v15)
    {
      v16 = a1 + ((*(unsigned __int8 *)(v8 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
      v45 = *(_QWORD *)(v8 + 72);
      v46 = v10;
      v17 = (unint64_t *)(a2 + 40);
      v18 = type metadata accessor for GKCrypto_GroupAETextToSign.User;
      v19 = &qword_256C79AF0;
      while (1)
      {
        v20 = (uint64_t)v46;
        sub_23D5E7298(v16, (uint64_t)v46, v18);
        if (!v15)
        {
          sub_23D5E6950(v20, type metadata accessor for GKCrypto_GroupAETextToSign.User);
          goto LABEL_14;
        }
        v49 = v15;
        v21 = v18;
        v22 = *(v17 - 1);
        v23 = *v17;
        v24 = v47;
        v25 = v19;
        v26 = (uint64_t *)(v47 + *(int *)(v48 + 48));
        v27 = v20;
        v28 = v21;
        sub_23D5E7F64(v27, v47, v21);
        *v26 = v22;
        v26[1] = v23;
        v19 = v25;
        sub_23D5F16C4(v24, (uint64_t)v13, v25);
        sub_23D5AFA60(v22, v23);
        v29 = v50;
        sub_23D5D1DB0((uint64_t)&v51, (uint64_t)v13);
        v50 = v29;
        if (v29)
          break;
        sub_23D5AEF8C((uint64_t)v13, v25);
        v16 += v45;
        v17 += 2;
        v15 = v49 - 1;
        v18 = v28;
        if (v49 == 1)
          goto LABEL_14;
      }
      swift_bridgeObjectRelease();
      sub_23D5AEF8C((uint64_t)v13, &qword_256C79AF0);
      swift_bridgeObjectRelease_n();
      return swift_bridgeObjectRelease_n();
    }
    else
    {
LABEL_14:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease_n();
      v37 = v50;
      result = sub_23D660D88(v51, &v51);
      v38 = v42;
      if (!v37)
      {
        v39 = v51;
        result = sub_23D663D60(v51);
        if ((result & 1) != 0)
        {
          *v38 = v39;
        }
        else
        {
          __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
          sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
          swift_allocError();
          *(_WORD *)v40 = 268;
          *(_OWORD *)(v40 + 8) = xmmword_23D66E350;
          *(_QWORD *)(v40 + 24) = 0x800000023D678290;
          *(_QWORD *)(v40 + 32) = 0xD00000000000005CLL;
          *(_QWORD *)(v40 + 40) = 0x800000023D6782C0;
          swift_willThrow();
          return swift_bridgeObjectRelease();
        }
      }
    }
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v30 = sub_23D66BFDC();
    __swift_project_value_buffer(v30, (uint64_t)qword_256C88B78);
    v31 = sub_23D66C588();
    v32 = sub_23D66BFC4();
    v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      v34 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v34 = 0;
      _os_log_impl(&dword_23D5A8000, v32, v33, "mismatch between group user count and verification key count", v34, 2u);
      MEMORY[0x242636844](v34, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v35 = 349;
    *(_OWORD *)(v35 + 8) = xmmword_23D66E340;
    *(_QWORD *)(v35 + 24) = 0x800000023D678240;
    *(_QWORD *)(v35 + 32) = 0xD000000000000052;
    *(_QWORD *)(v35 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  return result;
}

uint64_t sub_23D5D1DB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD v33[15];
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  _BOOL4 v37;
  BOOL v38;

  v33[5] = a1;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v3);
  v33[9] = (char *)v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v5);
  v33[10] = (char *)v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v7);
  v33[12] = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v9);
  v33[11] = (char *)v33 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GroupMembership.MemberProperties(0);
  v33[6] = *(_QWORD *)(v11 - 8);
  v33[7] = v11;
  MEMORY[0x24BDAC7A8](v11);
  v33[8] = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23D66C330();
  v33[13] = *(_QWORD *)(v13 - 8);
  v33[14] = v13;
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79AF0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)v33 - v20;
  v22 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  MEMORY[0x24BDAC7A8](v22);
  v24 = (char *)v33 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = (uint64_t *)(a2 + *(int *)(v16 + 48));
  sub_23D5E7298(a2, (uint64_t)v21, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  v27 = *v25;
  v26 = v25[1];
  sub_23D5E7F64((uint64_t)v21, (uint64_t)v24, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  v28 = (uint64_t *)&v19[*(int *)(v16 + 48)];
  sub_23D5E7298(a2, (uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  *v28 = v27;
  v28[1] = v26;
  v35 = v27;
  v36 = v26;
  sub_23D5AFA60(v27, v26);
  v29 = v34;
  sub_23D66C324();
  if (!v29)
  {
    sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.User);
    v30 = *(_QWORD *)v24;
    v31 = *((_QWORD *)v24 + 1);
    sub_23D5AFA60(*(_QWORD *)v24, v31);
    GroupKitUserID.init(_:)(v30, v31);
    sub_23D5AF304(*((_QWORD *)v24 + 4), v24[40], &v38);
    v33[4] = v15;
    v37 = v38;
    v34 = *((_QWORD *)v24 + 7);
    __asm { BR              X10 }
  }
  sub_23D5E6950((uint64_t)v24, type metadata accessor for GKCrypto_GroupAETextToSign.User);
  return sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_GroupAETextToSign.User);
}

void sub_23D5D217C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (BYTE6(*(_QWORD *)(v8 - 104)) == 32)
  {
    *(_QWORD *)(v8 - 200) = v0;
    *(_QWORD *)(v8 - 96) = v2;
    *(_QWORD *)(v8 - 88) = v5;
    *(_QWORD *)(v8 - 224) = v1;
    v9 = *(_QWORD *)(v1 + 16);
    v10 = *(_QWORD *)(v1 + 24);
    v11 = sub_23D66C2AC();
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 56))(v7, 1, 1, v11);
    v12 = sub_23D66C258();
    v13 = v7;
    v14 = *(_QWORD *)(v8 - 144);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 56))(v14, 1, 1, v12);
    *(_QWORD *)(v8 - 216) = v5;
    *(_QWORD *)(v8 - 208) = v2;
    sub_23D5AFA60(v2, v5);
    sub_23D5AFA60(v9, v10);
    v15 = *(uint64_t **)(v8 - 136);
    sub_23D61F210((uint64_t *)(v8 - 96), v9, v10, v13, v14, v15);
    if (v6)
    {
      sub_23D5DDA20(*(_QWORD *)(v8 - 208), *(_QWORD *)(v8 - 216));
      sub_23D5DDA20(*(_QWORD *)(v8 - 200), *(_QWORD *)(v8 - 104));
      (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v8 - 192), v4);
    }
    else
    {
      v17 = type metadata accessor for UserKeyingInfo(0);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v15, 0, 1, v17);
      v18 = *(_QWORD *)(v8 - 168);
      v19 = *(_QWORD *)(v8 - 160);
      v20 = v19 + *(int *)(v18 + 28);
      v21 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v3 + 56);
      v21(v20, 1, 1, v4);
      *(_BYTE *)v19 = *(_DWORD *)(v8 - 72);
      v22 = *(_QWORD *)(v8 - 104);
      *(_QWORD *)(v19 + 8) = *(_QWORD *)(v8 - 200);
      *(_QWORD *)(v19 + 16) = v22;
      sub_23D5F16C4((uint64_t)v15, v19 + *(int *)(v18 + 24), &qword_256C79990);
      sub_23D5AEF8C(v20, &qword_256C799E0);
      v23 = *(_QWORD *)(v8 - 192);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v20, v23, v4);
      v21(v20, 0, 1, v4);
      v24 = *(_QWORD *)(v8 - 152);
      sub_23D5E7298(v19, v24, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v8 - 176) + 56))(v24, 0, 1, v18);
      sub_23D5B8FF0(v24, *(_QWORD *)(v8 - 208), *(_QWORD *)(v8 - 216));
      (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v23, v4);
      sub_23D5E6950(*(_QWORD *)(v8 - 224), type metadata accessor for GKCrypto_GroupAETextToSign.User);
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v16 = 263;
    *(_OWORD *)(v16 + 8) = xmmword_23D66DEE0;
    *(_OWORD *)(v16 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v16 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v0, *(_QWORD *)(v8 - 104));
    sub_23D5DDA20(v2, v5);
    (*(void (**)(_QWORD, uint64_t))(v3 + 8))(*(_QWORD *)(v8 - 192), v4);
  }
  JUMPOUT(0x23D5D2118);
}

uint64_t sub_23D5D2490(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  int64_t v34;
  int64_t v35;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v37;
  _QWORD *v38;
  unint64_t v39;
  unint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
  MEMORY[0x24BDAC7A8](v4);
  v48 = (uint64_t)&v46 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v46 = *(_QWORD *)(v6 - 8);
  v47 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (uint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v46 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_256C78B50 != -1)
    swift_once();
  v16 = qword_256C88C00;
  v17 = *(_QWORD *)algn_256C88C08;
  v18 = type metadata accessor for GKCrypto_AdminPlainText(0);
  v19 = *(int *)(v18 + 24);
  v49 = v2;
  sub_23D5AEF48(v2 + v19, (uint64_t)v11, &qword_256C799D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12) == 1)
  {
    *(_DWORD *)v15 = 0;
    *(_OWORD *)(v15 + 8) = xmmword_23D66DF40;
    v20 = v16;
    v21 = v16;
    v22 = v17;
    sub_23D5AFA60(v21, v17);
    sub_23D66BE5C();
    sub_23D5AEF8C((uint64_t)v11, &qword_256C799D0);
  }
  else
  {
    sub_23D5E7F64((uint64_t)v11, (uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
    v20 = v16;
    v23 = v16;
    v22 = v17;
    sub_23D5AFA60(v23, v17);
  }
  v24 = v47;
  v25 = *((_QWORD *)v15 + 1);
  v26 = *((_QWORD *)v15 + 2);
  sub_23D5AFA60(v25, v26);
  sub_23D5E6950((uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
  v27 = *(int *)(v18 + 28);
  v28 = v48;
  sub_23D5AEF48(v49 + v27, v48, &qword_256C79A28);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v46 + 48))(v28, 1, v24) == 1)
  {
    *(_OWORD *)v8 = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C(v28, &qword_256C79A28);
  }
  else
  {
    sub_23D5E7F64(v28, (uint64_t)v8, type metadata accessor for GKCrypto_AdminMetaData);
  }
  v29 = v20;
  v30 = v22;
  v31 = *v8;
  v32 = v8[1];
  sub_23D5AFA60(*v8, v32);
  sub_23D5E6950((uint64_t)v8, type metadata accessor for GKCrypto_AdminMetaData);
  v34 = a1[2];
  v35 = v34 + 3;
  if (__OFADD__(v34, 3))
  {
    __break(1u);
LABEL_23:
    a1 = sub_23D62B638((_QWORD *)(v33 > 1), v34, 1, a1);
    goto LABEL_17;
  }
  swift_bridgeObjectRetain();
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v35 > a1[3] >> 1)
  {
    if (v34 <= v35)
      v37 = v34 + 3;
    else
      v37 = v34;
    a1 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v37, 1, a1);
  }
  sub_23D5AFA60(v20, v30);
  v20 = a1[2];
  v33 = a1[3];
  v34 = v20 + 1;
  if (v20 >= v33 >> 1)
    goto LABEL_23;
LABEL_17:
  a1[2] = v34;
  v38 = &a1[2 * v20];
  v38[4] = v29;
  v38[5] = v30;
  sub_23D5AFA60(v25, v26);
  v39 = a1[3];
  v40 = v20 + 2;
  if ((uint64_t)(v20 + 2) > (uint64_t)(v39 >> 1))
    a1 = sub_23D62B638((_QWORD *)(v39 > 1), v20 + 2, 1, a1);
  a1[2] = v40;
  v41 = &a1[2 * v34];
  v41[4] = v25;
  v41[5] = v26;
  sub_23D5AFA60(v31, v32);
  v42 = a1[3];
  if ((uint64_t)(v20 + 3) > (uint64_t)(v42 >> 1))
    a1 = sub_23D62B638((_QWORD *)(v42 > 1), v20 + 3, 1, a1);
  a1[2] = v20 + 3;
  v43 = &a1[2 * v40];
  v43[4] = v31;
  v43[5] = v32;
  sub_23D5DDA20(v25, v26);
  sub_23D5DDA20(v31, v32);
  sub_23D5DDA20(v29, v30);
  v44 = sub_23D62FE18((uint64_t)a1);
  swift_bridgeObjectRelease();
  return v44;
}

uint64_t sub_23D5D28CC@<X0>(unint64_t a1@<X1>, unint64_t a2@<X2>, unint64_t a3@<X3>, unint64_t a4@<X4>, uint64_t a5@<X5>, unint64_t *a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>, unint64_t a9, _QWORD *a10, int a11)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  os_log_type_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  unint64_t v61;
  unint64_t v62;
  void (*v63)(_QWORD, _QWORD);
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  _QWORD *v81;
  _QWORD *v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  _QWORD *v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  _QWORD *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  _QWORD *v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char *v126;
  char *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  char *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t *v145;
  uint64_t v146;
  unint64_t *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  _QWORD *v151;
  unint64_t v152;
  ValueMetadata *v153;
  unint64_t v154;
  char *v155;

  v13 = v11;
  v147 = a6;
  v148 = a7;
  v146 = a5;
  v136 = a4;
  v135 = a3;
  v134 = a2;
  v133 = a1;
  v123 = a8;
  v121 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  MEMORY[0x24BDAC7A8](v121);
  v122 = (char *)&v112 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79980);
  MEMORY[0x24BDAC7A8](v15);
  v126 = (char *)&v112 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v125 = sub_23D66C108();
  v124 = *(_QWORD *)(v125 - 8);
  MEMORY[0x24BDAC7A8](v125);
  v127 = (char *)&v112 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v130 = sub_23D66C2DC();
  v129 = *(_QWORD *)(v130 - 8);
  MEMORY[0x24BDAC7A8](v130);
  v138 = (char *)&v112 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v139 = type metadata accessor for GKCrypto_AdminPlainText(0);
  MEMORY[0x24BDAC7A8](v139);
  v137 = (uint64_t)&v112 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v131 = type metadata accessor for GKCrypto_AdminMetaData(0);
  MEMORY[0x24BDAC7A8](v131);
  v140 = (uint64_t)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = sub_23D66C054();
  v141 = *(_QWORD *)(v144 - 8);
  v21 = MEMORY[0x24BDAC7A8](v144);
  v128 = (uint64_t)&v112 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v21);
  v145 = (unint64_t *)((char *)&v112 - v23);
  v24 = sub_23D66C258();
  v142 = *(_QWORD *)(v24 - 8);
  v143 = v24;
  MEMORY[0x24BDAC7A8](v24);
  v155 = (char *)&v112 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v26);
  v28 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = sub_23D66C2AC();
  v30 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v32 = (char *)&v112 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0);
  v132 = v13;
  v33 = v13 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v34 = type metadata accessor for UserKeyingInfo(0);
  sub_23D5AEF48(v33 + *(int *)(v34 + 44), (uint64_t)v28, &qword_256C79120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29) == 1)
  {
    sub_23D5AEF8C((uint64_t)v28, &qword_256C79120);
    if (qword_256C78B10 != -1)
      swift_once();
    v35 = sub_23D66BFDC();
    __swift_project_value_buffer(v35, (uint64_t)qword_256C88B78);
    v36 = sub_23D66C588();
    v37 = sub_23D66BFC4();
    v38 = v36;
    if (os_log_type_enabled(v37, v36))
    {
      v39 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v39 = 0;
      _os_log_impl(&dword_23D5A8000, v37, v38, "originator keying material missing in group creation", v39, 2u);
      MEMORY[0x242636844](v39, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v40 = 323;
    *(_OWORD *)(v40 + 8) = xmmword_23D66E370;
    *(_QWORD *)(v40 + 24) = 0x800000023D677780;
    *(_QWORD *)(v40 + 32) = 0xD000000000000052;
    *(_QWORD *)(v40 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v30 + 32))(v32, v28, v29);
    v42 = swift_bridgeObjectRetain();
    v43 = sub_23D667B40(v42);
    swift_bridgeObjectRelease();
    sub_23D660D88(v43, &v151);
    if (v12)
    {
      return (*(uint64_t (**)(char *, uint64_t))(v30 + 8))(v32, v29);
    }
    else
    {
      v118 = v30;
      v119 = v32;
      v120 = (uint64_t)v151;
      v153 = &type metadata for AdminSeed;
      v117 = sub_23D5E803C();
      v154 = v117;
      v44 = (_QWORD *)swift_allocObject();
      v151 = v44;
      v46 = v146;
      v45 = (unint64_t)v147;
      v44[2] = v146;
      v44[3] = v45;
      v47 = v148;
      v44[4] = v148;
      v44[5] = a9;
      sub_23D5AFA60(v46, v45);
      sub_23D5E7284(v47, a9);
      if (qword_256C78D10 != -1)
        swift_once();
      sub_23D61D638((uint64_t)&v151, 1, qword_256C890D0, *(uint64_t *)algn_256C890D8);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      v153 = &type metadata for AdminSeed;
      v154 = v117;
      v48 = (_QWORD *)swift_allocObject();
      v151 = v48;
      v48[2] = v46;
      v48[3] = v45;
      v48[4] = v47;
      v48[5] = a9;
      sub_23D5AFA60(v46, v45);
      sub_23D5E7284(v47, a9);
      if (qword_256C78D00 != -1)
        swift_once();
      sub_23D61D4A8(&v151, 1, (uint64_t)v145);
      v49 = v144;
      v50 = (uint64_t)v155;
      v116 = v29;
      v51 = a10;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      v151 = (_QWORD *)v120;
      if (qword_256C78B40 != -1)
        swift_once();
      v52 = qword_256C88BE0;
      v53 = *(_QWORD *)algn_256C88BE8;
      sub_23D5AFA60(qword_256C88BE0, *(unint64_t *)algn_256C88BE8);
      v54 = v53;
      sub_23D5AFA60(v52, v53);
      swift_bridgeObjectRetain();
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v115 = a10;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        v51 = sub_23D62B638(0, v115[2] + 1, 1, v115);
      v57 = v51[2];
      v56 = v51[3];
      v58 = v57 + 1;
      if (v57 >= v56 >> 1)
      {
        v111 = sub_23D62B638((_QWORD *)(v56 > 1), v57 + 1, 1, v51);
        v58 = v57 + 1;
        v51 = v111;
      }
      v51[2] = v58;
      v59 = &v51[2 * v57];
      v59[4] = v52;
      v59[5] = v54;
      sub_23D5DDA20(v52, v54);
      v60 = sub_23D62FE18((uint64_t)v51);
      v62 = v61;
      swift_bridgeObjectRelease();
      v63 = (void (*)(_QWORD, _QWORD))v145;
      v113 = sub_23D6470B4(v50, (unint64_t)v145, (uint64_t *)&v151, v60, v62);
      v114 = v64;
      v112 = a9;
      sub_23D5DDA20(v60, v62);
      v145 = *(unint64_t **)(v141 + 8);
      ((void (*)(_QWORD, uint64_t))v145)(v63, v49);
      (*(void (**)(uint64_t, unint64_t))(v142 + 8))(v50, v143);
      swift_bridgeObjectRelease();
      sub_23D5AE928(&qword_256C79A10, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D671664);
      v65 = v140;
      v66 = sub_23D66BF4C();
      MEMORY[0x24BDAC7A8](v66);
      *((_DWORD *)&v112 - 12) = a11;
      v67 = v134;
      *(&v112 - 5) = v133;
      *(&v112 - 4) = v67;
      v68 = v136;
      *(&v112 - 3) = v135;
      *(&v112 - 2) = v68;
      *(&v112 - 1) = v65;
      v69 = sub_23D5AE928(&qword_256C79A18, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D6714FC);
      v70 = v137;
      v155 = (char *)v69;
      sub_23D66BF4C();
      v71 = v115;
      v72 = sub_23D5D2490(v115);
      v74 = v73;
      v151 = (_QWORD *)v72;
      v152 = v73;
      v75 = sub_23D5E6898();
      sub_23D66C2A0();
      v143 = v75;
      sub_23D5DDA20(v72, v74);
      v76 = sub_23D66C2B8();
      v78 = v77;
      sub_23D5DDA20(*(_QWORD *)v70, *(_QWORD *)(v70 + 8));
      *(_QWORD *)v70 = v76;
      *(_QWORD *)(v70 + 8) = v78;
      swift_bridgeObjectRetain();
      sub_23D5AFA60(v113, v114);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v71 = sub_23D62B638(0, v71[2] + 1, 1, v71);
      v80 = v71[2];
      v79 = v71[3];
      v81 = v71;
      if (v80 >= v79 >> 1)
        v81 = sub_23D62B638((_QWORD *)(v79 > 1), v80 + 1, 1, v71);
      v81[2] = v80 + 1;
      v82 = &v81[2 * v80];
      v83 = v114;
      v82[4] = v113;
      v82[5] = v83;
      v84 = sub_23D62FE18((uint64_t)v81);
      v86 = v85;
      swift_bridgeObjectRelease();
      v87 = sub_23D66BF1C();
      v155 = (char *)v84;
      v142 = v86;
      v149 = v87;
      v150 = v88;
      v153 = &type metadata for AdminSeed;
      v154 = v117;
      v89 = (_QWORD *)swift_allocObject();
      v151 = v89;
      v91 = v146;
      v90 = (unint64_t)v147;
      v89[2] = v146;
      v89[3] = v90;
      v92 = v148;
      v93 = v112;
      v89[4] = v148;
      v89[5] = v93;
      sub_23D5AFA60(v91, v90);
      sub_23D5E7284(v92, v93);
      v94 = v128;
      sub_23D61D4A8(&v151, 1, v128);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v151);
      v95 = (uint64_t)v126;
      sub_23D66C0B4();
      v96 = sub_23D66C0C0();
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v96 - 8) + 56))(v95, 0, 1, v96);
      v97 = (uint64_t)v155;
      v98 = v142;
      v151 = v155;
      v152 = v142;
      v99 = v127;
      sub_23D66C09C();
      v100 = v140;
      v101 = v116;
      sub_23D5AEF8C(v95, &qword_256C79980);
      ((void (*)(uint64_t, uint64_t))v145)(v94, v144);
      sub_23D5DDA20(v149, v150);
      v102 = sub_23D66C0F0();
      if (v103 >> 60 == 15)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v104 = 325;
        *(_OWORD *)(v104 + 8) = xmmword_23D66E360;
        *(_QWORD *)(v104 + 24) = 0x800000023D677780;
        *(_QWORD *)(v104 + 32) = 0xD000000000000052;
        *(_QWORD *)(v104 + 40) = 0x800000023D676EF0;
        swift_willThrow();
        sub_23D5DDA20(v97, v98);
        sub_23D5DDA20(v113, v114);
        (*(void (**)(char *, uint64_t))(v124 + 8))(v99, v125);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v138, v130);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v101);
        sub_23D5E6950(v100, type metadata accessor for GKCrypto_AdminMetaData);
      }
      else
      {
        v105 = v103;
        v147 = &v112;
        v106 = MEMORY[0x24BDAC7A8](v102);
        *(&v112 - 4) = v106;
        *(&v112 - 3) = v107;
        v108 = v113;
        v109 = v114;
        *(&v112 - 2) = v113;
        *(&v112 - 1) = v109;
        v148 = v106;
        sub_23D5AE928(&qword_256C79A20, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D67212C);
        v110 = (uint64_t)v122;
        sub_23D66BF4C();
        sub_23D5DDA20(v108, v109);
        sub_23D5DDA20(v97, v142);
        (*(void (**)(char *, uint64_t))(v124 + 8))(v127, v125);
        (*(void (**)(char *, uint64_t))(v129 + 8))(v138, v130);
        (*(void (**)(char *, uint64_t))(v118 + 8))(v119, v101);
        sub_23D5E725C(v148, v105);
        sub_23D5E6950(v140, type metadata accessor for GKCrypto_AdminMetaData);
        sub_23D5E7F64(v110, v123, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      return sub_23D5E6950(v137, type metadata accessor for GKCrypto_AdminPlainText);
    }
  }
}

uint64_t sub_23D5D39C8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t (*v18)(uint64_t);
  uint64_t (*v19)(uint64_t);
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v26 = a1;
  v27 = a7;
  v34 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v28 = *(_QWORD *)(v34 - 8);
  MEMORY[0x24BDAC7A8](v34);
  v13 = (char *)&v25 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)&v25 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v29 = a2;
  v30 = a3;
  v31 = a4;
  v32 = a5;
  v33 = a6;
  v19 = v18;
  sub_23D5AE928(&qword_256C799C8, v18, (uint64_t)&unk_23D671FC4);
  sub_23D66BF4C();
  v20 = type metadata accessor for GKCrypto_AdminPlainText(0);
  v21 = v26;
  v22 = v26 + *(int *)(v20 + 24);
  sub_23D5AEF8C(v22, &qword_256C799D0);
  sub_23D5E7F64((uint64_t)v17, v22, v19);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v15 + 56))(v22, 0, 1, v14);
  sub_23D5E7298(v27, (uint64_t)v13, type metadata accessor for GKCrypto_AdminMetaData);
  v23 = v21 + *(int *)(v20 + 28);
  sub_23D5AEF8C(v23, &qword_256C79A28);
  sub_23D5E7F64((uint64_t)v13, v23, type metadata accessor for GKCrypto_AdminMetaData);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v28 + 56))(v23, 0, 1, v34);
}

uint64_t sub_23D5D3B98(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;

  v10 = a1[2];
  v11 = a1[3];
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v10, v11);
  a1[2] = a2;
  a1[3] = a3;
  v12 = *a1;
  v13 = a1[1];
  sub_23D5AFA60(a4, a5);
  result = sub_23D5DDA20(v12, v13);
  *a1 = a4;
  a1[1] = a5;
  return result;
}

uint64_t sub_23D5D3C24(void (**a1)(uint64_t, uint64_t), void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t), _QWORD *a4, unint64_t a5, _QWORD *a6, int a7, void (*a8)(uint64_t, uint64_t))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void (*v32)(uint64_t, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v45;
  unint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(char *, uint64_t);
  uint64_t v60;
  void (*v61)(uint64_t, uint64_t);
  unint64_t v62;
  uint64_t v63;
  void (*v64)(uint64_t, uint64_t);
  _QWORD *v65;
  uint64_t (*v66)(uint64_t);
  uint64_t v67;
  uint64_t v68;
  void (*v69)(uint64_t, uint64_t);
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  void (*v76)(uint64_t, uint64_t);
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  unint64_t v83;
  uint64_t (*v84)(uint64_t);
  uint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  void (*v90)(uint64_t, uint64_t);
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  os_log_type_t v97;
  NSObject *v98;
  os_log_type_t v99;
  uint8_t *v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  NSObject *v106;
  os_log_type_t v107;
  uint8_t *v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t v111;
  char *v112;
  uint64_t v113;
  void (**v114)(uint64_t, uint64_t);
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  _QWORD *v120;
  int64_t v121;
  int64_t v122;
  _QWORD *isUniquelyReferenced_nonNull_native;
  int64_t v124;
  uint64_t v125;
  unint64_t v126;
  _QWORD *v127;
  _QWORD *v128;
  unint64_t v129;
  int64_t v130;
  _QWORD *v131;
  _QWORD *v132;
  uint64_t v133;
  unint64_t v134;
  unint64_t v135;
  unint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  uint64_t v139;
  unint64_t v140;
  uint64_t v141;
  os_log_type_t v142;
  NSObject *v143;
  uint8_t *v144;
  uint64_t v145;
  void (*v146)(uint64_t, uint64_t);
  unint64_t v147;
  unint64_t v148;
  void (*v149)(uint64_t, uint64_t);
  char *v150;
  uint64_t v151;
  uint64_t v152;
  char *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  char *v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  void (*v164)(uint64_t, uint64_t);
  void (*v165)(uint64_t, uint64_t);
  int v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  void (*v170)(uint64_t, uint64_t);
  void (*v171)(uint64_t, uint64_t);
  uint64_t v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t *v180;
  char *v181;
  void (*v182)(uint64_t, uint64_t);
  char *v183;
  uint64_t v184;
  unint64_t v185;
  void (*v186)(uint64_t, uint64_t);
  unint64_t v187;
  _QWORD *v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t v191;
  unint64_t v192;
  _QWORD *v193;
  unint64_t v194;
  ValueMetadata *v195;
  unint64_t v196;
  unint64_t v197;
  uint64_t v198;

  v170 = a8;
  v166 = a7;
  v173 = a6;
  v190 = a5;
  v165 = a3;
  v164 = a2;
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79980);
  MEMORY[0x24BDAC7A8](v10);
  v154 = (uint64_t)&v146 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v152 = sub_23D66C108();
  v151 = *(_QWORD *)(v152 - 8);
  MEMORY[0x24BDAC7A8](v152);
  v153 = (char *)&v146 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v158 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  MEMORY[0x24BDAC7A8](v158);
  v159 = (char *)&v146 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v157 = sub_23D66C2DC();
  v156 = *(_QWORD *)(v157 - 8);
  MEMORY[0x24BDAC7A8](v157);
  v160 = (char *)&v146 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v15);
  v163 = (uint64_t)&v146 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v168 = sub_23D66C2AC();
  v167 = *(_QWORD *)(v168 - 8);
  MEMORY[0x24BDAC7A8](v168);
  v161 = (char *)&v146 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v162 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  MEMORY[0x24BDAC7A8](v162);
  v19 = (char *)&v146 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v175 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  v174 = *(_QWORD *)(v175 - 8);
  v20 = MEMORY[0x24BDAC7A8](v175);
  v184 = (uint64_t)&v146 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v20);
  v185 = (unint64_t)&v146 - v22;
  v23 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v23);
  v178 = (uint64_t)&v146 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v179 = type metadata accessor for UserKeyingInfo(0);
  v177 = *(_QWORD *)(v179 - 8);
  MEMORY[0x24BDAC7A8](v179);
  v183 = (char *)&v146 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v176 = type metadata accessor for GroupMembership.MemberProperties(0);
  MEMORY[0x24BDAC7A8](v176);
  v186 = (void (*)(uint64_t, uint64_t))((char *)&v146 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0));
  v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79998);
  v28 = MEMORY[0x24BDAC7A8](v27);
  v181 = (char *)&v146 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v180 = (uint64_t *)((char *)&v146 - v30);
  v169 = (_QWORD *)type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  MEMORY[0x24BDAC7A8](v169);
  v32 = (void (*)(uint64_t, uint64_t))((char *)&v146 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0));
  v172 = sub_23D66C054();
  v33 = *(_QWORD *)(v172 - 8);
  v34 = MEMORY[0x24BDAC7A8](v172);
  v155 = (uint64_t)&v146 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v34);
  v37 = (char *)&v146 - v36;
  v38 = sub_23D66C258();
  v39 = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v41 = (char *)&v146 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0);
  v182 = *a1;
  v42 = v190;
  v195 = &type metadata for MemberSeed;
  v187 = sub_23D5ED1F8();
  v188 = a4;
  v196 = v187;
  v193 = a4;
  v194 = v42;
  sub_23D5AFA60((uint64_t)a4, v42);
  if (qword_256C78D38 != -1)
    swift_once();
  v43 = v189;
  sub_23D61D638((uint64_t)&v193, 1, qword_256C89120, *(uint64_t *)algn_256C89128);
  if (v43)
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)&v193);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v193);
  v195 = &type metadata for MemberSeed;
  v196 = v187;
  v193 = v188;
  v194 = v42;
  sub_23D5AFA60((uint64_t)v188, v42);
  if (qword_256C78D28 != -1)
    swift_once();
  sub_23D61D4A8(&v193, 1, (uint64_t)v37);
  v189 = 0;
  v150 = v19;
  v149 = v32;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v193);
  v193 = v182;
  if (qword_256C78B48 != -1)
    swift_once();
  v45 = qword_256C88BF0;
  v46 = *(_QWORD *)algn_256C88BF8;
  sub_23D5AFA60(qword_256C88BF0, *(unint64_t *)algn_256C88BF8);
  sub_23D5AFA60(v45, v46);
  v47 = v173;
  swift_bridgeObjectRetain();
  v48 = v47;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v48 = sub_23D62B638(0, v47[2] + 1, 1, v47);
  v50 = v48[2];
  v49 = v48[3];
  v51 = v50 + 1;
  if (v50 >= v49 >> 1)
  {
    v148 = v50 + 1;
    v137 = sub_23D62B638((_QWORD *)(v49 > 1), v50 + 1, 1, v48);
    v51 = v148;
    v48 = v137;
  }
  v48[2] = v51;
  v52 = &v48[2 * v50];
  v52[4] = v45;
  v52[5] = v46;
  sub_23D5DDA20(v45, v46);
  v53 = sub_23D62FE18((uint64_t)v48);
  v55 = v54;
  swift_bridgeObjectRelease();
  v56 = v189;
  v57 = sub_23D6470B4((uint64_t)v41, (unint64_t)v37, (uint64_t *)&v193, v53, v55);
  if (v56)
  {
    sub_23D5DDA20(v53, v55);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v37, v172);
    return (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  }
  v147 = v58;
  v148 = v57;
  sub_23D5DDA20(v53, v55);
  v59 = *(void (**)(char *, uint64_t))(v33 + 8);
  v59(v37, v172);
  v60 = (*(uint64_t (**)(char *, uint64_t))(v39 + 8))(v41, v38);
  MEMORY[0x24BDAC7A8](v60);
  v61 = v170;
  *(&v146 - 2) = v171;
  *(&v146 - 1) = v61;
  sub_23D5AE928(&qword_256C799A8, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D671934);
  sub_23D66BF4C();
  v62 = 0;
  v197 = MEMORY[0x24BEE4AF8];
  v63 = swift_bridgeObjectRetain();
  v193 = (_QWORD *)sub_23D650C3C(v63);
  sub_23D5DD1B4(&v193);
  v146 = (void (*)(uint64_t, uint64_t))v59;
  swift_bridgeObjectRelease();
  v64 = 0;
  v65 = v193;
  v170 = (void (*)(uint64_t, uint64_t))v193[2];
  v66 = type metadata accessor for GKCrypto_GroupAETextToSign.User;
  v67 = (uint64_t)v183;
  v169 = v193;
  while (1)
  {
    v68 = (uint64_t)v150;
    v69 = v186;
    v71 = v180;
    v70 = (unint64_t)v181;
    if (v64 == v170)
    {
      v72 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
      (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v72 - 8) + 56))(v70, 1, 1, v72);
      v182 = v170;
    }
    else
    {
      if ((unint64_t)v64 >= v65[2])
      {
        __break(1u);
        goto LABEL_59;
      }
      v73 = (uint64_t)v186;
      v74 = (uint64_t)v150;
      v75 = v65;
      v76 = v64;
      v189 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
      v77 = *(_QWORD *)(v189 - 8);
      sub_23D5AEF48((uint64_t)v75+ ((*(unsigned __int8 *)(v77 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))+ *(_QWORD *)(v77 + 72) * (_QWORD)v76, v70, &qword_256C799A0);
      v182 = (void (*)(uint64_t, uint64_t))((char *)v76 + 1);
      (*(void (**)(unint64_t, _QWORD, uint64_t, unint64_t))(v77 + 56))(v70, 0, 1, v189);
      v68 = v74;
      v69 = (void (*)(uint64_t, uint64_t))v73;
      v67 = (uint64_t)v183;
    }
    sub_23D5F16C4(v70, (uint64_t)v71, &qword_256C79998);
    v78 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v78 - 8) + 48))(v71, 1, v78) == 1)
      break;
    v79 = *v71;
    v189 = v71[1];
    sub_23D5E7F64((uint64_t)v71 + *(int *)(v78 + 48), (uint64_t)v69, type metadata accessor for GroupMembership.MemberProperties);
    v80 = v178;
    sub_23D5AEF48((uint64_t)v69 + *(int *)(v176 + 24), v178, &qword_256C79990);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v177 + 48))(v80, 1, v179) == 1)
    {
      swift_release();
      sub_23D5AEF8C(v80, &qword_256C79990);
      goto LABEL_36;
    }
    v81 = sub_23D5E7F64(v80, v67, type metadata accessor for UserKeyingInfo);
    v82 = *((_QWORD *)v69 + 2);
    if (v82 >> 60 == 15)
    {
      swift_release();
      sub_23D5E6950(v67, type metadata accessor for UserKeyingInfo);
LABEL_36:
      v103 = (uint64_t)v149;
      if (qword_256C78B10 != -1)
        swift_once();
      v104 = sub_23D66BFDC();
      __swift_project_value_buffer(v104, (uint64_t)qword_256C88B78);
      v105 = sub_23D66C588();
      v106 = sub_23D66BFC4();
      v107 = v105;
      if (os_log_type_enabled(v106, v105))
      {
        v108 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v108 = 0;
        _os_log_impl(&dword_23D5A8000, v106, v107, "member key material missing in group creation", v108, 2u);
        MEMORY[0x242636844](v108, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v109 = 324;
      *(_OWORD *)(v109 + 8) = xmmword_23D66E380;
      *(_QWORD *)(v109 + 24) = 0x800000023D6775F0;
      *(_QWORD *)(v109 + 32) = 0xD000000000000052;
      *(_QWORD *)(v109 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20(v79, v189);
      sub_23D5DDA20(v148, v147);
      sub_23D5E6950((uint64_t)v69, type metadata accessor for GroupMembership.MemberProperties);
      v102 = v103;
LABEL_41:
      sub_23D5E6950(v102, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
      return swift_bridgeObjectRelease();
    }
    v62 = *((_QWORD *)v69 + 1);
    MEMORY[0x24BDAC7A8](v81);
    v83 = v189;
    *(&v146 - 6) = (void (*)(uint64_t, uint64_t))v79;
    *(&v146 - 5) = (void (*)(uint64_t, uint64_t))v83;
    *(&v146 - 4) = (void (*)(uint64_t, uint64_t))v67;
    *(&v146 - 3) = (void (*)(uint64_t, uint64_t))v62;
    *(&v146 - 2) = (void (*)(uint64_t, uint64_t))v82;
    *(&v146 - 1) = v69;
    sub_23D5AFA60(v62, v82);
    sub_23D5AE928(&qword_256C799C0, v66, (uint64_t)&unk_23D671A9C);
    v84 = v66;
    v85 = v185;
    sub_23D66BF4C();
    sub_23D5E7298(v85, v184, v84);
    v86 = v197;
    v66 = v84;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v86 = sub_23D62B9A0(0, *(_QWORD *)(v86 + 16) + 1, 1, v86);
    v67 = (uint64_t)v183;
    v88 = *(_QWORD *)(v86 + 16);
    v87 = *(_QWORD *)(v86 + 24);
    if (v88 >= v87 >> 1)
      v86 = sub_23D62B9A0(v87 > 1, v88 + 1, 1, v86);
    *(_QWORD *)(v86 + 16) = v88 + 1;
    sub_23D5E7F64(v184, v86+ ((*(unsigned __int8 *)(v174 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v174 + 80))+ *(_QWORD *)(v174 + 72) * v88, v66);
    sub_23D5DDA20(v79, v189);
    sub_23D5E725C(v62, v82);
    v197 = v86;
    sub_23D5E6950(v185, v66);
    sub_23D5E6950(v67, type metadata accessor for UserKeyingInfo);
    sub_23D5E6950((uint64_t)v186, type metadata accessor for GroupMembership.MemberProperties);
    v65 = v169;
    v64 = v182;
  }
  v89 = swift_release();
  MEMORY[0x24BDAC7A8](v89);
  *((_DWORD *)&v146 - 12) = v166;
  v90 = v165;
  *(&v146 - 5) = v164;
  *(&v146 - 4) = v90;
  *(&v146 - 3) = (void (*)(uint64_t, uint64_t))&v197;
  v91 = (uint64_t)v149;
  *(&v146 - 2) = v149;
  sub_23D5AE928(&qword_256C799B0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671C04);
  sub_23D66BF4C();
  v92 = (char *)v171 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v93 = v163;
  sub_23D5AEF48((uint64_t)&v92[*(int *)(v179 + 44)], v163, &qword_256C79120);
  v94 = v167;
  v95 = v168;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v167 + 48))(v93, 1, v168) == 1)
  {
    sub_23D5AEF8C(v93, &qword_256C79120);
    if (qword_256C78B10 != -1)
      swift_once();
    v96 = sub_23D66BFDC();
    __swift_project_value_buffer(v96, (uint64_t)qword_256C88B78);
    v97 = sub_23D66C588();
    v98 = sub_23D66BFC4();
    v99 = v97;
    if (os_log_type_enabled(v98, v97))
    {
      v100 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v100 = 0;
      _os_log_impl(&dword_23D5A8000, v98, v99, "originator keying material missing in group creation", v100, 2u);
      MEMORY[0x242636844](v100, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v101 = 323;
    *(_OWORD *)(v101 + 8) = xmmword_23D66E3A0;
    *(_QWORD *)(v101 + 24) = 0x800000023D6775F0;
    *(_QWORD *)(v101 + 32) = 0xD000000000000052;
    *(_QWORD *)(v101 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v148, v147);
    sub_23D5E6950(v68, type metadata accessor for GKCrypto_GroupAETextToSign);
    v102 = v91;
    goto LABEL_41;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v94 + 32))(v161, v93, v95);
  v69 = (void (*)(uint64_t, uint64_t))sub_23D66BF1C();
  v62 = v110;
  v193 = v69;
  v194 = v110;
  v111 = sub_23D5E6898();
  v112 = v160;
  v113 = sub_23D66C2A0();
  v186 = (void (*)(uint64_t, uint64_t))v111;
  v114 = &v146;
  MEMORY[0x24BDAC7A8](v113);
  *(&v146 - 4) = v69;
  *(&v146 - 3) = (void (*)(uint64_t, uint64_t))v62;
  *(&v146 - 2) = (void (*)(uint64_t, uint64_t))v112;
  sub_23D5AE928(&qword_256C799B8, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D6717CC);
  v115 = (uint64_t)v159;
  sub_23D66BF4C();
  v116 = v115;
  v117 = sub_23D66BF1C();
  v189 = 0;
  v184 = v117;
  v185 = v118;
  sub_23D5E6950(v115, type metadata accessor for GKCrypto_GroupAEDataToEncrypt);
  if (qword_256C78B58 != -1)
    swift_once();
  v119 = (unint64_t)&v198;
  v120 = v173;
  v121 = v173[2];
  v122 = v121 + 2;
  if (__OFADD__(v121, 2))
  {
    __break(1u);
LABEL_67:
    v173 = sub_23D62B638((_QWORD *)(v119 > 1), v122, 1, v173);
    goto LABEL_53;
  }
  v116 = qword_256C88C10;
  v114 = *(void (***)(uint64_t, uint64_t))algn_256C88C18;
  swift_bridgeObjectRetain();
  sub_23D5AFA60(v116, (unint64_t)v114);
  sub_23D5AFA60(v148, v147);
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if (!(_DWORD)isUniquelyReferenced_nonNull_native || v122 > v120[3] >> 1)
  {
    if (v121 <= v122)
      v124 = v121 + 2;
    else
      v124 = v121;
    v173 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v124, 1, v120);
  }
  sub_23D5AFA60(v116, (unint64_t)v114);
  v121 = v173[2];
  v119 = v173[3];
  v122 = v121 + 1;
  if (v121 >= v119 >> 1)
    goto LABEL_67;
LABEL_53:
  v125 = v148;
  v126 = v147;
  v127 = v173;
  v173[2] = v122;
  v128 = &v127[2 * v121];
  v128[4] = v116;
  v128[5] = v114;
  sub_23D5AFA60(v125, v126);
  v129 = v127[3];
  v130 = v121 + 2;
  if (v130 > (uint64_t)(v129 >> 1))
    v173 = sub_23D62B638((_QWORD *)(v129 > 1), v130, 1, v173);
  v131 = v173;
  v173[2] = v130;
  v132 = &v131[2 * v122];
  v133 = v148;
  v134 = v147;
  v132[4] = v148;
  v132[5] = v134;
  sub_23D5DDA20(v133, v134);
  sub_23D5DDA20(v116, (unint64_t)v114);
  v71 = (uint64_t *)sub_23D62FE18((uint64_t)v131);
  v70 = v135;
  swift_bridgeObjectRelease();
  v191 = v184;
  v192 = v185;
  v195 = &type metadata for MemberSeed;
  v196 = v187;
  v193 = v188;
  v194 = v190;
  sub_23D5AFA60((uint64_t)v188, v190);
  v136 = v189;
  sub_23D61D4A8(&v193, 1, v155);
  if (v136)
  {
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v193);
    sub_23D5DDA20((uint64_t)v69, v62);
    sub_23D5DDA20((uint64_t)v71, v70);
    sub_23D5DDA20(v148, v147);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v161, v168);
    sub_23D5E6950(v68, type metadata accessor for GKCrypto_GroupAETextToSign);
    (*(void (**)(char *, uint64_t))(v156 + 8))(v160, v157);
    sub_23D5E6950((uint64_t)v149, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    sub_23D5DDA20(v184, v185);
    return swift_bridgeObjectRelease();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v193);
  v138 = v154;
  sub_23D66C0B4();
  v139 = sub_23D66C0C0();
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v139 - 8) + 56))(v138, 0, 1, v139);
  v193 = v71;
  v194 = v70;
  sub_23D66C09C();
LABEL_59:
  sub_23D5AEF8C(v154, &qword_256C79980);
  v146(v155, v172);
  sub_23D66C0F0();
  if (v140 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v141 = sub_23D66BFDC();
    __swift_project_value_buffer(v141, (uint64_t)qword_256C88B78);
    v142 = sub_23D66C588();
    v143 = sub_23D66BFC4();
    if (os_log_type_enabled(v143, v142))
    {
      v144 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v144 = 0;
      _os_log_impl(&dword_23D5A8000, v143, v142, "AES-GCM seal failed", v144, 2u);
      MEMORY[0x242636844](v144, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v145 = 325;
    *(_OWORD *)(v145 + 8) = xmmword_23D66E390;
    *(_QWORD *)(v145 + 24) = 0x800000023D6775F0;
    *(_QWORD *)(v145 + 32) = 0xD000000000000052;
    *(_QWORD *)(v145 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20((uint64_t)v69, v62);
    sub_23D5DDA20((uint64_t)v71, v70);
    sub_23D5DDA20(v184, v185);
    sub_23D5DDA20(v148, v147);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v153, v152);
    (*(void (**)(char *, uint64_t))(v167 + 8))(v161, v168);
    sub_23D5E6950((uint64_t)v150, type metadata accessor for GKCrypto_GroupAETextToSign);
    (*(void (**)(char *, uint64_t))(v156 + 8))(v160, v157);
    v102 = (uint64_t)v149;
    goto LABEL_41;
  }
  sub_23D5DDA20((uint64_t)v69, v62);
  sub_23D5DDA20((uint64_t)v71, v70);
  sub_23D5DDA20(v184, v185);
  (*(void (**)(char *, uint64_t))(v151 + 8))(v153, v152);
  (*(void (**)(char *, uint64_t))(v167 + 8))(v161, v168);
  sub_23D5E6950((uint64_t)v150, type metadata accessor for GKCrypto_GroupAETextToSign);
  (*(void (**)(char *, uint64_t))(v156 + 8))(v160, v157);
  sub_23D5E6950((uint64_t)v149, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  swift_bridgeObjectRelease();
  return v148;
}

uint64_t sub_23D5D5694(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v6 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = *(_QWORD *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v13 = *a1;
  v12 = a1[1];
  sub_23D5AFA60(v11, v10);
  sub_23D5DDA20(v13, v12);
  *a1 = v11;
  a1[1] = v10;
  sub_23D5E7298(a3, (uint64_t)v9, type metadata accessor for GKCrypto_AdminGroupBlob);
  v14 = (uint64_t)a1 + *(int *)(type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0) + 24);
  sub_23D5AEF8C(v14, &qword_256C799F0);
  sub_23D5E7F64((uint64_t)v9, v14, type metadata accessor for GKCrypto_AdminGroupBlob);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v7 + 56))(v14, 0, 1, v6);
}

uint64_t sub_23D5D57A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int (*v24)(uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  void (*v28)(uint64_t, uint64_t);
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char v38;
  uint64_t v40;
  uint64_t v41;
  char *v42;

  v42 = (char *)a2;
  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v41 = (uint64_t)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (uint64_t)&v40 - v6;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GroupMembership.MemberProperties(0);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v40 - v15;
  v17 = *(int *)(v8 + 48);
  v18 = (uint64_t)&v10[v17];
  sub_23D5E7298(a1 + v17, (uint64_t)&v10[v17], type metadata accessor for GroupMembership.MemberProperties);
  sub_23D5E7F64(v18, (uint64_t)v16, type metadata accessor for GroupMembership.MemberProperties);
  v19 = *(int *)(v8 + 48);
  v20 = (uint64_t)&v10[v19];
  sub_23D5E7298((uint64_t)&v42[v19], (uint64_t)&v10[v19], type metadata accessor for GroupMembership.MemberProperties);
  sub_23D5E7F64(v20, (uint64_t)v14, type metadata accessor for GroupMembership.MemberProperties);
  v21 = *(int *)(v11 + 28);
  v42 = v16;
  sub_23D5AEF48((uint64_t)&v16[v21], v7, &qword_256C799E0);
  v22 = sub_23D66C330();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48);
  if (v24(v7, 1, v22) != 1)
  {
    v25 = sub_23D66C1F8();
    v27 = v26;
    v28 = *(void (**)(uint64_t, uint64_t))(v23 + 8);
    v28(v7, v22);
    v7 = v41;
    sub_23D5AEF48((uint64_t)&v14[*(int *)(v11 + 28)], v41, &qword_256C799E0);
    if (v24(v7, 1, v22) != 1)
    {
      v35 = sub_23D66C1F8();
      v37 = v36;
      v28(v7, v22);
      sub_23D617FF0(v35, v37, v25, v27);
      LOBYTE(v7) = v38;
      sub_23D5E6950((uint64_t)v14, type metadata accessor for GroupMembership.MemberProperties);
      sub_23D5E6950((uint64_t)v42, type metadata accessor for GroupMembership.MemberProperties);
      sub_23D5DDA20(v35, v37);
      sub_23D5DDA20(v25, v27);
      return v7 & 1;
    }
    sub_23D5DDA20(v25, v27);
  }
  sub_23D5AEF8C(v7, &qword_256C799E0);
  if (qword_256C78B10 != -1)
    swift_once();
  v29 = sub_23D66BFDC();
  __swift_project_value_buffer(v29, (uint64_t)qword_256C88B78);
  v30 = sub_23D66C588();
  v31 = sub_23D66BFC4();
  v32 = v30;
  if (os_log_type_enabled(v31, v30))
  {
    v33 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v33 = 0;
    _os_log_impl(&dword_23D5A8000, v31, v32, "missing member key information", v33, 2u);
    MEMORY[0x242636844](v33, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v34 = 345;
  *(_OWORD *)(v34 + 8) = xmmword_23D66E3B0;
  *(_QWORD *)(v34 + 24) = 0x800000023D6775F0;
  *(_QWORD *)(v34 + 32) = 0xD000000000000052;
  *(_QWORD *)(v34 + 40) = 0x800000023D676EF0;
  swift_willThrow();
  v7 = (uint64_t)type metadata accessor for GroupMembership.MemberProperties;
  sub_23D5E6950((uint64_t)v14, type metadata accessor for GroupMembership.MemberProperties);
  sub_23D5E6950((uint64_t)v42, type metadata accessor for GroupMembership.MemberProperties);
  return v7 & 1;
}

uint64_t sub_23D5D5BB8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, _BYTE *a7)
{
  uint64_t v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;

  v35 = a7;
  v33 = a5;
  v34 = a6;
  v11 = type metadata accessor for GKCrypto_UserKeys(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = *(_QWORD *)a1;
  v15 = *(_QWORD *)(a1 + 8);
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v14, v15);
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *((_QWORD *)v13 + 9) = MEMORY[0x24BEE4AF8];
  *((_OWORD *)v13 + 5) = xmmword_23D66DF40;
  sub_23D66BE5C();
  *(_DWORD *)v13 = 1;
  type metadata accessor for UserKeyingInfo(0);
  *((_QWORD *)v13 + 1) = sub_23D66C1F8();
  *((_QWORD *)v13 + 2) = v16;
  *((_QWORD *)v13 + 3) = sub_23D66C1F8();
  *((_QWORD *)v13 + 4) = v17;
  *((_QWORD *)v13 + 5) = sub_23D66C2B8();
  *((_QWORD *)v13 + 6) = v18;
  *((_QWORD *)v13 + 7) = sub_23D66C2B8();
  *((_QWORD *)v13 + 8) = v19;
  sub_23D5AE928((unint64_t *)&qword_256C79138, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D672B9C);
  v20 = sub_23D66BF1C();
  if (v7)
    return sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_UserKeys);
  v23 = v20;
  v24 = v21;
  sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_UserKeys);
  sub_23D62899C(v23, v24);
  v26 = v25;
  v28 = v27;
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = v28;
  v29 = *(_QWORD *)(a1 + 48);
  v30 = *(_QWORD *)(a1 + 56);
  v31 = v33;
  v32 = v34;
  *(_QWORD *)(a1 + 48) = v33;
  *(_QWORD *)(a1 + 56) = v32;
  sub_23D5AFA60(v31, v32);
  result = sub_23D5DDA20(v29, v30);
  *(_QWORD *)(a1 + 32) = (*v35 & 1) == 0;
  *(_BYTE *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_23D5D5DA4(_QWORD *a1, int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t (*v16)(uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v23 = a5;
  v24 = a6;
  v29 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v25 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v13 = *(_QWORD *)(v12 - 8);
  MEMORY[0x24BDAC7A8](v12);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = a2;
  v27 = a3;
  v28 = a4;
  sub_23D5AE928(&qword_256C799C8, v16, (uint64_t)&unk_23D671FC4);
  sub_23D66BF4C();
  v17 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v18 = (uint64_t)a1 + *(int *)(v17 + 24);
  sub_23D5AEF8C(v18, &qword_256C799D0);
  sub_23D5E7F64((uint64_t)v15, v18, type metadata accessor for GKCrypto_VersionedSeed);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v13 + 56))(v18, 0, 1, v12);
  v19 = *v23;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *a1 = v19;
  sub_23D5E7298(v24, (uint64_t)v11, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  v20 = (uint64_t)a1 + *(int *)(v17 + 28);
  sub_23D5AEF8C(v20, &qword_256C799D8);
  sub_23D5E7F64((uint64_t)v11, v20, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v25 + 56))(v20, 0, 1, v29);
}

uint64_t sub_23D5D5F8C(_QWORD *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  v6 = a1[1];
  v7 = a1[2];
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v6, v7);
  a1[1] = a2;
  a1[2] = a3;
  v8 = sub_23D66C2B8();
  v10 = v9;
  result = sub_23D5DDA20(a1[3], a1[4]);
  a1[3] = v8;
  a1[4] = v10;
  return result;
}

uint64_t sub_23D5D600C(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  unint64_t v23;
  _QWORD *v24;
  uint64_t result;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  void (*v35)(char *, uint64_t);
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  void (*v39)(char *, uint64_t);
  uint64_t *v40;
  unint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  void (*v54)(char *, uint64_t);
  void (*v55)(char *, uint64_t);
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  uint64_t v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  uint64_t v70;
  unint64_t v71;
  ValueMetadata *v72;
  unint64_t v73;
  uint64_t *v74;

  v64 = a6;
  v65 = a7;
  v74 = a1;
  v62 = sub_23D66C330();
  v59 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v61 = (char *)&v54 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v60 = sub_23D66C2AC();
  v58 = *(_QWORD *)(v60 - 8);
  v13 = MEMORY[0x24BDAC7A8](v60);
  v57 = (char *)&v54 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v13);
  v69 = (char *)&v54 - v15;
  v68 = sub_23D66C210();
  v16 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v67 = (char *)&v54 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v66 = sub_23D66C258();
  v18 = *(_QWORD *)(v66 - 8);
  v19 = MEMORY[0x24BDAC7A8](v66);
  v63 = (char *)&v54 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v19);
  v22 = (char *)&v54 - v21;
  v72 = &type metadata for AdminSeed;
  v23 = sub_23D5E803C();
  v73 = v23;
  v24 = (_QWORD *)swift_allocObject();
  v70 = (uint64_t)v24;
  v24[2] = a2;
  v24[3] = a3;
  v24[4] = a4;
  v24[5] = a5;
  sub_23D5AFA60(a2, a3);
  sub_23D5E7284(a4, a5);
  if (qword_256C78D18 != -1)
    swift_once();
  sub_23D61D638((uint64_t)&v70, 1, qword_256C890E0, *(uint64_t *)algn_256C890E8);
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
  if (!v7)
  {
    v56 = 0;
    v26 = v67;
    sub_23D66C228();
    v55 = *(void (**)(char *, uint64_t))(v18 + 8);
    v55(v22, v66);
    v27 = sub_23D66C1F8();
    v29 = v28;
    v54 = *(void (**)(char *, uint64_t))(v16 + 8);
    v54(v26, v68);
    v30 = v74;
    sub_23D5DDA20(v74[6], v74[7]);
    v30[6] = v27;
    v30[7] = v29;
    v72 = &type metadata for AdminSeed;
    v73 = v23;
    v31 = (_QWORD *)swift_allocObject();
    v70 = (uint64_t)v31;
    v31[2] = a2;
    v31[3] = a3;
    v31[4] = a4;
    v31[5] = a5;
    sub_23D5AFA60(a2, a3);
    sub_23D5E7284(a4, a5);
    if (qword_256C78D20 != -1)
      swift_once();
    v32 = v56;
    sub_23D61D674((uint64_t)&v70, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
    result = __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
    if (!v32)
    {
      v33 = v61;
      v34 = v69;
      sub_23D66C264();
      v35 = *(void (**)(char *, uint64_t))(v58 + 8);
      v35(v34, v60);
      v36 = sub_23D66C1F8();
      v38 = v37;
      v39 = *(void (**)(char *, uint64_t))(v59 + 8);
      v39(v33, v62);
      v40 = v74;
      sub_23D5DDA20(v74[2], v74[3]);
      v40[2] = v36;
      v40[3] = v38;
      v72 = &type metadata for MemberSeed;
      v41 = sub_23D5ED1F8();
      v73 = v41;
      v70 = v64;
      v71 = v65;
      sub_23D5AFA60(v64, v65);
      if (qword_256C78D40 != -1)
        swift_once();
      sub_23D61D638((uint64_t)&v70, 1, qword_256C89130, *(uint64_t *)algn_256C89138);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
      v42 = v67;
      v43 = v63;
      sub_23D66C228();
      v55(v43, v66);
      v44 = sub_23D66C1F8();
      v46 = v45;
      v54(v42, v68);
      v47 = v74;
      sub_23D5DDA20(v74[4], v74[5]);
      v47[4] = v44;
      v47[5] = v46;
      v72 = &type metadata for MemberSeed;
      v73 = v41;
      v70 = v64;
      v71 = v65;
      sub_23D5AFA60(v64, v65);
      if (qword_256C78D48 != -1)
        swift_once();
      sub_23D61D674((uint64_t)&v70, 1, qword_256C89140, *(uint64_t *)algn_256C89148);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)&v70);
      v48 = v61;
      v49 = v57;
      sub_23D66C264();
      v35(v49, v60);
      v50 = sub_23D66C1F8();
      v52 = v51;
      v39(v48, v62);
      v53 = v74;
      result = sub_23D5DDA20(*v74, v74[1]);
      *v53 = v50;
      v53[1] = v52;
    }
  }
  return result;
}

uint64_t sub_23D5D6514(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v6 = *a2;
  swift_bridgeObjectRetain_n();
  sub_23D5DD0CC(&v6);
  if (v2)
  {
    result = swift_release();
    __break(1u);
  }
  else
  {
    swift_bridgeObjectRelease();
    v4 = v6;
    result = swift_bridgeObjectRelease();
    *a1 = v4;
  }
  return result;
}

uint64_t sub_23D5D658C(uint64_t *a1, int a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  uint8_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  int64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  _BYTE *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  void (*v73)(char *);
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  char v90;
  uint64_t *v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  unint64_t v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unint64_t v115;
  unint64_t v116;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  os_log_type_t v122;
  uint64_t v123;
  NSObject *v124;
  _BOOL4 v125;
  uint64_t v126;
  uint8_t *v127;
  uint64_t v128;
  unint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  int64_t v137;
  uint64_t v138;
  int64_t v139;
  __int128 v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  void (*v163)(uint64_t, uint64_t, uint64_t);
  uint64_t v164;
  int64_t v165;
  uint64_t v166;
  uint64_t v167;
  __int128 v168;
  unint64_t v169;
  unint64_t v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint8_t *v180;
  _BYTE *v181;
  unint64_t v182;
  uint64_t v183;
  _OWORD v184[3];
  uint64_t v185[2];
  uint64_t v186[2];
  _OWORD v187[3];
  uint64_t v188;

  v154 = a2;
  v147 = type metadata accessor for GKCrypto_UserKeys(0);
  MEMORY[0x24BDAC7A8](v147);
  v146 = (char *)&v136 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v144 = type metadata accessor for UserAndAllInfo(0);
  v143 = *(_QWORD *)(v144 - 8);
  MEMORY[0x24BDAC7A8](v144);
  v172 = (uint64_t)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v153 = sub_23D66C210();
  v152 = *(_QWORD *)(v153 - 8);
  MEMORY[0x24BDAC7A8](v153);
  v151 = (char *)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v145 = type metadata accessor for Invite(0);
  MEMORY[0x24BDAC7A8](v145);
  v176 = (uint64_t *)((char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0));
  v175 = sub_23D66C330();
  v174 = *(_QWORD *)(v175 - 8);
  MEMORY[0x24BDAC7A8](v175);
  v150 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v149 = type metadata accessor for MembershipVerifier(0);
  v9 = MEMORY[0x24BDAC7A8](v149);
  v148 = (char *)&v136 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v177 = (uint64_t)&v136 - v11;
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v12);
  v157 = (uint64_t)&v136 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for UserKeyingInfo(0);
  v156 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v180 = (uint8_t *)&v136 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v155 = type metadata accessor for GroupMembership.MemberProperties(0);
  v141 = *(_QWORD *)(v155 - 8);
  MEMORY[0x24BDAC7A8](v155);
  v181 = (char *)&v136 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79998);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v158 = (uint64_t *)((char *)&v136 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v159 = (uint64_t *)((char *)&v136 - v20);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v136 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = sub_23D66C2AC();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = MEMORY[0x24BDAC7A8](v24);
  v178 = (uint64_t)&v136 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v29 = (char *)&v136 - v28;
  v30 = *a1;
  v160 = v2;
  v31 = (uint64_t *)(v2 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial);
  swift_beginAccess();
  v179 = v14;
  sub_23D5AEF48((uint64_t)v31 + *(int *)(v14 + 44), (uint64_t)v23, &qword_256C79120);
  v161 = v25;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24) == 1)
  {
    sub_23D5AEF8C((uint64_t)v23, &qword_256C79120);
    if (qword_256C78B10 == -1)
    {
LABEL_3:
      v32 = sub_23D66BFDC();
      __swift_project_value_buffer(v32, (uint64_t)qword_256C88B78);
      v33 = sub_23D66C588();
      swift_retain_n();
      v34 = sub_23D66BFC4();
      if (os_log_type_enabled(v34, v33))
      {
        v35 = (uint8_t *)swift_slowAlloc();
        v36 = swift_slowAlloc();
        *(_QWORD *)&v184[0] = v36;
        *(_DWORD *)v35 = 136315138;
        v188 = (uint64_t)(v35 + 4);
        v38 = *v31;
        v37 = v31[1];
        sub_23D5AFA60(v38, v37);
        v39 = sub_23D66BD30();
        v41 = v40;
        sub_23D5DDA20(v38, v37);
        v186[0] = sub_23D5DDBDC(v39, v41, (uint64_t *)v184);
        sub_23D66C5D0();
        swift_release_n();
        swift_bridgeObjectRelease();
        _os_log_impl(&dword_23D5A8000, v34, v33, "originator %s keying material missing in group creation", v35, 0xCu);
        swift_arrayDestroy();
        MEMORY[0x242636844](v36, -1, -1);
        MEMORY[0x242636844](v35, -1, -1);

      }
      else
      {

        swift_release_n();
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      v118 = swift_allocError();
      *(_WORD *)v119 = 323;
      *(_OWORD *)(v119 + 8) = xmmword_23D66E3D0;
      *(_QWORD *)(v119 + 24) = 0x800000023D6775B0;
      *(_QWORD *)(v119 + 32) = 0xD000000000000052;
      *(_QWORD *)(v119 + 40) = 0x800000023D676EF0;
      v188 = v118;
      return swift_willThrow();
    }
LABEL_56:
    swift_once();
    goto LABEL_3;
  }
  (*(void (**)(char *, char *, uint64_t))(v161 + 32))(v29, v23, v24);
  v31 = (uint64_t *)MEMORY[0x24BEE4AF8];
  v42 = sub_23D5B4EE4(MEMORY[0x24BEE4AF8]);
  v43 = *(_QWORD *)(v30 + 64);
  v138 = v30 + 64;
  v44 = 1 << *(_BYTE *)(v30 + 32);
  v45 = -1;
  if (v44 < 64)
    v45 = ~(-1 << v44);
  v46 = v45 & v43;
  v139 = (unint64_t)(v44 + 63) >> 6;
  v137 = v139 - 1;
  result = swift_bridgeObjectRetain();
  v48 = 0;
  v140 = xmmword_23D66DF40;
  v169 = (unint64_t)v31;
  v173 = v24;
  v142 = v30;
  v49 = v29;
  v171 = v29;
  while (1)
  {
    v170 = v42;
    if (v46)
    {
      v50 = v49;
      v166 = (v46 - 1) & v46;
      v165 = v48;
      v51 = __clz(__rbit64(v46)) | (v48 << 6);
LABEL_10:
      v52 = *(_QWORD *)(v30 + 56);
      v53 = (uint64_t *)(*(_QWORD *)(v30 + 48) + 16 * v51);
      v54 = *v53;
      v55 = v53[1];
      v56 = (uint64_t)v158;
      *v158 = *v53;
      *(_QWORD *)(v56 + 8) = v55;
      v57 = v52 + *(_QWORD *)(v141 + 72) * v51;
      v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
      sub_23D5E7298(v57, v56 + *(int *)(v58 + 48), type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v58 - 8) + 56))(v56, 0, 1, v58);
      sub_23D5AFA60(v54, v55);
      v49 = v50;
      goto LABEL_23;
    }
    v59 = v48 + 1;
    if (__OFADD__(v48, 1))
    {
      __break(1u);
      goto LABEL_56;
    }
    if (v59 < v139)
    {
      v60 = *(_QWORD *)(v138 + 8 * v59);
      if (v60)
        goto LABEL_14;
      v48 += 2;
      if (v59 + 1 >= v139)
      {
LABEL_41:
        v165 = v59;
        goto LABEL_22;
      }
      v60 = *(_QWORD *)(v138 + 8 * v48);
      if (v60)
        goto LABEL_17;
      if (v59 + 2 < v139)
        break;
    }
    v165 = v48;
LABEL_22:
    v61 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
    v56 = (uint64_t)v158;
    (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v61 - 8) + 56))(v158, 1, 1, v61);
    v166 = 0;
LABEL_23:
    v62 = v159;
    sub_23D5F16C4(v56, (uint64_t)v159, &qword_256C79998);
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(_QWORD *)(v63 - 8) + 48))(v62, 1, v63) == 1)
    {
      swift_release();
      (*(void (**)(char *, uint64_t))(v161 + 8))(v49, v173);
      return v169;
    }
    v64 = v62[1];
    v183 = *v62;
    v65 = v181;
    sub_23D5E7F64((uint64_t)v62 + *(int *)(v63 + 48), (uint64_t)v181, type metadata accessor for GroupMembership.MemberProperties);
    v66 = v157;
    sub_23D5AEF48((uint64_t)&v65[*(int *)(v155 + 24)], v157, &qword_256C79990);
    v67 = v179;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48))(v66, 1, v179) == 1)
    {
      v120 = v183;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23D5AEF8C(v66, &qword_256C79990);
      if (qword_256C78B10 != -1)
        swift_once();
      v121 = sub_23D66BFDC();
      __swift_project_value_buffer(v121, (uint64_t)qword_256C88B78);
      v122 = sub_23D66C588();
      v123 = v120;
      sub_23D5AFA60(v120, v64);
      sub_23D5AFA60(v120, v64);
      v124 = sub_23D66BFC4();
      v125 = os_log_type_enabled(v124, v122);
      v126 = v173;
      if (v125)
      {
        v127 = (uint8_t *)swift_slowAlloc();
        v188 = swift_slowAlloc();
        *(_QWORD *)&v184[0] = v188;
        *(_DWORD *)v127 = 136315138;
        v180 = v127 + 4;
        sub_23D5AFA60(v120, v64);
        v128 = sub_23D66BD30();
        v130 = v129;
        sub_23D5DDA20(v120, v64);
        v123 = v120;
        v186[0] = sub_23D5DDBDC(v128, v130, (uint64_t *)v184);
        v49 = v171;
        v126 = v173;
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v120, v64);
        sub_23D5DDA20(v120, v64);
        _os_log_impl(&dword_23D5A8000, v124, v122, "member %s being added to group missing keying info", v127, 0xCu);
        v131 = v188;
        swift_arrayDestroy();
        MEMORY[0x242636844](v131, -1, -1);
        MEMORY[0x242636844](v127, -1, -1);
      }
      else
      {
        sub_23D5DDA20(v120, v64);
        sub_23D5DDA20(v120, v64);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      v134 = swift_allocError();
      *(_WORD *)v135 = 320;
      *(_OWORD *)(v135 + 8) = xmmword_23D66E3C0;
      *(_QWORD *)(v135 + 24) = 0x800000023D6775B0;
      *(_QWORD *)(v135 + 32) = 0xD000000000000052;
      *(_QWORD *)(v135 + 40) = 0x800000023D676EF0;
      v188 = v134;
      swift_willThrow();
      sub_23D5DDA20(v123, v64);
      sub_23D5E6950((uint64_t)v181, type metadata accessor for GroupMembership.MemberProperties);
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v49, v126);
    }
    v68 = (uint64_t)v180;
    sub_23D5E7F64(v66, (uint64_t)v180, type metadata accessor for UserKeyingInfo);
    v69 = v160;
    v70 = *(_QWORD *)(v160 + 16);
    v71 = *(_QWORD *)(v160 + 24);
    *(_QWORD *)&v184[0] = v70;
    *((_QWORD *)&v184[0] + 1) = v71;
    v167 = v70;
    v72 = v68 + *(int *)(v67 + 28);
    v73 = *(void (**)(char *))(v174 + 16);
    v74 = v64;
    v182 = v64;
    v75 = (uint64_t)v150;
    v164 = v72;
    v76 = v175;
    v73(v150);
    sub_23D5AFA60(v70, v71);
    v77 = v177;
    sub_23D6301BC((uint64_t *)v184, v75, v177);
    v168 = *(_OWORD *)(v69 + 40);
    v184[0] = v168;
    (*(void (**)(uint64_t, char *, uint64_t))(v161 + 16))(v178, v171, v173);
    v186[0] = v183;
    v186[1] = v74;
    v78 = v167;
    v185[0] = v167;
    v185[1] = v71;
    v79 = v71;
    v80 = (uint64_t)v148;
    ((void (*)(char *, uint64_t, uint64_t))v73)(v148, v77, v76);
    v81 = v149;
    v82 = *(int *)(v149 + 20);
    v162 = v77 + v82;
    v163 = (void (*)(uint64_t, uint64_t, uint64_t))v73;
    v73((char *)(v80 + v82));
    v83 = *(int *)(v81 + 24);
    v85 = *(_QWORD *)(v77 + v83);
    v84 = *(_QWORD *)(v77 + v83 + 8);
    v86 = (uint64_t *)(v80 + v83);
    *v86 = v85;
    v86[1] = v84;
    v87 = (uint64_t)v151;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v151, v68 + *(int *)(v179 + 20), v153);
    sub_23D5AFA60(v78, v79);
    sub_23D5AFA60(v168, *((unint64_t *)&v168 + 1));
    sub_23D5AFA60(v183, v182);
    sub_23D5AFA60(v85, v84);
    v88 = v176;
    v89 = v188;
    Invite.init(invitersID:invitersSigningKey:invitedID:groupID:groupVersion:invitedMembershipVerifier:invitedEncryptionPK:)((uint64_t *)v184, v178, v186, v185, v154, v80, v87, v176);
    v188 = v89;
    if (v89)
    {
      sub_23D5DDA20(v183, v182);
LABEL_51:
      sub_23D5E6950(v177, type metadata accessor for MembershipVerifier);
      sub_23D5E6950((uint64_t)v180, type metadata accessor for UserKeyingInfo);
      sub_23D5E6950((uint64_t)v181, type metadata accessor for GroupMembership.MemberProperties);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v171, v173);
    }
    v90 = *v181;
    v91 = (_QWORD *)((char *)v88 + *(int *)(v145 + 28));
    v92 = *v91;
    v93 = v91[1];
    v94 = (uint64_t)v146;
    *((_QWORD *)v146 + 9) = MEMORY[0x24BEE4AF8];
    *(_OWORD *)(v94 + 80) = v140;
    sub_23D5AFA60(v183, v182);
    sub_23D5E7284(v92, v93);
    sub_23D66BE5C();
    *(_DWORD *)v94 = 1;
    *(_QWORD *)(v94 + 8) = sub_23D66C1F8();
    *(_QWORD *)(v94 + 16) = v95;
    *(_QWORD *)(v94 + 24) = sub_23D66C1F8();
    *(_QWORD *)(v94 + 32) = v96;
    *(_QWORD *)(v94 + 40) = sub_23D66C2B8();
    *(_QWORD *)(v94 + 48) = v97;
    *(_QWORD *)(v94 + 56) = sub_23D66C2B8();
    *(_QWORD *)(v94 + 64) = v98;
    sub_23D5AE928((unint64_t *)&qword_256C79138, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D672B9C);
    v99 = v188;
    v100 = sub_23D66BF1C();
    v188 = v99;
    if (v99)
    {
      sub_23D5E6950(v94, type metadata accessor for GKCrypto_UserKeys);
      v132 = v183;
      v133 = v182;
      sub_23D5DDA20(v183, v182);
      sub_23D5E725C(v92, v93);
      sub_23D5DDA20(v132, v133);
      sub_23D5E6950((uint64_t)v176, type metadata accessor for Invite);
      goto LABEL_51;
    }
    v102 = v100;
    v103 = v101;
    sub_23D5E6950(v94, type metadata accessor for GKCrypto_UserKeys);
    v104 = v172;
    v105 = v172 + *(int *)(v144 + 32);
    v106 = v175;
    v163(v105, v162, v175);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v174 + 56))(v105, 0, 1, v106);
    v107 = v183;
    *(_QWORD *)v104 = v183;
    *(_QWORD *)(v104 + 8) = v182;
    *(_BYTE *)(v104 + 16) = v90;
    *(_QWORD *)(v104 + 24) = v92;
    *(_QWORD *)(v104 + 32) = v93;
    *(_QWORD *)(v104 + 40) = v102;
    *(_QWORD *)(v104 + 48) = v103;
    v108 = v169;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v108 = sub_23D62B98C(0, *(_QWORD *)(v108 + 16) + 1, 1, v108);
    v49 = v171;
    v31 = v176;
    v110 = *(_QWORD *)(v108 + 16);
    v109 = *(_QWORD *)(v108 + 24);
    v111 = v173;
    if (v110 >= v109 >> 1)
      v108 = sub_23D62B98C(v109 > 1, v110 + 1, 1, v108);
    *(_QWORD *)(v108 + 16) = v110 + 1;
    sub_23D5E7F64(v172, v108+ ((*(unsigned __int8 *)(v143 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80))+ *(_QWORD *)(v143 + 72) * v110, type metadata accessor for UserAndAllInfo);
    v112 = v188;
    sub_23D6306E4((uint64_t)v184);
    v188 = v112;
    if (v112)
    {
      sub_23D5DDA20(v107, v182);
      sub_23D5E6950((uint64_t)v31, type metadata accessor for Invite);
      sub_23D5E6950(v177, type metadata accessor for MembershipVerifier);
      sub_23D5E6950((uint64_t)v180, type metadata accessor for UserKeyingInfo);
      sub_23D5E6950((uint64_t)v181, type metadata accessor for GroupMembership.MemberProperties);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_release();
      return (*(uint64_t (**)(char *, uint64_t))(v161 + 8))(v49, v111);
    }
    v169 = v108;
    v187[0] = v184[0];
    v187[1] = v184[1];
    v187[2] = v184[2];
    v113 = v107;
    v114 = v107;
    v115 = v182;
    sub_23D5AFA60(v114, v182);
    sub_23D5F1258((uint64_t *)v187, (void (*)(uint64_t, uint64_t))sub_23D5AFA60);
    v116 = v170;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(_QWORD *)&v184[0] = v116;
    sub_23D5E0750(v187, v113, v115, isUniquelyReferenced_nonNull_native);
    v42 = *(_QWORD *)&v184[0];
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v113, v115);
    sub_23D5F1258((uint64_t *)v187, (void (*)(uint64_t, uint64_t))sub_23D5DDA20);
    sub_23D5DDA20(v113, v115);
    sub_23D5E6950((uint64_t)v31, type metadata accessor for Invite);
    sub_23D5E6950(v177, type metadata accessor for MembershipVerifier);
    sub_23D5E6950((uint64_t)v180, type metadata accessor for UserKeyingInfo);
    result = sub_23D5E6950((uint64_t)v181, type metadata accessor for GroupMembership.MemberProperties);
    v30 = v142;
    v48 = v165;
    v46 = v166;
  }
  v60 = *(_QWORD *)(v138 + 8 * (v59 + 2));
  if (v60)
  {
    v59 += 2;
    goto LABEL_14;
  }
  v48 = v59 + 3;
  if (v59 + 3 >= v139)
  {
    v165 = v59 + 2;
    goto LABEL_22;
  }
  v60 = *(_QWORD *)(v138 + 8 * v48);
  if (v60)
  {
LABEL_17:
    v59 = v48;
LABEL_14:
    v50 = v49;
    v166 = (v60 - 1) & v60;
    v51 = __clz(__rbit64(v60)) + (v59 << 6);
    v165 = v59;
    goto LABEL_10;
  }
  while (1)
  {
    v59 = v48 + 1;
    if (__OFADD__(v48, 1))
      break;
    if (v59 >= v139)
    {
      v59 = v137;
      goto LABEL_41;
    }
    v60 = *(_QWORD *)(v138 + 8 * v59);
    ++v48;
    if (v60)
      goto LABEL_14;
  }
  __break(1u);
  return result;
}

uint64_t *sub_23D5D79E0(uint64_t a1, unint64_t a2, void (*a3)(uint64_t, uint64_t), unint64_t a4, uint64_t a5, uint64_t *a6, int a7)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v50;
  void (*v51)(uint64_t, uint64_t);
  _QWORD *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unint64_t v74;
  char *v75;
  _DWORD *v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  void (*v91)(uint64_t, uint64_t);
  _QWORD v92[3];
  ValueMetadata *v93;
  unint64_t v94;
  unint64_t v95;

  v90 = a2;
  v91 = a3;
  v89 = a1;
  v13 = sub_23D66C2AC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v71 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v88 = (uint64_t)&v71 - v18;
  v19 = sub_23D66C054();
  v20 = MEMORY[0x24BDAC7A8](v19);
  v21 = MEMORY[0x24BDAC7A8](v20);
  if (a7 == 1)
    return 0;
  v95 = v8;
  v25 = *(_QWORD *)(v7 + 96);
  if (v25 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v26 = sub_23D66BFDC();
    __swift_project_value_buffer(v26, (uint64_t)qword_256C88B78);
    v27 = sub_23D66C588();
    v28 = sub_23D66BFC4();
    v29 = v27;
    if (os_log_type_enabled(v28, v27))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23D5A8000, v28, v29, "missing admin seed", v30, 2u);
      MEMORY[0x242636844](v30, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v31 = 308;
    *(_OWORD *)(v31 + 8) = xmmword_23D66E3E0;
    *(_QWORD *)(v31 + 24) = 0x800000023D6774D0;
    *(_QWORD *)(v31 + 32) = 0xD000000000000052;
    *(_QWORD *)(v31 + 40) = 0x800000023D676EF0;
    swift_willThrow();
  }
  else
  {
    v85 = (uint64_t)&v71 - v22;
    v79 = v14;
    v81 = v24;
    v83 = a4;
    v75 = v17;
    v77 = v23;
    v80 = v13;
    v82 = v21;
    v32 = *(_QWORD *)(v7 + 80);
    v34 = *(_QWORD *)(v7 + 104);
    v33 = *(_QWORD *)(v7 + 112);
    v86 = *(_QWORD *)(v7 + 88);
    v87 = v33;
    v35 = *(_QWORD *)(v7 + 72);
    v36 = *(_QWORD *)(v7 + 16);
    v37 = *(_QWORD *)(v7 + 24);
    v76 = (_DWORD *)(v7 + 64);
    swift_beginAccess();
    v78 = *(_DWORD *)(v7 + 64);
    v93 = &type metadata for MemberSeed;
    v94 = sub_23D5ED1F8();
    v92[0] = a5;
    v92[1] = a6;
    sub_23D5E7FA8(v86, v25, v34, v87);
    v84 = v32;
    sub_23D5AFA60(v35, v32);
    sub_23D5AFA60(v36, v37);
    sub_23D5AFA60(a5, (unint64_t)a6);
    if (qword_256C78D30 != -1)
      swift_once();
    v38 = v95;
    sub_23D61D4A8(v92, 1, v85);
    v95 = v38;
    if (v38)
    {
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
      sub_23D5E7220(v86, v25, v34, v87);
      sub_23D5DDA20(v36, v37);
      sub_23D5DDA20(v35, v84);
    }
    else
    {
      v74 = v37;
      v73 = v34;
      v72 = v25;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
      v93 = &type metadata for AdminSeed;
      v39 = sub_23D5E803C();
      v94 = v39;
      v40 = (_QWORD *)swift_allocObject();
      v92[0] = v40;
      v42 = v89;
      v41 = v90;
      v40[2] = v89;
      v40[3] = v41;
      v43 = (uint64_t)v91;
      v44 = v83;
      v40[4] = v91;
      v40[5] = v44;
      sub_23D5AFA60(v42, v41);
      sub_23D5E7284(v43, v44);
      if (qword_256C78D20 != -1)
        swift_once();
      v45 = v88;
      v46 = v95;
      sub_23D61D674((uint64_t)v92, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
      if (v46)
      {
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
        sub_23D5E7220(v86, v72, v73, v87);
        (*(void (**)(uint64_t, uint64_t))(v81 + 8))(v85, v82);
        sub_23D5DDA20(v36, v74);
        sub_23D5DDA20(v35, v84);
      }
      else
      {
        v95 = v39;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
        v47 = v74;
        v48 = v85;
        a6 = sub_23D5DC8C0(v36, v74, v78, v35, v84, v85, v45);
        v79 = *(_QWORD *)(v79 + 8);
        ((void (*)(uint64_t, uint64_t))v79)(v45, v80);
        v50 = v48;
        v51 = *(void (**)(uint64_t, uint64_t))(v81 + 8);
        v51(v50, v82);
        sub_23D5DDA20(v36, v47);
        sub_23D5DDA20(v35, v84);
        LODWORD(v85) = *v76;
        v93 = &type metadata for AdminSeed;
        v94 = v95;
        v52 = (_QWORD *)swift_allocObject();
        v92[0] = v52;
        v53 = v89;
        v54 = v47;
        v56 = v90;
        v55 = (uint64_t)v91;
        v52[2] = v89;
        v52[3] = v56;
        v57 = v83;
        v52[4] = v55;
        v52[5] = v57;
        v88 = v36;
        v58 = v36;
        v59 = v57;
        sub_23D5AFA60(v58, v54);
        sub_23D5AFA60(v53, v56);
        sub_23D5E7284(v55, v59);
        if (qword_256C78D08 != -1)
          swift_once();
        v60 = v77;
        sub_23D61D4A8(v92, 1, v77);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
        v93 = &type metadata for AdminSeed;
        v94 = v95;
        v61 = (_QWORD *)swift_allocObject();
        v92[0] = v61;
        v63 = v89;
        v62 = v90;
        v61[2] = v89;
        v61[3] = v62;
        v64 = (uint64_t)v91;
        v61[4] = v91;
        v61[5] = v59;
        v65 = qword_256C890F0;
        v66 = *(_QWORD *)algn_256C890F8;
        sub_23D5AFA60(v63, v62);
        sub_23D5E7284(v64, v59);
        v67 = (uint64_t)v75;
        sub_23D61D674((uint64_t)v92, 1, v65, v66);
        v91 = v51;
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v92);
        v68 = v88;
        v69 = v74;
        v70 = v72;
        sub_23D5DC148(v88, v74, v85, v86, v72, v73, v87, v60, v67);
        v95 = 0;
        ((void (*)(uint64_t, uint64_t))v79)(v67, v80);
        v91(v60, v82);
        sub_23D5DDA20(v68, v69);
        sub_23D5E7220(v86, v70, v73, v87);
      }
    }
  }
  return a6;
}

uint64_t *sub_23D5D824C()
{
  _QWORD *v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  os_log_type_t v27;
  NSObject *v28;
  os_log_type_t v29;
  uint8_t *v30;
  uint64_t *v31;
  uint64_t v32;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  char v40;
  uint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  os_log_type_t v67;
  NSObject *v68;
  os_log_type_t v69;
  uint8_t *v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  char *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93[2];
  _QWORD *v94;
  unint64_t v95;
  char *v96;

  v1 = sub_23D66C330();
  v86 = *(_QWORD *)(v1 - 8);
  v87 = v1;
  MEMORY[0x24BDAC7A8](v1);
  v85 = (char *)&v74 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v3 = type metadata accessor for Invite(0);
  MEMORY[0x24BDAC7A8](v3);
  v90 = (uint64_t)&v74 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23D66C258();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = MEMORY[0x24BDAC7A8](v8);
  v89 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v96 = (char *)&v74 - v12;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v74 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23D66C2AC();
  v17 = *(_QWORD *)(v16 - 8);
  v18 = MEMORY[0x24BDAC7A8](v16);
  v88 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v21 = (char *)&v74 - v20;
  v92 = v0;
  v22 = (char *)v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
  swift_beginAccess();
  v23 = type metadata accessor for UserKeyingInfo(0);
  sub_23D5AEF48((uint64_t)&v22[*(int *)(v23 + 44)], (uint64_t)v15, &qword_256C79120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16) == 1)
  {
    v24 = &qword_256C79120;
    v25 = (uint64_t)v15;
LABEL_5:
    sub_23D5AEF8C(v25, v24);
    if (qword_256C78B10 != -1)
      swift_once();
    v26 = sub_23D66BFDC();
    __swift_project_value_buffer(v26, (uint64_t)qword_256C88B78);
    v27 = sub_23D66C588();
    v28 = sub_23D66BFC4();
    v29 = v27;
    if (os_log_type_enabled(v28, v27))
    {
      v30 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v30 = 0;
      _os_log_impl(&dword_23D5A8000, v28, v29, "originator keying material missing in group creation", v30, 2u);
      MEMORY[0x242636844](v30, -1, -1);
    }

    v31 = &qword_256C790D8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v32 = 323;
    *(_OWORD *)(v32 + 8) = xmmword_23D66E400;
    *(_QWORD *)(v32 + 24) = 0x800000023D6774B0;
    *(_QWORD *)(v32 + 32) = 0xD000000000000052;
    *(_QWORD *)(v32 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return v31;
  }
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v21, v15, v16);
  sub_23D5AEF48((uint64_t)&v22[*(int *)(v23 + 40)], (uint64_t)v7, &qword_256C79170);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v16);
    v24 = &qword_256C79170;
    v25 = (uint64_t)v7;
    goto LABEL_5;
  }
  v82 = v23;
  v83 = v22;
  v84 = v16;
  v34 = v96;
  (*(void (**)(char *, char *, uint64_t))(v9 + 32))(v96, v7, v8);
  v35 = v92[5];
  v36 = v92[6];
  v37 = (_QWORD *)((char *)v92 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newInvites);
  swift_beginAccess();
  v38 = *v37;
  if (!*(_QWORD *)(v38 + 16))
  {
LABEL_16:
    (*(void (**)(char *, uint64_t))(v9 + 8))(v34, v8);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v21, v84);
    return 0;
  }
  sub_23D5AFA60(v35, v36);
  swift_bridgeObjectRetain();
  v39 = sub_23D5DF394(v35, v36);
  if ((v40 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v35, v36);
    goto LABEL_16;
  }
  v41 = (uint64_t *)(*(_QWORD *)(v38 + 56) + 48 * v39);
  v81 = v9;
  v42 = v41[1];
  v77 = *v41;
  v43 = v41[2];
  v78 = v41[3];
  v80 = v8;
  v79 = v21;
  v45 = v41[4];
  v44 = v41[5];
  sub_23D5AFA60(v77, v42);
  v74 = v43;
  v46 = v43;
  v47 = v78;
  sub_23D5AFA60(v46, v78);
  v75 = v45;
  v48 = v45;
  v49 = v42;
  v31 = (uint64_t *)v96;
  v76 = v44;
  sub_23D5AFA60(v48, v44);
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v35, v36);
  v94 = (_QWORD *)v35;
  v95 = v36;
  v50 = (uint64_t)v89;
  (*(void (**)(char *, uint64_t *, uint64_t))(v81 + 16))(v89, v31, v80);
  v51 = (uint64_t)v88;
  v52 = v84;
  (*(void (**)(char *, char *, uint64_t))(v17 + 16))(v88, v79, v84);
  sub_23D5AFA60(v35, v36);
  v53 = v77;
  sub_23D5AFA60(v77, v49);
  v54 = v91;
  sub_23D632A4C((uint64_t *)&v94, v50, v51, v53, v49, v90);
  if (v54)
  {
    sub_23D5DDA20(v53, v49);
    sub_23D5DDA20(v74, v47);
    sub_23D5DDA20(v75, v76);
    (*(void (**)(uint64_t *, uint64_t))(v81 + 8))(v31, v80);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v79, v52);
  }
  else
  {
    v91 = v49;
    v55 = (uint64_t)v85;
    v56 = v86;
    v57 = v87;
    (*(void (**)(char *, char *, uint64_t))(v86 + 16))(v85, &v83[*(int *)(v82 + 28)], v87);
    v58 = sub_23D63527C(v55);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v55, v57);
    v59 = v84;
    v60 = v79;
    v61 = v81;
    if ((v58 & 1) != 0)
    {
      v62 = v92[2];
      v63 = v92[3];
      sub_23D5AFA60(v62, v63);
      sub_23D5D8CFC(12, v62, v63);
      Nonce.init(_:)(v93[0], v93[1]);
      v64 = v80;
      v72 = v95;
      v92 = v94;
      LOBYTE(v93[0]) = 0;
      v73 = v90;
      v31 = (uint64_t *)Invite.produceRSVP(nonce:response:)((uint64_t *)&v94, (unsigned __int8 *)v93);
      sub_23D5DDA20(v77, v91);
      sub_23D5DDA20(v74, v78);
      sub_23D5DDA20(v75, v76);
      sub_23D5E6950(v73, type metadata accessor for Invite);
      (*(void (**)(char *, uint64_t))(v81 + 8))(v96, v64);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v60, v59);
      sub_23D5DDA20((uint64_t)v92, v72);
    }
    else
    {
      v65 = v80;
      if (qword_256C78B10 != -1)
        swift_once();
      v66 = sub_23D66BFDC();
      __swift_project_value_buffer(v66, (uint64_t)qword_256C88B78);
      v67 = sub_23D66C588();
      v68 = sub_23D66BFC4();
      v69 = v67;
      if (os_log_type_enabled(v68, v67))
      {
        v70 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v70 = 0;
        _os_log_impl(&dword_23D5A8000, v68, v69, "self generated invite not validating", v70, 2u);
        MEMORY[0x242636844](v70, -1, -1);
      }

      v31 = &qword_256C790D8;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v71 = 321;
      *(_OWORD *)(v71 + 8) = xmmword_23D66E3F0;
      *(_QWORD *)(v71 + 24) = 0x800000023D6774B0;
      *(_QWORD *)(v71 + 32) = 0xD000000000000052;
      *(_QWORD *)(v71 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20(v77, v91);
      sub_23D5DDA20(v74, v78);
      sub_23D5DDA20(v75, v76);
      sub_23D5E6950(v90, type metadata accessor for Invite);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v96, v65);
      (*(void (**)(char *, uint64_t))(v17 + 8))(v60, v59);
    }
  }
  return v31;
}

void sub_23D5D8CFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000) == 0)
    __asm { BR              X9 }
  __break(1u);
  JUMPOUT(0x23D5D8E44);
}

uint64_t sub_23D5D8E78@<X0>(unsigned int a1@<W0>, unsigned __int8 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v8;
  unsigned int v9;
  uint64_t v10;
  os_log_type_t v11;
  NSObject *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *v32;
  os_log_type_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  os_log_type_t v39;
  NSObject *v40;
  os_log_type_t v41;
  uint8_t *v42;
  uint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  NSObject *v46;
  os_log_type_t v47;
  uint8_t *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61[2];
  uint64_t v62[2];
  _QWORD v63[6];
  char v64[40];
  unint64_t v65;
  int v66;

  v5 = v3;
  v8 = *a2;
  swift_beginAccess();
  v9 = *(_DWORD *)(v5 + 64);
  if (v9 < a1)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v10 = sub_23D66BFDC();
    __swift_project_value_buffer(v10, (uint64_t)qword_256C88B78);
    v11 = sub_23D66C588();
    swift_retain();
    v12 = sub_23D66BFC4();
    if (os_log_type_enabled(v12, v11))
    {
      v13 = swift_slowAlloc();
      *(_DWORD *)v13 = 67109376;
      LODWORD(v62[0]) = a1;
      sub_23D66C5D0();
      *(_WORD *)(v13 + 8) = 1024;
      LODWORD(v62[0]) = *(_DWORD *)(v5 + 64);
      sub_23D66C5D0();
      swift_release();
      _os_log_impl(&dword_23D5A8000, v12, v11, "detected more recent group version, checked %u against %u", (uint8_t *)v13, 0xEu);
      MEMORY[0x242636844](v13, -1, -1);

    }
    else
    {

      swift_release();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v28 = 307;
    v29 = xmmword_23D66E440;
LABEL_17:
    *(_OWORD *)(v28 + 8) = v29;
    *(_QWORD *)(v28 + 24) = 0x800000023D677940;
    *(_QWORD *)(v28 + 32) = 0xD000000000000052;
    *(_QWORD *)(v28 + 40) = 0x800000023D676EF0;
    return swift_willThrow();
  }
  if (!a1)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v30 = sub_23D66BFDC();
    __swift_project_value_buffer(v30, (uint64_t)qword_256C88B78);
    v31 = sub_23D66C588();
    v32 = sub_23D66BFC4();
    v33 = v31;
    if (os_log_type_enabled(v32, v31))
    {
      v34 = swift_slowAlloc();
      *(_DWORD *)v34 = 67109376;
      sub_23D66C5D0();
      *(_WORD *)(v34 + 8) = 1024;
      LODWORD(v62[0]) = 1;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v32, v33, "invalid first group version, got %u expected %u", (uint8_t *)v34, 0xEu);
      MEMORY[0x242636844](v34, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v28 = 306;
    v29 = xmmword_23D66E430;
    goto LABEL_17;
  }
  v66 = v8;
  v60 = a3;
  v15 = *(_QWORD *)(v5 + 88);
  v14 = *(_QWORD *)(v5 + 96);
  v17 = *(_QWORD *)(v5 + 104);
  v16 = *(_QWORD *)(v5 + 112);
  v18 = *(_QWORD *)(v5 + 72);
  v19 = *(_QWORD *)(v5 + 80);
  if (v9 <= a1)
  {
    sub_23D5E7FA8(*(_QWORD *)(v5 + 88), *(_QWORD *)(v5 + 96), *(_QWORD *)(v5 + 104), *(_QWORD *)(v5 + 112));
    sub_23D5AFA60(v18, v19);
    if ((v66 & 1) == 0)
      goto LABEL_27;
LABEL_19:
    v60[3] = (uint64_t)&type metadata for MemberSeed;
    v60[4] = sub_23D5ED1F8();
    result = sub_23D5E7220(v15, v14, v17, v16);
    *v60 = v18;
    v60[1] = v19;
    return result;
  }
  v20 = *(_QWORD *)(v5 + 104);
  v21 = *(_QWORD *)(v5 + 96);
  v22 = *(_QWORD *)(v5 + 112);
  v23 = *(_QWORD *)(v5 + 72);
  v24 = *(_QWORD *)(v5 + 24);
  v62[0] = *(_QWORD *)(v5 + 16);
  v62[1] = v24;
  v26 = *(_QWORD *)(v5 + 40);
  v25 = *(_QWORD *)(v5 + 48);
  v61[0] = v26;
  v61[1] = v25;
  v57 = v21;
  v58 = v22;
  v55 = v20;
  sub_23D5E7FA8(v15, v21, v20, v22);
  v59 = v19;
  sub_23D5AFA60(v23, v19);
  v56 = v62[0];
  sub_23D5AFA60(v62[0], v24);
  sub_23D5AFA60(v26, v25);
  sub_23D64DE34(v62, v61, a1, (uint64_t)v63);
  if (v4)
  {
    sub_23D5E7220(v15, v57, v55, v58);
    sub_23D5DDA20(v23, v19);
    sub_23D5DDA20(v26, v25);
    return sub_23D5DDA20(v56, v24);
  }
  v54 = v23;
  v36 = v63[0];
  v35 = v63[1];
  v52 = v63[3];
  v53 = v63[2];
  v37 = v63[5];
  v51 = v63[4];
  sub_23D5DDA20(v26, v25);
  sub_23D5DDA20(v56, v24);
  sub_23D5F16C4((uint64_t)v63, (uint64_t)v64, &qword_256C79A38);
  if (v65 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v38 = sub_23D66BFDC();
    __swift_project_value_buffer(v38, (uint64_t)qword_256C88B78);
    v39 = sub_23D66C588();
    v40 = sub_23D66BFC4();
    v41 = v39;
    if (os_log_type_enabled(v40, v39))
    {
      v42 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v42 = 0;
      _os_log_impl(&dword_23D5A8000, v40, v41, "expected seeds not present in device to device container", v42, 2u);
      MEMORY[0x242636844](v42, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v43 = 375;
    *(_OWORD *)(v43 + 8) = xmmword_23D66E420;
    *(_QWORD *)(v43 + 24) = 0x800000023D677940;
    *(_QWORD *)(v43 + 32) = 0xD000000000000052;
    *(_QWORD *)(v43 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v54, v59);
    return sub_23D5E7220(v15, v57, v55, v58);
  }
  sub_23D5E7220(v15, v57, v55, v58);
  v17 = v53;
  sub_23D5E7FA8(v36, v35, v53, v52);
  v18 = v51;
  sub_23D5AFA60(v51, v37);
  sub_23D5DDA20(v51, v37);
  sub_23D5DDA20(v54, v59);
  sub_23D5E7220(v36, v35, v53, v52);
  v15 = v36;
  v19 = v37;
  v14 = v35;
  v16 = v52;
  if ((v66 & 1) != 0)
    goto LABEL_19;
LABEL_27:
  if (v14 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v44 = sub_23D66BFDC();
    __swift_project_value_buffer(v44, (uint64_t)qword_256C88B78);
    v45 = sub_23D66C588();
    v46 = sub_23D66BFC4();
    v47 = v45;
    if (os_log_type_enabled(v46, v45))
    {
      v48 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v48 = 0;
      _os_log_impl(&dword_23D5A8000, v46, v47, "missing admin seed", v48, 2u);
      MEMORY[0x242636844](v48, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v49 = 308;
    *(_OWORD *)(v49 + 8) = xmmword_23D66E410;
    *(_QWORD *)(v49 + 24) = 0x800000023D677940;
    *(_QWORD *)(v49 + 32) = 0xD000000000000052;
    *(_QWORD *)(v49 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return sub_23D5DDA20(v18, v19);
  }
  else
  {
    v60[3] = (uint64_t)&type metadata for AdminSeed;
    v60[4] = sub_23D5E803C();
    v50 = (_QWORD *)swift_allocObject();
    *v60 = (uint64_t)v50;
    result = sub_23D5DDA20(v18, v19);
    v50[2] = v15;
    v50[3] = v14;
    v50[4] = v17;
    v50[5] = v16;
  }
  return result;
}

uint64_t Group.deinit()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;

  sub_23D5DDA20(*(_QWORD *)(v0 + 16), *(_QWORD *)(v0 + 24));
  sub_23D5DDA20(*(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48));
  swift_bridgeObjectRelease();
  sub_23D5DDA20(*(_QWORD *)(v0 + 72), *(_QWORD *)(v0 + 80));
  sub_23D5E7220(*(_QWORD *)(v0 + 88), *(_QWORD *)(v0 + 96), *(_QWORD *)(v0 + 104), *(_QWORD *)(v0 + 112));
  sub_23D5E6950(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial, type metadata accessor for UserKeyingInfo);
  sub_23D5E725C(*(_QWORD *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset), *(_QWORD *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23D5E725C(*(_QWORD *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob), *(_QWORD *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_currentSerializedGroupBlob + 8));
  sub_23D5AEF8C(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_groupDataThatNeedsValidation, &qword_256C79128);
  sub_23D5AEF8C(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_seedBlobsThatNeedValidation, &qword_256C79130);
  v1 = *(_QWORD *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup);
  *(_QWORD *)(v0 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup) = 0;
  if (v1)
  {
    do
    {
      if (!swift_isUniquelyReferenced_native())
        break;
      v2 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_newGroup);
      swift_retain();
      swift_release();
      v1 = v2;
    }
    while (v2);
  }
  swift_release();
  return v0;
}

uint64_t Group.__deallocating_deinit()
{
  Group.deinit();
  return swift_deallocClassInstance();
}

void sub_23D5D9848(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23D5D98A4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23D5D98D8 + *((int *)qword_23D5D9BA0 + (v0 >> 62))))();
}

void sub_23D5D9BC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

void sub_23D5D9C28(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b2, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  if (v24)
    __asm { BR              X10 }
  __break(1u);
  JUMPOUT(0x23D5D9F04);
}

uint64_t sub_23D5D9F78()
{
  uint64_t v0;
  uint64_t inited;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t result;
  unsigned int v14;
  _BYTE v15[128];
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E450;
  if (qword_256C78B68 != -1)
    swift_once();
  v2 = qword_256C88C30;
  v3 = *(_QWORD *)algn_256C88C38;
  *(_QWORD *)(inited + 32) = qword_256C88C30;
  *(_QWORD *)(inited + 40) = v3;
  v14 = bswap32(*(_DWORD *)v0);
  sub_23D5AFA60(v2, v3);
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v14, (uint64_t)v15);
  *(_QWORD *)(inited + 56) = v4;
  v5 = *(_QWORD *)(v0 + 8);
  v6 = *(_QWORD *)(v0 + 16);
  *(_QWORD *)(inited + 64) = v5;
  *(_QWORD *)(inited + 72) = v6;
  v7 = *(_QWORD *)(v0 + 24);
  if (*(_BYTE *)(v0 + 32) == 1)
  {
    LODWORD(v7) = v7 != 0;
LABEL_7:
    v14 = bswap32(v7);
    sub_23D5AFA60(v5, v6);
    *(_QWORD *)(inited + 80) = sub_23D628C44((uint64_t)&v14, (uint64_t)v15);
    *(_QWORD *)(inited + 88) = v8;
    v14 = bswap32(*(_DWORD *)(v0 + 36));
    *(_QWORD *)(inited + 96) = sub_23D628C44((uint64_t)&v14, (uint64_t)v15);
    *(_QWORD *)(inited + 104) = v9;
    v10 = *(_QWORD *)(v0 + 40);
    v11 = *(_QWORD *)(v0 + 48);
    *(_QWORD *)(inited + 112) = v10;
    *(_QWORD *)(inited + 120) = v11;
    sub_23D5AFA60(v10, v11);
    v12 = sub_23D62FE18(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    return v12;
  }
  if ((v7 & 0x8000000000000000) == 0 && !HIDWORD(v7))
    goto LABEL_7;
  result = sub_23D66C714();
  __break(1u);
  return result;
}

uint64_t sub_23D5DA188()
{
  return sub_23D5DA1E8(&qword_256C78B60, &qword_256C88C20, (unint64_t *)algn_256C88C28);
}

uint64_t sub_23D5DA1E8(_QWORD *a1, uint64_t *a2, unint64_t *a3)
{
  uint64_t v3;
  uint64_t inited;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v19;
  _BYTE v20[112];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E460;
  if (*a1 != -1)
    swift_once();
  v8 = *a2;
  v9 = *a3;
  *(_QWORD *)(inited + 32) = *a2;
  *(_QWORD *)(inited + 40) = v9;
  v19 = bswap32(*(_DWORD *)v3);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v19, (uint64_t)v20);
  *(_QWORD *)(inited + 56) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  v12 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(inited + 64) = v11;
  *(_QWORD *)(inited + 72) = v12;
  v13 = *(_QWORD *)(v3 + 24);
  v14 = *(_QWORD *)(v3 + 32);
  *(_QWORD *)(inited + 80) = v13;
  *(_QWORD *)(inited + 88) = v14;
  v16 = *(_QWORD *)(v3 + 40);
  v15 = *(_QWORD *)(v3 + 48);
  *(_QWORD *)(inited + 96) = v16;
  *(_QWORD *)(inited + 104) = v15;
  sub_23D5AFA60(v11, v12);
  sub_23D5AFA60(v13, v14);
  sub_23D5AFA60(v16, v15);
  v17 = sub_23D62FE18(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v17;
}

uint64_t GroupRole.encode(to:)(_QWORD *a1)
{
  char *v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char v20;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791C0);
  v16 = *(_QWORD *)(v3 - 8);
  v17 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791C8);
  v14 = *(_QWORD *)(v6 - 8);
  v15 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791D0);
  v18 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v11 = (char *)&v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ED5DC();
  sub_23D66C924();
  if ((v12 & 1) != 0)
  {
    v20 = 1;
    sub_23D5ED620();
    sub_23D66C7E0();
    (*(void (**)(char *, uint64_t))(v16 + 8))(v5, v17);
  }
  else
  {
    v19 = 0;
    sub_23D5ED664();
    sub_23D66C7E0();
    (*(void (**)(char *, uint64_t))(v14 + 8))(v8, v15);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v18 + 8))(v11, v9);
}

uint64_t GroupRole.init(from:)@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  char v35;

  v30 = a2;
  v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791F0);
  v32 = *(_QWORD *)(v29 - 8);
  MEMORY[0x24BDAC7A8](v29);
  v31 = (char *)&v26 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791F8);
  v4 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79200);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ED5DC();
  v11 = v33;
  sub_23D66C918();
  if (v11)
    goto LABEL_7;
  v26 = v4;
  v27 = a1;
  v12 = v31;
  v13 = v32;
  v33 = v8;
  v14 = sub_23D66C7C8();
  v15 = v7;
  if (*(_QWORD *)(v14 + 16) != 1)
  {
    v19 = sub_23D66C684();
    swift_allocError();
    v21 = v20;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79208);
    *v21 = &type metadata for GroupRole;
    sub_23D66C78C();
    sub_23D66C678();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v19 - 8) + 104))(v21, *MEMORY[0x24BEE26D0], v19);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v15);
    a1 = v27;
LABEL_7:
    v24 = (uint64_t)a1;
    return __swift_destroy_boxed_opaque_existential_1(v24);
  }
  v16 = *(_BYTE *)(v14 + 32);
  if ((v16 & 1) != 0)
  {
    LODWORD(v28) = *(unsigned __int8 *)(v14 + 32);
    v35 = 1;
    sub_23D5ED620();
    sub_23D66C780();
    v17 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v12, v29);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v15);
    v16 = v28;
  }
  else
  {
    v34 = 0;
    sub_23D5ED664();
    v22 = v6;
    sub_23D66C780();
    v23 = v33;
    v18 = v30;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v22, v28);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v15);
  }
  *v18 = v16;
  v24 = (uint64_t)v27;
  return __swift_destroy_boxed_opaque_existential_1(v24);
}

uint64_t sub_23D5DA864@<X0>(_QWORD *a1@<X0>, _BYTE *a2@<X8>)
{
  return GroupRole.init(from:)(a1, a2);
}

uint64_t sub_23D5DA878(_QWORD *a1)
{
  return GroupRole.encode(to:)(a1);
}

void GroupRole.RSVPStatus.encode(to:)(_QWORD *a1)
{
  unsigned __int8 *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[16];

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79210);
  v14[11] = *(_QWORD *)(v3 - 8);
  v14[12] = v3;
  MEMORY[0x24BDAC7A8](v3);
  v14[10] = (char *)v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79218);
  v14[8] = *(_QWORD *)(v5 - 8);
  v14[9] = v5;
  MEMORY[0x24BDAC7A8](v5);
  v14[7] = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79220);
  v14[5] = *(_QWORD *)(v7 - 8);
  v14[6] = v7;
  MEMORY[0x24BDAC7A8](v7);
  v14[4] = (char *)v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79228);
  v14[2] = *(_QWORD *)(v9 - 8);
  v14[3] = v9;
  MEMORY[0x24BDAC7A8](v9);
  v14[1] = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79230);
  MEMORY[0x24BDAC7A8](v11);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79238);
  v14[14] = *(_QWORD *)(v12 - 8);
  v14[15] = v12;
  MEMORY[0x24BDAC7A8](v12);
  v13 = *v1;
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ED6A8();
  sub_23D66C924();
  __asm { BR              X9 }
}

uint64_t sub_23D5DAA80()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_BYTE *)(v4 - 69) = 0;
  sub_23D5ED7FC();
  v5 = *(_QWORD *)(v4 - 88);
  sub_23D66C7E0();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v3, v0);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 96) + 8))(v1, v5);
}

uint64_t GroupRole.RSVPStatus.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  char *v24;
  uint64_t v25;
  _QWORD v27[4];
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;

  v42 = a2;
  v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79270);
  v34 = *(_QWORD *)(v41 - 8);
  MEMORY[0x24BDAC7A8](v41);
  v40 = (char *)v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79278);
  v35 = *(_QWORD *)(v4 - 8);
  v36 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v39 = (char *)v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79280);
  v32 = *(_QWORD *)(v6 - 8);
  v33 = v6;
  MEMORY[0x24BDAC7A8](v6);
  v38 = (char *)v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79288);
  v30 = *(_QWORD *)(v8 - 8);
  v31 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v37 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79290);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79298);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v27 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = a1[3];
  v43 = a1;
  __swift_project_boxed_opaque_existential_1(a1, v18);
  sub_23D5ED6A8();
  v19 = v44;
  sub_23D66C918();
  if (!v19)
  {
    v27[2] = v10;
    v27[3] = v13;
    v27[1] = v11;
    v44 = v15;
    v28 = v17;
    v29 = v14;
    v20 = sub_23D66C7C8();
    if (*(_QWORD *)(v20 + 16) == 1)
      __asm { BR              X9 }
    v21 = sub_23D66C684();
    swift_allocError();
    v23 = v22;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79208);
    *v23 = &type metadata for GroupRole.RSVPStatus;
    v24 = v28;
    v25 = v29;
    sub_23D66C78C();
    sub_23D66C678();
    (*(void (**)(_QWORD *, _QWORD, uint64_t))(*(_QWORD *)(v21 - 8) + 104))(v23, *MEMORY[0x24BEE26D0], v21);
    swift_willThrow();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v44 + 8))(v24, v25);
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v43);
}

uint64_t sub_23D5DB10C@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  return GroupRole.RSVPStatus.init(from:)(a1, a2);
}

void sub_23D5DB120(_QWORD *a1)
{
  GroupRole.RSVPStatus.encode(to:)(a1);
}

uint64_t GroupID.encode(to:)(_QWORD *a1)
{
  return sub_23D5DB794(a1, &qword_256C792A0, (void (*)(void))sub_23D5ED840);
}

uint64_t GroupID.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23D5DB20C(a1, &qword_256C792B8, (void (*)(void))sub_23D5ED840, a2);
}

uint64_t sub_23D5DB18C@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return GroupID.init(from:)(a1, a2);
}

uint64_t sub_23D5DB1A0(_QWORD *a1)
{
  return GroupID.encode(to:)(a1);
}

uint64_t GroupKitUserID.encode(to:)(_QWORD *a1)
{
  return sub_23D5DB794(a1, &qword_256C792C8, (void (*)(void))sub_23D5ED90C);
}

uint64_t GroupKitUserID.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23D5DB20C(a1, &qword_256C792D8, (void (*)(void))sub_23D5ED90C, a2);
}

uint64_t sub_23D5DB20C@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, void (*a3)(void)@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  _OWORD *v10;
  uint64_t v12;
  _OWORD *v13;
  __int128 v14;
  uint64_t v15;

  v13 = a4;
  v7 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v15 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  a3();
  sub_23D66C918();
  if (!v4)
  {
    v10 = v13;
    sub_23D5ED8C8();
    sub_23D66C7BC();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v9, v7);
    *v10 = v14;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23D5DB338@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return GroupKitUserID.init(from:)(a1, a2);
}

uint64_t sub_23D5DB34C(_QWORD *a1)
{
  return GroupKitUserID.encode(to:)(a1);
}

uint64_t UserDSID.encode(to:)(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C792E0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ED950();
  sub_23D66C924();
  sub_23D66C7F8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t UserDSID.init(from:)@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C792F0);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v13 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ED950();
  sub_23D66C918();
  if (!v2)
  {
    v9 = sub_23D66C7A4();
    v11 = v10;
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    *a2 = v9;
    a2[1] = v11;
  }
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)a1);
}

uint64_t sub_23D5DB568@<X0>(_QWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  return UserDSID.init(from:)(a1, a2);
}

uint64_t sub_23D5DB57C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v7;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C792E0);
  v3 = *(_QWORD *)(v2 - 8);
  MEMORY[0x24BDAC7A8](v2);
  v5 = (char *)&v7 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  sub_23D5ED950();
  sub_23D66C924();
  sub_23D66C7F8();
  return (*(uint64_t (**)(char *, uint64_t))(v3 + 8))(v5, v2);
}

uint64_t KeyShare.encode(to:)(_QWORD *a1)
{
  return sub_23D5DB794(a1, &qword_256C792F8, (void (*)(void))sub_23D5ED994);
}

uint64_t KeyShare.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23D5DB20C(a1, &qword_256C79308, (void (*)(void))sub_23D5ED994, a2);
}

uint64_t sub_23D5DB6C0@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return KeyShare.init(from:)(a1, a2);
}

uint64_t sub_23D5DB6D4(_QWORD *a1)
{
  return KeyShare.encode(to:)(a1);
}

uint64_t KeyOffset.encode(to:)(_QWORD *a1)
{
  return sub_23D5DB794(a1, &qword_256C79310, (void (*)(void))sub_23D5ED9D8);
}

uint64_t KeyOffset.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23D5DB20C(a1, &qword_256C79320, (void (*)(void))sub_23D5ED9D8, a2);
}

uint64_t sub_23D5DB740@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return KeyOffset.init(from:)(a1, a2);
}

uint64_t sub_23D5DB754(_QWORD *a1)
{
  return KeyOffset.encode(to:)(a1);
}

uint64_t Nonce.encode(to:)(_QWORD *a1)
{
  return sub_23D5DB794(a1, &qword_256C79328, (void (*)(void))sub_23D5EDA1C);
}

uint64_t sub_23D5DB794(_QWORD *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void (*v11)(void);
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v11 = a3;
  v5 = __swift_instantiateConcreteTypeFromMangledName(a2);
  v12 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v11 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = *v3;
  v9 = v3[1];
  __swift_project_boxed_opaque_existential_1(a1, a1[3]);
  v11();
  sub_23D66C924();
  v13 = v8;
  v14 = v9;
  sub_23D5ED884();
  sub_23D66C810();
  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v7, v5);
}

uint64_t Nonce.init(from:)@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return sub_23D5DB20C(a1, &qword_256C79338, (void (*)(void))sub_23D5EDA1C, a2);
}

uint64_t sub_23D5DB8CC@<X0>(_QWORD *a1@<X0>, _OWORD *a2@<X8>)
{
  return Nonce.init(from:)(a1, a2);
}

uint64_t sub_23D5DB8E0(_QWORD *a1)
{
  return Nonce.encode(to:)(a1);
}

id sub_23D5DB8F4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, void *a10)
{
  objc_class *v10;
  objc_class *v11;
  uint64_t v14;
  id v15;
  unint64_t v16;
  id v17;
  char *v18;
  void *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  void *v32;
  void *v33;
  _DWORD v35[8];
  id v36;
  char *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  uint64_t v48;
  uint64_t v49;

  v43 = a8;
  v11 = v10;
  v45 = a6;
  v46 = a7;
  v44 = a5;
  v40 = a3;
  v41 = a4;
  v38 = a9;
  v48 = sub_23D66BE20();
  v39 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v37 = (char *)v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_allocWithZone(v11);
  v47 = a10;
  v36 = objc_msgSend(v15, sel_initWithContext_, a10);
  objc_msgSend(v36, sel_setSeedType_, 0);
  v35[7] = sub_23D66BDD8();
  v35[6] = sub_23D66BDD8();
  v35[5] = sub_23D66BDD8();
  v35[4] = sub_23D66BDD8();
  v35[3] = sub_23D66BDD8();
  v35[2] = sub_23D66BDD8();
  v35[1] = sub_23D66BDD8();
  v35[0] = sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  v16 = v38;
  v17 = v36;
  v18 = v37;
  sub_23D66BDFC();
  sub_23D5DDA20(a1, a2);
  v19 = (void *)sub_23D66BDE4();
  v39 = *(_QWORD *)(v39 + 8);
  ((void (*)(char *, uint64_t))v39)(v18, v48);
  objc_msgSend(v17, sel_setGroupID_, v19);

  v21 = v40;
  v20 = v41;
  v22 = v42;
  sub_23D5B06C8(v40, v41);
  v49 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
  sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
  sub_23D66C378();
  v24 = v43;
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v21, v20);
  v25 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  objc_msgSend(v17, sel_setUserID_, v25);

  objc_msgSend(v17, sel_setGroupVersion_, v44);
  v26 = v45;
  v27 = v46;
  v28 = sub_23D61AF80(v45, v46, v24, v16);
  if (v22)
  {

    sub_23D5DDA20(v26, v27);
    sub_23D5E725C(v24, v16);
  }
  else
  {
    v30 = v28;
    v31 = v29;
    sub_23D5DDA20(v26, v27);
    sub_23D5E725C(v24, v16);
    v32 = (void *)sub_23D66BD84();
    sub_23D5DDA20(v30, v31);
    objc_msgSend(v17, sel_setRawData_, v32);

    sub_23D66BE14();
    v33 = (void *)sub_23D66BDE4();
    ((void (*)(char *, uint64_t))v39)(v18, v48);
    objc_msgSend(v17, sel_setDedupeID_, v33);

  }
  return v17;
}

id sub_23D5DBD60(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, uint64_t a6, unint64_t a7, void *a8)
{
  objc_class *v8;
  objc_class *v9;
  uint64_t v13;
  uint64_t v14;
  id v15;
  char *v16;
  void *v17;
  uint64_t v18;
  void (*v19)(char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  void *v28;
  _DWORD v30[10];
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unint64_t v39;
  id v40;
  uint64_t v41;

  v35 = a4;
  v9 = v8;
  v39 = a7;
  v40 = a8;
  v38 = a6;
  v37 = a5;
  v34 = a3;
  v13 = sub_23D66BE20();
  v32 = *(_QWORD *)(v13 - 8);
  v33 = v13;
  MEMORY[0x24BDAC7A8](v13);
  v31 = (char *)v30 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = objc_msgSend(objc_allocWithZone(v9), sel_initWithContext_, a8);
  objc_msgSend(v15, sel_setSeedType_, 1);
  v30[9] = sub_23D66BDD8();
  v30[8] = sub_23D66BDD8();
  v30[7] = sub_23D66BDD8();
  v30[6] = sub_23D66BDD8();
  v30[5] = sub_23D66BDD8();
  v30[4] = sub_23D66BDD8();
  v30[3] = sub_23D66BDD8();
  v30[2] = sub_23D66BDD8();
  v30[1] = sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  v16 = v31;
  sub_23D66BDFC();
  sub_23D5DDA20(a1, a2);
  v17 = (void *)sub_23D66BDE4();
  v18 = v33;
  v19 = *(void (**)(char *, uint64_t))(v32 + 8);
  v19(v16, v33);
  objc_msgSend(v15, sel_setGroupID_, v17);

  v20 = v34;
  v21 = v35;
  v22 = v36;
  sub_23D5B06C8(v34, v35);
  v36 = v22;
  v41 = v23;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
  sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
  sub_23D66C378();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v20, v21);
  v24 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  objc_msgSend(v15, sel_setUserID_, v24);

  objc_msgSend(v15, sel_setGroupVersion_, v37);
  v26 = v38;
  v25 = v39;
  v27 = (void *)sub_23D66BD84();
  sub_23D5DDA20(v26, v25);
  objc_msgSend(v15, sel_setRawData_, v27);

  sub_23D66BE14();
  v28 = (void *)sub_23D66BDE4();
  v19(v16, v18);
  objc_msgSend(v15, sel_setDedupeID_, v28);

  return v15;
}

uint64_t *sub_23D5DC148(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t inited;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  os_log_type_t v44;
  NSObject *v45;
  os_log_type_t v46;
  uint8_t *v47;
  uint64_t v48;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;

  v77 = a8;
  v79 = (uint64_t *)a6;
  v80 = a7;
  v78 = a5;
  v86 = *MEMORY[0x24BDAC8D0];
  v68 = sub_23D66C2DC();
  v67 = *(_QWORD *)(v68 - 8);
  MEMORY[0x24BDAC7A8](v68);
  v73 = (char *)&v66 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = type metadata accessor for GKCrypto_SeedBlob(0);
  MEMORY[0x24BDAC7A8](v14);
  v74 = (char *)&v66 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79980);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v66 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v76 = sub_23D66C108();
  v75 = *(_QWORD *)(v76 - 8);
  MEMORY[0x24BDAC7A8](v76);
  v20 = (uint64_t *)((char *)&v66 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = a1;
  *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
  *(_QWORD *)(inited + 40) = a2;
  v69 = a3;
  LODWORD(v84) = bswap32(a3);
  v70 = a1;
  v71 = a2;
  sub_23D5AFA60(a1, a2);
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v84, (uint64_t)&v84 + 4);
  *(_QWORD *)(inited + 56) = v22;
  if (qword_256C78D58 != -1)
    swift_once();
  v72 = v14;
  v23 = qword_256C89160;
  v24 = *(_QWORD *)algn_256C89168;
  *(_QWORD *)(inited + 64) = qword_256C89160;
  *(_QWORD *)(inited + 72) = v24;
  sub_23D5AFA60(v23, v24);
  if (qword_256C78CF8 != -1)
    swift_once();
  v25 = qword_256C890A0;
  v26 = *(_QWORD *)algn_256C890A8;
  *(_QWORD *)(inited + 80) = qword_256C890A0;
  *(_QWORD *)(inited + 88) = v26;
  sub_23D5AFA60(v25, v26);
  v27 = sub_23D62FE18(inited);
  v29 = v28;
  swift_setDeallocating();
  swift_arrayDestroy();
  v30 = v81;
  v31 = sub_23D61AF80(a4, v78, (uint64_t)v79, v80);
  if (v30)
  {
    v33 = v27;
    v34 = v29;
LABEL_13:
    sub_23D5DDA20(v33, v34);
    return v20;
  }
  v84 = v31;
  v85 = v32;
  v35 = sub_23D66C0C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v35 - 8) + 56))(v18, 1, 1, v35);
  v82 = v27;
  v83 = v29;
  sub_23D5E6898();
  v36 = v77;
  sub_23D66C09C();
  v37 = v29;
  v38 = v27;
  sub_23D5AEF8C((uint64_t)v18, &qword_256C79980);
  sub_23D5DDA20(v84, v85);
  v39 = sub_23D66C0F0();
  v41 = v40;
  v42 = (*(uint64_t (**)(uint64_t *, uint64_t))(v75 + 8))(v20, v76);
  if (v41 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v43 = sub_23D66BFDC();
    __swift_project_value_buffer(v43, (uint64_t)qword_256C88B78);
    v44 = sub_23D66C588();
    v45 = sub_23D66BFC4();
    v46 = v44;
    if (os_log_type_enabled(v45, v44))
    {
      v47 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v47 = 0;
      _os_log_impl(&dword_23D5A8000, v45, v46, "failed creating seed blob", v47, 2u);
      MEMORY[0x242636844](v47, -1, -1);
    }

    v20 = &qword_256C790D8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v48 = 360;
    *(_OWORD *)(v48 + 8) = xmmword_23D66E470;
    *(_QWORD *)(v48 + 24) = 0x800000023D677510;
    *(_QWORD *)(v48 + 32) = 0xD000000000000052;
    *(_QWORD *)(v48 + 40) = 0x800000023D677550;
    swift_willThrow();
    v33 = v38;
    v34 = v37;
    goto LABEL_13;
  }
  v80 = v38;
  v81 = v37;
  v78 = a9;
  MEMORY[0x24BDAC7A8](v42);
  *(&v66 - 4) = v39;
  *(&v66 - 3) = v41;
  *(&v66 - 2) = v36;
  *((_DWORD *)&v66 - 2) = v69;
  sub_23D5AFA60(v39, v41);
  v50 = sub_23D5AE928(&qword_256C79988, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B74);
  v79 = (uint64_t *)v39;
  v51 = (uint64_t)v74;
  v76 = v50;
  sub_23D66BF4C();
  v77 = 0;
  v84 = v70;
  v85 = v71;
  v52 = qword_256C89160;
  v53 = *(_QWORD *)algn_256C89168;
  sub_23D5AFA60(qword_256C89160, *(unint64_t *)algn_256C89168);
  v54 = sub_23D61BAC4(&v84, v52, v53);
  v56 = v55;
  sub_23D5DDA20(v52, v53);
  v84 = v54;
  v85 = v56;
  v57 = v73;
  v58 = v77;
  sub_23D66C2A0();
  sub_23D5DDA20(v54, v56);
  if (v58)
  {
    v20 = v79;
    sub_23D5E725C((uint64_t)v79, v41);
    sub_23D5E725C((uint64_t)v20, v41);
    sub_23D5DDA20(v80, v81);
  }
  else
  {
    v59 = sub_23D66C2B8();
    v61 = v60;
    sub_23D5DDA20(*(_QWORD *)(v51 + 24), *(_QWORD *)(v51 + 32));
    *(_QWORD *)(v51 + 24) = v59;
    *(_QWORD *)(v51 + 32) = v61;
    v62 = sub_23D66BF1C();
    v63 = v80;
    v64 = v81;
    v20 = (uint64_t *)v62;
    (*(void (**)(char *, uint64_t))(v67 + 8))(v57, v68);
    v65 = (uint64_t)v79;
    sub_23D5E725C((uint64_t)v79, v41);
    sub_23D5E725C(v65, v41);
    sub_23D5DDA20(v63, v64);
  }
  sub_23D5E6950(v51, type metadata accessor for GKCrypto_SeedBlob);
  return v20;
}

uint64_t *sub_23D5DC8C0(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t inited;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;

  v66 = a7;
  v72 = a5;
  v73 = a6;
  v79 = *MEMORY[0x24BDAC8D0];
  v62 = sub_23D66C2DC();
  v61 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v67 = (char *)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_SeedBlob(0);
  MEMORY[0x24BDAC7A8](v12);
  v68 = (char *)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79980);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v71 = sub_23D66C108();
  v70 = *(_QWORD *)(v71 - 8);
  MEMORY[0x24BDAC7A8](v71);
  v18 = (char *)&v61 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = a1;
  *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
  *(_QWORD *)(inited + 40) = a2;
  v63 = a3;
  LODWORD(v77) = bswap32(a3);
  v64 = a1;
  v65 = a2;
  sub_23D5AFA60(a1, a2);
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v77, (uint64_t)&v77 + 4);
  *(_QWORD *)(inited + 56) = v20;
  if (qword_256C78D60 != -1)
    swift_once();
  v69 = v12;
  v21 = qword_256C89170;
  v22 = *(_QWORD *)algn_256C89178;
  *(_QWORD *)(inited + 64) = qword_256C89170;
  *(_QWORD *)(inited + 72) = v22;
  sub_23D5AFA60(v21, v22);
  if (qword_256C78CF8 != -1)
    swift_once();
  v23 = qword_256C890A0;
  v24 = *(_QWORD *)algn_256C890A8;
  *(_QWORD *)(inited + 80) = qword_256C890A0;
  *(_QWORD *)(inited + 88) = v24;
  sub_23D5AFA60(v23, v24);
  v25 = sub_23D62FE18(inited);
  v27 = v26;
  swift_setDeallocating();
  v28 = (uint64_t *)MEMORY[0x24BDCDDE8];
  swift_arrayDestroy();
  v29 = v72;
  v77 = a4;
  v78 = v72;
  v30 = sub_23D66C0C0();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v30 - 8) + 56))(v16, 1, 1, v30);
  v75 = v25;
  v76 = v27;
  sub_23D5AFA60(a4, v29);
  sub_23D5E6898();
  v32 = v73;
  v31 = v74;
  sub_23D66C09C();
  if (v31)
  {
    sub_23D5AEF8C((uint64_t)v16, &qword_256C79980);
    sub_23D5DDA20(v77, v78);
    v33 = v25;
LABEL_13:
    sub_23D5DDA20(v33, v27);
    return v28;
  }
  sub_23D5AEF8C((uint64_t)v16, &qword_256C79980);
  sub_23D5DDA20(v77, v78);
  v34 = sub_23D66C0F0();
  v36 = v35;
  v37 = (*(uint64_t (**)(char *, uint64_t))(v70 + 8))(v18, v71);
  if (v36 >> 60 == 15)
  {
    v38 = v25;
    if (qword_256C78B10 != -1)
      swift_once();
    v39 = sub_23D66BFDC();
    __swift_project_value_buffer(v39, (uint64_t)qword_256C88B78);
    v40 = sub_23D66C588();
    v41 = sub_23D66BFC4();
    v42 = v40;
    if (os_log_type_enabled(v41, v40))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v43 = 0;
      _os_log_impl(&dword_23D5A8000, v41, v42, "failed creating seed blob", v43, 2u);
      MEMORY[0x242636844](v43, -1, -1);
    }

    v28 = &qword_256C790D8;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v44 = 360;
    *(_OWORD *)(v44 + 8) = xmmword_23D66E470;
    *(_QWORD *)(v44 + 24) = 0x800000023D677510;
    *(_QWORD *)(v44 + 32) = 0xD000000000000052;
    *(_QWORD *)(v44 + 40) = 0x800000023D677550;
    swift_willThrow();
    v33 = v38;
    goto LABEL_13;
  }
  v72 = v25;
  v74 = v27;
  v46 = v34;
  MEMORY[0x24BDAC7A8](v37);
  *(&v61 - 4) = v34;
  *(&v61 - 3) = v36;
  *(&v61 - 2) = v32;
  *((_DWORD *)&v61 - 2) = v63;
  sub_23D5AFA60(v34, v36);
  v47 = sub_23D5AE928(&qword_256C79988, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B74);
  v48 = (uint64_t)v68;
  v71 = v47;
  sub_23D66BF4C();
  v73 = 0;
  v77 = v64;
  v78 = v65;
  v49 = qword_256C89170;
  v50 = *(_QWORD *)algn_256C89178;
  sub_23D5AFA60(qword_256C89170, *(unint64_t *)algn_256C89178);
  v51 = sub_23D61BAC4(&v77, v49, v50);
  v28 = v52;
  sub_23D5DDA20(v49, v50);
  v77 = v51;
  v78 = (uint64_t)v28;
  v53 = v67;
  v54 = v73;
  sub_23D66C2A0();
  sub_23D5DDA20(v51, (unint64_t)v28);
  if (v54)
  {
    sub_23D5E725C(v46, v36);
    sub_23D5E725C(v46, v36);
    sub_23D5DDA20(v72, v74);
  }
  else
  {
    v55 = v46;
    v56 = sub_23D66C2B8();
    v58 = v57;
    sub_23D5DDA20(*(_QWORD *)(v48 + 24), *(_QWORD *)(v48 + 32));
    *(_QWORD *)(v48 + 24) = v56;
    *(_QWORD *)(v48 + 32) = v58;
    v59 = sub_23D66BF1C();
    v60 = v72;
    v28 = (uint64_t *)v59;
    (*(void (**)(char *, uint64_t))(v61 + 8))(v53, v62);
    sub_23D5E725C(v55, v36);
    sub_23D5E725C(v55, v36);
    sub_23D5DDA20(v60, v74);
  }
  sub_23D5E6950(v48, type metadata accessor for GKCrypto_SeedBlob);
  return v28;
}

uint64_t sub_23D5DCFEC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  unint64_t v17;

  *(_DWORD *)a1 = 1;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = a2;
  *(_QWORD *)(a1 + 16) = a3;
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v9, v10);
  sub_23D66C030();
  sub_23D5AFD60(v16, v17);
  v12 = v11;
  v14 = v13;
  sub_23D5DDA20(v16, v17);
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v14;
  *(_QWORD *)(a1 + 64) = a6;
  *(_BYTE *)(a1 + 72) = 1;
  *(_DWORD *)(a1 + 56) = a5;
  return result;
}

uint64_t sub_23D5DD0CC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23D6448C0(v2);
  v3 = *(_QWORD *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  result = sub_23D5E1C88(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_23D5DD134(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  _QWORD v6[2];

  v2 = *(_QWORD *)(type metadata accessor for UserKeyingInfo(0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_23D6448D4(v3);
  v4 = v3[2];
  v6[0] = (char *)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_23D5E2408(v6);
  *a1 = v3;
  return result;
}

uint64_t sub_23D5DD1B4(_QWORD **a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6[2];

  v2 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0) - 8);
  v3 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v3 = (_QWORD *)sub_23D6448FC(v3);
  v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  result = sub_23D5E2EFC(v6);
  *a1 = v3;
  return result;
}

void sub_23D5DD238(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8, uint64_t a9, unint64_t a10)
{
  uint64_t v10;
  id v19;
  void *v20;
  id v21;
  uint64_t v22;
  void *v23;
  id v24;
  void *v25;
  unint64_t v26;
  uint64_t v27;
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char v32;
  char v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  id v42[6];

  v42[5] = *(id *)MEMORY[0x24BDAC8D0];
  v42[0] = a2;
  v42[1] = a3;
  v38 = a4;
  v39 = a5;
  v37 = 0;
  v19 = sub_23D650050((uint64_t *)v42, &v38, a6, &v37);
  if (!v10)
  {
    v36 = a1;
    if (v19)
    {
      v20 = v19;
      sub_23D618250((uint64_t *)v42);
      v25 = v20;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A50);
      if ((swift_dynamicCast() & 1) == 0 || (v26 = v39, v39 >> 60 == 15))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v27 = 394;
        *(_OWORD *)(v27 + 8) = xmmword_23D66E490;
        *(_QWORD *)(v27 + 24) = 0x800000023D677A50;
        *(_QWORD *)(v27 + 32) = 0xD000000000000086;
        *(_QWORD *)(v27 + 40) = 0x800000023D677A80;
        swift_willThrow();

        return;
      }
      v29 = v38;
      v30 = v40;
      v31 = v41;
      sub_23D5AFA60(v38, v39);
      sub_23D5AFA60(a7, a8);
      sub_23D5D9848(v29, v26);
      v33 = v32;
      sub_23D5DDA20(a7, a8);
      sub_23D5DDA20(v29, v26);
      if ((v33 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v34 = 393;
        *(_OWORD *)(v34 + 8) = xmmword_23D66E480;
        *(_QWORD *)(v34 + 24) = 0x800000023D677A50;
        *(_QWORD *)(v34 + 32) = 0xD000000000000086;
        *(_QWORD *)(v34 + 40) = 0x800000023D677A80;
        swift_willThrow();

        sub_23D5E7220(v29, v26, v30, v31);
        return;
      }
      sub_23D5E7220(v29, v26, v30, v31);

      v22 = v36;
    }
    else
    {
      type metadata accessor for GroupKitCryptoGroupSeed();
      v35 = *(void **)(a1 + 32);
      sub_23D5AFA60((uint64_t)a2, (unint64_t)a3);
      sub_23D5AFA60(a4, a5);
      sub_23D5AFA60(a7, a8);
      sub_23D5E7284(a9, a10);
      v21 = sub_23D5DB8F4((uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8, a9, a10, v35);
      objc_msgSend(*(id *)(v36 + 32), sel_assignObject_toPersistentStore_, v21, *(_QWORD *)(v36 + 24));

      v22 = v36;
    }
    v23 = *(void **)(v22 + 32);
    v42[0] = 0;
    if (objc_msgSend(v23, sel_save_, v42))
    {
      v24 = v42[0];
    }
    else
    {
      v28 = v42[0];
      sub_23D66BCDC();

      swift_willThrow();
    }
  }
}

void sub_23D5DD61C(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7, unint64_t a8)
{
  uint64_t v8;
  id v17;
  void *v18;
  void *v19;
  id v20;
  uint64_t v21;
  void *v22;
  id v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  id v27;
  uint64_t v28;
  char v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  unsigned __int8 v33;
  id v34[5];
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v34[0] = a2;
  v34[1] = a3;
  v35 = a4;
  v36 = a5;
  v33 = 1;
  v17 = sub_23D650050((uint64_t *)v34, &v35, a6, &v33);
  if (!v8)
  {
    v32 = a1;
    if (v17)
    {
      v18 = v17;
      sub_23D618250((uint64_t *)v34);
      v24 = v18;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A50);
      if ((swift_dynamicCast() & 1) == 0 || (v25 = v36, v36 >> 60 == 15))
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v26 = 394;
        *(_OWORD *)(v26 + 8) = xmmword_23D66E490;
        *(_QWORD *)(v26 + 24) = 0x800000023D677A50;
        *(_QWORD *)(v26 + 32) = 0xD000000000000086;
        *(_QWORD *)(v26 + 40) = 0x800000023D677A80;
        swift_willThrow();

        return;
      }
      v28 = v35;
      sub_23D5AFA60(a7, a8);
      sub_23D5E7284(v28, v25);
      sub_23D5D9848(v28, v25);
      v30 = v29;
      sub_23D5DDA20(a7, a8);
      sub_23D5E725C(v28, v25);
      if ((v30 & 1) == 0)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v31 = 393;
        *(_OWORD *)(v31 + 8) = xmmword_23D66E480;
        *(_QWORD *)(v31 + 24) = 0x800000023D677A50;
        *(_QWORD *)(v31 + 32) = 0xD000000000000086;
        *(_QWORD *)(v31 + 40) = 0x800000023D677A80;
        swift_willThrow();

        sub_23D5E725C(v28, v25);
        return;
      }
      sub_23D5E725C(v28, v25);

      v21 = v32;
    }
    else
    {
      type metadata accessor for GroupKitCryptoGroupSeed();
      v19 = *(void **)(a1 + 32);
      sub_23D5AFA60((uint64_t)a2, (unint64_t)a3);
      sub_23D5AFA60(a4, a5);
      sub_23D5AFA60(a7, a8);
      v20 = sub_23D5DBD60((uint64_t)a2, (unint64_t)a3, a4, a5, a6, a7, a8, v19);
      objc_msgSend(*(id *)(v32 + 32), sel_assignObject_toPersistentStore_, v20, *(_QWORD *)(v32 + 24));

      v21 = v32;
    }
    v22 = *(void **)(v21 + 32);
    v34[0] = 0;
    if (objc_msgSend(v22, sel_save_, v34))
    {
      v23 = v34[0];
    }
    else
    {
      v27 = v34[0];
      sub_23D66BCDC();

      swift_willThrow();
    }
  }
}

uint64_t sub_23D5DD9C4(uint64_t (**a1)(uint64_t, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*a1)(a2, a3, a4);
}

uint64_t sub_23D5DD9F8@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_23D5DDA20(uint64_t a1, unint64_t a2)
{
  uint64_t result;

  if (a2 >> 62 != 1)
  {
    if (a2 >> 62 != 2)
      return result;
    swift_release();
  }
  return swift_release();
}

uint64_t __swift_instantiateConcreteTypeFromMangledNameAbstract(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  if (result < 0)
  {
    result = MEMORY[0x242636784](255, (char *)a1 + (int)result, -(result >> 32), 0, 0);
    *a1 = result;
  }
  return result;
}

void *sub_23D5DDAA8(void *__src, uint64_t a2, void *__dst, uint64_t a4)
{
  uint64_t v4;

  if (__src)
    v4 = a2 - (_QWORD)__src;
  else
    v4 = 0;
  if (!__dst)
  {
    if (v4 <= 0)
      return __src;
LABEL_10:
    __src = (void *)sub_23D66C768();
    __break(1u);
    return __src;
  }
  if (a4 - (uint64_t)__dst < v4)
    goto LABEL_10;
  if (__src)
    return memmove(__dst, __src, a2 - (_QWORD)__src);
  return __src;
}

_BYTE **sub_23D5DDB3C(_BYTE **result, uint64_t a2, uint64_t a3, char a4)
{
  _BYTE *v4;

  v4 = *result;
  *v4 = a4;
  *result = v4 + 1;
  return result;
}

uint64_t sub_23D5DDB4C(uint64_t (*a1)(void))
{
  return a1();
}

uint64_t sub_23D5DDB6C(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t result;

  v6 = a4();
  sub_23D5DDBDC(v6, v7, a3);
  v8 = *a1 + 8;
  sub_23D66C5D0();
  result = swift_bridgeObjectRelease();
  *a1 = v8;
  return result;
}

uint64_t sub_23D5DDBDC(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12[3];
  uint64_t ObjectType;

  v6 = sub_23D5DDCAC(v12, 0, 0, 1, a1, a2);
  v7 = v12[0];
  if (v6)
  {
    v8 = v6;
    ObjectType = swift_getObjectType();
    v12[0] = v8;
    v9 = *a3;
    if (*a3)
    {
      sub_23D5F17CC((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }
  else
  {
    ObjectType = MEMORY[0x24BEE2520];
    v12[0] = a1;
    v12[1] = a2;
    v10 = *a3;
    if (*a3)
    {
      sub_23D5F17CC((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }
    swift_bridgeObjectRetain();
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v12);
  return v7;
}

uint64_t sub_23D5DDCAC(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  _QWORD __src[2];

  if ((a6 & 0x2000000000000000) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        v11 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v11)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (_QWORD *)&__dst[v11] || (char *)__src + v11 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            sub_23D66C5DC();
            result = 0;
            *a1 = (uint64_t)__dst;
            return result;
          }
          goto LABEL_17;
        }
      }
    }
LABEL_13:
    result = sub_23D5DDE64(a5, a6);
    *a1 = v12;
    return result;
  }
  if ((a6 & 0x1000000000000000) != 0)
    goto LABEL_13;
  if ((a5 & 0x1000000000000000) != 0)
  {
    v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }
  v8 = sub_23D66C690();
  if (!v8)
  {
    sub_23D66C714();
    __break(1u);
LABEL_17:
    result = sub_23D66C768();
    __break(1u);
    return result;
  }
LABEL_5:
  *a1 = v8;
  if ((a6 & 0x8000000000000000) != 0)
    return 0;
  else
    return swift_unknownObjectRetain();
}

uint64_t sub_23D5DDE64(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = sub_23D5DDEF8(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23D5DE06C(0, *(_QWORD *)(v2 + 16) + 1, 1, (char *)v2);
  v4 = *(_QWORD *)(v2 + 16);
  v3 = *(_QWORD *)(v2 + 24);
  if (v4 >= v3 >> 1)
    v2 = sub_23D5DE06C(v3 > 1, v4 + 1, 1, (char *)v2);
  *(_QWORD *)(v2 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

uint64_t sub_23D5DDEF8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  char v6;
  uint64_t result;

  if ((a2 & 0x1000000000000000) != 0)
    goto LABEL_10;
  if ((a2 & 0x2000000000000000) != 0)
    v2 = HIBYTE(a2) & 0xF;
  else
    v2 = a1 & 0xFFFFFFFFFFFFLL;
  if (v2)
  {
    while (1)
    {
      v3 = sub_23D626160(v2, 0);
      if (v2 < 0)
        break;
      v4 = v3;
      v5 = sub_23D66C63C();
      if ((v6 & 1) != 0)
        goto LABEL_14;
      if (v5 == v2)
        return (uint64_t)v4;
      sub_23D66C714();
      __break(1u);
LABEL_10:
      v2 = sub_23D66C3E4();
      if (!v2)
        return MEMORY[0x24BEE4AF8];
    }
    sub_23D66C768();
    __break(1u);
LABEL_14:
    result = sub_23D66C714();
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_23D5DE06C(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  int64_t v8;
  int64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79B18);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * v11 - 64;
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v8])
      memmove(v12, v13, v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v8] || v12 >= &v13[v8])
  {
    memcpy(v12, v13, v8);
LABEL_28:
    swift_bridgeObjectRelease();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DE1B8@<X0>(uint64_t (*a1)(void)@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result;

  result = a1();
  *a2 = result;
  return result;
}

uint64_t sub_23D5DE1E0(int *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;

  sub_23D66BD24();
  v2 = *a1;
  v3 = a1[1];
  if ((int)v3 < (int)v2)
  {
    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    goto LABEL_13;
  }
  v4 = sub_23D66BC88();
  if (!v4)
  {
LABEL_13:
    __break(1u);
LABEL_14:
    abort();
  }
  v5 = v4;
  v6 = sub_23D66BCAC();
  v7 = v2 - v6;
  if (__OFSUB__(v2, v6))
    goto LABEL_11;
  v8 = v3 - v2;
  v9 = sub_23D66BCA0();
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  if (v10 < 32)
    goto LABEL_12;
  result = SecRandomCopyBytes((SecRandomRef)*MEMORY[0x24BDE94B8], 0x20uLL, (void *)(v5 + v7));
  if ((_DWORD)result)
    goto LABEL_14;
  return result;
}

uint64_t sub_23D5DE288(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23D5DE4BC(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23D5DE2A4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23D5DE624(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23D5DE2C0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DE78C(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE2DC(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DE968(a1, a2, a3, (_QWORD *)*v3, &qword_256C79A00, &qword_256C79A08);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE308(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DE968(a1, a2, a3, (_QWORD *)*v3, &qword_256C799E8, &qword_256C799A0);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE334(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DF14C(a1, a2, a3, (_QWORD *)*v3, &qword_256C79AE0, (uint64_t (*)(_QWORD))type metadata accessor for HashAndCipher);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE360(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DE968(a1, a2, a3, (_QWORD *)*v3, &qword_256C79AE8, &qword_256C79AD8);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE38C(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23D5DEB48(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23D5DE3A8(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DF14C(a1, a2, a3, (_QWORD *)*v3, &qword_256C799F8, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE3D4(char a1, int64_t a2, char a3)
{
  char **v3;
  uint64_t result;

  result = sub_23D5DECB0(a1, a2, a3, *v3);
  *v3 = (char *)result;
  return result;
}

uint64_t sub_23D5DE3F0(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DEE28(a1, a2, a3, (_QWORD *)*v3, &qword_256C79A98, &qword_256C79A90);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE41C(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DEE28(a1, a2, a3, (_QWORD *)*v3, &qword_256C79AA0, &qword_256C79A88);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE448(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DEFB4(a1, a2, a3, (_QWORD *)*v3);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE464(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DF14C(a1, a2, a3, (_QWORD *)*v3, &qword_256C79A60, type metadata accessor for UserKeyingInfo);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE490(char a1, int64_t a2, char a3)
{
  uint64_t *v3;
  uint64_t result;

  result = sub_23D5DF14C(a1, a2, a3, (_QWORD *)*v3, &qword_256C79A30, type metadata accessor for Group.MemberIDAndDiversifiedKey);
  *v3 = result;
  return result;
}

uint64_t sub_23D5DE4BC(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_25431A868);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DE624(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DE78C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79938);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = (unint64_t)(v10 + 4);
  v13 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= v13 + 40 * v8)
      memmove(v10 + 4, a4 + 4, 40 * v8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= v12 + 40 * v8 || v12 >= v13 + 40 * v8)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79940);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DE92C(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23D5DE968(a1, a2, a3, a4, &qword_256C799E8, &qword_256C799A0);
}

uint64_t sub_23D5DE940(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23D5DF14C(a1, a2, a3, a4, &qword_256C79A60, type metadata accessor for UserKeyingInfo);
}

uint64_t sub_23D5DE954(char a1, int64_t a2, char a3, _QWORD *a4)
{
  return sub_23D5DE968(a1, a2, a3, a4, &qword_256C79AE8, &qword_256C79AD8);
}

uint64_t sub_23D5DE968(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DEB48(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A68);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_30;
  }
  if (v14 >= &v13[16 * v8] || v13 >= &v14[16 * v8])
  {
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_32:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DECB0(char a1, int64_t a2, char a3, char *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  size_t v11;
  char *v12;
  char *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79AD0);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 32;
  v13 = a4 + 32;
  v14 = 24 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v12, v13, v14);
    *((_QWORD *)a4 + 2) = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DEE28(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  int64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_32;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (v12)
  {
    __swift_instantiateConcreteTypeFromMangledName(a5);
    v13 = (_QWORD *)swift_allocObject();
    v14 = _swift_stdlib_malloc_size(v13);
    v15 = v14 - 32;
    if (v14 < 32)
      v15 = v14 - 1;
    v13[2] = v11;
    v13[3] = 2 * (v15 >> 5);
  }
  else
  {
    v13 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v16 = (unint64_t)(v13 + 4);
  v17 = (unint64_t)(a4 + 4);
  if ((a1 & 1) != 0)
  {
    if (v13 != a4 || v16 >= v17 + 32 * v11)
      memmove(v13 + 4, a4 + 4, 32 * v11);
    a4[2] = 0;
    goto LABEL_30;
  }
  if (v17 >= v16 + 32 * v11 || v16 >= v17 + 32 * v11)
  {
    __swift_instantiateConcreteTypeFromMangledName(a6);
    swift_arrayInitWithCopy();
LABEL_30:
    swift_release();
    return (uint64_t)v13;
  }
LABEL_32:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DEFB4(char a1, int64_t a2, char a3, _QWORD *a4)
{
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;
  _QWORD *v13;
  size_t v14;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v6 = a4[3];
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_30;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = a4[2];
  if (v7 <= v8)
    v9 = a4[2];
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A70);
    v10 = (_QWORD *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v10[2] = v8;
    v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
  }
  else
  {
    v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
  }
  v12 = v10 + 4;
  v13 = a4 + 4;
  v14 = 3 * v8;
  if ((a1 & 1) != 0)
  {
    if (v10 != a4 || v12 >= &v13[v14])
      memmove(v10 + 4, a4 + 4, v14 * 8);
    a4[2] = 0;
    goto LABEL_28;
  }
  if (v13 >= &v12[v14] || v12 >= &v13[v14])
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A78);
    swift_arrayInitWithCopy();
LABEL_28:
    swift_release();
    return (uint64_t)v10;
  }
LABEL_30:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5DF14C(char a1, int64_t a2, char a3, _QWORD *a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = a4[3];
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
LABEL_35:
        __break(1u);
        goto LABEL_36;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = a4[2];
  if (v10 <= v11)
    v12 = a4[2];
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14)
  {
    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }
  if (v17 - v15 == 0x8000000000000000 && v14 == -1)
    goto LABEL_34;
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (char *)v16 + v20;
  v22 = (char *)a4 + v20;
  if ((a1 & 1) != 0)
  {
    if (v16 < a4 || v21 >= &v22[*(_QWORD *)(v19 + 72) * v11])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
    goto LABEL_32;
  }
  v23 = *(_QWORD *)(v19 + 72) * v11;
  v24 = &v21[v23];
  v25 = (unint64_t)&v22[v23];
  if (v22 >= v24 || (unint64_t)v21 >= v25)
  {
    swift_arrayInitWithCopy();
LABEL_32:
    swift_release();
    return (uint64_t)v16;
  }
LABEL_36:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

unint64_t sub_23D5DF330(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  sub_23D66C8E8();
  sub_23D66C3CC();
  v4 = sub_23D66C90C();
  return sub_23D5DF59C(a1, a2, v4);
}

uint64_t sub_23D5DF394(uint64_t a1, unint64_t a2)
{
  uint64_t v4;

  sub_23D66C8E8();
  sub_23D5AFA60(a1, a2);
  sub_23D66BDA8();
  sub_23D5DDA20(a1, a2);
  v4 = sub_23D66C90C();
  return sub_23D5DF67C(a1, a2, v4);
}

unint64_t sub_23D5DF41C(uint64_t a1)
{
  uint64_t v2;

  sub_23D66C8E8();
  type metadata accessor for CFString(0);
  sub_23D5AE928(&qword_256C79950, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23D66DDD0);
  sub_23D66BE38();
  v2 = sub_23D66C90C();
  return sub_23D5E0040(a1, v2);
}

unint64_t sub_23D5DF4A4(_QWORD *a1)
{
  uint64_t v2;

  sub_23D66C8E8();
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_23D66C3CC();
  swift_bridgeObjectRelease();
  v2 = sub_23D66C90C();
  return sub_23D5E0180(a1, v2);
}

unint64_t sub_23D5DF538(uint64_t a1)
{
  uint64_t v2;

  v2 = sub_23D66C5F4();
  return sub_23D5E0250(a1, v2);
}

unint64_t sub_23D5DF568(unsigned int a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = MEMORY[0x2426362BC](*(_QWORD *)(v1 + 40), a1, 4);
  return sub_23D5E0314(a1, v3);
}

unint64_t sub_23D5DF59C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  BOOL v14;

  v4 = v3 + 64;
  v5 = -1 << *(_BYTE *)(v3 + 32);
  v6 = a3 & ~v5;
  if (((*(_QWORD *)(v3 + 64 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
  {
    v9 = *(_QWORD *)(v3 + 48);
    v10 = (_QWORD *)(v9 + 16 * v6);
    v11 = *v10 == a1 && v10[1] == a2;
    if (!v11 && (sub_23D66C84C() & 1) == 0)
    {
      v12 = ~v5;
      do
      {
        v6 = (v6 + 1) & v12;
        if (((*(_QWORD *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) == 0)
          break;
        v13 = (_QWORD *)(v9 + 16 * v6);
        v14 = *v13 == a1 && v13[1] == a2;
      }
      while (!v14 && (sub_23D66C84C() & 1) == 0);
    }
  }
  return v6;
}

uint64_t sub_23D5DF67C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v4 = -1 << *(_BYTE *)(v3 + 32);
  v5 = a3 & ~v4;
  if (((*(_QWORD *)(v3 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
    __asm { BR              X8 }
  return a3 & ~v4;
}

unint64_t sub_23D5E0040(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  void *v6;
  id v7;
  char v8;
  uint64_t v9;
  id v10;
  char v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  i = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0)
  {
    type metadata accessor for CFString(0);
    v6 = *(void **)(*(_QWORD *)(v2 + 48) + 8 * i);
    sub_23D5AE928(&qword_256C79950, (uint64_t (*)(uint64_t))type metadata accessor for CFString, (uint64_t)&unk_23D66DDD0);
    v7 = v6;
    v8 = sub_23D66BE2C();

    if ((v8 & 1) == 0)
    {
      v9 = ~v4;
      for (i = (i + 1) & v9; ((*(_QWORD *)(v3 + ((i >> 3) & 0xFFFFFFFFFFFFF8)) >> i) & 1) != 0; i = (i + 1) & v9)
      {
        v10 = *(id *)(*(_QWORD *)(v2 + 48) + 8 * i);
        v11 = sub_23D66BE2C();

        if ((v11 & 1) != 0)
          break;
      }
    }
  }
  return i;
}

unint64_t sub_23D5E0180(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  BOOL v10;
  BOOL v11;

  v3 = v2 + 64;
  v4 = -1 << *(_BYTE *)(v2 + 32);
  v5 = a2 & ~v4;
  if (((*(_QWORD *)(v2 + 64 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0)
  {
    v7 = ~v4;
    v8 = *(_QWORD *)(v2 + 48);
    do
    {
      v9 = *(_QWORD **)(v8 + 8 * v5);
      v10 = v9[2] == a1[2] && v9[3] == a1[3];
      if (v10 || (sub_23D66C84C() & 1) != 0)
      {
        v11 = v9[4] == a1[4] && v9[5] == a1[5];
        if (v11 || (sub_23D66C84C() & 1) != 0)
          break;
      }
      v5 = (v5 + 1) & v7;
    }
    while (((*(_QWORD *)(v3 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8)) >> v5) & 1) != 0);
  }
  return v5;
}

unint64_t sub_23D5E0250(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  char v7;
  _BYTE v9[40];

  v3 = -1 << *(_BYTE *)(v2 + 32);
  v4 = a2 & ~v3;
  if (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0)
  {
    v6 = ~v3;
    do
    {
      sub_23D5F1164(*(_QWORD *)(v2 + 48) + 40 * v4, (uint64_t)v9);
      v7 = MEMORY[0x242635FE0](v9, a1);
      sub_23D5F11A0((uint64_t)v9);
      if ((v7 & 1) != 0)
        break;
      v4 = (v4 + 1) & v6;
    }
    while (((*(_QWORD *)(v2 + 64 + ((v4 >> 3) & 0xFFFFFFFFFFFFF8)) >> v4) & 1) != 0);
  }
  return v4;
}

unint64_t sub_23D5E0314(int a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  unint64_t result;
  uint64_t v7;
  uint64_t v8;

  v4 = v2 + 64;
  v5 = -1 << *(_BYTE *)(v2 + 32);
  result = a2 & ~v5;
  if (((*(_QWORD *)(v2 + 64 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0)
  {
    v7 = *(_QWORD *)(v2 + 48);
    if (*(_DWORD *)(v7 + 4 * result) != a1)
    {
      v8 = ~v5;
      for (result = (result + 1) & v8;
            ((*(_QWORD *)(v4 + ((result >> 3) & 0xFFFFFFFFFFFFF8)) >> result) & 1) != 0;
            result = (result + 1) & v8)
      {
        if (*(_DWORD *)(v7 + 4 * result) == a1)
          break;
      }
    }
  }
  return result;
}

uint64_t sub_23D5E03B0(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  uint64_t v21;
  char v22;

  v5 = v4;
  v10 = *v4;
  v12 = sub_23D5DF394(a2, a3);
  v13 = *(_QWORD *)(v10 + 16);
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = *(_QWORD *)(v10 + 24);
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = *(_QWORD *)(v18 + 56);
        result = swift_bridgeObjectRelease();
        *(_QWORD *)(v19 + 8 * v12) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_23D666AA8();
      goto LABEL_7;
    }
    sub_23D66476C(v15, a4 & 1);
    v21 = sub_23D5DF394(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_23D66684C(v12, a2, a3, a1, v18);
      return sub_23D5AFA60(a2, a3);
    }
  }
  result = sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5E04E0(uint64_t a1, _QWORD *a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t result;
  unint64_t v19;
  char v20;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_23D5DF4A4(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
      {
LABEL_8:
        v17 = v16[7];
        result = swift_release();
        *(_QWORD *)(v17 + 8 * v10) = a1;
        return result;
      }
      goto LABEL_11;
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_23D666C6C();
      goto LABEL_7;
    }
    sub_23D664AA0(v13, a3 & 1);
    v19 = sub_23D5DF4A4(a2);
    if ((v14 & 1) == (v20 & 1))
    {
      v10 = v19;
      v16 = *v4;
      if ((v14 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_23D666898(v10, (uint64_t)a2, a1, v16);
      return swift_retain();
    }
  }
  type metadata accessor for SimPCSIDSet();
  result = sub_23D66C894();
  __break(1u);
  return result;
}

_OWORD *sub_23D5E05FC(_OWORD *a1, uint64_t a2, uint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  _OWORD *v19;
  _OWORD *result;
  unint64_t v21;
  char v22;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_23D5DF330(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
      {
LABEL_8:
        v19 = (_OWORD *)(v18[7] + 32 * v12);
        __swift_destroy_boxed_opaque_existential_1((uint64_t)v19);
        return sub_23D5F1150(a1, v19);
      }
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_23D666E14();
      goto LABEL_7;
    }
    sub_23D664DEC(v15, a4 & 1);
    v21 = sub_23D5DF330(a2, a3);
    if ((v16 & 1) == (v22 & 1))
    {
      v12 = v21;
      v18 = *v5;
      if ((v16 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      sub_23D6668E0(v12, a2, a3, a1, v18);
      return (_OWORD *)swift_bridgeObjectRetain();
    }
  }
  result = (_OWORD *)sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5E072C(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  return sub_23D5E087C(a1, a2, a3, a4, (void (*)(void))sub_23D666FF8, (void (*)(void))sub_23D6650E8, type metadata accessor for GroupMembership.MemberProperties, (void (*)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))sub_23D666948);
}

uint64_t *sub_23D5E0750(_OWORD *a1, uint64_t a2, unint64_t a3, char a4)
{
  _QWORD *v4;
  _QWORD **v5;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  _BOOL8 v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *result;
  uint64_t v20;
  char v21;

  v5 = (_QWORD **)v4;
  v10 = (_QWORD *)*v4;
  v12 = sub_23D5DF394(a2, a3);
  v13 = v10[2];
  v14 = (v11 & 1) == 0;
  v15 = v13 + v14;
  if (__OFADD__(v13, v14))
  {
    __break(1u);
  }
  else
  {
    v16 = v11;
    v17 = v10[3];
    if (v17 >= v15 && (a4 & 1) != 0)
    {
LABEL_7:
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_23D5F1708(a1, (uint64_t *)(v18[7] + 48 * v12));
      goto LABEL_11;
    }
    if (v17 >= v15 && (a4 & 1) == 0)
    {
      sub_23D66708C();
      goto LABEL_7;
    }
    sub_23D6650FC(v15, a4 & 1);
    v20 = sub_23D5DF394(a2, a3);
    if ((v16 & 1) == (v21 & 1))
    {
      v12 = v20;
      v18 = *v5;
      if ((v16 & 1) != 0)
        return sub_23D5F1708(a1, (uint64_t *)(v18[7] + 48 * v12));
LABEL_11:
      sub_23D666954(v12, a2, a3, a1, v18);
      return (uint64_t *)sub_23D5AFA60(a2, a3);
    }
  }
  result = (uint64_t *)sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5E087C(uint64_t a1, uint64_t a2, unint64_t a3, char a4, void (*a5)(void), void (*a6)(void), uint64_t (*a7)(_QWORD), void (*a8)(uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))
{
  uint64_t *v8;
  uint64_t *v11;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t result;
  uint64_t v28;
  char v29;

  v11 = v8;
  v16 = *v8;
  v18 = sub_23D5DF394(a2, a3);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
  }
  else
  {
    v22 = v17;
    v23 = *(_QWORD *)(v16 + 24);
    if (v23 >= v21 && (a4 & 1) != 0)
    {
LABEL_7:
      v24 = *v11;
      if ((v22 & 1) != 0)
      {
LABEL_8:
        v25 = *(_QWORD *)(v24 + 56);
        v26 = a7(0);
        return sub_23D5F1744(a1, v25 + *(_QWORD *)(*(_QWORD *)(v26 - 8) + 72) * v18, a7);
      }
      goto LABEL_11;
    }
    if (v23 >= v21 && (a4 & 1) == 0)
    {
      a5();
      goto LABEL_7;
    }
    a6();
    v28 = sub_23D5DF394(a2, a3);
    if ((v22 & 1) == (v29 & 1))
    {
      v18 = v28;
      v24 = *v11;
      if ((v22 & 1) != 0)
        goto LABEL_8;
LABEL_11:
      a8(v18, a2, a3, a1, v24);
      return sub_23D5AFA60(a2, a3);
    }
  }
  result = sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t *sub_23D5E09E8(_OWORD *a1, unsigned int a2, char a3)
{
  _QWORD *v3;
  _QWORD **v4;
  _QWORD *v8;
  char v9;
  unint64_t v10;
  uint64_t v11;
  _BOOL8 v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *result;
  unint64_t v18;
  char v19;

  v4 = (_QWORD **)v3;
  v8 = (_QWORD *)*v3;
  v10 = sub_23D5DF568(a2);
  v11 = v8[2];
  v12 = (v9 & 1) == 0;
  v13 = v11 + v12;
  if (__OFADD__(v11, v12))
  {
    __break(1u);
  }
  else
  {
    v14 = v9;
    v15 = v8[3];
    if (v15 >= v13 && (a3 & 1) != 0)
    {
LABEL_7:
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_23D5F11D4(a1, (uint64_t *)(v16[7] + (v10 << 6)));
      return (uint64_t *)sub_23D666A54(v10, a2, a1, v16);
    }
    if (v15 >= v13 && (a3 & 1) == 0)
    {
      sub_23D6674E4();
      goto LABEL_7;
    }
    sub_23D665F34(v13, a3 & 1);
    v18 = sub_23D5DF568(a2);
    if ((v14 & 1) == (v19 & 1))
    {
      v10 = v18;
      v16 = *v4;
      if ((v14 & 1) != 0)
        return sub_23D5F11D4(a1, (uint64_t *)(v16[7] + (v10 << 6)));
      return (uint64_t *)sub_23D666A54(v10, a2, a1, v16);
    }
  }
  result = (uint64_t *)sub_23D66C894();
  __break(1u);
  return result;
}

uint64_t sub_23D5E0AF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  int64_t v4;
  int64_t v5;
  _QWORD *isUniquelyReferenced_nonNull_native;
  uint64_t v8;
  unint64_t v9;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  int64_t v14;
  uint64_t result;

  v2 = *(_QWORD *)(a1 + 16);
  v3 = *(_QWORD **)v1;
  v4 = *(_QWORD *)(*(_QWORD *)v1 + 16);
  v5 = v4 + v2;
  if (__OFADD__(v4, v2))
  {
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }
  isUniquelyReferenced_nonNull_native = (_QWORD *)swift_isUniquelyReferenced_nonNull_native();
  if ((_DWORD)isUniquelyReferenced_nonNull_native && v5 <= v3[3] >> 1)
  {
    if (*(_QWORD *)(a1 + 16))
      goto LABEL_5;
    goto LABEL_18;
  }
  if (v4 <= v5)
    v14 = v4 + v2;
  else
    v14 = v4;
  v3 = sub_23D62B638(isUniquelyReferenced_nonNull_native, v14, 1, v3);
  if (!*(_QWORD *)(a1 + 16))
  {
LABEL_18:
    if (!v2)
      goto LABEL_19;
    goto LABEL_21;
  }
LABEL_5:
  v8 = v3[2];
  if ((v3[3] >> 1) - v8 < v2)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }
  v9 = (unint64_t)&v3[2 * v8 + 4];
  if (a1 + 32 < v9 + 16 * v2 && v9 < a1 + 32 + 16 * v2)
    goto LABEL_24;
  swift_arrayInitWithCopy();
  if (!v2)
  {
LABEL_19:
    result = swift_bridgeObjectRelease();
    *(_QWORD *)v1 = v3;
    return result;
  }
  v11 = v3[2];
  v12 = __OFADD__(v11, v2);
  v13 = v11 + v2;
  if (!v12)
  {
    v3[2] = v13;
    goto LABEL_19;
  }
LABEL_23:
  __break(1u);
LABEL_24:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5E0C44(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int64_t v18;
  _QWORD *v19;

  if (*(_QWORD *)(a1 + 16) >= *(_QWORD *)(a2 + 16))
  {
    v19 = (_QWORD *)(a2 + 56);
    v5 = -1 << *(_BYTE *)(a2 + 32);
    if (-v5 < 64)
      v6 = ~(-1 << -(char)v5);
    else
      v6 = -1;
    v7 = v6 & *(_QWORD *)(a2 + 56);
    v18 = (unint64_t)(63 - v5) >> 6;
    v8 = a1 + 56;
    swift_bridgeObjectRetain();
    if (v7)
    {
      v9 = __clz(__rbit64(v7));
      if (!*(_QWORD *)(a1 + 16))
        goto LABEL_27;
      goto LABEL_22;
    }
    if (v18 > 1)
    {
      v10 = v19[1];
      v11 = 1;
      if (v10)
        goto LABEL_21;
      v11 = 2;
      if (v18 > 2)
      {
        v10 = v19[2];
        if (v10)
          goto LABEL_21;
        v11 = 3;
        if (v18 > 3)
        {
          v10 = v19[3];
          if (v10)
            goto LABEL_21;
          v12 = 4;
          if (v18 > 4)
          {
            v10 = v19[4];
            if (v10)
            {
              v11 = 4;
LABEL_21:
              v9 = __clz(__rbit64(v10)) + (v11 << 6);
              if (!*(_QWORD *)(a1 + 16))
              {
LABEL_27:
                v2 = 0;
LABEL_25:
                sub_23D5F165C();
                return v2;
              }
LABEL_22:
              v13 = (uint64_t *)(*(_QWORD *)(a2 + 48) + 16 * v9);
              v15 = *v13;
              v14 = v13[1];
              sub_23D66C8E8();
              sub_23D5AFA60(v15, v14);
              sub_23D5AFA60(v15, v14);
              sub_23D66BDA8();
              sub_23D5DDA20(v15, v14);
              v16 = sub_23D66C90C() & ~(-1 << *(_BYTE *)(a1 + 32));
              if (((*(_QWORD *)(v8 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8)) >> v16) & 1) != 0)
                __asm { BR              X8 }
              sub_23D5DDA20(v15, v14);
              v2 = 0;
              goto LABEL_25;
            }
            while (1)
            {
              v11 = v12 + 1;
              if (__OFADD__(v12, 1))
                __break(1u);
              if (v11 >= v18)
                break;
              v10 = v19[v11];
              ++v12;
              if (v10)
                goto LABEL_21;
            }
          }
        }
      }
    }
    v2 = 1;
    goto LABEL_25;
  }
  return 0;
}

void sub_23D5E17C0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, _QWORD *a5)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  char v19;
  unint64_t v20;
  uint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  char v24;
  uint64_t v25;
  char v26;
  void *v27;
  uint64_t v28;
  id v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t *i;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  char v40;
  uint64_t v41;
  _BOOL8 v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t *v46;
  char v47;
  unint64_t v48;
  unint64_t v49;
  __int128 v51;
  __int128 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v66;

  v6 = -1 << *(_BYTE *)(a1 + 32);
  v7 = ~v6;
  v8 = *(_QWORD *)(a1 + 64);
  v9 = -v6;
  v59 = a1;
  v60 = a1 + 64;
  if (v9 < 64)
    v10 = ~(-1 << v9);
  else
    v10 = -1;
  v61 = v7;
  v62 = 0;
  v63 = v10 & v8;
  v64 = a2;
  v65 = a3;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_23D5E5F94(&v52);
  v11 = *((_QWORD *)&v52 + 1);
  if (*((_QWORD *)&v52 + 1) >> 60 == 15)
  {
LABEL_5:
    swift_release();
    swift_bridgeObjectRelease();
    sub_23D5F165C();
    swift_release();
    return;
  }
  v47 = a4;
  v12 = v52;
  v14 = v53;
  v13 = v54;
  v51 = v52;
  v16 = v55;
  v15 = v56;
  v17 = v57;
  v49 = v58;
  v18 = (_QWORD *)*a5;
  v20 = sub_23D5DF394(v52, *((unint64_t *)&v52 + 1));
  v21 = v18[2];
  v22 = (v19 & 1) == 0;
  v23 = v21 + v22;
  if (__OFADD__(v21, v22))
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
  v24 = v19;
  if (v18[3] >= v23)
  {
    if ((v47 & 1) != 0)
    {
      if ((v19 & 1) != 0)
        goto LABEL_13;
    }
    else
    {
      v48 = v20;
      sub_23D66708C();
      v20 = v48;
      if ((v24 & 1) != 0)
        goto LABEL_13;
    }
LABEL_16:
    v30 = (_QWORD *)*a5;
    *(_QWORD *)(*a5 + 8 * (v20 >> 6) + 64) |= 1 << v20;
    v31 = (uint64_t *)(v30[6] + 16 * v20);
    *v31 = v12;
    v31[1] = v11;
    for (i = (uint64_t *)(v30[7] + 48 * v20); ; i = (uint64_t *)(v30[7] + 48 * v39))
    {
      *i = v14;
      i[1] = v13;
      i[2] = v16;
      i[3] = v15;
      i[4] = v17;
      i[5] = v49;
      v33 = v30[2];
      v34 = __OFADD__(v33, 1);
      v35 = v33 + 1;
      if (v34)
        break;
      v30[2] = v35;
      sub_23D5E5F94(&v52);
      v36 = *((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1) >> 60 == 15)
        goto LABEL_5;
      v37 = v52;
      v14 = v53;
      v13 = v54;
      v51 = v52;
      v16 = v55;
      v15 = v56;
      v17 = v57;
      v49 = v58;
      v38 = (_QWORD *)*a5;
      v39 = sub_23D5DF394(v52, *((unint64_t *)&v52 + 1));
      v41 = v38[2];
      v42 = (v40 & 1) == 0;
      v34 = __OFADD__(v41, v42);
      v43 = v41 + v42;
      if (v34)
        goto LABEL_24;
      v44 = v40;
      if (v38[3] < v43)
      {
        sub_23D6650FC(v43, 1);
        v39 = sub_23D5DF394(v37, v36);
        if ((v44 & 1) != (v45 & 1))
          goto LABEL_26;
      }
      if ((v44 & 1) != 0)
        goto LABEL_13;
      v30 = (_QWORD *)*a5;
      *(_QWORD *)(*a5 + 8 * (v39 >> 6) + 64) |= 1 << v39;
      v46 = (uint64_t *)(v30[6] + 16 * v39);
      *v46 = v37;
      v46[1] = v36;
    }
    goto LABEL_25;
  }
  sub_23D6650FC(v23, v47 & 1);
  v25 = sub_23D5DF394(v12, v11);
  if ((v24 & 1) != (v26 & 1))
  {
LABEL_26:
    sub_23D66C894();
    __break(1u);
    goto LABEL_27;
  }
  v20 = v25;
  if ((v24 & 1) == 0)
    goto LABEL_16;
LABEL_13:
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  v27 = (void *)swift_allocError();
  *(_WORD *)v28 = 331;
  *(_OWORD *)(v28 + 8) = xmmword_23D66E4A0;
  *(_QWORD *)(v28 + 24) = 0x800000023D677D80;
  *(_QWORD *)(v28 + 32) = 0xD000000000000052;
  *(_QWORD *)(v28 + 40) = 0x800000023D676EF0;
  swift_willThrow();
  v66 = v27;
  v29 = v27;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
  if ((swift_dynamicCast() & 1) == 0)
  {
    swift_release();
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v14, v13);
    sub_23D5DDA20(v16, v15);
    sub_23D5DDA20(v17, v49);
    sub_23D5DDA20(v51, *((unint64_t *)&v51 + 1));
    sub_23D5F165C();
    swift_release();

    return;
  }
LABEL_27:
  sub_23D66C630();
  sub_23D66C3D8();
  sub_23D66C6D8();
  sub_23D66C3D8();
  sub_23D66C720();
  __break(1u);
}

uint64_t sub_23D5E1C88(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  int v28;
  int v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  __int128 *v33;
  __int128 v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char v43;
  char v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  char v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  BOOL v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  unint64_t v94;
  char *v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  uint64_t v99;
  char *v100;
  unint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  char *v114;
  uint64_t v115;

  v2 = v1;
  v4 = a1[1];
  result = sub_23D66C834();
  if (result >= v4)
  {
    if (v4 < 0)
      goto LABEL_132;
    if (v4)
      return sub_23D5E4288(0, v4, 1, a1);
    return result;
  }
  if (v4 >= 0)
    v6 = v4;
  else
    v6 = v4 + 1;
  if (v4 < -1)
    goto LABEL_140;
  v111 = v4;
  v106 = result;
  v104 = a1;
  if (v4 < 2)
  {
    v8 = MEMORY[0x24BEE4AF8];
    v114 = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v4 != 1)
    {
      v12 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v11 = (char *)MEMORY[0x24BEE4AF8];
LABEL_98:
      v108 = v8;
      if (v12 >= 2)
      {
        v96 = *v104;
        do
        {
          v97 = v12 - 2;
          if (v12 < 2)
            goto LABEL_127;
          if (!v96)
            goto LABEL_139;
          v98 = *(_QWORD *)&v11[16 * v97 + 32];
          v99 = *(_QWORD *)&v11[16 * v12 + 24];
          sub_23D5E4C4C((uint64_t *)(v96 + 16 * v98), (uint64_t *)(v96 + 16 * *(_QWORD *)&v11[16 * v12 + 16]), v96 + 16 * v99, v114);
          if (v2)
            break;
          if (v99 < v98)
            goto LABEL_128;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v11 = sub_23D644818((uint64_t)v11);
          if (v97 >= *((_QWORD *)v11 + 2))
            goto LABEL_129;
          v100 = &v11[16 * v97 + 32];
          *(_QWORD *)v100 = v98;
          *((_QWORD *)v100 + 1) = v99;
          v101 = *((_QWORD *)v11 + 2);
          if (v12 > v101)
            goto LABEL_130;
          memmove(&v11[16 * v12 + 16], &v11[16 * v12 + 32], 16 * (v101 - v12));
          *((_QWORD *)v11 + 2) = v101 - 1;
          v12 = v101 - 1;
        }
        while (v101 > 2);
      }
LABEL_109:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v108 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    v7 = v6 >> 1;
    v8 = sub_23D66C4E0();
    *(_QWORD *)(v8 + 16) = v7;
    v4 = v111;
    v114 = (char *)(v8 + 32);
  }
  v108 = v8;
  v9 = 0;
  v10 = *a1;
  v105 = *a1 + 40;
  v103 = *a1 - 16;
  v11 = (char *)MEMORY[0x24BEE4AF8];
  v115 = *a1;
  while (1)
  {
    v13 = v9 + 1;
    v110 = v9;
    if (v9 + 1 < v4)
    {
      v107 = v2;
      v14 = (uint64_t *)(v10 + 16 * v13);
      v16 = *v14;
      v15 = v14[1];
      v17 = (uint64_t *)(v10 + 16 * v9);
      v18 = *v17;
      v19 = v17[1];
      sub_23D5AFA60(v16, v15);
      sub_23D5AFA60(v18, v19);
      sub_23D617FF0(v18, v19, v16, v15);
      v21 = v20;
      sub_23D5DDA20(v18, v19);
      sub_23D5DDA20(v16, v15);
      v13 = v9 + 2;
      if (v9 + 2 < v4)
      {
        v22 = (unint64_t *)(v105 + 16 * v9);
        while (1)
        {
          v23 = v13;
          v24 = *(v22 - 1);
          v25 = *v22;
          v26 = *(v22 - 3);
          v27 = *(v22 - 2);
          sub_23D5AFA60(v24, *v22);
          sub_23D5AFA60(v26, v27);
          sub_23D617FF0(v26, v27, v24, v25);
          v29 = v28;
          sub_23D5DDA20(v26, v27);
          sub_23D5DDA20(v24, v25);
          if (((v21 ^ v29) & 1) != 0)
            break;
          v22 += 2;
          v13 = v23 + 1;
          v4 = v111;
          if (v111 == v23 + 1)
          {
            v13 = v111;
            goto LABEL_22;
          }
        }
        v4 = v111;
        v13 = v23;
LABEL_22:
        v9 = v110;
      }
      v2 = v107;
      v10 = v115;
      if ((v21 & 1) != 0)
      {
        if (v13 < v9)
          goto LABEL_133;
        if (v9 < v13)
        {
          v30 = (__int128 *)(v103 + 16 * v13);
          v31 = v13;
          v32 = v9;
          v33 = (__int128 *)(v115 + 16 * v9);
          do
          {
            if (v32 != --v31)
            {
              if (!v115)
                goto LABEL_138;
              v34 = *v33;
              *v33 = *v30;
              *v30 = v34;
            }
            ++v32;
            --v30;
            ++v33;
          }
          while (v32 < v31);
        }
      }
    }
    if (v13 < v4)
    {
      if (__OFSUB__(v13, v9))
        goto LABEL_131;
      if (v13 - v9 < v106)
        break;
    }
LABEL_49:
    if (v13 < v9)
      goto LABEL_126;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v11 = sub_23D6442E4(0, *((_QWORD *)v11 + 2) + 1, 1, v11);
    v46 = *((_QWORD *)v11 + 2);
    v45 = *((_QWORD *)v11 + 3);
    v12 = v46 + 1;
    v10 = v115;
    v113 = v13;
    if (v46 >= v45 >> 1)
    {
      v95 = sub_23D6442E4((char *)(v45 > 1), v46 + 1, 1, v11);
      v10 = v115;
      v11 = v95;
    }
    *((_QWORD *)v11 + 2) = v12;
    v47 = v11 + 32;
    v48 = &v11[16 * v46 + 32];
    *(_QWORD *)v48 = v9;
    *((_QWORD *)v48 + 1) = v113;
    if (v46)
    {
      while (1)
      {
        v49 = v12 - 1;
        if (v12 >= 4)
        {
          v54 = &v47[16 * v12];
          v55 = *((_QWORD *)v54 - 8);
          v56 = *((_QWORD *)v54 - 7);
          v60 = __OFSUB__(v56, v55);
          v57 = v56 - v55;
          if (v60)
            goto LABEL_115;
          v59 = *((_QWORD *)v54 - 6);
          v58 = *((_QWORD *)v54 - 5);
          v60 = __OFSUB__(v58, v59);
          v52 = v58 - v59;
          v53 = v60;
          if (v60)
            goto LABEL_116;
          v61 = v12 - 2;
          v62 = &v47[16 * v12 - 32];
          v64 = *(_QWORD *)v62;
          v63 = *((_QWORD *)v62 + 1);
          v60 = __OFSUB__(v63, v64);
          v65 = v63 - v64;
          if (v60)
            goto LABEL_118;
          v60 = __OFADD__(v52, v65);
          v66 = v52 + v65;
          if (v60)
            goto LABEL_121;
          if (v66 >= v57)
          {
            v84 = &v47[16 * v49];
            v86 = *(_QWORD *)v84;
            v85 = *((_QWORD *)v84 + 1);
            v60 = __OFSUB__(v85, v86);
            v87 = v85 - v86;
            if (v60)
              goto LABEL_125;
            v77 = v52 < v87;
            goto LABEL_86;
          }
        }
        else
        {
          if (v12 != 3)
          {
            v78 = *((_QWORD *)v11 + 4);
            v79 = *((_QWORD *)v11 + 5);
            v60 = __OFSUB__(v79, v78);
            v71 = v79 - v78;
            v72 = v60;
            goto LABEL_80;
          }
          v51 = *((_QWORD *)v11 + 4);
          v50 = *((_QWORD *)v11 + 5);
          v60 = __OFSUB__(v50, v51);
          v52 = v50 - v51;
          v53 = v60;
        }
        if ((v53 & 1) != 0)
          goto LABEL_117;
        v61 = v12 - 2;
        v67 = &v47[16 * v12 - 32];
        v69 = *(_QWORD *)v67;
        v68 = *((_QWORD *)v67 + 1);
        v70 = __OFSUB__(v68, v69);
        v71 = v68 - v69;
        v72 = v70;
        if (v70)
          goto LABEL_120;
        v73 = &v47[16 * v49];
        v75 = *(_QWORD *)v73;
        v74 = *((_QWORD *)v73 + 1);
        v60 = __OFSUB__(v74, v75);
        v76 = v74 - v75;
        if (v60)
          goto LABEL_123;
        if (__OFADD__(v71, v76))
          goto LABEL_124;
        if (v71 + v76 >= v52)
        {
          v77 = v52 < v76;
LABEL_86:
          if (v77)
            v49 = v61;
          goto LABEL_88;
        }
LABEL_80:
        if ((v72 & 1) != 0)
          goto LABEL_119;
        v80 = &v47[16 * v49];
        v82 = *(_QWORD *)v80;
        v81 = *((_QWORD *)v80 + 1);
        v60 = __OFSUB__(v81, v82);
        v83 = v81 - v82;
        if (v60)
          goto LABEL_122;
        if (v83 < v71)
          goto LABEL_14;
LABEL_88:
        v88 = v49 - 1;
        if (v49 - 1 >= v12)
        {
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
          goto LABEL_135;
        }
        if (!v10)
          goto LABEL_137;
        v89 = v11;
        v90 = &v47[16 * v88];
        v91 = *(_QWORD *)v90;
        v92 = &v47[16 * v49];
        v93 = *((_QWORD *)v92 + 1);
        sub_23D5E4C4C((uint64_t *)(v10 + 16 * *(_QWORD *)v90), (uint64_t *)(v10 + 16 * *(_QWORD *)v92), v10 + 16 * v93, v114);
        if (v2)
          goto LABEL_109;
        if (v93 < v91)
          goto LABEL_112;
        if (v49 > *((_QWORD *)v89 + 2))
          goto LABEL_113;
        *(_QWORD *)v90 = v91;
        *(_QWORD *)&v47[16 * v88 + 8] = v93;
        v94 = *((_QWORD *)v89 + 2);
        if (v49 >= v94)
          goto LABEL_114;
        v11 = v89;
        v12 = v94 - 1;
        memmove(&v47[16 * v49], v92 + 16, 16 * (v94 - 1 - v49));
        *((_QWORD *)v11 + 2) = v94 - 1;
        v10 = v115;
        if (v94 <= 2)
          goto LABEL_14;
      }
    }
    v12 = 1;
LABEL_14:
    v4 = v111;
    v9 = v113;
    v8 = v108;
    if (v113 >= v111)
      goto LABEL_98;
  }
  v35 = v9 + v106;
  if (__OFADD__(v9, v106))
    goto LABEL_134;
  if (v35 >= v4)
    v35 = v4;
  if (v35 >= v9)
  {
    if (v13 != v35)
    {
      v102 = v11;
      v36 = (uint64_t *)(v10 + 16 * v13);
      v109 = v35;
      do
      {
        v37 = (uint64_t *)(v10 + 16 * v13);
        v38 = *v37;
        v39 = v37[1];
        v112 = v36;
        while (1)
        {
          v40 = v13;
          v41 = *(v36 - 2);
          v42 = *(v36 - 1);
          sub_23D5AFA60(v38, v39);
          sub_23D5AFA60(v41, v42);
          sub_23D617FF0(v41, v42, v38, v39);
          v44 = v43;
          sub_23D5DDA20(v41, v42);
          sub_23D5DDA20(v38, v39);
          if ((v44 & 1) == 0)
            break;
          v10 = v115;
          if (!v115)
            goto LABEL_136;
          v13 = v40;
          v38 = *v36;
          v39 = v36[1];
          *(_OWORD *)v36 = *((_OWORD *)v36 - 1);
          *(v36 - 1) = v39;
          *(v36 - 2) = v38;
          v36 -= 2;
          if (v40 == ++v9)
            goto LABEL_42;
        }
        v10 = v115;
        v13 = v40;
LABEL_42:
        ++v13;
        v36 = v112 + 2;
        v9 = v110;
      }
      while (v13 != v109);
      v13 = v109;
      v11 = v102;
    }
    goto LABEL_49;
  }
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  __break(1u);
LABEL_139:
  __break(1u);
LABEL_140:
  result = sub_23D66C714();
  __break(1u);
  return result;
}

uint64_t sub_23D5E2408(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  uint64_t v22;
  int64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  int64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int64_t v56;
  uint64_t v57;
  unint64_t v58;
  int64_t v59;
  uint64_t v60;
  uint64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  unint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  unint64_t v96;
  char *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  uint64_t v104;
  BOOL v105;
  uint64_t v106;
  char v107;
  char *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  BOOL v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  char *v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  uint64_t v126;
  char *v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  int64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unint64_t v145;
  _QWORD *v146;
  uint64_t v147;
  uint64_t v148;
  int64_t v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t *v152;
  uint64_t v153;
  uint64_t v154;
  unint64_t v155;
  uint64_t v156;
  uint64_t v157;

  v2 = v1;
  v147 = type metadata accessor for UserKeyingInfo(0);
  v4 = *(_QWORD *)(v147 - 8);
  v5 = MEMORY[0x24BDAC7A8](v147);
  v142 = (uint64_t)&v136 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v154 = (uint64_t)&v136 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v151 = (uint64_t *)((char *)&v136 - v10);
  MEMORY[0x24BDAC7A8](v9);
  v152 = (uint64_t *)((char *)&v136 - v11);
  v12 = a1[1];
  result = sub_23D66C834();
  if (result >= v12)
  {
    if (v12 < 0)
      goto LABEL_141;
    if (v12)
      return sub_23D5E43A0(0, v12, 1, a1);
    return result;
  }
  if (v12 >= 0)
    v14 = v12;
  else
    v14 = v12 + 1;
  if (v12 < -1)
    goto LABEL_149;
  v139 = result;
  if (v12 < 2)
  {
    v18 = MEMORY[0x24BEE4AF8];
    v145 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    if (v12 != 1)
    {
      v21 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v20 = (char *)MEMORY[0x24BEE4AF8];
LABEL_106:
      v138 = v18;
      if (v21 >= 2)
      {
        v130 = *a1;
        do
        {
          v131 = v21 - 2;
          if (v21 < 2)
            goto LABEL_136;
          if (!v130)
            goto LABEL_148;
          v132 = *(_QWORD *)&v20[16 * v131 + 32];
          v133 = *(_QWORD *)&v20[16 * v21 + 24];
          sub_23D5E4F70(v130 + *(_QWORD *)(v4 + 72) * v132, v130 + *(_QWORD *)(v4 + 72) * *(_QWORD *)&v20[16 * v21 + 16], v130 + *(_QWORD *)(v4 + 72) * v133, v145);
          if (v2)
            break;
          if (v133 < v132)
            goto LABEL_137;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v20 = sub_23D644818((uint64_t)v20);
          if (v131 >= *((_QWORD *)v20 + 2))
            goto LABEL_138;
          v134 = &v20[16 * v131 + 32];
          *(_QWORD *)v134 = v132;
          *((_QWORD *)v134 + 1) = v133;
          v135 = *((_QWORD *)v20 + 2);
          if (v21 > v135)
            goto LABEL_139;
          memmove(&v20[16 * v21 + 16], &v20[16 * v21 + 32], 16 * (v135 - v21));
          *((_QWORD *)v20 + 2) = v135 - 1;
          v21 = v135 - 1;
        }
        while (v135 > 2);
      }
LABEL_117:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v138 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v144 = v4;
    v138 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v15 = v14 >> 1;
    v16 = sub_23D66C4E0();
    *(_QWORD *)(v16 + 16) = v15;
    v17 = *(unsigned __int8 *)(v4 + 80);
    v138 = v16;
    v144 = v4;
    v145 = v16 + ((v17 + 32) & ~v17);
  }
  v19 = 0;
  v20 = (char *)MEMORY[0x24BEE4AF8];
  v146 = a1;
  while (1)
  {
    v22 = v19;
    v23 = v12;
    v24 = v19 + 1;
    v143 = v19;
    if (v19 + 1 >= v23)
    {
      v38 = v19 + 1;
    }
    else
    {
      v148 = *a1;
      v25 = v148;
      v26 = *(_QWORD *)(v144 + 72);
      v157 = v26;
      v27 = v152;
      sub_23D5E7298(v148 + v26 * v24, (uint64_t)v152, type metadata accessor for UserKeyingInfo);
      v28 = v25 + v26 * v22;
      v29 = v151;
      sub_23D5E7298(v28, (uint64_t)v151, type metadata accessor for UserKeyingInfo);
      v30 = *v27;
      v155 = v27[1];
      v31 = *v29;
      v32 = v29[1];
      v33 = v30;
      v153 = v30;
      sub_23D5AFA60(v30, v155);
      sub_23D5AFA60(v31, v32);
      v34 = v33;
      v35 = v155;
      sub_23D617FF0(v31, v32, v34, v155);
      LODWORD(v156) = v36;
      sub_23D5DDA20(v31, v32);
      sub_23D5DDA20(v153, v35);
      v37 = (uint64_t)v29;
      v22 = v143;
      sub_23D5E6950(v37, type metadata accessor for UserKeyingInfo);
      sub_23D5E6950((uint64_t)v152, type metadata accessor for UserKeyingInfo);
      v38 = v22 + 2;
      v155 = v23;
      if (v22 + 2 >= v23)
      {
LABEL_25:
        v23 = v155;
        if ((v156 & 1) != 0)
        {
LABEL_26:
          if (v38 < v22)
            goto LABEL_142;
          if (v22 < v38)
          {
            v140 = v20;
            v48 = 0;
            v49 = v22;
            v50 = v157;
            v51 = v157 * (v38 - 1);
            v52 = v38 * v157;
            v53 = v49;
            v54 = v49 * v157;
            do
            {
              if (v53 != v38 + v48 - 1)
              {
                v56 = v38;
                v57 = v148;
                if (!v148)
                  goto LABEL_147;
                v58 = v148 + v54;
                v156 = v148 + v51;
                sub_23D5E7F64(v148 + v54, v142, type metadata accessor for UserKeyingInfo);
                if (v54 < v51 || v58 >= v57 + v52)
                {
                  v55 = v156;
                  swift_arrayInitWithTakeFrontToBack();
                }
                else
                {
                  v55 = v156;
                  if (v54 != v51)
                    swift_arrayInitWithTakeBackToFront();
                }
                sub_23D5E7F64(v142, v55, type metadata accessor for UserKeyingInfo);
                v38 = v56;
                v50 = v157;
              }
              ++v53;
              --v48;
              v51 -= v50;
              v52 -= v50;
              v54 += v50;
            }
            while (v53 < v38 + v48);
            a1 = v146;
            v20 = v140;
            v22 = v143;
            v23 = v155;
          }
        }
      }
      else
      {
        v137 = v2;
        v140 = v20;
        v39 = v148;
        v149 = v157 * v38;
        v150 = v157 * v24;
        do
        {
          v153 = v38;
          v40 = v152;
          sub_23D5E7298(v39 + v149, (uint64_t)v152, type metadata accessor for UserKeyingInfo);
          v41 = v151;
          sub_23D5E7298(v39 + v150, (uint64_t)v151, type metadata accessor for UserKeyingInfo);
          v42 = *v40;
          v43 = v40[1];
          v44 = *v41;
          v45 = v41[1];
          sub_23D5AFA60(*v40, v43);
          sub_23D5AFA60(v44, v45);
          sub_23D617FF0(v44, v45, v42, v43);
          v47 = v46;
          sub_23D5DDA20(v44, v45);
          sub_23D5DDA20(v42, v43);
          sub_23D5E6950((uint64_t)v41, type metadata accessor for UserKeyingInfo);
          sub_23D5E6950((uint64_t)v40, type metadata accessor for UserKeyingInfo);
          if (((v156 ^ v47) & 1) != 0)
          {
            a1 = v146;
            v20 = v140;
            v2 = v137;
            v38 = v153;
            v22 = v143;
            goto LABEL_25;
          }
          v38 = v153 + 1;
          v39 += v157;
        }
        while (v155 != v153 + 1);
        v23 = v155;
        v38 = v155;
        a1 = v146;
        v20 = v140;
        v2 = v137;
        v22 = v143;
        if ((v156 & 1) != 0)
          goto LABEL_26;
      }
    }
    if (v38 >= v23)
      goto LABEL_57;
    if (__OFSUB__(v38, v22))
      goto LABEL_140;
    if (v38 - v22 >= v139)
      goto LABEL_57;
    if (__OFADD__(v22, v139))
      goto LABEL_143;
    v59 = v22 + v139 >= v23 ? v23 : v22 + v139;
    if (v59 < v22)
      break;
    if (v38 != v59)
    {
      v140 = v20;
      v141 = v59;
      v137 = v2;
      v60 = *(_QWORD *)(v144 + 72);
      v61 = v60 * (v38 - 1);
      v148 = v60;
      v62 = v38 * v60;
      do
      {
        v64 = 0;
        v65 = v143;
        v153 = v38;
        v149 = v62;
        v150 = v61;
        while (1)
        {
          v156 = v65;
          v66 = *a1;
          v155 = v62 + v64;
          v67 = v62 + v64 + v66;
          v68 = v152;
          sub_23D5E7298(v67, (uint64_t)v152, type metadata accessor for UserKeyingInfo);
          v69 = v151;
          sub_23D5E7298(v61 + v64 + v66, (uint64_t)v151, type metadata accessor for UserKeyingInfo);
          v70 = *v68;
          v71 = v68[1];
          v72 = a1;
          v73 = *v69;
          v74 = v69[1];
          sub_23D5AFA60(*v68, v71);
          sub_23D5AFA60(v73, v74);
          sub_23D617FF0(v73, v74, v70, v71);
          LODWORD(v157) = v75;
          sub_23D5DDA20(v73, v74);
          sub_23D5DDA20(v70, v71);
          sub_23D5E6950((uint64_t)v69, type metadata accessor for UserKeyingInfo);
          sub_23D5E6950((uint64_t)v68, type metadata accessor for UserKeyingInfo);
          if ((v157 & 1) == 0)
            break;
          v76 = *v72;
          if (!*v72)
            goto LABEL_145;
          a1 = v72;
          v62 = v149;
          v61 = v150;
          v77 = v76 + v150 + v64;
          sub_23D5E7F64(v76 + v149 + v64, v154, type metadata accessor for UserKeyingInfo);
          swift_arrayInitWithTakeFrontToBack();
          sub_23D5E7F64(v154, v77, type metadata accessor for UserKeyingInfo);
          v64 -= v148;
          v65 = v156 + 1;
          v63 = v153;
          if (v153 == v156 + 1)
            goto LABEL_50;
        }
        a1 = v72;
        v63 = v153;
        v62 = v149;
        v61 = v150;
LABEL_50:
        v38 = v63 + 1;
        v61 += v148;
        v62 += v148;
      }
      while (v38 != v141);
      v38 = v141;
      v2 = v137;
      v20 = v140;
      v22 = v143;
    }
LABEL_57:
    if (v38 < v22)
      goto LABEL_135;
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v153 = v38;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v20 = sub_23D6442E4(0, *((_QWORD *)v20 + 2) + 1, 1, v20);
    v80 = *((_QWORD *)v20 + 2);
    v79 = *((_QWORD *)v20 + 3);
    v21 = v80 + 1;
    if (v80 >= v79 >> 1)
      v20 = sub_23D6442E4((char *)(v79 > 1), v80 + 1, 1, v20);
    *((_QWORD *)v20 + 2) = v21;
    v81 = v20 + 32;
    v82 = &v20[16 * v80 + 32];
    v83 = v153;
    *(_QWORD *)v82 = v143;
    *((_QWORD *)v82 + 1) = v83;
    if (v80)
    {
      while (1)
      {
        v84 = v21 - 1;
        if (v21 >= 4)
        {
          v89 = &v81[16 * v21];
          v90 = *((_QWORD *)v89 - 8);
          v91 = *((_QWORD *)v89 - 7);
          v95 = __OFSUB__(v91, v90);
          v92 = v91 - v90;
          if (v95)
            goto LABEL_124;
          v94 = *((_QWORD *)v89 - 6);
          v93 = *((_QWORD *)v89 - 5);
          v95 = __OFSUB__(v93, v94);
          v87 = v93 - v94;
          v88 = v95;
          if (v95)
            goto LABEL_125;
          v96 = v21 - 2;
          v97 = &v81[16 * v21 - 32];
          v99 = *(_QWORD *)v97;
          v98 = *((_QWORD *)v97 + 1);
          v95 = __OFSUB__(v98, v99);
          v100 = v98 - v99;
          if (v95)
            goto LABEL_127;
          v95 = __OFADD__(v87, v100);
          v101 = v87 + v100;
          if (v95)
            goto LABEL_130;
          if (v101 >= v92)
          {
            v119 = &v81[16 * v84];
            v121 = *(_QWORD *)v119;
            v120 = *((_QWORD *)v119 + 1);
            v95 = __OFSUB__(v120, v121);
            v122 = v120 - v121;
            if (v95)
              goto LABEL_134;
            v112 = v87 < v122;
            goto LABEL_94;
          }
        }
        else
        {
          if (v21 != 3)
          {
            v113 = *((_QWORD *)v20 + 4);
            v114 = *((_QWORD *)v20 + 5);
            v95 = __OFSUB__(v114, v113);
            v106 = v114 - v113;
            v107 = v95;
            goto LABEL_88;
          }
          v86 = *((_QWORD *)v20 + 4);
          v85 = *((_QWORD *)v20 + 5);
          v95 = __OFSUB__(v85, v86);
          v87 = v85 - v86;
          v88 = v95;
        }
        if ((v88 & 1) != 0)
          goto LABEL_126;
        v96 = v21 - 2;
        v102 = &v81[16 * v21 - 32];
        v104 = *(_QWORD *)v102;
        v103 = *((_QWORD *)v102 + 1);
        v105 = __OFSUB__(v103, v104);
        v106 = v103 - v104;
        v107 = v105;
        if (v105)
          goto LABEL_129;
        v108 = &v81[16 * v84];
        v110 = *(_QWORD *)v108;
        v109 = *((_QWORD *)v108 + 1);
        v95 = __OFSUB__(v109, v110);
        v111 = v109 - v110;
        if (v95)
          goto LABEL_132;
        if (__OFADD__(v106, v111))
          goto LABEL_133;
        if (v106 + v111 >= v87)
        {
          v112 = v87 < v111;
LABEL_94:
          if (v112)
            v84 = v96;
          goto LABEL_96;
        }
LABEL_88:
        if ((v107 & 1) != 0)
          goto LABEL_128;
        v115 = &v81[16 * v84];
        v117 = *(_QWORD *)v115;
        v116 = *((_QWORD *)v115 + 1);
        v95 = __OFSUB__(v116, v117);
        v118 = v116 - v117;
        if (v95)
          goto LABEL_131;
        if (v118 < v106)
          goto LABEL_15;
LABEL_96:
        v123 = v84 - 1;
        if (v84 - 1 >= v21)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }
        if (!*v146)
          goto LABEL_146;
        v124 = v20;
        v125 = &v81[16 * v123];
        v126 = *(_QWORD *)v125;
        v127 = &v81[16 * v84];
        v128 = *((_QWORD *)v127 + 1);
        sub_23D5E4F70(*v146 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v125, *v146 + *(_QWORD *)(v144 + 72) * *(_QWORD *)v127, *v146 + *(_QWORD *)(v144 + 72) * v128, v145);
        if (v2)
          goto LABEL_117;
        if (v128 < v126)
          goto LABEL_121;
        if (v84 > *((_QWORD *)v124 + 2))
          goto LABEL_122;
        *(_QWORD *)v125 = v126;
        *(_QWORD *)&v81[16 * v123 + 8] = v128;
        v129 = *((_QWORD *)v124 + 2);
        if (v84 >= v129)
          goto LABEL_123;
        v20 = v124;
        v21 = v129 - 1;
        memmove(&v81[16 * v84], v127 + 16, 16 * (v129 - 1 - v84));
        *((_QWORD *)v124 + 2) = v129 - 1;
        if (v129 <= 2)
          goto LABEL_15;
      }
    }
    v21 = 1;
LABEL_15:
    a1 = v146;
    v12 = v146[1];
    v19 = v153;
    if (v153 >= v12)
    {
      v18 = v138;
      v4 = v144;
      goto LABEL_106;
    }
  }
LABEL_144:
  __break(1u);
LABEL_145:
  __break(1u);
LABEL_146:
  __break(1u);
LABEL_147:
  __break(1u);
LABEL_148:
  __break(1u);
LABEL_149:
  result = sub_23D66C714();
  __break(1u);
  return result;
}

uint64_t sub_23D5E2EFC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t result;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int (*v72)(uint64_t, uint64_t, uint64_t);
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  void (*v78)(uint64_t, uint64_t);
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  uint64_t *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  char v108;
  char *v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  BOOL v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  char *v122;
  uint64_t v123;
  uint64_t v124;
  BOOL v125;
  uint64_t v126;
  char v127;
  char *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  BOOL v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  char *v144;
  char *v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  char *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  unsigned int (*v170)(uint64_t, uint64_t, uint64_t);
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  unint64_t v174;
  void (*v175)(uint64_t, uint64_t);
  uint64_t v176;
  uint64_t v177;
  unint64_t v178;
  unint64_t v179;
  char v180;
  char v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  unint64_t v188;
  uint64_t v189;
  os_log_type_t v190;
  NSObject *v191;
  os_log_type_t v192;
  uint8_t *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  os_log_type_t v198;
  NSObject *v199;
  os_log_type_t v200;
  uint8_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  char *v206;
  uint64_t v207;
  char *v208;
  char *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  char *v216;
  uint64_t v217;
  uint64_t v218;
  char *v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  char *v228;
  char *v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t *v238;

  v2 = v1;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v217 = (uint64_t)&v203 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = MEMORY[0x24BDAC7A8](v5);
  v218 = (uint64_t)&v203 - v8;
  v9 = MEMORY[0x24BDAC7A8](v7);
  v220 = (uint64_t)&v203 - v10;
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v203 - v11;
  v13 = type metadata accessor for GroupMembership.MemberProperties(0);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v16 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = MEMORY[0x24BDAC7A8](v14);
  v227 = (uint64_t)&v203 - v18;
  v19 = MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v203 - v20;
  MEMORY[0x24BDAC7A8](v19);
  v232 = (uint64_t)&v203 - v22;
  v234 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v237 = *(_QWORD *)(v234 - 8);
  v23 = MEMORY[0x24BDAC7A8](v234);
  v25 = (char *)&v203 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = MEMORY[0x24BDAC7A8](v23);
  v223 = (uint64_t)&v203 - v27;
  v28 = MEMORY[0x24BDAC7A8](v26);
  v226 = (uint64_t)&v203 - v29;
  v30 = MEMORY[0x24BDAC7A8](v28);
  v225 = (uint64_t)&v203 - v31;
  v32 = MEMORY[0x24BDAC7A8](v30);
  v229 = (char *)&v203 - v33;
  v34 = MEMORY[0x24BDAC7A8](v32);
  v231 = (uint64_t)&v203 - v35;
  v36 = MEMORY[0x24BDAC7A8](v34);
  v230 = (uint64_t)&v203 - v37;
  v38 = MEMORY[0x24BDAC7A8](v36);
  v40 = (char *)&v203 - v39;
  MEMORY[0x24BDAC7A8](v38);
  v207 = (uint64_t)&v203 - v41;
  v238 = a1;
  v42 = a1[1];
  result = sub_23D66C834();
  if (result >= v42)
  {
    if ((v42 & 0x8000000000000000) == 0)
    {
      if (v42)
        return sub_23D5E4620(0, v42, 1, v238);
      return result;
    }
    goto LABEL_166;
  }
  v205 = result;
  if (v42 >= 0)
    v44 = v42;
  else
    v44 = v42 + 1;
  if (v42 < -1)
    goto LABEL_176;
  v228 = v21;
  v216 = v12;
  v224 = v13;
  v206 = v40;
  if (v42 < 2)
  {
    v48 = (char *)MEMORY[0x24BEE4AF8];
    v235 = MEMORY[0x24BEE4AF8]
         + ((*(unsigned __int8 *)(v237 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80));
    v211 = MEMORY[0x24BEE4AF8];
    if (v42 == 1)
    {
      v209 = v25;
      v208 = v16;
      goto LABEL_13;
    }
    v100 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
LABEL_115:
    if (v100 < 2)
    {
LABEL_126:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v211 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v184 = *v238;
    while (1)
    {
      v185 = v100 - 2;
      if (v100 < 2)
        break;
      if (!v184)
        goto LABEL_175;
      v13 = *(_QWORD *)&v48[16 * v185 + 32];
      v186 = *(_QWORD *)&v48[16 * v100 + 24];
      sub_23D5E54F0(v184 + *(_QWORD *)(v237 + 72) * v13, v184 + *(_QWORD *)(v237 + 72) * *(_QWORD *)&v48[16 * v100 + 16], v184 + *(_QWORD *)(v237 + 72) * v186, v235);
      if (v2)
        goto LABEL_113;
      if (v186 < v13)
        goto LABEL_162;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        v48 = sub_23D644818((uint64_t)v48);
      if (v185 >= *((_QWORD *)v48 + 2))
        goto LABEL_163;
      v187 = (uint64_t *)&v48[16 * v185 + 32];
      *v187 = v13;
      v187[1] = v186;
      v188 = *((_QWORD *)v48 + 2);
      if (v100 > v188)
        goto LABEL_164;
      v13 = v188 - 1;
      memmove(&v48[16 * v100 + 16], &v48[16 * v100 + 32], 16 * (v188 - v100));
      *((_QWORD *)v48 + 2) = v188 - 1;
      v100 = v188 - 1;
      if (v188 <= 2)
        goto LABEL_126;
    }
LABEL_161:
    __break(1u);
LABEL_162:
    __break(1u);
LABEL_163:
    __break(1u);
LABEL_164:
    __break(1u);
LABEL_165:
    __break(1u);
LABEL_166:
    __break(1u);
LABEL_167:
    __break(1u);
LABEL_168:
    __break(1u);
LABEL_169:
    __break(1u);
LABEL_170:
    __break(1u);
    goto LABEL_171;
  }
  v209 = v25;
  v208 = v16;
  v45 = v44 >> 1;
  v46 = sub_23D66C4E0();
  *(_QWORD *)(v46 + 16) = v45;
  v47 = *(unsigned __int8 *)(v237 + 80);
  v211 = v46;
  v235 = v46 + ((v47 + 32) & ~v47);
LABEL_13:
  v49 = 0;
  v48 = (char *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    v13 = v49;
    v50 = v49 + 1;
    v219 = v48;
    v215 = v49;
    if (v49 + 1 >= v42)
    {
      v56 = v49 + 1;
      goto LABEL_51;
    }
    v51 = *v238;
    v52 = *(_QWORD *)(v237 + 72);
    v53 = v207;
    sub_23D5AEF48(*v238 + v52 * v50, v207, &qword_256C799A0);
    v210 = v51;
    v233 = v52;
    v54 = v51 + v52 * v13;
    v55 = (uint64_t)v206;
    sub_23D5AEF48(v54, (uint64_t)v206, &qword_256C799A0);
    LODWORD(v221) = sub_23D5D57A0(v53, v55);
    if (v2)
    {
      sub_23D5AEF8C(v55, &qword_256C799A0);
      sub_23D5AEF8C(v53, &qword_256C799A0);
LABEL_113:
      swift_bridgeObjectRelease();
      v13 = v211;
      goto LABEL_141;
    }
    sub_23D5AEF8C(v55, &qword_256C799A0);
    sub_23D5AEF8C(v53, &qword_256C799A0);
    v56 = v13 + 2;
    v57 = v211;
    v214 = v42;
    if (v13 + 2 >= v42)
      goto LABEL_25;
    v204 = 0;
    v213 = v233 * v50;
    v58 = v210;
    v212 = v233 * v56;
    v59 = (uint64_t)v216;
    while (1)
    {
      v236 = v56;
      v60 = v230;
      sub_23D5AEF48(v58 + v212, v230, &qword_256C799A0);
      v222 = v58;
      v61 = v231;
      sub_23D5AEF48(v58 + v213, v231, &qword_256C799A0);
      v62 = v234;
      v63 = *(int *)(v234 + 48);
      v64 = v229;
      v65 = (uint64_t)&v229[v63];
      sub_23D5E7298(v60 + v63, (uint64_t)&v229[v63], type metadata accessor for GroupMembership.MemberProperties);
      v66 = v232;
      sub_23D5E7F64(v65, v232, type metadata accessor for GroupMembership.MemberProperties);
      v67 = *(int *)(v62 + 48);
      v68 = (uint64_t)&v64[v67];
      sub_23D5E7298(v61 + v67, (uint64_t)&v64[v67], type metadata accessor for GroupMembership.MemberProperties);
      sub_23D5E7F64(v68, (uint64_t)v228, type metadata accessor for GroupMembership.MemberProperties);
      v69 = v224;
      sub_23D5AEF48(v66 + *(int *)(v224 + 28), v59, &qword_256C799E0);
      v70 = sub_23D66C330();
      v71 = *(_QWORD *)(v70 - 8);
      v72 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
      if (v72(v59, 1, v70) == 1)
      {
        v79 = v59;
        goto LABEL_129;
      }
      v73 = sub_23D66C1F8();
      v74 = (uint64_t)v228;
      v75 = v73;
      v77 = v76;
      v78 = *(void (**)(uint64_t, uint64_t))(v71 + 8);
      v78(v59, v70);
      v79 = v220;
      sub_23D5AEF48(v74 + *(int *)(v69 + 28), v220, &qword_256C799E0);
      if (v72(v79, 1, v70) == 1)
      {
        sub_23D5DDA20(v75, v77);
LABEL_129:
        sub_23D5AEF8C(v79, &qword_256C799E0);
        v13 = v211;
        if (qword_256C78B10 == -1)
        {
LABEL_130:
          v189 = sub_23D66BFDC();
          __swift_project_value_buffer(v189, (uint64_t)qword_256C88B78);
          v190 = sub_23D66C588();
          v191 = sub_23D66BFC4();
          v192 = v190;
          if (os_log_type_enabled(v191, v190))
          {
            v193 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v193 = 0;
            _os_log_impl(&dword_23D5A8000, v191, v192, "missing member key information", v193, 2u);
            MEMORY[0x242636844](v193, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
          sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
          swift_allocError();
          *(_WORD *)v194 = 345;
          *(_OWORD *)(v194 + 8) = xmmword_23D66E3B0;
          *(_QWORD *)(v194 + 24) = 0x800000023D6775F0;
          *(_QWORD *)(v194 + 32) = 0xD000000000000052;
          *(_QWORD *)(v194 + 40) = 0x800000023D676EF0;
          swift_willThrow();
          sub_23D5E6950((uint64_t)v228, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5E6950(v232, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5AEF8C(v231, &qword_256C799A0);
          v195 = v230;
          goto LABEL_140;
        }
LABEL_171:
        swift_once();
        goto LABEL_130;
      }
      v80 = sub_23D66C1F8();
      v82 = v81;
      v78(v79, v70);
      sub_23D617FF0(v80, v82, v75, v77);
      v84 = v83;
      sub_23D5E6950(v74, type metadata accessor for GroupMembership.MemberProperties);
      sub_23D5E6950(v232, type metadata accessor for GroupMembership.MemberProperties);
      sub_23D5DDA20(v80, v82);
      sub_23D5DDA20(v75, v77);
      sub_23D5AEF8C(v231, &qword_256C799A0);
      sub_23D5AEF8C(v230, &qword_256C799A0);
      if (((v221 ^ v84) & 1) != 0)
        break;
      v56 = v236 + 1;
      v58 = v222 + v233;
      v42 = v214;
      v59 = (uint64_t)v216;
      if (v214 == v236 + 1)
      {
        v56 = v214;
        v57 = v211;
        v2 = v204;
        v13 = v215;
        goto LABEL_25;
      }
    }
    v57 = v211;
    v2 = v204;
    v56 = v236;
    v13 = v215;
    v42 = v214;
LABEL_25:
    v211 = v57;
    if ((v221 & 1) == 0)
    {
      v48 = v219;
      if (v56 < v42)
        goto LABEL_43;
      goto LABEL_51;
    }
    v85 = (uint64_t)v209;
    if (v56 < v13)
      goto LABEL_170;
    if (v13 >= v56)
    {
      v48 = v219;
      if (v56 < v42)
        goto LABEL_43;
LABEL_51:
      if (v56 < v13)
        goto LABEL_165;
      goto LABEL_52;
    }
    v204 = v2;
    v86 = 0;
    v87 = v233 * (v56 - 1);
    v88 = v56 * v233;
    v89 = v13;
    v90 = v13 * v233;
    do
    {
      if (v89 != v56 + v86 - 1)
      {
        if (!v210)
          goto LABEL_174;
        v91 = v56;
        v92 = v210 + v90;
        v93 = v210 + v87;
        v94 = v85;
        v95 = v210;
        sub_23D5F16C4(v210 + v90, v94, &qword_256C799A0);
        if (v90 < v87 || v92 >= v95 + v88)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v90 != v87)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v85 = (uint64_t)v209;
        sub_23D5F16C4((uint64_t)v209, v93, &qword_256C799A0);
        v56 = v91;
        v13 = v215;
      }
      ++v89;
      --v86;
      v87 -= v233;
      v88 -= v233;
      v90 += v233;
    }
    while (v89 < v56 + v86);
    v2 = v204;
    v48 = v219;
    v42 = v214;
    if (v56 >= v214)
      goto LABEL_51;
LABEL_43:
    if (__OFSUB__(v56, v13))
      goto LABEL_167;
    if (v56 - v13 >= v205)
      goto LABEL_51;
    if (__OFADD__(v13, v205))
      goto LABEL_168;
    if (v13 + v205 >= v42)
      v96 = v42;
    else
      v96 = v13 + v205;
    if (v96 < v13)
      goto LABEL_169;
    if (v56 == v96)
      goto LABEL_51;
    v204 = v2;
    v149 = *(_QWORD *)(v237 + 72);
    v150 = v149 * (v56 - 1);
    v212 = v149;
    v151 = v56 * v149;
    v210 = v96;
    while (2)
    {
      v152 = 0;
      v236 = v56;
      v214 = v150;
      v213 = v151;
      while (2)
      {
        v233 = v13;
        v154 = *v238;
        v222 = v151 + v152;
        v155 = v225;
        sub_23D5AEF48(v151 + v152 + v154, v225, &qword_256C799A0);
        v221 = v150 + v152;
        v156 = v150 + v152 + v154;
        v157 = v226;
        sub_23D5AEF48(v156, v226, &qword_256C799A0);
        v158 = v234;
        v159 = *(int *)(v234 + 48);
        v160 = v229;
        v161 = (uint64_t)&v229[v159];
        sub_23D5E7298(v155 + v159, (uint64_t)&v229[v159], type metadata accessor for GroupMembership.MemberProperties);
        v162 = v227;
        sub_23D5E7F64(v161, v227, type metadata accessor for GroupMembership.MemberProperties);
        v163 = *(int *)(v158 + 48);
        v164 = (uint64_t)&v160[v163];
        sub_23D5E7298(v157 + v163, (uint64_t)&v160[v163], type metadata accessor for GroupMembership.MemberProperties);
        v165 = (uint64_t)v208;
        sub_23D5E7F64(v164, (uint64_t)v208, type metadata accessor for GroupMembership.MemberProperties);
        v166 = v224;
        v167 = v218;
        sub_23D5AEF48(v162 + *(int *)(v224 + 28), v218, &qword_256C799E0);
        v168 = sub_23D66C330();
        v169 = *(_QWORD *)(v168 - 8);
        v170 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v169 + 48);
        if (v170(v167, 1, v168) == 1)
        {
          v196 = v165;
          v176 = v167;
          goto LABEL_135;
        }
        v171 = sub_23D66C1F8();
        v172 = v167;
        v174 = v173;
        v175 = *(void (**)(uint64_t, uint64_t))(v169 + 8);
        v175(v172, v168);
        v176 = v217;
        sub_23D5AEF48(v165 + *(int *)(v166 + 28), v217, &qword_256C799E0);
        if (v170(v176, 1, v168) == 1)
        {
          v196 = v165;
          sub_23D5DDA20(v171, v174);
LABEL_135:
          sub_23D5AEF8C(v176, &qword_256C799E0);
          v13 = v211;
          if (qword_256C78B10 != -1)
            swift_once();
          v197 = sub_23D66BFDC();
          __swift_project_value_buffer(v197, (uint64_t)qword_256C88B78);
          v198 = sub_23D66C588();
          v199 = sub_23D66BFC4();
          v200 = v198;
          if (os_log_type_enabled(v199, v198))
          {
            v201 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v201 = 0;
            _os_log_impl(&dword_23D5A8000, v199, v200, "missing member key information", v201, 2u);
            MEMORY[0x242636844](v201, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
          sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
          swift_allocError();
          *(_WORD *)v202 = 345;
          *(_OWORD *)(v202 + 8) = xmmword_23D66E3B0;
          *(_QWORD *)(v202 + 24) = 0x800000023D6775F0;
          *(_QWORD *)(v202 + 32) = 0xD000000000000052;
          *(_QWORD *)(v202 + 40) = 0x800000023D676EF0;
          swift_willThrow();
          sub_23D5E6950(v196, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5E6950(v227, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5AEF8C(v226, &qword_256C799A0);
          v195 = v225;
LABEL_140:
          sub_23D5AEF8C(v195, &qword_256C799A0);
          swift_bridgeObjectRelease();
LABEL_141:
          *(_QWORD *)(v13 + 16) = 0;
          return swift_bridgeObjectRelease();
        }
        v177 = sub_23D66C1F8();
        v179 = v178;
        v175(v176, v168);
        sub_23D617FF0(v177, v179, v171, v174);
        v181 = v180;
        sub_23D5E6950(v165, type metadata accessor for GroupMembership.MemberProperties);
        sub_23D5E6950(v227, type metadata accessor for GroupMembership.MemberProperties);
        sub_23D5DDA20(v177, v179);
        sub_23D5DDA20(v171, v174);
        sub_23D5AEF8C(v226, &qword_256C799A0);
        sub_23D5AEF8C(v225, &qword_256C799A0);
        if ((v181 & 1) != 0)
        {
          v182 = *v238;
          v150 = v214;
          v151 = v213;
          if (!*v238)
            goto LABEL_173;
          v183 = v182 + v214 + v152;
          sub_23D5F16C4(v182 + v213 + v152, v223, &qword_256C799A0);
          v48 = v219;
          swift_arrayInitWithTakeFrontToBack();
          sub_23D5F16C4(v223, v183, &qword_256C799A0);
          v152 -= v212;
          v13 = v233 + 1;
          v153 = v236;
          if (v236 == v233 + 1)
            goto LABEL_110;
          continue;
        }
        break;
      }
      v48 = v219;
      v153 = v236;
      v150 = v214;
      v151 = v213;
LABEL_110:
      v56 = v153 + 1;
      v150 += v212;
      v151 += v212;
      v13 = v215;
      if (v56 != v210)
        continue;
      break;
    }
    v56 = v210;
    v2 = v204;
    if (v210 < v215)
      goto LABEL_165;
LABEL_52:
    isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v236 = v56;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      v48 = sub_23D6442E4(0, *((_QWORD *)v48 + 2) + 1, 1, v48);
    v99 = *((_QWORD *)v48 + 2);
    v98 = *((_QWORD *)v48 + 3);
    v100 = v99 + 1;
    if (v99 >= v98 >> 1)
      v48 = sub_23D6442E4((char *)(v98 > 1), v99 + 1, 1, v48);
    *((_QWORD *)v48 + 2) = v100;
    v101 = v48 + 32;
    v102 = (uint64_t *)&v48[16 * v99 + 32];
    v103 = v236;
    *v102 = v13;
    v102[1] = v103;
    if (v99)
      break;
    v100 = 1;
LABEL_99:
    v42 = v238[1];
    v49 = v236;
    if (v236 >= v42)
      goto LABEL_115;
  }
  while (2)
  {
    v104 = v100 - 1;
    if (v100 >= 4)
    {
      v109 = &v101[16 * v100];
      v110 = *((_QWORD *)v109 - 8);
      v111 = *((_QWORD *)v109 - 7);
      v115 = __OFSUB__(v111, v110);
      v112 = v111 - v110;
      if (v115)
        goto LABEL_150;
      v114 = *((_QWORD *)v109 - 6);
      v113 = *((_QWORD *)v109 - 5);
      v115 = __OFSUB__(v113, v114);
      v107 = v113 - v114;
      v108 = v115;
      if (v115)
        goto LABEL_151;
      v116 = v100 - 2;
      v117 = &v101[16 * v100 - 32];
      v119 = *(_QWORD *)v117;
      v118 = *((_QWORD *)v117 + 1);
      v115 = __OFSUB__(v118, v119);
      v120 = v118 - v119;
      if (v115)
        goto LABEL_153;
      v115 = __OFADD__(v107, v120);
      v121 = v107 + v120;
      if (v115)
        goto LABEL_156;
      if (v121 >= v112)
      {
        v139 = &v101[16 * v104];
        v141 = *(_QWORD *)v139;
        v140 = *((_QWORD *)v139 + 1);
        v115 = __OFSUB__(v140, v141);
        v142 = v140 - v141;
        if (v115)
          goto LABEL_160;
        v132 = v107 < v142;
      }
      else
      {
LABEL_70:
        if ((v108 & 1) != 0)
          goto LABEL_152;
        v116 = v100 - 2;
        v122 = &v101[16 * v100 - 32];
        v124 = *(_QWORD *)v122;
        v123 = *((_QWORD *)v122 + 1);
        v125 = __OFSUB__(v123, v124);
        v126 = v123 - v124;
        v127 = v125;
        if (v125)
          goto LABEL_155;
        v128 = &v101[16 * v104];
        v130 = *(_QWORD *)v128;
        v129 = *((_QWORD *)v128 + 1);
        v115 = __OFSUB__(v129, v130);
        v131 = v129 - v130;
        if (v115)
          goto LABEL_158;
        if (__OFADD__(v126, v131))
          goto LABEL_159;
        if (v126 + v131 < v107)
          goto LABEL_82;
        v132 = v107 < v131;
      }
      if (v132)
        v104 = v116;
    }
    else
    {
      if (v100 == 3)
      {
        v106 = *((_QWORD *)v48 + 4);
        v105 = *((_QWORD *)v48 + 5);
        v115 = __OFSUB__(v105, v106);
        v107 = v105 - v106;
        v108 = v115;
        goto LABEL_70;
      }
      v133 = *((_QWORD *)v48 + 4);
      v134 = *((_QWORD *)v48 + 5);
      v115 = __OFSUB__(v134, v133);
      v126 = v134 - v133;
      v127 = v115;
LABEL_82:
      if ((v127 & 1) != 0)
        goto LABEL_154;
      v135 = &v101[16 * v104];
      v137 = *(_QWORD *)v135;
      v136 = *((_QWORD *)v135 + 1);
      v115 = __OFSUB__(v136, v137);
      v138 = v136 - v137;
      if (v115)
        goto LABEL_157;
      if (v138 < v126)
        goto LABEL_99;
    }
    v143 = v104 - 1;
    if (v104 - 1 >= v100)
    {
      __break(1u);
LABEL_147:
      __break(1u);
LABEL_148:
      __break(1u);
LABEL_149:
      __break(1u);
LABEL_150:
      __break(1u);
LABEL_151:
      __break(1u);
LABEL_152:
      __break(1u);
LABEL_153:
      __break(1u);
LABEL_154:
      __break(1u);
LABEL_155:
      __break(1u);
LABEL_156:
      __break(1u);
LABEL_157:
      __break(1u);
LABEL_158:
      __break(1u);
LABEL_159:
      __break(1u);
LABEL_160:
      __break(1u);
      goto LABEL_161;
    }
    if (*v238)
    {
      v144 = v48;
      v145 = &v101[16 * v143];
      v146 = *(_QWORD *)v145;
      v13 = (uint64_t)&v101[16 * v104];
      v147 = *(_QWORD *)(v13 + 8);
      sub_23D5E54F0(*v238 + *(_QWORD *)(v237 + 72) * *(_QWORD *)v145, *v238 + *(_QWORD *)(v237 + 72) * *(_QWORD *)v13, *v238 + *(_QWORD *)(v237 + 72) * v147, v235);
      if (v2)
        goto LABEL_113;
      if (v147 < v146)
        goto LABEL_147;
      if (v104 > *((_QWORD *)v144 + 2))
        goto LABEL_148;
      *(_QWORD *)v145 = v146;
      *(_QWORD *)&v101[16 * v143 + 8] = v147;
      v148 = *((_QWORD *)v144 + 2);
      if (v104 >= v148)
        goto LABEL_149;
      v48 = v144;
      v100 = v148 - 1;
      memmove(&v101[16 * v104], (const void *)(v13 + 16), 16 * (v148 - 1 - v104));
      *((_QWORD *)v144 + 2) = v148 - 1;
      if (v148 <= 2)
        goto LABEL_99;
      continue;
    }
    break;
  }
  __break(1u);
LABEL_173:
  __break(1u);
LABEL_174:
  __break(1u);
LABEL_175:
  __break(1u);
LABEL_176:
  result = sub_23D66C714();
  __break(1u);
  return result;
}

uint64_t sub_23D5E4288(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char v12;
  char v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;

  v15 = result;
  if (a3 != a2)
  {
    v4 = a3;
    v17 = *a4;
    v5 = (uint64_t *)(*a4 + 16 * a3);
LABEL_5:
    v6 = (uint64_t *)(v17 + 16 * v4);
    v7 = *v6;
    v8 = v6[1];
    v9 = v15;
    v16 = v5;
    while (1)
    {
      v10 = *(v5 - 2);
      v11 = *(v5 - 1);
      sub_23D5AFA60(v7, v8);
      sub_23D5AFA60(v10, v11);
      sub_23D617FF0(v10, v11, v7, v8);
      v13 = v12;
      sub_23D5DDA20(v10, v11);
      result = sub_23D5DDA20(v7, v8);
      if ((v13 & 1) == 0)
      {
LABEL_4:
        ++v4;
        v5 = v16 + 2;
        if (v4 == a2)
          return result;
        goto LABEL_5;
      }
      if (!v17)
        break;
      v7 = *v5;
      v8 = v5[1];
      *(_OWORD *)v5 = *((_OWORD *)v5 - 1);
      *(v5 - 1) = v8;
      *(v5 - 2) = v7;
      v5 -= 2;
      if (v4 == ++v9)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23D5E43A0(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;

  v35 = a1;
  v36 = type metadata accessor for UserKeyingInfo(0);
  v7 = MEMORY[0x24BDAC7A8](v36);
  v44 = (uint64_t)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v9 = MEMORY[0x24BDAC7A8](v7);
  v39 = (uint64_t *)((char *)&v33 - v10);
  result = MEMORY[0x24BDAC7A8](v9);
  v38 = (uint64_t *)((char *)&v33 - v13);
  v43 = a3;
  v34 = a2;
  if (a3 != a2)
  {
    v14 = *(_QWORD *)(v12 + 72);
    v15 = v14 * (v43 - 1);
    v40 = v14;
    v16 = v14 * v43;
    v37 = a4;
LABEL_5:
    v17 = 0;
    v46 = v35;
    v41 = v16;
    v42 = v15;
    while (1)
    {
      v18 = *a4;
      v45 = v16 + v17;
      v19 = v16 + v17 + v18;
      v20 = v38;
      sub_23D5E7298(v19, (uint64_t)v38, type metadata accessor for UserKeyingInfo);
      v21 = v15 + v17 + v18;
      v22 = v39;
      sub_23D5E7298(v21, (uint64_t)v39, type metadata accessor for UserKeyingInfo);
      v23 = *v20;
      v24 = v20[1];
      v26 = *v22;
      v25 = v22[1];
      sub_23D5AFA60(*v20, v24);
      sub_23D5AFA60(v26, v25);
      sub_23D617FF0(v26, v25, v23, v24);
      v47 = v27;
      v28 = v26;
      v15 = v42;
      v29 = v25;
      a4 = v37;
      sub_23D5DDA20(v28, v29);
      sub_23D5DDA20(v23, v24);
      sub_23D5E6950((uint64_t)v22, type metadata accessor for UserKeyingInfo);
      v30 = (uint64_t)v20;
      v16 = v41;
      result = sub_23D5E6950(v30, type metadata accessor for UserKeyingInfo);
      if ((v47 & 1) == 0)
      {
LABEL_4:
        v15 += v40;
        v16 += v40;
        if (++v43 == v34)
          return result;
        goto LABEL_5;
      }
      v31 = *a4;
      if (!*a4)
        break;
      v32 = v31 + v15 + v17;
      sub_23D5E7F64(v31 + v16 + v17, v44, type metadata accessor for UserKeyingInfo);
      swift_arrayInitWithTakeFrontToBack();
      result = sub_23D5E7F64(v44, v32, type metadata accessor for UserKeyingInfo);
      v17 -= v40;
      if (v43 == ++v46)
        goto LABEL_4;
    }
    __break(1u);
  }
  return result;
}

uint64_t sub_23D5E4620(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t result;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  void (*v46)(uint64_t, uint64_t);
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  os_log_type_t v58;
  NSObject *v59;
  os_log_type_t v60;
  uint8_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;

  v66 = a1;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v73 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v76 = (uint64_t)&v63 - v11;
  v75 = type metadata accessor for GroupMembership.MemberProperties(0);
  v12 = MEMORY[0x24BDAC7A8](v75);
  v14 = (char *)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v12);
  v16 = (char *)&v63 - v15;
  v77 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v17 = MEMORY[0x24BDAC7A8](v77);
  v81 = (uint64_t)&v63 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = MEMORY[0x24BDAC7A8](v17);
  v74 = (char *)&v63 - v20;
  v21 = MEMORY[0x24BDAC7A8](v19);
  v23 = (char *)&v63 - v22;
  result = MEMORY[0x24BDAC7A8](v21);
  v27 = (char *)&v63 - v26;
  if (a3 != a2)
  {
    v28 = *(_QWORD *)(v25 + 72);
    v83 = v28 * (a3 - 1);
    v67 = a4;
    v68 = v28;
    v82 = v28 * a3;
    v70 = (char *)&v63 - v26;
    v71 = v23;
    v64 = a2;
    v65 = v4;
    v69 = v16;
    while (2)
    {
      v72 = a3;
      v29 = 0;
      v80 = v66;
      do
      {
        v30 = *a4;
        v79 = v82 + v29;
        sub_23D5AEF48(v82 + v29 + v30, (uint64_t)v27, &qword_256C799A0);
        v78 = v83 + v29;
        sub_23D5AEF48(v83 + v29 + v30, (uint64_t)v23, &qword_256C799A0);
        v31 = v77;
        v32 = *(int *)(v77 + 48);
        v33 = v74;
        v34 = (uint64_t)&v74[v32];
        sub_23D5E7298((uint64_t)&v27[v32], (uint64_t)&v74[v32], type metadata accessor for GroupMembership.MemberProperties);
        sub_23D5E7F64(v34, (uint64_t)v16, type metadata accessor for GroupMembership.MemberProperties);
        v35 = *(int *)(v31 + 48);
        v36 = (uint64_t)&v33[v35];
        sub_23D5E7298((uint64_t)&v23[v35], (uint64_t)&v33[v35], type metadata accessor for GroupMembership.MemberProperties);
        sub_23D5E7F64(v36, (uint64_t)v14, type metadata accessor for GroupMembership.MemberProperties);
        v37 = v75;
        v38 = v76;
        sub_23D5AEF48((uint64_t)&v16[*(int *)(v75 + 28)], v76, &qword_256C799E0);
        v39 = sub_23D66C330();
        v40 = (uint64_t)v14;
        v41 = *(_QWORD *)(v39 - 8);
        v42 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
        if (v42(v38, 1, v39) == 1)
          goto LABEL_13;
        v43 = sub_23D66C1F8();
        v45 = v44;
        v46 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
        v46(v38, v39);
        v38 = v73;
        sub_23D5AEF48(v40 + *(int *)(v37 + 28), v73, &qword_256C799E0);
        if (v42(v38, 1, v39) == 1)
        {
          sub_23D5DDA20(v43, v45);
LABEL_13:
          sub_23D5AEF8C(v38, &qword_256C799E0);
          v55 = (uint64_t)v69;
          v56 = (uint64_t)v70;
          if (qword_256C78B10 != -1)
            swift_once();
          v57 = sub_23D66BFDC();
          __swift_project_value_buffer(v57, (uint64_t)qword_256C88B78);
          v58 = sub_23D66C588();
          v59 = sub_23D66BFC4();
          v60 = v58;
          if (os_log_type_enabled(v59, v58))
          {
            v61 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v61 = 0;
            _os_log_impl(&dword_23D5A8000, v59, v60, "missing member key information", v61, 2u);
            MEMORY[0x242636844](v61, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
          sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
          swift_allocError();
          *(_WORD *)v62 = 345;
          *(_OWORD *)(v62 + 8) = xmmword_23D66E3B0;
          *(_QWORD *)(v62 + 24) = 0x800000023D6775F0;
          *(_QWORD *)(v62 + 32) = 0xD000000000000052;
          *(_QWORD *)(v62 + 40) = 0x800000023D676EF0;
          swift_willThrow();
          sub_23D5E6950(v40, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5E6950(v55, type metadata accessor for GroupMembership.MemberProperties);
          sub_23D5AEF8C((uint64_t)v71, &qword_256C799A0);
          return sub_23D5AEF8C(v56, &qword_256C799A0);
        }
        v47 = sub_23D66C1F8();
        v49 = v48;
        v46(v38, v39);
        sub_23D617FF0(v47, v49, v43, v45);
        v51 = v50;
        sub_23D5E6950(v40, type metadata accessor for GroupMembership.MemberProperties);
        v16 = v69;
        sub_23D5E6950((uint64_t)v69, type metadata accessor for GroupMembership.MemberProperties);
        sub_23D5DDA20(v47, v49);
        sub_23D5DDA20(v43, v45);
        v23 = v71;
        sub_23D5AEF8C((uint64_t)v71, &qword_256C799A0);
        v27 = v70;
        result = sub_23D5AEF8C((uint64_t)v70, &qword_256C799A0);
        v14 = (char *)v40;
        a4 = v67;
        if ((v51 & 1) == 0)
          break;
        v52 = *v67;
        if (!*v67)
        {
          __break(1u);
          return result;
        }
        v53 = v52 + v83 + v29;
        sub_23D5F16C4(v52 + v82 + v29, v81, &qword_256C799A0);
        v54 = v72;
        swift_arrayInitWithTakeFrontToBack();
        result = sub_23D5F16C4(v81, v53, &qword_256C799A0);
        v29 -= v68;
        ++v80;
      }
      while (v54 != v80);
      a3 = v72 + 1;
      v83 += v68;
      v82 += v68;
      if (v72 + 1 != v64)
        continue;
      break;
    }
  }
  return result;
}

uint64_t sub_23D5E4C4C(uint64_t *a1, uint64_t *__src, unint64_t a3, char *a4)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t *v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  char v30;
  char v31;
  uint64_t result;
  uint64_t *v35;
  uint64_t *v37;
  char *v38;
  uint64_t *v39;
  uint64_t *v40;

  v4 = __src;
  v5 = (char *)__src - (char *)a1;
  v6 = (char *)__src - (char *)a1 + 15;
  if ((char *)__src - (char *)a1 >= 0)
    v6 = (char *)__src - (char *)a1;
  v7 = v6 >> 4;
  v8 = a3 - (_QWORD)__src;
  v9 = a3 - (_QWORD)__src + 15;
  if ((uint64_t)(a3 - (_QWORD)__src) >= 0)
    v9 = a3 - (_QWORD)__src;
  v10 = v9 >> 4;
  v40 = a1;
  v39 = (uint64_t *)a4;
  if (v7 >= v9 >> 4)
  {
    if (v8 >= -15)
    {
      if (a4 != (char *)__src || &__src[2 * v10] <= (uint64_t *)a4)
        memmove(a4, __src, 16 * v10);
      v21 = &a4[16 * v10];
      v38 = v21;
      v40 = v4;
      if (a1 < v4 && v8 >= 16)
      {
        v22 = (uint64_t *)(a3 - 16);
        v23 = v4;
        do
        {
          v35 = v22 + 2;
          v37 = v4;
          v24 = *((_QWORD *)v21 - 2);
          v26 = *((_QWORD *)v21 - 1);
          v25 = v21 - 16;
          v27 = *(v23 - 2);
          v28 = *(v23 - 1);
          v23 -= 2;
          v29 = (unint64_t)v21;
          sub_23D5AFA60(v24, v26);
          sub_23D5AFA60(v27, v28);
          sub_23D617FF0(v27, v28, v24, v26);
          v31 = v30;
          sub_23D5DDA20(v27, v28);
          sub_23D5DDA20(v24, v26);
          if ((v31 & 1) != 0)
          {
            if (v35 != v37 || v22 >= v37)
              *(_OWORD *)v22 = *(_OWORD *)v23;
            v40 = v23;
            v21 = (char *)v29;
          }
          else
          {
            v38 = v25;
            if ((unint64_t)v35 < v29 || (unint64_t)v22 >= v29 || v35 != (uint64_t *)v29)
              *(_OWORD *)v22 = *(_OWORD *)v25;
            v23 = v37;
            v21 = v25;
          }
          if (v23 <= a1)
            break;
          v22 -= 2;
          v4 = v23;
        }
        while (v21 > a4);
      }
      goto LABEL_43;
    }
  }
  else if (v5 >= -15)
  {
    if (a4 != (char *)a1 || &a1[2 * v7] <= (uint64_t *)a4)
      memmove(a4, a1, 16 * v7);
    v11 = &a4[16 * v7];
    v38 = v11;
    if ((unint64_t)v4 < a3 && v5 >= 16)
    {
      v12 = (uint64_t *)a4;
      v13 = a1;
      do
      {
        v14 = *v4;
        v15 = v4[1];
        v16 = *v12;
        v17 = v12[1];
        sub_23D5AFA60(*v4, v15);
        sub_23D5AFA60(v16, v17);
        sub_23D617FF0(v16, v17, v14, v15);
        v19 = v18;
        sub_23D5DDA20(v16, v17);
        sub_23D5DDA20(v14, v15);
        if ((v19 & 1) != 0)
        {
          v20 = v4 + 2;
          if (v13 < v4 || v13 >= v20 || v13 != v4)
            *(_OWORD *)v13 = *(_OWORD *)v4;
        }
        else
        {
          if (v13 != v12)
            *(_OWORD *)v13 = *(_OWORD *)v12;
          v12 += 2;
          v39 = v12;
          v20 = v4;
        }
        v13 += 2;
        if (v12 >= (uint64_t *)v11)
          break;
        v4 = v20;
      }
      while ((unint64_t)v20 < a3);
      v40 = v13;
    }
LABEL_43:
    sub_23D644494((void **)&v40, (const void **)&v39, &v38);
    return 1;
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5E4F70(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  char v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char v45;
  char v46;
  BOOL v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t result;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t v63;

  v56 = type metadata accessor for UserKeyingInfo(0);
  v8 = MEMORY[0x24BDAC7A8](v56);
  v59 = (uint64_t *)((char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v8);
  v58 = (uint64_t *)((char *)&v52 - v10);
  v12 = *(_QWORD *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_62:
    __break(1u);
LABEL_63:
    __break(1u);
    goto LABEL_64;
  }
  if (a2 - a1 == 0x8000000000000000 && v12 == -1)
    goto LABEL_62;
  v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v12 == -1)
    goto LABEL_63;
  v14 = (uint64_t)(a2 - a1) / v12;
  v63 = a1;
  v62 = a4;
  v15 = v13 / v12;
  if (v14 >= v13 / v12)
  {
    if ((v15 & 0x8000000000000000) == 0)
    {
      v17 = v15 * v12;
      if (a4 < a2 || a2 + v17 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v34 = a4 + v17;
      v61 = a4 + v17;
      v63 = a2;
      if (v17 >= 1 && a1 < a2)
      {
        v36 = -v12;
        v53 = a4;
        v54 = -v12;
        v55 = a1;
        v37 = v59;
        do
        {
          v60 = a3;
          v57 = a3 + v36;
          v38 = v58;
          sub_23D5E7298(v34 + v36, (uint64_t)v58, type metadata accessor for UserKeyingInfo);
          v39 = a2 + v36;
          sub_23D5E7298(a2 + v36, (uint64_t)v37, type metadata accessor for UserKeyingInfo);
          v40 = a2;
          v41 = *v38;
          v42 = v38[1];
          v43 = *v37;
          v44 = v37[1];
          sub_23D5AFA60(*v38, v42);
          sub_23D5AFA60(v43, v44);
          sub_23D617FF0(v43, v44, v41, v42);
          v46 = v45;
          sub_23D5DDA20(v43, v44);
          sub_23D5DDA20(v41, v42);
          sub_23D5E6950((uint64_t)v37, type metadata accessor for UserKeyingInfo);
          sub_23D5E6950((uint64_t)v38, type metadata accessor for UserKeyingInfo);
          if ((v46 & 1) != 0)
          {
            v36 = v54;
            a3 = v57;
            if (v60 < v40 || v57 >= v40)
            {
              swift_arrayInitWithTakeFrontToBack();
              v48 = v53;
              v49 = v55;
            }
            else
            {
              v47 = v60 == v40;
              v48 = v53;
              v49 = v55;
              if (!v47)
                swift_arrayInitWithTakeBackToFront();
            }
            v63 += v36;
          }
          else
          {
            v39 = v40;
            v50 = v61;
            v61 += v54;
            v36 = v54;
            a3 = v57;
            if (v60 < v50 || v57 >= v50)
            {
              swift_arrayInitWithTakeFrontToBack();
              v48 = v53;
              v49 = v55;
            }
            else
            {
              v49 = v55;
              if (v60 != v50)
                swift_arrayInitWithTakeBackToFront();
              v48 = v53;
            }
          }
          v34 = v61;
          if (v61 <= v48)
            break;
          a2 = v39;
        }
        while (v39 > v49);
      }
      goto LABEL_60;
    }
  }
  else if ((v14 & 0x8000000000000000) == 0)
  {
    v16 = v14 * v12;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v57 = a4 + v16;
    v61 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      v60 = a3;
      v54 = v12;
      v19 = v58;
      do
      {
        sub_23D5E7298(a2, (uint64_t)v19, type metadata accessor for UserKeyingInfo);
        v20 = v59;
        sub_23D5E7298(a4, (uint64_t)v59, type metadata accessor for UserKeyingInfo);
        v21 = *v19;
        v22 = v19[1];
        v23 = *v20;
        v24 = v20[1];
        sub_23D5AFA60(*v19, v22);
        sub_23D5AFA60(v23, v24);
        sub_23D617FF0(v23, v24, v21, v22);
        v25 = a2;
        v27 = v26;
        sub_23D5DDA20(v23, v24);
        sub_23D5DDA20(v21, v22);
        sub_23D5E6950((uint64_t)v20, type metadata accessor for UserKeyingInfo);
        sub_23D5E6950((uint64_t)v19, type metadata accessor for UserKeyingInfo);
        v28 = v63;
        if ((v27 & 1) != 0)
        {
          v29 = v54;
          v30 = v25 + v54;
          if (v63 < v25 || v63 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack();
            v31 = v60;
          }
          else
          {
            v31 = v60;
            if (v63 == v25)
              v28 = v25;
            else
              swift_arrayInitWithTakeBackToFront();
          }
        }
        else
        {
          v29 = v54;
          v32 = v62 + v54;
          if (v63 < v62 || v63 >= v32)
          {
            swift_arrayInitWithTakeFrontToBack();
            v31 = v60;
            v33 = v25;
          }
          else
          {
            v31 = v60;
            v33 = v25;
            if (v63 != v62)
              swift_arrayInitWithTakeBackToFront();
          }
          v62 = v32;
          v30 = v33;
        }
        v63 = v28 + v29;
        a4 = v62;
        if (v62 >= v57)
          break;
        a2 = v30;
      }
      while (v30 < v31);
    }
LABEL_60:
    sub_23D64453C(&v63, &v62, (uint64_t *)&v61);
    return 1;
  }
LABEL_64:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5E54F0(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  int64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  BOOL v25;
  char v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  char v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t result;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;

  v5 = v4;
  v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v10 = MEMORY[0x24BDAC7A8](v51);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v12 = MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)&v45 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v18 = (char *)&v45 - v17;
  v52 = *(_QWORD *)(v19 + 72);
  if (!v52)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }
  if (a2 - a1 == 0x8000000000000000 && v52 == -1)
    goto LABEL_68;
  v20 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000 && v52 == -1)
    goto LABEL_69;
  v21 = (uint64_t)(a2 - a1) / v52;
  v55 = a1;
  v54 = a4;
  v22 = v20 / v52;
  if (v21 >= v20 / v52)
  {
    if ((v22 & 0x8000000000000000) == 0)
    {
      v24 = v22 * v52;
      v18 = v16;
      v49 = (char *)v15;
      if (a4 < a2 || a2 + v24 <= a4)
      {
        swift_arrayInitWithTakeFrontToBack();
      }
      else if (a4 != a2)
      {
        swift_arrayInitWithTakeBackToFront();
      }
      v31 = a4 + v24;
      v53 = a4 + v24;
      v55 = a2;
      if (v24 < 1 || a1 >= a2)
        goto LABEL_65;
      v33 = -v52;
      v46 = a1;
      v47 = -v52;
      v48 = a4;
      while (1)
      {
        sub_23D5AEF48(v31 + v33, (uint64_t)v18, &qword_256C799A0);
        v34 = a2;
        v35 = a2 + v33;
        v36 = a2 + v33;
        v37 = v33;
        v14 = v49;
        sub_23D5AEF48(v36, (uint64_t)v49, &qword_256C799A0);
        v38 = sub_23D5D57A0((uint64_t)v18, (uint64_t)v14);
        if (v5)
          goto LABEL_64;
        v39 = v38;
        v52 = 0;
        v50 = a3 + v37;
        sub_23D5AEF8C((uint64_t)v14, &qword_256C799A0);
        sub_23D5AEF8C((uint64_t)v18, &qword_256C799A0);
        if ((v39 & 1) != 0)
        {
          v40 = a3;
          v25 = a3 >= v34;
          a3 = v50;
          if (v25 && v50 < v34)
          {
            v41 = v48;
            if (v40 != v34)
              swift_arrayInitWithTakeBackToFront();
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack();
            v41 = v48;
          }
          v33 = v47;
          v55 += v47;
        }
        else
        {
          v42 = v53;
          v53 += v37;
          v43 = a3;
          v25 = a3 >= v42;
          a3 = v50;
          if (v25 && v50 < v42)
          {
            v41 = v48;
            if (v43 != v42)
              swift_arrayInitWithTakeBackToFront();
            v35 = v34;
            v33 = v47;
          }
          else
          {
            swift_arrayInitWithTakeFrontToBack();
            v35 = v34;
            v33 = v47;
            v41 = v48;
          }
        }
        v31 = v53;
        if (v53 > v41)
        {
          a2 = v35;
          v5 = v52;
          if (v35 > v46)
            continue;
        }
        goto LABEL_65;
      }
    }
  }
  else if ((v21 & 0x8000000000000000) == 0)
  {
    v23 = v21 * v52;
    if (a4 < a1 || a1 + v23 <= a4)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (a4 != a1)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    v50 = a4 + v23;
    v53 = a4 + v23;
    v25 = v23 < 1 || a2 >= a3;
    if (v25)
      goto LABEL_65;
    while (1)
    {
      sub_23D5AEF48(a2, (uint64_t)v18, &qword_256C799A0);
      sub_23D5AEF48(a4, (uint64_t)v14, &qword_256C799A0);
      v26 = sub_23D5D57A0((uint64_t)v18, (uint64_t)v14);
      if (v4)
        break;
      v27 = v26;
      sub_23D5AEF8C((uint64_t)v14, &qword_256C799A0);
      sub_23D5AEF8C((uint64_t)v18, &qword_256C799A0);
      v28 = v55;
      if ((v27 & 1) != 0)
      {
        v29 = a2 + v52;
        if (v55 < a2 || v55 >= v29)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v55 == a2)
        {
          v28 = a2;
        }
        else
        {
          swift_arrayInitWithTakeBackToFront();
        }
      }
      else
      {
        v30 = v54 + v52;
        if (v55 < v54 || v55 >= v30)
        {
          swift_arrayInitWithTakeFrontToBack();
        }
        else if (v55 != v54)
        {
          swift_arrayInitWithTakeBackToFront();
        }
        v54 = v30;
        v29 = a2;
      }
      v55 = v28 + v52;
      a4 = v54;
      if (v54 < v50)
      {
        a2 = v29;
        if (v29 < a3)
          continue;
      }
      goto LABEL_65;
    }
LABEL_64:
    sub_23D5AEF8C((uint64_t)v14, &qword_256C799A0);
    sub_23D5AEF8C((uint64_t)v18, &qword_256C799A0);
LABEL_65:
    sub_23D644654(&v55, &v54, (uint64_t *)&v53);
    return 1;
  }
LABEL_70:
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D5E5A70(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4;
  uint64_t v5;

  v4 = __OFADD__(a1, a2);
  v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x23D5E5AD0);
  }
  return ((uint64_t (*)(uint64_t))((char *)&loc_23D5E5A88 + dword_23D5E5AD4[a4 >> 62]))(v5);
}

uint64_t sub_23D5E5AE4(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_23D5E5AF4 + dword_23D5E5B9C[a4 >> 62]))();
}

uint64_t sub_23D5E5B08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x23D5E5B94);
  }
  return ((uint64_t (*)(void))((char *)&loc_23D5E5B44 + dword_23D5E5BAC[a3]))();
}

uint64_t sub_23D5E5BC0(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 2)
    v7 = 2;
  v8 = v7 - 2;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 64;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

uint64_t sub_23D5E5C48@<X0>(uint64_t a1@<X8>)
{
  uint64_t *v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int64_t v15;
  uint64_t v16;
  int64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  int64_t v29;
  int64_t v30;
  unint64_t v31;
  int64_t v32;
  uint64_t v33;
  int64_t v34;
  void (*v35)(uint64_t);
  uint64_t v36;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  int64_t v44;
  uint64_t v45;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79998);
  v8 = MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (uint64_t *)((char *)&v40 - v11);
  v13 = *v1;
  v14 = v1[1];
  v16 = v1[2];
  v15 = v1[3];
  v17 = v15;
  v18 = v1[4];
  v40 = v6;
  v45 = v16;
  if (v18)
  {
    v43 = a1;
    v44 = v15;
    v41 = v14;
    v42 = v10;
    v19 = v4;
    v20 = (v18 - 1) & v18;
    v21 = __clz(__rbit64(v18)) | (v15 << 6);
LABEL_3:
    v22 = *(_QWORD *)(v13 + 56);
    v23 = (uint64_t *)(*(_QWORD *)(v13 + 48) + 16 * v21);
    v24 = v13;
    v25 = *v23;
    v26 = v23[1];
    v27 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_23D5E7298(v22 + *(_QWORD *)(*(_QWORD *)(v27 - 8) + 72) * v21, (uint64_t)v12 + *(int *)(v3 + 48), type metadata accessor for GroupMembership.MemberProperties);
    *v12 = v25;
    v12[1] = v26;
    v4 = v19;
    (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v12, 0, 1, v3);
    v28 = v26;
    v13 = v24;
    sub_23D5AFA60(v25, v28);
    v10 = v42;
    a1 = v43;
    v14 = v41;
    goto LABEL_25;
  }
  v29 = v15 + 1;
  if (__OFADD__(v15, 1))
  {
    __break(1u);
LABEL_23:
    v17 = v11;
    goto LABEL_24;
  }
  v30 = (unint64_t)(v16 + 64) >> 6;
  if (v29 < v30)
  {
    v31 = *(_QWORD *)(v14 + 8 * v29);
    if (v31)
    {
LABEL_7:
      v41 = v14;
      v42 = v10;
      v19 = v4;
      v43 = a1;
      v44 = v29;
      v20 = (v31 - 1) & v31;
      v21 = __clz(__rbit64(v31)) + (v29 << 6);
      goto LABEL_3;
    }
    v32 = v15 + 2;
    v17 = v15 + 1;
    if (v15 + 2 < v30)
    {
      v31 = *(_QWORD *)(v14 + 8 * v32);
      if (v31)
      {
LABEL_10:
        v29 = v32;
        goto LABEL_7;
      }
      v17 = v15 + 2;
      if (v15 + 3 < v30)
      {
        v31 = *(_QWORD *)(v14 + 8 * (v15 + 3));
        if (v31)
        {
          v29 = v15 + 3;
          goto LABEL_7;
        }
        v32 = v15 + 4;
        v17 = v15 + 3;
        if (v15 + 4 < v30)
        {
          v31 = *(_QWORD *)(v14 + 8 * v32);
          if (v31)
            goto LABEL_10;
          v29 = v15 + 5;
          v17 = v15 + 4;
          if (v15 + 5 < v30)
          {
            v31 = *(_QWORD *)(v14 + 8 * v29);
            if (v31)
              goto LABEL_7;
            v11 = v30 - 1;
            v33 = v15 + 6;
            while (v30 != v33)
            {
              v31 = *(_QWORD *)(v14 + 8 * v33++);
              if (v31)
              {
                v29 = v33 - 1;
                goto LABEL_7;
              }
            }
            goto LABEL_23;
          }
        }
      }
    }
  }
LABEL_24:
  v44 = v17;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(v4 + 56))(v12, 1, 1, v3);
  v20 = 0;
LABEL_25:
  *v1 = v13;
  v1[1] = v14;
  v34 = v44;
  v1[2] = v45;
  v1[3] = v34;
  v1[4] = v20;
  v35 = (void (*)(uint64_t))v1[5];
  sub_23D5F16C4((uint64_t)v12, (uint64_t)v10, &qword_256C79998);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v10, 1, v3) == 1)
  {
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79AD8);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v36 - 8) + 56))(a1, 1, 1, v36);
  }
  else
  {
    v38 = (uint64_t)v40;
    sub_23D5F16C4((uint64_t)v10, (uint64_t)v40, &qword_256C799A0);
    v35(v38);
    sub_23D5AEF8C(v38, &qword_256C799A0);
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79AD8);
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(a1, 0, 1, v39);
  }
}

uint64_t sub_23D5E5F94@<X0>(_OWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  int64_t v4;
  int64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  void (*v18)(_QWORD *);
  uint64_t result;
  int64_t v20;
  int64_t v21;
  uint64_t v22;
  unint64_t v23;
  int64_t v24;
  int64_t v25;
  _QWORD v26[8];

  v2 = *v1;
  v4 = v1[3];
  v3 = v1[4];
  v5 = v4;
  if (v3)
  {
    v6 = (v3 - 1) & v3;
    v7 = __clz(__rbit64(v3)) | (v4 << 6);
LABEL_3:
    v8 = (uint64_t *)(*(_QWORD *)(v2 + 48) + 16 * v7);
    v9 = *v8;
    v10 = v8[1];
    v11 = (uint64_t *)(*(_QWORD *)(v2 + 56) + 48 * v7);
    v12 = *v11;
    v13 = v11[1];
    v14 = v11[2];
    v15 = v11[3];
    v16 = v11[4];
    v17 = v11[5];
    v1[3] = v5;
    v1[4] = v6;
    v18 = (void (*)(_QWORD *))v1[5];
    v26[0] = v9;
    v26[1] = v10;
    v26[2] = v12;
    v26[3] = v13;
    v26[4] = v14;
    v26[5] = v15;
    v26[6] = v16;
    v26[7] = v17;
    sub_23D5AFA60(v9, v10);
    sub_23D5AFA60(v12, v13);
    sub_23D5AFA60(v14, v15);
    sub_23D5AFA60(v16, v17);
    v18(v26);
    sub_23D5DDA20(v9, v10);
    sub_23D5DDA20(v12, v13);
    sub_23D5DDA20(v14, v15);
    return sub_23D5DDA20(v16, v17);
  }
  v20 = v4 + 1;
  if (__OFADD__(v4, 1))
  {
    __break(1u);
  }
  else
  {
    v21 = (unint64_t)(v1[2] + 64) >> 6;
    if (v20 < v21)
    {
      v22 = v1[1];
      v23 = *(_QWORD *)(v22 + 8 * v20);
      if (v23)
      {
LABEL_7:
        v6 = (v23 - 1) & v23;
        v7 = __clz(__rbit64(v23)) + (v20 << 6);
        v5 = v20;
        goto LABEL_3;
      }
      v24 = v4 + 2;
      v5 = v4 + 1;
      if (v4 + 2 < v21)
      {
        v23 = *(_QWORD *)(v22 + 8 * v24);
        if (v23)
        {
LABEL_10:
          v20 = v24;
          goto LABEL_7;
        }
        v5 = v4 + 2;
        if (v4 + 3 < v21)
        {
          v23 = *(_QWORD *)(v22 + 8 * (v4 + 3));
          if (v23)
          {
            v20 = v4 + 3;
            goto LABEL_7;
          }
          v24 = v4 + 4;
          v5 = v4 + 3;
          if (v4 + 4 < v21)
          {
            v23 = *(_QWORD *)(v22 + 8 * v24);
            if (v23)
              goto LABEL_10;
            v20 = v4 + 5;
            v5 = v4 + 4;
            if (v4 + 5 < v21)
            {
              v23 = *(_QWORD *)(v22 + 8 * v20);
              if (v23)
                goto LABEL_7;
              v5 = v21 - 1;
              v25 = v4 + 6;
              while (v21 != v25)
              {
                v23 = *(_QWORD *)(v22 + 8 * v25++);
                if (v23)
                {
                  v20 = v25 - 1;
                  goto LABEL_7;
                }
              }
            }
          }
        }
      }
    }
    v1[3] = v5;
    v1[4] = 0;
    *a1 = xmmword_23D66DF30;
    a1[1] = 0u;
    a1[2] = 0u;
    a1[3] = 0u;
  }
  return result;
}

uint64_t sub_23D5E61B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v3 = *a1;
  v2 = a1[1];
  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  sub_23D5AFA60(v3, v2);
  sub_23D5AFA60(v4, v5);
  sub_23D5AFA60(v6, v7);
  return sub_23D5AFA60(v8, v9);
}

uint64_t sub_23D5E6224(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v1 = *(_QWORD *)(a1 + 56);
  if (v1)
  {
    v2 = 0;
    return __clz(__rbit64(v1)) + v2;
  }
  v5 = *(_BYTE *)(a1 + 32);
  v6 = v5 & 0x3F;
  v3 = 1 << v5;
  if (v6 < 7)
    return v3;
  v1 = *(_QWORD *)(a1 + 64);
  if (v1)
  {
    v2 = 64;
    return __clz(__rbit64(v1)) + v2;
  }
  if (v6 < 8)
    return v3;
  v1 = *(_QWORD *)(a1 + 72);
  if (v1)
  {
    v2 = 128;
    return __clz(__rbit64(v1)) + v2;
  }
  v7 = (unint64_t)(v3 + 63) >> 6;
  if (v7 <= 3)
    v7 = 3;
  v8 = v7 - 3;
  v9 = (unint64_t *)(a1 + 80);
  v2 = 128;
  while (v8)
  {
    v10 = *v9++;
    v1 = v10;
    --v8;
    v2 += 64;
    if (v10)
      return __clz(__rbit64(v1)) + v2;
  }
  return v3;
}

int64_t sub_23D5E62C4(int64_t result, int a2, char a3, uint64_t a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  if ((a3 & 1) != 0)
    goto LABEL_20;
  v4 = result;
  if (result < 0 || (result = 1 << *(_BYTE *)(a4 + 32), result <= (uint64_t)v4))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v4 >> 6;
  v6 = a4 + 56;
  v7 = *(_QWORD *)(a4 + 56 + 8 * (v4 >> 6));
  if (((v7 >> v4) & 1) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }
  if (*(_DWORD *)(a4 + 36) != a2)
  {
LABEL_19:
    __break(1u);
LABEL_20:
    __break(1u);
    return result;
  }
  v8 = v7 & (-2 << (v4 & 0x3F));
  if (v8)
    return __clz(__rbit64(v8)) | v4 & 0xFFFFFFFFFFFFFFC0;
  v9 = v5 + 1;
  v10 = (unint64_t)(result + 63) >> 6;
  if (v5 + 1 < v10)
  {
    v11 = *(_QWORD *)(v6 + 8 * v9);
    if (v11)
      return __clz(__rbit64(v11)) + (v9 << 6);
    v9 = v5 + 2;
    if (v5 + 2 < v10)
    {
      v11 = *(_QWORD *)(v6 + 8 * v9);
      if (v11)
        return __clz(__rbit64(v11)) + (v9 << 6);
      while (v10 - 3 != v5)
      {
        v11 = *(_QWORD *)(a4 + 80 + 8 * v5++);
        if (v11)
        {
          v9 = v5 + 2;
          return __clz(__rbit64(v11)) + (v9 << 6);
        }
      }
    }
  }
  return result;
}

void sub_23D5E63A8(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7)
{
  sub_23D5DD238(a1, a2, a3, a4, a5, a6, *(_QWORD *)a7, *(_QWORD *)(a7 + 8), *(_QWORD *)(a7 + 16), *(_QWORD *)(a7 + 24));
}

void sub_23D5E63D4(uint64_t a1, void *a2, void *a3, uint64_t a4, unint64_t a5, unsigned int a6, uint64_t a7)
{
  sub_23D5DD61C(a1, a2, a3, a4, a5, a6, *(_QWORD *)a7, *(_QWORD *)(a7 + 8));
}

uint64_t sub_23D5E63F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  char v5;
  char v7;
  uint64_t v8;
  __int16 v9;
  char v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v8 = a1;
  v9 = a2;
  v10 = BYTE2(a2);
  v11 = BYTE3(a2);
  v12 = BYTE4(a2);
  v13 = BYTE5(a2);
  sub_23D609AE4((uint64_t)&v8, (uint64_t)&v8 + BYTE6(a2), a3, a4);
  if (!v4)
    v5 = v7;
  return v5 & 1;
}

uint64_t sub_23D5E64C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_23D66BC88();
  v11 = result;
  if (result)
  {
    result = sub_23D66BCAC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_23D66BCA0();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_23D609AE4(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

void sub_23D5E6578(uint64_t a1, uint64_t a2)
{
  __asm { BR              X11 }
}

uint64_t sub_23D5E65C4()
{
  unint64_t v0;

  return ((uint64_t (*)(void))((char *)&loc_23D5E65F8 + *((int *)qword_23D5E67D0 + (v0 >> 62))))();
}

uint64_t sub_23D5E6608@<X0>(int a1@<W8>)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  if (v1 == BYTE6(v2))
  {
    if (v1 >= 1)
      __asm { BR              X10 }
    v3 = 1;
  }
  else
  {
    v3 = 0;
  }
  return v3 & 1;
}

void sub_23D5E67F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  sub_23D5B2734(a1, a2, *(_QWORD *)(v2 + 16), *(_QWORD *)(v2 + 24));
}

uint64_t sub_23D5E6808(char *a1, uint64_t a2)
{
  initializeWithCopy for DependencyContainer(a2, a1);
  return a2;
}

_QWORD *sub_23D5E6844(_QWORD *a1)
{
  destroy for DependencyContainer(a1);
  return a1;
}

uint64_t sub_23D5E6878(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5B40A8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48));
}

unint64_t sub_23D5E6898()
{
  unint64_t result;

  result = qword_256C79100;
  if (!qword_256C79100)
  {
    result = MEMORY[0x242636790](MEMORY[0x24BDCDDC0], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256C79100);
  }
  return result;
}

uint64_t sub_23D5E68DC(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, unint64_t a8)
{
  if (a2 >> 60 != 15)
  {
    sub_23D5DDA20(result, a2);
    sub_23D5DDA20(a3, a4);
    sub_23D5DDA20(a5, a6);
    return sub_23D5DDA20(a7, a8);
  }
  return result;
}

uint64_t sub_23D5E6950(uint64_t a1, uint64_t (*a2)(_QWORD))
{
  uint64_t v3;

  v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t type metadata accessor for Group.ValidateGroupMemberKeysTransition(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C797B0);
}

uint64_t sub_23D5E69A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t result;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;

  result = sub_23D66BC88();
  v11 = result;
  if (result)
  {
    result = sub_23D66BCAC();
    if (__OFSUB__(a1, result))
    {
LABEL_15:
      __break(1u);
      return result;
    }
    v11 += a1 - result;
  }
  v12 = __OFSUB__(a2, a1);
  v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_15;
  }
  v14 = sub_23D66BCA0();
  if (v14 >= v13)
    v15 = v13;
  else
    v15 = v14;
  v16 = v11 + v15;
  if (v11)
    v17 = v16;
  else
    v17 = 0;
  sub_23D5D9BC0(v11, v17, a4, a5);
  if (!v5)
    v18 = v19;
  return v18 & 1;
}

uint64_t sub_23D5E6A6C(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x747065636341 && a2 == 0xE600000000000000;
  if (v2 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7463656A6552 && a2 == 0xE600000000000000 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000017 && a2 == 0x800000023D677430 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x657661654CLL && a2 == 0xE500000000000000 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x796F7274736544 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else
  {
    v6 = sub_23D66C84C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 4;
    else
      return 5;
  }
}

uint64_t sub_23D5E6C68(uint64_t a1, uint64_t a2)
{
  BOOL v2;
  char v6;

  v2 = a1 == 0x7473696E696D6441 && a2 == 0xED0000726F746172;
  if (v2 || (sub_23D66C84C() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7265626D654DLL && a2 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    v6 = sub_23D66C84C();
    swift_bridgeObjectRelease();
    if ((v6 & 1) != 0)
      return 1;
    else
      return 2;
  }
}

uint64_t sub_23D5E6D74(uint64_t a1, void (*a2)(__int128 *__return_ptr, uint64_t, uint64_t))
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t result;
  int64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v16;
  int64_t v17;
  uint64_t v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  __int128 v34;
  _QWORD *v35;
  uint64_t v36;
  int64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  void (*v41)(__int128 *__return_ptr, uint64_t, uint64_t);
  __int128 v42;
  char v43;
  uint64_t v44;

  v41 = a2;
  v40 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v4 = MEMORY[0x24BDAC7A8](v40);
  v39 = (uint64_t)&v34 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v38 = (uint64_t *)((char *)&v34 - v6);
  v7 = *(_QWORD *)(a1 + 64);
  v36 = a1 + 64;
  v8 = 1 << *(_BYTE *)(a1 + 32);
  v9 = -1;
  if (v8 < 64)
    v9 = ~(-1 << v8);
  v10 = v9 & v7;
  v37 = (unint64_t)(v8 + 63) >> 6;
  v44 = a1;
  result = swift_bridgeObjectRetain();
  v12 = 0;
  v35 = (_QWORD *)MEMORY[0x24BEE4AF8];
  while (1)
  {
    if (v10)
    {
      v13 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      v14 = v13 | (v12 << 6);
      goto LABEL_19;
    }
    if (__OFADD__(v12++, 1))
    {
      __break(1u);
      goto LABEL_34;
    }
    if (v12 >= v37)
      goto LABEL_31;
    v16 = *(_QWORD *)(v36 + 8 * v12);
    if (!v16)
      break;
LABEL_18:
    v10 = (v16 - 1) & v16;
    v14 = __clz(__rbit64(v16)) + (v12 << 6);
LABEL_19:
    v18 = *(_QWORD *)(v44 + 56);
    v19 = (uint64_t *)(*(_QWORD *)(v44 + 48) + 16 * v14);
    v21 = *v19;
    v20 = v19[1];
    v22 = v18
        + *(_QWORD *)(*(_QWORD *)(type metadata accessor for GroupMembership.MemberProperties(0) - 8) + 72) * v14;
    v23 = v40;
    v24 = v38;
    sub_23D5E7298(v22, (uint64_t)v38 + *(int *)(v40 + 48), type metadata accessor for GroupMembership.MemberProperties);
    *v24 = v21;
    v24[1] = v20;
    v25 = (uint64_t)v24;
    v26 = v39;
    sub_23D5F16C4(v25, v39, &qword_256C799A0);
    v27 = v26 + *(int *)(v23 + 48);
    sub_23D5AFA60(v21, v20);
    v41(&v42, v26, v27);
    if (v2)
    {
      sub_23D5AEF8C(v26, &qword_256C799A0);
      v33 = v35;
      swift_bridgeObjectRelease();
LABEL_32:
      swift_release();
      return (uint64_t)v33;
    }
    result = sub_23D5AEF8C(v26, &qword_256C799A0);
    v28 = v43;
    if (v43 != 2)
    {
      v34 = v42;
      result = swift_isUniquelyReferenced_nonNull_native();
      if ((result & 1) == 0)
      {
        result = (uint64_t)sub_23D62B9B4(0, v35[2] + 1, 1, v35);
        v35 = (_QWORD *)result;
      }
      v30 = v35[2];
      v29 = v35[3];
      if (v30 >= v29 >> 1)
      {
        result = (uint64_t)sub_23D62B9B4((_QWORD *)(v29 > 1), v30 + 1, 1, v35);
        v35 = (_QWORD *)result;
      }
      v31 = v35;
      v35[2] = v30 + 1;
      v32 = &v31[3 * v30];
      *((_OWORD *)v32 + 2) = v34;
      *((_BYTE *)v32 + 48) = v28 & 1;
    }
  }
  v17 = v12 + 1;
  if (v12 + 1 >= v37)
    goto LABEL_31;
  v16 = *(_QWORD *)(v36 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v12 + 2;
  if (v12 + 2 >= v37)
    goto LABEL_31;
  v16 = *(_QWORD *)(v36 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v12 + 3;
  if (v12 + 3 >= v37)
    goto LABEL_31;
  v16 = *(_QWORD *)(v36 + 8 * v17);
  if (v16)
    goto LABEL_17;
  v17 = v12 + 4;
  if (v12 + 4 >= v37)
  {
LABEL_31:
    v33 = v35;
    goto LABEL_32;
  }
  v16 = *(_QWORD *)(v36 + 8 * v17);
  if (v16)
  {
LABEL_17:
    v12 = v17;
    goto LABEL_18;
  }
  while (1)
  {
    v12 = v17 + 1;
    if (__OFADD__(v17, 1))
      break;
    if (v12 >= v37)
      goto LABEL_31;
    v16 = *(_QWORD *)(v36 + 8 * v12);
    ++v17;
    if (v16)
      goto LABEL_18;
  }
LABEL_34:
  __break(1u);
  return result;
}

unint64_t sub_23D5E70D8(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v3;
  unint64_t *v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t result;
  char v14;
  uint64_t *v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = *(_QWORD *)(a1 + 16);
  if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79970);
    v3 = (_QWORD *)sub_23D66C75C();
    v4 = (unint64_t *)(a1 + 48);
    while (1)
    {
      v5 = *((_DWORD *)v4 - 4);
      v6 = *(v4 - 1);
      v7 = *v4;
      v8 = v4[1];
      v9 = v4[2];
      v10 = v4[4];
      v19 = v1;
      v20 = v4[3];
      v11 = v4[5];
      v12 = v4[6];
      result = sub_23D5DF568(v5);
      if ((v14 & 1) != 0)
        break;
      *(_QWORD *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8) + 64) |= 1 << result;
      *(_DWORD *)(v3[6] + 4 * result) = v5;
      v15 = (uint64_t *)(v3[7] + (result << 6));
      *v15 = v6;
      v15[1] = v7;
      v15[2] = v8;
      v15[3] = v9;
      v15[4] = v20;
      v15[5] = v10;
      v15[6] = v11;
      v15[7] = v12;
      v16 = v3[2];
      v17 = __OFADD__(v16, 1);
      v18 = v16 + 1;
      if (v17)
        goto LABEL_10;
      v4 += 9;
      v3[2] = v18;
      sub_23D5AFA60(v6, v7);
      sub_23D5AFA60(v8, v9);
      sub_23D5AFA60(v20, v10);
      sub_23D5AFA60(v11, v12);
      v1 = v19 - 1;
      if (v19 == 1)
        return (unint64_t)v3;
    }
    __break(1u);
LABEL_10:
    __break(1u);
  }
  else
  {
    return MEMORY[0x24BEE4B00];
  }
  return result;
}

uint64_t sub_23D5E7220(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_23D5DDA20(result, a2);
    return sub_23D5E725C(a3, a4);
  }
  return result;
}

uint64_t sub_23D5E725C(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23D5DDA20(a1, a2);
  return a1;
}

uint64_t type metadata accessor for Group(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C793B0);
}

uint64_t sub_23D5E7284(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15)
    return sub_23D5AFA60(a1, a2);
  return a1;
}

uint64_t sub_23D5E7298(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

uint64_t sub_23D5E72DC(_OWORD *a1, int a2, __int128 *a3, _QWORD *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;

  *(_QWORD *)(v6 + 432) = a5;
  *(_QWORD *)(v6 + 440) = a6;
  *(_DWORD *)(v6 + 584) = a2;
  v10 = sub_23D66C258();
  *(_QWORD *)(v6 + 448) = v10;
  *(_QWORD *)(v6 + 456) = *(_QWORD *)(v10 - 8);
  *(_QWORD *)(v6 + 464) = swift_task_alloc();
  v11 = sub_23D66C2AC();
  *(_QWORD *)(v6 + 472) = v11;
  *(_QWORD *)(v6 + 480) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(v6 + 488) = swift_task_alloc();
  *(_QWORD *)(v6 + 496) = type metadata accessor for PCSKeyPair();
  *(_QWORD *)(v6 + 504) = swift_task_alloc();
  v12 = *a3;
  *(_OWORD *)(v6 + 512) = *a1;
  *(_OWORD *)(v6 + 528) = v12;
  v13 = a4[1];
  *(_QWORD *)(v6 + 544) = *a4;
  *(_QWORD *)(v6 + 552) = v13;
  return swift_task_switch();
}

uint64_t sub_23D5E73B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD v10[3];

  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5E6808(&byte_25431AB68, v0 + 16);
  sub_23D5AEF48(v0 + 232, v0 + 272, &qword_25431A828);
  if (*(_QWORD *)(v0 + 296))
  {
    v1 = *(_QWORD *)(v0 + 552);
    v2 = *(_QWORD *)(v0 + 544);
    sub_23D5AEF30((__int128 *)(v0 + 272), v0 + 352);
    sub_23D5E6844((_QWORD *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 376);
    v4 = *(_QWORD *)(v0 + 384);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 352), v3);
    v10[0] = v2;
    v10[1] = v1;
    (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v10, 0xD000000000000022, 0x800000023D676F50, v3, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 352);
    v5 = *(_QWORD *)(v0 + 336);
    v6 = *(_QWORD *)(v0 + 344);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 312), v5);
    v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 16) + *(_QWORD *)(v6 + 16));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 560) = v7;
    *v7 = v0;
    v7[1] = sub_23D5E7654;
    return v9(*(_QWORD *)(v0 + 504), v5, v6);
  }
  else
  {
    sub_23D5AEF8C(v0 + 272, &qword_25431A828);
    return sub_23D66C720();
  }
}

uint64_t sub_23D5E7654()
{
  uint64_t v0;
  uint64_t v1;
  _QWORD *v2;
  unint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD **)v1;
  *(_QWORD *)(*(_QWORD *)v1 + 568) = v0;
  swift_task_dealloc();
  if (v0)
  {
    v3 = v2[67];
    v4 = v2[66];
    sub_23D5DDA20(v2[64], v2[65]);
    sub_23D5DDA20(v4, v3);
  }
  return swift_task_switch();
}

uint64_t sub_23D5E76E0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  __int128 v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  BOOL v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  os_log_type_t v36;
  NSObject *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t type;
  os_log_t log;
  uint64_t v69;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  NSObject *v77;
  unsigned int v78;
  uint64_t v79[2];
  __int128 v80;
  uint64_t v81[5];

  v1 = v0 + 312;
  v2 = *(_QWORD *)(v0 + 568);
  v3 = *(_OWORD *)(v0 + 528);
  v80 = *(_OWORD *)(v0 + 512);
  *(_OWORD *)v81 = v3;
  sub_23D63FCA4((uint64_t *)&v80, v81);
  if (v2)
  {
    v4 = *(_QWORD *)(v0 + 536);
    v5 = *(_QWORD *)(v0 + 528);
    v6 = *(_QWORD *)(v0 + 520);
    v8 = *(_QWORD *)(v0 + 504);
    v7 = *(_QWORD *)(v0 + 512);
    sub_23D5DDA20(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
    sub_23D5E6950(v8, (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
    sub_23D5DDA20(v5, v4);
    sub_23D5DDA20(v7, v6);
  }
  else
  {
    v9 = *((_QWORD *)&v72 + 1);
    if (*((_QWORD *)&v72 + 1) >> 60 == 15)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v10 = *(_QWORD *)(v0 + 536);
      v11 = *(_QWORD *)(v0 + 528);
      v12 = *(_QWORD *)(v0 + 520);
      v13 = *(_QWORD *)(v0 + 512);
      v14 = sub_23D66BFDC();
      __swift_project_value_buffer(v14, (uint64_t)qword_256C88B78);
      v15 = sub_23D66C588();
      sub_23D5AFA60(v13, v12);
      sub_23D5AFA60(v11, v10);
      v16 = sub_23D66BFC4();
      v17 = v15;
      v18 = os_log_type_enabled(v16, v15);
      v19 = *(_QWORD *)(v0 + 536);
      v20 = *(_QWORD *)(v0 + 528);
      v21 = *(_QWORD *)(v0 + 520);
      v22 = *(_QWORD *)(v0 + 512);
      if (v18)
      {
        v23 = swift_slowAlloc();
        v69 = swift_slowAlloc();
        *(_QWORD *)&v72 = v69;
        *(_DWORD *)v23 = 136315394;
        sub_23D5AFA60(v22, v21);
        v24 = sub_23D66BD30();
        v26 = v25;
        sub_23D5DDA20(v22, v21);
        *(_QWORD *)(v0 + 416) = sub_23D5DDBDC(v24, v26, (uint64_t *)&v72);
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v22, v21);
        sub_23D5DDA20(v22, v21);
        *(_WORD *)(v23 + 12) = 2080;
        sub_23D5AFA60(v20, v19);
        v27 = sub_23D66BD30();
        v29 = v28;
        sub_23D5DDA20(v20, v19);
        *(_QWORD *)(v0 + 424) = sub_23D5DDBDC(v27, v29, (uint64_t *)&v72);
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v20, v19);
        sub_23D5DDA20(v20, v19);
        _os_log_impl(&dword_23D5A8000, v16, v17, "GroupAccessInfo not found in storage for groupID %s and userID %s", (uint8_t *)v23, 0x16u);
        swift_arrayDestroy();
        MEMORY[0x242636844](v69, -1, -1);
        MEMORY[0x242636844](v23, -1, -1);
      }
      else
      {
        sub_23D5DDA20(*(_QWORD *)(v0 + 512), *(_QWORD *)(v0 + 520));
        sub_23D5DDA20(v22, v21);
        sub_23D5DDA20(v20, v19);
        sub_23D5DDA20(v20, v19);
      }

      v44 = *(_QWORD *)(v0 + 504);
      v46 = *(_QWORD *)(v0 + 432);
      v45 = *(_QWORD *)(v0 + 440);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v47 = 358;
      *(_OWORD *)(v47 + 8) = xmmword_23D66E4C0;
      *(_QWORD *)(v47 + 24) = 0x800000023D678320;
      *(_QWORD *)(v47 + 32) = 0xD000000000000052;
      *(_QWORD *)(v47 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20(v46, v45);
      sub_23D5E6950(v44, (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
      v1 = v0 + 312;
    }
    else
    {
      v30 = v73;
      v65 = v74;
      v66 = v75;
      type = v76;
      log = v77;
      v31 = *(_DWORD *)(v0 + 584);
      v32 = *(_QWORD *)(v0 + 536);
      v33 = *(_QWORD *)(v0 + 528);
      v34 = *(_QWORD *)(v0 + 520);
      v70 = v78;
      v64 = *((_QWORD *)&v73 + 1);
      if (v78 <= v31)
      {
        v48 = *(_QWORD *)(v0 + 504);
        v59 = *(_QWORD *)(v0 + 496);
        v49 = *(_QWORD *)(v0 + 480);
        v51 = *(_QWORD *)(v0 + 464);
        v50 = *(_QWORD *)(v0 + 472);
        v52 = *(_QWORD *)(v0 + 448);
        v53 = *(_QWORD *)(v0 + 456);
        v60 = *(_QWORD **)(v0 + 440);
        v61 = *(_QWORD *)(v0 + 488);
        v62 = *(_QWORD *)(v0 + 432);
        v79[0] = *(_QWORD *)(v0 + 512);
        v79[1] = v34;
        *(_QWORD *)&v80 = v33;
        *((_QWORD *)&v80 + 1) = v32;
        v54 = v72;
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v49 + 16))(v61, v48, v50);
        v55 = *((_QWORD *)&v72 + 1);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16))(v51, v48 + *(int *)(v59 + 20), v52);
        *(_OWORD *)v81 = v72;
        v72 = v73;
        type metadata accessor for Group(0);
        v56 = swift_allocObject();
        sub_23D5AFA60(v54, v55);
        sub_23D5AFA60(v73, *((unint64_t *)&v73 + 1));
        sub_23D5B93A4(v79, v31, (uint64_t *)&v80, v61, v51, v81, (uint64_t *)&v72, v62, v60);
        v57 = *(_QWORD *)(v0 + 504);
        sub_23D5E68DC(v54, v55, v30, v64, v65, v66, type, (unint64_t)log);
        sub_23D5E6950(v57, (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
        __swift_destroy_boxed_opaque_existential_1(v0 + 312);
        swift_task_dealloc();
        swift_task_dealloc();
        swift_task_dealloc();
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v56);
      }
      v63 = v72;
      v71 = v73;
      sub_23D5DDA20(*(_QWORD *)(v0 + 512), v34);
      sub_23D5DDA20(v33, v32);
      if (qword_256C78B10 != -1)
        swift_once();
      v35 = sub_23D66BFDC();
      __swift_project_value_buffer(v35, (uint64_t)qword_256C88B78);
      v36 = sub_23D66C588();
      v37 = sub_23D66BFC4();
      if (os_log_type_enabled(v37, v36))
      {
        v38 = *(_DWORD *)(v0 + 584);
        v39 = swift_slowAlloc();
        *(_DWORD *)v39 = 67109376;
        *(_DWORD *)(v0 + 576) = v70;
        sub_23D66C5D0();
        *(_WORD *)(v39 + 8) = 1024;
        *(_DWORD *)(v0 + 580) = v38;
        sub_23D66C5D0();
        _os_log_impl(&dword_23D5A8000, v37, v36, "GroupAccessInfo version needs more recent version of the group, checked %u against %u", (uint8_t *)v39, 0xEu);
        MEMORY[0x242636844](v39, -1, -1);
      }
      v40 = *(_QWORD *)(v0 + 504);
      v42 = *(_QWORD *)(v0 + 432);
      v41 = *(_QWORD *)(v0 + 440);

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v43 = 398;
      *(_OWORD *)(v43 + 8) = xmmword_23D66E4B0;
      *(_QWORD *)(v43 + 24) = 0x800000023D678320;
      *(_QWORD *)(v43 + 32) = 0xD000000000000052;
      *(_QWORD *)(v43 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20(v42, v41);
      sub_23D5E68DC(v63, v9, v71, v64, v65, v66, type, (unint64_t)log);
      sub_23D5E6950(v40, (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
    }
  }
  __swift_destroy_boxed_opaque_existential_1(v1);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D5E7EC4()
{
  uint64_t v0;

  sub_23D5DDA20(*(_QWORD *)(v0 + 432), *(_QWORD *)(v0 + 440));
  __swift_destroy_boxed_opaque_existential_1(v0 + 312);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D5E7F2C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_23D5AFA60(a2, a3);
  return result;
}

uint64_t sub_23D5E7F48(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t result;

  if (a3 >> 60 != 15)
    return sub_23D5DDA20(a2, a3);
  return result;
}

uint64_t sub_23D5E7F64(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_23D5E7FA8(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a2 >> 60 != 15)
  {
    sub_23D5AFA60(result, a2);
    return sub_23D5E7284(a3, a4);
  }
  return result;
}

uint64_t sub_23D5E7FE4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_23D5DDA20(result, a2);
    sub_23D5DDA20(a3, a4);
    return sub_23D5DDA20(a5, a6);
  }
  return result;
}

unint64_t sub_23D5E803C()
{
  unint64_t result;

  result = qword_256C79180;
  if (!qword_256C79180)
  {
    result = MEMORY[0x242636790](&unk_23D673474, &type metadata for AdminSeed);
    atomic_store(result, (unint64_t *)&qword_256C79180);
  }
  return result;
}

uint64_t sub_23D5E8080()
{
  _QWORD *v0;
  unint64_t v1;

  sub_23D5DDA20(v0[2], v0[3]);
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_23D5DDA20(v0[4], v1);
  return swift_deallocObject();
}

uint64_t sub_23D5E80BC(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  os_log_type_t v22;
  NSObject *v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  _QWORD v28[7];
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *__s1[4];

  __s1[2] = *(_QWORD **)MEMORY[0x24BDAC8D0];
  v5 = sub_23D66C330();
  v33 = *(_QWORD *)(v5 - 8);
  v34 = v5;
  v6 = MEMORY[0x24BDAC7A8](v5);
  v32 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v31 = (char *)v28 - v8;
  v36 = sub_23D66C210();
  v41 = *(_QWORD *)(v36 - 8);
  v9 = MEMORY[0x24BDAC7A8](v36);
  v35 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v40 = (char *)v28 - v11;
  v12 = *a1;
  v13 = (_QWORD *)a2[2];
  if (*(_QWORD **)(v12 + 16) == v13)
  {
    v14 = swift_bridgeObjectRetain();
    v15 = (_QWORD *)sub_23D5B214C(v14);
    swift_bridgeObjectRelease();
    __s1[0] = v15;
    swift_bridgeObjectRetain();
    sub_23D5DD134(__s1);
    if (v2)
    {
      swift_release();
      __break(1u);
      JUMPOUT(0x23D5E9010);
    }
    swift_bridgeObjectRelease();
    v16 = __s1[0];
    __s1[0] = a2;
    swift_bridgeObjectRetain();
    sub_23D5DD134(__s1);
    v17 = __s1[0];
    if (v16[2])
    {
      v28[3] = 0;
      v30 = type metadata accessor for UserKeyingInfo(0);
      v18 = *(_QWORD *)(v30 - 8);
      v39 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v19 = *(_QWORD *)(v18 + 72);
      v28[2] = v16;
      v28[6] = v17;
      v28[5] = v19;
      if (v17[2])
      {
        v20 = *(_QWORD *)((char *)v16 + v39 + 8);
        v37 = (char *)v16 + v19;
        v38 = 1;
        v42 = v17;
        __asm { BR              X8 }
      }
      __break(1u);
      JUMPOUT(0x23D5E8F4CLL);
    }
    swift_release();
    swift_release();
    v26 = 1;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v21 = sub_23D66BFDC();
    __swift_project_value_buffer(v21, (uint64_t)qword_256C88B78);
    v22 = sub_23D66C588();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v23 = sub_23D66BFC4();
    if (os_log_type_enabled(v23, v22))
    {
      v24 = swift_slowAlloc();
      *(_DWORD *)v24 = 134218240;
      __s1[0] = *(_QWORD **)(v12 + 16);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      *(_WORD *)(v24 + 12) = 2048;
      __s1[0] = v13;
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v23, v22, "mismatch number of keying info, expected %ld got %ld", (uint8_t *)v24, 0x16u);
      MEMORY[0x242636844](v24, -1, -1);

    }
    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v25 = 341;
    *(_OWORD *)(v25 + 8) = xmmword_23D66E4D0;
    *(_QWORD *)(v25 + 24) = 0x800000023D6780B0;
    *(_QWORD *)(v25 + 32) = 0xD000000000000052;
    *(_QWORD *)(v25 + 40) = 0x800000023D676EF0;
    swift_willThrow();
  }
  return v26 & 1;
}

uint64_t sub_23D5E9040()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  char *v14;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v16;
  _QWORD v18[6];
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v0 = sub_23D66C018();
  v1 = *(_QWORD *)(v0 - 8);
  MEMORY[0x24BDAC7A8](v0);
  v3 = (char *)v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = type metadata accessor for UserKeyingInfo(0);
  v4 = *(_QWORD *)(v22 - 8);
  MEMORY[0x24BDAC7A8](v22);
  v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = sub_23D66C354();
  v7 = *(_QWORD *)(v19 - 8);
  MEMORY[0x24BDAC7A8](v19);
  v9 = (char *)v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = swift_bridgeObjectRetain();
  v11 = (_QWORD *)sub_23D5B214C(v10);
  swift_bridgeObjectRelease();
  v24 = v11;
  swift_bridgeObjectRetain();
  sub_23D5DD134(&v24);
  swift_bridgeObjectRelease();
  v12 = v24;
  v21 = v9;
  sub_23D66C348();
  if (v12[2])
  {
    v18[1] = 0;
    v18[2] = v7;
    v18[3] = v3;
    v18[4] = v1;
    v18[5] = v0;
    v13 = *(unsigned __int8 *)(v4 + 80);
    v18[0] = v12;
    v20 = *(_QWORD *)(v4 + 72);
    sub_23D5E7298((uint64_t)v12 + ((v13 + 32) & ~v13), (uint64_t)v6, type metadata accessor for UserKeyingInfo);
    __asm { BR              X9 }
  }
  swift_release();
  v14 = v21;
  sub_23D66C33C();
  v25 = v0;
  v26 = sub_23D5AE928(&qword_256C79AC8, (uint64_t (*)(uint64_t))MEMORY[0x24BDC62F0], MEMORY[0x24BDC62D8]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v24);
  (*(void (**)(uint64_t *, char *, uint64_t))(v1 + 16))(boxed_opaque_existential_1, v3, v0);
  __swift_project_boxed_opaque_existential_1(&v24, v25);
  sub_23D66BCC4();
  (*(void (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  v16 = v23;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v24);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v14, v19);
  return v16;
}

uint64_t sub_23D5E9A78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD v23[5];

  v5 = type metadata accessor for GKCrypto_VersionedSeed(0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (int *)((char *)&v23[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  sub_23D5AFA60(v8, v9);
  sub_23D61BF0C(v8, v9);
  if (!v2)
  {
    v12 = v10;
    v13 = v11;
    if (*(_DWORD *)a1 == (_DWORD)a2)
    {
      v23[3] = &type metadata for MemberSeed;
      v23[4] = sub_23D5ED1F8();
      v23[0] = v12;
      v23[1] = v13;
      sub_23D5AFA60(v12, v13);
      a2 = sub_23D61DD8C(v23, 1);
      sub_23D5DDA20(v12, v13);
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v23);
    }
    else
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v14 = sub_23D66BFDC();
      __swift_project_value_buffer(v14, (uint64_t)qword_256C88B78);
      v15 = sub_23D66C588();
      sub_23D5E7298(a1, (uint64_t)v7, type metadata accessor for GKCrypto_VersionedSeed);
      v16 = sub_23D66BFC4();
      v17 = v15;
      if (os_log_type_enabled(v16, v15))
      {
        v18 = swift_slowAlloc();
        *(_DWORD *)v18 = 67109376;
        v19 = *v7;
        sub_23D5E6950((uint64_t)v7, type metadata accessor for GKCrypto_VersionedSeed);
        LODWORD(v23[0]) = v19;
        sub_23D66C5D0();
        *(_WORD *)(v18 + 8) = 1024;
        LODWORD(v23[0]) = a2;
        sub_23D66C5D0();
        _os_log_impl(&dword_23D5A8000, v16, v17, "seed and group version mismatch, got %u expected %u", (uint8_t *)v18, 0xEu);
        MEMORY[0x242636844](v18, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v7, type metadata accessor for GKCrypto_VersionedSeed);
      }

      a2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v20 = 334;
      *(_OWORD *)(v20 + 8) = xmmword_23D66E4E0;
      *(_QWORD *)(v20 + 24) = 0x800000023D678200;
      *(_QWORD *)(v20 + 32) = 0xD000000000000052;
      *(_QWORD *)(v20 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20(v12, v13);
    }
  }
  return a2;
}

uint64_t sub_23D5E9D7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  os_log_type_t v26;
  NSObject *v27;
  os_log_type_t v28;
  uint8_t *v29;
  uint64_t v30;
  uint64_t v32;
  os_log_type_t v33;
  NSObject *v34;
  os_log_type_t v35;
  uint8_t *v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  __int128 v61;
  uint64_t v62;

  v58 = a3;
  v5 = sub_23D66C2DC();
  v55 = *(_QWORD *)(v5 - 8);
  v56 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v60 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v62 = type metadata accessor for UserKeyingInfo(0);
  v10 = *(_QWORD *)(v62 - 8);
  MEMORY[0x24BDAC7A8](v62);
  v59 = (uint64_t)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = type metadata accessor for GroupMembership.MemberProperties(0);
  v16 = *(_QWORD *)(v15 - 8);
  MEMORY[0x24BDAC7A8](v15);
  v18 = (char *)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = *a2;
  if (*(_QWORD *)(*a2 + 16))
  {
    v20 = *a1;
    v21 = a1[1];
    sub_23D5AFA60(v20, v21);
    v22 = sub_23D5DF394(v20, v21);
    if ((v23 & 1) != 0)
    {
      sub_23D5E7298(*(_QWORD *)(v19 + 56) + *(_QWORD *)(v16 + 72) * v22, (uint64_t)v14, type metadata accessor for GroupMembership.MemberProperties);
      v24 = 0;
    }
    else
    {
      v24 = 1;
    }
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, v24, 1, v15);
    sub_23D5DDA20(v20, v21);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15) == 1)
      goto LABEL_7;
    sub_23D5E7F64((uint64_t)v14, (uint64_t)v18, type metadata accessor for GroupMembership.MemberProperties);
    if ((*v18 & 1) != 0)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v32 = sub_23D66BFDC();
      __swift_project_value_buffer(v32, (uint64_t)qword_256C88B78);
      v33 = sub_23D66C588();
      v34 = sub_23D66BFC4();
      v35 = v33;
      if (os_log_type_enabled(v34, v33))
      {
        v36 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v36 = 0;
        _os_log_impl(&dword_23D5A8000, v34, v35, "originator not administrator", v36, 2u);
        MEMORY[0x242636844](v36, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v37 = 337;
      v38 = xmmword_23D66E510;
    }
    else
    {
      sub_23D5AEF48((uint64_t)&v18[*(int *)(v15 + 24)], (uint64_t)v9, &qword_256C79990);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1, v62) != 1)
      {
        v44 = v59;
        sub_23D5E7F64((uint64_t)v9, v59, type metadata accessor for UserKeyingInfo);
        v45 = v58;
        v46 = *(_QWORD *)(v58 + 32);
        *(_QWORD *)&v61 = *(_QWORD *)(v58 + 24);
        *((_QWORD *)&v61 + 1) = v46;
        sub_23D5AFA60(v61, v46);
        sub_23D5E6898();
        v47 = v60;
        v48 = v57;
        sub_23D66C2C4();
        if (!v48)
        {
          v61 = *(_OWORD *)(v45 + 8);
          if ((sub_23D66C2E8() & 1) == 0)
          {
            if (qword_256C78B10 != -1)
              swift_once();
            v49 = sub_23D66BFDC();
            __swift_project_value_buffer(v49, (uint64_t)qword_256C88B78);
            v50 = sub_23D66C588();
            v51 = sub_23D66BFC4();
            v52 = v50;
            if (os_log_type_enabled(v51, v50))
            {
              v53 = (uint8_t *)swift_slowAlloc();
              *(_WORD *)v53 = 0;
              _os_log_impl(&dword_23D5A8000, v51, v52, "originator signature in GroupBlob failed verification", v53, 2u);
              MEMORY[0x242636844](v53, -1, -1);
            }

            __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
            sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
            swift_allocError();
            *(_WORD *)v54 = 343;
            *(_OWORD *)(v54 + 8) = xmmword_23D66E4F0;
            *(_QWORD *)(v54 + 24) = 0x800000023D6781B0;
            *(_QWORD *)(v54 + 32) = 0xD000000000000052;
            *(_QWORD *)(v54 + 40) = 0x800000023D676EF0;
            swift_willThrow();
          }
          (*(void (**)(char *, uint64_t))(v55 + 8))(v47, v56);
        }
        sub_23D5E6950(v44, type metadata accessor for UserKeyingInfo);
        return sub_23D5E6950((uint64_t)v18, type metadata accessor for GroupMembership.MemberProperties);
      }
      sub_23D5AEF8C((uint64_t)v9, &qword_256C79990);
      if (qword_256C78B10 != -1)
        swift_once();
      v39 = sub_23D66BFDC();
      __swift_project_value_buffer(v39, (uint64_t)qword_256C88B78);
      v40 = sub_23D66C588();
      v41 = sub_23D66BFC4();
      v42 = v40;
      if (os_log_type_enabled(v41, v40))
      {
        v43 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v43 = 0;
        _os_log_impl(&dword_23D5A8000, v41, v42, "originator missing key info", v43, 2u);
        MEMORY[0x242636844](v43, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v37 = 339;
      v38 = xmmword_23D66E500;
    }
    *(_OWORD *)(v37 + 8) = v38;
    *(_QWORD *)(v37 + 24) = 0x800000023D6781B0;
    *(_QWORD *)(v37 + 32) = 0xD000000000000052;
    *(_QWORD *)(v37 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    return sub_23D5E6950((uint64_t)v18, type metadata accessor for GroupMembership.MemberProperties);
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1, 1, v15);
LABEL_7:
  sub_23D5AEF8C((uint64_t)v14, &qword_256C79178);
  if (qword_256C78B10 != -1)
    swift_once();
  v25 = sub_23D66BFDC();
  __swift_project_value_buffer(v25, (uint64_t)qword_256C88B78);
  v26 = sub_23D66C588();
  v27 = sub_23D66BFC4();
  v28 = v26;
  if (os_log_type_enabled(v27, v26))
  {
    v29 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v29 = 0;
    _os_log_impl(&dword_23D5A8000, v27, v28, "originator not contained in membership list of group", v29, 2u);
    MEMORY[0x242636844](v29, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v30 = 336;
  *(_OWORD *)(v30 + 8) = xmmword_23D66E520;
  *(_QWORD *)(v30 + 24) = 0x800000023D6781B0;
  *(_QWORD *)(v30 + 32) = 0xD000000000000052;
  *(_QWORD *)(v30 + 40) = 0x800000023D676EF0;
  return swift_willThrow();
}

uint64_t sub_23D5EA584(uint64_t *a1, unsigned int a2, uint64_t *a3, uint64_t a4, unint64_t a5, uint64_t *a6, uint64_t *a7, uint64_t *a8, uint64_t a9, unint64_t a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t inited;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  _QWORD *v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  _QWORD *v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t (*v95)(_QWORD, _QWORD, _QWORD);
  uint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  __int128 v99;
  char v100;
  char v101;
  _QWORD *v102;
  uint64_t v103;
  uint64_t v104;
  int v105;
  _DWORD *v106;
  uint64_t v107;
  os_log_type_t v108;
  NSObject *v109;
  os_log_type_t v110;
  _BOOL4 v111;
  uint64_t v112;
  uint8_t *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  unint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  unint64_t v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  unint64_t v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  _DWORD *v139;
  int v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  os_log_type_t v147;
  uint64_t v148;
  NSObject *v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _DWORD *v153;
  _QWORD *v154;
  unint64_t v155;
  unint64_t v156;
  char v157;
  char v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  uint64_t v162;
  _QWORD *v163;
  int v164;
  uint64_t v165;
  uint64_t v166;
  os_log_type_t v167;
  NSObject *v168;
  os_log_type_t v169;
  uint8_t *v170;
  uint64_t v171;
  __int128 v172;
  uint64_t v173;
  unint64_t v174;
  char *v175;
  char *v176;
  void (*v177)(char *, uint64_t);
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  char v181;
  uint64_t v182;
  unint64_t v183;
  unint64_t v184;
  uint64_t v185;
  _QWORD *v186;
  char *v187;
  char *v188;
  uint64_t v189;
  unint64_t v190;
  unint64_t v191;
  void (*v192)(char *, uint64_t);
  char v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  char v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  os_log_type_t v205;
  NSObject *v206;
  os_log_type_t v207;
  uint8_t *v208;
  uint64_t v209;
  uint64_t *v210;
  uint64_t *v211;
  uint64_t v212;
  os_log_type_t v213;
  NSObject *v214;
  os_log_type_t v215;
  uint8_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  char v230;
  uint64_t v231;
  unint64_t v232;
  unint64_t v233;
  uint64_t v234;
  _QWORD *v235;
  uint64_t v236;
  os_log_type_t v237;
  NSObject *v238;
  os_log_type_t v239;
  uint8_t *v240;
  uint64_t v241;
  uint64_t v242;
  unint64_t v243;
  unint64_t v244;
  uint64_t v245;
  _QWORD *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unint64_t v250;
  unint64_t v251;
  unint64_t v252;
  uint64_t v253;
  uint64_t v254;
  unint64_t v255;
  unint64_t v256;
  void (*v257)(uint64_t, uint64_t);
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  unint64_t v263;
  uint64_t v264;
  char *v265;
  uint64_t v266;
  char *v267;
  char *v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  uint64_t v272;
  char *v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  uint64_t v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  _DWORD *v286;
  uint64_t v287;
  uint64_t v288;
  _DWORD *v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  unint64_t v293;
  _DWORD *v294;
  uint64_t v295;
  uint64_t v296;
  unint64_t v297;
  uint64_t v298;
  unint64_t v299;
  uint64_t v300;
  _QWORD *v301;
  uint64_t *v302;
  uint64_t v303;
  unint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  unint64_t v311;
  unint64_t v312;
  uint64_t v313;
  unint64_t v314;
  uint64_t v315;
  uint64_t v316;
  char *v317;
  unint64_t v318;
  uint64_t v319;
  unint64_t v320;
  __int128 v321;
  __int128 v322;
  _DWORD *v323;
  uint64_t v324;

  v311 = a5;
  v284 = a4;
  v324 = *MEMORY[0x24BDAC8D0];
  v269 = sub_23D66C2DC();
  v266 = *(_QWORD *)(v269 - 8);
  MEMORY[0x24BDAC7A8](v269);
  v267 = (char *)&v259 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v17);
  v275 = (uint64_t)&v259 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v19);
  v270 = (uint64_t)&v259 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  MEMORY[0x24BDAC7A8](v21);
  v274 = (uint64_t)&v259 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v277 = sub_23D66C330();
  v276 = *(_QWORD *)(v277 - 8);
  v23 = MEMORY[0x24BDAC7A8](v277);
  v268 = (char *)&v259 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v23);
  v273 = (char *)&v259 - v25;
  v272 = sub_23D66C2AC();
  v271 = *(_QWORD *)(v272 - 8);
  MEMORY[0x24BDAC7A8](v272);
  v278 = (char *)&v259 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = sub_23D66C210();
  v281 = *(_QWORD *)(v282 - 8);
  MEMORY[0x24BDAC7A8](v282);
  v280 = (char *)&v259 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  v283 = sub_23D66C258();
  v279 = *(_QWORD *)(v283 - 8);
  v28 = MEMORY[0x24BDAC7A8](v283);
  v265 = (char *)&v259 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v28);
  v285 = (char *)&v259 - v30;
  v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  v32 = MEMORY[0x24BDAC7A8](v31);
  v287 = (uint64_t)&v259 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v34 = MEMORY[0x24BDAC7A8](v32);
  v290 = (uint64_t)&v259 - v35;
  MEMORY[0x24BDAC7A8](v34);
  v295 = (uint64_t)&v259 - v36;
  v296 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v293 = *(_QWORD *)(v296 - 8);
  v37 = MEMORY[0x24BDAC7A8](v296);
  v286 = (_DWORD *)((char *)&v259 - ((v38 + 15) & 0xFFFFFFFFFFFFFFF0));
  v39 = MEMORY[0x24BDAC7A8](v37);
  v289 = (_DWORD *)((char *)&v259 - v40);
  MEMORY[0x24BDAC7A8](v39);
  v294 = (_DWORD *)((char *)&v259 - v41);
  v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
  MEMORY[0x24BDAC7A8](v42);
  v301 = (uint64_t *)((char *)&v259 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0));
  v300 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v299 = *(_QWORD *)(v300 - 8);
  MEMORY[0x24BDAC7A8](v300);
  v302 = (uint64_t *)((char *)&v259 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0));
  v45 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v45);
  v303 = (uint64_t)&v259 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  v304 = type metadata accessor for GKCrypto_AdminPlainText(0);
  v47 = MEMORY[0x24BDAC7A8](v304);
  v288 = (uint64_t)&v259 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v47);
  v305 = (uint64_t *)((char *)&v259 - v49);
  v307 = sub_23D66C108();
  v306 = *(_QWORD *)(v307 - 8);
  MEMORY[0x24BDAC7A8](v307);
  v310 = (char *)&v259 - ((v50 + 15) & 0xFFFFFFFFFFFFFFF0);
  v309 = sub_23D66C054();
  v308 = *(_QWORD *)(v309 - 8);
  v51 = MEMORY[0x24BDAC7A8](v309);
  v264 = (uint64_t)&v259 - ((v52 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v51);
  v313 = (uint64_t)&v259 - v53;
  v55 = *a1;
  v54 = a1[1];
  v56 = *a6;
  v57 = a6[1];
  v298 = *a7;
  v297 = a7[1];
  v292 = *a8;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  *(_QWORD *)(inited + 32) = v55;
  *(_QWORD *)(inited + 40) = v54;
  v291 = a2;
  LODWORD(v321) = bswap32(a2);
  sub_23D5AFA60(v55, v54);
  *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)&v321, (uint64_t)&v321 + 4);
  *(_QWORD *)(inited + 56) = v59;
  v60 = a3[1];
  v315 = *a3;
  v61 = a3[2];
  v62 = a3[3];
  *(_QWORD *)&v321 = v56;
  *((_QWORD *)&v321 + 1) = v57;
  if (qword_256C78B40 != -1)
    swift_once();
  v314 = v60;
  v63 = qword_256C88BE0;
  v64 = *(_QWORD *)algn_256C88BE8;
  sub_23D5AFA60(qword_256C88BE0, *(unint64_t *)algn_256C88BE8);
  sub_23D5AFA60(v63, v64);
  swift_bridgeObjectRetain();
  v65 = (_QWORD *)inited;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v65 = sub_23D62B638(0, 3, 1, (_QWORD *)inited);
  v67 = v65[2];
  v66 = v65[3];
  if (v67 >= v66 >> 1)
    v65 = sub_23D62B638((_QWORD *)(v66 > 1), v67 + 1, 1, v65);
  v65[2] = v67 + 1;
  v68 = &v65[2 * v67];
  v68[4] = v63;
  v68[5] = v64;
  sub_23D5DDA20(v63, v64);
  v69 = sub_23D62FE18((uint64_t)v65);
  v71 = v70;
  swift_bridgeObjectRelease();
  v72 = v313;
  v73 = v315;
  v74 = v314;
  v75 = v312;
  sub_23D6457DC(v311, (uint64_t *)&v321, v69, v71, v315, v314, v313);
  if (v75)
  {
    swift_bridgeObjectRelease();
    return sub_23D5DDA20(v69, v71);
  }
  sub_23D5DDA20(v69, v71);
  sub_23D5AFA60(v73, v74);
  swift_bridgeObjectRetain();
  sub_23D5AFA60(v73, v74);
  v77 = (_QWORD *)inited;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v77 = sub_23D62B638(0, *(_QWORD *)(inited + 16) + 1, 1, (_QWORD *)inited);
  v79 = v77[2];
  v78 = v77[3];
  v80 = v310;
  if (v79 >= v78 >> 1)
    v77 = sub_23D62B638((_QWORD *)(v78 > 1), v79 + 1, 1, v77);
  v77[2] = v79 + 1;
  v81 = &v77[2 * v79];
  v82 = v315;
  v83 = v314;
  v81[4] = v315;
  v81[5] = v83;
  sub_23D5DDA20(v82, v83);
  v84 = sub_23D62FE18((uint64_t)v77);
  v86 = v85;
  swift_bridgeObjectRelease();
  sub_23D5AFA60(v61, v62);
  sub_23D6526B0(v61, v62);
  *(_QWORD *)&v321 = v84;
  *((_QWORD *)&v321 + 1) = v86;
  v87 = sub_23D5E6898();
  v88 = v84;
  v89 = sub_23D66C090();
  v91 = (uint64_t *)v90;
  v263 = v87;
  v311 = v88;
  v312 = v86;
  v323 = 0;
  v321 = 0u;
  v322 = 0u;
  sub_23D5AFA60(v89, v90);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C79A18, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D6714FC);
  v92 = v305;
  v93 = v304;
  sub_23D66BF10();
  v94 = (uint64_t)v92 + *(int *)(v93 + 28);
  v95 = (uint64_t (*)(_QWORD, _QWORD, _QWORD))v301;
  sub_23D5AEF48(v94, (uint64_t)v301, &qword_256C79A28);
  if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(v299 + 48))(v95, 1, v300) == 1)
  {
    v96 = v302;
    *(_OWORD *)v302 = xmmword_23D66DF40;
    sub_23D66BE5C();
    sub_23D5AEF8C((uint64_t)v95, &qword_256C79A28);
  }
  else
  {
    v96 = v302;
    sub_23D5E7F64((uint64_t)v95, (uint64_t)v302, type metadata accessor for GKCrypto_AdminMetaData);
  }
  v98 = *v96;
  v97 = v96[1];
  sub_23D5AFA60(*v96, v97);
  sub_23D5E6950((uint64_t)v96, type metadata accessor for GKCrypto_AdminMetaData);
  GroupKitUserID.init(_:)(v98, v97);
  v303 = v89;
  v99 = v321;
  sub_23D5E6578(v321, *((uint64_t *)&v321 + 1));
  v101 = v100;
  sub_23D5DDA20(v99, *((unint64_t *)&v99 + 1));
  v102 = v305;
  if ((v101 & 1) != 0)
  {
    v302 = v91;
    v103 = (uint64_t)v305 + *(int *)(v304 + 24);
    v104 = v295;
    sub_23D5AEF48(v103, v295, &qword_256C799D0);
    v301 = *(_QWORD **)(v293 + 48);
    v105 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v301)(v104, 1, v296);
    v300 = v103;
    v106 = v294;
    if (v105 == 1)
    {
      *v294 = 0;
      *(_OWORD *)(v106 + 2) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v104, &qword_256C799D0);
    }
    else
    {
      sub_23D5E7F64(v104, (uint64_t)v294, type metadata accessor for GKCrypto_VersionedSeed);
    }
    v115 = *((_QWORD *)v106 + 1);
    v116 = *((_QWORD *)v106 + 2);
    sub_23D5AFA60(v115, v116);
    sub_23D5E6950((uint64_t)v106, type metadata accessor for GKCrypto_VersionedSeed);
    sub_23D61BC58(v115, v116);
    v118 = v117;
    v120 = v119;
    v122 = v121;
    v124 = v123;
    *(_QWORD *)&v321 = v292;
    v125 = sub_23D5E9040();
    v127 = v126;
    *((_QWORD *)&v322 + 1) = &type metadata for AdminSeed;
    v294 = (_DWORD *)sub_23D5E803C();
    v323 = v294;
    v128 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v321 = v128;
    v128[2] = v118;
    v128[3] = v120;
    v128[4] = v122;
    v128[5] = v124;
    sub_23D5AFA60(v118, v120);
    sub_23D5E7284(v122, v124);
    v295 = v125;
    v299 = v127;
    v129 = sub_23D61E134(&v321, 1);
    v131 = v130;
    v260 = v118;
    v261 = v120;
    v262 = v122;
    v293 = v124;
    v133 = v132;
    v135 = v134;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    v317 = v129;
    v318 = v133;
    v319 = v135;
    v320 = v131;
    v136 = v295;
    sub_23D619308(v295, v299);
    v137 = v290;
    sub_23D5AEF48(v300, v290, &qword_256C799D0);
    v138 = v136;
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v301)(v137, 1, v296) == 1)
    {
      v139 = v289;
      *v289 = 0;
      *(_OWORD *)(v139 + 2) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v137, &qword_256C799D0);
    }
    else
    {
      v139 = v289;
      sub_23D5E7F64(v137, (uint64_t)v289, type metadata accessor for GKCrypto_VersionedSeed);
    }
    v140 = *v139;
    sub_23D5E6950((uint64_t)v139, type metadata accessor for GKCrypto_VersionedSeed);
    if (v140 != v291)
    {
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v146 = sub_23D66BFDC();
      __swift_project_value_buffer(v146, (uint64_t)qword_256C88B78);
      v147 = sub_23D66C588();
      v148 = v288;
      sub_23D5E7298((uint64_t)v305, v288, type metadata accessor for GKCrypto_AdminPlainText);
      v149 = sub_23D66BFC4();
      if (os_log_type_enabled(v149, v147))
      {
        v150 = swift_slowAlloc();
        *(_DWORD *)v150 = 67109376;
        v151 = v148 + *(int *)(v304 + 24);
        v152 = v287;
        sub_23D5AEF48(v151, v287, &qword_256C799D0);
        if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v301)(v152, 1, v296) == 1)
        {
          v153 = v286;
          *v286 = 0;
          *(_OWORD *)(v153 + 2) = xmmword_23D66DF40;
          sub_23D66BE5C();
          sub_23D5AEF8C(v287, &qword_256C799D0);
        }
        else
        {
          sub_23D5E7F64(v287, (uint64_t)v286, type metadata accessor for GKCrypto_VersionedSeed);
        }
        v164 = *v286;
        sub_23D5E6950((uint64_t)v286, type metadata accessor for GKCrypto_VersionedSeed);
        sub_23D5E6950(v288, type metadata accessor for GKCrypto_AdminPlainText);
        LODWORD(v321) = v164;
        sub_23D66C5D0();
        *(_WORD *)(v150 + 8) = 1024;
        LODWORD(v321) = v291;
        sub_23D66C5D0();
        _os_log_impl(&dword_23D5A8000, v149, v147, "seed and group version mismatch, got %u expected %u", (uint8_t *)v150, 0xEu);
        MEMORY[0x242636844](v150, -1, -1);
      }
      else
      {
        sub_23D5E6950(v148, type metadata accessor for GKCrypto_AdminPlainText);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v165 = 334;
      *(_OWORD *)(v165 + 8) = xmmword_23D66E540;
      *(_QWORD *)(v165 + 24) = 0x800000023D678100;
      *(_QWORD *)(v165 + 32) = 0xD000000000000052;
      *(_QWORD *)(v165 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      goto LABEL_50;
    }
    v142 = (uint64_t)v317;
    v141 = v318;
    v143 = v319;
    v144 = v320;
    *((_QWORD *)&v322 + 1) = &type metadata for AdminSeed;
    v323 = v294;
    v145 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v321 = v145;
    v145[2] = v142;
    v145[3] = v141;
    v145[4] = v143;
    v145[5] = v144;
    sub_23D5AFA60(v142, v141);
    sub_23D5E7284(v143, v144);
    if (qword_256C78B20 != -1)
      swift_once();
    v154 = (_QWORD *)sub_23D61DD8C(&v321, 1);
    v156 = v155;
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    sub_23D5AFA60((uint64_t)v154, v156);
    sub_23D5AFA60(a9, a10);
    sub_23D5D9848((uint64_t)v154, v156);
    v158 = v157;
    sub_23D5DDA20(a9, a10);
    v301 = v154;
    v304 = v156;
    sub_23D5DDA20((uint64_t)v154, v156);
    if ((v158 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v166 = sub_23D66BFDC();
      __swift_project_value_buffer(v166, (uint64_t)qword_256C88B78);
      v167 = sub_23D66C588();
      v168 = sub_23D66BFC4();
      v169 = v167;
      if (os_log_type_enabled(v168, v167))
      {
        v170 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v170 = 0;
        _os_log_impl(&dword_23D5A8000, v168, v169, "admin seed does not generate member seed in GroupBlob", v170, 2u);
        MEMORY[0x242636844](v170, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v171 = 353;
      v172 = xmmword_23D66E550;
      goto LABEL_49;
    }
    v159 = (uint64_t)v317;
    v160 = v318;
    v162 = v319;
    v161 = v320;
    *((_QWORD *)&v322 + 1) = &type metadata for AdminSeed;
    v323 = v294;
    v163 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v321 = v163;
    v163[2] = v159;
    v163[3] = v160;
    v163[4] = v162;
    v163[5] = v161;
    sub_23D5AFA60(v159, v160);
    sub_23D5E7284(v162, v161);
    sub_23D5AFA60(v159, v160);
    sub_23D5E7284(v162, v161);
    if (qword_256C78D18 != -1)
      swift_once();
    sub_23D61D638((uint64_t)&v321, 1, qword_256C890E0, *(uint64_t *)algn_256C890E8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    sub_23D5DDA20(v159, v160);
    sub_23D5E725C(v162, v161);
    v175 = v280;
    v176 = v285;
    sub_23D66C228();
    v177 = *(void (**)(char *, uint64_t))(v279 + 8);
    v177(v176, v283);
    v178 = sub_23D66C1F8();
    v180 = v179;
    (*(void (**)(char *, uint64_t))(v281 + 8))(v175, v282);
    sub_23D5E6578(v178, v180);
    LOBYTE(v175) = v181;
    sub_23D5DDA20(v178, v180);
    if ((v175 & 1) == 0)
      goto LABEL_59;
    v182 = (uint64_t)v317;
    v183 = v318;
    v185 = v319;
    v184 = v320;
    *((_QWORD *)&v322 + 1) = &type metadata for AdminSeed;
    v323 = v294;
    v186 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v321 = v186;
    v186[2] = v182;
    v186[3] = v183;
    v186[4] = v185;
    v186[5] = v184;
    sub_23D5AFA60(v182, v183);
    sub_23D5E7284(v185, v184);
    sub_23D5AFA60(v182, v183);
    sub_23D5E7284(v185, v184);
    if (qword_256C78D20 != -1)
      swift_once();
    sub_23D61D674((uint64_t)&v321, 1, qword_256C890F0, *(uint64_t *)algn_256C890F8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    sub_23D5DDA20(v182, v183);
    sub_23D5E725C(v185, v184);
    v187 = v273;
    v188 = v278;
    sub_23D66C264();
    (*(void (**)(char *, uint64_t))(v271 + 8))(v188, v272);
    v189 = sub_23D66C1F8();
    v191 = v190;
    v192 = *(void (**)(char *, uint64_t))(v276 + 8);
    v192(v187, v277);
    sub_23D5E6578(v189, v191);
    LOBYTE(v187) = v193;
    sub_23D5DDA20(v189, v191);
    if ((v187 & 1) == 0)
    {
LABEL_59:
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v204 = sub_23D66BFDC();
      __swift_project_value_buffer(v204, (uint64_t)qword_256C88B78);
      v205 = sub_23D66C588();
      v206 = sub_23D66BFC4();
      v207 = v205;
      if (os_log_type_enabled(v206, v205))
      {
        v208 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v208 = 0;
        _os_log_impl(&dword_23D5A8000, v206, v207, "public key mismatch in administrative group", v208, 2u);
        MEMORY[0x242636844](v208, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v171 = 350;
      v172 = xmmword_23D66E560;
      goto LABEL_49;
    }
    if (!*(_QWORD *)(v292 + 16))
    {
      v209 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v209 - 8) + 56))(v275, 1, 1, v209);
LABEL_67:
      v210 = &qword_256C79178;
      v211 = &v307;
LABEL_68:
      sub_23D5AEF8C(*(v211 - 32), v210);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v276 + 56))(v274, 1, 1, v277);
LABEL_69:
      swift_bridgeObjectRelease();
      sub_23D5AEF8C(v274, &qword_256C799E0);
      if (qword_256C78B10 != -1)
        swift_once();
      v212 = sub_23D66BFDC();
      __swift_project_value_buffer(v212, (uint64_t)qword_256C88B78);
      v213 = sub_23D66C588();
      v214 = sub_23D66BFC4();
      v215 = v213;
      if (os_log_type_enabled(v214, v213))
      {
        v216 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v216 = 0;
        _os_log_impl(&dword_23D5A8000, v214, v215, "originator key material missing in group creation", v216, 2u);
        MEMORY[0x242636844](v216, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v171 = 323;
      v172 = xmmword_23D66E580;
LABEL_49:
      *(_OWORD *)(v171 + 8) = v172;
      *(_QWORD *)(v171 + 24) = 0x800000023D678100;
      *(_QWORD *)(v171 + 32) = 0xD000000000000052;
      *(_QWORD *)(v171 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20((uint64_t)v301, v304);
LABEL_50:
      sub_23D5DDA20(v138, v299);
      sub_23D5DDA20(v311, v312);
      sub_23D5DDA20(v260, v261);
      sub_23D5E725C(v262, v293);
      sub_23D5DDA20(v303, (unint64_t)v302);
LABEL_51:
      v173 = v319;
      v174 = v320;
      sub_23D5DDA20((uint64_t)v317, v318);
      sub_23D5E725C(v173, v174);
      sub_23D5E6950((uint64_t)v305, type metadata accessor for GKCrypto_AdminPlainText);
      (*(void (**)(char *, uint64_t))(v306 + 8))(v310, v307);
      return (*(uint64_t (**)(uint64_t, uint64_t))(v308 + 8))(v313, v309);
    }
    v194 = v298;
    v195 = v297;
    sub_23D5AFA60(v298, v297);
    v196 = sub_23D5DF394(v194, v195);
    if ((v197 & 1) != 0)
    {
      v198 = v196;
      v199 = *(_QWORD *)(v292 + 56);
      v200 = type metadata accessor for GroupMembership.MemberProperties(0);
      v201 = *(_QWORD *)(v200 - 8);
      v202 = v199 + *(_QWORD *)(v201 + 72) * v198;
      v203 = v275;
      sub_23D5E7298(v202, v275, type metadata accessor for GroupMembership.MemberProperties);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v201 + 56))(v203, 0, 1, v200);
    }
    else
    {
      v200 = type metadata accessor for GroupMembership.MemberProperties(0);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v200 - 8) + 56))(v275, 1, 1, v200);
    }
    sub_23D5DDA20(v298, v297);
    type metadata accessor for GroupMembership.MemberProperties(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v200 - 8) + 48))(v275, 1, v200) == 1)
      goto LABEL_67;
    v217 = *(int *)(v200 + 24);
    v218 = v275;
    v219 = v270;
    sub_23D5AEF48(v275 + v217, v270, &qword_256C79990);
    sub_23D5E6950(v218, type metadata accessor for GroupMembership.MemberProperties);
    v220 = type metadata accessor for UserKeyingInfo(0);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v220 - 8) + 48))(v219, 1, v220) == 1)
    {
      v210 = &qword_256C79990;
      v211 = (uint64_t *)&v302;
      goto LABEL_68;
    }
    v221 = v270;
    v222 = v270 + *(int *)(v220 + 28);
    v223 = v276;
    v224 = v274;
    v225 = v277;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v276 + 16))(v274, v222, v277);
    sub_23D5E6950(v221, type metadata accessor for UserKeyingInfo);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v223 + 56))(v224, 0, 1, v225);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v223 + 48))(v224, 1, v225) == 1)
      goto LABEL_69;
    (*(void (**)(char *, uint64_t, uint64_t))(v276 + 32))(v268, v274, v277);
    v226 = v305[1];
    *(_QWORD *)&v321 = *v305;
    *((_QWORD *)&v321 + 1) = v226;
    sub_23D5AFA60(v321, v226);
    sub_23D66C2C4();
    v227 = sub_23D5D2490((_QWORD *)inited);
    v229 = v228;
    *(_QWORD *)&v321 = v227;
    *((_QWORD *)&v321 + 1) = v228;
    v230 = sub_23D66C2E8();
    sub_23D5DDA20(v227, v229);
    if ((v230 & 1) == 0)
    {
      swift_bridgeObjectRelease();
      if (qword_256C78B10 != -1)
        swift_once();
      v236 = sub_23D66BFDC();
      __swift_project_value_buffer(v236, (uint64_t)qword_256C88B78);
      v237 = sub_23D66C588();
      v238 = sub_23D66BFC4();
      v239 = v237;
      if (os_log_type_enabled(v238, v237))
      {
        v240 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v240 = 0;
        _os_log_impl(&dword_23D5A8000, v238, v239, "originator signature in admin blob failed verification", v240, 2u);
        MEMORY[0x242636844](v240, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v241 = 351;
      *(_OWORD *)(v241 + 8) = xmmword_23D66E570;
      *(_QWORD *)(v241 + 24) = 0x800000023D678100;
      *(_QWORD *)(v241 + 32) = 0xD000000000000052;
      *(_QWORD *)(v241 + 40) = 0x800000023D676EF0;
      swift_willThrow();
      sub_23D5DDA20((uint64_t)v301, v304);
      sub_23D5DDA20(v138, v299);
      sub_23D5DDA20(v311, v312);
      sub_23D5DDA20(v260, v261);
      sub_23D5E725C(v262, v293);
      sub_23D5DDA20(v303, (unint64_t)v302);
      (*(void (**)(char *, uint64_t))(v266 + 8))(v267, v269);
      v192(v268, v277);
      goto LABEL_51;
    }
    v231 = (uint64_t)v317;
    v232 = v318;
    v234 = v319;
    v233 = v320;
    *((_QWORD *)&v322 + 1) = &type metadata for AdminSeed;
    v323 = v294;
    v235 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v321 = v235;
    v235[2] = v231;
    v235[3] = v232;
    v235[4] = v234;
    v235[5] = v233;
    sub_23D5AFA60(v231, v232);
    sub_23D5E7284(v234, v233);
    sub_23D5AFA60(v231, v232);
    sub_23D5E7284(v234, v233);
    if (qword_256C78D10 != -1)
      swift_once();
    sub_23D61D638((uint64_t)&v321, 1, qword_256C890D0, *(uint64_t *)algn_256C890D8);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    sub_23D5DDA20(v231, v232);
    sub_23D5E725C(v234, v233);
    v242 = (uint64_t)v317;
    v243 = v318;
    v245 = v319;
    v244 = v320;
    *((_QWORD *)&v322 + 1) = &type metadata for AdminSeed;
    v323 = v294;
    v246 = (_QWORD *)swift_allocObject();
    *(_QWORD *)&v321 = v246;
    v246[2] = v242;
    v246[3] = v243;
    v246[4] = v245;
    v246[5] = v244;
    sub_23D5AFA60(v242, v243);
    sub_23D5E7284(v245, v244);
    sub_23D5AFA60(v242, v243);
    sub_23D5E7284(v245, v244);
    if (qword_256C78D00 != -1)
      swift_once();
    sub_23D61D4A8(&v321, 1, v264);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)&v321);
    sub_23D5DDA20(v242, v243);
    sub_23D5E725C(v245, v244);
    v247 = swift_bridgeObjectRetain();
    v248 = sub_23D667B40(v247);
    swift_bridgeObjectRelease();
    sub_23D660D88(v248, &v321);
    v300 = v321;
    v316 = v321;
    v249 = qword_256C88BE0;
    v250 = *(_QWORD *)algn_256C88BE8;
    sub_23D5AFA60(qword_256C88BE0, *(unint64_t *)algn_256C88BE8);
    sub_23D5AFA60(v249, v250);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      inited = (uint64_t)sub_23D62B638(0, *(_QWORD *)(inited + 16) + 1, 1, (_QWORD *)inited);
    v252 = *(_QWORD *)(inited + 16);
    v251 = *(_QWORD *)(inited + 24);
    if (v252 >= v251 >> 1)
      inited = (uint64_t)sub_23D62B638((_QWORD *)(v251 > 1), v252 + 1, 1, (_QWORD *)inited);
    *(_QWORD *)(inited + 16) = v252 + 1;
    v253 = inited + 16 * v252;
    *(_QWORD *)(v253 + 32) = v249;
    *(_QWORD *)(v253 + 40) = v250;
    sub_23D5DDA20(v249, v250);
    v254 = sub_23D62FE18(inited);
    v256 = v255;
    swift_bridgeObjectRelease();
    sub_23D646874((uint64_t)v265, v264, &v316, v254, v256, v315, v314);
    sub_23D5DDA20(v254, v256);
    sub_23D5DDA20((uint64_t)v301, v304);
    sub_23D5DDA20(v138, v299);
    sub_23D5DDA20(v311, v312);
    sub_23D5DDA20(v260, v261);
    sub_23D5E725C(v262, v293);
    sub_23D5DDA20(v303, (unint64_t)v302);
    swift_bridgeObjectRelease();
    v257 = *(void (**)(uint64_t, uint64_t))(v308 + 8);
    v258 = v309;
    v257(v264, v309);
    v177(v265, v283);
    (*(void (**)(char *, uint64_t))(v266 + 8))(v267, v269);
    v192(v268, v277);
    sub_23D5E6950((uint64_t)v305, type metadata accessor for GKCrypto_AdminPlainText);
    (*(void (**)(char *, uint64_t))(v306 + 8))(v310, v307);
    v257(v313, v258);
    return (uint64_t)v317;
  }
  else
  {
    swift_bridgeObjectRelease();
    if (qword_256C78B10 != -1)
      swift_once();
    v107 = sub_23D66BFDC();
    __swift_project_value_buffer(v107, (uint64_t)qword_256C88B78);
    v108 = sub_23D66C588();
    v109 = sub_23D66BFC4();
    v110 = v108;
    v111 = os_log_type_enabled(v109, v108);
    v112 = v303;
    if (v111)
    {
      v113 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v113 = 0;
      _os_log_impl(&dword_23D5A8000, v109, v110, "admin and member originator conflict in GroupBlob", v113, 2u);
      MEMORY[0x242636844](v113, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v114 = 352;
    *(_OWORD *)(v114 + 8) = xmmword_23D66E530;
    *(_QWORD *)(v114 + 24) = 0x800000023D678100;
    *(_QWORD *)(v114 + 32) = 0xD000000000000052;
    *(_QWORD *)(v114 + 40) = 0x800000023D676EF0;
    swift_willThrow();
    sub_23D5DDA20(v311, v312);
    sub_23D5DDA20(v112, (unint64_t)v91);
    sub_23D5E6950((uint64_t)v102, type metadata accessor for GKCrypto_AdminPlainText);
    (*(void (**)(char *, uint64_t))(v306 + 8))(v80, v307);
    return (*(uint64_t (**)(uint64_t, uint64_t))(v308 + 8))(v72, v309);
  }
}

uint64_t sub_23D5ECFFC(uint64_t a1, __int128 *a2, _BYTE *a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t (*v14)(uint64_t);
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  char v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;

  v31 = sub_23D66C2DC();
  v24 = *(_QWORD *)(v31 - 8);
  MEMORY[0x24BDAC7A8](v31);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GKCrypto_SeedBlobRequest(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  LOBYTE(v12) = *a3;
  v25 = *a2;
  v26 = v12;
  v27 = a4;
  v28 = a1;
  sub_23D5AE928(&qword_256C79A58, v14, (uint64_t)&unk_23D6705D4);
  sub_23D66BF4C();
  v15 = sub_23D5D9F78();
  v17 = v16;
  v29 = v15;
  v30 = v16;
  sub_23D5E6898();
  v18 = a1;
  sub_23D66C2A0();
  sub_23D5DDA20(v15, v17);
  if (v4)
  {
    sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_SeedBlobRequest);
  }
  else
  {
    v19 = sub_23D66C2B8();
    v21 = v20;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v31);
    sub_23D5DDA20(*((_QWORD *)v13 + 7), *((_QWORD *)v13 + 8));
    *((_QWORD *)v13 + 7) = v19;
    *((_QWORD *)v13 + 8) = v21;
    v18 = sub_23D66BF1C();
    sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_SeedBlobRequest);
  }
  return v18;
}

unint64_t sub_23D5ED1F8()
{
  unint64_t result;

  result = qword_256C79190;
  if (!qword_256C79190)
  {
    result = MEMORY[0x242636790](&unk_23D673458, &type metadata for MemberSeed);
    atomic_store(result, (unint64_t *)&qword_256C79190);
  }
  return result;
}

uint64_t sub_23D5ED23C(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  os_log_type_t v7;
  NSObject *v8;
  os_log_type_t v9;
  uint8_t *v10;
  uint64_t v11;
  _QWORD *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD v22[3];
  ValueMetadata *v23;
  unint64_t v24;

  if (a4 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v6 = sub_23D66BFDC();
    __swift_project_value_buffer(v6, (uint64_t)qword_256C88B78);
    v7 = sub_23D66C588();
    v8 = sub_23D66BFC4();
    v9 = v7;
    if (os_log_type_enabled(v8, v7))
    {
      v10 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v10 = 0;
      _os_log_impl(&dword_23D5A8000, v8, v9, "missing seed diversifier", v10, 2u);
      MEMORY[0x242636844](v10, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v11 = 372;
    *(_OWORD *)(v11 + 8) = xmmword_23D66E590;
    *(_QWORD *)(v11 + 24) = 0x800000023D6779E0;
    *(_QWORD *)(v11 + 32) = 0xD000000000000052;
    *(_QWORD *)(v11 + 40) = 0x800000023D676EF0;
    swift_willThrow();
  }
  else
  {
    v23 = &type metadata for AdminSeed;
    v24 = sub_23D5E803C();
    v16 = (_QWORD *)swift_allocObject();
    v22[0] = v16;
    v16[2] = a1;
    v16[3] = a2;
    v16[4] = a3;
    v16[5] = a4;
    sub_23D5E7284(a3, a4);
    sub_23D5AFA60(a1, a2);
    sub_23D5E7284(a3, a4);
    if (qword_256C78B20 != -1)
      swift_once();
    v17 = sub_23D61DD8C(v22, 1);
    if (!v4)
    {
      v19 = v17;
      v20 = v18;
      __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
      v23 = &type metadata for MemberSeed;
      v24 = sub_23D5ED1F8();
      v22[0] = v19;
      v22[1] = v20;
      sub_23D5AFA60(v19, v20);
      v5 = sub_23D61DD8C(v22, 1);
      sub_23D5DDA20(v19, v20);
    }
    sub_23D5E725C(a3, a4);
    __swift_destroy_boxed_opaque_existential_1((uint64_t)v22);
  }
  return v5;
}

uint64_t sub_23D5ED518(unint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;

  result = *a1;
  if (!result)
  {
    v6 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242636790](a3, v6);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23D5ED558(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5CF76C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23D5ED574(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  int v6;

  if ((a6 & 1) != 0)
    v6 = 4;
  else
    v6 = 0;
  switch(v6 | (a2 >> 60) & 3)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_6;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      a2 &= 0xCFFFFFFFFFFFFFFFLL;
LABEL_6:
      sub_23D5DDA20(result, a2);
      result = sub_23D5E725C(a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_23D5ED5DC()
{
  unint64_t result;

  result = qword_256C791D8;
  if (!qword_256C791D8)
  {
    result = MEMORY[0x242636790](&unk_23D66FBCC, &type metadata for GroupRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C791D8);
  }
  return result;
}

unint64_t sub_23D5ED620()
{
  unint64_t result;

  result = qword_256C791E0;
  if (!qword_256C791E0)
  {
    result = MEMORY[0x242636790](&unk_23D66FB7C, &type metadata for GroupRole.MemberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C791E0);
  }
  return result;
}

unint64_t sub_23D5ED664()
{
  unint64_t result;

  result = qword_256C791E8;
  if (!qword_256C791E8)
  {
    result = MEMORY[0x242636790](&unk_23D66FB2C, &type metadata for GroupRole.AdministratorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C791E8);
  }
  return result;
}

unint64_t sub_23D5ED6A8()
{
  unint64_t result;

  result = qword_256C79240;
  if (!qword_256C79240)
  {
    result = MEMORY[0x242636790](&unk_23D66FADC, &type metadata for GroupRole.RSVPStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79240);
  }
  return result;
}

unint64_t sub_23D5ED6EC()
{
  unint64_t result;

  result = qword_256C79248;
  if (!qword_256C79248)
  {
    result = MEMORY[0x242636790](&unk_23D66FA8C, &type metadata for GroupRole.RSVPStatus.DestroyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79248);
  }
  return result;
}

unint64_t sub_23D5ED730()
{
  unint64_t result;

  result = qword_256C79250;
  if (!qword_256C79250)
  {
    result = MEMORY[0x242636790](&unk_23D66FA3C, &type metadata for GroupRole.RSVPStatus.LeaveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79250);
  }
  return result;
}

unint64_t sub_23D5ED774()
{
  unint64_t result;

  result = qword_256C79258;
  if (!qword_256C79258)
  {
    result = MEMORY[0x242636790](&unk_23D66F9EC, &type metadata for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79258);
  }
  return result;
}

unint64_t sub_23D5ED7B8()
{
  unint64_t result;

  result = qword_256C79260;
  if (!qword_256C79260)
  {
    result = MEMORY[0x242636790](&unk_23D66F99C, &type metadata for GroupRole.RSVPStatus.RejectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79260);
  }
  return result;
}

unint64_t sub_23D5ED7FC()
{
  unint64_t result;

  result = qword_256C79268;
  if (!qword_256C79268)
  {
    result = MEMORY[0x242636790](&unk_23D66F94C, &type metadata for GroupRole.RSVPStatus.AcceptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79268);
  }
  return result;
}

unint64_t sub_23D5ED840()
{
  unint64_t result;

  result = qword_256C792A8;
  if (!qword_256C792A8)
  {
    result = MEMORY[0x242636790](&unk_23D66F8FC, &type metadata for GroupID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C792A8);
  }
  return result;
}

unint64_t sub_23D5ED884()
{
  unint64_t result;

  result = qword_256C792B0;
  if (!qword_256C792B0)
  {
    result = MEMORY[0x242636790](MEMORY[0x24BDCDDF8], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256C792B0);
  }
  return result;
}

unint64_t sub_23D5ED8C8()
{
  unint64_t result;

  result = qword_256C792C0;
  if (!qword_256C792C0)
  {
    result = MEMORY[0x242636790](MEMORY[0x24BDCDE38], MEMORY[0x24BDCDDE8]);
    atomic_store(result, (unint64_t *)&qword_256C792C0);
  }
  return result;
}

unint64_t sub_23D5ED90C()
{
  unint64_t result;

  result = qword_256C792D0;
  if (!qword_256C792D0)
  {
    result = MEMORY[0x242636790](&unk_23D66F8AC, &type metadata for GroupKitUserID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C792D0);
  }
  return result;
}

unint64_t sub_23D5ED950()
{
  unint64_t result;

  result = qword_256C792E8;
  if (!qword_256C792E8)
  {
    result = MEMORY[0x242636790](&unk_23D66F85C, &type metadata for UserDSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C792E8);
  }
  return result;
}

unint64_t sub_23D5ED994()
{
  unint64_t result;

  result = qword_256C79300;
  if (!qword_256C79300)
  {
    result = MEMORY[0x242636790](&unk_23D66F80C, &type metadata for KeyShare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79300);
  }
  return result;
}

unint64_t sub_23D5ED9D8()
{
  unint64_t result;

  result = qword_256C79318;
  if (!qword_256C79318)
  {
    result = MEMORY[0x242636790](&unk_23D66F7BC, &type metadata for KeyOffset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79318);
  }
  return result;
}

unint64_t sub_23D5EDA1C()
{
  unint64_t result;

  result = qword_256C79330;
  if (!qword_256C79330)
  {
    result = MEMORY[0x242636790](&unk_23D66F76C, &type metadata for Nonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79330);
  }
  return result;
}

unint64_t sub_23D5EDA64()
{
  unint64_t result;

  result = qword_256C79340;
  if (!qword_256C79340)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for SynchronizationResult, &type metadata for SynchronizationResult);
    atomic_store(result, (unint64_t *)&qword_256C79340);
  }
  return result;
}

unint64_t sub_23D5EDAAC()
{
  unint64_t result;

  result = qword_256C79348;
  if (!qword_256C79348)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for GroupRole.RSVPStatus, &type metadata for GroupRole.RSVPStatus);
    atomic_store(result, (unint64_t *)&qword_256C79348);
  }
  return result;
}

unint64_t sub_23D5EDAF4()
{
  unint64_t result;

  result = qword_256C79350;
  if (!qword_256C79350)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for GroupRole, &type metadata for GroupRole);
    atomic_store(result, (unint64_t *)&qword_256C79350);
  }
  return result;
}

unint64_t sub_23D5EDB3C()
{
  unint64_t result;

  result = qword_256C79358;
  if (!qword_256C79358)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for GroupID, &type metadata for GroupID);
    atomic_store(result, (unint64_t *)&qword_256C79358);
  }
  return result;
}

unint64_t sub_23D5EDB84()
{
  unint64_t result;

  result = qword_256C79360;
  if (!qword_256C79360)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for GroupKitUserID, &type metadata for GroupKitUserID);
    atomic_store(result, (unint64_t *)&qword_256C79360);
  }
  return result;
}

unint64_t sub_23D5EDBCC()
{
  unint64_t result;

  result = qword_256C79368;
  if (!qword_256C79368)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for UserDSID, &type metadata for UserDSID);
    atomic_store(result, (unint64_t *)&qword_256C79368);
  }
  return result;
}

unint64_t sub_23D5EDC14()
{
  unint64_t result;

  result = qword_256C79370;
  if (!qword_256C79370)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for KeyShare, &type metadata for KeyShare);
    atomic_store(result, (unint64_t *)&qword_256C79370);
  }
  return result;
}

unint64_t sub_23D5EDC5C()
{
  unint64_t result;

  result = qword_256C79378;
  if (!qword_256C79378)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for KeyOffset, &type metadata for KeyOffset);
    atomic_store(result, (unint64_t *)&qword_256C79378);
  }
  return result;
}

unint64_t sub_23D5EDCA4()
{
  unint64_t result;

  result = qword_256C79380;
  if (!qword_256C79380)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for Nonce, &type metadata for Nonce);
    atomic_store(result, (unint64_t *)&qword_256C79380);
  }
  return result;
}

uint64_t sub_23D5EDCE8@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_BYTE *)(v3 + 32);
  return result;
}

uint64_t sub_23D5EDD2C(char *a1, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_BYTE *)(v3 + 32) = v2;
  return result;
}

uint64_t sub_23D5EDD6C@<X0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;

  v3 = *a1;
  swift_beginAccess();
  *a2 = *(_QWORD *)(v3 + 56);
  return swift_bridgeObjectRetain();
}

uint64_t sub_23D5EDDB8@<X0>(uint64_t *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a1;
  result = swift_beginAccess();
  *a2 = *(_DWORD *)(v3 + 64);
  return result;
}

uint64_t sub_23D5EDDFC(int *a1, uint64_t *a2)
{
  int v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = *a2;
  result = swift_beginAccess();
  *(_DWORD *)(v3 + 64) = v2;
  return result;
}

ValueMetadata *type metadata accessor for SynchronizationResult()
{
  return &type metadata for SynchronizationResult;
}

ValueMetadata *type metadata accessor for GroupRole()
{
  return &type metadata for GroupRole;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus()
{
  return &type metadata for GroupRole.RSVPStatus;
}

uint64_t *initializeBufferWithCopyOfBuffer for GroupID(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a2;
  v4 = a2[1];
  sub_23D5AFA60(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t destroy for GroupID(uint64_t a1)
{
  return sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
}

__n128 __swift_memcpy16_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t *assignWithTake for GroupID(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = *a1;
  v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v3, v4);
  return a1;
}

ValueMetadata *type metadata accessor for GroupID()
{
  return &type metadata for GroupID;
}

ValueMetadata *type metadata accessor for GroupKitUserID()
{
  return &type metadata for GroupKitUserID;
}

_QWORD *initializeBufferWithCopyOfBuffer for UserDSID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t destroy for UserDSID()
{
  return swift_bridgeObjectRelease();
}

_QWORD *assignWithCopy for UserDSID(_QWORD *a1, _QWORD *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_QWORD *assignWithTake for UserDSID(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;

  v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for UserDSID(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 16))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for UserDSID(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 16) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for UserDSID()
{
  return &type metadata for UserDSID;
}

ValueMetadata *type metadata accessor for KeyShare()
{
  return &type metadata for KeyShare;
}

ValueMetadata *type metadata accessor for KeyOffset()
{
  return &type metadata for KeyOffset;
}

uint64_t *assignWithCopy for MemberSeed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  v3 = *a2;
  v4 = a2[1];
  sub_23D5AFA60(*a2, v4);
  v5 = *a1;
  v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_23D5DDA20(v5, v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for MemberSeed(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for MemberSeed(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 16) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Nonce()
{
  return &type metadata for Nonce;
}

uint64_t sub_23D5EE17C()
{
  return type metadata accessor for Group(0);
}

void sub_23D5EE184()
{
  unint64_t v0;
  unint64_t v1;

  type metadata accessor for UserKeyingInfo(319);
  if (v0 <= 0x3F)
  {
    sub_23D5EE5F4();
    if (v1 <= 0x3F)
      swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for Group()
{
  return swift_lookUpClassMethod();
}

uint64_t dispatch thunk of Group.memberRole.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 216))();
}

uint64_t dispatch thunk of Group.membership.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 240))();
}

uint64_t dispatch thunk of Group.version.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 264))();
}

uint64_t dispatch thunk of Group.groupNeedsSeedValidation.getter()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 576))();
}

uint64_t dispatch thunk of Group.deleteGroupStateFromDeviceToDeviceEncryptedContainer()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 584))();
}

uint64_t dispatch thunk of Group.__allocating_init(groupID:originatorGroupUserID:dsid:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v8;
  uint64_t (*v10)(uint64_t, uint64_t, uint64_t);

  v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(v3 + 600) + *(_QWORD *)(v3 + 600));
  v8 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v4 + 16) = v8;
  *v8 = v4;
  v8[1] = sub_23D5EE34C;
  return v10(a1, a2, a3);
}

uint64_t sub_23D5EE34C(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v4;

  v4 = *v1;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t))(v4 + 8))(a1);
}

uint64_t dispatch thunk of Group.initiateMembershipUpdate(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 616))();
}

uint64_t dispatch thunk of Group.initiateMembershipUpdate<A, B>(addMembership:deleteMembership:toggleRoleMembership:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 632))();
}

uint64_t dispatch thunk of Group.finalizeMembershipUpdate(response:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 640))();
}

uint64_t dispatch thunk of Group.signNonceForGroupBlobRequest(nonce:dsid:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v6;
  uint64_t (*v8)(uint64_t, uint64_t);

  v8 = (uint64_t (*)(uint64_t, uint64_t))(**(int **)(*(_QWORD *)v2 + 648) + *(_QWORD *)(*(_QWORD *)v2 + 648));
  v6 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v6;
  *v6 = v3;
  v6[1] = sub_23D5EE460;
  return v8(a1, a2);
}

uint64_t sub_23D5EE460(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v6;

  v6 = *v2;
  swift_task_dealloc();
  return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(a1, a2);
}

uint64_t dispatch thunk of Group.initiateVersionUpdate(newVersion:updatedGroupBlob:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 656))();
}

uint64_t dispatch thunk of Group.retrieveGroupMembershipAndRoles()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 664))();
}

uint64_t dispatch thunk of Group.retrieveGroupMembership()()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 672))();
}

uint64_t dispatch thunk of Group.validateMemberKeyingMaterial(userKeyingMaterial:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 680))();
}

uint64_t dispatch thunk of Group.createSeedBlobRequest(nonce:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 704))();
}

uint64_t dispatch thunk of Group.validateSeedBlobsAndFinalizeGroup<A>(seedBlobs:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 712))();
}

uint64_t dispatch thunk of Group.createDestroyGroupRequest(nonce:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 744))();
}

uint64_t dispatch thunk of Group.createLeaveGroupRequest(nonce:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 752))();
}

uint64_t dispatch thunk of Group.createDemoteAdministratorRequest(nonce:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 760))();
}

uint64_t dispatch thunk of Group.createRSVPQueueRequest(nonce:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 776))();
}

uint64_t dispatch thunk of Group.processRSVPQueueRequest(_:)()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(*(_QWORD *)v0 + 784))();
}

void sub_23D5EE5F4()
{
  unint64_t v0;
  uint64_t v1;

  if (!qword_256C793D0)
  {
    type metadata accessor for Group.ValidateGroupMemberKeysTransition(255);
    v0 = sub_23D66C5B8();
    if (!v1)
      atomic_store(v0, (unint64_t *)&qword_256C793D0);
  }
}

uint64_t destroy for Group.ServerUpdateBlobs(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  sub_23D5DDA20(*a1, a1[1]);
  result = swift_bridgeObjectRelease();
  v3 = a1[4];
  if (v3 >> 60 != 15)
    result = sub_23D5DDA20(a1[3], v3);
  v4 = a1[6];
  if (v4 >> 60 != 15)
    result = sub_23D5DDA20(a1[5], v4);
  v5 = a1[8];
  if (v5 >> 60 != 15)
    return sub_23D5DDA20(a1[7], v5);
  return result;
}

uint64_t initializeWithCopy for Group.ServerUpdateBlobs(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  uint64_t v14;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = a2[2];
  v6 = a2 + 3;
  v7 = a2[4];
  swift_bridgeObjectRetain();
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 24) = *v6;
  }
  else
  {
    v8 = *(_QWORD *)v6;
    sub_23D5AFA60(v8, v7);
    *(_QWORD *)(a1 + 24) = v8;
    *(_QWORD *)(a1 + 32) = v7;
  }
  v9 = a2 + 5;
  v10 = a2[6];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 40) = *(_OWORD *)v9;
  }
  else
  {
    v11 = *v9;
    sub_23D5AFA60(*v9, a2[6]);
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 48) = v10;
  }
  v12 = a2 + 7;
  v13 = a2[8];
  if (v13 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)v12;
  }
  else
  {
    v14 = *v12;
    sub_23D5AFA60(*v12, v13);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v13;
  }
  return a1;
}

uint64_t *assignWithCopy for Group.ServerUpdateBlobs(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_23D5DDA20(v6, v7);
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = a2 + 3;
  v9 = a2[4];
  if ((unint64_t)a1[4] >> 60 == 15)
  {
    if (v9 >> 60 != 15)
    {
      v10 = *v8;
      sub_23D5AFA60(*v8, a2[4]);
      a1[3] = v10;
      a1[4] = v9;
      goto LABEL_8;
    }
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
    sub_23D5EE998((uint64_t)(a1 + 3));
LABEL_6:
    *(_OWORD *)(a1 + 3) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v11 = *v8;
  sub_23D5AFA60(*v8, a2[4]);
  v12 = a1[3];
  v13 = a1[4];
  a1[3] = v11;
  a1[4] = v9;
  sub_23D5DDA20(v12, v13);
LABEL_8:
  v14 = a2 + 5;
  v15 = a2[6];
  if ((unint64_t)a1[6] >> 60 == 15)
  {
    if (v15 >> 60 != 15)
    {
      v16 = *v14;
      sub_23D5AFA60(*v14, a2[6]);
      a1[5] = v16;
      a1[6] = v15;
      goto LABEL_15;
    }
    goto LABEL_13;
  }
  if (v15 >> 60 == 15)
  {
    sub_23D5EE998((uint64_t)(a1 + 5));
LABEL_13:
    *(_OWORD *)(a1 + 5) = *(_OWORD *)v14;
    goto LABEL_15;
  }
  v17 = *v14;
  sub_23D5AFA60(*v14, a2[6]);
  v18 = a1[5];
  v19 = a1[6];
  a1[5] = v17;
  a1[6] = v15;
  sub_23D5DDA20(v18, v19);
LABEL_15:
  v20 = a2 + 7;
  v21 = a2[8];
  if ((unint64_t)a1[8] >> 60 != 15)
  {
    if (v21 >> 60 != 15)
    {
      v23 = *v20;
      sub_23D5AFA60(*v20, v21);
      v24 = a1[7];
      v25 = a1[8];
      a1[7] = v23;
      a1[8] = v21;
      sub_23D5DDA20(v24, v25);
      return a1;
    }
    sub_23D5EE998((uint64_t)(a1 + 7));
    goto LABEL_20;
  }
  if (v21 >> 60 == 15)
  {
LABEL_20:
    *(_OWORD *)(a1 + 7) = *(_OWORD *)v20;
    return a1;
  }
  v22 = *v20;
  sub_23D5AFA60(*v20, v21);
  a1[7] = v22;
  a1[8] = v21;
  return a1;
}

uint64_t sub_23D5EE998(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BDCDDE8] - 8) + 8))();
  return a1;
}

__n128 __swift_memcpy72_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  v3 = *(_OWORD *)(a2 + 32);
  v4 = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)(a1 + 16) = result;
  return result;
}

_QWORD *assignWithTake for Group.ServerUpdateBlobs(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _OWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _OWORD *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v4, v5);
  a1[2] = *(_QWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  v6 = (_OWORD *)(a2 + 24);
  v7 = a1[4];
  if (v7 >> 60 == 15)
    goto LABEL_4;
  v8 = *(_QWORD *)(a2 + 32);
  if (v8 >> 60 == 15)
  {
    sub_23D5EE998((uint64_t)(a1 + 3));
LABEL_4:
    *(_OWORD *)(a1 + 3) = *v6;
    goto LABEL_6;
  }
  v9 = a1[3];
  a1[3] = *(_QWORD *)v6;
  a1[4] = v8;
  sub_23D5DDA20(v9, v7);
LABEL_6:
  v10 = (_OWORD *)(a2 + 40);
  v11 = a1[6];
  if (v11 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)(a1 + 5) = *v10;
    goto LABEL_11;
  }
  v12 = *(_QWORD *)(a2 + 48);
  if (v12 >> 60 == 15)
  {
    sub_23D5EE998((uint64_t)(a1 + 5));
    goto LABEL_9;
  }
  v13 = a1[5];
  a1[5] = *(_QWORD *)v10;
  a1[6] = v12;
  sub_23D5DDA20(v13, v11);
LABEL_11:
  v14 = (_QWORD *)(a2 + 56);
  v15 = a1[8];
  if (v15 >> 60 != 15)
  {
    v16 = *(_QWORD *)(a2 + 64);
    if (v16 >> 60 != 15)
    {
      v17 = a1[7];
      a1[7] = *v14;
      a1[8] = v16;
      sub_23D5DDA20(v17, v15);
      return a1;
    }
    sub_23D5EE998((uint64_t)(a1 + 7));
  }
  *(_OWORD *)(a1 + 7) = *(_OWORD *)v14;
  return a1;
}

uint64_t getEnumTagSinglePayload for Group.ServerUpdateBlobs(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 72))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Group.ServerUpdateBlobs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_QWORD *)result = a2 ^ 0x80000000;
    if (a3 < 0)
      *(_BYTE *)(result + 72) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 16) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 72) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for Group.ServerUpdateBlobs()
{
  return &type metadata for Group.ServerUpdateBlobs;
}

uint64_t getEnumTagSinglePayload for Group.GroupState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xF5)
    goto LABEL_17;
  if (a2 + 11 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 11) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 11;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 11;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 11;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 0xC;
  v8 = v6 - 12;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Group.GroupState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 11 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 11) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xF5)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xF4)
    return ((uint64_t (*)(void))((char *)&loc_23D5EECA8 + 4 * byte_23D66E5C5[v4]))();
  *a1 = a2 + 11;
  return ((uint64_t (*)(void))((char *)sub_23D5EECDC + 4 * byte_23D66E5C0[v4]))();
}

uint64_t sub_23D5EECDC(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5EECE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D5EECECLL);
  return result;
}

uint64_t sub_23D5EECF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D5EED00);
  *(_BYTE *)result = a2 + 11;
  return result;
}

uint64_t sub_23D5EED04(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5EED0C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Group.GroupState()
{
  return &type metadata for Group.GroupState;
}

uint64_t sub_23D5EED34()
{
  return 0;
}

ValueMetadata *type metadata accessor for Nonce.CodingKeys()
{
  return &type metadata for Nonce.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyOffset.CodingKeys()
{
  return &type metadata for KeyOffset.CodingKeys;
}

ValueMetadata *type metadata accessor for KeyShare.CodingKeys()
{
  return &type metadata for KeyShare.CodingKeys;
}

ValueMetadata *type metadata accessor for UserDSID.CodingKeys()
{
  return &type metadata for UserDSID.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupKitUserID.CodingKeys()
{
  return &type metadata for GroupKitUserID.CodingKeys;
}

uint64_t _s14GroupKitCrypto5NonceV10CodingKeysOwet_0(unsigned int *a1, int a2)
{
  int v2;
  int v3;

  if (!a2)
    return 0;
  if ((a2 + 1) >= 0x10000)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 1) < 0x100)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
    return *a1;
  if (v3 == 2)
    return *(unsigned __int16 *)a1;
  return *(unsigned __int8 *)a1;
}

uint64_t _s14GroupKitCrypto5NonceV10CodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23D5EEE1C + 4 * byte_23D66E5CA[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23D5EEE3C + 4 * byte_23D66E5CF[v4]))();
}

_BYTE *sub_23D5EEE1C(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23D5EEE3C(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D5EEE44(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D5EEE4C(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D5EEE54(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D5EEE5C(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for GroupID.CodingKeys()
{
  return &type metadata for GroupID.CodingKeys;
}

uint64_t _s14GroupKitCrypto9GroupRoleO10RSVPStatusOwet_0(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFC)
    goto LABEL_17;
  if (a2 + 4 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 4) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 4;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 4;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 4;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 5;
  v8 = v6 - 5;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t _s14GroupKitCrypto9GroupRoleO10RSVPStatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 4 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 4) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFC)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFB)
    return ((uint64_t (*)(void))((char *)&loc_23D5EEF54 + 4 * byte_23D66E5D9[v4]))();
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_23D5EEF88 + 4 * byte_23D66E5D4[v4]))();
}

uint64_t sub_23D5EEF88(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5EEF90(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D5EEF98);
  return result;
}

uint64_t sub_23D5EEFA4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D5EEFACLL);
  *(_BYTE *)result = a2 + 4;
  return result;
}

uint64_t sub_23D5EEFB0(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5EEFB8(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.CodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.AcceptCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.AcceptCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.RejectCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.RejectCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.LeaveCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.LeaveCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.RSVPStatus.DestroyCodingKeys()
{
  return &type metadata for GroupRole.RSVPStatus.DestroyCodingKeys;
}

uint64_t _s14GroupKitCrypto21SynchronizationResultOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D5EF070 + 4 * byte_23D66E5E3[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D5EF0A4 + 4 * byte_23D66E5DE[v4]))();
}

uint64_t sub_23D5EF0A4(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5EF0AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D5EF0B4);
  return result;
}

uint64_t sub_23D5EF0C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D5EF0C8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D5EF0CC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D5EF0D4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for GroupRole.CodingKeys()
{
  return &type metadata for GroupRole.CodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.AdministratorCodingKeys()
{
  return &type metadata for GroupRole.AdministratorCodingKeys;
}

ValueMetadata *type metadata accessor for GroupRole.MemberCodingKeys()
{
  return &type metadata for GroupRole.MemberCodingKeys;
}

uint64_t *sub_23D5EF110(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  _QWORD *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  uint64_t v30;
  _QWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v58;
  void (*v59)(char *, char *, uint64_t);
  void (*v60)(char *, char *, uint64_t);

  v4 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v5 = *a2;
  *a1 = *a2;
  if ((v4 & 0x20000) != 0)
  {
    a1 = (uint64_t *)(v5 + ((v4 + 16) & ~(unint64_t)v4));
    swift_retain();
  }
  else
  {
    v6 = *(int *)(a3 + 20);
    v7 = (uint64_t *)((char *)a1 + v6);
    v8 = (char *)a2 + v6;
    *(_DWORD *)((char *)a1 + v6) = *(_DWORD *)((char *)a2 + v6);
    v9 = *(uint64_t *)((char *)a2 + v6 + 8);
    v10 = *(uint64_t *)((char *)a2 + v6 + 16);
    swift_bridgeObjectRetain();
    sub_23D5AFA60(v9, v10);
    v7[1] = v9;
    v7[2] = v10;
    v11 = *((_QWORD *)v8 + 3);
    v12 = *((_QWORD *)v8 + 4);
    sub_23D5AFA60(v11, v12);
    v7[3] = v11;
    v7[4] = v12;
    v13 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
    v14 = v13[7];
    v15 = (char *)v7 + v14;
    v16 = &v8[v14];
    v17 = sub_23D66BE68();
    v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16);
    v18(v15, v16, v17);
    v19 = v13[8];
    v20 = (_QWORD *)((char *)v7 + v19);
    v21 = &v8[v19];
    v22 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    v23 = *(_QWORD *)(v22 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    {
      v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
      memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    }
    else
    {
      *v20 = *(_QWORD *)v21;
      v25 = *(int *)(v22 + 20);
      v59 = v18;
      v26 = v17;
      v27 = (char *)v20 + v25;
      v28 = &v21[v25];
      swift_bridgeObjectRetain();
      v29 = v27;
      v17 = v26;
      v18 = v59;
      v59(v29, v28, v17);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
    }
    v30 = v13[9];
    v31 = (_QWORD *)((char *)v7 + v30);
    v32 = &v8[v30];
    v33 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      v58 = v17;
      v60 = v18;
      v36 = *(_QWORD *)v32;
      v37 = *((_QWORD *)v32 + 1);
      sub_23D5AFA60(*(_QWORD *)v32, v37);
      *v31 = v36;
      v31[1] = v37;
      v38 = *((_QWORD *)v32 + 2);
      v39 = *((_QWORD *)v32 + 3);
      sub_23D5AFA60(v38, v39);
      v31[2] = v38;
      v31[3] = v39;
      v40 = *((_QWORD *)v32 + 4);
      v41 = *((_QWORD *)v32 + 5);
      sub_23D5AFA60(v40, v41);
      v31[4] = v40;
      v31[5] = v41;
      v42 = *((_QWORD *)v32 + 6);
      v43 = *((_QWORD *)v32 + 7);
      sub_23D5AFA60(v42, v43);
      v31[6] = v42;
      v31[7] = v43;
      v17 = v58;
      v18 = v60;
      v60((char *)v31 + *(int *)(v33 + 32), &v32[*(int *)(v33 + 32)], v58);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
    v44 = v13[10];
    v45 = (_QWORD *)((char *)v7 + v44);
    v46 = &v8[v44];
    v47 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      v50 = v17;
      v51 = *(_QWORD *)v46;
      v52 = *((_QWORD *)v46 + 1);
      sub_23D5AFA60(*(_QWORD *)v46, v52);
      *v45 = v51;
      v45[1] = v52;
      v53 = *((_QWORD *)v46 + 2);
      v54 = *((_QWORD *)v46 + 3);
      sub_23D5AFA60(v53, v54);
      v45[2] = v53;
      v45[3] = v54;
      v55 = *((_QWORD *)v46 + 4);
      v56 = *((_QWORD *)v46 + 5);
      sub_23D5AFA60(v55, v56);
      v45[4] = v55;
      v45[5] = v56;
      v18((char *)v45 + *(int *)(v47 + 28), &v46[*(int *)(v47 + 28)], v50);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  }
  return a1;
}

uint64_t sub_23D5EF464(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  void (*v15)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  sub_23D5DDA20(*(_QWORD *)(v4 + 8), *(_QWORD *)(v4 + 16));
  sub_23D5DDA20(*(_QWORD *)(v4 + 24), *(_QWORD *)(v4 + 32));
  v5 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v6 = v4 + v5[7];
  v7 = sub_23D66BE68();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v15(v6, v7);
  v8 = v4 + v5[8];
  v9 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    swift_bridgeObjectRelease();
    v15(v8 + *(int *)(v9 + 20), v7);
  }
  v10 = v4 + v5[9];
  v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11))
  {
    sub_23D5DDA20(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    sub_23D5DDA20(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
    sub_23D5DDA20(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
    sub_23D5DDA20(*(_QWORD *)(v10 + 48), *(_QWORD *)(v10 + 56));
    v15(v10 + *(int *)(v11 + 32), v7);
  }
  v12 = v4 + v5[10];
  v13 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 48))(v12, 1, v13);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v12, *(_QWORD *)(v12 + 8));
    sub_23D5DDA20(*(_QWORD *)(v12 + 16), *(_QWORD *)(v12 + 24));
    sub_23D5DDA20(*(_QWORD *)(v12 + 32), *(_QWORD *)(v12 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v15)(v12 + *(int *)(v13 + 28), v7);
  }
  return result;
}

_QWORD *sub_23D5EF614(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  int *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  char *v26;
  char *v27;
  uint64_t v28;
  _QWORD *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void (*v48)(char *, char *, uint64_t);
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *result;
  void (*v56)(char *, char *, uint64_t);

  *a1 = *a2;
  v3 = *(int *)(a3 + 20);
  v4 = (_QWORD *)((char *)a1 + v3);
  v5 = (char *)a2 + v3;
  *(_DWORD *)((char *)a1 + v3) = *(_DWORD *)((char *)a2 + v3);
  v6 = *(_QWORD *)((char *)a2 + v3 + 8);
  v7 = *(_QWORD *)((char *)a2 + v3 + 16);
  swift_bridgeObjectRetain();
  sub_23D5AFA60(v6, v7);
  v4[1] = v6;
  v4[2] = v7;
  v8 = *((_QWORD *)v5 + 3);
  v9 = *((_QWORD *)v5 + 4);
  sub_23D5AFA60(v8, v9);
  v4[3] = v8;
  v4[4] = v9;
  v10 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v11 = v10[7];
  v12 = (char *)v4 + v11;
  v13 = &v5[v11];
  v14 = sub_23D66BE68();
  v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
  v15(v12, v13, v14);
  v16 = v10[8];
  v17 = (_QWORD *)((char *)v4 + v16);
  v18 = &v5[v16];
  v19 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v20 = *(_QWORD *)(v19 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
  {
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
  }
  else
  {
    *v17 = *(_QWORD *)v18;
    v22 = *(int *)(v19 + 20);
    v23 = v14;
    v24 = v15;
    v25 = (char *)v17 + v22;
    v26 = &v18[v22];
    swift_bridgeObjectRetain();
    v27 = v25;
    v15 = v24;
    v14 = v23;
    v15(v27, v26, v23);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  }
  v28 = v10[9];
  v29 = (_QWORD *)((char *)v4 + v28);
  v30 = &v5[v28];
  v31 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    v56 = v15;
    v34 = *(_QWORD *)v30;
    v35 = *((_QWORD *)v30 + 1);
    sub_23D5AFA60(*(_QWORD *)v30, v35);
    *v29 = v34;
    v29[1] = v35;
    v36 = *((_QWORD *)v30 + 2);
    v37 = *((_QWORD *)v30 + 3);
    sub_23D5AFA60(v36, v37);
    v29[2] = v36;
    v29[3] = v37;
    v38 = *((_QWORD *)v30 + 4);
    v39 = *((_QWORD *)v30 + 5);
    sub_23D5AFA60(v38, v39);
    v29[4] = v38;
    v29[5] = v39;
    v40 = *((_QWORD *)v30 + 6);
    v41 = *((_QWORD *)v30 + 7);
    sub_23D5AFA60(v40, v41);
    v29[6] = v40;
    v29[7] = v41;
    v15 = v56;
    v56((char *)v29 + *(int *)(v31 + 32), &v30[*(int *)(v31 + 32)], v14);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  v42 = v10[10];
  v43 = (_QWORD *)((char *)v4 + v42);
  v44 = &v5[v42];
  v45 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    v48 = v15;
    v49 = *(_QWORD *)v44;
    v50 = *((_QWORD *)v44 + 1);
    sub_23D5AFA60(*(_QWORD *)v44, v50);
    *v43 = v49;
    v43[1] = v50;
    v51 = *((_QWORD *)v44 + 2);
    v52 = *((_QWORD *)v44 + 3);
    sub_23D5AFA60(v51, v52);
    v43[2] = v51;
    v43[3] = v52;
    v53 = *((_QWORD *)v44 + 4);
    v54 = *((_QWORD *)v44 + 5);
    sub_23D5AFA60(v53, v54);
    v43[4] = v53;
    v43[5] = v54;
    v48((char *)v43 + *(int *)(v45 + 28), &v44[*(int *)(v45 + 28)], v14);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  result = a1;
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return result;
}

_QWORD *sub_23D5EF940(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(char *, uint64_t, uint64_t);
  int v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t (*v40)(uint64_t *, uint64_t, uint64_t);
  int v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t (*v57)(uint64_t *, uint64_t, uint64_t);
  int v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  void (*v96)(char *, char *);
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v98 = a3;
  v99 = a2;
  v6 = *(int *)(a3 + 20);
  v7 = (_QWORD *)((char *)a1 + v6);
  v8 = (char *)a2 + v6;
  *(_DWORD *)((char *)a1 + v6) = *(_DWORD *)v8;
  v9 = *((_QWORD *)v8 + 1);
  v10 = *((_QWORD *)v8 + 2);
  sub_23D5AFA60(v9, v10);
  v11 = v7[1];
  v12 = v7[2];
  v7[1] = v9;
  v7[2] = v10;
  sub_23D5DDA20(v11, v12);
  v13 = *((_QWORD *)v8 + 3);
  v14 = *((_QWORD *)v8 + 4);
  sub_23D5AFA60(v13, v14);
  v15 = v7[3];
  v16 = v7[4];
  v7[3] = v13;
  v7[4] = v14;
  sub_23D5DDA20(v15, v16);
  v17 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v18 = v17[7];
  v19 = (char *)v7 + v18;
  v20 = &v8[v18];
  v21 = sub_23D66BE68();
  v97 = *(_QWORD *)(v21 - 8);
  v100 = v21;
  v96 = *(void (**)(char *, char *))(v97 + 24);
  v96(v19, v20);
  v22 = v17[8];
  v23 = (char *)v7 + v22;
  v24 = &v8[v22];
  v25 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v26 = *(_QWORD *)(v25 - 8);
  v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v26 + 48);
  v28 = v27(v23, 1, v25);
  v29 = v27(v24, 1, v25);
  if (v28)
  {
    if (!v29)
    {
      *(_QWORD *)v23 = *(_QWORD *)v24;
      v30 = *(int *)(v25 + 20);
      v31 = &v23[v30];
      v32 = &v24[v30];
      v33 = *(void (**)(char *, char *, uint64_t))(v97 + 16);
      swift_bridgeObjectRetain();
      v33(v31, v32, v100);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    sub_23D5E6950((uint64_t)v23, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v23 = *(_QWORD *)v24;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v96)(&v23[*(int *)(v25 + 20)], &v24[*(int *)(v25 + 20)], v100);
LABEL_7:
  v35 = v17[9];
  v36 = (_QWORD *)((char *)v7 + v35);
  v37 = (uint64_t *)&v8[v35];
  v38 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v39 = *(_QWORD *)(v38 - 8);
  v40 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v39 + 48);
  v41 = v40(v36, 1, v38);
  v42 = v40(v37, 1, v38);
  if (v41)
  {
    if (!v42)
    {
      v43 = *v37;
      v44 = v37[1];
      sub_23D5AFA60(*v37, v44);
      *v36 = v43;
      v36[1] = v44;
      v45 = v37[2];
      v46 = v37[3];
      sub_23D5AFA60(v45, v46);
      v36[2] = v45;
      v36[3] = v46;
      v47 = v37[4];
      v48 = v37[5];
      sub_23D5AFA60(v47, v48);
      v36[4] = v47;
      v36[5] = v48;
      v49 = v37[6];
      v50 = v37[7];
      sub_23D5AFA60(v49, v50);
      v36[6] = v49;
      v36[7] = v50;
      (*(void (**)(char *, char *, uint64_t))(v97 + 16))((char *)v36 + *(int *)(v38 + 32), (char *)v37 + *(int *)(v38 + 32), v100);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v39 + 56))(v36, 0, 1, v38);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v42)
  {
    sub_23D5E6950((uint64_t)v36, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    v51 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v36, v37, *(_QWORD *)(*(_QWORD *)(v51 - 8) + 64));
    goto LABEL_13;
  }
  v68 = *v37;
  v69 = v37[1];
  sub_23D5AFA60(*v37, v69);
  v70 = *v36;
  v71 = v36[1];
  *v36 = v68;
  v36[1] = v69;
  sub_23D5DDA20(v70, v71);
  v72 = v37[2];
  v73 = v37[3];
  sub_23D5AFA60(v72, v73);
  v74 = v36[2];
  v75 = v36[3];
  v36[2] = v72;
  v36[3] = v73;
  sub_23D5DDA20(v74, v75);
  v76 = v37[4];
  v77 = v37[5];
  sub_23D5AFA60(v76, v77);
  v78 = v36[4];
  v79 = v36[5];
  v36[4] = v76;
  v36[5] = v77;
  sub_23D5DDA20(v78, v79);
  v80 = v37[6];
  v81 = v37[7];
  sub_23D5AFA60(v80, v81);
  v82 = v36[6];
  v83 = v36[7];
  v36[6] = v80;
  v36[7] = v81;
  sub_23D5DDA20(v82, v83);
  ((void (*)(char *, char *, uint64_t))v96)((char *)v36 + *(int *)(v38 + 32), (char *)v37 + *(int *)(v38 + 32), v100);
LABEL_13:
  v52 = v17[10];
  v53 = (_QWORD *)((char *)v7 + v52);
  v54 = (uint64_t *)&v8[v52];
  v55 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v56 = *(_QWORD *)(v55 - 8);
  v57 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v56 + 48);
  v58 = v57(v53, 1, v55);
  v59 = v57(v54, 1, v55);
  if (!v58)
  {
    if (!v59)
    {
      v84 = *v54;
      v85 = v54[1];
      sub_23D5AFA60(*v54, v85);
      v86 = *v53;
      v87 = v53[1];
      *v53 = v84;
      v53[1] = v85;
      sub_23D5DDA20(v86, v87);
      v88 = v54[2];
      v89 = v54[3];
      sub_23D5AFA60(v88, v89);
      v90 = v53[2];
      v91 = v53[3];
      v53[2] = v88;
      v53[3] = v89;
      sub_23D5DDA20(v90, v91);
      v92 = v54[4];
      v93 = v54[5];
      sub_23D5AFA60(v92, v93);
      v94 = v53[4];
      v95 = v53[5];
      v53[4] = v92;
      v53[5] = v93;
      sub_23D5DDA20(v94, v95);
      ((void (*)(char *, char *, uint64_t))v96)((char *)v53 + *(int *)(v55 + 28), (char *)v54 + *(int *)(v55 + 28), v100);
      goto LABEL_19;
    }
    sub_23D5E6950((uint64_t)v53, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v59)
  {
LABEL_18:
    v66 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v53, v54, *(_QWORD *)(*(_QWORD *)(v66 - 8) + 64));
    goto LABEL_19;
  }
  v60 = *v54;
  v61 = v54[1];
  sub_23D5AFA60(*v54, v61);
  *v53 = v60;
  v53[1] = v61;
  v62 = v54[2];
  v63 = v54[3];
  sub_23D5AFA60(v62, v63);
  v53[2] = v62;
  v53[3] = v63;
  v64 = v54[4];
  v65 = v54[5];
  sub_23D5AFA60(v64, v65);
  v53[4] = v64;
  v53[5] = v65;
  (*(void (**)(char *, char *, uint64_t))(v97 + 16))((char *)v53 + *(int *)(v55 + 28), (char *)v54 + *(int *)(v55 + 28), v100);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v56 + 56))(v53, 0, 1, v55);
LABEL_19:
  *(_DWORD *)((char *)a1 + *(int *)(v98 + 24)) = *(_DWORD *)((char *)v99 + *(int *)(v98 + 24));
  return a1;
}

_QWORD *sub_23D5EFE44(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  int *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  *(_DWORD *)v5 = *(_DWORD *)((char *)a2 + v4);
  *(_OWORD *)(v5 + 8) = *(_OWORD *)((char *)a2 + v4 + 8);
  *(_OWORD *)(v5 + 24) = *(_OWORD *)((char *)a2 + v4 + 24);
  v7 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v8 = v7[7];
  v9 = &v5[v8];
  v10 = &v6[v8];
  v11 = sub_23D66BE68();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 32);
  v12(v9, v10, v11);
  v13 = v7[8];
  v14 = &v5[v13];
  v15 = &v6[v13];
  v16 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_QWORD *)v14 = *(_QWORD *)v15;
    v12(&v14[*(int *)(v16 + 20)], &v15[*(int *)(v16 + 20)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v19 = v7[9];
  v20 = &v5[v19];
  v21 = &v6[v19];
  v22 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    v25 = *((_OWORD *)v21 + 1);
    *(_OWORD *)v20 = *(_OWORD *)v21;
    *((_OWORD *)v20 + 1) = v25;
    v26 = *((_OWORD *)v21 + 3);
    *((_OWORD *)v20 + 2) = *((_OWORD *)v21 + 2);
    *((_OWORD *)v20 + 3) = v26;
    v12(&v20[*(int *)(v22 + 32)], &v21[*(int *)(v22 + 32)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v27 = v7[10];
  v28 = &v5[v27];
  v29 = &v6[v27];
  v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v31 = *(_QWORD *)(v30 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
  {
    v32 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
  }
  else
  {
    v33 = *((_OWORD *)v29 + 1);
    *(_OWORD *)v28 = *(_OWORD *)v29;
    *((_OWORD *)v28 + 1) = v33;
    *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
    v12(&v28[*(int *)(v30 + 28)], &v29[*(int *)(v30 + 28)], v11);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  }
  *(_DWORD *)((char *)a1 + *(int *)(a3 + 24)) = *(_DWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

_QWORD *sub_23D5F00BC(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int *v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(char *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(char *, uint64_t, uint64_t);
  int v33;
  int v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t (*v43)(uint64_t *, uint64_t, uint64_t);
  int v44;
  int v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  void (*v63)(char *, char *);
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v65 = a3;
  v66 = a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  *(_DWORD *)v7 = *(_DWORD *)((char *)a2 + v6);
  v9 = *(_QWORD *)((char *)a1 + v6 + 8);
  v10 = *(_QWORD *)((char *)a1 + v6 + 16);
  *(_OWORD *)(v7 + 8) = *(_OWORD *)((char *)a2 + v6 + 8);
  sub_23D5DDA20(v9, v10);
  v11 = *((_QWORD *)v7 + 3);
  v12 = *((_QWORD *)v7 + 4);
  *(_OWORD *)(v7 + 24) = *(_OWORD *)(v8 + 24);
  sub_23D5DDA20(v11, v12);
  v13 = (int *)type metadata accessor for GKCrypto_GroupBlob(0);
  v14 = v13[7];
  v15 = &v7[v14];
  v16 = &v8[v14];
  v17 = sub_23D66BE68();
  v64 = *(_QWORD *)(v17 - 8);
  v67 = v17;
  v63 = *(void (**)(char *, char *))(v64 + 40);
  v63(v15, v16);
  v18 = v13[8];
  v19 = &v7[v18];
  v20 = &v8[v18];
  v21 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *(_QWORD *)v19 = *(_QWORD *)v20;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v19 = *(_QWORD *)v20;
  swift_bridgeObjectRelease();
  ((void (*)(char *, char *, uint64_t))v63)(&v19[*(int *)(v21 + 20)], &v20[*(int *)(v21 + 20)], v67);
LABEL_7:
  v27 = v13[9];
  v28 = &v7[v27];
  v29 = &v8[v27];
  v30 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32(v29, 1, v30);
  if (v33)
  {
    if (!v34)
    {
      v35 = *((_OWORD *)v29 + 1);
      *(_OWORD *)v28 = *(_OWORD *)v29;
      *((_OWORD *)v28 + 1) = v35;
      v36 = *((_OWORD *)v29 + 3);
      *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
      *((_OWORD *)v28 + 3) = v36;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(&v28[*(int *)(v30 + 32)], &v29[*(int *)(v30 + 32)], v67);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v34)
  {
    sub_23D5E6950((uint64_t)v28, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    goto LABEL_13;
  }
  v49 = *(_QWORD *)v28;
  v50 = *((_QWORD *)v28 + 1);
  *(_OWORD *)v28 = *(_OWORD *)v29;
  sub_23D5DDA20(v49, v50);
  v51 = *((_QWORD *)v28 + 2);
  v52 = *((_QWORD *)v28 + 3);
  *((_OWORD *)v28 + 1) = *((_OWORD *)v29 + 1);
  sub_23D5DDA20(v51, v52);
  v53 = *((_QWORD *)v28 + 4);
  v54 = *((_QWORD *)v28 + 5);
  *((_OWORD *)v28 + 2) = *((_OWORD *)v29 + 2);
  sub_23D5DDA20(v53, v54);
  v55 = *((_QWORD *)v28 + 6);
  v56 = *((_QWORD *)v28 + 7);
  *((_OWORD *)v28 + 3) = *((_OWORD *)v29 + 3);
  sub_23D5DDA20(v55, v56);
  ((void (*)(char *, char *, uint64_t))v63)(&v28[*(int *)(v30 + 32)], &v29[*(int *)(v30 + 32)], v67);
LABEL_13:
  v38 = v13[10];
  v39 = (uint64_t *)&v7[v38];
  v40 = &v8[v38];
  v41 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v42 = *(_QWORD *)(v41 - 8);
  v43 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48);
  v44 = v43(v39, 1, v41);
  v45 = v43((uint64_t *)v40, 1, v41);
  if (!v44)
  {
    if (!v45)
    {
      v57 = *v39;
      v58 = v39[1];
      *(_OWORD *)v39 = *(_OWORD *)v40;
      sub_23D5DDA20(v57, v58);
      v59 = v39[2];
      v60 = v39[3];
      *((_OWORD *)v39 + 1) = *((_OWORD *)v40 + 1);
      sub_23D5DDA20(v59, v60);
      v61 = v39[4];
      v62 = v39[5];
      *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
      sub_23D5DDA20(v61, v62);
      ((void (*)(char *, char *, uint64_t))v63)((char *)v39 + *(int *)(v41 + 28), &v40[*(int *)(v41 + 28)], v67);
      goto LABEL_19;
    }
    sub_23D5E6950((uint64_t)v39, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v45)
  {
LABEL_18:
    v47 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_19;
  }
  v46 = *((_OWORD *)v40 + 1);
  *(_OWORD *)v39 = *(_OWORD *)v40;
  *((_OWORD *)v39 + 1) = v46;
  *((_OWORD *)v39 + 2) = *((_OWORD *)v40 + 2);
  (*(void (**)(char *, char *, uint64_t))(v64 + 32))((char *)v39 + *(int *)(v41 + 28), &v40[*(int *)(v41 + 28)], v67);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
LABEL_19:
  *(_DWORD *)((char *)a1 + *(int *)(v65 + 24)) = *(_DWORD *)((char *)v66 + *(int *)(v65 + 24));
  return a1;
}

uint64_t sub_23D5F04CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F04D8(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = type metadata accessor for GKCrypto_GroupBlob(0);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_23D5F0554()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D5F0560(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = type metadata accessor for GKCrypto_GroupBlob(0);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D5F05D4()
{
  uint64_t result;
  unint64_t v1;

  result = type metadata accessor for GKCrypto_GroupBlob(319);
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_23D5F065C()
{
  unint64_t result;

  result = qword_256C797F0;
  if (!qword_256C797F0)
  {
    result = MEMORY[0x242636790](&unk_23D66F044, &type metadata for GroupRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C797F0);
  }
  return result;
}

unint64_t sub_23D5F06A4()
{
  unint64_t result;

  result = qword_256C797F8;
  if (!qword_256C797F8)
  {
    result = MEMORY[0x242636790](&unk_23D66F28C, &type metadata for GroupRole.RSVPStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C797F8);
  }
  return result;
}

unint64_t sub_23D5F06EC()
{
  unint64_t result;

  result = qword_256C79800;
  if (!qword_256C79800)
  {
    result = MEMORY[0x242636790](&unk_23D66F344, &type metadata for GroupID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79800);
  }
  return result;
}

unint64_t sub_23D5F0734()
{
  unint64_t result;

  result = qword_256C79808;
  if (!qword_256C79808)
  {
    result = MEMORY[0x242636790](&unk_23D66F3FC, &type metadata for GroupKitUserID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79808);
  }
  return result;
}

unint64_t sub_23D5F077C()
{
  unint64_t result;

  result = qword_256C79810;
  if (!qword_256C79810)
  {
    result = MEMORY[0x242636790](&unk_23D66F4B4, &type metadata for UserDSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79810);
  }
  return result;
}

unint64_t sub_23D5F07C4()
{
  unint64_t result;

  result = qword_256C79818;
  if (!qword_256C79818)
  {
    result = MEMORY[0x242636790](&unk_23D66F56C, &type metadata for KeyShare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79818);
  }
  return result;
}

unint64_t sub_23D5F080C()
{
  unint64_t result;

  result = qword_256C79820;
  if (!qword_256C79820)
  {
    result = MEMORY[0x242636790](&unk_23D66F624, &type metadata for KeyOffset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79820);
  }
  return result;
}

unint64_t sub_23D5F0854()
{
  unint64_t result;

  result = qword_256C79828;
  if (!qword_256C79828)
  {
    result = MEMORY[0x242636790](&unk_23D66F6DC, &type metadata for Nonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79828);
  }
  return result;
}

unint64_t sub_23D5F089C()
{
  unint64_t result;

  result = qword_256C79830;
  if (!qword_256C79830)
  {
    result = MEMORY[0x242636790](&unk_23D66F704, &type metadata for Group.GroupState);
    atomic_store(result, (unint64_t *)&qword_256C79830);
  }
  return result;
}

unint64_t sub_23D5F08E4()
{
  unint64_t result;

  result = qword_256C79838;
  if (!qword_256C79838)
  {
    result = MEMORY[0x242636790](&unk_23D66F64C, &type metadata for Nonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79838);
  }
  return result;
}

unint64_t sub_23D5F092C()
{
  unint64_t result;

  result = qword_256C79840;
  if (!qword_256C79840)
  {
    result = MEMORY[0x242636790](&unk_23D66F674, &type metadata for Nonce.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79840);
  }
  return result;
}

unint64_t sub_23D5F0974()
{
  unint64_t result;

  result = qword_256C79848;
  if (!qword_256C79848)
  {
    result = MEMORY[0x242636790](&unk_23D66F594, &type metadata for KeyOffset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79848);
  }
  return result;
}

unint64_t sub_23D5F09BC()
{
  unint64_t result;

  result = qword_256C79850;
  if (!qword_256C79850)
  {
    result = MEMORY[0x242636790](&unk_23D66F5BC, &type metadata for KeyOffset.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79850);
  }
  return result;
}

unint64_t sub_23D5F0A04()
{
  unint64_t result;

  result = qword_256C79858;
  if (!qword_256C79858)
  {
    result = MEMORY[0x242636790](&unk_23D66F4DC, &type metadata for KeyShare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79858);
  }
  return result;
}

unint64_t sub_23D5F0A4C()
{
  unint64_t result;

  result = qword_256C79860;
  if (!qword_256C79860)
  {
    result = MEMORY[0x242636790](&unk_23D66F504, &type metadata for KeyShare.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79860);
  }
  return result;
}

unint64_t sub_23D5F0A94()
{
  unint64_t result;

  result = qword_256C79868;
  if (!qword_256C79868)
  {
    result = MEMORY[0x242636790](&unk_23D66F424, &type metadata for UserDSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79868);
  }
  return result;
}

unint64_t sub_23D5F0ADC()
{
  unint64_t result;

  result = qword_256C79870;
  if (!qword_256C79870)
  {
    result = MEMORY[0x242636790](&unk_23D66F44C, &type metadata for UserDSID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79870);
  }
  return result;
}

unint64_t sub_23D5F0B24()
{
  unint64_t result;

  result = qword_256C79878;
  if (!qword_256C79878)
  {
    result = MEMORY[0x242636790](&unk_23D66F36C, &type metadata for GroupKitUserID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79878);
  }
  return result;
}

unint64_t sub_23D5F0B6C()
{
  unint64_t result;

  result = qword_256C79880;
  if (!qword_256C79880)
  {
    result = MEMORY[0x242636790](&unk_23D66F394, &type metadata for GroupKitUserID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79880);
  }
  return result;
}

unint64_t sub_23D5F0BB4()
{
  unint64_t result;

  result = qword_256C79888;
  if (!qword_256C79888)
  {
    result = MEMORY[0x242636790](&unk_23D66F2B4, &type metadata for GroupID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79888);
  }
  return result;
}

unint64_t sub_23D5F0BFC()
{
  unint64_t result;

  result = qword_256C79890;
  if (!qword_256C79890)
  {
    result = MEMORY[0x242636790](&unk_23D66F2DC, &type metadata for GroupID.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79890);
  }
  return result;
}

unint64_t sub_23D5F0C44()
{
  unint64_t result;

  result = qword_256C79898;
  if (!qword_256C79898)
  {
    result = MEMORY[0x242636790](&unk_23D66F1AC, &type metadata for GroupRole.RSVPStatus.AcceptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79898);
  }
  return result;
}

unint64_t sub_23D5F0C8C()
{
  unint64_t result;

  result = qword_256C798A0;
  if (!qword_256C798A0)
  {
    result = MEMORY[0x242636790](&unk_23D66F1D4, &type metadata for GroupRole.RSVPStatus.AcceptCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798A0);
  }
  return result;
}

unint64_t sub_23D5F0CD4()
{
  unint64_t result;

  result = qword_256C798A8;
  if (!qword_256C798A8)
  {
    result = MEMORY[0x242636790](&unk_23D66F15C, &type metadata for GroupRole.RSVPStatus.RejectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798A8);
  }
  return result;
}

unint64_t sub_23D5F0D1C()
{
  unint64_t result;

  result = qword_256C798B0;
  if (!qword_256C798B0)
  {
    result = MEMORY[0x242636790](&unk_23D66F184, &type metadata for GroupRole.RSVPStatus.RejectCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798B0);
  }
  return result;
}

unint64_t sub_23D5F0D64()
{
  unint64_t result;

  result = qword_256C798B8;
  if (!qword_256C798B8)
  {
    result = MEMORY[0x242636790](&unk_23D66F10C, &type metadata for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798B8);
  }
  return result;
}

unint64_t sub_23D5F0DAC()
{
  unint64_t result;

  result = qword_256C798C0;
  if (!qword_256C798C0)
  {
    result = MEMORY[0x242636790](&unk_23D66F134, &type metadata for GroupRole.RSVPStatus.DemoteFromAdministratorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798C0);
  }
  return result;
}

unint64_t sub_23D5F0DF4()
{
  unint64_t result;

  result = qword_256C798C8;
  if (!qword_256C798C8)
  {
    result = MEMORY[0x242636790](&unk_23D66F0BC, &type metadata for GroupRole.RSVPStatus.LeaveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798C8);
  }
  return result;
}

unint64_t sub_23D5F0E3C()
{
  unint64_t result;

  result = qword_256C798D0;
  if (!qword_256C798D0)
  {
    result = MEMORY[0x242636790](&unk_23D66F0E4, &type metadata for GroupRole.RSVPStatus.LeaveCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798D0);
  }
  return result;
}

unint64_t sub_23D5F0E84()
{
  unint64_t result;

  result = qword_256C798D8;
  if (!qword_256C798D8)
  {
    result = MEMORY[0x242636790](&unk_23D66F06C, &type metadata for GroupRole.RSVPStatus.DestroyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798D8);
  }
  return result;
}

unint64_t sub_23D5F0ECC()
{
  unint64_t result;

  result = qword_256C798E0;
  if (!qword_256C798E0)
  {
    result = MEMORY[0x242636790](&unk_23D66F094, &type metadata for GroupRole.RSVPStatus.DestroyCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798E0);
  }
  return result;
}

unint64_t sub_23D5F0F14()
{
  unint64_t result;

  result = qword_256C798E8;
  if (!qword_256C798E8)
  {
    result = MEMORY[0x242636790](&unk_23D66F1FC, &type metadata for GroupRole.RSVPStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798E8);
  }
  return result;
}

unint64_t sub_23D5F0F5C()
{
  unint64_t result;

  result = qword_256C798F0;
  if (!qword_256C798F0)
  {
    result = MEMORY[0x242636790](&unk_23D66F224, &type metadata for GroupRole.RSVPStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798F0);
  }
  return result;
}

unint64_t sub_23D5F0FA4()
{
  unint64_t result;

  result = qword_256C798F8;
  if (!qword_256C798F8)
  {
    result = MEMORY[0x242636790](&unk_23D66EF64, &type metadata for GroupRole.AdministratorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C798F8);
  }
  return result;
}

unint64_t sub_23D5F0FEC()
{
  unint64_t result;

  result = qword_256C79900;
  if (!qword_256C79900)
  {
    result = MEMORY[0x242636790](&unk_23D66EF8C, &type metadata for GroupRole.AdministratorCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79900);
  }
  return result;
}

unint64_t sub_23D5F1034()
{
  unint64_t result;

  result = qword_256C79908;
  if (!qword_256C79908)
  {
    result = MEMORY[0x242636790](&unk_23D66EF14, &type metadata for GroupRole.MemberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79908);
  }
  return result;
}

unint64_t sub_23D5F107C()
{
  unint64_t result;

  result = qword_256C79910;
  if (!qword_256C79910)
  {
    result = MEMORY[0x242636790](&unk_23D66EF3C, &type metadata for GroupRole.MemberCodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79910);
  }
  return result;
}

unint64_t sub_23D5F10C4()
{
  unint64_t result;

  result = qword_256C79918;
  if (!qword_256C79918)
  {
    result = MEMORY[0x242636790](&unk_23D66EFB4, &type metadata for GroupRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79918);
  }
  return result;
}

unint64_t sub_23D5F110C()
{
  unint64_t result;

  result = qword_256C79920;
  if (!qword_256C79920)
  {
    result = MEMORY[0x242636790](&unk_23D66EFDC, &type metadata for GroupRole.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_256C79920);
  }
  return result;
}

_OWORD *sub_23D5F1150(_OWORD *a1, _OWORD *a2)
{
  __int128 v2;

  v2 = a1[1];
  *a2 = *a1;
  a2[1] = v2;
  return a2;
}

uint64_t sub_23D5F1164(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 16))(a2, a1);
  return a2;
}

uint64_t sub_23D5F11A0(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(MEMORY[0x24BEE23D0] - 8) + 8))();
  return a1;
}

uint64_t *sub_23D5F11D4(_OWORD *a1, uint64_t *a2)
{
  assignWithTake for GroupAccessInfo(a2, a1);
  return a2;
}

uint64_t sub_23D5F1210(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5DCFEC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_DWORD *)(v1 + 40), 1);
}

uint64_t sub_23D5F1234(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5DCFEC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_DWORD *)(v1 + 40), 0);
}

uint64_t *sub_23D5F1258(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  return a1;
}

uint64_t sub_23D5F12B8(uint64_t *a1)
{
  uint64_t v1;

  return sub_23D5D5694(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23D5F12D0(_QWORD *a1)
{
  uint64_t v1;

  return sub_23D5D5DA4(a1, *(_DWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(uint64_t **)(v1 + 40), *(_QWORD *)(v1 + 48));
}

uint64_t sub_23D5F12F0(_QWORD *a1)
{
  uint64_t v1;

  return sub_23D5D5F8C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
}

uint64_t sub_23D5F130C(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5D5BB8(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_BYTE **)(v1 + 56));
}

uint64_t sub_23D5F132C(uint64_t a1)
{
  uint64_t v1;
  int v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t result;

  v3 = *(_DWORD *)(v1 + 16);
  v5 = *(_QWORD *)(v1 + 24);
  v4 = *(_QWORD *)(v1 + 32);
  *(_DWORD *)a1 = v3;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  sub_23D5AFA60(v5, v4);
  result = sub_23D5DDA20(v6, v7);
  *(_QWORD *)(a1 + 8) = v5;
  *(_QWORD *)(a1 + 16) = v4;
  return result;
}

uint64_t sub_23D5F138C(uint64_t *a1)
{
  uint64_t v1;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v1 + 40);
  v3 = *(_QWORD *)(v1 + 48);
  v5 = *a1;
  v6 = a1[1];
  sub_23D5AFA60(v4, v3);
  result = sub_23D5DDA20(v5, v6);
  *a1 = v4;
  a1[1] = v3;
  return result;
}

uint64_t sub_23D5F13E4(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5D39C8(a1, *(_DWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_23D5F1408(uint64_t *a1)
{
  uint64_t v1;

  return sub_23D5D3B98(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23D5F1424@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;

  return sub_23D5D0A1C(a1, a2, *(_QWORD *)(v3 + 16), a3);
}

void sub_23D5F143C()
{
  uint64_t v0;

  sub_23D5DD238(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 56), **(_QWORD **)(v0 + 64), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 8), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 16), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 24));
}

uint64_t sub_23D5F1478()
{
  return swift_deallocObject();
}

void sub_23D5F1488()
{
  uint64_t v0;

  sub_23D6406F8(*(_QWORD *)(v0 + 16), *(void (**)(uint64_t *__return_ptr))(v0 + 24));
}

uint64_t sub_23D5F1494()
{
  return swift_deallocObject();
}

uint64_t sub_23D5F14A4()
{
  uint64_t v0;

  return sub_23D5DDB4C(*(uint64_t (**)(void))(v0 + 16));
}

uint64_t block_copy_helper(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper()
{
  return swift_release();
}

void sub_23D5F14C4(void *a1, unsigned __int8 a2)
{
  if (a2 != 255)
    sub_23D5F14DC(a1, a2 & 1);
}

void sub_23D5F14DC(id a1, char a2)
{
  if ((a2 & 1) != 0)

}

void sub_23D5F14E8()
{
  sub_23D5F151C();
}

uint64_t sub_23D5F14FC()
{
  return swift_deallocObject();
}

uint64_t sub_23D5F150C()
{
  return swift_deallocObject();
}

void sub_23D5F151C()
{
  uint64_t v0;

  sub_23D5DD61C(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(void **)(v0 + 32), *(_QWORD *)(v0 + 40), *(_QWORD *)(v0 + 48), *(_DWORD *)(v0 + 56), **(_QWORD **)(v0 + 64), *(_QWORD *)(*(_QWORD *)(v0 + 64) + 8));
}

uint64_t sub_23D5F1548()
{
  return swift_deallocObject();
}

uint64_t sub_23D5F1558()
{
  return swift_deallocObject();
}

uint64_t sub_23D5F1568(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5CBEEC(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_BYTE *)(v1 + 32), *(_DWORD *)(v1 + 36), *(_QWORD *)(v1 + 40));
}

uint64_t type metadata accessor for Group.GroupCiphertextContents(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C79B80);
}

uint64_t sub_23D5F15A0(uint64_t a1, uint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
    return swift_getSingletonMetadata();
  return result;
}

unint64_t sub_23D5F15D4()
{
  unint64_t result;

  result = qword_256C79AA8;
  if (!qword_256C79AA8)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for GroupKitUserID, &type metadata for GroupKitUserID);
    atomic_store(result, (unint64_t *)&qword_256C79AA8);
  }
  return result;
}

uint64_t sub_23D5F1618(uint64_t *a1)
{
  uint64_t v1;

  return sub_23D5D600C(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t sub_23D5F1638(uint64_t a1)
{
  uint64_t v1;

  return sub_23D5C4EFC(a1, *(_DWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 64));
}

uint64_t sub_23D5F165C()
{
  return swift_release();
}

uint64_t sub_23D5F1664(uint64_t *a1)
{
  uint64_t v1;

  return sub_23D5D6514(a1, *(uint64_t **)(v1 + 16));
}

uint64_t *__swift_allocate_boxed_opaque_existential_1(uint64_t *a1)
{
  uint64_t *v1;
  uint64_t v2;

  v1 = a1;
  if ((*(_BYTE *)(*(_QWORD *)(a1[3] - 8) + 82) & 2) != 0)
  {
    *a1 = swift_allocBox();
    return (uint64_t *)v2;
  }
  return v1;
}

uint64_t sub_23D5F16B8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result;

  if ((a3 & 1) != 0)
    return swift_bridgeObjectRelease();
  return result;
}

uint64_t sub_23D5F16C4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t *sub_23D5F1708(_OWORD *a1, uint64_t *a2)
{
  assignWithTake for ConstructedInvite(a2, a1);
  return a2;
}

uint64_t sub_23D5F1744(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v5;

  v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_23D5F1788(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;

  v5 = __swift_instantiateConcreteTypeFromMangledName(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(a2, a1, v5);
  return a2;
}

uint64_t sub_23D5F17CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 24) = v3;
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

uint64_t *sub_23D5F1808(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  char *v17;
  char *v18;
  int *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void (*v54)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_23D5AFA60(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23D66BE68();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    v16 = *(int *)(a3 + 20);
    v17 = (char *)v4 + v16;
    v18 = (char *)a2 + v16;
    *(uint64_t *)((char *)v4 + v16) = *(uint64_t *)((char *)a2 + v16);
    v19 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
    v20 = v19[5];
    v21 = &v17[v20];
    v22 = &v18[v20];
    swift_bridgeObjectRetain();
    v15(v21, v22, v14);
    v23 = v19[6];
    v24 = &v17[v23];
    v25 = &v18[v23];
    v26 = type metadata accessor for GKCrypto_VersionedSeed(0);
    v27 = *(_QWORD *)(v26 - 8);
    v54 = v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v52 = v14;
      v30 = *((_QWORD *)v25 + 1);
      v51 = *((_QWORD *)v25 + 2);
      sub_23D5AFA60(v30, v51);
      *((_QWORD *)v24 + 1) = v30;
      v14 = v52;
      *((_QWORD *)v24 + 2) = v51;
      v15(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v52);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    v31 = v19[7];
    v32 = &v17[v31];
    v33 = &v18[v31];
    v34 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
    v35 = *(_QWORD *)(v34 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v35 + 48))(v33, 1, v34))
    {
      v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
      memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v36 - 8) + 64));
    }
    else
    {
      v37 = v14;
      v38 = *(_QWORD *)v33;
      v39 = *((_QWORD *)v33 + 1);
      sub_23D5AFA60(*(_QWORD *)v33, v39);
      *(_QWORD *)v32 = v38;
      *((_QWORD *)v32 + 1) = v39;
      v54(&v32[*(int *)(v34 + 20)], &v33[*(int *)(v34 + 20)], v37);
      v40 = *(int *)(v34 + 24);
      v41 = &v32[v40];
      v42 = &v33[v40];
      v43 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      v44 = *(_QWORD *)(v43 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
      {
        v45 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
        memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
      }
      else
      {
        v46 = *((_QWORD *)v42 + 1);
        v53 = v37;
        v47 = *(_QWORD *)v42;
        sub_23D5AFA60(*(_QWORD *)v42, v46);
        *(_QWORD *)v41 = v47;
        *((_QWORD *)v41 + 1) = v46;
        v48 = *((_QWORD *)v42 + 2);
        v49 = *((_QWORD *)v42 + 3);
        sub_23D5AFA60(v48, v49);
        *((_QWORD *)v41 + 2) = v48;
        *((_QWORD *)v41 + 3) = v49;
        v54(&v41[*(int *)(v43 + 24)], &v42[*(int *)(v43 + 24)], v53);
        (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
      }
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
    }
  }
  return v4;
}

uint64_t sub_23D5F1B30(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = a1 + *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  v5 = sub_23D66BE68();
  v15 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v15(v4, v5);
  v6 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  v7 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v15(v6 + v7[5], v5);
  v8 = v6 + v7[6];
  v9 = type metadata accessor for GKCrypto_VersionedSeed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    sub_23D5DDA20(*(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 16));
    v15(v8 + *(int *)(v9 + 24), v5);
  }
  v10 = v6 + v7[7];
  v11 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    v15(v10 + *(int *)(v11 + 20), v5);
    v13 = v10 + *(int *)(v11 + 24);
    v14 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 48))(v13, 1, v14);
    if (!(_DWORD)result)
    {
      sub_23D5DDA20(*(_QWORD *)v13, *(_QWORD *)(v13 + 8));
      sub_23D5DDA20(*(_QWORD *)(v13 + 16), *(_QWORD *)(v13 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v15)(v13 + *(int *)(v14 + 24), v5);
    }
  }
  return result;
}

uint64_t sub_23D5F1CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v51;
  void (*v52)(char *, char *, uint64_t);
  uint64_t v53;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 20);
  v53 = a1;
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  v18 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v19 = v18[5];
  v20 = v16 + v19;
  v21 = v17 + v19;
  swift_bridgeObjectRetain();
  v14(v20, v21, v13);
  v22 = v18[6];
  v23 = (_QWORD *)(v16 + v22);
  v24 = (_QWORD *)(v17 + v22);
  v25 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v26 = *(_QWORD *)(v25 - 8);
  v52 = (void (*)(char *, char *, uint64_t))v14;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v23 = *(_DWORD *)v24;
    v51 = v13;
    v28 = v24[1];
    v29 = v24[2];
    sub_23D5AFA60(v28, v29);
    v23[1] = v28;
    v23[2] = v29;
    v13 = v51;
    v14((uint64_t)v23 + *(int *)(v25 + 24), (uint64_t)v24 + *(int *)(v25 + 24), v51);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
  }
  v30 = v18[7];
  v31 = (_QWORD *)(v16 + v30);
  v32 = (uint64_t *)(v17 + v30);
  v33 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v36 = v13;
    v37 = *v32;
    v38 = v32[1];
    sub_23D5AFA60(*v32, v38);
    *v31 = v37;
    v31[1] = v38;
    v14((uint64_t)v31 + *(int *)(v33 + 20), (uint64_t)v32 + *(int *)(v33 + 20), v36);
    v39 = *(int *)(v33 + 24);
    v40 = (_QWORD *)((char *)v31 + v39);
    v41 = (uint64_t *)((char *)v32 + v39);
    v42 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    v43 = *(_QWORD *)(v42 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v43 + 48))(v41, 1, v42))
    {
      v44 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v44 - 8) + 64));
    }
    else
    {
      v45 = v41[1];
      v46 = v36;
      v47 = *v41;
      sub_23D5AFA60(*v41, v45);
      *v40 = v47;
      v40[1] = v45;
      v48 = v41[2];
      v49 = v41[3];
      sub_23D5AFA60(v48, v49);
      v40[2] = v48;
      v40[3] = v49;
      v52((char *)v40 + *(int *)(v42 + 24), (char *)v41 + *(int *)(v42 + 24), v46);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v40, 0, 1, v42);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  return v53;
}

uint64_t sub_23D5F1FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t (*v38)(uint64_t *, uint64_t, uint64_t);
  int v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  void (*v43)(char *, char *, uint64_t);
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  size_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t (*v66)(uint64_t *, uint64_t, uint64_t);
  int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  void (*v85)(char *, char *, uint64_t);
  uint64_t v86;
  void (*v87)(char *, char *, uint64_t);
  uint64_t v88;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_23D66BE68();
  v86 = *(_QWORD *)(v17 - 8);
  v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v86 + 24);
  v18(v15, v16, v17);
  v19 = *(int *)(a3 + 20);
  v20 = a1 + v19;
  v21 = a2 + v19;
  *(_QWORD *)(a1 + v19) = *(_QWORD *)(a2 + v19);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v88 = v17;
  v85 = (void (*)(char *, char *, uint64_t))v18;
  v18(v20 + v22[5], v21 + v22[5], v17);
  v23 = v22[6];
  v24 = (char *)(v20 + v23);
  v25 = (char *)(v21 + v23);
  v26 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v18) = v28(v24, 1, v26);
  v29 = v28(v25, 1, v26);
  if ((_DWORD)v18)
  {
    if (!v29)
    {
      *(_DWORD *)v24 = *(_DWORD *)v25;
      v30 = *((_QWORD *)v25 + 1);
      v31 = *((_QWORD *)v25 + 2);
      sub_23D5AFA60(v30, v31);
      *((_QWORD *)v24 + 1) = v30;
      *((_QWORD *)v24 + 2) = v31;
      (*(void (**)(char *, char *, uint64_t))(v86 + 16))(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v88);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    sub_23D5E6950((uint64_t)v24, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v24 = *(_DWORD *)v25;
  v53 = *((_QWORD *)v25 + 1);
  v54 = *((_QWORD *)v25 + 2);
  sub_23D5AFA60(v53, v54);
  v55 = *((_QWORD *)v24 + 1);
  v56 = *((_QWORD *)v24 + 2);
  *((_QWORD *)v24 + 1) = v53;
  *((_QWORD *)v24 + 2) = v54;
  sub_23D5DDA20(v55, v56);
  v85(&v24[*(int *)(v26 + 24)], &v25[*(int *)(v26 + 24)], v88);
LABEL_7:
  v33 = v22[7];
  v34 = (uint64_t *)(v20 + v33);
  v35 = (uint64_t *)(v21 + v33);
  v36 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v37 = *(_QWORD *)(v36 - 8);
  v38 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v37 + 48);
  v39 = v38(v34, 1, v36);
  v40 = v38(v35, 1, v36);
  if (!v39)
  {
    if (!v40)
    {
      v57 = *v35;
      v58 = v35[1];
      sub_23D5AFA60(*v35, v58);
      v59 = *v34;
      v60 = v34[1];
      *v34 = v57;
      v34[1] = v58;
      sub_23D5DDA20(v59, v60);
      v85((char *)v34 + *(int *)(v36 + 20), (char *)v35 + *(int *)(v36 + 20), v88);
      v61 = *(int *)(v36 + 24);
      v62 = (uint64_t *)((char *)v34 + v61);
      v63 = (uint64_t *)((char *)v35 + v61);
      v64 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      v65 = *(_QWORD *)(v64 - 8);
      v66 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v65 + 48);
      LODWORD(v57) = v66(v62, 1, v64);
      v67 = v66(v63, 1, v64);
      if ((_DWORD)v57)
      {
        if (!v67)
        {
          v68 = *v63;
          v69 = v63[1];
          sub_23D5AFA60(*v63, v69);
          *v62 = v68;
          v62[1] = v69;
          v70 = v63[2];
          v71 = v63[3];
          sub_23D5AFA60(v70, v71);
          v62[2] = v70;
          v62[3] = v71;
          (*(void (**)(char *, char *, uint64_t))(v86 + 16))((char *)v62 + *(int *)(v64 + 24), (char *)v63 + *(int *)(v64 + 24), v88);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v65 + 56))(v62, 0, 1, v64);
          return a1;
        }
      }
      else
      {
        if (!v67)
        {
          v77 = *v63;
          v78 = v63[1];
          sub_23D5AFA60(*v63, v78);
          v79 = *v62;
          v80 = v62[1];
          *v62 = v77;
          v62[1] = v78;
          sub_23D5DDA20(v79, v80);
          v81 = v63[2];
          v82 = v63[3];
          sub_23D5AFA60(v81, v82);
          v83 = v62[2];
          v84 = v62[3];
          v62[2] = v81;
          v62[3] = v82;
          sub_23D5DDA20(v83, v84);
          v85((char *)v62 + *(int *)(v64 + 24), (char *)v63 + *(int *)(v64 + 24), v88);
          return a1;
        }
        sub_23D5E6950((uint64_t)v62, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0) - 8) + 64);
      v51 = v62;
      v52 = v63;
      goto LABEL_14;
    }
    sub_23D5E6950((uint64_t)v34, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    v50 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8) - 8) + 64);
    v51 = v34;
    v52 = v35;
LABEL_14:
    memcpy(v51, v52, v50);
    return a1;
  }
  if (v40)
    goto LABEL_13;
  v41 = *v35;
  v42 = v35[1];
  sub_23D5AFA60(*v35, v42);
  *v34 = v41;
  v34[1] = v42;
  v43 = *(void (**)(char *, char *, uint64_t))(v86 + 16);
  v43((char *)v34 + *(int *)(v36 + 20), (char *)v35 + *(int *)(v36 + 20), v88);
  v44 = *(int *)(v36 + 24);
  v45 = (uint64_t *)((char *)v34 + v44);
  v46 = (uint64_t *)((char *)v35 + v44);
  v47 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v48 = *(_QWORD *)(v47 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
  }
  else
  {
    v87 = v43;
    v72 = *v46;
    v73 = v46[1];
    sub_23D5AFA60(*v46, v73);
    *v45 = v72;
    v45[1] = v73;
    v74 = v46[2];
    v75 = v46[3];
    sub_23D5AFA60(v74, v75);
    v45[2] = v74;
    v45[3] = v75;
    v87((char *)v45 + *(int *)(v47 + 24), (char *)v46 + *(int *)(v47 + 24), v88);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  return a1;
}

uint64_t sub_23D5F24E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  uint64_t v15;
  _DWORD *v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD *v22;
  _OWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD *v28;
  _OWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 20);
  v12 = a1 + v11;
  v13 = a2 + v11;
  *(_QWORD *)(a1 + v11) = *(_QWORD *)(a2 + v11);
  v14 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v10((char *)(v12 + v14[5]), (char *)(v13 + v14[5]), v9);
  v15 = v14[6];
  v16 = (_DWORD *)(v12 + v15);
  v17 = (_DWORD *)(v13 + v15);
  v18 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v19 = *(_QWORD *)(v18 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    *(_OWORD *)(v16 + 2) = *(_OWORD *)(v17 + 2);
    v10((char *)v16 + *(int *)(v18 + 24), (char *)v17 + *(int *)(v18 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v21 = v14[7];
  v22 = (_OWORD *)(v12 + v21);
  v23 = (_OWORD *)(v13 + v21);
  v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    *v22 = *v23;
    v10((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v9);
    v27 = *(int *)(v24 + 24);
    v28 = (_OWORD *)((char *)v22 + v27);
    v29 = (_OWORD *)((char *)v23 + v27);
    v30 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    v31 = *(_QWORD *)(v30 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v31 + 48))(v29, 1, v30))
    {
      v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      memcpy(v28, v29, *(_QWORD *)(*(_QWORD *)(v32 - 8) + 64));
    }
    else
    {
      v33 = v29[1];
      *v28 = *v29;
      v28[1] = v33;
      v10((char *)v28 + *(int *)(v30 + 24), (char *)v29 + *(int *)(v30 + 24), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t sub_23D5F2760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t (*v24)(_QWORD *, uint64_t, uint64_t);
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t (*v32)(uint64_t *, uint64_t, uint64_t);
  int v33;
  int v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;
  _OWORD *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  size_t v42;
  void *v43;
  char *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t, uint64_t, uint64_t);
  int v55;
  int v56;
  __int128 v57;
  __int128 v58;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  void (*v64)(char *, uint64_t, uint64_t);
  uint64_t v65;
  uint64_t v66;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0) + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  v65 = *(_QWORD *)(v13 - 8);
  v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v65 + 40);
  v14(v11, v12, v13);
  v15 = *(int *)(a3 + 20);
  v16 = a1 + v15;
  v17 = a2 + v15;
  *(_QWORD *)(a1 + v15) = *(_QWORD *)(a2 + v15);
  swift_bridgeObjectRelease();
  v18 = (int *)type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v66 = v13;
  v64 = (void (*)(char *, uint64_t, uint64_t))v14;
  v14(v16 + v18[5], v17 + v18[5], v13);
  v19 = v18[6];
  v20 = (_QWORD *)(v16 + v19);
  v21 = v17 + v19;
  v22 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v23 + 48);
  LODWORD(v14) = v24(v20, 1, v22);
  v25 = v24((_QWORD *)v21, 1, v22);
  if ((_DWORD)v14)
  {
    if (!v25)
    {
      *(_DWORD *)v20 = *(_DWORD *)v21;
      *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v65 + 32))((char *)v20 + *(int *)(v22 + 24), v21 + *(int *)(v22 + 24), v66);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_23D5E6950((uint64_t)v20, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v20, (const void *)v21, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v20 = *(_DWORD *)v21;
  v45 = v20[1];
  v46 = v20[2];
  *(_OWORD *)(v20 + 1) = *(_OWORD *)(v21 + 8);
  sub_23D5DDA20(v45, v46);
  v64((char *)v20 + *(int *)(v22 + 24), v21 + *(int *)(v22 + 24), v66);
LABEL_7:
  v27 = v18[7];
  v28 = (uint64_t *)(v16 + v27);
  v29 = (char *)(v17 + v27);
  v30 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v31 = *(_QWORD *)(v30 - 8);
  v32 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v31 + 48);
  v33 = v32(v28, 1, v30);
  v34 = v32((uint64_t *)v29, 1, v30);
  if (!v33)
  {
    if (!v34)
    {
      v47 = *v28;
      v48 = v28[1];
      *(_OWORD *)v28 = *(_OWORD *)v29;
      sub_23D5DDA20(v47, v48);
      v64((char *)v28 + *(int *)(v30 + 20), (uint64_t)&v29[*(int *)(v30 + 20)], v66);
      v49 = *(int *)(v30 + 24);
      v50 = (uint64_t)v28 + v49;
      v51 = &v29[v49];
      v52 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      v53 = *(_QWORD *)(v52 - 8);
      v54 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v53 + 48);
      v55 = v54(v50, 1, v52);
      v56 = v54((uint64_t)v51, 1, v52);
      if (v55)
      {
        if (!v56)
        {
          v57 = *((_OWORD *)v51 + 1);
          *(_OWORD *)v50 = *(_OWORD *)v51;
          *(_OWORD *)(v50 + 16) = v57;
          (*(void (**)(uint64_t, char *, uint64_t))(v65 + 32))(v50 + *(int *)(v52 + 24), &v51[*(int *)(v52 + 24)], v66);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
          return a1;
        }
      }
      else
      {
        if (!v56)
        {
          v60 = *(_QWORD *)v50;
          v61 = *(_QWORD *)(v50 + 8);
          *(_OWORD *)v50 = *(_OWORD *)v51;
          sub_23D5DDA20(v60, v61);
          v62 = *(_QWORD *)(v50 + 16);
          v63 = *(_QWORD *)(v50 + 24);
          *(_OWORD *)(v50 + 16) = *((_OWORD *)v51 + 1);
          sub_23D5DDA20(v62, v63);
          v64((char *)(v50 + *(int *)(v52 + 24)), (uint64_t)&v51[*(int *)(v52 + 24)], v66);
          return a1;
        }
        sub_23D5E6950(v50, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0) - 8) + 64);
      v43 = (void *)v50;
      v44 = v51;
      goto LABEL_14;
    }
    sub_23D5E6950((uint64_t)v28, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    v42 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8) - 8) + 64);
    v43 = v28;
    v44 = v29;
LABEL_14:
    memcpy(v43, v44, v42);
    return a1;
  }
  if (v34)
    goto LABEL_13;
  *(_OWORD *)v28 = *(_OWORD *)v29;
  v35 = *(void (**)(char *, char *, uint64_t))(v65 + 32);
  v35((char *)v28 + *(int *)(v30 + 20), &v29[*(int *)(v30 + 20)], v66);
  v36 = *(int *)(v30 + 24);
  v37 = (_OWORD *)((char *)v28 + v36);
  v38 = &v29[v36];
  v39 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v40 = *(_QWORD *)(v39 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v38, 1, v39))
  {
    v41 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v37, v38, *(_QWORD *)(*(_QWORD *)(v41 - 8) + 64));
  }
  else
  {
    v58 = *((_OWORD *)v38 + 1);
    *v37 = *(_OWORD *)v38;
    v37[1] = v58;
    v35((char *)v37 + *(int *)(v39 + 24), &v38[*(int *)(v39 + 24)], v66);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v40 + 56))(v37, 0, 1, v39);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v31 + 56))(v28, 0, 1, v30);
  return a1;
}

uint64_t sub_23D5F2BB8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F2BC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23D5F2C38()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F2C44(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(0);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t sub_23D5F2CC0()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = type metadata accessor for GKCrypto_GroupAEDataToEncrypt(319);
  if (v1 <= 0x3F)
  {
    result = type metadata accessor for GKCrypto_GroupAETextToSign(319);
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

void sub_23D5F2D58(uint64_t a1, uint64_t a2)
{
  sub_23D5E67F0(a1, a2);
}

uint64_t *sub_23D5F2DBC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (_DWORD *)((char *)v4 + v14);
    v16 = (_DWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for GKCrypto_RSVP(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      *((_QWORD *)v15 + 1) = *((_QWORD *)v16 + 1);
      *((_BYTE *)v15 + 16) = *((_BYTE *)v16 + 16);
      v21 = *((_QWORD *)v16 + 3);
      v22 = *((_QWORD *)v16 + 4);
      sub_23D5AFA60(v21, v22);
      *((_QWORD *)v15 + 3) = v21;
      *((_QWORD *)v15 + 4) = v22;
      v23 = *((_QWORD *)v16 + 5);
      v24 = *((_QWORD *)v16 + 6);
      sub_23D5AFA60(v23, v24);
      *((_QWORD *)v15 + 5) = v23;
      *((_QWORD *)v15 + 6) = v24;
      v25 = *((_QWORD *)v16 + 7);
      v26 = *((_QWORD *)v16 + 8);
      sub_23D5AFA60(v25, v26);
      *((_QWORD *)v15 + 7) = v25;
      *((_QWORD *)v15 + 8) = v26;
      v13((char *)v15 + *(int *)(v17 + 36), (char *)v16 + *(int *)(v17 + 36), v12);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t type metadata accessor for GKCrypto_RSVP(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C79CB0);
}

uint64_t sub_23D5F2F68(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23D66BE68();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for GKCrypto_RSVP(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)(v6 + 24), *(_QWORD *)(v6 + 32));
    sub_23D5DDA20(*(_QWORD *)(v6 + 40), *(_QWORD *)(v6 + 48));
    sub_23D5DDA20(*(_QWORD *)(v6 + 56), *(_QWORD *)(v6 + 64));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 36), v5);
  }
  return result;
}

uint64_t sub_23D5F303C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = sub_23D66BE68();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_DWORD *)(a1 + v13);
  v15 = (_DWORD *)(a2 + v13);
  v16 = type metadata accessor for GKCrypto_RSVP(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    *((_QWORD *)v14 + 1) = *((_QWORD *)v15 + 1);
    *((_BYTE *)v14 + 16) = *((_BYTE *)v15 + 16);
    v19 = *((_QWORD *)v15 + 3);
    v20 = *((_QWORD *)v15 + 4);
    sub_23D5AFA60(v19, v20);
    *((_QWORD *)v14 + 3) = v19;
    *((_QWORD *)v14 + 4) = v20;
    v21 = *((_QWORD *)v15 + 5);
    v22 = *((_QWORD *)v15 + 6);
    sub_23D5AFA60(v21, v22);
    *((_QWORD *)v14 + 5) = v21;
    *((_QWORD *)v14 + 6) = v22;
    v23 = *((_QWORD *)v15 + 7);
    v24 = *((_QWORD *)v15 + 8);
    sub_23D5AFA60(v23, v24);
    *((_QWORD *)v14 + 7) = v23;
    *((_QWORD *)v14 + 8) = v24;
    v12((char *)v14 + *(int *)(v16 + 36), (char *)v15 + *(int *)(v16 + 36), v11);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_23D5F31A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for GKCrypto_RSVP(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      *(_DWORD *)v17 = *(_DWORD *)v18;
      v32 = *(_QWORD *)(v18 + 8);
      *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
      *(_QWORD *)(v17 + 8) = v32;
      v33 = *(_QWORD *)(v18 + 24);
      v34 = *(_QWORD *)(v18 + 32);
      sub_23D5AFA60(v33, v34);
      v35 = *(_QWORD *)(v17 + 24);
      v36 = *(_QWORD *)(v17 + 32);
      *(_QWORD *)(v17 + 24) = v33;
      *(_QWORD *)(v17 + 32) = v34;
      sub_23D5DDA20(v35, v36);
      v37 = *(_QWORD *)(v18 + 40);
      v38 = *(_QWORD *)(v18 + 48);
      sub_23D5AFA60(v37, v38);
      v39 = *(_QWORD *)(v17 + 40);
      v40 = *(_QWORD *)(v17 + 48);
      *(_QWORD *)(v17 + 40) = v37;
      *(_QWORD *)(v17 + 48) = v38;
      sub_23D5DDA20(v39, v40);
      v41 = *(_QWORD *)(v18 + 56);
      v42 = *(_QWORD *)(v18 + 64);
      sub_23D5AFA60(v41, v42);
      v43 = *(_QWORD *)(v17 + 56);
      v44 = *(_QWORD *)(v17 + 64);
      *(_QWORD *)(v17 + 56) = v41;
      *(_QWORD *)(v17 + 64) = v42;
      sub_23D5DDA20(v43, v44);
      v15(v17 + *(int *)(v19 + 36), v18 + *(int *)(v19 + 36), v13);
      return a1;
    }
    sub_23D5E6950(v17, type metadata accessor for GKCrypto_RSVP);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
    memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v23 = *(_QWORD *)(v18 + 8);
  *(_BYTE *)(v17 + 16) = *(_BYTE *)(v18 + 16);
  *(_QWORD *)(v17 + 8) = v23;
  v24 = *(_QWORD *)(v18 + 24);
  v25 = *(_QWORD *)(v18 + 32);
  sub_23D5AFA60(v24, v25);
  *(_QWORD *)(v17 + 24) = v24;
  *(_QWORD *)(v17 + 32) = v25;
  v26 = *(_QWORD *)(v18 + 40);
  v27 = *(_QWORD *)(v18 + 48);
  sub_23D5AFA60(v26, v27);
  *(_QWORD *)(v17 + 40) = v26;
  *(_QWORD *)(v17 + 48) = v27;
  v28 = *(_QWORD *)(v18 + 56);
  v29 = *(_QWORD *)(v18 + 64);
  sub_23D5AFA60(v28, v29);
  *(_QWORD *)(v17 + 56) = v28;
  *(_QWORD *)(v17 + 64) = v29;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17 + *(int *)(v19 + 36), v18 + *(int *)(v19 + 36), v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_23D5F33D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for GKCrypto_RSVP(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *((_QWORD *)v12 + 1) = *((_QWORD *)v13 + 1);
    *((_BYTE *)v12 + 16) = *((_BYTE *)v13 + 16);
    *(_OWORD *)(v12 + 6) = *(_OWORD *)(v13 + 6);
    *(_OWORD *)(v12 + 10) = *(_OWORD *)(v13 + 10);
    *(_OWORD *)(v12 + 14) = *(_OWORD *)(v13 + 14);
    v10((char *)v12 + *(int *)(v14 + 36), (char *)v13 + *(int *)(v14 + 36), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23D5F3504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for GKCrypto_RSVP(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
      *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
      v23 = *(_QWORD *)(v15 + 24);
      v24 = *(_QWORD *)(v15 + 32);
      *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
      sub_23D5DDA20(v23, v24);
      v25 = *(_QWORD *)(v15 + 40);
      v26 = *(_QWORD *)(v15 + 48);
      *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
      sub_23D5DDA20(v25, v26);
      v27 = *(_QWORD *)(v15 + 56);
      v28 = *(_QWORD *)(v15 + 64);
      *(_OWORD *)(v15 + 56) = *(_OWORD *)(v16 + 56);
      sub_23D5DDA20(v27, v28);
      v13(v15 + *(int *)(v17 + 36), v16 + *(int *)(v17 + 36), v11);
      return a1;
    }
    sub_23D5E6950(v15, type metadata accessor for GKCrypto_RSVP);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_QWORD *)(v15 + 8) = *(_QWORD *)(v16 + 8);
  *(_BYTE *)(v15 + 16) = *(_BYTE *)(v16 + 16);
  *(_OWORD *)(v15 + 24) = *(_OWORD *)(v16 + 24);
  *(_OWORD *)(v15 + 40) = *(_OWORD *)(v16 + 40);
  *(_OWORD *)(v15 + 56) = *(_OWORD *)(v16 + 56);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 36), v16 + *(int *)(v17 + 36), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_23D5F36DC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F36E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_256C791B0);
}

uint64_t sub_23D5F36F4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F3700(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_256C791B0);
}

uint64_t type metadata accessor for GKCrypto_SignedRSVP(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C79C10);
}

void sub_23D5F3720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D614624(a1, a2, a3, qword_256C79C20, (void (*)(uint64_t))type metadata accessor for GKCrypto_RSVP);
}

_QWORD *sub_23D5F3734(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = (_QWORD *)a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *v4 = *a2;
    v4 = (_QWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_QWORD *)(a1 + 8) = a2[1];
    *(_BYTE *)(a1 + 16) = *((_BYTE *)a2 + 16);
    v7 = a2[3];
    v8 = a2[4];
    sub_23D5AFA60(v7, v8);
    v4[3] = v7;
    v4[4] = v8;
    v9 = a2[5];
    v10 = a2[6];
    sub_23D5AFA60(v9, v10);
    v4[5] = v9;
    v4[6] = v10;
    v11 = a2[7];
    v12 = a2[8];
    sub_23D5AFA60(v11, v12);
    v4[7] = v11;
    v4[8] = v12;
    v13 = *(int *)(a3 + 36);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = sub_23D66BE68();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_23D5F3818(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_23D5DDA20(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D5F3874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v7;
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D5F392C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  v7 = *(_QWORD *)(a2 + 24);
  v8 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v7, v8);
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  sub_23D5DDA20(v9, v10);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v11, v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  sub_23D5DDA20(v13, v14);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v15, v16);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  sub_23D5DDA20(v17, v18);
  v19 = *(int *)(a3 + 36);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_23D5F39FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D5F3A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  v6 = *(_QWORD *)(a1 + 24);
  v7 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_23D5DDA20(v10, v11);
  v12 = *(int *)(a3 + 36);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D5F3B28()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F3B34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 32) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_23D5F3BBC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F3BC8(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)(result + 32) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D5F3C44()
{
  return sub_23D615A74();
}

uint64_t sub_23D5F3C68()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F3C78()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for GKCrypto_RSVPQueueRequest(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C79D50);
}

uint64_t sub_23D5F3C9C()
{
  return sub_23D615A74();
}

uint64_t *sub_23D5F3CA8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_23D5AFA60(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_23D5AFA60(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = *(int *)(a3 + 28);
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_23D5F3D74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_23D5DDA20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_23D5F3DD0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_23D5AFA60(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t *sub_23D5F3E70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_23D5AFA60(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_23D5DDA20(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_23D5AFA60(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_23D5DDA20(v16, v17);
  v18 = *(int *)(a3 + 28);
  v19 = (char *)a1 + v18;
  v20 = (char *)a2 + v18;
  v21 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 24))(v19, v20, v21);
  return a1;
}

_OWORD *sub_23D5F3F28(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  a1[2] = a2[2];
  v5 = *(int *)(a3 + 28);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_23D5F3F8C(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_23D5DDA20(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_23D5DDA20(v10, v11);
  v12 = *(int *)(a3 + 28);
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D5F401C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F4028(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_23D5F40B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D5F40BC(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 28)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C79DF0);
}

uint64_t sub_23D5F414C()
{
  return sub_23D6154D0();
}

uint64_t sub_23D5F4174()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F4184()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C79E88);
}

uint64_t sub_23D5F41A8()
{
  return sub_23D610830();
}

uint64_t *sub_23D5F41B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);

  v3 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v5 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v5 = a1;
    v6 = *(int *)(a3 + 20);
    v7 = (char *)a1 + v6;
    v8 = (char *)a2 + v6;
    v9 = sub_23D66BE68();
    v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
    swift_bridgeObjectRetain();
    v10(v7, v8, v9);
  }
  return v5;
}

uint64_t sub_23D5F424C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

_QWORD *sub_23D5F4294(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  void (*v8)(char *, char *, uint64_t);

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23D66BE68();
  v8 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
  swift_bridgeObjectRetain();
  v8(v5, v6, v7);
  return a1;
}

_QWORD *sub_23D5F4304(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 24))(v7, v8, v9);
  return a1;
}

_QWORD *sub_23D5F4378(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

_QWORD *sub_23D5F43D4(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 40))(v7, v8, v9);
  return a1;
}

uint64_t sub_23D5F4440()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F444C(char *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(&a1[*(int *)(a3 + 20)], a2, v8);
  }
}

uint64_t sub_23D5F44C8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D5F44D4(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v7 = sub_23D66BE68();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C79F28);
}

uint64_t sub_23D5F455C()
{
  return sub_23D611690();
}

uint64_t *sub_23D5F456C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  void (*v53)(char *, char *, uint64_t);

  v4 = a1;
  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v22 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v22 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_23D5AFA60(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = a3[7];
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23D66BE68();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    v15(v12, v13, v14);
    v16 = a3[8];
    v17 = (uint64_t *)((char *)v4 + v16);
    v18 = (uint64_t *)((char *)a2 + v16);
    v19 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    v20 = *(_QWORD *)(v19 - 8);
    v53 = v15;
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v20 + 48))(v18, 1, v19))
    {
      v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
      memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    }
    else
    {
      *v17 = *v18;
      v23 = *(int *)(v19 + 20);
      v24 = (char *)v17 + v23;
      v25 = (char *)v18 + v23;
      swift_bridgeObjectRetain();
      v15(v24, v25, v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
    }
    v26 = a3[9];
    v27 = (uint64_t *)((char *)v4 + v26);
    v28 = (uint64_t *)((char *)a2 + v26);
    v29 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
    v30 = *(_QWORD *)(v29 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v30 + 48))(v28, 1, v29))
    {
      v31 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
      memcpy(v27, v28, *(_QWORD *)(*(_QWORD *)(v31 - 8) + 64));
    }
    else
    {
      v32 = *v28;
      v33 = v28[1];
      sub_23D5AFA60(*v28, v33);
      *v27 = v32;
      v27[1] = v33;
      v34 = v28[2];
      v35 = v28[3];
      sub_23D5AFA60(v34, v35);
      v27[2] = v34;
      v27[3] = v35;
      v36 = v28[4];
      v37 = v28[5];
      sub_23D5AFA60(v36, v37);
      v27[4] = v36;
      v27[5] = v37;
      v38 = v28[6];
      v39 = v28[7];
      sub_23D5AFA60(v38, v39);
      v27[6] = v38;
      v27[7] = v39;
      v53((char *)v27 + *(int *)(v29 + 32), (char *)v28 + *(int *)(v29 + 32), v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    }
    v40 = a3[10];
    v41 = (uint64_t *)((char *)v4 + v40);
    v42 = (uint64_t *)((char *)a2 + v40);
    v43 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
    v44 = *(_QWORD *)(v43 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v44 + 48))(v42, 1, v43))
    {
      v45 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
      memcpy(v41, v42, *(_QWORD *)(*(_QWORD *)(v45 - 8) + 64));
    }
    else
    {
      v46 = *v42;
      v47 = v42[1];
      sub_23D5AFA60(*v42, v47);
      *v41 = v46;
      v41[1] = v47;
      v48 = v42[2];
      v49 = v42[3];
      sub_23D5AFA60(v48, v49);
      v41[2] = v48;
      v41[3] = v49;
      v50 = v42[4];
      v51 = v42[5];
      sub_23D5AFA60(v50, v51);
      v41[4] = v50;
      v41[5] = v51;
      v53((char *)v41 + *(int *)(v43 + 28), (char *)v42 + *(int *)(v43 + 28), v14);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v41, 0, 1, v43);
    }
  }
  return v4;
}

uint64_t sub_23D5F4880(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  void (*v13)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = a1 + a2[7];
  v5 = sub_23D66BE68();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[8];
  v7 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    swift_bridgeObjectRelease();
    v13(v6 + *(int *)(v7 + 20), v5);
  }
  v8 = a1 + a2[9];
  v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9))
  {
    sub_23D5DDA20(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    sub_23D5DDA20(*(_QWORD *)(v8 + 16), *(_QWORD *)(v8 + 24));
    sub_23D5DDA20(*(_QWORD *)(v8 + 32), *(_QWORD *)(v8 + 40));
    sub_23D5DDA20(*(_QWORD *)(v8 + 48), *(_QWORD *)(v8 + 56));
    v13(v8 + *(int *)(v9 + 32), v5);
  }
  v10 = a1 + a2[10];
  v11 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 48))(v10, 1, v11);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v10, *(_QWORD *)(v10 + 8));
    sub_23D5DDA20(*(_QWORD *)(v10 + 16), *(_QWORD *)(v10 + 24));
    sub_23D5DDA20(*(_QWORD *)(v10 + 32), *(_QWORD *)(v10 + 40));
    return ((uint64_t (*)(uint64_t, uint64_t))v13)(v10 + *(int *)(v11 + 28), v5);
  }
  return result;
}

uint64_t sub_23D5F4A18(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  void (*v51)(char *, char *, uint64_t);

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = a3[7];
  v11 = (char *)(a1 + v10);
  v12 = (char *)(a2 + v10);
  v13 = sub_23D66BE68();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  v14(v11, v12, v13);
  v15 = a3[8];
  v16 = (_QWORD *)(a1 + v15);
  v17 = (_QWORD *)(a2 + v15);
  v18 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v19 = *(_QWORD *)(v18 - 8);
  v51 = v14;
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18))
  {
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v16, v17, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
  }
  else
  {
    *v16 = *v17;
    v21 = *(int *)(v18 + 20);
    v22 = (char *)v16 + v21;
    v23 = (char *)v17 + v21;
    swift_bridgeObjectRetain();
    v14(v22, v23, v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v19 + 56))(v16, 0, 1, v18);
  }
  v24 = a3[9];
  v25 = (_QWORD *)(a1 + v24);
  v26 = (uint64_t *)(a2 + v24);
  v27 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    v30 = *v26;
    v31 = v26[1];
    sub_23D5AFA60(*v26, v31);
    *v25 = v30;
    v25[1] = v31;
    v32 = v26[2];
    v33 = v26[3];
    sub_23D5AFA60(v32, v33);
    v25[2] = v32;
    v25[3] = v33;
    v34 = v26[4];
    v35 = v26[5];
    sub_23D5AFA60(v34, v35);
    v25[4] = v34;
    v25[5] = v35;
    v36 = v26[6];
    v37 = v26[7];
    sub_23D5AFA60(v36, v37);
    v25[6] = v36;
    v25[7] = v37;
    v51((char *)v25 + *(int *)(v27 + 32), (char *)v26 + *(int *)(v27 + 32), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v38 = a3[10];
  v39 = (_QWORD *)(a1 + v38);
  v40 = (uint64_t *)(a2 + v38);
  v41 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v42 = *(_QWORD *)(v41 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v42 + 48))(v40, 1, v41))
  {
    v43 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v39, v40, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
  }
  else
  {
    v44 = *v40;
    v45 = v40[1];
    sub_23D5AFA60(*v40, v45);
    *v39 = v44;
    v39[1] = v45;
    v46 = v40[2];
    v47 = v40[3];
    sub_23D5AFA60(v46, v47);
    v39[2] = v46;
    v39[3] = v47;
    v48 = v40[4];
    v49 = v40[5];
    sub_23D5AFA60(v48, v49);
    v39[4] = v48;
    v39[5] = v49;
    v51((char *)v39 + *(int *)(v41 + 28), (char *)v40 + *(int *)(v41 + 28), v13);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v42 + 56))(v39, 0, 1, v41);
  }
  return a1;
}

uint64_t sub_23D5F4D00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t (*v23)(_QWORD *, uint64_t, uint64_t);
  int v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(uint64_t *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t (*v53)(uint64_t *, uint64_t, uint64_t);
  int v54;
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  void (*v92)(uint64_t, uint64_t, uint64_t);
  uint64_t v93;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = a3[7];
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_23D66BE68();
  v93 = *(_QWORD *)(v17 - 8);
  v92 = *(void (**)(uint64_t, uint64_t, uint64_t))(v93 + 24);
  v92(v15, v16, v17);
  v18 = a3[8];
  v19 = (_QWORD *)(a1 + v18);
  v20 = (_QWORD *)(a2 + v18);
  v21 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v22 = *(_QWORD *)(v21 - 8);
  v23 = *(uint64_t (**)(_QWORD *, uint64_t, uint64_t))(v22 + 48);
  v24 = v23(v19, 1, v21);
  v25 = v23(v20, 1, v21);
  if (v24)
  {
    if (!v25)
    {
      *v19 = *v20;
      v26 = *(int *)(v21 + 20);
      v27 = (char *)v19 + v26;
      v28 = (char *)v20 + v26;
      v29 = *(void (**)(char *, char *, uint64_t))(v93 + 16);
      swift_bridgeObjectRetain();
      v29(v27, v28, v17);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v22 + 56))(v19, 0, 1, v21);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v25)
  {
    sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v19, v20, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  *v19 = *v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v92((uint64_t)v19 + *(int *)(v21 + 20), (uint64_t)v20 + *(int *)(v21 + 20), v17);
LABEL_7:
  v31 = a3[9];
  v32 = (uint64_t *)(a1 + v31);
  v33 = (uint64_t *)(a2 + v31);
  v34 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (v37)
  {
    if (!v38)
    {
      v39 = *v33;
      v40 = v33[1];
      sub_23D5AFA60(*v33, v40);
      *v32 = v39;
      v32[1] = v40;
      v41 = v33[2];
      v42 = v33[3];
      sub_23D5AFA60(v41, v42);
      v32[2] = v41;
      v32[3] = v42;
      v43 = v33[4];
      v44 = v33[5];
      sub_23D5AFA60(v43, v44);
      v32[4] = v43;
      v32[5] = v44;
      v45 = v33[6];
      v46 = v33[7];
      sub_23D5AFA60(v45, v46);
      v32[6] = v45;
      v32[7] = v46;
      (*(void (**)(char *, char *, uint64_t))(v93 + 16))((char *)v32 + *(int *)(v34 + 32), (char *)v33 + *(int *)(v34 + 32), v17);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v38)
  {
    sub_23D5E6950((uint64_t)v32, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
    goto LABEL_13;
  }
  v64 = *v33;
  v65 = v33[1];
  sub_23D5AFA60(*v33, v65);
  v66 = *v32;
  v67 = v32[1];
  *v32 = v64;
  v32[1] = v65;
  sub_23D5DDA20(v66, v67);
  v68 = v33[2];
  v69 = v33[3];
  sub_23D5AFA60(v68, v69);
  v70 = v32[2];
  v71 = v32[3];
  v32[2] = v68;
  v32[3] = v69;
  sub_23D5DDA20(v70, v71);
  v72 = v33[4];
  v73 = v33[5];
  sub_23D5AFA60(v72, v73);
  v74 = v32[4];
  v75 = v32[5];
  v32[4] = v72;
  v32[5] = v73;
  sub_23D5DDA20(v74, v75);
  v76 = v33[6];
  v77 = v33[7];
  sub_23D5AFA60(v76, v77);
  v78 = v32[6];
  v79 = v32[7];
  v32[6] = v76;
  v32[7] = v77;
  sub_23D5DDA20(v78, v79);
  v92((uint64_t)v32 + *(int *)(v34 + 32), (uint64_t)v33 + *(int *)(v34 + 32), v17);
LABEL_13:
  v48 = a3[10];
  v49 = (uint64_t *)(a1 + v48);
  v50 = (uint64_t *)(a2 + v48);
  v51 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v52 = *(_QWORD *)(v51 - 8);
  v53 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v52 + 48);
  v54 = v53(v49, 1, v51);
  v55 = v53(v50, 1, v51);
  if (!v54)
  {
    if (!v55)
    {
      v80 = *v50;
      v81 = v50[1];
      sub_23D5AFA60(*v50, v81);
      v82 = *v49;
      v83 = v49[1];
      *v49 = v80;
      v49[1] = v81;
      sub_23D5DDA20(v82, v83);
      v84 = v50[2];
      v85 = v50[3];
      sub_23D5AFA60(v84, v85);
      v86 = v49[2];
      v87 = v49[3];
      v49[2] = v84;
      v49[3] = v85;
      sub_23D5DDA20(v86, v87);
      v88 = v50[4];
      v89 = v50[5];
      sub_23D5AFA60(v88, v89);
      v90 = v49[4];
      v91 = v49[5];
      v49[4] = v88;
      v49[5] = v89;
      sub_23D5DDA20(v90, v91);
      v92((uint64_t)v49 + *(int *)(v51 + 28), (uint64_t)v50 + *(int *)(v51 + 28), v17);
      return a1;
    }
    sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v55)
  {
LABEL_18:
    v62 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v49, v50, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    return a1;
  }
  v56 = *v50;
  v57 = v50[1];
  sub_23D5AFA60(*v50, v57);
  *v49 = v56;
  v49[1] = v57;
  v58 = v50[2];
  v59 = v50[3];
  sub_23D5AFA60(v58, v59);
  v49[2] = v58;
  v49[3] = v59;
  v60 = v50[4];
  v61 = v50[5];
  sub_23D5AFA60(v60, v61);
  v49[4] = v60;
  v49[5] = v61;
  (*(void (**)(char *, char *, uint64_t))(v93 + 16))((char *)v49 + *(int *)(v51 + 28), (char *)v50 + *(int *)(v51 + 28), v17);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v52 + 56))(v49, 0, 1, v51);
  return a1;
}

uint64_t sub_23D5F51C0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  _OWORD *v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v6 = a3[7];
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[8];
  v12 = (_QWORD *)(a1 + v11);
  v13 = (_QWORD *)(a2 + v11);
  v14 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    v10((char *)v12 + *(int *)(v14 + 20), (char *)v13 + *(int *)(v14 + 20), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[9];
  v18 = (_OWORD *)(a1 + v17);
  v19 = (_OWORD *)(a2 + v17);
  v20 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    v23 = v19[1];
    *v18 = *v19;
    v18[1] = v23;
    v24 = v19[3];
    v18[2] = v19[2];
    v18[3] = v24;
    v10((char *)v18 + *(int *)(v20 + 32), (char *)v19 + *(int *)(v20 + 32), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  v25 = a3[10];
  v26 = (_OWORD *)(a1 + v25);
  v27 = (_OWORD *)(a2 + v25);
  v28 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    v31 = v27[1];
    *v26 = *v27;
    v26[1] = v31;
    v26[2] = v27[2];
    v10((char *)v26 + *(int *)(v28 + 28), (char *)v27 + *(int *)(v28 + 28), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

uint64_t sub_23D5F5404(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  int v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t (*v39)(uint64_t *, uint64_t, uint64_t);
  int v40;
  int v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  void (*v59)(uint64_t, uint64_t, uint64_t);
  uint64_t v60;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v8, v9);
  v10 = a3[7];
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  v60 = *(_QWORD *)(v13 - 8);
  v59 = *(void (**)(uint64_t, uint64_t, uint64_t))(v60 + 40);
  v59(v11, v12, v13);
  v14 = a3[8];
  v15 = (char *)(a1 + v14);
  v16 = (char *)(a2 + v14);
  v17 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_QWORD *)v15 = *(_QWORD *)v16;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v15[*(int *)(v17 + 20)], &v16[*(int *)(v17 + 20)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_23D5E6950((uint64_t)v15, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  *(_QWORD *)v15 = *(_QWORD *)v16;
  swift_bridgeObjectRelease();
  v59((uint64_t)&v15[*(int *)(v17 + 20)], (uint64_t)&v16[*(int *)(v17 + 20)], v13);
LABEL_7:
  v23 = a3[9];
  v24 = (char *)(a1 + v23);
  v25 = (char *)(a2 + v23);
  v26 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  v29 = v28(v24, 1, v26);
  v30 = v28(v25, 1, v26);
  if (v29)
  {
    if (!v30)
    {
      v31 = *((_OWORD *)v25 + 1);
      *(_OWORD *)v24 = *(_OWORD *)v25;
      *((_OWORD *)v24 + 1) = v31;
      v32 = *((_OWORD *)v25 + 3);
      *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
      *((_OWORD *)v24 + 3) = v32;
      (*(void (**)(char *, char *, uint64_t))(v60 + 32))(&v24[*(int *)(v26 + 32)], &v25[*(int *)(v26 + 32)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (v30)
  {
    sub_23D5E6950((uint64_t)v24, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_12:
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
    goto LABEL_13;
  }
  v45 = *(_QWORD *)v24;
  v46 = *((_QWORD *)v24 + 1);
  *(_OWORD *)v24 = *(_OWORD *)v25;
  sub_23D5DDA20(v45, v46);
  v47 = *((_QWORD *)v24 + 2);
  v48 = *((_QWORD *)v24 + 3);
  *((_OWORD *)v24 + 1) = *((_OWORD *)v25 + 1);
  sub_23D5DDA20(v47, v48);
  v49 = *((_QWORD *)v24 + 4);
  v50 = *((_QWORD *)v24 + 5);
  *((_OWORD *)v24 + 2) = *((_OWORD *)v25 + 2);
  sub_23D5DDA20(v49, v50);
  v51 = *((_QWORD *)v24 + 6);
  v52 = *((_QWORD *)v24 + 7);
  *((_OWORD *)v24 + 3) = *((_OWORD *)v25 + 3);
  sub_23D5DDA20(v51, v52);
  v59((uint64_t)&v24[*(int *)(v26 + 32)], (uint64_t)&v25[*(int *)(v26 + 32)], v13);
LABEL_13:
  v34 = a3[10];
  v35 = (uint64_t *)(a1 + v34);
  v36 = (uint64_t *)(a2 + v34);
  v37 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v38 = *(_QWORD *)(v37 - 8);
  v39 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v38 + 48);
  v40 = v39(v35, 1, v37);
  v41 = v39(v36, 1, v37);
  if (!v40)
  {
    if (!v41)
    {
      v53 = *v35;
      v54 = v35[1];
      *(_OWORD *)v35 = *(_OWORD *)v36;
      sub_23D5DDA20(v53, v54);
      v55 = v35[2];
      v56 = v35[3];
      *((_OWORD *)v35 + 1) = *((_OWORD *)v36 + 1);
      sub_23D5DDA20(v55, v56);
      v57 = v35[4];
      v58 = v35[5];
      *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
      sub_23D5DDA20(v57, v58);
      v59((uint64_t)v35 + *(int *)(v37 + 28), (uint64_t)v36 + *(int *)(v37 + 28), v13);
      return a1;
    }
    sub_23D5E6950((uint64_t)v35, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
    goto LABEL_18;
  }
  if (v41)
  {
LABEL_18:
    v43 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
    memcpy(v35, v36, *(_QWORD *)(*(_QWORD *)(v43 - 8) + 64));
    return a1;
  }
  v42 = *((_OWORD *)v36 + 1);
  *(_OWORD *)v35 = *(_OWORD *)v36;
  *((_OWORD *)v35 + 1) = v42;
  *((_OWORD *)v35 + 2) = *((_OWORD *)v36 + 2);
  (*(void (**)(char *, char *, uint64_t))(v60 + 32))((char *)v35 + *(int *)(v37 + 28), (char *)v36 + *(int *)(v37 + 28), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v38 + 56))(v35, 0, 1, v37);
  return a1;
}

uint64_t sub_23D5F57DC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F57E8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[8];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
        {
          v10 = v13;
          v11 = a3[9];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a3[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23D5F58E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F58F4(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[7];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[8];
      }
      else
      {
        v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
        v9 = *(_QWORD *)(v13 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v13;
          v11 = a4[9];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[10];
        }
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_GroupBlob(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C79FB8);
}

void sub_23D5F5A00()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;

  sub_23D66BE68();
  if (v0 <= 0x3F)
  {
    sub_23D5F5B08(319, &qword_256C79FC8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    if (v1 <= 0x3F)
    {
      sub_23D5F5B08(319, &qword_256C79FD0, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      if (v2 <= 0x3F)
      {
        sub_23D5F5B08(319, qword_256C79FD8, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
        if (v3 <= 0x3F)
          swift_initStructMetadata();
      }
    }
  }
}

void sub_23D5F5B08(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  unint64_t v4;
  uint64_t v5;

  if (!*a2)
  {
    a3(255);
    v4 = sub_23D66C5B8();
    if (!v5)
      atomic_store(v4, a2);
  }
}

uint64_t *sub_23D5F5B54(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v21 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v21 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_23D5AFA60(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = a2[5];
    v12 = a2[6];
    sub_23D5AFA60(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    v13 = a2[7];
    v14 = a2[8];
    sub_23D5AFA60(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    v15 = a2[10];
    v4[9] = a2[9];
    v16 = a2[11];
    swift_bridgeObjectRetain();
    sub_23D5AFA60(v15, v16);
    v4[10] = v15;
    v4[11] = v16;
    v17 = *(int *)(a3 + 44);
    v18 = (char *)v4 + v17;
    v19 = (char *)a2 + v17;
    v20 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  }
  return v4;
}

uint64_t sub_23D5F5C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_23D5DDA20(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  swift_bridgeObjectRelease();
  sub_23D5DDA20(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  v4 = a1 + *(int *)(a2 + 44);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D5F5CD0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v12, v13);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v15 = *(_QWORD *)(a2 + 88);
  swift_bridgeObjectRetain();
  sub_23D5AFA60(v14, v15);
  *(_QWORD *)(a1 + 80) = v14;
  *(_QWORD *)(a1 + 88) = v15;
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 16))(v17, v18, v19);
  return a1;
}

uint64_t sub_23D5F5DAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  sub_23D5DDA20(v16, v17);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v18, v19);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  sub_23D5DDA20(v20, v21);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v22 = *(_QWORD *)(a2 + 80);
  v23 = *(_QWORD *)(a2 + 88);
  sub_23D5AFA60(v22, v23);
  v24 = *(_QWORD *)(a1 + 80);
  v25 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v22;
  *(_QWORD *)(a1 + 88) = v23;
  sub_23D5DDA20(v24, v25);
  v26 = *(int *)(a3 + 44);
  v27 = a1 + v26;
  v28 = a2 + v26;
  v29 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v29 - 8) + 24))(v27, v28, v29);
  return a1;
}

uint64_t sub_23D5F5EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  v4 = *(int *)(a3 + 44);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D5F5F48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_23D5DDA20(v10, v11);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_23D5DDA20(v12, v13);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
  swift_bridgeObjectRelease();
  v14 = *(_QWORD *)(a1 + 80);
  v15 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_23D5DDA20(v14, v15);
  v16 = *(int *)(a3 + 44);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v19 - 8) + 40))(v17, v18, v19);
  return a1;
}

uint64_t sub_23D5F6010()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F601C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 72);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 44), a2, v8);
  }
}

uint64_t sub_23D5F6098()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F60A4(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 72) = (a2 - 1);
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 44), a2, a2, v7);
  }
  return result;
}

uint64_t type metadata accessor for GKCrypto_UserKeys(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A078);
}

uint64_t sub_23D5F612C()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23D5F61C4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D5F61D4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t type metadata accessor for GKCrypto_GroupBlobRequest(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A120);
}

unint64_t sub_23D5F61F8@<X0>(unint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = result;
  *(_BYTE *)(a2 + 8) = result < 2;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

uint64_t sub_23D5F6210()
{
  _BYTE *v0;

  if (v0[8])
    return *(_QWORD *)v0 != 0;
  else
    return *(_QWORD *)v0;
}

_QWORD *sub_23D5F622C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X8>)
{
  BOOL v2;
  char v3;

  v2 = *result >= 2uLL;
  *(_QWORD *)a2 = *result;
  v3 = !v2;
  *(_BYTE *)(a2 + 8) = v3;
  *(_BYTE *)(a2 + 9) = 0;
  return result;
}

void sub_23D5F6248(_QWORD *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  if (*((_BYTE *)v1 + 8))
    v2 = *v1 != 0;
  *a1 = v2;
}

uint64_t sub_23D5F626C()
{
  sub_23D60E278();
  return sub_23D66BEA4();
}

BOOL sub_23D5F62A8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  if (*((_BYTE *)a1 + 8))
    v2 = *a1 != 0;
  v3 = *a2 != 0;
  if (!*((_BYTE *)a2 + 8))
    v3 = *a2;
  return v2 == v3;
}

void sub_23D5F62E4()
{
  qword_256C88CC0 = (uint64_t)&unk_250E287F0;
}

uint64_t sub_23D5F62F8@<X0>(_QWORD *a1@<X8>)
{
  return sub_23D5F64E4(&qword_256C78B88, &qword_256C88CC0, a1);
}

void sub_23D5F6314(uint64_t a1@<X8>)
{
  *(_QWORD *)a1 = 0;
  *(_BYTE *)(a1 + 8) = 1;
}

void sub_23D5F6324(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  sub_23D6161F0();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

uint64_t sub_23D5F6354()
{
  uint64_t v0;

  return *(_QWORD *)v0;
}

void sub_23D5F635C(uint64_t a1@<X8>)
{
  uint64_t v2;
  char v3;
  char v4;

  sub_23D6161F0();
  *(_QWORD *)a1 = v2;
  *(_BYTE *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 9) = v4 & 1;
}

void sub_23D5F6390(_QWORD *a1@<X8>)
{
  _QWORD *v1;

  *a1 = *v1;
}

uint64_t sub_23D5F639C()
{
  sub_23D66C8E8();
  sub_23D66C36C();
  return sub_23D66C90C();
}

uint64_t sub_23D5F6404()
{
  sub_23D60E2BC();
  return sub_23D66BEA4();
}

uint64_t sub_23D5F643C()
{
  sub_23D66C8E8();
  sub_23D66C36C();
  return sub_23D66C90C();
}

BOOL sub_23D5F64A0(_QWORD *a1, _QWORD *a2)
{
  return *a1 == *a2;
}

void sub_23D5F64B4()
{
  qword_256C88CC8 = (uint64_t)&unk_250E28830;
}

uint64_t sub_23D5F64C8@<X0>(_QWORD *a1@<X8>)
{
  return sub_23D5F64E4(&qword_256C78B90, &qword_256C88CC8, a1);
}

uint64_t sub_23D5F64E4@<X0>(_QWORD *a1@<X2>, _QWORD *a2@<X3>, _QWORD *a3@<X8>)
{
  if (*a1 != -1)
    swift_once();
  *a3 = *a2;
  return swift_bridgeObjectRetain();
}

uint64_t sub_23D5F6528()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88CD0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88CD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 0;
  *(_QWORD *)v7 = "Member";
  *(_QWORD *)(v7 + 8) = 6;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 1;
  *(_QWORD *)v11 = "Administrator";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F6678@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78B98, (uint64_t)qword_256C88CD0, a1);
}

uint64_t sub_23D5F6694()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88CE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88CE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "ephemeralKey";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "nonce";
  *((_QWORD *)v11 + 1) = 5;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "ciphertexts";
  *(_QWORD *)(v12 + 8) = 11;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F6828()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3)
      {
        type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(0);
        sub_23D5AE928(&qword_256C7A488, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D672834);
        sub_23D66BEEC();
      }
      else if (result == 2 || result == 1)
      {
        sub_23D66BED4();
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D5F6944()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5F6990(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5F6AEC@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 16) = xmmword_23D66DF40;
  *(_QWORD *)(a1 + 32) = MEMORY[0x24BEE4AF8];
  return sub_23D66BE5C();
}

unint64_t sub_23D5F6B20()
{
  return 0xD000000000000014;
}

uint64_t (*sub_23D5F6B48())()
{
  return nullsub_1;
}

uint64_t sub_23D5F6B5C()
{
  return sub_23D5F6828();
}

void sub_23D5F6B70()
{
  sub_23D5F6944();
}

uint64_t sub_23D5F6B88()
{
  sub_23D5AE928(&qword_256C7A530, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D672964);
  return sub_23D66BE98();
}

uint64_t sub_23D5F6BDC@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BA0, (uint64_t)qword_256C88CE8, a1);
}

uint64_t sub_23D5F6BF8@<X0>(_QWORD *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;

  if (*a1 != -1)
    swift_once();
  v5 = sub_23D66BFB8();
  v6 = __swift_project_value_buffer(v5, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a3, v6, v5);
}

uint64_t sub_23D5F6C64()
{
  sub_23D5AE928(&qword_256C7A4A8, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D67299C);
  return sub_23D66BF34();
}

uint64_t sub_23D5F6CA8()
{
  sub_23D5AE928(&qword_256C7A4A8, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D67299C);
  return sub_23D66BF40();
}

uint64_t sub_23D5F6D00()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88D00 = 0xD000000000000014;
  *(_QWORD *)algn_256C88D08 = 0x800000023D678780;
  return result;
}

uint64_t sub_23D5F6D70()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88D10);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88D10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E0E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "publicKeyHash";
  *(_QWORD *)(v7 + 8) = 13;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ciphertext";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "tag";
  *((_QWORD *)v13 + 1) = 3;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "keyShareHint";
  *((_QWORD *)v15 + 1) = 12;
  v15[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F6F2C()
{
  return sub_23D5F837C();
}

void sub_23D5F6F40()
{
  sub_23D5F845C();
}

uint64_t sub_23D5F6F60(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78BA8, &qword_256C88D00);
}

uint64_t (*sub_23D5F6F88())()
{
  return nullsub_1;
}

uint64_t sub_23D5F6F9C()
{
  sub_23D5AE928(&qword_256C7A540, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D6727FC);
  return sub_23D66BE98();
}

uint64_t sub_23D5F6FEC@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BB0, (uint64_t)qword_256C88D10, a1);
}

uint64_t sub_23D5F7008()
{
  sub_23D5AE928(&qword_256C7A488, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D672834);
  return sub_23D66BF34();
}

uint64_t sub_23D5F7048()
{
  sub_23D5AE928(&qword_256C7A488, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D672834);
  return sub_23D66BF40();
}

uint64_t sub_23D5F7098(uint64_t *a1, uint64_t a2)
{
  return sub_23D60C9B0(a1, a2, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag) & 1;
}

uint64_t sub_23D5F70B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88D28);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88D28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E450;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "groupHandle";
  *(_QWORD *)(v11 + 8) = 11;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "AEGroupBlobCiphertext";
  *((_QWORD *)v13 + 1) = 21;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "randomizedVerificationKeys";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "groupBlobPublicKeys";
  *((_QWORD *)v17 + 1) = 19;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "groupBlobSignatures";
  *((_QWORD *)v19 + 1) = 19;
  v19[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F72F0()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_23D66BEE0();
          break;
        case 2:
        case 3:
          sub_23D66BED4();
          break;
        case 4:
          sub_23D5F740C();
          break;
        case 5:
          sub_23D5F74A0();
          break;
        case 6:
          sub_23D5F7534();
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5F740C()
{
  type metadata accessor for GKCrypto_GroupBlob(0);
  type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  sub_23D5AE928(&qword_256C79AB8, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D672564);
  return sub_23D66BEF8();
}

uint64_t sub_23D5F74A0()
{
  type metadata accessor for GKCrypto_GroupBlob(0);
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  sub_23D5AE928(&qword_256C79AB0, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723FC);
  return sub_23D66BEF8();
}

uint64_t sub_23D5F7534()
{
  type metadata accessor for GKCrypto_GroupBlob(0);
  type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  sub_23D5AE928(&qword_256C7A420, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D672294);
  return sub_23D66BEF8();
}

uint64_t sub_23D5F75C8()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5F7788(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupBlob(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 32), (uint64_t)v7, &qword_256C79740);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C79740);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_23D5AE928(&qword_256C79AB8, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D672564);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
}

uint64_t sub_23D5F78FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupBlob(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 36), (uint64_t)v7, &qword_256C79748);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C79748);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
  sub_23D5AE928(&qword_256C79AB0, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723FC);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
}

uint64_t sub_23D5F7A70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupBlob(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 40), (uint64_t)v7, qword_256C79750);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, qword_256C79750);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_23D5AE928(&qword_256C7A420, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D672294);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
}

uint64_t sub_23D5F7BE4@<X0>(int *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  *(_DWORD *)a2 = 0;
  *(_OWORD *)(a2 + 8) = xmmword_23D66DF40;
  *(_OWORD *)(a2 + 24) = xmmword_23D66DF40;
  sub_23D66BE5C();
  v4 = a2 + a1[8];
  v5 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = a2 + a1[9];
  v7 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
  v8 = a2 + a1[10];
  v9 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 56))(v8, 1, 1, v9);
}

unint64_t sub_23D5F7CAC()
{
  return 0xD000000000000012;
}

uint64_t sub_23D5F7CC8()
{
  return sub_23D5F72F0();
}

uint64_t sub_23D5F7CDC()
{
  return sub_23D5F75C8();
}

uint64_t sub_23D5F7CF0()
{
  sub_23D5AE928(&qword_256C7A548, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D672694);
  return sub_23D66BE98();
}

uint64_t sub_23D5F7D40@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BB8, (uint64_t)qword_256C88D28, a1);
}

uint64_t sub_23D5F7D5C()
{
  sub_23D5AE928(&qword_256C79A80, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6726CC);
  return sub_23D66BF34();
}

uint64_t sub_23D5F7D9C()
{
  sub_23D5AE928(&qword_256C79A80, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6726CC);
  return sub_23D66BF40();
}

uint64_t sub_23D5F7DF0()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88D40 = 0xD000000000000012;
  *(_QWORD *)algn_256C88D48 = 0x800000023D678800;
  return result;
}

uint64_t sub_23D5F7E5C(uint64_t a1)
{
  return sub_23D5FBAA4(a1, qword_256C88D50, (uint64_t)"randomizedVerificationKeys", 26);
}

uint64_t sub_23D5F7E74()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_23D66BEB0();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_23D66BEC8();
  }
  return result;
}

uint64_t sub_23D5F7EE0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v0 + 16) || (result = sub_23D66BF64(), !v1))
  {
    type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    return sub_23D66BE50();
  }
  return result;
}

uint64_t sub_23D5F7F74@<X0>(_QWORD *a1@<X8>)
{
  *a1 = MEMORY[0x24BEE4AF8];
  return sub_23D66BE5C();
}

uint64_t sub_23D5F7F9C(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78BC0, &qword_256C88D40);
}

uint64_t sub_23D5F7FBC(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  uint64_t v5;

  if (*a3 != -1)
    swift_once();
  v5 = *a4;
  swift_bridgeObjectRetain();
  return v5;
}

uint64_t (*sub_23D5F8018())()
{
  return nullsub_1;
}

uint64_t sub_23D5F802C()
{
  return sub_23D5F7E74();
}

uint64_t sub_23D5F8040()
{
  return sub_23D5F7EE0();
}

uint64_t sub_23D5F8054()
{
  sub_23D5AE928(&qword_256C7A568, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D67252C);
  return sub_23D66BE98();
}

uint64_t sub_23D5F80A4@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BC8, (uint64_t)qword_256C88D50, a1);
}

uint64_t sub_23D5F80C0()
{
  sub_23D5AE928(&qword_256C79AB8, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D672564);
  return sub_23D66BF34();
}

uint64_t sub_23D5F8100()
{
  sub_23D5AE928(&qword_256C79AB8, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D672564);
  return sub_23D66BF40();
}

uint64_t sub_23D5F8154()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88D68 = 0xD000000000000012;
  unk_256C88D70 = 0x800000023D678800;
  return result;
}

uint64_t sub_23D5F81BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88D78);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88D78);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E0E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "groupVerificationKey";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "adminVerificationKey";
  *(_QWORD *)(v11 + 8) = 20;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "groupPublicEncryptionKey";
  *((_QWORD *)v13 + 1) = 24;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "adminPublicEncryptionKey";
  *((_QWORD *)v15 + 1) = 24;
  v15[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F837C()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
          sub_23D66BED4();
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D5F8440()
{
  sub_23D5F845C();
}

void sub_23D5F845C()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5F84AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5F8680(uint64_t *a1, uint64_t a2)
{
  return sub_23D60C9B0(a1, a2, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys) & 1;
}

uint64_t sub_23D5F86A0@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_23D66DF40;
  a1[1] = xmmword_23D66DF40;
  a1[2] = xmmword_23D66DF40;
  a1[3] = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

uint64_t sub_23D5F86CC(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78BD0, &qword_256C88D68);
}

uint64_t sub_23D5F86EC()
{
  sub_23D5AE928(&qword_256C7A570, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723C4);
  return sub_23D66BE98();
}

uint64_t sub_23D5F873C@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BD8, (uint64_t)qword_256C88D78, a1);
}

uint64_t sub_23D5F8758()
{
  sub_23D5AE928(&qword_256C79AB0, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723FC);
  return sub_23D66BF34();
}

uint64_t sub_23D5F8798()
{
  sub_23D5AE928(&qword_256C79AB0, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723FC);
  return sub_23D66BF40();
}

uint64_t sub_23D5F87E8()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88D90 = 0xD000000000000012;
  *(_QWORD *)algn_256C88D98 = 0x800000023D678800;
  return result;
}

uint64_t sub_23D5F8850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88DA0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88DA0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "currentGroupAdminSignature";
  *(_QWORD *)(v7 + 8) = 26;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "previousGroupAdminSignature";
  *((_QWORD *)v11 + 1) = 27;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "currentMemberSignature";
  *(_QWORD *)(v12 + 8) = 22;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F89E4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2 || result == 1)
        sub_23D66BED4();
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D5F8A88()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5F8AD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5F8C38@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_23D66DF40;
  a1[1] = xmmword_23D66DF40;
  a1[2] = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

uint64_t sub_23D5F8C64(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78BE0, &qword_256C88D90);
}

uint64_t sub_23D5F8C84()
{
  return sub_23D5F89E4();
}

void sub_23D5F8C98()
{
  sub_23D5F8A88();
}

uint64_t sub_23D5F8CAC()
{
  sub_23D5AE928(&qword_256C7A578, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D67225C);
  return sub_23D66BE98();
}

uint64_t sub_23D5F8CFC@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BE8, (uint64_t)qword_256C88DA0, a1);
}

uint64_t sub_23D5F8D18()
{
  sub_23D5AE928(&qword_256C7A420, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D672294);
  return sub_23D66BF34();
}

uint64_t sub_23D5F8D58()
{
  sub_23D5AE928(&qword_256C7A420, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D672294);
  return sub_23D66BF40();
}

uint64_t sub_23D5F8DA8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88DB8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88DB8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "adminGroupHandleBlob";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "adminGroupAEBlobCiphertext";
  *((_QWORD *)v11 + 1) = 26;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F8EF8()
{
  return sub_23D600154();
}

void sub_23D5F8F0C()
{
  sub_23D5F9FC8();
}

uint64_t sub_23D5F8F28@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_23D66DF40;
  a1[1] = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D5F8F50()
{
  return 0xD000000000000017;
}

uint64_t (*sub_23D5F8F74())()
{
  return nullsub_1;
}

uint64_t sub_23D5F8F88()
{
  sub_23D5AE928(&qword_256C7A580, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D6720F4);
  return sub_23D66BE98();
}

uint64_t sub_23D5F8FD8@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BF0, (uint64_t)qword_256C88DB8, a1);
}

uint64_t sub_23D5F8FF4()
{
  sub_23D5AE928(&qword_256C79A20, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D67212C);
  return sub_23D66BF34();
}

uint64_t sub_23D5F9034()
{
  sub_23D5AE928(&qword_256C79A20, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D67212C);
  return sub_23D66BF40();
}

uint64_t sub_23D5F9084(uint64_t *a1, uint64_t a2)
{
  return sub_23D60E130(a1, a2, type metadata accessor for GKCrypto_AdminGroupBlob) & 1;
}

uint64_t sub_23D5F90A4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88DD0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88DD0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "groupVersion";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "seed";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F91F4()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2)
      {
        sub_23D66BED4();
      }
      else if (result == 1)
      {
        sub_23D66BEE0();
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5F9294()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5F9390@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D5F93BC()
{
  return 0xD000000000000016;
}

uint64_t sub_23D5F93D8()
{
  return sub_23D5F91F4();
}

uint64_t sub_23D5F93EC()
{
  return sub_23D5F9294();
}

uint64_t sub_23D5F9400()
{
  sub_23D5AE928(&qword_256C7A588, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671F8C);
  return sub_23D66BE98();
}

uint64_t sub_23D5F9450@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78BF8, (uint64_t)qword_256C88DD0, a1);
}

uint64_t sub_23D5F946C()
{
  sub_23D5AE928(&qword_256C799C8, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671FC4);
  return sub_23D66BF34();
}

uint64_t sub_23D5F94AC()
{
  sub_23D5AE928(&qword_256C799C8, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671FC4);
  return sub_23D66BF40();
}

uint64_t sub_23D5F9500()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  _QWORD *v20;
  char *v21;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88DE8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88DE8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC50;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "encryptionKey";
  *(_QWORD *)(v11 + 8) = 13;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "verificationKey";
  *((_QWORD *)v13 + 1) = 15;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "encryptionKeySignature";
  *((_QWORD *)v15 + 1) = 22;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "verificationKeySelfSignature";
  *((_QWORD *)v17 + 1) = 28;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "verificationKeyExternalSignatures";
  *((_QWORD *)v19 + 1) = 33;
  v19[16] = 2;
  v10();
  v20 = (_QWORD *)(v6 + 6 * v3);
  v21 = (char *)v20 + *(int *)(v1 + 48);
  *v20 = 7;
  *(_QWORD *)v21 = "metadata";
  *((_QWORD *)v21 + 1) = 8;
  v21[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5F976C()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_23D66BEB0();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          sub_23D66BEE0();
          goto LABEL_8;
        case 2:
        case 3:
        case 4:
        case 5:
        case 7:
          v4 = v3;
          sub_23D66BED4();
          goto LABEL_8;
        case 6:
          type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(0);
          sub_23D5AE928(&qword_256C7A3C0, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671D6C);
          v4 = v3;
          sub_23D66BEEC();
LABEL_8:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5F98D8()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5F9BD4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 24) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 40) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 56) = xmmword_23D66DF40;
  *(_QWORD *)(a1 + 72) = MEMORY[0x24BEE4AF8];
  *(_OWORD *)(a1 + 80) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D5F9C1C()
{
  return 0xD000000000000011;
}

uint64_t sub_23D5F9C38@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 44);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D5F9C78(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 44);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_23D5F9CB8())()
{
  return nullsub_1;
}

uint64_t sub_23D5F9CCC()
{
  return sub_23D5F976C();
}

uint64_t sub_23D5F9CE0()
{
  return sub_23D5F98D8();
}

uint64_t sub_23D5F9CF4()
{
  sub_23D5AE928(&qword_256C7A508, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D671E9C);
  return sub_23D66BE98();
}

uint64_t sub_23D5F9D44@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C00, (uint64_t)qword_256C88DE8, a1);
}

uint64_t sub_23D5F9D60()
{
  sub_23D5AE928((unint64_t *)&qword_256C79138, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D672B9C);
  return sub_23D66BF34();
}

uint64_t sub_23D5F9DA0()
{
  sub_23D5AE928((unint64_t *)&qword_256C79138, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D672B9C);
  return sub_23D66BF40();
}

uint64_t sub_23D5F9DF4()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88E00 = 0xD000000000000011;
  *(_QWORD *)algn_256C88E08 = 0x800000023D678710;
  return result;
}

uint64_t sub_23D5F9E5C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88E10);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88E10);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "verificationKey";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "signature";
  *((_QWORD *)v11 + 1) = 9;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

void sub_23D5F9FAC()
{
  sub_23D5F9FC8();
}

void sub_23D5F9FC8()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5FA018(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5FA114(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78C08, &qword_256C88E00);
}

uint64_t sub_23D5FA134()
{
  sub_23D5AE928(&qword_256C7A590, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671D34);
  return sub_23D66BE98();
}

uint64_t sub_23D5FA184@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C10, (uint64_t)qword_256C88E10, a1);
}

uint64_t sub_23D5FA1A0()
{
  sub_23D5AE928(&qword_256C7A3C0, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671D6C);
  return sub_23D66BF34();
}

uint64_t sub_23D5FA1E0()
{
  sub_23D5AE928(&qword_256C7A3C0, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671D6C);
  return sub_23D66BF40();
}

uint64_t sub_23D5FA230(uint64_t *a1, uint64_t a2)
{
  return sub_23D60E130(a1, a2, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair) & 1;
}

uint64_t sub_23D5FA250()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88E28);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88E28);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "users";
  *(_QWORD *)(v7 + 8) = 5;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "preliminarySeed";
  *((_QWORD *)v11 + 1) = 15;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "groupAssociatedData";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FA3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v5 = v3;
  result = sub_23D66BEB0();
  v11 = v4;
  if (!v4)
  {
    while (1)
    {
      if ((v10 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v12 = v11;
        sub_23D5FC10C(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_GroupAETextToSign, type metadata accessor for GKCrypto_VersionedSeed, &qword_256C799C8, (uint64_t)&unk_23D671FC4);
        goto LABEL_5;
      }
      if (result == 1)
      {
        type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
        sub_23D5AE928(&qword_256C799C0, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A9C);
        v12 = v11;
        sub_23D66BEEC();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_23D66BEB0();
    }
    v12 = v11;
    sub_23D5FF5B4(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_GroupAETextToSign, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, &qword_256C799A8, (uint64_t)&unk_23D671934);
LABEL_5:
    v11 = v12;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_23D5FA548(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  if (!*(_QWORD *)(*(_QWORD *)v3 + 16)
    || (type metadata accessor for GKCrypto_GroupAETextToSign.User(0),
        sub_23D5AE928(&qword_256C799C0, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A9C), result = sub_23D66BF88(), !v4))
  {
    result = sub_23D5FC2C8(v3, a1, a2, a3, type metadata accessor for GKCrypto_GroupAETextToSign, 2);
    if (!v4)
    {
      sub_23D5FA664(v3, a1, a2, a3);
      type metadata accessor for GKCrypto_GroupAETextToSign(0);
      return sub_23D66BE50();
    }
  }
  return result;
}

uint64_t sub_23D5FA664(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_256C799D8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C799D8);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
  sub_23D5AE928(&qword_256C799A8, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D671934);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

uint64_t sub_23D5FA7D8@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = MEMORY[0x24BEE4AF8];
  sub_23D66BE5C();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for GKCrypto_VersionedSeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t sub_23D5FA86C()
{
  return 0xD00000000000001ALL;
}

uint64_t sub_23D5FA888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FA3E4(a1, a2, a3);
}

uint64_t sub_23D5FA89C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FA548(a1, a2, a3);
}

uint64_t sub_23D5FA8B0()
{
  sub_23D5AE928(&qword_256C7A598, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671BCC);
  return sub_23D66BE98();
}

uint64_t sub_23D5FA900@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C18, (uint64_t)qword_256C88E28, a1);
}

uint64_t sub_23D5FA91C()
{
  sub_23D5AE928(&qword_256C799B0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671C04);
  return sub_23D66BF34();
}

uint64_t sub_23D5FA95C()
{
  sub_23D5AE928(&qword_256C799B0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671C04);
  return sub_23D66BF40();
}

uint64_t sub_23D5FA9B0()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88E40 = 0xD00000000000001ALL;
  *(_QWORD *)algn_256C88E48 = 0x800000023D678B40;
  return result;
}

uint64_t sub_23D5FAA14()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88E50);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88E50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E0E0;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "groupKitID";
  *(_QWORD *)(v7 + 8) = 10;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "userKeysBlob";
  *(_QWORD *)(v11 + 8) = 12;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "role";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "keyShare";
  *((_QWORD *)v15 + 1) = 8;
  v15[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FABD8()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 4:
          sub_23D66BED4();
          break;
        case 3:
          sub_23D60E278();
          sub_23D66BEBC();
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D5FACE8()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5FAD34(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5FAEE4@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 16) = xmmword_23D66DF40;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 1;
  *(_OWORD *)(a1 + 48) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

uint64_t sub_23D5FAF1C(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78C20, &qword_256C88E40);
}

uint64_t sub_23D5FAF3C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 32);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D5FAF7C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 32);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23D5FAFBC()
{
  return sub_23D5FABD8();
}

void sub_23D5FAFD0()
{
  sub_23D5FACE8();
}

uint64_t sub_23D5FAFE4()
{
  sub_23D5AE928(&qword_256C7A5B8, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A64);
  return sub_23D66BE98();
}

uint64_t sub_23D5FB034@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C28, (uint64_t)qword_256C88E50, a1);
}

uint64_t sub_23D5FB050()
{
  sub_23D5AE928(&qword_256C799C0, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A9C);
  return sub_23D66BF34();
}

uint64_t sub_23D5FB090()
{
  sub_23D5AE928(&qword_256C799C0, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A9C);
  return sub_23D66BF40();
}

uint64_t sub_23D5FB0E4()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88E68 = 0xD00000000000001ALL;
  unk_256C88E70 = 0x800000023D678B40;
  return result;
}

uint64_t sub_23D5FB154()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88E78);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88E78);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "originatorID";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "adminGroupBlob";
  *((_QWORD *)v11 + 1) = 14;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FB2A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_23D66BEB0();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      if (result == 2)
      {
        sub_23D5FC10C(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, type metadata accessor for GKCrypto_AdminGroupBlob, &qword_256C79A20, (uint64_t)&unk_23D67212C);
      }
      else if (result == 1)
      {
        sub_23D66BED4();
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D5FB37C()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5FB3C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
  {
    result = sub_23D5FB470(v5, v6, v4, v3);
    if (!v2)
    {
      type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
      return sub_23D66BE50();
    }
  }
  return result;
}

uint64_t sub_23D5FB470(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 24), (uint64_t)v7, &qword_256C799F0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C799F0);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_AdminGroupBlob);
  sub_23D5AE928(&qword_256C79A20, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D67212C);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_AdminGroupBlob);
}

uint64_t sub_23D5FB5E8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;

  *a2 = xmmword_23D66DF40;
  sub_23D66BE5C();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
}

uint64_t sub_23D5FB648(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78C30, &qword_256C88E68);
}

uint64_t sub_23D5FB668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FB2A4(a1, a2, a3);
}

void sub_23D5FB67C()
{
  sub_23D5FB37C();
}

uint64_t sub_23D5FB690()
{
  sub_23D5AE928(&qword_256C7A5C8, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D6718FC);
  return sub_23D66BE98();
}

uint64_t sub_23D5FB6E0@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C38, (uint64_t)qword_256C88E78, a1);
}

uint64_t sub_23D5FB6FC()
{
  sub_23D5AE928(&qword_256C799A8, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D671934);
  return sub_23D66BF34();
}

uint64_t sub_23D5FB73C()
{
  sub_23D5AE928(&qword_256C799A8, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D671934);
  return sub_23D66BF40();
}

uint64_t sub_23D5FB78C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88E90);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88E90);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "groupAETextToSignBlob";
  *((_QWORD *)v11 + 1) = 21;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "signature";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FB920()
{
  return sub_23D601DDC();
}

uint64_t sub_23D5FB934()
{
  return sub_23D5FE750();
}

unint64_t sub_23D5FB954()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_23D5FB970()
{
  sub_23D5AE928(&qword_256C7A5D0, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D671794);
  return sub_23D66BE98();
}

uint64_t sub_23D5FB9C0@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C40, (uint64_t)qword_256C88E90, a1);
}

uint64_t sub_23D5FB9DC()
{
  sub_23D5AE928(&qword_256C799B8, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D6717CC);
  return sub_23D66BF34();
}

uint64_t sub_23D5FBA1C()
{
  sub_23D5AE928(&qword_256C799B8, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D6717CC);
  return sub_23D66BF40();
}

uint64_t sub_23D5FBA6C(uint64_t a1, char *a2)
{
  return sub_23D60D09C(a1, a2, type metadata accessor for GKCrypto_GroupAEDataToEncrypt) & 1;
}

uint64_t sub_23D5FBA8C(uint64_t a1)
{
  return sub_23D5FBAA4(a1, qword_256C88EA8, (uint64_t)"administratorID", 15);
}

uint64_t sub_23D5FBAA4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v7 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v7, a2);
  __swift_project_value_buffer(v7, (uint64_t)a2);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v9 = *(unsigned __int8 *)(*(_QWORD *)(v8 - 8) + 80);
  v10 = (v9 + 32) & ~v9;
  v11 = swift_allocObject();
  *(_OWORD *)(v11 + 16) = xmmword_23D66DED0;
  v12 = v11 + v10 + *(int *)(v8 + 48);
  *(_QWORD *)(v11 + v10) = 1;
  *(_QWORD *)v12 = a3;
  *(_QWORD *)(v12 + 8) = a4;
  *(_BYTE *)(v12 + 16) = 2;
  v13 = *MEMORY[0x24BE5C318];
  v14 = sub_23D66BFA0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 104))(v12, v13, v14);
  return sub_23D66BFAC();
}

uint64_t sub_23D5FBBA8()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  while (1)
  {
    result = sub_23D66BEB0();
    if (v0 || (v2 & 1) != 0)
      break;
    if (result == 1)
      sub_23D66BED4();
  }
  return result;
}

void sub_23D5FBC14()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5FBC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v2))
  {
    type metadata accessor for GKCrypto_AdminMetaData(0);
    return sub_23D66BE50();
  }
  return result;
}

uint64_t sub_23D5FBCE8@<X0>(_OWORD *a1@<X8>)
{
  *a1 = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D5FBD10()
{
  return 0xD000000000000016;
}

uint64_t sub_23D5FBD2C()
{
  return sub_23D5FBBA8();
}

void sub_23D5FBD40()
{
  sub_23D5FBC14();
}

uint64_t sub_23D5FBD54()
{
  sub_23D5AE928(&qword_256C7A5D8, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D67162C);
  return sub_23D66BE98();
}

uint64_t sub_23D5FBDA4@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C48, (uint64_t)qword_256C88EA8, a1);
}

uint64_t sub_23D5FBDC0()
{
  sub_23D5AE928(&qword_256C79A10, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D671664);
  return sub_23D66BF34();
}

uint64_t sub_23D5FBE00()
{
  sub_23D5AE928(&qword_256C79A10, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D671664);
  return sub_23D66BF40();
}

uint64_t sub_23D5FBE54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88EC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88EC0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "adminPreliminarySeed";
  *(_QWORD *)(v7 + 8) = 20;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "metaData";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "signature";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FBFE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  char v10;

  v5 = v3;
  result = sub_23D66BEB0();
  if (!v4)
  {
    while ((v10 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          sub_23D66BED4();
          break;
        case 2:
          sub_23D5FF5B4(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_AdminPlainText, type metadata accessor for GKCrypto_AdminMetaData, &qword_256C79A10, (uint64_t)&unk_23D671664);
          break;
        case 1:
          sub_23D5FC10C(a1, v5, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_AdminPlainText, type metadata accessor for GKCrypto_VersionedSeed, &qword_256C799C8, (uint64_t)&unk_23D671FC4);
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5FC10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  sub_23D5AE928(a7, a6, a8);
  return sub_23D66BEF8();
}

uint64_t sub_23D5FC1B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;

  result = sub_23D5FC2C8(v3, a1, a2, a3, type metadata accessor for GKCrypto_AdminPlainText, 1);
  if (!v4)
  {
    sub_23D5FC444(v3, a1, a2, a3);
    __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23D5FC2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD), uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  _QWORD v17[4];

  v17[0] = a6;
  v17[1] = a3;
  v17[3] = a4;
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v17 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v12 = *(_QWORD *)(v11 - 8);
  MEMORY[0x24BDAC7A8](v11);
  v14 = (char *)v17 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = a5(0);
  sub_23D5AEF48(a1 + *(int *)(v15 + 24), (uint64_t)v10, &qword_256C799D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11) == 1)
    return sub_23D5AEF8C((uint64_t)v10, &qword_256C799D0);
  sub_23D5E7F64((uint64_t)v10, (uint64_t)v14, type metadata accessor for GKCrypto_VersionedSeed);
  sub_23D5AE928(&qword_256C799C8, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671FC4);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v14, type metadata accessor for GKCrypto_VersionedSeed);
}

uint64_t sub_23D5FC444(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_AdminPlainText(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_256C79A28);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C79A28);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_AdminMetaData);
  sub_23D5AE928(&qword_256C79A10, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D671664);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_AdminMetaData);
}

uint64_t sub_23D5FC5B8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;

  *a2 = xmmword_23D66DF40;
  sub_23D66BE5C();
  v4 = (char *)a2 + *(int *)(a1 + 24);
  v5 = type metadata accessor for GKCrypto_VersionedSeed(0);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56))(v4, 1, 1, v5);
  v6 = (char *)a2 + *(int *)(a1 + 28);
  v7 = type metadata accessor for GKCrypto_AdminMetaData(0);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t sub_23D5FC64C()
{
  return 0xD000000000000017;
}

uint64_t sub_23D5FC668@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 20);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D5FC6A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 20);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23D5FC6E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FBFE8(a1, a2, a3);
}

uint64_t sub_23D5FC6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FC1B0(a1, a2, a3);
}

uint64_t sub_23D5FC710()
{
  sub_23D5AE928(&qword_256C7A5E0, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D6714C4);
  return sub_23D66BE98();
}

uint64_t sub_23D5FC760@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C50, (uint64_t)qword_256C88EC0, a1);
}

uint64_t sub_23D5FC77C()
{
  sub_23D5AE928(&qword_256C79A18, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D6714FC);
  return sub_23D66BF34();
}

uint64_t sub_23D5FC7BC()
{
  sub_23D5AE928(&qword_256C79A18, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D6714FC);
  return sub_23D66BF40();
}

uint64_t sub_23D5FC810()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void (*v9)(void);
  unint64_t v10;
  _QWORD *v11;
  char *v12;
  _QWORD *v13;
  char *v14;
  _QWORD *v15;
  char *v16;
  _QWORD *v17;
  char *v18;
  _QWORD *v19;
  char *v20;
  _QWORD *v21;
  char *v22;
  uint64_t v23;
  uint64_t v25;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88ED8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88ED8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_23D66FC60;
  v5 = v25 + v4;
  v6 = v25 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v25 + v4) = 1;
  *(_QWORD *)v6 = "inviteeID";
  *(_QWORD *)(v6 + 8) = 9;
  *(_BYTE *)(v6 + 16) = 2;
  v7 = *MEMORY[0x24BE5C318];
  v8 = sub_23D66BFA0();
  v9 = *(void (**)(void))(*(_QWORD *)(v8 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v9)(v6, v7, v8);
  v10 = v5 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v3) = 2;
  *(_QWORD *)v10 = "groupID";
  *(_QWORD *)(v10 + 8) = 7;
  *(_BYTE *)(v10 + 16) = 2;
  v9();
  v11 = (_QWORD *)(v5 + 2 * v3);
  v12 = (char *)v11 + *(int *)(v1 + 48);
  *v11 = 3;
  *(_QWORD *)v12 = "randomizedVerificationKey";
  *((_QWORD *)v12 + 1) = 25;
  v12[16] = 2;
  v9();
  v13 = (_QWORD *)(v5 + 3 * v3);
  v14 = (char *)v13 + *(int *)(v1 + 48);
  *v13 = 4;
  *(_QWORD *)v14 = "keyOffset";
  *((_QWORD *)v14 + 1) = 9;
  v14[16] = 2;
  v9();
  v15 = (_QWORD *)(v5 + 4 * v3);
  v16 = (char *)v15 + *(int *)(v1 + 48);
  *v15 = 5;
  *(_QWORD *)v16 = "metadata";
  *((_QWORD *)v16 + 1) = 8;
  v16[16] = 2;
  v9();
  v17 = (_QWORD *)(v5 + 5 * v3);
  v18 = (char *)v17 + *(int *)(v1 + 48);
  *v17 = 6;
  *(_QWORD *)v18 = "inviterID";
  *((_QWORD *)v18 + 1) = 9;
  v18[16] = 2;
  v9();
  v19 = (_QWORD *)(v5 + 6 * v3);
  v20 = (char *)v19 + *(int *)(v1 + 48);
  *v19 = 7;
  *(_QWORD *)v20 = "rsvpResponseDigest";
  *((_QWORD *)v20 + 1) = 18;
  v20[16] = 2;
  v9();
  v21 = (_QWORD *)(v5 + 7 * v3);
  v22 = (char *)v21 + *(int *)(v1 + 48);
  *v21 = 8;
  *(_QWORD *)v22 = "groupVersionWhenInvited";
  *((_QWORD *)v22 + 1) = 23;
  v22[16] = 2;
  v9();
  v23 = v5 + 8 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + 8 * v3) = 9;
  *(_QWORD *)v23 = "inviterKeyHint";
  *(_QWORD *)(v23 + 8) = 14;
  *(_BYTE *)(v23 + 16) = 2;
  v9();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FCAE8()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 2:
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 9:
          sub_23D66BED4();
          break;
        case 8:
          sub_23D66BEE0();
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D5FCC14()
{
  __asm { BR              X10 }
}

uint64_t sub_23D5FCC5C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t result;

  if ((a2 & 0xFF000000000000) == 0 || (result = sub_23D66BF70(), !v3))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5FCFE0@<X0>(uint64_t a1@<X8>)
{
  *(_OWORD *)a1 = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 16) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 32) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 48) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 64) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 80) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 96) = xmmword_23D66DF40;
  *(_DWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

uint64_t sub_23D5FD01C()
{
  return 0x6F74707972434B47;
}

uint64_t sub_23D5FD040@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 52);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D5FD080(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 52);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t (*sub_23D5FD0C0())()
{
  return nullsub_1;
}

uint64_t sub_23D5FD0D4()
{
  return sub_23D5FCAE8();
}

void sub_23D5FD0E8()
{
  sub_23D5FCC14();
}

uint64_t sub_23D5FD0FC()
{
  sub_23D5AE928(&qword_256C7A5F0, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D67135C);
  return sub_23D66BE98();
}

uint64_t sub_23D5FD14C@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C58, (uint64_t)qword_256C88ED8, a1);
}

uint64_t sub_23D5FD168()
{
  sub_23D5AE928(&qword_256C7A310, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D671394);
  return sub_23D66BF34();
}

uint64_t sub_23D5FD1A8()
{
  sub_23D5AE928(&qword_256C7A310, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D671394);
  return sub_23D66BF40();
}

uint64_t sub_23D5FD1F8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88EF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88EF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "invite";
  *((_QWORD *)v11 + 1) = 6;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "signature";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FD38C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FE17C(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_SignedInvite, type metadata accessor for GKCrypto_Invite, &qword_256C7A310, (uint64_t)&unk_23D671394);
}

uint64_t sub_23D5FD3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FF67C(a1, a2, a3, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_23D5FD3E4);
}

uint64_t sub_23D5FD3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_Invite(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_SignedInvite(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_256C7A600);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C7A600);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_Invite);
  sub_23D5AE928(&qword_256C7A310, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D671394);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_Invite);
}

uint64_t sub_23D5FD558@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23D5FE414(a1, type metadata accessor for GKCrypto_Invite, a2);
}

unint64_t sub_23D5FD564()
{
  return 0xD000000000000015;
}

uint64_t sub_23D5FD580()
{
  sub_23D5AE928(&qword_256C7A5F8, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D6711F4);
  return sub_23D66BE98();
}

uint64_t sub_23D5FD5D0@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C60, (uint64_t)qword_256C88EF0, a1);
}

uint64_t sub_23D5FD5EC()
{
  sub_23D5AE928(&qword_256C7A2F0, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D67122C);
  return sub_23D66BF34();
}

uint64_t sub_23D5FD62C()
{
  sub_23D5AE928(&qword_256C7A2F0, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D67122C);
  return sub_23D66BF40();
}

uint64_t sub_23D5FD680()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F08);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E460;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "response";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "nonce";
  *((_QWORD *)v13 + 1) = 5;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "groupIdHint";
  *((_QWORD *)v15 + 1) = 11;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "verificationKey";
  *(_QWORD *)(v16 + 8) = 15;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FD888()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_23D66BEB0();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          v4 = v3;
          sub_23D66BEE0();
          goto LABEL_5;
        case 2:
          sub_23D60E2BC();
          v4 = v3;
          sub_23D66BEBC();
          goto LABEL_5;
        case 3:
        case 4:
        case 5:
          v4 = v3;
          sub_23D66BED4();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5FD9AC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t result;

  if (!*(_DWORD *)v0 || (result = sub_23D66BF7C(), !v1))
  {
    if (!*(_QWORD *)(v0 + 8) || (sub_23D60E2BC(), result = sub_23D66BF58(), !v1))
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23D5FDBC4@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 16) = 1;
  *(_OWORD *)(a1 + 24) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 40) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 56) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

uint64_t sub_23D5FDC04()
{
  return 0x6F74707972434B47;
}

uint64_t (*sub_23D5FDC30())()
{
  return nullsub_1;
}

uint64_t sub_23D5FDC44()
{
  return sub_23D5FD888();
}

uint64_t sub_23D5FDC58()
{
  return sub_23D5FD9AC();
}

uint64_t sub_23D5FDC6C()
{
  sub_23D5AE928(&qword_256C7A610, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D67108C);
  return sub_23D66BE98();
}

uint64_t sub_23D5FDCBC@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C68, (uint64_t)qword_256C88F08, a1);
}

uint64_t sub_23D5FDCD8()
{
  sub_23D5AE928(&qword_256C7A2D0, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D6710C4);
  return sub_23D66BF34();
}

uint64_t sub_23D5FDD18()
{
  sub_23D5AE928(&qword_256C7A2D0, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D6710C4);
  return sub_23D66BF40();
}

uint64_t sub_23D5FDD68()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F20);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E450;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 0;
  *(_QWORD *)v7 = "UNSPECIFIED";
  *(_QWORD *)(v7 + 8) = 11;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 1;
  *(_QWORD *)v11 = "ACCEPT";
  *(_QWORD *)(v11 + 8) = 6;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 2;
  *(_QWORD *)v13 = "REJECT";
  *((_QWORD *)v13 + 1) = 6;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 3;
  *(_QWORD *)v15 = "LEAVE";
  *((_QWORD *)v15 + 1) = 5;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 4;
  *(_QWORD *)v17 = "DEMOTE";
  *((_QWORD *)v17 + 1) = 6;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 5;
  *(_QWORD *)v19 = "DESTROY";
  *((_QWORD *)v19 + 1) = 7;
  v19[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FDF98@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C70, (uint64_t)qword_256C88F20, a1);
}

uint64_t sub_23D5FDFB4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F38);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F38);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "rsvp";
  *((_QWORD *)v11 + 1) = 4;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "signature";
  *(_QWORD *)(v12 + 8) = 9;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FE148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FE17C(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_SignedRSVP, type metadata accessor for GKCrypto_RSVP, &qword_256C7A2D0, (uint64_t)&unk_23D6710C4);
}

uint64_t sub_23D5FE17C(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(_QWORD), uint64_t (*a5)(uint64_t), unint64_t *a6, uint64_t a7)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v13;
  uint64_t result;
  char v18;

  v13 = v7;
  result = sub_23D66BEB0();
  if (!v8)
  {
    while ((v18 & 1) == 0)
    {
      switch(result)
      {
        case 3:
          sub_23D66BED4();
          break;
        case 2:
          sub_23D5FF5B4(a1, v13, a2, a3, a4, a5, a6, a7);
          break;
        case 1:
          sub_23D66BEE0();
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5FE270(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FF67C(a1, a2, a3, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_23D5FE294);
}

uint64_t sub_23D5FE294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_RSVP(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_SignedRSVP(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_256C791B0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C791B0);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_RSVP);
  sub_23D5AE928(&qword_256C7A2D0, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D6710C4);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_RSVP);
}

uint64_t sub_23D5FE408@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23D5FE414(a1, type metadata accessor for GKCrypto_RSVP, a2);
}

uint64_t sub_23D5FE414@<X0>(uint64_t a1@<X0>, uint64_t (*a2)(_QWORD)@<X2>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a3 = 0;
  *(_OWORD *)(a3 + 8) = xmmword_23D66DF40;
  sub_23D66BE5C();
  v6 = a3 + *(int *)(a1 + 28);
  v7 = a2(0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v6, 1, 1, v7);
}

unint64_t sub_23D5FE484()
{
  return 0xD000000000000013;
}

uint64_t sub_23D5FE4A0()
{
  sub_23D5AE928(&qword_256C7A518, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D670F74);
  return sub_23D66BE98();
}

uint64_t sub_23D5FE4F0@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C78, (uint64_t)qword_256C88F38, a1);
}

uint64_t sub_23D5FE50C()
{
  sub_23D5AE928(&qword_256C791B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D672AAC);
  return sub_23D66BF34();
}

uint64_t sub_23D5FE54C()
{
  sub_23D5AE928(&qword_256C791B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D672AAC);
  return sub_23D66BF40();
}

uint64_t sub_23D5FE5A0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F50);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F50);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "randomizedVerificationKey";
  *((_QWORD *)v11 + 1) = 25;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "ciphertextOfKeyShare";
  *(_QWORD *)(v12 + 8) = 20;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FE734()
{
  return sub_23D5FE750();
}

uint64_t sub_23D5FE750()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

unint64_t sub_23D5FE8C4()
{
  return 0xD000000000000015;
}

uint64_t sub_23D5FE8E0()
{
  sub_23D5AE928(&qword_256C7A628, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670E0C);
  return sub_23D66BE98();
}

uint64_t sub_23D5FE930@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C80, (uint64_t)qword_256C88F50, a1);
}

uint64_t sub_23D5FE94C()
{
  sub_23D5AE928(&qword_256C7A2A0, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670E44);
  return sub_23D66BF34();
}

uint64_t sub_23D5FE98C()
{
  sub_23D5AE928(&qword_256C7A2A0, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670E44);
  return sub_23D66BF40();
}

uint64_t sub_23D5FE9DC(uint64_t a1, char *a2)
{
  return sub_23D60D09C(a1, a2, type metadata accessor for GKCrypto_RSVPResponse) & 1;
}

uint64_t sub_23D5FE9FC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F68);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F68);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "encapsulatedKey";
  *(_QWORD *)(v7 + 8) = 15;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "sealedMessage";
  *((_QWORD *)v11 + 1) = 13;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

void sub_23D5FEB4C()
{
  sub_23D5F9FC8();
}

unint64_t sub_23D5FEB68()
{
  return 0xD00000000000001ELL;
}

uint64_t sub_23D5FEB84()
{
  sub_23D5AE928(&qword_256C7A630, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670CA4);
  return sub_23D66BE98();
}

uint64_t sub_23D5FEBD4@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C88, (uint64_t)qword_256C88F68, a1);
}

uint64_t sub_23D5FEBF0()
{
  sub_23D5AE928((unint64_t *)&qword_256C7A280, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670CDC);
  return sub_23D66BF34();
}

uint64_t sub_23D5FEC30()
{
  sub_23D5AE928((unint64_t *)&qword_256C7A280, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670CDC);
  return sub_23D66BF40();
}

uint64_t sub_23D5FEC80(uint64_t *a1, uint64_t a2)
{
  return sub_23D60E130(a1, a2, type metadata accessor for GKCrypto_HPKEOneShotCipherText) & 1;
}

uint64_t sub_23D5FECA0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F80);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F80);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E450;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "ciphertext";
  *(_QWORD *)(v11 + 8) = 10;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "signature";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "keyHint";
  *((_QWORD *)v15 + 1) = 7;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "seedVersion";
  *((_QWORD *)v17 + 1) = 11;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "role";
  *((_QWORD *)v19 + 1) = 4;
  v19[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FEED4()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_23D66BEB0();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 5:
          v4 = v3;
          sub_23D66BEE0();
          goto LABEL_5;
        case 2:
        case 3:
        case 4:
          v4 = v3;
          sub_23D66BED4();
          goto LABEL_5;
        case 6:
          sub_23D60E278();
          v4 = v3;
          sub_23D66BEBC();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D5FF010()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5FF248@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 24) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 40) = xmmword_23D66DF40;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  return sub_23D66BE5C();
}

unint64_t sub_23D5FF28C()
{
  return 0xD000000000000011;
}

uint64_t (*sub_23D5FF2B0())()
{
  return nullsub_1;
}

uint64_t sub_23D5FF2C4()
{
  return sub_23D5FEED4();
}

uint64_t sub_23D5FF2D8()
{
  return sub_23D5FF010();
}

uint64_t sub_23D5FF2EC()
{
  sub_23D5AE928(&qword_256C7A638, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B3C);
  return sub_23D66BE98();
}

uint64_t sub_23D5FF33C@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C90, (uint64_t)qword_256C88F80, a1);
}

uint64_t sub_23D5FF358()
{
  sub_23D5AE928(&qword_256C79988, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B74);
  return sub_23D66BF34();
}

uint64_t sub_23D5FF398()
{
  sub_23D5AE928(&qword_256C79988, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B74);
  return sub_23D66BF40();
}

uint64_t sub_23D5FF3EC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88F98);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88F98);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "context";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "ciphertext";
  *(_QWORD *)(v12 + 8) = 10;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FF580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FE17C(a1, a2, a3, (void (*)(_QWORD))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, &qword_256C7A228, (uint64_t)&unk_23D6708A4);
}

uint64_t sub_23D5FF5B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(_QWORD), uint64_t (*a6)(uint64_t), unint64_t *a7, uint64_t a8)
{
  a5(0);
  a6(0);
  sub_23D5AE928(a7, a6, a8);
  return sub_23D66BEF8();
}

uint64_t sub_23D5FF658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D5FF67C(a1, a2, a3, (uint64_t (*)(_DWORD *, uint64_t, uint64_t, uint64_t))sub_23D5FF7A8);
}

uint64_t sub_23D5FF67C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_DWORD *, uint64_t, uint64_t, uint64_t))
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t result;

  if (!*v4 || (result = sub_23D66BF7C(), !v5))
  {
    result = a4(v4, a1, a2, a3);
    if (!v5)
      __asm { BR              X10 }
  }
  return result;
}

uint64_t sub_23D5FF7A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD v14[2];

  v14[1] = a4;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext(0);
  sub_23D5AEF48(a1 + *(int *)(v12 + 28), (uint64_t)v7, &qword_256C7A648);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
    return sub_23D5AEF8C((uint64_t)v7, &qword_256C7A648);
  sub_23D5E7F64((uint64_t)v7, (uint64_t)v11, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_23D5AE928(&qword_256C7A228, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D6708A4);
  sub_23D66BF94();
  return sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

uint64_t sub_23D5FF91C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_23D5FE414(a1, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, a2);
}

unint64_t sub_23D5FF928()
{
  return 0xD000000000000025;
}

uint64_t sub_23D5FF944()
{
  sub_23D5AE928(&qword_256C7A640, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D6709D4);
  return sub_23D66BE98();
}

uint64_t sub_23D5FF994@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78C98, (uint64_t)qword_256C88F98, a1);
}

uint64_t sub_23D5FF9B0()
{
  sub_23D5AE928(&qword_256C7A248, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D670A0C);
  return sub_23D66BF34();
}

uint64_t sub_23D5FF9F0()
{
  sub_23D5AE928(&qword_256C7A248, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D670A0C);
  return sub_23D66BF40();
}

uint64_t sub_23D5FFA44()
{
  uint64_t result;

  result = sub_23D66C3D8();
  qword_256C88FB0 = 0xD000000000000025;
  *(_QWORD *)algn_256C88FB8 = 0x800000023D678E60;
  return result;
}

uint64_t sub_23D5FFAAC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88FC0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88FC0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "groupVersion";
  *(_QWORD *)(v7 + 8) = 12;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "keyHash";
  *((_QWORD *)v11 + 1) = 7;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "role";
  *(_QWORD *)(v12 + 8) = 4;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D5FFC40()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_23D66BEB0();
  v3 = v0;
  if (!v0)
  {
    while (1)
    {
      if ((v2 & 1) != 0)
        return result;
      if (result == 3)
        break;
      if (result == 2)
      {
        v4 = v3;
        sub_23D66BED4();
        goto LABEL_5;
      }
      if (result == 1)
      {
        v4 = v3;
        sub_23D66BEE0();
        goto LABEL_5;
      }
LABEL_6:
      result = sub_23D66BEB0();
    }
    sub_23D60E278();
    v4 = v3;
    sub_23D66BEBC();
LABEL_5:
    v3 = v4;
    goto LABEL_6;
  }
  return result;
}

uint64_t sub_23D5FFD38()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D5FFE88@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  return sub_23D66BE5C();
}

uint64_t sub_23D5FFEC0(uint64_t a1, uint64_t a2)
{
  return sub_23D5F7FBC(a1, a2, &qword_256C78CA0, &qword_256C88FB0);
}

uint64_t sub_23D5FFEE0()
{
  return sub_23D5FFC40();
}

uint64_t sub_23D5FFEF4()
{
  return sub_23D5FFD38();
}

uint64_t sub_23D5FFF08()
{
  sub_23D5AE928(&qword_256C7A658, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D67086C);
  return sub_23D66BE98();
}

uint64_t sub_23D5FFF58@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CA8, (uint64_t)qword_256C88FC0, a1);
}

uint64_t sub_23D5FFF74()
{
  sub_23D5AE928(&qword_256C7A228, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D6708A4);
  return sub_23D66BF34();
}

uint64_t sub_23D5FFFB4()
{
  sub_23D5AE928(&qword_256C7A228, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D6708A4);
  return sub_23D66BF40();
}

uint64_t sub_23D600004()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88FD8);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88FD8);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66DF10;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "seed";
  *(_QWORD *)(v7 + 8) = 4;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "diversifier";
  *((_QWORD *)v11 + 1) = 11;
  v11[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D600154()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 2 || result == 1)
        sub_23D66BED4();
      result = sub_23D66BEB0();
    }
  }
  return result;
}

void sub_23D6001E4()
{
  sub_23D5F9FC8();
}

unint64_t sub_23D600200()
{
  return 0xD000000000000012;
}

uint64_t sub_23D60021C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 24);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D60025C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 24);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23D60029C()
{
  sub_23D5AE928(&qword_256C7A660, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D670704);
  return sub_23D66BE98();
}

uint64_t sub_23D6002EC@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CB0, (uint64_t)qword_256C88FD8, a1);
}

uint64_t sub_23D600308()
{
  sub_23D5AE928(&qword_256C7A208, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D67073C);
  return sub_23D66BF34();
}

uint64_t sub_23D600348()
{
  sub_23D5AE928(&qword_256C7A208, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D67073C);
  return sub_23D66BF40();
}

uint64_t sub_23D600398(uint64_t *a1, uint64_t a2)
{
  return sub_23D60E130(a1, a2, type metadata accessor for GKCrypto_AdminSeed) & 1;
}

uint64_t sub_23D6003B8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  _QWORD *v16;
  char *v17;
  _QWORD *v18;
  char *v19;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C88FF0);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C88FF0);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E450;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "nonce";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "role";
  *((_QWORD *)v13 + 1) = 4;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "lastKnowSeedVersion";
  *((_QWORD *)v15 + 1) = 19;
  v15[16] = 2;
  v10();
  v16 = (_QWORD *)(v6 + 4 * v3);
  v17 = (char *)v16 + *(int *)(v1 + 48);
  *v16 = 5;
  *(_QWORD *)v17 = "verificationKey";
  *((_QWORD *)v17 + 1) = 15;
  v17[16] = 2;
  v10();
  v18 = (_QWORD *)(v6 + 5 * v3);
  v19 = (char *)v18 + *(int *)(v1 + 48);
  *v18 = 6;
  *(_QWORD *)v19 = "signature";
  *((_QWORD *)v19 + 1) = 9;
  v19[16] = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D6005F0()
{
  uint64_t v0;
  uint64_t result;
  char v2;
  uint64_t v3;
  uint64_t v4;

  result = sub_23D66BEB0();
  v3 = v0;
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
        case 4:
          v4 = v3;
          sub_23D66BEE0();
          goto LABEL_5;
        case 2:
        case 5:
        case 6:
          v4 = v3;
          sub_23D66BED4();
          goto LABEL_5;
        case 3:
          sub_23D60E278();
          v4 = v3;
          sub_23D66BEBC();
LABEL_5:
          v3 = v4;
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D60072C()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

uint64_t sub_23D600964@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  *(_QWORD *)(a1 + 24) = 0;
  *(_BYTE *)(a1 + 32) = 1;
  *(_DWORD *)(a1 + 36) = 0;
  *(_OWORD *)(a1 + 40) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 56) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D6009A8()
{
  return 0xD000000000000018;
}

uint64_t sub_23D6009C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 40);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D600A04(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 40);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23D600A44()
{
  return sub_23D6005F0();
}

uint64_t sub_23D600A58()
{
  return sub_23D60072C();
}

uint64_t sub_23D600A6C()
{
  sub_23D5AE928(&qword_256C7A668, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D67059C);
  return sub_23D66BE98();
}

uint64_t sub_23D600ABC@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CB8, (uint64_t)qword_256C88FF0, a1);
}

uint64_t sub_23D600AD8()
{
  sub_23D5AE928(&qword_256C79A58, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D6705D4);
  return sub_23D66BF34();
}

uint64_t sub_23D600B18()
{
  sub_23D5AE928(&qword_256C79A58, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D6705D4);
  return sub_23D66BF40();
}

uint64_t sub_23D600B6C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C89008);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C89008);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E460;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "nonce";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "groupID";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "groupMemberVerificationKey";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "signature";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D600D70()
{
  return sub_23D601954();
}

uint64_t sub_23D600D84()
{
  return sub_23D6013E4();
}

unint64_t sub_23D600DA4()
{
  return 0xD000000000000019;
}

uint64_t sub_23D600DC0()
{
  sub_23D5AE928(&qword_256C7A510, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D6704AC);
  return sub_23D66BE98();
}

uint64_t sub_23D600E10@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CC0, (uint64_t)qword_256C89008, a1);
}

uint64_t sub_23D600E2C()
{
  sub_23D5AE928(&qword_256C791A8, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D672B24);
  return sub_23D66BF34();
}

uint64_t sub_23D600E6C()
{
  sub_23D5AE928(&qword_256C791A8, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D672B24);
  return sub_23D66BF40();
}

uint64_t sub_23D600EBC(uint64_t a1, char *a2)
{
  return sub_23D60DFB8(a1, a2, type metadata accessor for GKCrypto_RSVPQueueRequest) & 1;
}

uint64_t sub_23D600EDC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C89020);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C89020);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "signingKey";
  *((_QWORD *)v11 + 1) = 10;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "decryptionKey";
  *(_QWORD *)(v12 + 8) = 13;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D601070()
{
  return sub_23D5FE750();
}

unint64_t sub_23D60108C()
{
  return 0xD000000000000019;
}

uint64_t sub_23D6010A8()
{
  sub_23D5AE928(&qword_256C7A670, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D670344);
  return sub_23D66BE98();
}

uint64_t sub_23D6010F8@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CC8, (uint64_t)qword_256C89020, a1);
}

uint64_t sub_23D601114()
{
  sub_23D5AE928(&qword_256C7A1C0, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D67037C);
  return sub_23D66BF34();
}

uint64_t sub_23D601154()
{
  sub_23D5AE928(&qword_256C7A1C0, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D67037C);
  return sub_23D66BF40();
}

uint64_t sub_23D6011A4(uint64_t a1, char *a2)
{
  return sub_23D60D09C(a1, a2, type metadata accessor for GKCrypto_KeyChainUserKeys) & 1;
}

uint64_t sub_23D6011C4()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C89038);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C89038);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E460;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "keyShare";
  *(_QWORD *)(v11 + 8) = 8;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "keyOffset";
  *((_QWORD *)v13 + 1) = 9;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "decryptionKeyHash";
  *((_QWORD *)v15 + 1) = 17;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "signingKeyHash";
  *(_QWORD *)(v16 + 8) = 14;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D6013C8()
{
  return sub_23D6013E4();
}

uint64_t sub_23D6013E4()
{
  _DWORD *v0;
  uint64_t v1;
  uint64_t result;

  if (!*v0 || (result = sub_23D66BF7C(), !v1))
    __asm { BR              X10 }
  return result;
}

unint64_t sub_23D601618()
{
  return 0xD000000000000018;
}

uint64_t sub_23D601634()
{
  sub_23D5AE928(&qword_256C7A678, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D6701DC);
  return sub_23D66BE98();
}

uint64_t sub_23D601684@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CD0, (uint64_t)qword_256C89038, a1);
}

uint64_t sub_23D6016A0()
{
  sub_23D5AE928((unint64_t *)&qword_256C7A1A0, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D670214);
  return sub_23D66BF34();
}

uint64_t sub_23D6016E0()
{
  sub_23D5AE928((unint64_t *)&qword_256C7A1A0, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D670214);
  return sub_23D66BF40();
}

uint64_t sub_23D601730(uint64_t a1, char *a2)
{
  return sub_23D60DFB8(a1, a2, type metadata accessor for GKCrypto_GroupAccessInfo) & 1;
}

uint64_t sub_23D601750()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C89050);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C89050);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66E460;
  v6 = v5 + v4;
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *(_QWORD *)(v5 + v4) = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + v3) = 2;
  *(_QWORD *)v11 = "nonce";
  *(_QWORD *)(v11 + 8) = 5;
  *(_BYTE *)(v11 + 16) = 2;
  v10();
  v12 = (_QWORD *)(v6 + 2 * v3);
  v13 = (char *)v12 + *(int *)(v1 + 48);
  *v12 = 3;
  *(_QWORD *)v13 = "groupID";
  *((_QWORD *)v13 + 1) = 7;
  v13[16] = 2;
  v10();
  v14 = (_QWORD *)(v6 + 3 * v3);
  v15 = (char *)v14 + *(int *)(v1 + 48);
  *v14 = 4;
  *(_QWORD *)v15 = "diversifiedVerificationKey";
  *((_QWORD *)v15 + 1) = 26;
  v15[16] = 2;
  v10();
  v16 = v6 + 4 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)(v6 + 4 * v3) = 5;
  *(_QWORD *)v16 = "signature";
  *(_QWORD *)(v16 + 8) = 9;
  *(_BYTE *)(v16 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D601954()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      switch(result)
      {
        case 1:
          sub_23D66BEE0();
          break;
        case 2:
        case 3:
        case 4:
        case 5:
          sub_23D66BED4();
          break;
        default:
          break;
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D601A3C()
{
  return sub_23D6013E4();
}

uint64_t sub_23D601A58@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 24) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 40) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 56) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D601A90()
{
  return 0xD000000000000019;
}

uint64_t sub_23D601AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 36);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D601AEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 36);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23D601B2C()
{
  sub_23D5AE928(&qword_256C7A500, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D6700EC);
  return sub_23D66BE98();
}

uint64_t sub_23D601B7C@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CD8, (uint64_t)qword_256C89050, a1);
}

uint64_t sub_23D601B98()
{
  sub_23D5AE928(&qword_256C790F8, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D672C14);
  return sub_23D66BF34();
}

uint64_t sub_23D601BD8()
{
  sub_23D5AE928(&qword_256C790F8, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D672C14);
  return sub_23D66BF40();
}

uint64_t sub_23D601C28(uint64_t a1, char *a2)
{
  return sub_23D60DFB8(a1, a2, type metadata accessor for GKCrypto_GroupBlobRequest) & 1;
}

uint64_t sub_23D601C48()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void (*v10)(void);
  char *v11;
  uint64_t v12;

  v0 = sub_23D66BFB8();
  __swift_allocate_value_buffer(v0, qword_256C89068);
  __swift_project_value_buffer(v0, (uint64_t)qword_256C89068);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A520);
  v1 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A528);
  v2 = *(_QWORD *)(v1 - 8);
  v3 = *(_QWORD *)(v2 + 72);
  v4 = (*(unsigned __int8 *)(v2 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_23D66FC40;
  v6 = (_QWORD *)(v5 + v4);
  v7 = v5 + v4 + *(int *)(v1 + 48);
  *v6 = 1;
  *(_QWORD *)v7 = "version";
  *(_QWORD *)(v7 + 8) = 7;
  *(_BYTE *)(v7 + 16) = 2;
  v8 = *MEMORY[0x24BE5C318];
  v9 = sub_23D66BFA0();
  v10 = *(void (**)(void))(*(_QWORD *)(v9 - 8) + 104);
  ((void (*)(unint64_t, uint64_t, uint64_t))v10)(v7, v8, v9);
  v11 = (char *)v6 + v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + v3) = 2;
  *(_QWORD *)v11 = "keyCheck";
  *((_QWORD *)v11 + 1) = 8;
  v11[16] = 2;
  v10();
  v12 = (uint64_t)v6 + 2 * v3 + *(int *)(v1 + 48);
  *(_QWORD *)((char *)v6 + 2 * v3) = 3;
  *(_QWORD *)v12 = "EncryptedInvitation";
  *(_QWORD *)(v12 + 8) = 19;
  *(_BYTE *)(v12 + 16) = 2;
  v10();
  return sub_23D66BFAC();
}

uint64_t sub_23D601DDC()
{
  uint64_t v0;
  uint64_t result;
  char v2;

  result = sub_23D66BEB0();
  if (!v0)
  {
    while ((v2 & 1) == 0)
    {
      if (result == 3 || result == 2)
      {
        sub_23D66BED4();
      }
      else if (result == 1)
      {
        sub_23D66BEE0();
      }
      result = sub_23D66BEB0();
    }
  }
  return result;
}

uint64_t sub_23D601E90()
{
  return sub_23D5FE750();
}

uint64_t sub_23D601EAC@<X0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 8) = xmmword_23D66DF40;
  *(_OWORD *)(a1 + 24) = xmmword_23D66DF40;
  return sub_23D66BE5C();
}

unint64_t sub_23D601EDC()
{
  return 0xD00000000000001CLL;
}

uint64_t sub_23D601EF8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a1 + 28);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 16))(a2, v4, v5);
}

uint64_t sub_23D601F38(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;

  v4 = v2 + *(int *)(a2 + 28);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 40))(v4, a1, v5);
}

uint64_t sub_23D601F78()
{
  sub_23D5AE928(qword_256C7A680, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FF84);
  return sub_23D66BE98();
}

uint64_t sub_23D601FC8@<X0>(uint64_t a1@<X8>)
{
  return sub_23D5F6BF8(&qword_256C78CE0, (uint64_t)qword_256C89068, a1);
}

uint64_t sub_23D601FE4()
{
  sub_23D5AE928(&qword_256C7A170, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FFBC);
  return sub_23D66BF34();
}

uint64_t sub_23D602024()
{
  sub_23D66C8E8();
  sub_23D66C36C();
  return sub_23D66C90C();
}

uint64_t sub_23D602078()
{
  sub_23D5AE928(&qword_256C7A170, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FFBC);
  return sub_23D66BF40();
}

uint64_t sub_23D6020C8()
{
  sub_23D66C8E8();
  sub_23D66C36C();
  return sub_23D66C90C();
}

uint64_t sub_23D602118(uint64_t a1, char *a2)
{
  return sub_23D60D09C(a1, a2, type metadata accessor for GKCrypto_EncryptedInvitation) & 1;
}

uint64_t sub_23D602138()
{
  return sub_23D5AE928(&qword_256C7A168, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FECC);
}

uint64_t type metadata accessor for GKCrypto_EncryptedInvitation(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B330);
}

uint64_t sub_23D602178()
{
  return sub_23D5AE928(&qword_256C7A170, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FFBC);
}

uint64_t sub_23D6021A4()
{
  return sub_23D5AE928(&qword_256C7A178, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FEF4);
}

uint64_t sub_23D6021D0()
{
  return sub_23D5AE928(&qword_256C7A180, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FF34);
}

uint64_t sub_23D6021FC()
{
  return sub_23D5AE928(&qword_256C7A188, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D670034);
}

uint64_t sub_23D602228()
{
  return sub_23D5AE928(&qword_256C790F8, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D672C14);
}

uint64_t sub_23D602254()
{
  return sub_23D5AE928(&qword_256C7A190, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D67005C);
}

uint64_t sub_23D602280()
{
  return sub_23D5AE928(&qword_256C7A198, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D670124);
}

uint64_t type metadata accessor for GKCrypto_GroupAccessInfo(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B3C8);
}

uint64_t sub_23D6022C0()
{
  return sub_23D5AE928((unint64_t *)&qword_256C7A1A0, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D670214);
}

uint64_t sub_23D6022EC()
{
  return sub_23D5AE928(&qword_256C7A1A8, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D67014C);
}

uint64_t sub_23D602318()
{
  return sub_23D5AE928(&qword_256C7A1B0, type metadata accessor for GKCrypto_GroupAccessInfo, (uint64_t)&unk_23D67018C);
}

uint64_t sub_23D602344()
{
  return sub_23D5AE928(&qword_256C7A1B8, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D67028C);
}

uint64_t type metadata accessor for GKCrypto_KeyChainUserKeys(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B298);
}

uint64_t sub_23D602384()
{
  return sub_23D5AE928(&qword_256C7A1C0, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D67037C);
}

uint64_t sub_23D6023B0()
{
  return sub_23D5AE928(&qword_256C7A1C8, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D6702B4);
}

uint64_t sub_23D6023DC()
{
  return sub_23D5AE928(&qword_256C7A1D0, type metadata accessor for GKCrypto_KeyChainUserKeys, (uint64_t)&unk_23D6702F4);
}

uint64_t sub_23D602408()
{
  return sub_23D5AE928(&qword_256C7A1D8, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D6703F4);
}

uint64_t sub_23D602434()
{
  return sub_23D5AE928(&qword_256C791A8, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D672B24);
}

uint64_t sub_23D602460()
{
  return sub_23D5AE928(&qword_256C7A1E0, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D67041C);
}

uint64_t sub_23D60248C()
{
  return sub_23D5AE928(&qword_256C7A1E8, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D6704E4);
}

uint64_t type metadata accessor for GKCrypto_SeedBlobRequest(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B1F0);
}

uint64_t sub_23D6024CC()
{
  return sub_23D5AE928(&qword_256C79A58, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D6705D4);
}

uint64_t sub_23D6024F8()
{
  return sub_23D5AE928(&qword_256C7A1F0, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D67050C);
}

uint64_t sub_23D602524()
{
  return sub_23D5AE928(&qword_256C7A1F8, type metadata accessor for GKCrypto_SeedBlobRequest, (uint64_t)&unk_23D67054C);
}

uint64_t sub_23D602550()
{
  return sub_23D5AE928(&qword_256C7A200, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D67064C);
}

uint64_t type metadata accessor for GKCrypto_AdminSeed(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B158);
}

uint64_t sub_23D602590()
{
  return sub_23D5AE928(&qword_256C7A208, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D67073C);
}

uint64_t sub_23D6025BC()
{
  return sub_23D5AE928(&qword_256C7A210, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D670674);
}

uint64_t sub_23D6025E8()
{
  return sub_23D5AE928(&qword_256C7A218, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D6706B4);
}

uint64_t sub_23D602614()
{
  return sub_23D5AE928(&qword_256C7A220, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D6707B4);
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B0C0);
}

uint64_t sub_23D602654()
{
  return sub_23D5AE928(&qword_256C7A228, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D6708A4);
}

uint64_t sub_23D602680()
{
  return sub_23D5AE928(&qword_256C7A230, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D6707DC);
}

uint64_t sub_23D6026AC()
{
  return sub_23D5AE928(&qword_256C7A238, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context, (uint64_t)&unk_23D67081C);
}

uint64_t sub_23D6026D8()
{
  return sub_23D5AE928(&qword_256C7A240, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D67091C);
}

uint64_t type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7B020);
}

uint64_t sub_23D602718()
{
  return sub_23D5AE928(&qword_256C7A248, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D670A0C);
}

uint64_t sub_23D602744()
{
  return sub_23D5AE928(&qword_256C7A250, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D670944);
}

uint64_t sub_23D602770()
{
  return sub_23D5AE928(&qword_256C7A258, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext, (uint64_t)&unk_23D670984);
}

uint64_t sub_23D60279C()
{
  return sub_23D5AE928(&qword_256C7A260, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670A84);
}

uint64_t type metadata accessor for GKCrypto_SeedBlob(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7AF78);
}

uint64_t sub_23D6027DC()
{
  return sub_23D5AE928(&qword_256C79988, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B74);
}

uint64_t sub_23D602808()
{
  return sub_23D5AE928(&qword_256C7A268, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670AAC);
}

uint64_t sub_23D602834()
{
  return sub_23D5AE928(&qword_256C7A270, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670AEC);
}

uint64_t sub_23D602860()
{
  return sub_23D5AE928(&qword_256C7A278, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670BEC);
}

uint64_t type metadata accessor for GKCrypto_HPKEOneShotCipherText(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7AEE0);
}

uint64_t sub_23D6028A0()
{
  return sub_23D5AE928((unint64_t *)&qword_256C7A280, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670CDC);
}

uint64_t sub_23D6028CC()
{
  return sub_23D5AE928(&qword_256C7A288, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670C14);
}

uint64_t sub_23D6028F8()
{
  return sub_23D5AE928(&qword_256C7A290, type metadata accessor for GKCrypto_HPKEOneShotCipherText, (uint64_t)&unk_23D670C54);
}

uint64_t sub_23D602924()
{
  return sub_23D5AE928(&qword_256C7A298, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670D54);
}

uint64_t type metadata accessor for GKCrypto_RSVPResponse(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7AE48);
}

uint64_t sub_23D602964()
{
  return sub_23D5AE928(&qword_256C7A2A0, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670E44);
}

uint64_t sub_23D602990()
{
  return sub_23D5AE928(&qword_256C7A2A8, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670D7C);
}

uint64_t sub_23D6029BC()
{
  return sub_23D5AE928(&qword_256C7A2B0, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670DBC);
}

uint64_t sub_23D6029E8()
{
  return sub_23D5AE928(&qword_256C7A2B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D670EBC);
}

uint64_t sub_23D602A14()
{
  return sub_23D5AE928(&qword_256C791B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D672AAC);
}

uint64_t sub_23D602A40()
{
  return sub_23D5AE928(&qword_256C7A2C0, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D670EE4);
}

uint64_t sub_23D602A6C()
{
  return sub_23D5AE928(&qword_256C7A2C8, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D670FD4);
}

uint64_t sub_23D602A98()
{
  return sub_23D5AE928(&qword_256C7A2D0, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D6710C4);
}

uint64_t sub_23D602AC4()
{
  return sub_23D5AE928(&qword_256C7A2D8, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D670FFC);
}

uint64_t sub_23D602AF0()
{
  return sub_23D5AE928(&qword_256C7A2E0, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D67103C);
}

uint64_t sub_23D602B1C()
{
  return sub_23D5AE928(&qword_256C7A2E8, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D67113C);
}

uint64_t type metadata accessor for GKCrypto_SignedInvite(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7ADA8);
}

uint64_t sub_23D602B5C()
{
  return sub_23D5AE928(&qword_256C7A2F0, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D67122C);
}

uint64_t sub_23D602B88()
{
  return sub_23D5AE928(&qword_256C7A2F8, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D671164);
}

uint64_t sub_23D602BB4()
{
  return sub_23D5AE928(&qword_256C7A300, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D6711A4);
}

uint64_t sub_23D602BE0()
{
  return sub_23D5AE928(&qword_256C7A308, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D6712A4);
}

uint64_t type metadata accessor for GKCrypto_Invite(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7ACF8);
}

uint64_t sub_23D602C20()
{
  return sub_23D5AE928(&qword_256C7A310, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D671394);
}

uint64_t sub_23D602C4C()
{
  return sub_23D5AE928(&qword_256C7A318, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D6712CC);
}

uint64_t sub_23D602C78()
{
  return sub_23D5AE928(&qword_256C7A320, type metadata accessor for GKCrypto_Invite, (uint64_t)&unk_23D67130C);
}

uint64_t sub_23D602CA4()
{
  return sub_23D5AE928(&qword_256C7A328, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D67140C);
}

uint64_t type metadata accessor for GKCrypto_AdminPlainText(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7AC58);
}

uint64_t sub_23D602CE4()
{
  return sub_23D5AE928(&qword_256C79A18, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D6714FC);
}

uint64_t sub_23D602D10()
{
  return sub_23D5AE928(&qword_256C7A330, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D671434);
}

uint64_t sub_23D602D3C()
{
  return sub_23D5AE928(&qword_256C7A338, type metadata accessor for GKCrypto_AdminPlainText, (uint64_t)&unk_23D671474);
}

uint64_t sub_23D602D68()
{
  return sub_23D5AE928(&qword_256C7A340, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D671574);
}

uint64_t type metadata accessor for GKCrypto_AdminMetaData(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7ABC8);
}

uint64_t sub_23D602DA8()
{
  return sub_23D5AE928(&qword_256C79A10, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D671664);
}

uint64_t sub_23D602DD4()
{
  return sub_23D5AE928(&qword_256C7A348, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D67159C);
}

uint64_t sub_23D602E00()
{
  return sub_23D5AE928(&qword_256C7A350, type metadata accessor for GKCrypto_AdminMetaData, (uint64_t)&unk_23D6715DC);
}

uint64_t sub_23D602E2C()
{
  return sub_23D5AE928(&qword_256C7A358, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D6716DC);
}

uint64_t type metadata accessor for GKCrypto_GroupAEDataToEncrypt(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7AB30);
}

uint64_t sub_23D602E6C()
{
  return sub_23D5AE928(&qword_256C799B8, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D6717CC);
}

uint64_t sub_23D602E98()
{
  return sub_23D5AE928(&qword_256C7A360, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D671704);
}

uint64_t sub_23D602EC4()
{
  return sub_23D5AE928(&qword_256C7A368, type metadata accessor for GKCrypto_GroupAEDataToEncrypt, (uint64_t)&unk_23D671744);
}

uint64_t sub_23D602EF0()
{
  return sub_23D5AE928(&qword_256C7A370, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D671844);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7AA90);
}

uint64_t sub_23D602F30()
{
  return sub_23D5AE928(&qword_256C799A8, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D671934);
}

uint64_t sub_23D602F5C()
{
  return sub_23D5AE928(&qword_256C7A378, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D67186C);
}

uint64_t sub_23D602F88()
{
  return sub_23D5AE928(&qword_256C7A380, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData, (uint64_t)&unk_23D6718AC);
}

uint64_t sub_23D602FB4()
{
  return sub_23D5AE928(&qword_256C7A388, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D6719AC);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign.User(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A9F0);
}

uint64_t sub_23D602FF4()
{
  return sub_23D5AE928(&qword_256C799C0, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A9C);
}

uint64_t sub_23D603020()
{
  return sub_23D5AE928(&qword_256C7A390, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D6719D4);
}

uint64_t sub_23D60304C()
{
  return sub_23D5AE928(&qword_256C7A398, type metadata accessor for GKCrypto_GroupAETextToSign.User, (uint64_t)&unk_23D671A14);
}

uint64_t sub_23D603078()
{
  return sub_23D5AE928(&qword_256C7A3A0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671B14);
}

uint64_t type metadata accessor for GKCrypto_GroupAETextToSign(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7A948);
}

uint64_t sub_23D6030B8()
{
  return sub_23D5AE928(&qword_256C799B0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671C04);
}

uint64_t sub_23D6030E4()
{
  return sub_23D5AE928(&qword_256C7A3A8, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671B3C);
}

uint64_t sub_23D603110()
{
  return sub_23D5AE928(&qword_256C7A3B0, type metadata accessor for GKCrypto_GroupAETextToSign, (uint64_t)&unk_23D671B7C);
}

uint64_t sub_23D60313C()
{
  return sub_23D5AE928(&qword_256C7A3B8, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671C7C);
}

uint64_t type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B468);
}

uint64_t sub_23D60317C()
{
  return sub_23D5AE928(&qword_256C7A3C0, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671D6C);
}

uint64_t sub_23D6031A8()
{
  return sub_23D5AE928(&qword_256C7A3C8, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671CA4);
}

uint64_t sub_23D6031D4()
{
  return sub_23D5AE928(&qword_256C7A3D0, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair, (uint64_t)&unk_23D671CE4);
}

uint64_t sub_23D603200()
{
  return sub_23D5AE928(&qword_256C7A3D8, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D671DE4);
}

uint64_t sub_23D60322C()
{
  return sub_23D5AE928((unint64_t *)&qword_256C79138, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D672B9C);
}

uint64_t sub_23D603258()
{
  return sub_23D5AE928(&qword_256C7A3E0, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D671E0C);
}

uint64_t sub_23D603284()
{
  return sub_23D5AE928(&qword_256C7A3E8, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671ED4);
}

uint64_t type metadata accessor for GKCrypto_VersionedSeed(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A8B0);
}

uint64_t sub_23D6032C4()
{
  return sub_23D5AE928(&qword_256C799C8, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671FC4);
}

uint64_t sub_23D6032F0()
{
  return sub_23D5AE928(&qword_256C7A3F0, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671EFC);
}

uint64_t sub_23D60331C()
{
  return sub_23D5AE928(&qword_256C7A3F8, type metadata accessor for GKCrypto_VersionedSeed, (uint64_t)&unk_23D671F3C);
}

uint64_t sub_23D603348()
{
  return sub_23D5AE928(&qword_256C7A400, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D67203C);
}

uint64_t type metadata accessor for GKCrypto_AdminGroupBlob(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A818);
}

uint64_t sub_23D603388()
{
  return sub_23D5AE928(&qword_256C79A20, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D67212C);
}

uint64_t sub_23D6033B4()
{
  return sub_23D5AE928(&qword_256C7A408, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D672064);
}

uint64_t sub_23D6033E0()
{
  return sub_23D5AE928(&qword_256C7A410, type metadata accessor for GKCrypto_AdminGroupBlob, (uint64_t)&unk_23D6720A4);
}

uint64_t sub_23D60340C()
{
  return sub_23D5AE928(&qword_256C7A418, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D6721A4);
}

uint64_t sub_23D603438()
{
  return sub_23D5AE928(&qword_256C7A420, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D672294);
}

uint64_t sub_23D603464()
{
  return sub_23D5AE928(&qword_256C7A428, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D6721CC);
}

uint64_t sub_23D603490()
{
  return sub_23D5AE928(&qword_256C7A430, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures, (uint64_t)&unk_23D67220C);
}

uint64_t sub_23D6034BC()
{
  return sub_23D5AE928(&qword_256C7A438, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D67230C);
}

uint64_t sub_23D6034E8()
{
  return sub_23D5AE928(&qword_256C79AB0, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D6723FC);
}

uint64_t sub_23D603514()
{
  return sub_23D5AE928(&qword_256C7A440, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D672334);
}

uint64_t sub_23D603540()
{
  return sub_23D5AE928(&qword_256C7A448, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys, (uint64_t)&unk_23D672374);
}

uint64_t sub_23D60356C()
{
  return sub_23D5AE928(&qword_256C7A450, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D672474);
}

uint64_t sub_23D603598()
{
  return sub_23D5AE928(&qword_256C79AB8, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D672564);
}

uint64_t sub_23D6035C4()
{
  return sub_23D5AE928(&qword_256C7A458, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D67249C);
}

uint64_t sub_23D6035F0()
{
  return sub_23D5AE928(&qword_256C7A460, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys, (uint64_t)&unk_23D6724DC);
}

uint64_t sub_23D60361C()
{
  return sub_23D5AE928(&qword_256C7A468, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6725DC);
}

uint64_t sub_23D603648()
{
  return sub_23D5AE928(&qword_256C79A80, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D6726CC);
}

uint64_t sub_23D603674()
{
  return sub_23D5AE928(&qword_256C7A470, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D672604);
}

uint64_t sub_23D6036A0()
{
  return sub_23D5AE928(&qword_256C7A478, type metadata accessor for GKCrypto_GroupBlob, (uint64_t)&unk_23D672644);
}

uint64_t sub_23D6036CC()
{
  return sub_23D5AE928(&qword_256C7A480, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D672744);
}

uint64_t type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A778);
}

uint64_t sub_23D60370C()
{
  return sub_23D5AE928(&qword_256C7A488, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D672834);
}

uint64_t sub_23D603738()
{
  return sub_23D5AE928(&qword_256C7A490, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D67276C);
}

uint64_t sub_23D603764()
{
  return sub_23D5AE928(&qword_256C7A498, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag, (uint64_t)&unk_23D6727AC);
}

uint64_t sub_23D603790()
{
  return sub_23D5AE928(&qword_256C7A4A0, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D6728AC);
}

uint64_t type metadata accessor for GKCrypto_GroupHandle(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7A6E0);
}

uint64_t sub_23D6037D0()
{
  return sub_23D5AE928(&qword_256C7A4A8, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D67299C);
}

uint64_t sub_23D6037FC()
{
  return sub_23D5AE928(&qword_256C7A4B0, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D6728D4);
}

uint64_t sub_23D603828()
{
  return sub_23D5AE928(&qword_256C7A4B8, type metadata accessor for GKCrypto_GroupHandle, (uint64_t)&unk_23D672914);
}

uint64_t sub_23D603854()
{
  return sub_23D60389C(&qword_256C7A4C0, &qword_256C7A4C8);
}

uint64_t sub_23D603878()
{
  return sub_23D60389C(&qword_256C7A4D0, &qword_256C7A4D8);
}

uint64_t sub_23D60389C(unint64_t *a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = __swift_instantiateConcreteTypeFromMangledNameAbstract(a2);
    result = MEMORY[0x242636790](MEMORY[0x24BEE12E0], v4);
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_23D6038DC()
{
  return sub_23D5AE928(&qword_256C7A4E0, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D670F24);
}

uint64_t sub_23D603908()
{
  return sub_23D5AE928(&qword_256C7A4E8, type metadata accessor for GKCrypto_RSVPQueueRequest, (uint64_t)&unk_23D67045C);
}

uint64_t sub_23D603934()
{
  return sub_23D5AE928(&qword_256C7A4F0, type metadata accessor for GKCrypto_UserKeys, (uint64_t)&unk_23D671E4C);
}

uint64_t sub_23D603960()
{
  return sub_23D5AE928(&qword_256C7A4F8, type metadata accessor for GKCrypto_GroupBlobRequest, (uint64_t)&unk_23D67009C);
}

uint64_t sub_23D60398C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD v14[6];
  uint64_t v15;
  uint64_t v16;

  v16 = *MEMORY[0x24BDAC8D0];
  v15 = type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair(0);
  v4 = MEMORY[0x24BDAC7A8](v15);
  v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v9 = (char *)v14 - v8;
  v10 = *(_QWORD *)(a1 + 16);
  if (v10 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v10)
  {
    if (a1 != a2)
    {
      v11 = (*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      v12 = *(_QWORD *)(v7 + 72);
      v14[3] = a2;
      v14[4] = v12;
      v14[5] = a1;
      sub_23D5E7298(a1 + v11, (uint64_t)v14 - v8, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
      sub_23D5E7298(a2 + v11, (uint64_t)v6, type metadata accessor for GKCrypto_UserKeys.SignatureVerificationKeyPair);
      __asm { BR              X10 }
    }
  }
  return 1;
}

uint64_t sub_23D604B2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[26];

  v15[24] = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v11 = (char *)v15 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v12)
  {
    if (a1 != a2)
    {
      v15[14] = a2;
      v15[15] = v8;
      v15[18] = 0;
      v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v15[12] = *(_QWORD *)(v9 + 72);
      v15[13] = a1;
      sub_23D5E7298(a1 + v13, (uint64_t)v15 - v10, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
      v15[17] = v13;
      sub_23D5E7298(a2 + v13, (uint64_t)v7, type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag);
      __asm { BR              X10 }
    }
  }
  return 1;
}

uint64_t sub_23D6062B0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 16);
  if (v2 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v2)
  {
    if (a1 != a2)
      __asm { BR              X8 }
  }
  return 1;
}

uint64_t sub_23D606BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v15[18];

  v15[17] = *MEMORY[0x24BDAC8D0];
  v4 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = MEMORY[0x24BDAC7A8](v5);
  v11 = (char *)v15 - v10;
  v12 = *(_QWORD *)(a1 + 16);
  if (v12 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v12)
  {
    if (a1 != a2)
    {
      v15[8] = v8;
      v15[9] = 0;
      v13 = (*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
      v15[5] = *(_QWORD *)(v9 + 72);
      v15[6] = a1;
      v15[7] = a2;
      sub_23D5E7298(a1 + v13, (uint64_t)v15 - v10, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      v15[11] = v13;
      sub_23D5E7298(a2 + v13, (uint64_t)v7, type metadata accessor for GKCrypto_GroupAETextToSign.User);
      __asm { BR              X10 }
    }
  }
  return 1;
}

uint64_t sub_23D608298(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v26[10];
  uint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23D66C108();
  v31 = *(_QWORD *)(v4 - 8);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)v26 - v8;
  v27 = type metadata accessor for HashAndCipher();
  v10 = MEMORY[0x24BDAC7A8](v27);
  v12 = (char *)v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = MEMORY[0x24BDAC7A8](v10);
  v15 = (char *)v26 - v14;
  v16 = MEMORY[0x24BDAC7A8](v13);
  v33 = (uint64_t)v26 - v17;
  MEMORY[0x24BDAC7A8](v16);
  v32 = (uint64_t)v26 - v19;
  v20 = *(_QWORD *)(a1 + 16);
  if (v20 != *(_QWORD *)(a2 + 16))
    return 0;
  if (v20)
  {
    if (a1 != a2)
    {
      v21 = (*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80);
      v22 = *(_QWORD *)(v18 + 72);
      v26[4] = 0;
      v26[5] = v22;
      v26[8] = v4;
      v26[9] = v12;
      v29 = v7;
      v30 = v15;
      v28 = v9;
      v26[6] = a1;
      v26[7] = a2;
      v23 = a1 + v21;
      v24 = v32;
      sub_23D5E7298(v23, v32, (uint64_t (*)(_QWORD))type metadata accessor for HashAndCipher);
      sub_23D5E7298(a2 + v21, v33, (uint64_t (*)(_QWORD))type metadata accessor for HashAndCipher);
      __asm { BR              X10 }
    }
  }
  return 1;
}

void sub_23D609AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }
}

uint64_t sub_23D609B44(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20,char a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  BOOL *v37;
  const void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t result;
  uint64_t v42;
  __int16 v43;
  char v44;
  char v45;
  char v46;
  char v47;

  v42 = v39;
  v43 = v40;
  v44 = BYTE2(v40);
  v45 = BYTE3(v40);
  v46 = BYTE4(v40);
  v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x23D609D28);
  }
  result = memcmp(v38, &v42, BYTE6(v40));
  *v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_23D609D4C@<X0>(uint64_t __s2@<X0>, void *__s1@<X2>, uint64_t a3@<X1>, BOOL *a4@<X8>)
{
  if (__s1)
  {
    if (__s2)
    {
      __s2 = memcmp(__s1, (const void *)__s2, a3 - __s2);
      *a4 = (_DWORD)__s2 == 0;
      return __s2;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return __s2;
}

uint64_t sub_23D609DA4(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result;
  char *v8;
  BOOL v9;
  int64_t v10;
  size_t v11;

  result = sub_23D66BC88();
  v8 = (char *)result;
  if (result)
  {
    result = sub_23D66BCAC();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }
    v8 += a1 - result;
  }
  v9 = __OFSUB__(a2, a1);
  v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }
  result = sub_23D66BCA0();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }
  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }
  if (result >= v10)
    v11 = v10;
  else
    v11 = result;
  return memcmp(a4, v8, v11) == 0;
}

BOOL sub_23D609E40(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t __s2;
  __int16 v5;
  char v6;
  char v7;
  char v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  __s2 = a1;
  v5 = a2;
  v6 = BYTE2(a2);
  v7 = BYTE3(a2);
  v8 = BYTE4(a2);
  v9 = BYTE5(a2);
  if (!__s1)
    __break(1u);
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

void sub_23D609F20(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

BOOL sub_23D609F5C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  uint64_t v16;
  void *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  BOOL v21;

  v21 = sub_23D609E40(v16, v20 & 0xFFFFFFFFFFFFFFLL, v17);
  if (!v18)
    return v21;
  return v19;
}

uint64_t sub_23D60A050(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_16;
  sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((v11 & 1) == 0)
    goto LABEL_16;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a1 + 32))
    v12 = v12 != 0;
  if (*(_BYTE *)(a2 + 32) != 1)
  {
    if (v12 == v13)
      goto LABEL_12;
    goto LABEL_16;
  }
  if (!v13)
  {
    if (!v12)
      goto LABEL_12;
LABEL_16:
    v19 = 0;
    return v19 & 1;
  }
  if (v12 != 1)
    goto LABEL_16;
LABEL_12:
  if (*(_DWORD *)(a1 + 36) != *(_DWORD *)(a2 + 36))
    goto LABEL_16;
  sub_23D5E6578(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((v14 & 1) == 0)
    goto LABEL_16;
  sub_23D5E6578(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  if ((v15 & 1) == 0)
    goto LABEL_16;
  v16 = type metadata accessor for GKCrypto_SeedBlobRequest(0);
  v17 = a1 + *(int *)(v16 + 40);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, v17, v4);
  v18(v8, a2 + *(int *)(v16 + 40), v4);
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = sub_23D66C384();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t sub_23D60A20C(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int *v33;
  uint64_t v34;
  unsigned int (*v35)(uint64_t, uint64_t, uint64_t);
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int (*v42)(uint64_t, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  char v46;
  char v47;
  uint64_t *v48;
  uint64_t *v49;
  char v50;
  uint64_t v52;
  char v53;
  char v54;
  char v55;
  char *v56;
  uint64_t v57;
  void (*v58)(char *, char *, uint64_t);
  char *v59;
  uint64_t v60;
  char *v61;
  char *v62;
  void (*v63)(char *, uint64_t);
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  int *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;

  v77 = a2;
  v68 = sub_23D66BE68();
  v66 = *(_QWORD *)(v68 - 8);
  v3 = MEMORY[0x24BDAC7A8](v68);
  v65 = (char *)&v64 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v3);
  v64 = (char *)&v64 - v5;
  v74 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v71 = *(int **)(v74 - 8);
  MEMORY[0x24BDAC7A8](v74);
  v67 = (uint64_t)&v64 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v70 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A5E8);
  MEMORY[0x24BDAC7A8](v70);
  v75 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v69 = (uint64_t *)((char *)&v64 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v9);
  v72 = (uint64_t)&v64 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v73 = (uint64_t)&v64 - v13;
  v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v15 = *(_QWORD *)(v14 - 8);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (_DWORD *)((char *)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0));
  v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A5A8);
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v64 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  v22 = MEMORY[0x24BDAC7A8](v21);
  v24 = (char *)&v64 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  v25 = MEMORY[0x24BDAC7A8](v22);
  v27 = (char *)&v64 - v26;
  MEMORY[0x24BDAC7A8](v25);
  v29 = (char *)&v64 - v28;
  v30 = type metadata accessor for GKCrypto_AdminPlainText(0);
  v31 = *(int *)(v30 + 24);
  v76 = a1;
  v32 = (uint64_t)a1 + v31;
  v33 = (int *)v30;
  sub_23D5AEF48(v32, (uint64_t)v29, &qword_256C799D0);
  sub_23D5AEF48(v77 + v33[6], (uint64_t)v27, &qword_256C799D0);
  v34 = (uint64_t)&v20[*(int *)(v18 + 48)];
  sub_23D5AEF48((uint64_t)v29, (uint64_t)v20, &qword_256C799D0);
  sub_23D5AEF48((uint64_t)v27, v34, &qword_256C799D0);
  v35 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v15 + 48);
  if (v35((uint64_t)v20, 1, v14) == 1)
  {
    sub_23D5AEF8C((uint64_t)v27, &qword_256C799D0);
    sub_23D5AEF8C((uint64_t)v29, &qword_256C799D0);
    if (v35(v34, 1, v14) == 1)
    {
      sub_23D5AEF8C((uint64_t)v20, &qword_256C799D0);
      goto LABEL_4;
    }
LABEL_9:
    v44 = &qword_256C7A5A8;
    v45 = (uint64_t)v20;
LABEL_19:
    sub_23D5AEF8C(v45, v44);
    goto LABEL_20;
  }
  sub_23D5AEF48((uint64_t)v20, (uint64_t)v24, &qword_256C799D0);
  if (v35(v34, 1, v14) == 1)
  {
    sub_23D5AEF8C((uint64_t)v27, &qword_256C799D0);
    sub_23D5AEF8C((uint64_t)v29, &qword_256C799D0);
    sub_23D5E6950((uint64_t)v24, type metadata accessor for GKCrypto_VersionedSeed);
    goto LABEL_9;
  }
  sub_23D5E7F64(v34, (uint64_t)v17, type metadata accessor for GKCrypto_VersionedSeed);
  if (*(_DWORD *)v24 != *v17 || (sub_23D5E6578(*((_QWORD *)v24 + 1), *((_QWORD *)v24 + 2)), (v46 & 1) == 0))
  {
    sub_23D5E6950((uint64_t)v17, type metadata accessor for GKCrypto_VersionedSeed);
    v48 = &qword_256C799D0;
    sub_23D5AEF8C((uint64_t)v27, &qword_256C799D0);
    sub_23D5AEF8C((uint64_t)v29, &qword_256C799D0);
    sub_23D5E6950((uint64_t)v24, type metadata accessor for GKCrypto_VersionedSeed);
    v45 = (uint64_t)v20;
LABEL_15:
    v44 = v48;
    goto LABEL_19;
  }
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v47 = sub_23D66C384();
  sub_23D5E6950((uint64_t)v17, type metadata accessor for GKCrypto_VersionedSeed);
  sub_23D5AEF8C((uint64_t)v27, &qword_256C799D0);
  sub_23D5AEF8C((uint64_t)v29, &qword_256C799D0);
  sub_23D5E6950((uint64_t)v24, type metadata accessor for GKCrypto_VersionedSeed);
  sub_23D5AEF8C((uint64_t)v20, &qword_256C799D0);
  if ((v47 & 1) == 0)
    goto LABEL_20;
LABEL_4:
  v36 = v76;
  v37 = v73;
  sub_23D5AEF48((uint64_t)v76 + v33[7], v73, &qword_256C79A28);
  v38 = v77;
  v39 = v72;
  sub_23D5AEF48(v77 + v33[7], v72, &qword_256C79A28);
  v40 = v75;
  v41 = v75 + *(int *)(v70 + 48);
  sub_23D5AEF48(v37, v75, &qword_256C79A28);
  sub_23D5AEF48(v39, v41, &qword_256C79A28);
  v42 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))*((_QWORD *)v71 + 6);
  v43 = v74;
  if (v42(v40, 1, v74) != 1)
  {
    v71 = v33;
    v49 = v69;
    sub_23D5AEF48(v40, (uint64_t)v69, &qword_256C79A28);
    if (v42(v41, 1, v43) == 1)
    {
      sub_23D5AEF8C(v39, &qword_256C79A28);
      sub_23D5AEF8C(v37, &qword_256C79A28);
      sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_AdminMetaData);
      goto LABEL_18;
    }
    v52 = v67;
    sub_23D5E7F64(v41, v67, type metadata accessor for GKCrypto_AdminMetaData);
    sub_23D5E6578(*v49, v49[1]);
    if ((v53 & 1) != 0)
    {
      sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v54 = sub_23D66C384();
      sub_23D5E6950(v52, type metadata accessor for GKCrypto_AdminMetaData);
      sub_23D5AEF8C(v39, &qword_256C79A28);
      sub_23D5AEF8C(v37, &qword_256C79A28);
      sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_AdminMetaData);
      sub_23D5AEF8C(v40, &qword_256C79A28);
      v33 = v71;
      if ((v54 & 1) == 0)
        goto LABEL_20;
      goto LABEL_24;
    }
    sub_23D5E6950(v52, type metadata accessor for GKCrypto_AdminMetaData);
    v48 = &qword_256C79A28;
    sub_23D5AEF8C(v39, &qword_256C79A28);
    sub_23D5AEF8C(v37, &qword_256C79A28);
    sub_23D5E6950((uint64_t)v49, type metadata accessor for GKCrypto_AdminMetaData);
    v45 = v40;
    goto LABEL_15;
  }
  sub_23D5AEF8C(v39, &qword_256C79A28);
  sub_23D5AEF8C(v37, &qword_256C79A28);
  if (v42(v41, 1, v43) != 1)
  {
LABEL_18:
    v44 = &qword_256C7A5E8;
    v45 = v40;
    goto LABEL_19;
  }
  sub_23D5AEF8C(v40, &qword_256C79A28);
LABEL_24:
  sub_23D5E6578(*v36, v36[1]);
  if ((v55 & 1) != 0)
  {
    v56 = (char *)v36 + v33[5];
    v57 = v66;
    v58 = *(void (**)(char *, char *, uint64_t))(v66 + 16);
    v59 = v64;
    v60 = v68;
    v58(v64, v56, v68);
    v61 = (char *)(v38 + v33[5]);
    v62 = v65;
    v58(v65, v61, v60);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v50 = sub_23D66C384();
    v63 = *(void (**)(char *, uint64_t))(v57 + 8);
    v63(v62, v60);
    v63(v59, v60);
    return v50 & 1;
  }
LABEL_20:
  v50 = 0;
  return v50 & 1;
}

uint64_t sub_23D60A9D8(uint64_t a1, char *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2 && (sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)), (v11 & 1) != 0))
  {
    v12 = type metadata accessor for GKCrypto_VersionedSeed(0);
    v13 = (char *)(a1 + *(int *)(v12 + 24));
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, &a2[*(int *)(v12 + 24)], v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_23D66C384();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_23D60AB1C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  char *v13;
  void (*v14)(char *, char *, uint64_t);
  char v15;
  void (*v16)(char *, uint64_t);
  uint64_t v18;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v18 - v9;
  sub_23D5E6578(*a1, a1[1]);
  if ((v11 & 1) != 0)
  {
    v12 = type metadata accessor for GKCrypto_AdminMetaData(0);
    v13 = (char *)a1 + *(int *)(v12 + 20);
    v14 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v14(v10, v13, v4);
    v14(v8, (char *)(a2 + *(int *)(v12 + 20)), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v15 = sub_23D66C384();
    v16 = *(void (**)(char *, uint64_t))(v5 + 8);
    v16(v8, v4);
    v16(v10, v4);
  }
  else
  {
    v15 = 0;
  }
  return v15 & 1;
}

uint64_t sub_23D60AC50(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = sub_23D66BE68();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for GKCrypto_Invite(0);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A608);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v42 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v42 - v22;
  if (*a1 != *a2)
    goto LABEL_11;
  v24 = a1;
  v25 = a2;
  v44 = v12;
  v45 = v21;
  v42 = v9;
  v43 = v7;
  v26 = type metadata accessor for GKCrypto_SignedInvite(0);
  sub_23D5AEF48((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v23, &qword_256C7A600);
  sub_23D5AEF48((uint64_t)a2 + *(int *)(v26 + 28), (uint64_t)v20, &qword_256C7A600);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_23D5AEF48((uint64_t)v23, (uint64_t)v15, &qword_256C7A600);
  sub_23D5AEF48((uint64_t)v20, v27, &qword_256C7A600);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v28((uint64_t)v15, 1, v49) == 1)
  {
    sub_23D5AEF8C((uint64_t)v20, &qword_256C7A600);
    sub_23D5AEF8C((uint64_t)v23, &qword_256C7A600);
    if (v28(v27, 1, v49) == 1)
    {
      sub_23D5AEF8C((uint64_t)v15, &qword_256C7A600);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  v29 = v45;
  sub_23D5AEF48((uint64_t)v15, v45, &qword_256C7A600);
  if (v28(v27, 1, v49) == 1)
  {
    sub_23D5AEF8C((uint64_t)v20, &qword_256C7A600);
    sub_23D5AEF8C((uint64_t)v23, &qword_256C7A600);
    sub_23D5E6950(v29, type metadata accessor for GKCrypto_Invite);
LABEL_7:
    sub_23D5AEF8C((uint64_t)v15, &qword_256C7A608);
LABEL_11:
    v39 = 0;
    return v39 & 1;
  }
  v30 = (uint64_t)v44;
  sub_23D5E7F64(v27, (uint64_t)v44, type metadata accessor for GKCrypto_Invite);
  v31 = sub_23D60B794(v29, v30);
  sub_23D5E6950(v30, type metadata accessor for GKCrypto_Invite);
  sub_23D5AEF8C((uint64_t)v20, &qword_256C7A600);
  sub_23D5AEF8C((uint64_t)v23, &qword_256C7A600);
  sub_23D5E6950(v29, type metadata accessor for GKCrypto_Invite);
  sub_23D5AEF8C((uint64_t)v15, &qword_256C7A600);
  if ((v31 & 1) == 0)
    goto LABEL_11;
LABEL_9:
  sub_23D5E6578(*((_QWORD *)v24 + 1), *((_QWORD *)v24 + 2));
  if ((v32 & 1) == 0)
    goto LABEL_11;
  v34 = v46;
  v33 = v47;
  v35 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v36 = v42;
  v35(v42, (char *)v24 + *(int *)(v26 + 24), v47);
  v37 = (char *)v25 + *(int *)(v26 + 24);
  v38 = v43;
  v35(v43, v37, v33);
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v39 = sub_23D66C384();
  v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t sub_23D60B04C(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = sub_23D66BE68();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for GKCrypto_RSVP(0);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A620);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v42 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v42 - v22;
  if (*a1 != *a2)
    goto LABEL_11;
  v24 = a1;
  v25 = a2;
  v44 = v12;
  v45 = v21;
  v42 = v9;
  v43 = v7;
  v26 = type metadata accessor for GKCrypto_SignedRSVP(0);
  sub_23D5AEF48((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v23, &qword_256C791B0);
  sub_23D5AEF48((uint64_t)a2 + *(int *)(v26 + 28), (uint64_t)v20, &qword_256C791B0);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_23D5AEF48((uint64_t)v23, (uint64_t)v15, &qword_256C791B0);
  sub_23D5AEF48((uint64_t)v20, v27, &qword_256C791B0);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v28((uint64_t)v15, 1, v49) == 1)
  {
    sub_23D5AEF8C((uint64_t)v20, &qword_256C791B0);
    sub_23D5AEF8C((uint64_t)v23, &qword_256C791B0);
    if (v28(v27, 1, v49) == 1)
    {
      sub_23D5AEF8C((uint64_t)v15, &qword_256C791B0);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  v29 = v45;
  sub_23D5AEF48((uint64_t)v15, v45, &qword_256C791B0);
  if (v28(v27, 1, v49) == 1)
  {
    sub_23D5AEF8C((uint64_t)v20, &qword_256C791B0);
    sub_23D5AEF8C((uint64_t)v23, &qword_256C791B0);
    sub_23D5E6950(v29, type metadata accessor for GKCrypto_RSVP);
LABEL_7:
    sub_23D5AEF8C((uint64_t)v15, &qword_256C7A620);
LABEL_11:
    v39 = 0;
    return v39 & 1;
  }
  v30 = (uint64_t)v44;
  sub_23D5E7F64(v27, (uint64_t)v44, type metadata accessor for GKCrypto_RSVP);
  v31 = sub_23D60B948(v29, v30);
  sub_23D5E6950(v30, type metadata accessor for GKCrypto_RSVP);
  sub_23D5AEF8C((uint64_t)v20, &qword_256C791B0);
  sub_23D5AEF8C((uint64_t)v23, &qword_256C791B0);
  sub_23D5E6950(v29, type metadata accessor for GKCrypto_RSVP);
  sub_23D5AEF8C((uint64_t)v15, &qword_256C791B0);
  if ((v31 & 1) == 0)
    goto LABEL_11;
LABEL_9:
  sub_23D5E6578(*((_QWORD *)v24 + 1), *((_QWORD *)v24 + 2));
  if ((v32 & 1) == 0)
    goto LABEL_11;
  v34 = v46;
  v33 = v47;
  v35 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v36 = v42;
  v35(v42, (char *)v24 + *(int *)(v26 + 24), v47);
  v37 = (char *)v25 + *(int *)(v26 + 24);
  v38 = v43;
  v35(v43, v37, v33);
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v39 = sub_23D66C384();
  v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t sub_23D60B448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)), (v11 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32)), (v12 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)), (v13 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)), (v14 & 1) != 0)
    && (sub_23D60398C(*(_QWORD *)(a1 + 72), *(_QWORD *)(a2 + 72)) & 1) != 0
    && (sub_23D5E6578(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88)), (v15 & 1) != 0))
  {
    v16 = type metadata accessor for GKCrypto_UserKeys(0);
    v17 = a1 + *(int *)(v16 + 44);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v10, v17, v4);
    v18(v8, a2 + *(int *)(v16 + 44), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v19 = sub_23D66C384();
    v20 = *(void (**)(char *, uint64_t))(v5 + 8);
    v20(v8, v4);
    v20(v10, v4);
  }
  else
  {
    v19 = 0;
  }
  return v19 & 1;
}

uint64_t sub_23D60B5DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v18;
  uint64_t v19;
  void (*v20)(char *, uint64_t, uint64_t);
  void (*v21)(char *, uint64_t);
  uint64_t v22;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_11;
  sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((v11 & 1) == 0)
    goto LABEL_11;
  sub_23D5E6578(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  if ((v12 & 1) == 0)
    goto LABEL_11;
  sub_23D5E6578(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  if ((v13 & 1) == 0 || *(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
    goto LABEL_11;
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a2 + 64);
  if (*(_BYTE *)(a1 + 72))
    v14 = v14 != 0;
  if (*(_BYTE *)(a2 + 72) != 1)
  {
    if (v14 != v15)
      goto LABEL_11;
LABEL_14:
    v18 = type metadata accessor for GKCrypto_SeedBlob(0);
    v19 = a1 + *(int *)(v18 + 40);
    v20 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v20(v10, v19, v4);
    v20(v8, a2 + *(int *)(v18 + 40), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_23D66C384();
    v21 = *(void (**)(char *, uint64_t))(v5 + 8);
    v21(v8, v4);
    v21(v10, v4);
    return v16 & 1;
  }
  if (!v15)
  {
    if (v14)
      goto LABEL_11;
    goto LABEL_14;
  }
  if (v14 == 1)
    goto LABEL_14;
LABEL_11:
  v16 = 0;
  return v16 & 1;
}

uint64_t sub_23D60B794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(char *, uint64_t, uint64_t);
  char v22;
  void (*v23)(char *, uint64_t);
  uint64_t v25;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v25 - v9;
  sub_23D5E6578(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) != 0
    && (sub_23D5E6578(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24)), (v12 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40)), (v13 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56)), (v14 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72)), (v15 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88)), (v16 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104)), (v17 & 1) != 0)
    && *(_DWORD *)(a1 + 112) == *(_DWORD *)(a2 + 112)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128)), (v18 & 1) != 0))
  {
    v19 = type metadata accessor for GKCrypto_Invite(0);
    v20 = a1 + *(int *)(v19 + 52);
    v21 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v21(v10, v20, v4);
    v21(v8, a2 + *(int *)(v19 + 52), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v22 = sub_23D66C384();
    v23 = *(void (**)(char *, uint64_t))(v5 + 8);
    v23(v8, v4);
    v23(v10, v4);
  }
  else
  {
    v22 = 0;
  }
  return v22 & 1;
}

uint64_t sub_23D60B948(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(char *, uint64_t, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_9;
  v11 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(a2 + 16) == 1)
    __asm { BR              X11 }
  if (*(_QWORD *)(a1 + 8) == v11
    && (sub_23D5E6578(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32)), (v12 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)), (v13 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)), (v14 & 1) != 0))
  {
    v15 = type metadata accessor for GKCrypto_RSVP(0);
    v16 = a1 + *(int *)(v15 + 36);
    v17 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v17(v10, v16, v4);
    v17(v8, a2 + *(int *)(v15 + 36), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = sub_23D66C384();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
  }
  else
  {
LABEL_9:
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_23D60BB20(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  char *v14;
  void (*v15)(char *, char *, uint64_t);
  char v16;
  void (*v17)(char *, uint64_t);
  uint64_t v19;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v19 - v9;
  sub_23D5E6578(*a1, a1[1]);
  if ((v11 & 1) != 0
    && (sub_23D5E6578(a1[2], a1[3]), (v12 & 1) != 0)
    && (sub_23D604B2C(a1[4], *(_QWORD *)(a2 + 32)) & 1) != 0)
  {
    v13 = type metadata accessor for GKCrypto_GroupHandle(0);
    v14 = (char *)a1 + *(int *)(v13 + 28);
    v15 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v15(v10, v14, v4);
    v15(v8, (char *)(a2 + *(int *)(v13 + 28)), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v16 = sub_23D66C384();
    v17 = *(void (**)(char *, uint64_t))(v5 + 8);
    v17(v8, v4);
    v17(v10, v4);
  }
  else
  {
    v16 = 0;
  }
  return v16 & 1;
}

uint64_t sub_23D60BC74(uint64_t a1, _DWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  _DWORD *v43;
  char v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t *v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t (*v70)(uint64_t, uint64_t, uint64_t);
  int v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  int v75;
  uint64_t v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int (*v82)(uint64_t, uint64_t, uint64_t);
  uint64_t *v83;
  char v84;
  char v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void (*v90)(char *, uint64_t, uint64_t);
  void (*v91)(char *, uint64_t);
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  char *v96;
  char *v97;
  char *v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  char *v105;
  char *v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  char *v115;
  char *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _DWORD *v121;
  uint64_t v122;

  v121 = a2;
  v122 = a1;
  v120 = sub_23D66BE68();
  v107 = *(_QWORD *)(v120 - 8);
  v2 = MEMORY[0x24BDAC7A8](v120);
  v116 = (char *)&v92 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v2);
  v106 = (char *)&v92 - v4;
  v5 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
  v111 = *(_QWORD *)(v5 - 8);
  v112 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v115 = (char *)&v92 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v110 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A550);
  MEMORY[0x24BDAC7A8](v110);
  v113 = (uint64_t)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79750);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v108 = (uint64_t *)((char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = MEMORY[0x24BDAC7A8](v9);
  v114 = (uint64_t)&v92 - v12;
  MEMORY[0x24BDAC7A8](v11);
  v119 = (uint64_t)&v92 - v13;
  v14 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys(0);
  v117 = *(_QWORD *)(v14 - 8);
  v118 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v109 = (uint64_t)&v92 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A558);
  MEMORY[0x24BDAC7A8](v16);
  v18 = (char *)&v92 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0);
  v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79748);
  v20 = MEMORY[0x24BDAC7A8](v19);
  v22 = (uint64_t *)((char *)&v92 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0));
  v23 = MEMORY[0x24BDAC7A8](v20);
  v25 = (char *)&v92 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v27 = (char *)&v92 - v26;
  v28 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
  v29 = *(_QWORD *)(v28 - 8);
  MEMORY[0x24BDAC7A8](v28);
  v31 = (uint64_t *)((char *)&v92 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0));
  v32 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A560);
  MEMORY[0x24BDAC7A8](v32);
  v34 = (char *)&v92 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79740);
  v36 = MEMORY[0x24BDAC7A8](v35);
  v37 = MEMORY[0x24BDAC7A8](v36);
  MEMORY[0x24BDAC7A8](v37);
  v41 = (char *)&v92 - v40;
  if (*(_DWORD *)v122 != *v121)
    goto LABEL_28;
  v100 = v32;
  v101 = v29;
  v104 = v39;
  v105 = v41;
  v102 = v28;
  v95 = v31;
  v99 = (uint64_t *)v38;
  v103 = v34;
  v97 = v25;
  v98 = v27;
  v94 = v22;
  v96 = v18;
  v42 = v122;
  v43 = v121;
  sub_23D5E6578(*(_QWORD *)(v122 + 8), *(_QWORD *)(v122 + 16));
  if ((v44 & 1) == 0)
    goto LABEL_28;
  sub_23D5E6578(*(_QWORD *)(v42 + 24), *(_QWORD *)(v42 + 32));
  if ((v45 & 1) == 0)
    goto LABEL_28;
  v46 = type metadata accessor for GKCrypto_GroupBlob(0);
  v47 = (uint64_t)v105;
  sub_23D5AEF48(v42 + *(int *)(v46 + 32), (uint64_t)v105, &qword_256C79740);
  v93 = v46;
  v48 = v104;
  sub_23D5AEF48((uint64_t)v43 + *(int *)(v46 + 32), v104, &qword_256C79740);
  v49 = (uint64_t)v103;
  v50 = (uint64_t)&v103[*(int *)(v100 + 48)];
  sub_23D5AEF48(v47, (uint64_t)v103, &qword_256C79740);
  sub_23D5AEF48(v48, v50, &qword_256C79740);
  v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v101 + 48);
  v52 = v102;
  if (v51(v49, 1, v102) == 1)
  {
    sub_23D5AEF8C(v48, &qword_256C79740);
    sub_23D5AEF8C(v47, &qword_256C79740);
    v53 = v51(v50, 1, v52);
    v54 = v119;
    v55 = v120;
    if (v53 == 1)
    {
      sub_23D5AEF8C(v49, &qword_256C79740);
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  v56 = v99;
  sub_23D5AEF48(v49, (uint64_t)v99, &qword_256C79740);
  v57 = v51(v50, 1, v52);
  v55 = v120;
  if (v57 == 1)
  {
    sub_23D5AEF8C(v104, &qword_256C79740);
    sub_23D5AEF8C((uint64_t)v105, &qword_256C79740);
    sub_23D5E6950((uint64_t)v56, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
LABEL_9:
    v58 = &qword_256C7A560;
    v59 = v49;
LABEL_27:
    sub_23D5AEF8C(v59, v58);
    goto LABEL_28;
  }
  v60 = v95;
  sub_23D5E7F64(v50, (uint64_t)v95, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  if ((sub_23D6062B0(*v56, *v60) & 1) == 0)
  {
    sub_23D5E6950((uint64_t)v60, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    sub_23D5AEF8C(v104, &qword_256C79740);
    sub_23D5AEF8C((uint64_t)v105, &qword_256C79740);
    sub_23D5E6950((uint64_t)v56, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
    v59 = (uint64_t)v103;
    v58 = &qword_256C79740;
    goto LABEL_27;
  }
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v61 = sub_23D66C384();
  sub_23D5E6950((uint64_t)v60, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  sub_23D5AEF8C(v104, &qword_256C79740);
  sub_23D5AEF8C((uint64_t)v105, &qword_256C79740);
  sub_23D5E6950((uint64_t)v56, type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys);
  v54 = v119;
  sub_23D5AEF8C((uint64_t)v103, &qword_256C79740);
  if ((v61 & 1) == 0)
    goto LABEL_28;
LABEL_12:
  v62 = v93;
  v63 = v42 + *(int *)(v93 + 36);
  v64 = (uint64_t)v98;
  sub_23D5AEF48(v63, (uint64_t)v98, &qword_256C79748);
  v65 = (uint64_t)v97;
  sub_23D5AEF48((uint64_t)v43 + *(int *)(v62 + 36), (uint64_t)v97, &qword_256C79748);
  v66 = *(int *)(v16 + 48);
  v67 = (uint64_t)v96;
  v68 = (uint64_t)&v96[v66];
  sub_23D5AEF48(v64, (uint64_t)v96, &qword_256C79748);
  sub_23D5AEF48(v65, v68, &qword_256C79748);
  v69 = v118;
  v70 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48);
  if (v70(v67, 1, v118) != 1)
  {
    v74 = v94;
    sub_23D5AEF48(v67, (uint64_t)v94, &qword_256C79748);
    v75 = v70(v68, 1, v69);
    v72 = (uint64_t)v115;
    v73 = v116;
    if (v75 != 1)
    {
      v76 = v109;
      sub_23D5E7F64(v68, v109, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      v77 = sub_23D60C9B0(v74, v76, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      sub_23D5E6950(v76, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      sub_23D5AEF8C((uint64_t)v97, &qword_256C79748);
      sub_23D5AEF8C((uint64_t)v98, &qword_256C79748);
      sub_23D5E6950((uint64_t)v74, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
      sub_23D5AEF8C(v67, &qword_256C79748);
      if ((v77 & 1) == 0)
        goto LABEL_28;
      goto LABEL_20;
    }
    sub_23D5AEF8C((uint64_t)v97, &qword_256C79748);
    sub_23D5AEF8C((uint64_t)v98, &qword_256C79748);
    sub_23D5E6950((uint64_t)v74, type metadata accessor for GKCrypto_GroupBlob.GroupBlobPublicKeys);
LABEL_17:
    v58 = &qword_256C7A558;
LABEL_26:
    v59 = v67;
    goto LABEL_27;
  }
  sub_23D5AEF8C(v65, &qword_256C79748);
  sub_23D5AEF8C(v64, &qword_256C79748);
  v71 = v70(v68, 1, v69);
  v72 = (uint64_t)v115;
  v73 = v116;
  if (v71 != 1)
    goto LABEL_17;
  sub_23D5AEF8C(v67, &qword_256C79748);
LABEL_20:
  sub_23D5AEF48(v122 + *(int *)(v62 + 40), v54, qword_256C79750);
  v78 = (uint64_t)v121 + *(int *)(v62 + 40);
  v79 = v114;
  sub_23D5AEF48(v78, v114, qword_256C79750);
  v67 = v113;
  v80 = v113 + *(int *)(v110 + 48);
  sub_23D5AEF48(v54, v113, qword_256C79750);
  sub_23D5AEF48(v79, v80, qword_256C79750);
  v81 = v112;
  v82 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v111 + 48);
  if (v82(v67, 1, v112) == 1)
  {
    sub_23D5AEF8C(v79, qword_256C79750);
    sub_23D5AEF8C(v54, qword_256C79750);
    if (v82(v80, 1, v81) == 1)
    {
      sub_23D5AEF8C(v67, qword_256C79750);
LABEL_31:
      v87 = v93;
      v88 = v106;
      v89 = v107;
      v90 = *(void (**)(char *, uint64_t, uint64_t))(v107 + 16);
      v90(v106, v122 + *(int *)(v93 + 28), v55);
      v90(v73, (uint64_t)v121 + *(int *)(v87 + 28), v55);
      sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
      v84 = sub_23D66C384();
      v91 = *(void (**)(char *, uint64_t))(v89 + 8);
      v91(v73, v55);
      v91(v88, v55);
      return v84 & 1;
    }
    goto LABEL_25;
  }
  v83 = v108;
  sub_23D5AEF48(v67, (uint64_t)v108, qword_256C79750);
  if (v82(v80, 1, v81) == 1)
  {
    sub_23D5AEF8C(v114, qword_256C79750);
    sub_23D5AEF8C(v119, qword_256C79750);
    sub_23D5E6950((uint64_t)v83, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
LABEL_25:
    v58 = &qword_256C7A550;
    goto LABEL_26;
  }
  sub_23D5E7F64(v80, v72, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  v86 = sub_23D60C85C(v83, v72);
  sub_23D5E6950(v72, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_23D5AEF8C(v114, qword_256C79750);
  sub_23D5AEF8C(v119, qword_256C79750);
  sub_23D5E6950((uint64_t)v83, type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures);
  sub_23D5AEF8C(v67, qword_256C79750);
  if ((v86 & 1) != 0)
    goto LABEL_31;
LABEL_28:
  v84 = 0;
  return v84 & 1;
}

uint64_t sub_23D60C728(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  void (*v13)(char *, char *, uint64_t);
  char v14;
  void (*v15)(char *, uint64_t);
  uint64_t v17;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v17 - v9;
  if ((sub_23D6062B0(*a1, *a2) & 1) != 0)
  {
    v11 = type metadata accessor for GKCrypto_GroupBlob.RandomizedVerificationKeys(0);
    v12 = (char *)a1 + *(int *)(v11 + 20);
    v13 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v13(v10, v12, v4);
    v13(v8, (char *)a2 + *(int *)(v11 + 20), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_23D66C384();
    v15 = *(void (**)(char *, uint64_t))(v5 + 8);
    v15(v8, v4);
    v15(v10, v4);
  }
  else
  {
    v14 = 0;
  }
  return v14 & 1;
}

uint64_t sub_23D60C85C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  char v13;
  uint64_t v14;
  char *v15;
  void (*v16)(char *, char *, uint64_t);
  char v17;
  void (*v18)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  sub_23D5E6578(*a1, a1[1]);
  if ((v11 & 1) != 0 && (sub_23D5E6578(a1[2], a1[3]), (v12 & 1) != 0) && (sub_23D5E6578(a1[4], a1[5]), (v13 & 1) != 0))
  {
    v14 = type metadata accessor for GKCrypto_GroupBlob.GroupBlobSignatures(0);
    v15 = (char *)a1 + *(int *)(v14 + 28);
    v16 = *(void (**)(char *, char *, uint64_t))(v5 + 16);
    v16(v10, v15, v4);
    v16(v8, (char *)(a2 + *(int *)(v14 + 28)), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v17 = sub_23D66C384();
    v18 = *(void (**)(char *, uint64_t))(v5 + 8);
    v18(v8, v4);
    v18(v10, v4);
  }
  else
  {
    v17 = 0;
  }
  return v17 & 1;
}

uint64_t sub_23D60C9B0(uint64_t *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = sub_23D66BE68();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  sub_23D5E6578(*a1, a1[1]);
  if ((v13 & 1) != 0
    && (sub_23D5E6578(a1[2], a1[3]), (v14 & 1) != 0)
    && (sub_23D5E6578(a1[4], a1[5]), (v15 & 1) != 0)
    && (sub_23D5E6578(a1[6], a1[7]), (v16 & 1) != 0))
  {
    v17 = a3(0);
    v18 = (char *)a1 + *(int *)(v17 + 32);
    v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v19(v12, v18, v6);
    v19(v10, (char *)(a2 + *(int *)(v17 + 32)), v6);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = sub_23D66C384();
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    v21(v12, v6);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_23D60CB18(_DWORD *a1, _DWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int (*v28)(uint64_t, uint64_t, uint64_t);
  uint64_t v29;
  uint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  uint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  char *v36;
  char *v37;
  char *v38;
  char v39;
  void (*v40)(char *, uint64_t);
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;

  v4 = sub_23D66BE68();
  v46 = *(_QWORD *)(v4 - 8);
  v47 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v42 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v42 - v8;
  v10 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  v48 = *(_QWORD *)(v10 - 8);
  v49 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A650);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v42 - v19;
  MEMORY[0x24BDAC7A8](v18);
  v23 = (char *)&v42 - v22;
  if (*a1 != *a2)
    goto LABEL_11;
  v24 = a1;
  v25 = a2;
  v44 = v12;
  v45 = v21;
  v42 = v9;
  v43 = v7;
  v26 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext(0);
  sub_23D5AEF48((uint64_t)v24 + *(int *)(v26 + 28), (uint64_t)v23, &qword_256C7A648);
  sub_23D5AEF48((uint64_t)a2 + *(int *)(v26 + 28), (uint64_t)v20, &qword_256C7A648);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_23D5AEF48((uint64_t)v23, (uint64_t)v15, &qword_256C7A648);
  sub_23D5AEF48((uint64_t)v20, v27, &qword_256C7A648);
  v28 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v28((uint64_t)v15, 1, v49) == 1)
  {
    sub_23D5AEF8C((uint64_t)v20, &qword_256C7A648);
    sub_23D5AEF8C((uint64_t)v23, &qword_256C7A648);
    if (v28(v27, 1, v49) == 1)
    {
      sub_23D5AEF8C((uint64_t)v15, &qword_256C7A648);
      goto LABEL_9;
    }
    goto LABEL_7;
  }
  v29 = v45;
  sub_23D5AEF48((uint64_t)v15, v45, &qword_256C7A648);
  if (v28(v27, 1, v49) == 1)
  {
    sub_23D5AEF8C((uint64_t)v20, &qword_256C7A648);
    sub_23D5AEF8C((uint64_t)v23, &qword_256C7A648);
    sub_23D5E6950(v29, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
LABEL_7:
    sub_23D5AEF8C((uint64_t)v15, &qword_256C7A650);
LABEL_11:
    v39 = 0;
    return v39 & 1;
  }
  v30 = (uint64_t)v44;
  sub_23D5E7F64(v27, (uint64_t)v44, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  v31 = sub_23D60CF14(v29, v30);
  sub_23D5E6950(v30, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_23D5AEF8C((uint64_t)v20, &qword_256C7A648);
  sub_23D5AEF8C((uint64_t)v23, &qword_256C7A648);
  sub_23D5E6950(v29, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
  sub_23D5AEF8C((uint64_t)v15, &qword_256C7A648);
  if ((v31 & 1) == 0)
    goto LABEL_11;
LABEL_9:
  sub_23D5E6578(*((_QWORD *)v24 + 1), *((_QWORD *)v24 + 2));
  if ((v32 & 1) == 0)
    goto LABEL_11;
  v34 = v46;
  v33 = v47;
  v35 = *(void (**)(char *, char *, uint64_t))(v46 + 16);
  v36 = v42;
  v35(v42, (char *)v24 + *(int *)(v26 + 24), v47);
  v37 = (char *)v25 + *(int *)(v26 + 24);
  v38 = v43;
  v35(v43, v37, v33);
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v39 = sub_23D66C384();
  v40 = *(void (**)(char *, uint64_t))(v34 + 8);
  v40(v38, v33);
  v40(v36, v33);
  return v39 & 1;
}

uint64_t sub_23D60CF14(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  void (*v19)(char *, uint64_t);
  uint64_t v20;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v20 - v9;
  if (*(_DWORD *)a1 != *(_DWORD *)a2)
    goto LABEL_8;
  sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  if ((v11 & 1) == 0)
    goto LABEL_8;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(a1 + 32))
    v12 = v12 != 0;
  if (*(_BYTE *)(a2 + 32) != 1)
  {
    if (v12 != v13)
      goto LABEL_8;
LABEL_11:
    v16 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
    v17 = a1 + *(int *)(v16 + 28);
    v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    v18(v10, v17, v4);
    v18(v8, a2 + *(int *)(v16 + 28), v4);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v14 = sub_23D66C384();
    v19 = *(void (**)(char *, uint64_t))(v5 + 8);
    v19(v8, v4);
    v19(v10, v4);
    return v14 & 1;
  }
  if (!v13)
  {
    if (v12)
      goto LABEL_8;
    goto LABEL_11;
  }
  if (v12 == 1)
    goto LABEL_11;
LABEL_8:
  v14 = 0;
  return v14 & 1;
}

uint64_t sub_23D60D09C(uint64_t a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v6 = sub_23D66BE68();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)), (v13 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32)), (v14 & 1) != 0))
  {
    v15 = a3(0);
    v16 = (char *)(a1 + *(int *)(v15 + 28));
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, &a2[*(int *)(v15 + 28)], v6);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = sub_23D66C384();
    v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v10, v6);
    v19(v12, v6);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

uint64_t sub_23D60D1F4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int (*v51)(uint64_t, uint64_t, uint64_t);
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  _DWORD *v56;
  char v57;
  uint64_t v58;
  char v59;
  uint64_t *v60;
  char v61;
  uint64_t v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (*v68)(char *, uint64_t, uint64_t);
  char *v69;
  char *v70;
  void (*v71)(char *, uint64_t);
  uint64_t v72;
  uint64_t *v73;
  _DWORD *v74;
  char *v75;
  char *v76;
  char *v77;
  uint64_t v78;
  char *v79;
  char *v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;

  v87 = sub_23D66BE68();
  v81 = *(_QWORD *)(v87 - 8);
  v4 = MEMORY[0x24BDAC7A8](v87);
  v80 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v79 = (char *)&v72 - v6;
  v7 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v84 = *(_QWORD *)(v7 - 8);
  v85 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v78 = (uint64_t)&v72 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A5A0);
  MEMORY[0x24BDAC7A8](v83);
  v86 = (uint64_t)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v82 = (uint64_t *)((char *)&v72 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v72 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v17 = (char *)&v72 - v16;
  v18 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v88 = *(uint64_t **)(v18 - 8);
  v89 = v18;
  MEMORY[0x24BDAC7A8](v18);
  v20 = (char *)&v72 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A5A8);
  MEMORY[0x24BDAC7A8](v21);
  v23 = (char *)&v72 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0);
  v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
  v25 = MEMORY[0x24BDAC7A8](v24);
  v27 = (char *)&v72 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = MEMORY[0x24BDAC7A8](v25);
  v30 = (char *)&v72 - v29;
  MEMORY[0x24BDAC7A8](v28);
  v32 = (char *)&v72 - v31;
  if ((sub_23D606BC4(*a1, *a2) & 1) == 0)
    goto LABEL_21;
  v74 = v20;
  v75 = v17;
  v76 = v15;
  v77 = v27;
  v33 = type metadata accessor for GKCrypto_GroupAETextToSign(0);
  v34 = a1;
  sub_23D5AEF48((uint64_t)a1 + *(int *)(v33 + 24), (uint64_t)v32, &qword_256C799D0);
  sub_23D5AEF48((uint64_t)a2 + *(int *)(v33 + 24), (uint64_t)v30, &qword_256C799D0);
  v35 = (uint64_t)&v23[*(int *)(v21 + 48)];
  sub_23D5AEF48((uint64_t)v32, (uint64_t)v23, &qword_256C799D0);
  sub_23D5AEF48((uint64_t)v30, v35, &qword_256C799D0);
  v36 = v89;
  v37 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v88[6];
  v38 = a2;
  v39 = v34;
  v40 = v89;
  if (v37((uint64_t)v23, 1, v89) != 1)
  {
    v73 = v39;
    v88 = v38;
    v52 = (uint64_t)v30;
    v53 = (uint64_t)v77;
    sub_23D5AEF48((uint64_t)v23, (uint64_t)v77, &qword_256C799D0);
    if (v37(v35, 1, v36) == 1)
    {
      sub_23D5AEF8C((uint64_t)v30, &qword_256C799D0);
      sub_23D5AEF8C((uint64_t)v32, &qword_256C799D0);
      sub_23D5E6950(v53, type metadata accessor for GKCrypto_VersionedSeed);
      goto LABEL_11;
    }
    v41 = v33;
    v56 = v74;
    sub_23D5E7F64(v35, (uint64_t)v74, type metadata accessor for GKCrypto_VersionedSeed);
    if (*(_DWORD *)v53 != *v56 || (sub_23D5E6578(*(_QWORD *)(v53 + 8), *(_QWORD *)(v53 + 16)), (v57 & 1) == 0))
    {
      sub_23D5E6950((uint64_t)v56, type metadata accessor for GKCrypto_VersionedSeed);
      sub_23D5AEF8C(v52, &qword_256C799D0);
      sub_23D5AEF8C((uint64_t)v32, &qword_256C799D0);
      sub_23D5E6950(v53, type metadata accessor for GKCrypto_VersionedSeed);
      v55 = (uint64_t)v23;
      v54 = &qword_256C799D0;
      goto LABEL_20;
    }
    v58 = (uint64_t)v23;
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v42 = v87;
    v59 = sub_23D66C384();
    sub_23D5E6950((uint64_t)v56, type metadata accessor for GKCrypto_VersionedSeed);
    sub_23D5AEF8C(v52, &qword_256C799D0);
    sub_23D5AEF8C((uint64_t)v32, &qword_256C799D0);
    sub_23D5E6950(v53, type metadata accessor for GKCrypto_VersionedSeed);
    v38 = v88;
    v39 = v73;
    sub_23D5AEF8C(v58, &qword_256C799D0);
    if ((v59 & 1) == 0)
      goto LABEL_21;
LABEL_6:
    v43 = v41;
    v44 = v39;
    v45 = (uint64_t)v39 + *(int *)(v41 + 28);
    v46 = (uint64_t)v75;
    sub_23D5AEF48(v45, (uint64_t)v75, &qword_256C799D8);
    v89 = v43;
    v47 = (uint64_t)v76;
    sub_23D5AEF48((uint64_t)v38 + *(int *)(v43 + 28), (uint64_t)v76, &qword_256C799D8);
    v48 = v86;
    v49 = v86 + *(int *)(v83 + 48);
    sub_23D5AEF48(v46, v86, &qword_256C799D8);
    sub_23D5AEF48(v47, v49, &qword_256C799D8);
    v50 = v85;
    v51 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v84 + 48);
    if (v51(v48, 1, v85) == 1)
    {
      sub_23D5AEF8C(v47, &qword_256C799D8);
      sub_23D5AEF8C(v46, &qword_256C799D8);
      if (v51(v49, 1, v50) == 1)
      {
        sub_23D5AEF8C(v48, &qword_256C799D8);
        goto LABEL_24;
      }
    }
    else
    {
      v60 = v82;
      sub_23D5AEF48(v48, (uint64_t)v82, &qword_256C799D8);
      if (v51(v49, 1, v50) != 1)
      {
        v63 = v78;
        sub_23D5E7F64(v49, v78, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
        v64 = sub_23D60DB10(v60, v63);
        sub_23D5E6950(v63, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
        sub_23D5AEF8C((uint64_t)v76, &qword_256C799D8);
        sub_23D5AEF8C(v46, &qword_256C799D8);
        sub_23D5E6950((uint64_t)v60, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
        sub_23D5AEF8C(v48, &qword_256C799D8);
        if ((v64 & 1) == 0)
          goto LABEL_21;
LABEL_24:
        v65 = v89;
        v66 = (uint64_t)v44 + *(int *)(v89 + 20);
        v67 = v81;
        v68 = *(void (**)(char *, uint64_t, uint64_t))(v81 + 16);
        v69 = v79;
        v68(v79, v66, v42);
        v70 = v80;
        v68(v80, (uint64_t)v38 + *(int *)(v65 + 20), v42);
        sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
        v61 = sub_23D66C384();
        v71 = *(void (**)(char *, uint64_t))(v67 + 8);
        v71(v70, v42);
        v71(v69, v42);
        return v61 & 1;
      }
      sub_23D5AEF8C((uint64_t)v76, &qword_256C799D8);
      sub_23D5AEF8C(v46, &qword_256C799D8);
      sub_23D5E6950((uint64_t)v60, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
    }
    v54 = &qword_256C7A5A0;
    v55 = v48;
    goto LABEL_20;
  }
  v41 = v33;
  sub_23D5AEF8C((uint64_t)v30, &qword_256C799D0);
  sub_23D5AEF8C((uint64_t)v32, &qword_256C799D0);
  if (v37(v35, 1, v40) == 1)
  {
    sub_23D5AEF8C((uint64_t)v23, &qword_256C799D0);
    v42 = v87;
    goto LABEL_6;
  }
LABEL_11:
  v54 = &qword_256C7A5A8;
  v55 = (uint64_t)v23;
LABEL_20:
  sub_23D5AEF8C(v55, v54);
LABEL_21:
  v61 = 0;
  return v61 & 1;
}

uint64_t sub_23D60D974(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  char v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, uint64_t, uint64_t);
  char v19;
  void (*v20)(char *, uint64_t);
  uint64_t v22;

  v4 = sub_23D66BE68();
  v5 = *(_QWORD *)(v4 - 8);
  v6 = MEMORY[0x24BDAC7A8](v4);
  v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v22 - v9;
  sub_23D5E6578(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  if ((v11 & 1) == 0)
    goto LABEL_14;
  sub_23D5E6578(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  if ((v12 & 1) == 0)
    goto LABEL_14;
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(a1 + 40))
    v13 = v13 != 0;
  if (*(_BYTE *)(a2 + 40) != 1)
  {
    if (v13 == v14)
      goto LABEL_12;
LABEL_14:
    v19 = 0;
    return v19 & 1;
  }
  if (!v14)
  {
    if (!v13)
      goto LABEL_12;
    goto LABEL_14;
  }
  if (v13 != 1)
    goto LABEL_14;
LABEL_12:
  sub_23D5E6578(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  if ((v15 & 1) == 0)
    goto LABEL_14;
  v16 = type metadata accessor for GKCrypto_GroupAETextToSign.User(0);
  v17 = a1 + *(int *)(v16 + 32);
  v18 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v18(v10, v17, v4);
  v18(v8, a2 + *(int *)(v16 + 32), v4);
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v19 = sub_23D66C384();
  v20 = *(void (**)(char *, uint64_t))(v5 + 8);
  v20(v8, v4);
  v20(v10, v4);
  return v19 & 1;
}

uint64_t sub_23D60DB10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t (*v29)(char *, uint64_t, uint64_t);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  void (*v37)(char *, char *, uint64_t);
  char *v38;
  char *v39;
  char v40;
  void (*v41)(char *, uint64_t);
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  char v47;
  char v48;
  char v49;
  char *v51;
  char *v52;
  char *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;

  v4 = sub_23D66BE68();
  v55 = *(_QWORD *)(v4 - 8);
  v56 = v4;
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v51 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v51 - v8;
  v10 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v57 = *(_QWORD *)(v10 - 8);
  v58 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A5B0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (uint64_t *)((char *)&v51 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0));
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v51 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v51 - v23;
  sub_23D5E6578(*a1, a1[1]);
  if ((v25 & 1) == 0)
    goto LABEL_15;
  v51 = v12;
  v52 = v9;
  v53 = v7;
  v54 = v19;
  v26 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  sub_23D5AEF48((uint64_t)a1 + *(int *)(v26 + 24), (uint64_t)v24, &qword_256C799F0);
  sub_23D5AEF48(a2 + *(int *)(v26 + 24), (uint64_t)v22, &qword_256C799F0);
  v27 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_23D5AEF48((uint64_t)v24, (uint64_t)v15, &qword_256C799F0);
  sub_23D5AEF48((uint64_t)v22, v27, &qword_256C799F0);
  v28 = v58;
  v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v57 + 48);
  v30 = v29(v15, 1, v58);
  v31 = a2;
  v32 = (uint64_t)v15;
  v33 = v28;
  if (v30 != 1)
  {
    v42 = v26;
    v43 = v54;
    sub_23D5AEF48(v32, (uint64_t)v54, &qword_256C799F0);
    if (v29((char *)v27, 1, v33) != 1)
    {
      v57 = v31;
      v46 = (uint64_t)v51;
      sub_23D5E7F64(v27, (uint64_t)v51, type metadata accessor for GKCrypto_AdminGroupBlob);
      sub_23D5E6578(*v43, v43[1]);
      if ((v47 & 1) != 0)
      {
        sub_23D5E6578(v43[2], v43[3]);
        if ((v48 & 1) != 0)
        {
          sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
          v49 = sub_23D66C384();
          sub_23D5E6950(v46, type metadata accessor for GKCrypto_AdminGroupBlob);
          sub_23D5AEF8C((uint64_t)v22, &qword_256C799F0);
          sub_23D5AEF8C((uint64_t)v24, &qword_256C799F0);
          sub_23D5E6950((uint64_t)v43, type metadata accessor for GKCrypto_AdminGroupBlob);
          sub_23D5AEF8C(v32, &qword_256C799F0);
          v26 = v42;
          if ((v49 & 1) != 0)
            goto LABEL_5;
LABEL_15:
          v40 = 0;
          return v40 & 1;
        }
      }
      sub_23D5E6950(v46, type metadata accessor for GKCrypto_AdminGroupBlob);
      sub_23D5AEF8C((uint64_t)v22, &qword_256C799F0);
      sub_23D5AEF8C((uint64_t)v24, &qword_256C799F0);
      sub_23D5E6950((uint64_t)v43, type metadata accessor for GKCrypto_AdminGroupBlob);
      v45 = v32;
      v44 = &qword_256C799F0;
LABEL_14:
      sub_23D5AEF8C(v45, v44);
      goto LABEL_15;
    }
    sub_23D5AEF8C((uint64_t)v22, &qword_256C799F0);
    sub_23D5AEF8C((uint64_t)v24, &qword_256C799F0);
    sub_23D5E6950((uint64_t)v43, type metadata accessor for GKCrypto_AdminGroupBlob);
LABEL_8:
    v44 = &qword_256C7A5B0;
    v45 = v32;
    goto LABEL_14;
  }
  sub_23D5AEF8C((uint64_t)v22, &qword_256C799F0);
  sub_23D5AEF8C((uint64_t)v24, &qword_256C799F0);
  if (v29((char *)v27, 1, v28) != 1)
    goto LABEL_8;
  v57 = v31;
  sub_23D5AEF8C(v32, &qword_256C799F0);
LABEL_5:
  v34 = (char *)a1 + *(int *)(v26 + 20);
  v36 = v55;
  v35 = v56;
  v37 = *(void (**)(char *, char *, uint64_t))(v55 + 16);
  v38 = v52;
  v37(v52, v34, v56);
  v39 = v53;
  v37(v53, (char *)(v57 + *(int *)(v26 + 20)), v35);
  sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
  v40 = sub_23D66C384();
  v41 = *(void (**)(char *, uint64_t))(v36 + 8);
  v41(v39, v35);
  v41(v38, v35);
  return v40 & 1;
}

uint64_t sub_23D60DFB8(uint64_t a1, char *a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char *v18;
  void (*v19)(char *, char *, uint64_t);
  char v20;
  void (*v21)(char *, uint64_t);
  uint64_t v23;

  v6 = sub_23D66BE68();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v23 - v11;
  if (*(_DWORD *)a1 == *(_DWORD *)a2
    && (sub_23D5E6578(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16)), (v13 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32)), (v14 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48)), (v15 & 1) != 0)
    && (sub_23D5E6578(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64)), (v16 & 1) != 0))
  {
    v17 = a3(0);
    v18 = (char *)(a1 + *(int *)(v17 + 36));
    v19 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v19(v12, v18, v6);
    v19(v10, &a2[*(int *)(v17 + 36)], v6);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v20 = sub_23D66C384();
    v21 = *(void (**)(char *, uint64_t))(v7 + 8);
    v21(v10, v6);
    v21(v12, v6);
  }
  else
  {
    v20 = 0;
  }
  return v20 & 1;
}

uint64_t sub_23D60E130(uint64_t *a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char v13;
  char v14;
  uint64_t v15;
  char *v16;
  void (*v17)(char *, char *, uint64_t);
  char v18;
  void (*v19)(char *, uint64_t);
  uint64_t v21;

  v6 = sub_23D66BE68();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v12 = (char *)&v21 - v11;
  sub_23D5E6578(*a1, a1[1]);
  if ((v13 & 1) != 0 && (sub_23D5E6578(a1[2], a1[3]), (v14 & 1) != 0))
  {
    v15 = a3(0);
    v16 = (char *)a1 + *(int *)(v15 + 24);
    v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v12, v16, v6);
    v17(v10, (char *)(a2 + *(int *)(v15 + 24)), v6);
    sub_23D5AE928(&qword_256C7A538, (uint64_t (*)(uint64_t))MEMORY[0x24BE5BF10], MEMORY[0x24BE5BF20]);
    v18 = sub_23D66C384();
    v19 = *(void (**)(char *, uint64_t))(v7 + 8);
    v19(v10, v6);
    v19(v12, v6);
  }
  else
  {
    v18 = 0;
  }
  return v18 & 1;
}

unint64_t sub_23D60E278()
{
  unint64_t result;

  result = qword_256C7A5C0;
  if (!qword_256C7A5C0)
  {
    result = MEMORY[0x242636790](&unk_23D6730D8, &type metadata for GKCrypto_Role);
    atomic_store(result, (unint64_t *)&qword_256C7A5C0);
  }
  return result;
}

unint64_t sub_23D60E2BC()
{
  unint64_t result;

  result = qword_256C7A618;
  if (!qword_256C7A618)
  {
    result = MEMORY[0x242636790](&unk_23D673090, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(result, (unint64_t *)&qword_256C7A618);
  }
  return result;
}

uint64_t __swift_memcpy9_8(uint64_t result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(_QWORD *)result = v2;
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_Role()
{
  return &type metadata for GKCrypto_Role;
}

uint64_t *sub_23D60E324(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_23D5AFA60(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    a1[4] = a2[4];
    v11 = *(int *)(a3 + 28);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23D66BE68();
    v15 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16);
    swift_bridgeObjectRetain();
    v15(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_23D60E3F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  swift_bridgeObjectRelease();
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_23D60E44C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  a1[4] = a2[4];
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66BE68();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16);
  swift_bridgeObjectRetain();
  v14(v11, v12, v13);
  return a1;
}

uint64_t *sub_23D60E4EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_23D5AFA60(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_23D5DDA20(v12, v13);
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v14 = *(int *)(a3 + 28);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_23D60E5A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  v5 = *(int *)(a3 + 28);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_23D60E604(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = *(_OWORD *)(a2 + 16);
  sub_23D5DDA20(v8, v9);
  a1[4] = *(_QWORD *)(a2 + 32);
  swift_bridgeObjectRelease();
  v10 = *(int *)(a3 + 28);
  v11 = (char *)a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_23D60E694()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60E6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)(a1 + 32);
    if (v4 >= 0xFFFFFFFF)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_23D60E71C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60E728(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)(result + 32) = (a2 - 1);
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D60E79C()
{
  return sub_23D6154D0();
}

uint64_t *sub_23D60E7B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_23D5AFA60(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a2[4];
    v12 = a2[5];
    sub_23D5AFA60(v11, v12);
    a1[4] = v11;
    a1[5] = v12;
    v13 = a2[6];
    v14 = a2[7];
    sub_23D5AFA60(v13, v14);
    a1[6] = v13;
    a1[7] = v14;
    v15 = *(int *)(a3 + 32);
    v16 = (char *)a1 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return a1;
}

uint64_t sub_23D60E894(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_23D5DDA20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_23D5DDA20(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_23D60E8F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a2[4];
  v11 = a2[5];
  sub_23D5AFA60(v10, v11);
  a1[4] = v10;
  a1[5] = v11;
  v12 = a2[6];
  v13 = a2[7];
  sub_23D5AFA60(v12, v13);
  a1[6] = v12;
  a1[7] = v13;
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t *sub_23D60E9AC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_23D5AFA60(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_23D5DDA20(v12, v13);
  v14 = a2[4];
  v15 = a2[5];
  sub_23D5AFA60(v14, v15);
  v16 = a1[4];
  v17 = a1[5];
  a1[4] = v14;
  a1[5] = v15;
  sub_23D5DDA20(v16, v17);
  v18 = a2[6];
  v19 = a2[7];
  sub_23D5AFA60(v18, v19);
  v20 = a1[6];
  v21 = a1[7];
  a1[6] = v18;
  a1[7] = v19;
  sub_23D5DDA20(v20, v21);
  v22 = *(int *)(a3 + 32);
  v23 = (char *)a1 + v22;
  v24 = (char *)a2 + v22;
  v25 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

_OWORD *sub_23D60EA80(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = a2[3];
  a1[2] = a2[2];
  a1[3] = v5;
  v6 = *(int *)(a3 + 32);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  return a1;
}

uint64_t *sub_23D60EAE4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_23D5DDA20(v8, v9);
  v10 = a1[4];
  v11 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_23D5DDA20(v10, v11);
  v12 = a1[6];
  v13 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_23D5DDA20(v12, v13);
  v14 = *(int *)(a3 + 32);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_23D60EB84()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60EB94()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60EBBC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60EBCC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60EBDC()
{
  return sub_23D615FCC();
}

uint64_t *sub_23D60EBE8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_23D60EC94(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D60ECE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_23D60ED60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

uint64_t sub_23D60EDE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v4 = *(int *)(a3 + 24);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D60EE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_23D60EEC4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60EED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_23D60EF58()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D60EF64(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 24), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D60EFE0()
{
  return sub_23D615FCC();
}

uint64_t *sub_23D60EFF0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v3;
  uint64_t v4;
  uint64_t *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void (*v19)(char *, char *, uint64_t);
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;

  v3 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    v7 = (uint64_t *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    v7 = a1;
    v8 = a3[5];
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23D66BE68();
    v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
    swift_bridgeObjectRetain();
    v12(v9, v10, v11);
    v13 = a3[6];
    v14 = (uint64_t *)((char *)v7 + v13);
    v15 = (uint64_t *)((char *)a2 + v13);
    v16 = type metadata accessor for GKCrypto_VersionedSeed(0);
    v17 = *(_QWORD *)(v16 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
    {
      v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v14 = *(_DWORD *)v15;
      v43 = v11;
      v19 = v12;
      v20 = v15[1];
      v21 = v15[2];
      sub_23D5AFA60(v20, v21);
      v14[1] = v20;
      v14[2] = v21;
      v12 = v19;
      v11 = v43;
      v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v43);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
    }
    v22 = a3[7];
    v23 = (uint64_t *)((char *)v7 + v22);
    v24 = (uint64_t *)((char *)a2 + v22);
    v25 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
    v26 = *(_QWORD *)(v25 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v26 + 48))(v24, 1, v25))
    {
      v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    }
    else
    {
      v28 = *v24;
      v29 = v24[1];
      sub_23D5AFA60(*v24, v29);
      *v23 = v28;
      v23[1] = v29;
      v12((char *)v23 + *(int *)(v25 + 20), (char *)v24 + *(int *)(v25 + 20), v11);
      v30 = *(int *)(v25 + 24);
      v31 = (_QWORD *)((char *)v23 + v30);
      v32 = (uint64_t *)((char *)v24 + v30);
      v33 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      v34 = *(_QWORD *)(v33 - 8);
      if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
      {
        v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
        memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
      }
      else
      {
        v42 = v12;
        v44 = v34;
        v36 = v11;
        v37 = v32[1];
        v38 = *v32;
        sub_23D5AFA60(*v32, v37);
        *v31 = v38;
        v31[1] = v37;
        v39 = v32[2];
        v40 = v32[3];
        sub_23D5AFA60(v39, v40);
        v31[2] = v39;
        v31[3] = v40;
        v42((char *)v31 + *(int *)(v33 + 24), (char *)v32 + *(int *)(v33 + 24), v36);
        (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v44 + 56))(v31, 0, 1, v33);
      }
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
  }
  return v7;
}

uint64_t sub_23D60F2AC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t);

  swift_bridgeObjectRelease();
  v4 = a1 + a2[5];
  v5 = sub_23D66BE68();
  v13 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v13(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for GKCrypto_VersionedSeed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_23D5DDA20(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    v13(v6 + *(int *)(v7 + 24), v5);
  }
  v8 = a1 + a2[7];
  v9 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    v13(v8 + *(int *)(v9 + 20), v5);
    v11 = v8 + *(int *)(v9 + 24);
    v12 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 48))(v11, 1, v12);
    if (!(_DWORD)result)
    {
      sub_23D5DDA20(*(_QWORD *)v11, *(_QWORD *)(v11 + 8));
      sub_23D5DDA20(*(_QWORD *)(v11 + 16), *(_QWORD *)(v11 + 24));
      return ((uint64_t (*)(uint64_t, uint64_t))v13)(v11 + *(int *)(v12 + 24), v5);
    }
  }
  return result;
}

_QWORD *sub_23D60F418(_QWORD *a1, _QWORD *a2, int *a3)
{
  _QWORD *v5;
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  void (*v41)(char *, char *, uint64_t);
  _QWORD *v42;
  uint64_t v43;

  v5 = a1;
  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 16);
  swift_bridgeObjectRetain();
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)v5 + v11);
  v13 = (_QWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v12 = *(_DWORD *)v13;
    v42 = v5;
    v17 = v9;
    v18 = v10;
    v19 = v13[1];
    v20 = v13[2];
    sub_23D5AFA60(v19, v20);
    v12[1] = v19;
    v12[2] = v20;
    v10 = v18;
    v9 = v17;
    v5 = v42;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v21 = a3[7];
  v22 = (_QWORD *)((char *)v5 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = *v23;
    v28 = v23[1];
    sub_23D5AFA60(*v23, v28);
    *v22 = v27;
    v22[1] = v28;
    v10((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v9);
    v29 = *(int *)(v24 + 24);
    v30 = (_QWORD *)((char *)v22 + v29);
    v31 = (uint64_t *)((char *)v23 + v29);
    v32 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    v33 = *(_QWORD *)(v32 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v33 + 48))(v31, 1, v32))
    {
      v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v34 - 8) + 64));
    }
    else
    {
      v41 = v10;
      v43 = v33;
      v35 = v9;
      v36 = v31[1];
      v37 = *v31;
      sub_23D5AFA60(*v31, v36);
      *v30 = v37;
      v30[1] = v36;
      v38 = v31[2];
      v39 = v31[3];
      sub_23D5AFA60(v38, v39);
      v30[2] = v38;
      v30[3] = v39;
      v41((char *)v30 + *(int *)(v32 + 24), (char *)v31 + *(int *)(v32 + 24), v35);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v43 + 56))(v30, 0, 1, v32);
    }
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return v5;
}

_QWORD *sub_23D60F6B4(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  size_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t (*v54)(uint64_t *, uint64_t, uint64_t);
  int v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  void (*v73)(char *, char *, uint64_t);
  void (*v74)(char *, char *, uint64_t);
  uint64_t v75;
  uint64_t v76;

  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  v75 = *(_QWORD *)(v9 - 8);
  v73 = *(void (**)(char *, char *, uint64_t))(v75 + 24);
  v73(v7, v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      *(_DWORD *)v11 = *(_DWORD *)v12;
      v18 = *((_QWORD *)v12 + 1);
      v19 = *((_QWORD *)v12 + 2);
      sub_23D5AFA60(v18, v19);
      *((_QWORD *)v11 + 1) = v18;
      *((_QWORD *)v11 + 2) = v19;
      (*(void (**)(char *, char *, uint64_t))(v75 + 16))(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    sub_23D5E6950((uint64_t)v11, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v11 = *(_DWORD *)v12;
  v41 = *((_QWORD *)v12 + 1);
  v42 = *((_QWORD *)v12 + 2);
  sub_23D5AFA60(v41, v42);
  v43 = *((_QWORD *)v11 + 1);
  v44 = *((_QWORD *)v11 + 2);
  *((_QWORD *)v11 + 1) = v41;
  *((_QWORD *)v11 + 2) = v42;
  sub_23D5DDA20(v43, v44);
  v73(&v11[*(int *)(v13 + 24)], &v12[*(int *)(v13 + 24)], v9);
LABEL_7:
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (_QWORD *)((char *)a2 + v21);
  v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v45 = *v23;
      v46 = v23[1];
      sub_23D5AFA60(*v23, v46);
      v47 = *v22;
      v48 = v22[1];
      *v22 = v45;
      v22[1] = v46;
      sub_23D5DDA20(v47, v48);
      v73((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v9);
      v49 = *(int *)(v24 + 24);
      v50 = (uint64_t *)((char *)v22 + v49);
      v51 = (uint64_t *)((char *)v23 + v49);
      v52 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      v53 = *(_QWORD *)(v52 - 8);
      v54 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v53 + 48);
      LODWORD(v45) = v54(v50, 1, v52);
      v55 = v54(v51, 1, v52);
      if ((_DWORD)v45)
      {
        if (!v55)
        {
          v56 = *v51;
          v57 = v51[1];
          sub_23D5AFA60(*v51, v57);
          *v50 = v56;
          v50[1] = v57;
          v58 = v51[2];
          v59 = v51[3];
          sub_23D5AFA60(v58, v59);
          v50[2] = v58;
          v50[3] = v59;
          (*(void (**)(char *, char *, uint64_t))(v75 + 16))((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v9);
          (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v53 + 56))(v50, 0, 1, v52);
          return a1;
        }
      }
      else
      {
        if (!v55)
        {
          v65 = *v51;
          v66 = v51[1];
          sub_23D5AFA60(*v51, v66);
          v67 = *v50;
          v68 = v50[1];
          *v50 = v65;
          v50[1] = v66;
          sub_23D5DDA20(v67, v68);
          v69 = v51[2];
          v70 = v51[3];
          sub_23D5AFA60(v69, v70);
          v71 = v50[2];
          v72 = v50[3];
          v50[2] = v69;
          v50[3] = v70;
          sub_23D5DDA20(v71, v72);
          v73((char *)v50 + *(int *)(v52 + 24), (char *)v51 + *(int *)(v52 + 24), v9);
          return a1;
        }
        sub_23D5E6950((uint64_t)v50, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0) - 8) + 64);
      v39 = v50;
      v40 = v51;
      goto LABEL_14;
    }
    sub_23D5E6950((uint64_t)v22, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_13:
    v38 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8) - 8) + 64);
    v39 = v22;
    v40 = v23;
LABEL_14:
    memcpy(v39, v40, v38);
    return a1;
  }
  if (v28)
    goto LABEL_13;
  v29 = *v23;
  v30 = v23[1];
  sub_23D5AFA60(*v23, v30);
  *v22 = v29;
  v22[1] = v30;
  v31 = *(void (**)(char *, char *, uint64_t))(v75 + 16);
  v31((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v9);
  v32 = *(int *)(v24 + 24);
  v33 = (uint64_t *)((char *)v22 + v32);
  v34 = (uint64_t *)((char *)v23 + v32);
  v35 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v36 = *(_QWORD *)(v35 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v36 + 48))(v34, 1, v35))
  {
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v33, v34, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
  }
  else
  {
    v74 = v31;
    v76 = v36;
    v60 = *v34;
    v61 = v34[1];
    sub_23D5AFA60(*v34, v61);
    *v33 = v60;
    v33[1] = v61;
    v62 = v34[2];
    v63 = v34[3];
    sub_23D5AFA60(v62, v63);
    v33[2] = v62;
    v33[3] = v63;
    v74((char *)v33 + *(int *)(v35 + 24), (char *)v34 + *(int *)(v35 + 24), v9);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v76 + 56))(v33, 0, 1, v35);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

_QWORD *sub_23D60FB4C(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *(_OWORD *)(v12 + 2) = *(_OWORD *)(v13 + 2);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    v23 = *(int *)(v20 + 24);
    v24 = (_OWORD *)((char *)v18 + v23);
    v25 = (_OWORD *)((char *)v19 + v23);
    v26 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = v25[1];
      *v24 = *v25;
      v24[1] = v29;
      v10((char *)v24 + *(int *)(v26 + 24), (char *)v25 + *(int *)(v26 + 24), v9);
      (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

_QWORD *sub_23D60FD78(_QWORD *a1, _QWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *);
  uint64_t v11;
  _QWORD *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t (*v16)(char *, uint64_t, uint64_t);
  int v17;
  int v18;
  uint64_t v19;
  void (*v20)(char *, char *, uint64_t);
  uint64_t v21;
  uint64_t *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  int v28;
  void (*v29)(char *, char *, uint64_t);
  uint64_t v30;
  _OWORD *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  size_t v36;
  void *v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t (*v48)(uint64_t, uint64_t, uint64_t);
  int v49;
  int v50;
  __int128 v51;
  __int128 v52;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;

  *a1 = *a2;
  swift_bridgeObjectRelease();
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  v58 = *(_QWORD *)(v9 - 8);
  v59 = v9;
  v10 = *(void (**)(char *, char *))(v58 + 40);
  v10(v7, v8);
  v11 = a3[6];
  v12 = (_QWORD *)((char *)a1 + v11);
  v13 = (char *)a2 + v11;
  v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v15 = *(_QWORD *)(v14 - 8);
  v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  v17 = v16((char *)v12, 1, v14);
  v18 = v16(v13, 1, v14);
  if (v17)
  {
    if (!v18)
    {
      *(_DWORD *)v12 = *(_DWORD *)v13;
      *(_OWORD *)(v12 + 1) = *(_OWORD *)(v13 + 8);
      (*(void (**)(char *, char *, uint64_t))(v58 + 32))((char *)v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v59);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
LABEL_7:
      v20 = (void (*)(char *, char *, uint64_t))v10;
      goto LABEL_8;
    }
LABEL_6:
    v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    goto LABEL_7;
  }
  if (v18)
  {
    sub_23D5E6950((uint64_t)v12, type metadata accessor for GKCrypto_VersionedSeed);
    goto LABEL_6;
  }
  *(_DWORD *)v12 = *(_DWORD *)v13;
  v39 = v12[1];
  v40 = v12[2];
  *(_OWORD *)(v12 + 1) = *(_OWORD *)(v13 + 8);
  sub_23D5DDA20(v39, v40);
  v20 = (void (*)(char *, char *, uint64_t))v10;
  ((void (*)(char *, char *, uint64_t))v10)((char *)v12 + *(int *)(v14 + 24), &v13[*(int *)(v14 + 24)], v59);
LABEL_8:
  v21 = a3[7];
  v22 = (_QWORD *)((char *)a1 + v21);
  v23 = (char *)a2 + v21;
  v24 = type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26((uint64_t *)v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v41 = *v22;
      v42 = v22[1];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      sub_23D5DDA20(v41, v42);
      v20((char *)v22 + *(int *)(v24 + 20), &v23[*(int *)(v24 + 20)], v59);
      v43 = *(int *)(v24 + 24);
      v44 = (uint64_t)v22 + v43;
      v45 = &v23[v43];
      v46 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
      v47 = *(_QWORD *)(v46 - 8);
      v48 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
      v49 = v48(v44, 1, v46);
      v50 = v48((uint64_t)v45, 1, v46);
      if (v49)
      {
        if (!v50)
        {
          v51 = *((_OWORD *)v45 + 1);
          *(_OWORD *)v44 = *(_OWORD *)v45;
          *(_OWORD *)(v44 + 16) = v51;
          (*(void (**)(uint64_t, char *, uint64_t))(v58 + 32))(v44 + *(int *)(v46 + 24), &v45[*(int *)(v46 + 24)], v59);
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v47 + 56))(v44, 0, 1, v46);
          return a1;
        }
      }
      else
      {
        if (!v50)
        {
          v54 = *(_QWORD *)v44;
          v55 = *(_QWORD *)(v44 + 8);
          *(_OWORD *)v44 = *(_OWORD *)v45;
          sub_23D5DDA20(v54, v55);
          v56 = *(_QWORD *)(v44 + 16);
          v57 = *(_QWORD *)(v44 + 24);
          *(_OWORD *)(v44 + 16) = *((_OWORD *)v45 + 1);
          sub_23D5DDA20(v56, v57);
          v20((char *)(v44 + *(int *)(v46 + 24)), &v45[*(int *)(v46 + 24)], v59);
          return a1;
        }
        sub_23D5E6950(v44, type metadata accessor for GKCrypto_AdminGroupBlob);
      }
      v36 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0) - 8) + 64);
      v37 = (void *)v44;
      v38 = v45;
      goto LABEL_15;
    }
    sub_23D5E6950((uint64_t)v22, type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
LABEL_14:
    v36 = *(_QWORD *)(*(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8) - 8) + 64);
    v37 = v22;
    v38 = v23;
LABEL_15:
    memcpy(v37, v38, v36);
    return a1;
  }
  if (v28)
    goto LABEL_14;
  *(_OWORD *)v22 = *(_OWORD *)v23;
  v29 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
  v29((char *)v22 + *(int *)(v24 + 20), &v23[*(int *)(v24 + 20)], v59);
  v30 = *(int *)(v24 + 24);
  v31 = (_OWORD *)((char *)v22 + v30);
  v32 = &v23[v30];
  v33 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v34 = *(_QWORD *)(v33 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
  {
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
  }
  else
  {
    v52 = *((_OWORD *)v32 + 1);
    *v31 = *(_OWORD *)v32;
    v31[1] = v52;
    v29((char *)v31 + *(int *)(v33 + 24), &v32[*(int *)(v33 + 24)], v59);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
  }
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_23D610170()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D61017C(char *a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    v4 = *(_QWORD *)a1;
    if (*(_QWORD *)a1 >= 0xFFFFFFFFuLL)
      LODWORD(v4) = -1;
    return (v4 + 1);
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(&a1[v11], a2, v10);
  }
}

uint64_t sub_23D610248()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D610254(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(_QWORD *)result = (a2 - 1);
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D8);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_23D61031C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D6124A8(a1, a2, a3, MEMORY[0x24BEE0158] + 64, qword_256C7A960, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAETextToSign.GroupAssociatedData);
}

unint64_t sub_23D61033C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v17 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_23D5AFA60(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_23D5AFA60(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
    v11 = *(_QWORD *)(a2 + 48);
    v12 = *(_QWORD *)(a2 + 56);
    sub_23D5AFA60(v11, v12);
    *(_QWORD *)(a1 + 48) = v11;
    *(_QWORD *)(a1 + 56) = v12;
    v13 = *(int *)(a3 + 32);
    v14 = a1 + v13;
    v15 = a2 + v13;
    v16 = sub_23D66BE68();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return a1;
}

uint64_t sub_23D610418(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_23D5DDA20(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  v4 = a1 + *(int *)(a2 + 32);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D610474(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a2 + 48);
  v11 = *(_QWORD *)(a2 + 56);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 48) = v10;
  *(_QWORD *)(a1 + 56) = v11;
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D610524(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  v15 = *(_QWORD *)(a2 + 48);
  v16 = *(_QWORD *)(a2 + 56);
  sub_23D5AFA60(v15, v16);
  v17 = *(_QWORD *)(a1 + 48);
  v18 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v16;
  sub_23D5DDA20(v17, v18);
  v19 = *(int *)(a3 + 32);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_23D6105EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  v5 = *(int *)(a3 + 32);
  v6 = a1 + v5;
  v7 = a2 + v5;
  v8 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t sub_23D610660(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_23D5DDA20(v8, v9);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_23D5DDA20(v10, v11);
  v12 = *(int *)(a3 + 32);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D610700()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_7Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 32), a2, v8);
  }
}

uint64_t sub_23D610798()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_8Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 32)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D610824()
{
  return sub_23D610830();
}

uint64_t sub_23D610830()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D6108A8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 24);
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      sub_23D5AFA60(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v23 = v16[2];
      v24 = v16[3];
      sub_23D5AFA60(v23, v24);
      v15[2] = v23;
      v15[3] = v24;
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return a1;
}

uint64_t sub_23D610A0C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23D66BE68();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 24);
  v7 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    sub_23D5DDA20(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 24), v5);
  }
  return result;
}

uint64_t *sub_23D610AD8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66BE68();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 24);
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    sub_23D5AFA60(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v21 = v15[2];
    v22 = v15[3];
    sub_23D5AFA60(v21, v22);
    v14[2] = v21;
    v14[3] = v22;
    v12((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t *sub_23D610C10(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(char *, char *, uint64_t);
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t *, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66BE68();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 24);
  v17 = (uint64_t *)((char *)a1 + v16);
  v18 = (uint64_t *)((char *)a2 + v16);
  v19 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v29 = *v18;
      v30 = v18[1];
      sub_23D5AFA60(*v18, v30);
      v31 = *v17;
      v32 = v17[1];
      *v17 = v29;
      v17[1] = v30;
      sub_23D5DDA20(v31, v32);
      v33 = v18[2];
      v34 = v18[3];
      sub_23D5AFA60(v33, v34);
      v35 = v17[2];
      v36 = v17[3];
      v17[2] = v33;
      v17[3] = v34;
      sub_23D5DDA20(v35, v36);
      v15((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v13);
      return a1;
    }
    sub_23D5E6950((uint64_t)v17, type metadata accessor for GKCrypto_AdminGroupBlob);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v17, v18, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
    return a1;
  }
  v23 = *v18;
  v24 = v18[1];
  sub_23D5AFA60(*v18, v24);
  *v17 = v23;
  v17[1] = v24;
  v25 = v18[2];
  v26 = v18[3];
  sub_23D5AFA60(v25, v26);
  v17[2] = v25;
  v17[3] = v26;
  (*(void (**)(char *, char *, uint64_t))(v14 + 16))((char *)v17 + *(int *)(v19 + 24), (char *)v18 + *(int *)(v19 + 24), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

_OWORD *sub_23D610DD0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;

  *a1 = *a2;
  v6 = *(int *)(a3 + 20);
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 24);
  v12 = (_OWORD *)((char *)a1 + v11);
  v13 = (_OWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t *sub_23D610ED4(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t *, uint64_t, uint64_t);
  int v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66BE68();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 24);
  v15 = (uint64_t *)((char *)a1 + v14);
  v16 = (uint64_t *)((char *)a2 + v14);
  v17 = type metadata accessor for GKCrypto_AdminGroupBlob(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v24 = *v15;
      v25 = v15[1];
      *(_OWORD *)v15 = *(_OWORD *)v16;
      sub_23D5DDA20(v24, v25);
      v26 = v15[2];
      v27 = v15[3];
      *((_OWORD *)v15 + 1) = *((_OWORD *)v16 + 1);
      sub_23D5DDA20(v26, v27);
      v13((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v11);
      return a1;
    }
    sub_23D5E6950((uint64_t)v15, type metadata accessor for GKCrypto_AdminGroupBlob);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    return a1;
  }
  v21 = *((_OWORD *)v16 + 1);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *((_OWORD *)v15 + 1) = v21;
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_23D611054()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D611060(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = *(int *)(a3 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a3 + 24);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23D611110()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D61111C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = *(int *)(a4 + 20);
    }
    else
    {
      v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799F0);
      v9 = *(_QWORD *)(v10 - 8);
      v11 = *(int *)(a4 + 24);
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_23D6111C4()
{
  unint64_t v0;
  unint64_t v1;

  sub_23D66BE68();
  if (v0 <= 0x3F)
  {
    sub_23D5F5B08(319, qword_256C7AAA0, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminGroupBlob);
    if (v1 <= 0x3F)
      swift_initStructMetadata();
  }
}

uint64_t sub_23D61127C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D61128C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D61129C()
{
  return sub_23D6154D0();
}

uint64_t *sub_23D6112B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t sub_23D611358(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_23D6113A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *sub_23D61141C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *sub_23D61149C(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *sub_23D6114F8(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_23D611568()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D611574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t sub_23D6115FC()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D611608(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D611684()
{
  return sub_23D611690();
}

uint64_t sub_23D611690()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D6116FC(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  void (*v32)(char *, char *, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = a3[6];
    v15 = (uint64_t *)((char *)a1 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for GKCrypto_VersionedSeed(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      v32 = v13;
      v21 = v16[1];
      v22 = v16[2];
      sub_23D5AFA60(v21, v22);
      v15[1] = v21;
      v15[2] = v22;
      v13 = v32;
      v32((char *)v15 + *(int *)(v17 + 24), (char *)v16 + *(int *)(v17 + 24), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
    v23 = a3[7];
    v24 = (uint64_t *)((char *)a1 + v23);
    v25 = (uint64_t *)((char *)a2 + v23);
    v26 = type metadata accessor for GKCrypto_AdminMetaData(0);
    v27 = *(_QWORD *)(v26 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v27 + 48))(v25, 1, v26))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
      memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      v29 = *v25;
      v30 = v25[1];
      sub_23D5AFA60(*v25, v30);
      *v24 = v29;
      v24[1] = v30;
      v13((char *)v24 + *(int *)(v26 + 20), (char *)v25 + *(int *)(v26 + 20), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
    }
  }
  return a1;
}

uint64_t sub_23D6118FC(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  void (*v11)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = sub_23D66BE68();
  v11 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v11(v4, v5);
  v6 = a1 + a2[6];
  v7 = type metadata accessor for GKCrypto_VersionedSeed(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7))
  {
    sub_23D5DDA20(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    v11(v6 + *(int *)(v7 + 24), v5);
  }
  v8 = a1 + a2[7];
  v9 = type metadata accessor for GKCrypto_AdminMetaData(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v9 - 8) + 48))(v8, 1, v9);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v8, *(_QWORD *)(v8 + 8));
    return ((uint64_t (*)(uint64_t, uint64_t))v11)(v8 + *(int *)(v9 + 20), v5);
  }
  return result;
}

uint64_t *sub_23D611A18(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void (*v30)(char *, char *, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66BE68();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = a3[6];
  v14 = (uint64_t *)((char *)a1 + v13);
  v15 = (uint64_t *)((char *)a2 + v13);
  v16 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_QWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *(_DWORD *)v14 = *(_DWORD *)v15;
    v30 = v12;
    v19 = v15[1];
    v20 = v15[2];
    sub_23D5AFA60(v19, v20);
    v14[1] = v19;
    v14[2] = v20;
    v12 = v30;
    v30((char *)v14 + *(int *)(v16 + 24), (char *)v15 + *(int *)(v16 + 24), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  v21 = a3[7];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v25 = *(_QWORD *)(v24 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48))(v23, 1, v24))
  {
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
  }
  else
  {
    v27 = *v23;
    v28 = v23[1];
    sub_23D5AFA60(*v23, v28);
    *v22 = v27;
    v22[1] = v28;
    v12((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  return a1;
}

uint64_t *sub_23D611BEC(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t (*v30)(uint64_t *, uint64_t, uint64_t);
  int v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void (*v45)(char *, char *, uint64_t);
  uint64_t v46;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66BE68();
  v46 = *(_QWORD *)(v13 - 8);
  v45 = *(void (**)(char *, char *, uint64_t))(v46 + 24);
  v45(v11, v12, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      v22 = *((_QWORD *)v16 + 1);
      v23 = *((_QWORD *)v16 + 2);
      sub_23D5AFA60(v22, v23);
      *((_QWORD *)v15 + 1) = v22;
      *((_QWORD *)v15 + 2) = v23;
      (*(void (**)(char *, char *, uint64_t))(v46 + 16))(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    sub_23D5E6950((uint64_t)v15, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v15 = *(_DWORD *)v16;
  v37 = *((_QWORD *)v16 + 1);
  v38 = *((_QWORD *)v16 + 2);
  sub_23D5AFA60(v37, v38);
  v39 = *((_QWORD *)v15 + 1);
  v40 = *((_QWORD *)v15 + 2);
  *((_QWORD *)v15 + 1) = v37;
  *((_QWORD *)v15 + 2) = v38;
  sub_23D5DDA20(v39, v40);
  v45(&v15[*(int *)(v17 + 24)], &v16[*(int *)(v17 + 24)], v13);
LABEL_7:
  v25 = a3[7];
  v26 = (uint64_t *)((char *)a1 + v25);
  v27 = (uint64_t *)((char *)a2 + v25);
  v28 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v29 = *(_QWORD *)(v28 - 8);
  v30 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v29 + 48);
  v31 = v30(v26, 1, v28);
  v32 = v30(v27, 1, v28);
  if (!v31)
  {
    if (!v32)
    {
      v41 = *v27;
      v42 = v27[1];
      sub_23D5AFA60(*v27, v42);
      v43 = *v26;
      v44 = v26[1];
      *v26 = v41;
      v26[1] = v42;
      sub_23D5DDA20(v43, v44);
      v45((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v13);
      return a1;
    }
    sub_23D5E6950((uint64_t)v26, type metadata accessor for GKCrypto_AdminMetaData);
    goto LABEL_12;
  }
  if (v32)
  {
LABEL_12:
    v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    return a1;
  }
  v33 = *v27;
  v34 = v27[1];
  sub_23D5AFA60(*v27, v34);
  *v26 = v33;
  v26[1] = v34;
  (*(void (**)(char *, char *, uint64_t))(v46 + 16))((char *)v26 + *(int *)(v28 + 20), (char *)v27 + *(int *)(v28 + 20), v13);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  return a1;
}

_OWORD *sub_23D611EA8(_OWORD *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *a1 = *a2;
  v6 = a3[5];
  v7 = (char *)a1 + v6;
  v8 = (char *)a2 + v6;
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = a3[6];
  v12 = (_DWORD *)((char *)a1 + v11);
  v13 = (_DWORD *)((char *)a2 + v11);
  v14 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *(_OWORD *)(v12 + 2) = *(_OWORD *)(v13 + 2);
    v10((char *)v12 + *(int *)(v14 + 24), (char *)v13 + *(int *)(v14 + 24), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  v17 = a3[7];
  v18 = (_OWORD *)((char *)a1 + v17);
  v19 = (_OWORD *)((char *)a2 + v17);
  v20 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v21 = *(_QWORD *)(v20 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v21 + 48))(v19, 1, v20))
  {
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
    memcpy(v18, v19, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
  }
  else
  {
    *v18 = *v19;
    v10((char *)v18 + *(int *)(v20 + 20), (char *)v19 + *(int *)(v20 + 20), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v21 + 56))(v18, 0, 1, v20);
  }
  return a1;
}

uint64_t *sub_23D612048(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t (*v17)(char *, uint64_t, uint64_t);
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(uint64_t *, uint64_t, uint64_t);
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void (*v35)(char *, char *, uint64_t);
  uint64_t v36;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66BE68();
  v36 = *(_QWORD *)(v11 - 8);
  v35 = *(void (**)(char *, char *, uint64_t))(v36 + 40);
  v35(v9, v10, v11);
  v12 = a3[6];
  v13 = (uint64_t *)((char *)a1 + v12);
  v14 = (char *)a2 + v12;
  v15 = type metadata accessor for GKCrypto_VersionedSeed(0);
  v16 = *(_QWORD *)(v15 - 8);
  v17 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v16 + 48);
  v18 = v17((char *)v13, 1, v15);
  v19 = v17(v14, 1, v15);
  if (v18)
  {
    if (!v19)
    {
      *(_DWORD *)v13 = *(_DWORD *)v14;
      *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 8);
      (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v11);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v19)
  {
    sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_VersionedSeed);
LABEL_6:
    v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
    memcpy(v13, v14, *(_QWORD *)(*(_QWORD *)(v20 - 8) + 64));
    goto LABEL_7;
  }
  *(_DWORD *)v13 = *(_DWORD *)v14;
  v31 = v13[1];
  v32 = v13[2];
  *(_OWORD *)(v13 + 1) = *(_OWORD *)(v14 + 8);
  sub_23D5DDA20(v31, v32);
  v35((char *)v13 + *(int *)(v15 + 24), &v14[*(int *)(v15 + 24)], v11);
LABEL_7:
  v21 = a3[7];
  v22 = (uint64_t *)((char *)a1 + v21);
  v23 = (uint64_t *)((char *)a2 + v21);
  v24 = type metadata accessor for GKCrypto_AdminMetaData(0);
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v25 + 48);
  v27 = v26(v22, 1, v24);
  v28 = v26(v23, 1, v24);
  if (!v27)
  {
    if (!v28)
    {
      v33 = *v22;
      v34 = v22[1];
      *(_OWORD *)v22 = *(_OWORD *)v23;
      sub_23D5DDA20(v33, v34);
      v35((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v11);
      return a1;
    }
    sub_23D5E6950((uint64_t)v22, type metadata accessor for GKCrypto_AdminMetaData);
    goto LABEL_12;
  }
  if (v28)
  {
LABEL_12:
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
    return a1;
  }
  *(_OWORD *)v22 = *(_OWORD *)v23;
  (*(void (**)(char *, char *, uint64_t))(v36 + 32))((char *)v22 + *(int *)(v24 + 20), (char *)v23 + *(int *)(v24 + 20), v11);
  (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  return a1;
}

uint64_t sub_23D6122CC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6122D8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      v10 = v8;
      v11 = a3[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        v10 = v12;
        v11 = a3[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a3[7];
      }
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }
}

uint64_t sub_23D6123B0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D6123BC(char *result, uint64_t a2, int a3, int *a4)
{
  char *v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v8 = sub_23D66BE68();
    v9 = *(_QWORD *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v8;
      v11 = a4[5];
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799D0);
      v9 = *(_QWORD *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = v12;
        v11 = a4[6];
      }
      else
      {
        v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A28);
        v9 = *(_QWORD *)(v10 - 8);
        v11 = a4[7];
      }
    }
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(&v5[v11], a2, a2, v10);
  }
  return result;
}

void sub_23D61248C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D6124A8(a1, a2, a3, (uint64_t)&unk_23D66FDA8, qword_256C7AC68, (void (*)(uint64_t))type metadata accessor for GKCrypto_AdminMetaData);
}

void sub_23D6124A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5, void (*a6)(uint64_t))
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;

  sub_23D66BE68();
  if (v8 <= 0x3F)
  {
    sub_23D5F5B08(319, &qword_256C7A958, (void (*)(uint64_t))type metadata accessor for GKCrypto_VersionedSeed);
    if (v9 <= 0x3F)
    {
      sub_23D5F5B08(319, a5, a6);
      if (v10 <= 0x3F)
        swift_initStructMetadata();
    }
  }
}

unint64_t sub_23D612574(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v27 = *(_QWORD *)a2;
    *(_QWORD *)a1 = *(_QWORD *)a2;
    a1 = v27 + ((v5 + 16) & ~(unint64_t)v5);
    swift_retain();
  }
  else
  {
    v7 = *(_QWORD *)a2;
    v8 = *(_QWORD *)(a2 + 8);
    sub_23D5AFA60(*(_QWORD *)a2, v8);
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v8;
    v9 = *(_QWORD *)(a2 + 16);
    v10 = *(_QWORD *)(a2 + 24);
    sub_23D5AFA60(v9, v10);
    *(_QWORD *)(a1 + 16) = v9;
    *(_QWORD *)(a1 + 24) = v10;
    v11 = *(_QWORD *)(a2 + 32);
    v12 = *(_QWORD *)(a2 + 40);
    sub_23D5AFA60(v11, v12);
    *(_QWORD *)(a1 + 32) = v11;
    *(_QWORD *)(a1 + 40) = v12;
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_QWORD *)(a2 + 56);
    sub_23D5AFA60(v13, v14);
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v14;
    v15 = *(_QWORD *)(a2 + 64);
    v16 = *(_QWORD *)(a2 + 72);
    sub_23D5AFA60(v15, v16);
    *(_QWORD *)(a1 + 64) = v15;
    *(_QWORD *)(a1 + 72) = v16;
    v17 = *(_QWORD *)(a2 + 80);
    v18 = *(_QWORD *)(a2 + 88);
    sub_23D5AFA60(v17, v18);
    *(_QWORD *)(a1 + 80) = v17;
    *(_QWORD *)(a1 + 88) = v18;
    v19 = *(_QWORD *)(a2 + 96);
    v20 = *(_QWORD *)(a2 + 104);
    sub_23D5AFA60(v19, v20);
    *(_QWORD *)(a1 + 96) = v19;
    *(_QWORD *)(a1 + 104) = v20;
    *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
    v21 = *(_QWORD *)(a2 + 120);
    v22 = *(_QWORD *)(a2 + 128);
    sub_23D5AFA60(v21, v22);
    *(_QWORD *)(a1 + 120) = v21;
    *(_QWORD *)(a1 + 128) = v22;
    v23 = *(int *)(a3 + 52);
    v24 = a1 + v23;
    v25 = a2 + v23;
    v26 = sub_23D66BE68();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v26 - 8) + 16))(v24, v25, v26);
  }
  return a1;
}

uint64_t sub_23D6126AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_23D5DDA20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  sub_23D5DDA20(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
  sub_23D5DDA20(*(_QWORD *)(a1 + 64), *(_QWORD *)(a1 + 72));
  sub_23D5DDA20(*(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88));
  sub_23D5DDA20(*(_QWORD *)(a1 + 96), *(_QWORD *)(a1 + 104));
  sub_23D5DDA20(*(_QWORD *)(a1 + 120), *(_QWORD *)(a1 + 128));
  v4 = a1 + *(int *)(a2 + 52);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D612730(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v7);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  v8 = *(_QWORD *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 16) = v8;
  *(_QWORD *)(a1 + 24) = v9;
  v10 = *(_QWORD *)(a2 + 32);
  v11 = *(_QWORD *)(a2 + 40);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 32) = v10;
  *(_QWORD *)(a1 + 40) = v11;
  v12 = *(_QWORD *)(a2 + 48);
  v13 = *(_QWORD *)(a2 + 56);
  sub_23D5AFA60(v12, v13);
  *(_QWORD *)(a1 + 48) = v12;
  *(_QWORD *)(a1 + 56) = v13;
  v14 = *(_QWORD *)(a2 + 64);
  v15 = *(_QWORD *)(a2 + 72);
  sub_23D5AFA60(v14, v15);
  *(_QWORD *)(a1 + 64) = v14;
  *(_QWORD *)(a1 + 72) = v15;
  v16 = *(_QWORD *)(a2 + 80);
  v17 = *(_QWORD *)(a2 + 88);
  sub_23D5AFA60(v16, v17);
  *(_QWORD *)(a1 + 80) = v16;
  *(_QWORD *)(a1 + 88) = v17;
  v18 = *(_QWORD *)(a2 + 96);
  v19 = *(_QWORD *)(a2 + 104);
  sub_23D5AFA60(v18, v19);
  *(_QWORD *)(a1 + 96) = v18;
  *(_QWORD *)(a1 + 104) = v19;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a2 + 120);
  v21 = *(_QWORD *)(a2 + 128);
  sub_23D5AFA60(v20, v21);
  *(_QWORD *)(a1 + 120) = v20;
  *(_QWORD *)(a1 + 128) = v21;
  v22 = *(int *)(a3 + 52);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 16))(v23, v24, v25);
  return a1;
}

uint64_t sub_23D61283C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v6 = *(_QWORD *)a2;
  v7 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v7);
  v8 = *(_QWORD *)a1;
  v9 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + 8) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 16);
  v11 = *(_QWORD *)(a2 + 24);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 16);
  v13 = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = *(_QWORD *)(a2 + 40);
  sub_23D5AFA60(v14, v15);
  v16 = *(_QWORD *)(a1 + 32);
  v17 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 32) = v14;
  *(_QWORD *)(a1 + 40) = v15;
  sub_23D5DDA20(v16, v17);
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  sub_23D5AFA60(v18, v19);
  v20 = *(_QWORD *)(a1 + 48);
  v21 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 48) = v18;
  *(_QWORD *)(a1 + 56) = v19;
  sub_23D5DDA20(v20, v21);
  v22 = *(_QWORD *)(a2 + 64);
  v23 = *(_QWORD *)(a2 + 72);
  sub_23D5AFA60(v22, v23);
  v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v22;
  *(_QWORD *)(a1 + 72) = v23;
  sub_23D5DDA20(v24, v25);
  v26 = *(_QWORD *)(a2 + 80);
  v27 = *(_QWORD *)(a2 + 88);
  sub_23D5AFA60(v26, v27);
  v28 = *(_QWORD *)(a1 + 80);
  v29 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 80) = v26;
  *(_QWORD *)(a1 + 88) = v27;
  sub_23D5DDA20(v28, v29);
  v30 = *(_QWORD *)(a2 + 96);
  v31 = *(_QWORD *)(a2 + 104);
  sub_23D5AFA60(v30, v31);
  v32 = *(_QWORD *)(a1 + 96);
  v33 = *(_QWORD *)(a1 + 104);
  *(_QWORD *)(a1 + 96) = v30;
  *(_QWORD *)(a1 + 104) = v31;
  sub_23D5DDA20(v32, v33);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v34 = *(_QWORD *)(a2 + 120);
  v35 = *(_QWORD *)(a2 + 128);
  sub_23D5AFA60(v34, v35);
  v36 = *(_QWORD *)(a1 + 120);
  v37 = *(_QWORD *)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v34;
  *(_QWORD *)(a1 + 128) = v35;
  sub_23D5DDA20(v36, v37);
  v38 = *(int *)(a3 + 52);
  v39 = a1 + v38;
  v40 = a2 + v38;
  v41 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 24))(v39, v40, v41);
  return a1;
}

uint64_t sub_23D612988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v7 = *(int *)(a3 + 52);
  v8 = a1 + v7;
  v9 = a2 + v7;
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  v10 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D612A0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_23D5DDA20(v10, v11);
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  sub_23D5DDA20(v12, v13);
  v14 = *(_QWORD *)(a1 + 64);
  v15 = *(_QWORD *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  sub_23D5DDA20(v14, v15);
  v16 = *(_QWORD *)(a1 + 80);
  v17 = *(_QWORD *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  sub_23D5DDA20(v16, v17);
  v18 = *(_QWORD *)(a1 + 96);
  v19 = *(_QWORD *)(a1 + 104);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  sub_23D5DDA20(v18, v19);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  v20 = *(_QWORD *)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  sub_23D5DDA20(v20, v21);
  v22 = *(int *)(a3 + 52);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 40))(v23, v24, v25);
  return a1;
}

uint64_t sub_23D612AF4()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D612B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 52), a2, v8);
  }
}

uint64_t sub_23D612B88()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D612B94(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 52)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D612C10()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D612CA0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (uint64_t *)((char *)v4 + v14);
    v16 = (uint64_t *)((char *)a2 + v14);
    v17 = type metadata accessor for GKCrypto_Invite(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      v21 = *v16;
      v22 = v16[1];
      sub_23D5AFA60(*v16, v22);
      *v15 = v21;
      v15[1] = v22;
      v23 = v16[2];
      v24 = v16[3];
      sub_23D5AFA60(v23, v24);
      v15[2] = v23;
      v15[3] = v24;
      v25 = v16[4];
      v26 = v16[5];
      sub_23D5AFA60(v25, v26);
      v15[4] = v25;
      v15[5] = v26;
      v27 = v16[6];
      v28 = v16[7];
      sub_23D5AFA60(v27, v28);
      v15[6] = v27;
      v15[7] = v28;
      v29 = v16[8];
      v30 = v16[9];
      sub_23D5AFA60(v29, v30);
      v15[8] = v29;
      v15[9] = v30;
      v31 = v16[10];
      v32 = v16[11];
      sub_23D5AFA60(v31, v32);
      v15[10] = v31;
      v15[11] = v32;
      v33 = v16[12];
      v34 = v16[13];
      sub_23D5AFA60(v33, v34);
      v15[12] = v33;
      v15[13] = v34;
      *((_DWORD *)v15 + 28) = *((_DWORD *)v16 + 28);
      v35 = v16[15];
      v36 = v16[16];
      sub_23D5AFA60(v35, v36);
      v15[15] = v35;
      v15[16] = v36;
      v13((char *)v15 + *(int *)(v17 + 52), (char *)v16 + *(int *)(v17 + 52), v12);
      (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_23D612E8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23D66BE68();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for GKCrypto_Invite(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)v6, *(_QWORD *)(v6 + 8));
    sub_23D5DDA20(*(_QWORD *)(v6 + 16), *(_QWORD *)(v6 + 24));
    sub_23D5DDA20(*(_QWORD *)(v6 + 32), *(_QWORD *)(v6 + 40));
    sub_23D5DDA20(*(_QWORD *)(v6 + 48), *(_QWORD *)(v6 + 56));
    sub_23D5DDA20(*(_QWORD *)(v6 + 64), *(_QWORD *)(v6 + 72));
    sub_23D5DDA20(*(_QWORD *)(v6 + 80), *(_QWORD *)(v6 + 88));
    sub_23D5DDA20(*(_QWORD *)(v6 + 96), *(_QWORD *)(v6 + 104));
    sub_23D5DDA20(*(_QWORD *)(v6 + 120), *(_QWORD *)(v6 + 128));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 52), v5);
  }
  return result;
}

uint64_t sub_23D612F88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _QWORD *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = sub_23D66BE68();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_QWORD *)(a1 + v13);
  v15 = (uint64_t *)(a2 + v13);
  v16 = type metadata accessor for GKCrypto_Invite(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    v19 = *v15;
    v20 = v15[1];
    sub_23D5AFA60(*v15, v20);
    *v14 = v19;
    v14[1] = v20;
    v21 = v15[2];
    v22 = v15[3];
    sub_23D5AFA60(v21, v22);
    v14[2] = v21;
    v14[3] = v22;
    v23 = v15[4];
    v24 = v15[5];
    sub_23D5AFA60(v23, v24);
    v14[4] = v23;
    v14[5] = v24;
    v25 = v15[6];
    v26 = v15[7];
    sub_23D5AFA60(v25, v26);
    v14[6] = v25;
    v14[7] = v26;
    v27 = v15[8];
    v28 = v15[9];
    sub_23D5AFA60(v27, v28);
    v14[8] = v27;
    v14[9] = v28;
    v29 = v15[10];
    v30 = v15[11];
    sub_23D5AFA60(v29, v30);
    v14[10] = v29;
    v14[11] = v30;
    v31 = v15[12];
    v32 = v15[13];
    sub_23D5AFA60(v31, v32);
    v14[12] = v31;
    v14[13] = v32;
    *((_DWORD *)v14 + 28) = *((_DWORD *)v15 + 28);
    v33 = v15[15];
    v34 = v15[16];
    sub_23D5AFA60(v33, v34);
    v14[15] = v33;
    v14[16] = v34;
    v12((char *)v14 + *(int *)(v16 + 52), (char *)v15 + *(int *)(v16 + 52), v11);
    (*(void (**)(_QWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_23D613148(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for GKCrypto_Invite(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      v41 = *(_QWORD *)v18;
      v42 = *(_QWORD *)(v18 + 8);
      sub_23D5AFA60(*(_QWORD *)v18, v42);
      v43 = *(_QWORD *)v17;
      v44 = *(_QWORD *)(v17 + 8);
      *(_QWORD *)v17 = v41;
      *(_QWORD *)(v17 + 8) = v42;
      sub_23D5DDA20(v43, v44);
      v45 = *(_QWORD *)(v18 + 16);
      v46 = *(_QWORD *)(v18 + 24);
      sub_23D5AFA60(v45, v46);
      v47 = *(_QWORD *)(v17 + 16);
      v48 = *(_QWORD *)(v17 + 24);
      *(_QWORD *)(v17 + 16) = v45;
      *(_QWORD *)(v17 + 24) = v46;
      sub_23D5DDA20(v47, v48);
      v49 = *(_QWORD *)(v18 + 32);
      v50 = *(_QWORD *)(v18 + 40);
      sub_23D5AFA60(v49, v50);
      v51 = *(_QWORD *)(v17 + 32);
      v52 = *(_QWORD *)(v17 + 40);
      *(_QWORD *)(v17 + 32) = v49;
      *(_QWORD *)(v17 + 40) = v50;
      sub_23D5DDA20(v51, v52);
      v53 = *(_QWORD *)(v18 + 48);
      v54 = *(_QWORD *)(v18 + 56);
      sub_23D5AFA60(v53, v54);
      v55 = *(_QWORD *)(v17 + 48);
      v56 = *(_QWORD *)(v17 + 56);
      *(_QWORD *)(v17 + 48) = v53;
      *(_QWORD *)(v17 + 56) = v54;
      sub_23D5DDA20(v55, v56);
      v57 = *(_QWORD *)(v18 + 64);
      v58 = *(_QWORD *)(v18 + 72);
      sub_23D5AFA60(v57, v58);
      v59 = *(_QWORD *)(v17 + 64);
      v60 = *(_QWORD *)(v17 + 72);
      *(_QWORD *)(v17 + 64) = v57;
      *(_QWORD *)(v17 + 72) = v58;
      sub_23D5DDA20(v59, v60);
      v61 = *(_QWORD *)(v18 + 80);
      v62 = *(_QWORD *)(v18 + 88);
      sub_23D5AFA60(v61, v62);
      v63 = *(_QWORD *)(v17 + 80);
      v64 = *(_QWORD *)(v17 + 88);
      *(_QWORD *)(v17 + 80) = v61;
      *(_QWORD *)(v17 + 88) = v62;
      sub_23D5DDA20(v63, v64);
      v65 = *(_QWORD *)(v18 + 96);
      v66 = *(_QWORD *)(v18 + 104);
      sub_23D5AFA60(v65, v66);
      v67 = *(_QWORD *)(v17 + 96);
      v68 = *(_QWORD *)(v17 + 104);
      *(_QWORD *)(v17 + 96) = v65;
      *(_QWORD *)(v17 + 104) = v66;
      sub_23D5DDA20(v67, v68);
      *(_DWORD *)(v17 + 112) = *(_DWORD *)(v18 + 112);
      v69 = *(_QWORD *)(v18 + 120);
      v70 = *(_QWORD *)(v18 + 128);
      sub_23D5AFA60(v69, v70);
      v71 = *(_QWORD *)(v17 + 120);
      v72 = *(_QWORD *)(v17 + 128);
      *(_QWORD *)(v17 + 120) = v69;
      *(_QWORD *)(v17 + 128) = v70;
      sub_23D5DDA20(v71, v72);
      v15(v17 + *(int *)(v19 + 52), v18 + *(int *)(v19 + 52), v13);
      return a1;
    }
    sub_23D5E6950(v17, type metadata accessor for GKCrypto_Invite);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
    memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  v23 = *(_QWORD *)v18;
  v24 = *(_QWORD *)(v18 + 8);
  sub_23D5AFA60(*(_QWORD *)v18, v24);
  *(_QWORD *)v17 = v23;
  *(_QWORD *)(v17 + 8) = v24;
  v25 = *(_QWORD *)(v18 + 16);
  v26 = *(_QWORD *)(v18 + 24);
  sub_23D5AFA60(v25, v26);
  *(_QWORD *)(v17 + 16) = v25;
  *(_QWORD *)(v17 + 24) = v26;
  v27 = *(_QWORD *)(v18 + 32);
  v28 = *(_QWORD *)(v18 + 40);
  sub_23D5AFA60(v27, v28);
  *(_QWORD *)(v17 + 32) = v27;
  *(_QWORD *)(v17 + 40) = v28;
  v29 = *(_QWORD *)(v18 + 48);
  v30 = *(_QWORD *)(v18 + 56);
  sub_23D5AFA60(v29, v30);
  *(_QWORD *)(v17 + 48) = v29;
  *(_QWORD *)(v17 + 56) = v30;
  v31 = *(_QWORD *)(v18 + 64);
  v32 = *(_QWORD *)(v18 + 72);
  sub_23D5AFA60(v31, v32);
  *(_QWORD *)(v17 + 64) = v31;
  *(_QWORD *)(v17 + 72) = v32;
  v33 = *(_QWORD *)(v18 + 80);
  v34 = *(_QWORD *)(v18 + 88);
  sub_23D5AFA60(v33, v34);
  *(_QWORD *)(v17 + 80) = v33;
  *(_QWORD *)(v17 + 88) = v34;
  v35 = *(_QWORD *)(v18 + 96);
  v36 = *(_QWORD *)(v18 + 104);
  sub_23D5AFA60(v35, v36);
  *(_QWORD *)(v17 + 96) = v35;
  *(_QWORD *)(v17 + 104) = v36;
  *(_DWORD *)(v17 + 112) = *(_DWORD *)(v18 + 112);
  v37 = *(_QWORD *)(v18 + 120);
  v38 = *(_QWORD *)(v18 + 128);
  sub_23D5AFA60(v37, v38);
  *(_QWORD *)(v17 + 120) = v37;
  *(_QWORD *)(v17 + 128) = v38;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17 + *(int *)(v19 + 52), v18 + *(int *)(v19 + 52), v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_23D613440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_OWORD *)(a1 + v11);
  v13 = (_OWORD *)(a2 + v11);
  v14 = type metadata accessor for GKCrypto_Invite(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    v17 = v13[1];
    *v12 = *v13;
    v12[1] = v17;
    v18 = v13[3];
    v12[2] = v13[2];
    v12[3] = v18;
    v19 = v13[5];
    v12[4] = v13[4];
    v12[5] = v19;
    v12[6] = v13[6];
    *((_DWORD *)v12 + 28) = *((_DWORD *)v13 + 28);
    *(_OWORD *)((char *)v12 + 120) = *(_OWORD *)((char *)v13 + 120);
    v10((char *)v12 + *(int *)(v14 + 52), (char *)v13 + *(int *)(v14 + 52), v9);
    (*(void (**)(_OWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23D613574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for GKCrypto_Invite(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      v26 = *(_QWORD *)v15;
      v27 = *(_QWORD *)(v15 + 8);
      *(_OWORD *)v15 = *(_OWORD *)v16;
      sub_23D5DDA20(v26, v27);
      v28 = *(_QWORD *)(v15 + 16);
      v29 = *(_QWORD *)(v15 + 24);
      *(_OWORD *)(v15 + 16) = *(_OWORD *)(v16 + 16);
      sub_23D5DDA20(v28, v29);
      v30 = *(_QWORD *)(v15 + 32);
      v31 = *(_QWORD *)(v15 + 40);
      *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
      sub_23D5DDA20(v30, v31);
      v32 = *(_QWORD *)(v15 + 48);
      v33 = *(_QWORD *)(v15 + 56);
      *(_OWORD *)(v15 + 48) = *(_OWORD *)(v16 + 48);
      sub_23D5DDA20(v32, v33);
      v34 = *(_QWORD *)(v15 + 64);
      v35 = *(_QWORD *)(v15 + 72);
      *(_OWORD *)(v15 + 64) = *(_OWORD *)(v16 + 64);
      sub_23D5DDA20(v34, v35);
      v36 = *(_QWORD *)(v15 + 80);
      v37 = *(_QWORD *)(v15 + 88);
      *(_OWORD *)(v15 + 80) = *(_OWORD *)(v16 + 80);
      sub_23D5DDA20(v36, v37);
      v38 = *(_QWORD *)(v15 + 96);
      v39 = *(_QWORD *)(v15 + 104);
      *(_OWORD *)(v15 + 96) = *(_OWORD *)(v16 + 96);
      sub_23D5DDA20(v38, v39);
      *(_DWORD *)(v15 + 112) = *(_DWORD *)(v16 + 112);
      v40 = *(_QWORD *)(v15 + 120);
      v41 = *(_QWORD *)(v15 + 128);
      *(_OWORD *)(v15 + 120) = *(_OWORD *)(v16 + 120);
      sub_23D5DDA20(v40, v41);
      v13(v15 + *(int *)(v17 + 52), v16 + *(int *)(v17 + 52), v11);
      return a1;
    }
    sub_23D5E6950(v15, type metadata accessor for GKCrypto_Invite);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
    return a1;
  }
  v21 = *(_OWORD *)(v16 + 16);
  *(_OWORD *)v15 = *(_OWORD *)v16;
  *(_OWORD *)(v15 + 16) = v21;
  v22 = *(_OWORD *)(v16 + 48);
  *(_OWORD *)(v15 + 32) = *(_OWORD *)(v16 + 32);
  *(_OWORD *)(v15 + 48) = v22;
  v23 = *(_OWORD *)(v16 + 80);
  *(_OWORD *)(v15 + 64) = *(_OWORD *)(v16 + 64);
  *(_OWORD *)(v15 + 80) = v23;
  *(_OWORD *)(v15 + 96) = *(_OWORD *)(v16 + 96);
  *(_DWORD *)(v15 + 112) = *(_DWORD *)(v16 + 112);
  *(_OWORD *)(v15 + 120) = *(_OWORD *)(v16 + 120);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 52), v16 + *(int *)(v17 + 52), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_23D61378C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D613798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_256C7A600);
}

uint64_t sub_23D6137A4()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6137B0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_256C7A600);
}

void sub_23D6137BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D614624(a1, a2, a3, qword_256C7ADB8, (void (*)(uint64_t))type metadata accessor for GKCrypto_Invite);
}

uint64_t sub_23D6137D0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6137E0()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6137F0()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D613800()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_DWORD *sub_23D613810(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_DWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_23D5AFA60(v9, v10);
    *((_QWORD *)v4 + 3) = v9;
    *((_QWORD *)v4 + 4) = v10;
    v11 = a2[5];
    v12 = a2[6];
    sub_23D5AFA60(v11, v12);
    *((_QWORD *)v4 + 5) = v11;
    *((_QWORD *)v4 + 6) = v12;
    v4[14] = *((_DWORD *)a2 + 14);
    *((_QWORD *)v4 + 8) = a2[8];
    *((_BYTE *)v4 + 72) = *((_BYTE *)a2 + 72);
    v13 = *(int *)(a3 + 40);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = sub_23D66BE68();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_23D6138FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D613958(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D613A18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  sub_23D5DDA20(v16, v17);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  v18 = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_QWORD *)(a1 + 64) = v18;
  v19 = *(int *)(a3 + 40);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_23D613AF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  v4 = *(int *)(a3 + 40);
  v5 = a2 + v4;
  v6 = a1 + v4;
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v6, v5, v7);
  return a1;
}

uint64_t sub_23D613B7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_23D5DDA20(v10, v11);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D613C2C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D613C3C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D613C4C()
{
  return sub_23D614FC0();
}

uint64_t *sub_23D613C70(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  void (*v13)(char *, char *, uint64_t);
  uint64_t v14;
  _DWORD *v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v20 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v20 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = *(int *)(a3 + 24);
    v10 = (char *)v4 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66BE68();
    v13 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16);
    v13(v10, v11, v12);
    v14 = *(int *)(a3 + 28);
    v15 = (_DWORD *)((char *)v4 + v14);
    v16 = (_DWORD *)((char *)a2 + v14);
    v17 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
    v18 = *(_QWORD *)(v17 - 8);
    if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    {
      v19 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
      memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v19 - 8) + 64));
    }
    else
    {
      *v15 = *v16;
      v21 = *((_QWORD *)v16 + 1);
      v22 = *((_QWORD *)v16 + 2);
      sub_23D5AFA60(v21, v22);
      *((_QWORD *)v15 + 1) = v21;
      *((_QWORD *)v15 + 2) = v22;
      *((_QWORD *)v15 + 3) = *((_QWORD *)v16 + 3);
      *((_BYTE *)v15 + 32) = *((_BYTE *)v16 + 32);
      v13((char *)v15 + *(int *)(v17 + 28), (char *)v16 + *(int *)(v17 + 28), v12);
      (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
    }
  }
  return v4;
}

uint64_t sub_23D613DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  void (*v9)(uint64_t, uint64_t);

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23D66BE68();
  v9 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8);
  v9(v4, v5);
  v6 = a1 + *(int *)(a2 + 28);
  v7 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 48))(v6, 1, v7);
  if (!(_DWORD)result)
  {
    sub_23D5DDA20(*(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
    return ((uint64_t (*)(uint64_t, uint64_t))v9)(v6 + *(int *)(v7 + 28), v5);
  }
  return result;
}

uint64_t sub_23D613EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void (*v12)(char *, char *, uint64_t);
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(int *)(a3 + 24);
  v9 = (char *)(a1 + v8);
  v10 = (char *)(a2 + v8);
  v11 = sub_23D66BE68();
  v12 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16);
  v12(v9, v10, v11);
  v13 = *(int *)(a3 + 28);
  v14 = (_DWORD *)(a1 + v13);
  v15 = (_DWORD *)(a2 + v13);
  v16 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  v17 = *(_QWORD *)(v16 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v17 + 48))(v15, 1, v16))
  {
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
    memcpy(v14, v15, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
  }
  else
  {
    *v14 = *v15;
    v19 = *((_QWORD *)v15 + 1);
    v20 = *((_QWORD *)v15 + 2);
    sub_23D5AFA60(v19, v20);
    *((_QWORD *)v14 + 1) = v19;
    *((_QWORD *)v14 + 2) = v20;
    *((_QWORD *)v14 + 3) = *((_QWORD *)v15 + 3);
    *((_BYTE *)v14 + 32) = *((_BYTE *)v15 + 32);
    v12((char *)v14 + *(int *)(v16 + 28), (char *)v15 + *(int *)(v16 + 28), v11);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v17 + 56))(v14, 0, 1, v16);
  }
  return a1;
}

uint64_t sub_23D613FE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t (*v21)(uint64_t, uint64_t, uint64_t);
  int v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 24);
  v15(v11, v12, v13);
  v16 = *(int *)(a3 + 28);
  v17 = a1 + v16;
  v18 = a2 + v16;
  v19 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  v20 = *(_QWORD *)(v19 - 8);
  v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  LODWORD(v12) = v21(v17, 1, v19);
  v22 = v21(v18, 1, v19);
  if (!(_DWORD)v12)
  {
    if (!v22)
    {
      *(_DWORD *)v17 = *(_DWORD *)v18;
      v28 = *(_QWORD *)(v18 + 8);
      v29 = *(_QWORD *)(v18 + 16);
      sub_23D5AFA60(v28, v29);
      v30 = *(_QWORD *)(v17 + 8);
      v31 = *(_QWORD *)(v17 + 16);
      *(_QWORD *)(v17 + 8) = v28;
      *(_QWORD *)(v17 + 16) = v29;
      sub_23D5DDA20(v30, v31);
      v32 = *(_QWORD *)(v18 + 24);
      *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
      *(_QWORD *)(v17 + 24) = v32;
      v15(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v13);
      return a1;
    }
    sub_23D5E6950(v17, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
    goto LABEL_6;
  }
  if (v22)
  {
LABEL_6:
    v26 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
    memcpy((void *)v17, (const void *)v18, *(_QWORD *)(*(_QWORD *)(v26 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v17 = *(_DWORD *)v18;
  v23 = *(_QWORD *)(v18 + 8);
  v24 = *(_QWORD *)(v18 + 16);
  sub_23D5AFA60(v23, v24);
  *(_QWORD *)(v17 + 8) = v23;
  *(_QWORD *)(v17 + 16) = v24;
  v25 = *(_QWORD *)(v18 + 24);
  *(_BYTE *)(v17 + 32) = *(_BYTE *)(v18 + 32);
  *(_QWORD *)(v17 + 24) = v25;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v17 + *(int *)(v19 + 28), v18 + *(int *)(v19 + 28), v13);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56))(v17, 0, 1, v19);
  return a1;
}

uint64_t sub_23D6141B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  void (*v10)(char *, char *, uint64_t);
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  v6 = *(int *)(a3 + 24);
  v7 = (char *)(a1 + v6);
  v8 = (char *)(a2 + v6);
  v9 = sub_23D66BE68();
  v10 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32);
  v10(v7, v8, v9);
  v11 = *(int *)(a3 + 28);
  v12 = (_DWORD *)(a1 + v11);
  v13 = (_DWORD *)(a2 + v11);
  v14 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  v15 = *(_QWORD *)(v14 - 8);
  if ((*(unsigned int (**)(_DWORD *, uint64_t, uint64_t))(v15 + 48))(v13, 1, v14))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
    memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    *v12 = *v13;
    *(_OWORD *)(v12 + 2) = *(_OWORD *)(v13 + 2);
    *((_QWORD *)v12 + 3) = *((_QWORD *)v13 + 3);
    *((_BYTE *)v12 + 32) = *((_BYTE *)v13 + 32);
    v10((char *)v12 + *(int *)(v14 + 28), (char *)v13 + *(int *)(v14 + 28), v9);
    (*(void (**)(_DWORD *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
  }
  return a1;
}

uint64_t sub_23D6142D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void (*v13)(uint64_t, uint64_t, uint64_t);
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(uint64_t, uint64_t, uint64_t);
  int v20;
  uint64_t v21;
  uint64_t v23;
  unint64_t v24;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 24);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  v12 = *(_QWORD *)(v11 - 8);
  v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context(0);
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v10) = v19(v15, 1, v17);
  v20 = v19(v16, 1, v17);
  if (!(_DWORD)v10)
  {
    if (!v20)
    {
      *(_DWORD *)v15 = *(_DWORD *)v16;
      v23 = *(_QWORD *)(v15 + 8);
      v24 = *(_QWORD *)(v15 + 16);
      *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
      sub_23D5DDA20(v23, v24);
      *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
      *(_BYTE *)(v15 + 32) = *(_BYTE *)(v16 + 32);
      v13(v15 + *(int *)(v17 + 28), v16 + *(int *)(v17 + 28), v11);
      return a1;
    }
    sub_23D5E6950(v15, type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
    goto LABEL_6;
  }
  if (v20)
  {
LABEL_6:
    v21 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A648);
    memcpy((void *)v15, (const void *)v16, *(_QWORD *)(*(_QWORD *)(v21 - 8) + 64));
    return a1;
  }
  *(_DWORD *)v15 = *(_DWORD *)v16;
  *(_OWORD *)(v15 + 8) = *(_OWORD *)(v16 + 8);
  *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
  *(_BYTE *)(v15 + 32) = *(_BYTE *)(v16 + 32);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32))(v15 + *(int *)(v17 + 28), v16 + *(int *)(v17 + 28), v11);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  return a1;
}

uint64_t sub_23D61447C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D614488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm(a1, a2, a3, &qword_256C7A648);
}

uint64_t __swift_get_extra_inhabitant_indexTm(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if ((_DWORD)a2 == 12)
  {
    v5 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v5) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v5) & 0xC | (v5 >> 2));
    else
      return 0;
  }
  else
  {
    v10 = sub_23D66BE68();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == (_DWORD)a2)
    {
      v12 = v10;
      v13 = *(int *)(a3 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a4);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a3 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(a1 + v13, a2, v12);
  }
}

uint64_t sub_23D614544()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D614550(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm(a1, a2, a3, a4, &qword_256C7A648);
}

uint64_t __swift_store_extra_inhabitant_indexTm(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v6 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v10 = sub_23D66BE68();
    v11 = *(_QWORD *)(v10 - 8);
    if (*(_DWORD *)(v11 + 84) == a3)
    {
      v12 = v10;
      v13 = *(int *)(a4 + 24);
    }
    else
    {
      v12 = __swift_instantiateConcreteTypeFromMangledName(a5);
      v11 = *(_QWORD *)(v12 - 8);
      v13 = *(int *)(a4 + 28);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v11 + 56))(v6 + v13, a2, a2, v12);
  }
  return result;
}

void sub_23D614610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D614624(a1, a2, a3, qword_256C7B030, (void (*)(uint64_t))type metadata accessor for GKCrypto_GroupAuthenticatedCiphertext.Context);
}

void sub_23D614624(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v7;
  unint64_t v8;

  sub_23D66BE68();
  if (v7 <= 0x3F)
  {
    sub_23D5F5B08(319, a4, a5);
    if (v8 <= 0x3F)
      swift_initStructMetadata();
  }
}

_DWORD *sub_23D6146D8(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_DWORD *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v8;
    *((_QWORD *)v4 + 3) = a2[3];
    *((_BYTE *)v4 + 32) = *((_BYTE *)a2 + 32);
    v9 = *(int *)(a3 + 28);
    v10 = (char *)v4 + v9;
    v11 = (uint64_t)a2 + v9;
    v12 = sub_23D66BE68();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return v4;
}

uint64_t sub_23D614794(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D6147E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t sub_23D614870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  v11 = *(int *)(a3 + 28);
  v12 = a1 + v11;
  v13 = a2 + v11;
  v14 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v14 - 8) + 24))(v12, v13, v14);
  return a1;
}

uint64_t sub_23D614908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D61497C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v8 = *(int *)(a3 + 28);
  v9 = a1 + v8;
  v10 = a2 + v8;
  v11 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t sub_23D614A04()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D614A14()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D614A24()
{
  return sub_23D6154D0();
}

uint64_t sub_23D614A3C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D614A4C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

_DWORD *sub_23D614A5C(_DWORD *a1, uint64_t *a2, uint64_t a3)
{
  _DWORD *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v17 = *a2;
    *(_QWORD *)v4 = *a2;
    v4 = (_DWORD *)(v17 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    *((_QWORD *)v4 + 1) = v7;
    *((_QWORD *)v4 + 2) = v8;
    *((_QWORD *)v4 + 3) = a2[3];
    *((_BYTE *)v4 + 32) = *((_BYTE *)a2 + 32);
    v4[9] = *((_DWORD *)a2 + 9);
    v9 = a2[5];
    v10 = a2[6];
    sub_23D5AFA60(v9, v10);
    *((_QWORD *)v4 + 5) = v9;
    *((_QWORD *)v4 + 6) = v10;
    v11 = a2[7];
    v12 = a2[8];
    sub_23D5AFA60(v11, v12);
    *((_QWORD *)v4 + 7) = v11;
    *((_QWORD *)v4 + 8) = v12;
    v13 = *(int *)(a3 + 40);
    v14 = (char *)v4 + v13;
    v15 = (uint64_t)a2 + v13;
    v16 = sub_23D66BE68();
    (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 16))(v14, v15, v16);
  }
  return v4;
}

uint64_t sub_23D614B48(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_23D5DDA20(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v4 = a1 + *(int *)(a2 + 40);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D614BA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a2 + 40);
  v9 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 40) = v8;
  *(_QWORD *)(a1 + 48) = v9;
  v10 = *(_QWORD *)(a2 + 56);
  v11 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 56) = v10;
  *(_QWORD *)(a1 + 64) = v11;
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 16))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D614C64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v11 = *(_QWORD *)(a2 + 40);
  v12 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v11, v12);
  v13 = *(_QWORD *)(a1 + 40);
  v14 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 48) = v12;
  sub_23D5DDA20(v13, v14);
  v15 = *(_QWORD *)(a2 + 56);
  v16 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v15, v16);
  v17 = *(_QWORD *)(a1 + 56);
  v18 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v15;
  *(_QWORD *)(a1 + 64) = v16;
  sub_23D5DDA20(v17, v18);
  v19 = *(int *)(a3 + 40);
  v20 = a1 + v19;
  v21 = a2 + v19;
  v22 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  return a1;
}

uint64_t sub_23D614D3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  v4 = *(int *)(a3 + 40);
  v5 = a1 + v4;
  v6 = a2 + v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D614DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  v8 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_23D5DDA20(v10, v11);
  v12 = *(int *)(a3 + 40);
  v13 = a1 + v12;
  v14 = a2 + v12;
  v15 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 40))(v13, v14, v15);
  return a1;
}

uint64_t sub_23D614E78()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_45Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 40), a2, v8);
  }
}

uint64_t sub_23D614F10()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_46Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 40), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D614F9C()
{
  return sub_23D614FC0();
}

uint64_t sub_23D614FC0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t sub_23D61504C()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D61505C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t *sub_23D61506C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_23D5AFA60(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = *(int *)(a3 + 28);
    v12 = (char *)v4 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return v4;
}

uint64_t sub_23D61512C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  v4 = a1 + *(int *)(a2 + 28);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D615180(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t sub_23D615214(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(int *)(a3 + 28);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

uint64_t sub_23D6152B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v4 = *(int *)(a3 + 28);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D615324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 28);
  v11 = a1 + v10;
  v12 = a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_23D6153AC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_31Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 28), a2, v8);
  }
}

uint64_t sub_23D615444()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_32Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 28), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D6154D0()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D615548(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;

  v4 = a1;
  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v19 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v19 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    v7 = a2[1];
    v8 = a2[2];
    sub_23D5AFA60(v7, v8);
    v4[1] = v7;
    v4[2] = v8;
    v9 = a2[3];
    v10 = a2[4];
    sub_23D5AFA60(v9, v10);
    v4[3] = v9;
    v4[4] = v10;
    v11 = a2[5];
    v12 = a2[6];
    sub_23D5AFA60(v11, v12);
    v4[5] = v11;
    v4[6] = v12;
    v13 = a2[7];
    v14 = a2[8];
    sub_23D5AFA60(v13, v14);
    v4[7] = v13;
    v4[8] = v14;
    v15 = *(int *)(a3 + 36);
    v16 = (char *)v4 + v15;
    v17 = (char *)a2 + v15;
    v18 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 16))(v16, v17, v18);
  }
  return v4;
}

uint64_t sub_23D615630(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  sub_23D5DDA20(*(_QWORD *)(a1 + 24), *(_QWORD *)(a1 + 32));
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  sub_23D5DDA20(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  v4 = a1 + *(int *)(a2 + 36);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t sub_23D615694(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  v8 = *(_QWORD *)(a2 + 24);
  v9 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v8, v9);
  *(_QWORD *)(a1 + 24) = v8;
  *(_QWORD *)(a1 + 32) = v9;
  v10 = *(_QWORD *)(a2 + 40);
  v11 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v10, v11);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 48) = v11;
  v12 = *(_QWORD *)(a2 + 56);
  v13 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v12, v13);
  *(_QWORD *)(a1 + 56) = v12;
  *(_QWORD *)(a1 + 64) = v13;
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 16))(v15, v16, v17);
  return a1;
}

uint64_t sub_23D615750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 16);
  sub_23D5AFA60(v6, v7);
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 32);
  sub_23D5AFA60(v10, v11);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(_QWORD *)(a2 + 40);
  v15 = *(_QWORD *)(a2 + 48);
  sub_23D5AFA60(v14, v15);
  v16 = *(_QWORD *)(a1 + 40);
  v17 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v14;
  *(_QWORD *)(a1 + 48) = v15;
  sub_23D5DDA20(v16, v17);
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  sub_23D5AFA60(v18, v19);
  v20 = *(_QWORD *)(a1 + 56);
  v21 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 56) = v18;
  *(_QWORD *)(a1 + 64) = v19;
  sub_23D5DDA20(v20, v21);
  v22 = *(int *)(a3 + 36);
  v23 = a1 + v22;
  v24 = a2 + v22;
  v25 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 24))(v23, v24, v25);
  return a1;
}

uint64_t sub_23D61582C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  v4 = *(int *)(a3 + 36);
  v5 = a1 + v4;
  v6 = a2 + v4;
  v7 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t sub_23D6158A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_23D5DDA20(v6, v7);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  sub_23D5DDA20(v8, v9);
  v10 = *(_QWORD *)(a1 + 40);
  v11 = *(_QWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_23D5DDA20(v10, v11);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  sub_23D5DDA20(v12, v13);
  v14 = *(int *)(a3 + 36);
  v15 = a1 + v14;
  v16 = a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 40))(v15, v16, v17);
  return a1;
}

uint64_t sub_23D615950()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_3Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 16) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 36), a2, v8);
  }
}

uint64_t sub_23D6159E8()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t __swift_store_extra_inhabitant_index_4Tm(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(v5 + *(int *)(a4 + 36), a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D615A74()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t getEnumTagSinglePayload for GKCrypto_RSVP.Response(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for GKCrypto_RSVP.Response(uint64_t result, int a2, int a3)
{
  char v3;

  if (a2)
  {
    *(_QWORD *)result = 0;
    *(_BYTE *)(result + 8) = 0;
    *(_DWORD *)result = a2 - 1;
    if (!a3)
      return result;
    v3 = 1;
  }
  else
  {
    if (!a3)
      return result;
    v3 = 0;
  }
  *(_BYTE *)(result + 9) = v3;
  return result;
}

uint64_t sub_23D615B4C(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 8))
    return (*(_DWORD *)a1 + 1);
  else
    return 0;
}

uint64_t sub_23D615B68(uint64_t result, int a2)
{
  if (a2)
  {
    *(_QWORD *)result = (a2 - 1);
    *(_BYTE *)(result + 8) = 1;
  }
  else
  {
    *(_BYTE *)(result + 8) = 0;
  }
  return result;
}

ValueMetadata *type metadata accessor for GKCrypto_RSVP.Response()
{
  return &type metadata for GKCrypto_RSVP.Response;
}

uint64_t *sub_23D615B98(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_23D5AFA60(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = *(int *)(a3 + 24);
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23D66BE68();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v14 - 8) + 16))(v12, v13, v14);
  }
  return a1;
}

uint64_t sub_23D615C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + *(int *)(a2 + 24);
  v5 = sub_23D66BE68();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *sub_23D615CA4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 16))(v11, v12, v13);
  return a1;
}

uint64_t *sub_23D615D30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_23D5AFA60(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_23D5DDA20(v12, v13);
  v14 = *(int *)(a3 + 24);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24))(v15, v16, v17);
  return a1;
}

_OWORD *sub_23D615DCC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  __int128 v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = *(int *)(a3 + 24);
  v6 = (char *)a1 + v5;
  v7 = (char *)a2 + v5;
  v8 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v8 - 8) + 32))(v6, v7, v8);
  return a1;
}

uint64_t *sub_23D615E28(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 24);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66BE68();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 40))(v11, v12, v13);
  return a1;
}

uint64_t sub_23D615EA8()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t __swift_get_extra_inhabitant_index_21Tm(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66BE68();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 24), a2, v8);
  }
}

uint64_t sub_23D615F40()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *__swift_store_extra_inhabitant_index_22Tm(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66BE68();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 24)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D615FCC()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66BE68();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

unint64_t sub_23D616044()
{
  unint64_t result;

  result = qword_256C7B4A8;
  if (!qword_256C7B4A8)
  {
    result = MEMORY[0x242636790](&unk_23D672F50, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(result, (unint64_t *)&qword_256C7B4A8);
  }
  return result;
}

unint64_t sub_23D61608C()
{
  unint64_t result;

  result = qword_256C7B4B0;
  if (!qword_256C7B4B0)
  {
    result = MEMORY[0x242636790](&unk_23D672FF0, &type metadata for GKCrypto_Role);
    atomic_store(result, (unint64_t *)&qword_256C7B4B0);
  }
  return result;
}

unint64_t sub_23D6160D4()
{
  unint64_t result;

  result = qword_256C7B4B8;
  if (!qword_256C7B4B8)
  {
    result = MEMORY[0x242636790](&unk_23D672F78, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(result, (unint64_t *)&qword_256C7B4B8);
  }
  return result;
}

unint64_t sub_23D61611C()
{
  unint64_t result;

  result = qword_256C7B4C0;
  if (!qword_256C7B4C0)
  {
    result = MEMORY[0x242636790](&unk_23D672FB8, &type metadata for GKCrypto_RSVP.Response);
    atomic_store(result, (unint64_t *)&qword_256C7B4C0);
  }
  return result;
}

unint64_t sub_23D616164()
{
  unint64_t result;

  result = qword_256C7B4C8;
  if (!qword_256C7B4C8)
  {
    result = MEMORY[0x242636790](&unk_23D673018, &type metadata for GKCrypto_Role);
    atomic_store(result, (unint64_t *)&qword_256C7B4C8);
  }
  return result;
}

unint64_t sub_23D6161AC()
{
  unint64_t result;

  result = qword_256C7B4D0;
  if (!qword_256C7B4D0)
  {
    result = MEMORY[0x242636790](&unk_23D673058, &type metadata for GKCrypto_Role);
    atomic_store(result, (unint64_t *)&qword_256C7B4D0);
  }
  return result;
}

void sub_23D61621C()
{
  id v0;
  void *v1;
  id v2;
  id v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v0 = objc_allocWithZone(MEMORY[0x24BDD17C8]);
  v1 = (void *)sub_23D66C390();
  v2 = objc_msgSend(v0, sel_initWithString_, v1);

  v3 = objc_msgSend(v2, sel_stringByExpandingTildeInPath);
  v4 = sub_23D66C39C();
  v6 = v5;

  qword_25431A830 = v4;
  *(_QWORD *)algn_25431A838 = v6;
}

uint64_t sub_23D6162C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  void *v23;
  id v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  id v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  id v37;
  void *v38;
  void *v39;
  id v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  id v45;
  void *v46;
  id v47;
  void *v48;
  id v49;
  char *v50;
  id v51;
  void *v52;
  id v53;
  void *v54;
  void *v55;
  void *v56;
  id v57;
  void *v58;
  uint64_t v59;
  id v60;
  void *v61;
  char *v62;
  id v63;
  void *v64;
  id v65;
  void *v66;
  void *v67;
  void *v68;
  id v69;
  void *v70;
  id v71;
  NSObject *v72;
  id v73;
  unint64_t v74;
  void *v75;
  id v76;
  unint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  char v81;
  uint64_t v82;
  NSObject *v83;
  os_log_type_t v84;
  uint8_t *v85;
  NSObject *v86;
  uint64_t v87;
  void *v88;
  id v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  char v93;
  char v94;
  NSObject *v95;
  os_log_type_t v96;
  uint8_t *v97;
  uint64_t v98;
  void **v99;
  void *v100;
  void *v101;
  NSObject *v102;
  uint64_t v103;
  uint8_t *v104;
  uint64_t result;
  uint64_t v106;
  uint64_t v107;
  os_log_type_t v108;
  NSObject *v109;
  os_log_type_t v110;
  uint8_t *v111;
  uint64_t v112;
  os_log_type_t v113;
  os_log_type_t v114;
  uint8_t *v115;
  _QWORD v116[2];
  __int128 v117;
  uint64_t v118;
  uint64_t v119;
  char *v120;
  uint64_t v121;
  char *v122;
  char *v123;
  int v124;
  _QWORD aBlock[6];
  uint64_t v126;

  v8 = v7;
  v124 = a7;
  v118 = a5;
  v119 = a6;
  v116[1] = *v7;
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_25431A820);
  v14 = MEMORY[0x24BDAC7A8](v13);
  v120 = (char *)v116 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v116 - v16;
  v126 = sub_23D66BD0C();
  v121 = *(_QWORD *)(v126 - 8);
  v18 = MEMORY[0x24BDAC7A8](v126);
  v123 = (char *)v116 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v18);
  v122 = (char *)v116 - v20;
  v8[9] = 0xD000000000000019;
  v8[10] = 0x800000023D679210;
  v8[11] = 0xD000000000000025;
  v8[12] = 0x800000023D679230;
  v8[13] = 0x64756F6C43;
  v8[14] = 0xE500000000000000;
  v8[15] = 0xD000000000000015;
  v8[16] = 0x800000023D679260;
  v8[17] = 0;
  *((_BYTE *)v8 + 144) = 1;
  v8[19] = 0;
  *((_BYTE *)v8 + 160) = 1;
  v8[22] = 0;
  if (!a2)
  {
    if (qword_25431A840 != -1)
      swift_once();
    a1 = qword_25431A830;
    a2 = *(_QWORD *)algn_25431A838;
    swift_bridgeObjectRetain();
  }
  v8[2] = a1;
  v8[3] = a2;
  v21 = (void *)objc_opt_self();
  __swift_instantiateConcreteTypeFromMangledName(&qword_25431A868);
  v22 = swift_allocObject();
  v117 = xmmword_23D66DF10;
  *(_OWORD *)(v22 + 16) = xmmword_23D66DF10;
  *(_QWORD *)(v22 + 32) = a1;
  *(_QWORD *)(v22 + 40) = a2;
  *(_QWORD *)(v22 + 48) = a3;
  *(_QWORD *)(v22 + 56) = a4;
  swift_bridgeObjectRetain();
  v23 = (void *)sub_23D66C4A4();
  swift_bridgeObjectRelease();
  v24 = objc_msgSend(v21, sel_pathWithComponents_, v23);

  v25 = sub_23D66C39C();
  v27 = v26;

  v8[4] = v25;
  v8[5] = v27;
  v28 = swift_allocObject();
  *(_OWORD *)(v28 + 16) = v117;
  v29 = v8[3];
  *(_QWORD *)(v28 + 32) = v8[2];
  *(_QWORD *)(v28 + 40) = v29;
  v30 = v119;
  *(_QWORD *)(v28 + 48) = v118;
  *(_QWORD *)(v28 + 56) = v30;
  swift_bridgeObjectRetain();
  v31 = (void *)sub_23D66C4A4();
  swift_bridgeObjectRelease();
  v32 = objc_msgSend(v21, sel_pathWithComponents_, v31);

  v33 = sub_23D66C39C();
  v35 = v34;

  v8[6] = v33;
  v8[7] = v35;
  *((_BYTE *)v8 + 64) = v124 & 1;
  v8[17] = 0;
  *((_BYTE *)v8 + 144) = 1;
  v8[19] = 0;
  *((_BYTE *)v8 + 160) = 1;
  v36 = (void *)sub_23D66C390();
  v37 = objc_msgSend((id)objc_opt_self(), sel_bundleWithIdentifier_, v36);

  if (!v37)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v121 + 56))(v17, 1, 1, v126);
LABEL_32:
    sub_23D617C10((uint64_t)v17);
    if (qword_25431A850 != -1)
      swift_once();
    v107 = sub_23D66BFDC();
    __swift_project_value_buffer(v107, (uint64_t)qword_25431AB50);
    v108 = sub_23D66C588();
    v109 = sub_23D66BFC4();
    v110 = v108;
    if (os_log_type_enabled(v109, v108))
    {
      v111 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v111 = 0;
      _os_log_impl(&dword_23D5A8000, v109, v110, "Unable to locate CoreData model", v111, 2u);
      MEMORY[0x242636844](v111, -1, -1);
    }
    goto LABEL_41;
  }
  v38 = (void *)sub_23D66C390();
  v39 = (void *)sub_23D66C390();
  v40 = objc_msgSend(v37, sel_URLForResource_withExtension_, v38, v39);

  v41 = v126;
  if (v40)
  {
    v42 = (uint64_t)v120;
    sub_23D66BD00();

    v43 = 0;
  }
  else
  {
    v43 = 1;
    v42 = (uint64_t)v120;
  }
  v44 = v121;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v121 + 56))(v42, v43, 1, v41);
  sub_23D617C50(v42, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v44 + 48))(v17, 1, v41) == 1)
    goto LABEL_32;
  (*(void (**)(char *, char *, uint64_t))(v44 + 32))(v122, v17, v41);
  v45 = objc_allocWithZone(MEMORY[0x24BDBB6B0]);
  swift_bridgeObjectRetain();
  v46 = (void *)sub_23D66BCF4();
  v47 = objc_msgSend(v45, sel_initWithContentsOfURL_, v46);

  v48 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  v49 = objc_msgSend((id)objc_opt_self(), sel_persistentContainerWithPath_managedObjectModel_, v48, v47);

  if (!v49)
  {
    if (qword_25431A850 != -1)
      swift_once();
    v112 = sub_23D66BFDC();
    __swift_project_value_buffer(v112, (uint64_t)qword_25431AB50);
    v113 = sub_23D66C588();
    v109 = sub_23D66BFC4();
    v114 = v113;
    if (os_log_type_enabled(v109, v113))
    {
      v115 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v115 = 0;
      _os_log_impl(&dword_23D5A8000, v109, v114, "Unable to init NSPersistentContainer", v115, 2u);
      MEMORY[0x242636844](v115, -1, -1);
    }
LABEL_41:

    result = sub_23D66C720();
    __break(1u);
    return result;
  }
  swift_bridgeObjectRetain();
  v50 = v123;
  sub_23D66BCE8();
  swift_bridgeObjectRelease();
  v51 = objc_allocWithZone(MEMORY[0x24BDBB740]);
  v52 = (void *)sub_23D66BCF4();
  v53 = objc_msgSend(v51, sel_initWithURL_, v52);

  v121 = *(_QWORD *)(v44 + 8);
  ((void (*)(char *, uint64_t))v121)(v50, v41);
  if ((v124 & 1) != 0)
  {
    v54 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v55 = (void *)sub_23D66C390();
    swift_bridgeObjectRelease();
    v56 = (void *)sub_23D66C390();
    v57 = objc_msgSend(v54, sel_gpkCrypto_optionsWithContainerIdentifier_apnsServiceName_, v55, v56);

    objc_msgSend(v53, sel_setCloudKitContainerOptions_, v57);
  }
  objc_msgSend(v53, sel_setShouldInferMappingModelAutomatically_, 1);
  objc_msgSend(v53, sel_setShouldMigrateStoreAutomatically_, 1);
  swift_bridgeObjectRetain();
  v58 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  objc_msgSend(v53, sel_setConfiguration_, v58);

  __swift_instantiateConcreteTypeFromMangledName(&qword_25431A870);
  v59 = swift_allocObject();
  *(_OWORD *)(v59 + 16) = xmmword_23D673120;
  *(_QWORD *)(v59 + 32) = v53;
  aBlock[0] = v59;
  sub_23D66C4C8();
  sub_23D617C98();
  v60 = v49;
  v120 = (char *)v53;
  v61 = (void *)sub_23D66C4A4();
  swift_bridgeObjectRelease();
  objc_msgSend(v60, sel_setPersistentStoreDescriptions_, v61);

  swift_bridgeObjectRetain();
  v62 = v123;
  sub_23D66BCE8();
  swift_bridgeObjectRelease();
  v63 = objc_allocWithZone(MEMORY[0x24BDBB740]);
  v64 = (void *)sub_23D66BCF4();
  v65 = objc_msgSend(v63, sel_initWithURL_, v64);

  ((void (*)(char *, uint64_t))v121)(v62, v126);
  if ((v124 & 1) != 0)
  {
    v66 = (void *)objc_opt_self();
    swift_bridgeObjectRetain();
    v67 = (void *)sub_23D66C390();
    swift_bridgeObjectRelease();
    v68 = (void *)sub_23D66C390();
    v69 = objc_msgSend(v66, sel_gpkCrypto_optionsWithContainerIdentifier_apnsServiceName_, v67, v68);

    objc_msgSend(v65, (SEL)&OBJC_INSTANCE_VARIABLES__TtC14GroupKitCrypto11SimPCSIDSet + 3, v69);
  }
  objc_msgSend(v65, sel_setShouldInferMappingModelAutomatically_, 1);
  objc_msgSend(v65, sel_setShouldMigrateStoreAutomatically_, 1);
  swift_bridgeObjectRetain();
  v70 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  objc_msgSend(v65, sel_setConfiguration_, v70);

  v71 = v60;
  v72 = v65;
  v73 = objc_msgSend(v71, sel_persistentStoreDescriptions);
  v74 = sub_23D66C4BC();

  aBlock[0] = v74;
  if (v74 >> 62)
  {
    swift_bridgeObjectRetain();
    v106 = sub_23D66C72C();
    swift_bridgeObjectRelease();
    if (v106 < 0)
    {
      __break(1u);
      goto LABEL_30;
    }
  }
  sub_23D617CD4(0, 0, (uint64_t)v72);
  v75 = (void *)sub_23D66C4A4();
  swift_bridgeObjectRelease();
  objc_msgSend(v71, sel_setPersistentStoreDescriptions_, v75);

  v76 = objc_msgSend(v71, sel_persistentStoreDescriptions);
  v77 = sub_23D66C4BC();

  sub_23D617188((uint64_t)v72, v77);
  v79 = v78;
  v81 = v80;
  swift_bridgeObjectRelease();
  v8[17] = v79;
  *((_BYTE *)v8 + 144) = v81 & 1;
  if (qword_25431A850 != -1)
LABEL_30:
    swift_once();
  v82 = sub_23D66BFDC();
  __swift_project_value_buffer(v82, (uint64_t)qword_25431AB50);
  v83 = sub_23D66BFC4();
  v84 = sub_23D66C594();
  if (os_log_type_enabled(v83, v84))
  {
    v85 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v85 = 0;
    _os_log_impl(&dword_23D5A8000, v83, v84, "Initialized persistent store for strict peers container", v85, 2u);
    MEMORY[0x242636844](v85, -1, -1);
    v86 = v72;
  }
  else
  {
    v86 = v83;
    v83 = v72;
  }
  v87 = v126;
  v88 = v120;

  v89 = objc_msgSend(v71, sel_persistentStoreDescriptions);
  v90 = sub_23D66C4BC();

  sub_23D617188((uint64_t)v88, v90);
  v92 = v91;
  v94 = v93;
  swift_bridgeObjectRelease();
  v8[19] = v92;
  *((_BYTE *)v8 + 160) = v94 & 1;
  v95 = sub_23D66BFC4();
  v96 = sub_23D66C594();
  if (os_log_type_enabled(v95, v96))
  {
    v97 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v97 = 0;
    _os_log_impl(&dword_23D5A8000, v95, v96, "Initialized persistent store for all peers container", v97, 2u);
    MEMORY[0x242636844](v97, -1, -1);
  }

  v98 = swift_allocObject();
  *(_QWORD *)(v98 + 16) = 0;
  v99 = (void **)(v98 + 16);
  aBlock[4] = sub_23D617FD0;
  aBlock[5] = v98;
  aBlock[0] = MEMORY[0x24BDAC760];
  aBlock[1] = 1107296256;
  aBlock[2] = sub_23D617500;
  aBlock[3] = &block_descriptor_0;
  v100 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  objc_msgSend(v71, sel_loadPersistentStoresWithCompletionHandler_, v100);
  _Block_release(v100);
  swift_beginAccess();
  v101 = *v99;
  if (v101)
  {
    v101;
    swift_willThrow();

    ((void (*)(char *, uint64_t))v121)(v122, v87);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();

    swift_deallocPartialClassInstance();
  }
  else
  {
    v102 = sub_23D66BFC4();
    v103 = sub_23D66C594();
    if (os_log_type_enabled(v102, (os_log_type_t)v103))
    {
      v104 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v104 = 0;
      _os_log_impl(&dword_23D5A8000, v102, (os_log_type_t)v103, "Persistent container created", v104, 2u);
      MEMORY[0x242636844](v104, -1, -1);
    }

    ((void (*)(char *, uint64_t))v121)(v122, v87);
    v8[21] = v71;
    swift_release();
  }
  return (uint64_t)v8;
}

void sub_23D617188(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  id v4;
  void *v5;
  char v6;
  uint64_t i;
  id v8;
  void *v9;
  char v10;
  unint64_t v11;

  if (a2 >> 62)
    goto LABEL_20;
  v3 = *(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10);
  if (v3)
  {
    while (1)
    {
      if ((a2 & 0xC000000000000001) != 0)
      {
        v4 = (id)MEMORY[0x242636040](0, a2);
      }
      else
      {
        if (!*(_QWORD *)((a2 & 0xFFFFFFFFFFFFF8) + 0x10))
        {
          __break(1u);
          return;
        }
        v4 = *(id *)(a2 + 32);
      }
      v5 = v4;
      sub_23D617C98();
      v6 = sub_23D66C5AC();

      if ((v6 & 1) == 0)
      {
        for (i = 0; ; ++i)
        {
          v11 = i + 1;
          if (__OFADD__(i, 1))
            break;
          if (v11 == v3)
            return;
          if ((a2 & 0xC000000000000001) != 0)
          {
            v8 = (id)MEMORY[0x242636040](i + 1, a2);
          }
          else
          {
            if ((v11 & 0x8000000000000000) != 0)
              goto LABEL_18;
            if (v11 >= *(_QWORD *)((a2 & 0xFFFFFFFFFFFFFF8) + 0x10))
              goto LABEL_19;
            v8 = *(id *)(a2 + 32 + 8 * v11);
          }
          v9 = v8;
          v10 = sub_23D66C5AC();

          if ((v10 & 1) != 0)
            return;
        }
        __break(1u);
LABEL_18:
        __break(1u);
LABEL_19:
        __break(1u);
LABEL_20:
        swift_bridgeObjectRetain();
        v3 = sub_23D66C72C();
        swift_bridgeObjectRelease();
        if (v3)
          continue;
      }
      return;
    }
  }
}

void sub_23D617310(int a1, id a2, uint64_t a3)
{
  id v5;
  void **v6;
  uint64_t v7;
  os_log_type_t v8;
  id v9;
  id v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  _QWORD *v14;
  id v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;

  if (a2)
  {
    v5 = a2;
    if (qword_25431A850 != -1)
      swift_once();
    v6 = (void **)(a3 + 16);
    v7 = sub_23D66BFDC();
    __swift_project_value_buffer(v7, (uint64_t)qword_25431AB50);
    v8 = sub_23D66C588();
    v9 = a2;
    v10 = a2;
    v11 = sub_23D66BFC4();
    v12 = v8;
    if (os_log_type_enabled(v11, v8))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      v14 = (_QWORD *)swift_slowAlloc();
      *(_DWORD *)v13 = 138412290;
      v15 = a2;
      v18 = _swift_stdlib_bridgeErrorToNSError();
      sub_23D66C5D0();
      *v14 = v18;

      _os_log_impl(&dword_23D5A8000, v11, v12, "Unable to load persistent stores: %@", v13, 0xCu);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B4E0);
      swift_arrayDestroy();
      MEMORY[0x242636844](v14, -1, -1);
      MEMORY[0x242636844](v13, -1, -1);
    }
    else
    {

    }
    v16 = sub_23D66BCD0();

    swift_beginAccess();
    v17 = *v6;
    *v6 = (void *)v16;

  }
}

void sub_23D617500(uint64_t a1, void *a2, void *a3)
{
  void (*v5)(id, void *);
  id v6;
  id v7;

  v5 = *(void (**)(id, void *))(a1 + 32);
  swift_retain();
  v7 = a2;
  v6 = a3;
  v5(v7, a3);
  swift_release();

}

id sub_23D617574()
{
  uint64_t v0;
  void *v1;
  id v2;
  id v3;
  void *v4;
  id v5;

  v1 = *(void **)(v0 + 176);
  if (v1)
  {
    v2 = *(id *)(v0 + 176);
  }
  else
  {
    v3 = objc_msgSend(*(id *)(v0 + 168), sel_newBackgroundContext);
    objc_msgSend(v3, sel_setMergePolicy_, *MEMORY[0x24BDBB478]);
    v4 = *(void **)(v0 + 176);
    *(_QWORD *)(v0 + 176) = v3;
    v2 = v3;

    v1 = 0;
  }
  v5 = v1;
  return v2;
}

uint64_t sub_23D6175F0()
{
  uint64_t v0;

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return v0;
}

uint64_t sub_23D61764C()
{
  sub_23D6175F0();
  return swift_deallocClassInstance();
}

uint64_t static SchemaInitializer.initializeCKSchema()()
{
  return swift_task_switch();
}

uint64_t sub_23D6176CC()
{
  uint64_t v0;
  void **v1;
  uint64_t v2;
  id v3;
  unsigned __int8 v4;
  void *v5;
  uint64_t v6;
  id v7;
  uint64_t v8;
  NSObject *v9;
  os_log_type_t v10;
  uint8_t *v11;
  id v13;
  void *v14;
  uint64_t v15;
  id v16;
  id v17;
  os_log_type_t v18;
  uint8_t *v19;
  _QWORD *v20;
  id v21;
  uint64_t v22;
  void *v23;

  v1 = (void **)(v0 + 16);
  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5E6808(&byte_25431AB68, v0 + 16);
  v2 = *(_QWORD *)(v0 + 224);
  if (!v2)
    return sub_23D66C720();
  swift_retain();
  sub_23D5E6844((_QWORD *)(v0 + 16));
  v3 = *(id *)(v2 + 168);
  swift_release();
  *v1 = 0;
  v4 = objc_msgSend(v3, sel_initializeCloudKitSchemaWithOptions_error_, 0, v0 + 16);
  v5 = *v1;
  if ((v4 & 1) != 0)
  {
    v6 = qword_25431A850;
    v7 = v5;
    if (v6 != -1)
      swift_once();
    v8 = sub_23D66BFDC();
    __swift_project_value_buffer(v8, (uint64_t)qword_25431AB50);
    v9 = sub_23D66BFC4();
    v10 = sub_23D66C594();
    if (os_log_type_enabled(v9, v10))
    {
      v11 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v11 = 0;
      _os_log_impl(&dword_23D5A8000, v9, v10, "successfully initialized CloudKit schema", v11, 2u);
      MEMORY[0x242636844](v11, -1, -1);
    }

    goto LABEL_16;
  }
  v13 = v5;
  v14 = (void *)sub_23D66BCDC();

  swift_willThrow();
  if (qword_25431A850 != -1)
    swift_once();
  v15 = sub_23D66BFDC();
  __swift_project_value_buffer(v15, (uint64_t)qword_25431AB50);
  v16 = v14;
  v17 = v14;
  v9 = sub_23D66BFC4();
  v18 = sub_23D66C594();
  if (!os_log_type_enabled(v9, v18))
  {

LABEL_16:
    return (*(uint64_t (**)(void))(v0 + 8))();
  }
  v19 = (uint8_t *)swift_slowAlloc();
  v23 = v3;
  v20 = (_QWORD *)swift_slowAlloc();
  *(_DWORD *)v19 = 138412290;
  v21 = v14;
  v22 = _swift_stdlib_bridgeErrorToNSError();
  *(_QWORD *)(v0 + 16) = v22;
  sub_23D66C5D0();
  *v20 = v22;

  _os_log_impl(&dword_23D5A8000, v9, v18, "error initializing CloudKit schema: %@", v19, 0xCu);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B4E0);
  swift_arrayDestroy();
  MEMORY[0x242636844](v20, -1, -1);
  MEMORY[0x242636844](v19, -1, -1);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t SchemaInitializer.deinit()
{
  uint64_t v0;

  return v0;
}

uint64_t SchemaInitializer.__deallocating_deinit()
{
  return swift_deallocClassInstance();
}

uint64_t sub_23D617AD8(void (*a1)(void))
{
  a1();
  return _swift_stdlib_bridgeErrorToNSError();
}

void sub_23D617AF8(uint64_t *a1, _QWORD **a2, uint64_t a3, uint64_t (*a4)(void))
{
  void *v6;
  uint64_t v7;
  _QWORD *v8;

  v6 = (void *)a4();
  v7 = *a1 + 8;
  sub_23D66C5D0();
  *a1 = v7;
  v8 = *a2;
  if (*a2)
  {
    *v8 = v6;
    *a2 = v8 + 1;
  }
  else
  {

  }
}

uint64_t type metadata accessor for CoreDataUtils()
{
  return objc_opt_self();
}

uint64_t sub_23D617BC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(a3 + 8))() & 1;
}

uint64_t type metadata accessor for SchemaInitializer()
{
  return objc_opt_self();
}

uint64_t method lookup function for SchemaInitializer()
{
  return swift_lookUpClassMethod();
}

uint64_t sub_23D617C10(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_25431A820);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23D617C50(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_25431A820);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_23D617C98()
{
  unint64_t result;

  result = qword_25431A860;
  if (!qword_25431A860)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_25431A860);
  }
  return result;
}

uint64_t sub_23D617CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int isUniquelyReferenced_nonNull_bridgeObject;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  if (a1 < 0)
  {
    __break(1u);
  }
  else
  {
    v3 = a3;
    v5 = a2;
    v6 = a1;
    v7 = *v4;
    if (!(*v4 >> 62))
    {
      if (*(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10) >= a2)
        goto LABEL_4;
LABEL_31:
      __break(1u);
      goto LABEL_32;
    }
  }
  swift_bridgeObjectRetain();
  v23 = sub_23D66C72C();
  swift_bridgeObjectRelease();
  if (v23 < v5)
    goto LABEL_31;
LABEL_4:
  v9 = v5 - v6;
  if (__OFSUB__(v5, v6))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  v8 = 1 - v9;
  if (__OFSUB__(1, v9))
  {
LABEL_33:
    __break(1u);
LABEL_34:
    swift_bridgeObjectRetain();
    v10 = sub_23D66C72C();
    swift_bridgeObjectRelease();
    v11 = v10 + v8;
    if (!__OFADD__(v10, v8))
      goto LABEL_8;
LABEL_36:
    __break(1u);
LABEL_37:
    swift_bridgeObjectRetain();
    v14 = sub_23D66C72C();
    swift_bridgeObjectRelease();
    goto LABEL_15;
  }
  v7 = *v4;
  if (*v4 >> 62)
    goto LABEL_34;
  v10 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
  v11 = v10 + v8;
  if (__OFADD__(v10, v8))
    goto LABEL_36;
LABEL_8:
  v7 = *v4;
  isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *v4 = v7;
  v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v7 & 0x8000000000000000) == 0 && (v7 & 0x4000000000000000) == 0)
  {
    v13 = v7 & 0xFFFFFFFFFFFFFF8;
    if (v11 <= *(_QWORD *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1)
      goto LABEL_18;
    v10 = 1;
  }
  if (v7 >> 62)
    goto LABEL_37;
  v14 = *(_QWORD *)((v7 & 0xFFFFFFFFFFFFF8) + 0x10);
LABEL_15:
  if (v14 <= v11)
    v14 = v11;
  swift_bridgeObjectRetain();
  v7 = MEMORY[0x24263604C](v10, v14, 1, v7);
  swift_bridgeObjectRelease();
  *v4 = v7;
  v13 = v7 & 0xFFFFFFFFFFFFFF8;
LABEL_18:
  v15 = (_QWORD *)(v13 + 32 + 8 * v6);
  sub_23D617C98();
  swift_arrayDestroy();
  if (!v8)
  {
LABEL_28:
    *v15 = v3;
    return sub_23D66C4C8();
  }
  if (!(v7 >> 62))
  {
    v16 = *(_QWORD *)(v13 + 16);
    v17 = v16 - v5;
    if (!__OFSUB__(v16, v5))
      goto LABEL_21;
LABEL_40:
    __break(1u);
    goto LABEL_41;
  }
  swift_bridgeObjectRetain();
  v24 = sub_23D66C72C();
  swift_bridgeObjectRelease();
  v17 = v24 - v5;
  if (__OFSUB__(v24, v5))
    goto LABEL_40;
LABEL_21:
  if ((v17 & 0x8000000000000000) == 0)
  {
    v18 = (char *)(v15 + 1);
    v19 = (char *)(v13 + 32 + 8 * v5);
    if (v15 + 1 != (_QWORD *)v19 || v18 >= &v19[8 * v17])
      memmove(v18, v19, 8 * v17);
    if (!(v7 >> 62))
    {
      v20 = *(_QWORD *)(v13 + 16);
      v21 = v20 + v8;
      if (!__OFADD__(v20, v8))
      {
LABEL_27:
        *(_QWORD *)(v13 + 16) = v21;
        goto LABEL_28;
      }
      goto LABEL_43;
    }
LABEL_41:
    swift_bridgeObjectRetain();
    v25 = sub_23D66C72C();
    swift_bridgeObjectRelease();
    v21 = v25 + v8;
    if (!__OFADD__(v25, v8))
      goto LABEL_27;
LABEL_43:
    __break(1u);
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D617FAC()
{
  uint64_t v0;

  return swift_deallocObject();
}

void sub_23D617FD0(int a1, void *a2)
{
  uint64_t v2;

  sub_23D617310(a1, a2, v2);
}

uint64_t block_copy_helper_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_0()
{
  return swift_release();
}

void sub_23D617FF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;

  v5 = sub_23D66BDC0();
  v6 = MEMORY[0x24BDAC7A8](v5);
  MEMORY[0x24BDAC7A8](v6);
  __asm { BR              X10 }
}

uint64_t sub_23D618094()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;

  sub_23D5AFA60(v2, v1);
  sub_23D5AFA60(v2, v1);
  sub_23D66BDCC();
  v3 = sub_23D5DDA20(v2, v1);
  return ((uint64_t (*)(uint64_t))((char *)sub_23D6180F8 + 4 * byte_23D673214[v0 >> 62]))(v3);
}

uint64_t sub_23D6180F8()
{
  uint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  void (*v9)(uint64_t, uint64_t);
  char v10;
  void (*v11)(uint64_t, uint64_t);
  void (*v12)(uint64_t, uint64_t);

  sub_23D5AFA60(v4, v1);
  sub_23D5AFA60(v4, v1);
  sub_23D66BDCC();
  sub_23D5DDA20(v4, v1);
  sub_23D5AE928(&qword_256C7B598, (uint64_t (*)(uint64_t))MEMORY[0x24BDCDD78], MEMORY[0x24BDCDD80]);
  while (1)
  {
    sub_23D66C5C4();
    if ((*(_BYTE *)(v6 - 81) & 1) != 0)
    {
      v11 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v11(v3, v0);
      sub_23D66C5C4();
      v11(v2, v0);
      v10 = *(_BYTE *)(v6 - 83) ^ 1;
      return v10 & 1;
    }
    v7 = *(unsigned __int8 *)(v6 - 82);
    sub_23D66C5C4();
    if ((*(_BYTE *)(v6 - 85) & 1) != 0)
      goto LABEL_6;
    v8 = *(unsigned __int8 *)(v6 - 86);
    if (v7 < v8)
      break;
    if (v8 < v7)
    {
LABEL_6:
      v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
      v9(v2, v0);
      v9(v3, v0);
      v10 = 0;
      return v10 & 1;
    }
  }
  v12 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v12(v2, v0);
  v12(v3, v0);
  v10 = 1;
  return v10 & 1;
}

uint64_t sub_23D618250@<X0>(uint64_t *a1@<X8>)
{
  void *v1;
  uint64_t v2;
  id v4;
  void *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  ValueMetadata *v9;
  uint64_t v10;
  uint64_t v12;
  ValueMetadata *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t, unint64_t, ValueMetadata *, uint64_t);

  v4 = objc_msgSend(v1, sel_rawData);
  if (v4)
  {
    v5 = v4;
    v6 = sub_23D66BD9C();
    v8 = v7;

    v9 = sub_23D61838C();
    if (v2)
    {
      return sub_23D5DDA20(v6, v8);
    }
    else
    {
      v13 = v9;
      v14 = v10;
      v15 = *(uint64_t (**)(uint64_t, unint64_t, ValueMetadata *, uint64_t))(v10 + 64);
      a1[3] = (uint64_t)v9;
      a1[4] = v10;
      __swift_allocate_boxed_opaque_existential_1(a1);
      return v15(v6, v8, v13, v14);
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v12 = 392;
    *(_OWORD *)(v12 + 8) = xmmword_23D673260;
    *(_OWORD *)(v12 + 24) = xmmword_23D673270;
    *(_QWORD *)(v12 + 40) = 0x800000023D6793F0;
    return swift_willThrow();
  }
}

ValueMetadata *sub_23D61838C()
{
  ValueMetadata *v0;
  id v1;
  uint64_t v2;

  v1 = -[ValueMetadata seedType](v0, sel_seedType);
  if (v1 == (id)1)
  {
    v0 = &type metadata for MemberSeed;
    sub_23D5ED1F8();
  }
  else if (v1)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v2 = 391;
    *(_OWORD *)(v2 + 8) = xmmword_23D673280;
    *(_OWORD *)(v2 + 24) = xmmword_23D673290;
    *(_QWORD *)(v2 + 40) = 0x800000023D6793F0;
    swift_willThrow();
  }
  else
  {
    v0 = &type metadata for AdminSeed;
    sub_23D5E803C();
  }
  return v0;
}

id sub_23D6184AC()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupKitCryptoGroupSeed();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GroupKitCryptoGroupSeed()
{
  return objc_opt_self();
}

uint64_t sub_23D6184FC(_BYTE *a1)
{
  void *v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  id v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  _BYTE *v38;
  _BYTE *v39;
  uint64_t v40;
  void (*v41)(_BYTE *, uint64_t);
  id v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  id v47;
  unsigned int (*v48)(uint64_t, uint64_t, uint64_t);
  void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char v53;
  id v54;
  id v55;
  id v56;
  void *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v64;
  unint64_t v65;
  _BYTE *v66;
  char v67;
  char v68;
  char v69;
  char v70;
  char v71;
  char v72;
  char v73;
  char v74;
  unint64_t v75;
  id v76;
  void *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _BYTE *v83;
  char v84;
  char v85;
  char v86;
  char v87;
  char v88;
  char v89;
  char v90;
  char v91;
  unint64_t v92;
  char v93;
  _BYTE v94[12];
  int v95;
  unsigned int (*v96)(uint64_t, uint64_t, uint64_t);
  _BYTE *v97;
  _BYTE *v98;
  _BYTE *v99;
  _BYTE *v100;
  _BYTE *v101;
  _BYTE *v102;
  id v103;
  void (*v104)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v105;
  uint64_t v106;
  uint64_t __src;
  char v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  uint64_t v116;

  v105 = a1;
  v2 = v1;
  v116 = *MEMORY[0x24BDAC8D0];
  v3 = sub_23D66BE20();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v101 = &v94[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B580);
  MEMORY[0x24BDAC7A8](v6);
  v8 = &v94[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B588);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v99 = &v94[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = MEMORY[0x24BDAC7A8](v10);
  v100 = &v94[-v13];
  v14 = MEMORY[0x24BDAC7A8](v12);
  v97 = &v94[-v15];
  v16 = MEMORY[0x24BDAC7A8](v14);
  v98 = &v94[-v17];
  v18 = MEMORY[0x24BDAC7A8](v16);
  v102 = &v94[-v19];
  v20 = MEMORY[0x24BDAC7A8](v18);
  v22 = &v94[-v21];
  MEMORY[0x24BDAC7A8](v20);
  v24 = &v94[-v23];
  v103 = v2;
  v25 = objc_msgSend(v2, sel_groupID);
  if (v25)
  {
    v26 = v25;
    sub_23D66BDF0();

    v27 = v4;
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v29 = v24;
    v30 = 0;
  }
  else
  {
    v27 = v4;
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v29 = v24;
    v30 = 1;
  }
  v104 = v28;
  v28(v29, v30, 1, v3);
  v31 = v3;
  v32 = v105;
  v33 = objc_msgSend(v105, sel_groupID);
  if (v33)
  {
    v34 = v33;
    sub_23D66BDF0();

    v35 = 0;
  }
  else
  {
    v35 = 1;
  }
  v104(v22, v35, 1, v3);
  v36 = (uint64_t)&v8[*(int *)(v6 + 48)];
  sub_23D618DEC((uint64_t)v24, (uint64_t)v8);
  sub_23D618DEC((uint64_t)v22, v36);
  v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v37((uint64_t)v8, 1, v3) == 1)
  {
    sub_23D5AEF8C((uint64_t)v22, &qword_256C7B588);
    sub_23D5AEF8C((uint64_t)v24, &qword_256C7B588);
    if (v37(v36, 1, v3) == 1)
    {
      sub_23D5AEF8C((uint64_t)v8, &qword_256C7B588);
      goto LABEL_14;
    }
LABEL_12:
    sub_23D5AEF8C((uint64_t)v8, &qword_256C7B580);
    goto LABEL_32;
  }
  v32 = v102;
  sub_23D618DEC((uint64_t)v8, (uint64_t)v102);
  if (v37(v36, 1, v3) == 1)
  {
    sub_23D5AEF8C((uint64_t)v22, &qword_256C7B588);
    sub_23D5AEF8C((uint64_t)v24, &qword_256C7B588);
    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v32, v3);
    goto LABEL_12;
  }
  v38 = v101;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v27 + 32))(v101, v36, v31);
  sub_23D5AE928((unint64_t *)&qword_256C7B590, (uint64_t (*)(uint64_t))MEMORY[0x24BDCEA58], MEMORY[0x24BDCEA98]);
  v95 = sub_23D66C384();
  v39 = v32;
  v40 = v31;
  v41 = *(void (**)(_BYTE *, uint64_t))(v27 + 8);
  v41(v38, v40);
  sub_23D5AEF8C((uint64_t)v22, &qword_256C7B588);
  sub_23D5AEF8C((uint64_t)v24, &qword_256C7B588);
  v41(v39, v40);
  v31 = v40;
  v32 = v105;
  sub_23D5AEF8C((uint64_t)v8, &qword_256C7B588);
  if ((v95 & 1) == 0)
    goto LABEL_32;
LABEL_14:
  v96 = v37;
  v42 = objc_msgSend(v103, sel_userID);
  if (v42)
  {
    v43 = v42;
    v44 = sub_23D66C39C();
    v46 = v45;

  }
  else
  {
    v44 = 0;
    v46 = 0;
  }
  v47 = objc_msgSend(v32, sel_userID);
  v48 = v96;
  if (!v47)
  {
    if (!v46)
      goto LABEL_28;
    goto LABEL_26;
  }
  v49 = v47;
  v50 = sub_23D66C39C();
  v52 = v51;

  if (!v46)
  {
    if (!v52)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (!v52)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_32;
  }
  if (v44 != v50 || v46 != v52)
  {
    v53 = sub_23D66C84C();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v53 & 1) != 0)
      goto LABEL_28;
LABEL_32:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v61 = swift_allocError();
    *(_WORD *)v62 = 402;
    *(_OWORD *)(v62 + 8) = xmmword_23D6732A0;
    *(_QWORD *)(v62 + 24) = 0x800000023D6793D0;
    *(_QWORD *)(v62 + 32) = 0xD000000000000072;
    *(_QWORD *)(v62 + 40) = 0x800000023D6793F0;
    v106 = v61;
    swift_willThrow();
    return v32 & 1;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
LABEL_28:
  v54 = objc_msgSend(v103, sel_groupVersion);
  if (v54 != objc_msgSend(v32, sel_groupVersion))
    goto LABEL_32;
  v55 = objc_msgSend(v103, sel_seedType);
  if (v55 != objc_msgSend(v32, sel_seedType))
    goto LABEL_32;
  v56 = objc_msgSend(v103, sel_dedupeID);
  if (v56)
  {
    v57 = v56;
    v58 = (uint64_t)v97;
    sub_23D66BDF0();

    v59 = 0;
  }
  else
  {
    v59 = 1;
    v58 = (uint64_t)v97;
  }
  v60 = (uint64_t)v98;
  v104((_BYTE *)v58, v59, 1, v31);
  sub_23D618E80(v58, v60);
  if (v48(v60, 1, v31))
  {
    sub_23D5AEF8C(v60, &qword_256C7B588);
    v64 = 0;
    v65 = 0xC000000000000000;
  }
  else
  {
    v66 = v101;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v27 + 16))(v101, v60, v31);
    sub_23D5AEF8C(v60, &qword_256C7B588);
    __src = sub_23D66BE08();
    v108 = v67;
    v109 = v68;
    v110 = v69;
    v111 = v70;
    v112 = v71;
    v113 = v72;
    v114 = v73;
    v115 = v74;
    v64 = sub_23D618EC8(&__src, 16);
    v65 = v75;
    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v66, v31);
  }
  v76 = objc_msgSend(v32, sel_dedupeID);
  if (v76)
  {
    v77 = v76;
    v78 = (uint64_t)v99;
    sub_23D66BDF0();

    v79 = 0;
  }
  else
  {
    v79 = 1;
    v78 = (uint64_t)v99;
  }
  v80 = (uint64_t)v100;
  v104((_BYTE *)v78, v79, 1, v31);
  sub_23D618E80(v78, v80);
  if (v96(v80, 1, v31))
  {
    sub_23D5AEF8C(v80, &qword_256C7B588);
    v81 = 0;
    v82 = 0xC000000000000000;
  }
  else
  {
    v83 = v101;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v27 + 16))(v101, v80, v31);
    sub_23D5AEF8C(v80, &qword_256C7B588);
    __src = sub_23D66BE08();
    v108 = v84;
    v109 = v85;
    v110 = v86;
    v111 = v87;
    v112 = v88;
    v113 = v89;
    v114 = v90;
    v115 = v91;
    v81 = sub_23D618EC8(&__src, 16);
    v82 = v92;
    (*(void (**)(_BYTE *, uint64_t))(v27 + 8))(v83, v31);
  }
  sub_23D617FF0(v64, v65, v81, v82);
  LOBYTE(v32) = v93;
  sub_23D5DDA20(v64, v65);
  sub_23D5DDA20(v81, v82);
  return v32 & 1;
}

uint64_t sub_23D618DEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

unint64_t sub_23D618E34()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256C790E0;
  if (!qword_256C790E0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256C790D8);
    result = MEMORY[0x242636790](&protocol conformance descriptor for GroupKitCryptoError<A>, v1);
    atomic_store(result, (unint64_t *)&qword_256C790E0);
  }
  return result;
}

uint64_t sub_23D618E80(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B588);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23D618EC8(_BYTE *__src, uint64_t a2)
{
  uint64_t result;

  if (!a2)
    return 0;
  if (a2 <= 14)
    return sub_23D62C704(__src, &__src[a2]);
  sub_23D66BCB8();
  swift_allocObject();
  sub_23D66BC7C();
  if ((unint64_t)a2 < 0x7FFFFFFF)
    return a2 << 32;
  sub_23D66BD3C();
  result = swift_allocObject();
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)(result + 24) = a2;
  return result;
}

uint64_t __swift_deallocate_boxed_opaque_existential_1(uint64_t result)
{
  if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) - 8) + 80) & 0x20000) != 0)
    JUMPOUT(0x242636844);
  return result;
}

uint64_t sub_23D618FA8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_23D618FB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 24))();
}

uint64_t sub_23D618FB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 32))();
}

uint64_t sub_23D618FC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_23D618FC8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 48))();
}

uint64_t sub_23D618FE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 56))();
}

uint64_t sub_23D618FF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 64))();
}

uint64_t sub_23D619010(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 72))();
}

ValueMetadata *type metadata accessor for MemberSeed()
{
  return &type metadata for MemberSeed;
}

uint64_t destroy for AdminSeed(uint64_t *a1)
{
  uint64_t result;
  unint64_t v3;

  result = sub_23D5DDA20(*a1, a1[1]);
  v3 = a1[3];
  if (v3 >> 60 != 15)
    return sub_23D5DDA20(a1[2], v3);
  return result;
}

uint64_t initializeWithCopy for AdminSeed(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = a2 + 2;
  v7 = a2[3];
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_23D5AFA60(*v6, v7);
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  return a1;
}

uint64_t *assignWithCopy for AdminSeed(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_23D5DDA20(v6, v7);
  v8 = a2 + 2;
  v9 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_23D5AFA60(*v8, v9);
      v12 = a1[2];
      v13 = a1[3];
      a1[2] = v11;
      a1[3] = v9;
      sub_23D5DDA20(v12, v13);
      return a1;
    }
    sub_23D5EE998((uint64_t)(a1 + 2));
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v8;
    return a1;
  }
  v10 = *v8;
  sub_23D5AFA60(*v8, v9);
  a1[2] = v10;
  a1[3] = v9;
  return a1;
}

__n128 __swift_memcpy32_8(_OWORD *a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for AdminSeed(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v4, v5);
  v6 = (uint64_t *)(a2 + 16);
  v7 = a1[3];
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = a1[2];
      a1[2] = *v6;
      a1[3] = v8;
      sub_23D5DDA20(v9, v7);
      return a1;
    }
    sub_23D5EE998((uint64_t)(a1 + 2));
  }
  *((_OWORD *)a1 + 1) = *(_OWORD *)v6;
  return a1;
}

uint64_t getEnumTagSinglePayload for AdminSeed(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 32))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AdminSeed(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_QWORD *)result = a2 - 13;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 32) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for AdminSeed()
{
  return &type metadata for AdminSeed;
}

void sub_23D619308(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_23D619348()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  os_log_type_t v10;
  NSObject *v11;
  os_log_type_t v12;
  uint8_t *v13;
  uint64_t v14;
  uint64_t v15;

  if (BYTE6(v0) == 32)
  {
    if (*(_QWORD *)(v1 + 24) >> 60 == 15)
    {
      *(_QWORD *)(v1 + 16) = v2;
      *(_QWORD *)(v1 + 24) = v0;
      return sub_23D5AFA60(v2, v0);
    }
    if (qword_256C78B10 != -1)
      swift_once();
    v9 = sub_23D66BFDC();
    __swift_project_value_buffer(v9, (uint64_t)qword_256C88B78);
    v10 = sub_23D66C588();
    v11 = sub_23D66BFC4();
    v12 = v10;
    if (os_log_type_enabled(v11, v10))
    {
      v13 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v13 = 0;
      _os_log_impl(&dword_23D5A8000, v11, v12, "attempted to set admin seed diversifier when it has already been set", v13, 2u);
      MEMORY[0x242636844](v13, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_BYTE *)v14 = 110;
    v15 = 143;
  }
  else
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v5 = sub_23D66BFDC();
    __swift_project_value_buffer(v5, (uint64_t)qword_256C88B78);
    v6 = sub_23D66C588();
    sub_23D5AFA60(v2, v0);
    v7 = sub_23D66BFC4();
    if (os_log_type_enabled(v7, v6))
    {
      v8 = swift_slowAlloc();
      *(_DWORD *)v8 = 134218240;
      sub_23D66C5D0();
      *(_WORD *)(v8 + 12) = 2048;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v2, v0);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_BYTE *)v14 = 4;
    v15 = 139;
  }
  *(_BYTE *)(v14 + 1) = 1;
  *(_QWORD *)(v14 + 8) = v15;
  *(_QWORD *)(v14 + 16) = 0xD000000000000024;
  *(_QWORD *)(v14 + 24) = 0x800000023D679900;
  *(_QWORD *)(v14 + 32) = 0xD000000000000052;
  *(_QWORD *)(v14 + 40) = 0x800000023D677550;
  return swift_willThrow();
}

uint64_t sub_23D6196B8(_OWORD *a1, unsigned int a2, unsigned int a3, uint64_t a4, uint64_t a5, char *a6, _OWORD *a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unsigned int (*v33)(char *, uint64_t, _OWORD *);
  uint64_t v34;
  os_log_type_t v35;
  NSObject *v36;
  uint64_t v37;
  uint8_t *v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int *v47;
  _OWORD *v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  _OWORD *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  char *v70;
  unsigned int *v71;
  char *v72;
  uint64_t v73;
  os_log_type_t v74;
  NSObject *v75;
  uint8_t *v76;
  uint64_t v77;
  os_log_type_t v78;
  NSObject *v79;
  uint8_t *v80;
  uint64_t v82;
  char *v83;
  uint64_t v84;
  char *v85;
  void (*v86)(char *, char *, _OWORD *);
  _OWORD *v87;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t (*v93)(_OWORD *, uint64_t);
  uint64_t v94;
  unint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  char v100;
  char v101;
  void (*v102)(char *, _OWORD *);
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  NSObject *v106;
  _BOOL4 v107;
  char *v108;
  uint8_t *v109;
  uint64_t v110;
  void (*v111)(char *, _OWORD *);
  unsigned int (*v112)(char *, uint64_t, _OWORD *);
  char *v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  __int128 v120;
  uint64_t v121;
  uint64_t (*v122)(_OWORD *, uint64_t);
  uint64_t v123;
  uint64_t v124;
  _OWORD *v125;
  char *v126;
  char *v127;
  char *v128;
  unsigned int *v129;
  char *v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  __int128 v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;

  v126 = a6;
  v124 = a5;
  v119 = a4;
  v125 = a1;
  v117 = sub_23D66C5B8();
  v116 = *(_QWORD *)(v117 - 8);
  MEMORY[0x24BDAC7A8](v117);
  v115 = (char *)&v112 - v14;
  v132 = a9;
  v131 = type metadata accessor for VersionedSeed(0, (uint64_t)a7, a9, v15);
  v16 = MEMORY[0x24BDAC7A8](v131);
  v129 = (unsigned int *)((char *)&v112 - v17);
  v18 = *((_QWORD *)a7 - 1);
  v19 = MEMORY[0x24BDAC7A8](v16);
  v113 = (char *)&v112 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = MEMORY[0x24BDAC7A8](v19);
  v114 = (char *)&v112 - v22;
  v23 = MEMORY[0x24BDAC7A8](v21);
  v127 = (char *)&v112 - v24;
  MEMORY[0x24BDAC7A8](v23);
  v130 = (char *)&v112 - v25;
  v133 = sub_23D66C054();
  v135 = *(_QWORD *)(v133 - 8);
  v26 = MEMORY[0x24BDAC7A8](v133);
  v128 = (char *)&v112 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v26);
  v134 = (char *)&v112 - v28;
  v29 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256C7B5C0);
  v122 = (uint64_t (*)(_OWORD *, uint64_t))a10;
  v30 = *(_QWORD *)(a10 + 8);
  v31 = sub_23D61C8E4();
  v123 = a8;
  *(_QWORD *)&v137 = a8;
  *((_QWORD *)&v137 + 1) = v29;
  v118 = v29;
  v138 = v30;
  v139 = v31;
  v32 = sub_23D66C654();
  MEMORY[0x24BDAC7A8](v32);
  if (a3 >= a2)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v34 = sub_23D66BFDC();
    __swift_project_value_buffer(v34, (uint64_t)qword_256C88B78);
    v35 = sub_23D66C588();
    v36 = sub_23D66BFC4();
    v37 = v35;
    if (os_log_type_enabled(v36, v35))
    {
      v38 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v38 = 0;
      _os_log_impl(&dword_23D5A8000, v36, (os_log_type_t)v37, "failed opening blob chain due to outdated version", v38, 2u);
      MEMORY[0x242636844](v38, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v39 = 361;
    v40 = xmmword_23D6732B0;
    goto LABEL_27;
  }
  v120 = *v125;
  v121 = v18;
  v33 = *(unsigned int (**)(char *, uint64_t, _OWORD *))(v18 + 48);
  v125 = a7;
  if (v33(v126, 1, a7) == 1)
  {
    if (!a3)
    {
      a3 = 1;
      goto LABEL_11;
    }
LABEL_19:
    if (qword_256C78B10 == -1)
    {
LABEL_20:
      v73 = sub_23D66BFDC();
      __swift_project_value_buffer(v73, (uint64_t)qword_256C88B78);
      v74 = sub_23D66C588();
      v75 = sub_23D66BFC4();
      v37 = v74;
      if (os_log_type_enabled(v75, v74))
      {
        v76 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v76 = 0;
        _os_log_impl(&dword_23D5A8000, v75, (os_log_type_t)v37, "failed opening blob chain due to invalid version", v76, 2u);
        MEMORY[0x242636844](v76, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D618E34();
      swift_allocError();
      *(_WORD *)v39 = 363;
      v40 = xmmword_23D6732C0;
      goto LABEL_27;
    }
LABEL_42:
    swift_once();
    goto LABEL_20;
  }
  if (!a3)
    goto LABEL_19;
LABEL_11:
  v112 = v33;
  v41 = sub_23D66C54C();
  if (a2 < a3)
  {
    __break(1u);
    goto LABEL_42;
  }
  if (v41 != a2 - a3)
  {
    if (qword_256C78B10 == -1)
    {
LABEL_24:
      v77 = sub_23D66BFDC();
      __swift_project_value_buffer(v77, (uint64_t)qword_256C88B78);
      v78 = sub_23D66C588();
      v79 = sub_23D66BFC4();
      v37 = v78;
      if (os_log_type_enabled(v79, v78))
      {
        v80 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v80 = 0;
        _os_log_impl(&dword_23D5A8000, v79, (os_log_type_t)v37, "failed opening blob chain due to wrong number of seed blobs", v80, 2u);
        MEMORY[0x242636844](v80, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D618E34();
      swift_allocError();
      *(_WORD *)v39 = 370;
      v40 = xmmword_23D6732D0;
LABEL_27:
      *(_OWORD *)(v39 + 8) = v40;
      *(_QWORD *)(v39 + 24) = 0x800000023D679710;
      *(_QWORD *)(v39 + 32) = 0xD000000000000052;
      *(_QWORD *)(v39 + 40) = 0x800000023D677550;
      swift_willThrow();
      return v37;
    }
LABEL_44:
    swift_once();
    goto LABEL_24;
  }
  if (a3 > a2)
  {
    __break(1u);
    goto LABEL_44;
  }
  *(_QWORD *)&v137 = __PAIR64__(a2, a3);
  sub_23D66C87C();
  MEMORY[0x242636790](MEMORY[0x24BEE2620], v32);
  v42 = sub_23D66C45C();
  v43 = (uint64_t)v134;
  v44 = v133;
  (*(void (**)(void))(v135 + 16))();
  v45 = v131;
  v140 = sub_23D66C4D4();
  v46 = *(_QWORD *)(v42 + 16);
  v118 = v42;
  if (!v46)
  {
    v48 = v125;
    v69 = v121;
LABEL_30:
    swift_bridgeObjectRelease();
    v82 = v116;
    v83 = v115;
    v84 = v117;
    (*(void (**)(char *, char *, uint64_t))(v116 + 16))(v115, v126, v117);
    if (v112(v83, 1, v48) == 1)
    {
      (*(void (**)(char *, uint64_t))(v82 + 8))(v83, v84);
      v85 = (char *)v43;
LABEL_35:
      *(_QWORD *)&v137 = v140;
      v103 = sub_23D66C504();
      swift_bridgeObjectRetain();
      MEMORY[0x242636790](MEMORY[0x24BEE12C8], v103);
      v37 = sub_23D66C45C();
      (*(void (**)(char *, uint64_t))(v135 + 8))(v85, v44);
      swift_bridgeObjectRelease();
      return v37;
    }
    v86 = *(void (**)(char *, char *, _OWORD *))(v69 + 32);
    v87 = v48;
    v88 = v114;
    v86(v114, v83, v87);
    v89 = swift_bridgeObjectRetain();
    v90 = MEMORY[0x242635ECC](v89, v45);
    swift_bridgeObjectRelease();
    if (__OFSUB__(v90, 1))
    {
      __break(1u);
    }
    else
    {
      v91 = v129;
      sub_23D66C510();
      v86(v113, (char *)v91 + *(int *)(v45 + 36), v87);
      v92 = v132;
      v93 = *(uint64_t (**)(_OWORD *, uint64_t))(v132 + 40);
      v94 = v93(v87, v132);
      v96 = v95;
      v97 = v93(v87, v92);
      v99 = v98;
      sub_23D5D9848(v94, v96);
      v101 = v100;
      sub_23D5DDA20(v97, v99);
      sub_23D5DDA20(v94, v96);
      if ((v101 & 1) != 0)
      {
        v102 = *(void (**)(char *, _OWORD *))(v121 + 8);
        v102(v113, v87);
        v102(v114, v87);
        v85 = v134;
        goto LABEL_35;
      }
      v88 = v134;
      if (qword_256C78B10 == -1)
      {
LABEL_38:
        v104 = sub_23D66BFDC();
        __swift_project_value_buffer(v104, (uint64_t)qword_256C88B78);
        v105 = sub_23D66C588();
        v106 = sub_23D66BFC4();
        v37 = v105;
        v107 = os_log_type_enabled(v106, v105);
        v108 = v113;
        if (v107)
        {
          v109 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v109 = 0;
          _os_log_impl(&dword_23D5A8000, v106, (os_log_type_t)v37, "failed opening blob chain due to mismatch seeds", v109, 2u);
          MEMORY[0x242636844](v109, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D618E34();
        swift_allocError();
        *(_WORD *)v110 = 364;
        *(_OWORD *)(v110 + 8) = xmmword_23D6732E0;
        *(_QWORD *)(v110 + 24) = 0x800000023D679710;
        *(_QWORD *)(v110 + 32) = 0xD000000000000052;
        *(_QWORD *)(v110 + 40) = 0x800000023D677550;
        swift_willThrow();
        v111 = *(void (**)(char *, _OWORD *))(v121 + 8);
        v111(v108, v87);
        v111(v114, v87);
        (*(void (**)(char *, uint64_t))(v135 + 8))(v88, v44);
        swift_bridgeObjectRelease();
        return v37;
      }
    }
    swift_once();
    goto LABEL_38;
  }
  v122 = *(uint64_t (**)(_OWORD *, uint64_t))(v132 + 16);
  v47 = (unsigned int *)(v42 + 48);
  v48 = v125;
  while (1)
  {
    v123 = v46;
    v50 = *((_QWORD *)v47 - 2);
    v49 = *((_QWORD *)v47 - 1);
    v51 = *v47;
    v137 = v120;
    sub_23D5AFA60(v50, v49);
    v37 = (uint64_t)v48;
    v52 = v132;
    v53 = v122(v48, v132);
    v55 = v54;
    v124 = v50;
    v125 = (_OWORD *)v49;
    v56 = v136;
    v57 = sub_23D61A610((uint64_t *)&v137, v51, v43, v53, v54, v50, v49);
    if (v56)
      break;
    v59 = v57;
    v60 = v58;
    sub_23D5DDA20(v53, v55);
    v61 = v130;
    (*(void (**)(unint64_t, uint64_t, uint64_t, uint64_t))(v52 + 64))(v59, v60, v37, v52);
    v62 = (_OWORD *)v37;
    v63 = v128;
    (*(void (**)(uint64_t, uint64_t))(v52 + 48))(v37, v52);
    v64 = v133;
    v65 = v134;
    v136 = 0;
    v47 += 6;
    v66 = v135;
    (*(void (**)(char *, uint64_t))(v135 + 8))(v134, v133);
    (*(void (**)(char *, char *, uint64_t))(v66 + 32))(v65, v63, v64);
    v67 = v64;
    v68 = v61;
    v69 = v121;
    v70 = v127;
    (*(void (**)(char *, char *, _OWORD *))(v121 + 16))(v127, v68, v62);
    v43 = (uint64_t)v65;
    v71 = v129;
    *v129 = v51;
    v45 = v131;
    (*(void (**)(char *, char *, _OWORD *))(v69 + 32))((char *)v71 + *(int *)(v131 + 36), v70, v62);
    sub_23D66C504();
    sub_23D66C4F8();
    sub_23D5DDA20(v124, (unint64_t)v125);
    v72 = v68;
    v44 = v67;
    v48 = v62;
    (*(void (**)(char *, _OWORD *))(v69 + 8))(v72, v62);
    v46 = v123 - 1;
    if (v123 == 1)
      goto LABEL_30;
  }
  sub_23D5DDA20(v53, v55);
  sub_23D5DDA20(v124, (unint64_t)v125);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v134, v133);
  swift_bridgeObjectRelease();
  return v37;
}

uint64_t sub_23D61A300()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000002CLL, 0x800000023D679490);
  qword_256C89080 = result;
  *(_QWORD *)algn_256C89088 = v1;
  return result;
}

uint64_t sub_23D61A338()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000002DLL, 0x800000023D6794C0);
  qword_256C89090 = result;
  *(_QWORD *)algn_256C89098 = v1;
  return result;
}

uint64_t sub_23D61A370()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000002FLL, 0x800000023D679510);
  qword_256C890A0 = result;
  *(_QWORD *)algn_256C890A8 = v1;
  return result;
}

uint64_t sub_23D61A3A8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000031, 0x800000023D6795C0);
  qword_256C890B0 = result;
  *(_QWORD *)algn_256C890B8 = v1;
  return result;
}

uint64_t sub_23D61A3E0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000033, 0x800000023D6796D0);
  qword_256C890C0 = result;
  *(_QWORD *)algn_256C890C8 = v1;
  return result;
}

uint64_t sub_23D61A418()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000035, 0x800000023D679600);
  qword_256C890D0 = result;
  *(_QWORD *)algn_256C890D8 = v1;
  return result;
}

uint64_t sub_23D61A450()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000042, 0x800000023D679860);
  qword_256C890E0 = result;
  *(_QWORD *)algn_256C890E8 = v1;
  return result;
}

uint64_t sub_23D61A488()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000002DLL, 0x800000023D679830);
  qword_256C890F0 = result;
  *(_QWORD *)algn_256C890F8 = v1;
  return result;
}

uint64_t sub_23D61A4C0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000032, 0x800000023D679540);
  qword_256C89100 = result;
  *(_QWORD *)algn_256C89108 = v1;
  return result;
}

uint64_t sub_23D61A4F8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000034, 0x800000023D6797F0);
  qword_256C89110 = result;
  *(_QWORD *)algn_256C89118 = v1;
  return result;
}

uint64_t sub_23D61A530()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000036, 0x800000023D679580);
  qword_256C89120 = result;
  *(_QWORD *)algn_256C89128 = v1;
  return result;
}

uint64_t sub_23D61A568()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000043, 0x800000023D6798B0);
  qword_256C89130 = result;
  *(_QWORD *)algn_256C89138 = v1;
  return result;
}

uint64_t sub_23D61A5A0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000002ELL, 0x800000023D6796A0);
  qword_256C89140 = result;
  *(_QWORD *)algn_256C89148 = v1;
  return result;
}

uint64_t sub_23D61A5D8()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000054, 0x800000023D679640);
  qword_256C89150 = result;
  *(_QWORD *)algn_256C89158 = v1;
  return result;
}

unint64_t sub_23D61A610(uint64_t *a1, unsigned int a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t inited;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  _QWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  char *v41;
  _OWORD v42[2];
  uint64_t v43;
  uint64_t v44;

  v35 = a5;
  v34 = a4;
  v36 = a3;
  v40 = a2;
  v44 = *MEMORY[0x24BDAC8D0];
  v38 = sub_23D66C108();
  v32[2] = *(_QWORD *)(v38 - 8);
  MEMORY[0x24BDAC7A8](v38);
  v37 = (char *)v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v39 = sub_23D66C054();
  MEMORY[0x24BDAC7A8](v39);
  v12 = (char *)v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for GKCrypto_SeedBlob(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v32 - v18;
  v20 = *a1;
  v21 = a1[1];
  v33 = v20;
  v43 = 0;
  memset(v42, 0, sizeof(v42));
  sub_23D5AFA60(a6, a7);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C79988, type metadata accessor for GKCrypto_SeedBlob, (uint64_t)&unk_23D670B74);
  v22 = v41;
  sub_23D66BF10();
  if (!v22)
  {
    v41 = v17;
    v32[1] = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
    v24 = v33;
    *(_QWORD *)(inited + 32) = v33;
    *(_QWORD *)(inited + 40) = v21;
    LODWORD(v42[0]) = bswap32(v40);
    sub_23D5AFA60(v24, v21);
    *(_QWORD *)(inited + 48) = sub_23D628C44((uint64_t)v42, (uint64_t)v42 + 4);
    *(_QWORD *)(inited + 56) = v25;
    v26 = v34;
    v27 = v35;
    *(_QWORD *)(inited + 64) = v34;
    *(_QWORD *)(inited + 72) = v27;
    sub_23D5AFA60(v26, v27);
    if (qword_256C78CF8 != -1)
      swift_once();
    v28 = qword_256C890A0;
    v29 = *(_QWORD *)algn_256C890A8;
    *(_QWORD *)(inited + 80) = qword_256C890A0;
    *(_QWORD *)(inited + 88) = v29;
    sub_23D5AFA60(v28, v29);
    v34 = sub_23D62FE18(inited);
    v35 = v30;
    swift_setDeallocating();
    swift_arrayDestroy();
    __asm { BR              X12 }
  }
  return v21;
}

uint64_t sub_23D61AE68()
{
  if (qword_256C78CE8 != -1)
    swift_once();
  qword_256C89160 = qword_256C89080;
  *(_QWORD *)algn_256C89168 = *(_QWORD *)algn_256C89088;
  return sub_23D5AFA60(qword_256C89080, *(unint64_t *)algn_256C89088);
}

uint64_t sub_23D61AEB8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[3] = MEMORY[0x24BEE0F88];
  v14[4] = MEMORY[0x24BDCFB90];
  v14[0] = a1;
  v14[1] = a2;
  v4 = __swift_project_boxed_opaque_existential_1(v14, MEMORY[0x24BEE0F88]);
  v5 = (_BYTE *)*v4;
  if (*v4 && (v6 = (_BYTE *)v4[1], v7 = v6 - v5, v6 != v5))
  {
    if (v7 <= 14)
    {
      v8 = sub_23D62C704(v5, v6);
      v9 = v12 & 0xFFFFFFFFFFFFFFLL;
    }
    else if ((unint64_t)v7 >= 0x7FFFFFFF)
    {
      v8 = sub_23D62C7C4((uint64_t)v5, (uint64_t)v6);
      v9 = v13 | 0x8000000000000000;
    }
    else
    {
      v8 = sub_23D62C83C((uint64_t)v5, (uint64_t)v6);
      v9 = v11 | 0x4000000000000000;
    }
  }
  else
  {
    v8 = 0;
    v9 = 0xC000000000000000;
  }
  result = __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
  *a3 = v8;
  a3[1] = v9;
  return result;
}

uint64_t sub_23D61AF80(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  os_log_type_t v15;
  NSObject *v16;
  os_log_type_t v17;
  uint8_t *v18;
  uint64_t v19;
  _QWORD v21[2];

  v5 = v4;
  v10 = type metadata accessor for GKCrypto_AdminSeed(0);
  v11 = MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a4 >> 60 == 15)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v14 = sub_23D66BFDC();
    __swift_project_value_buffer(v14, (uint64_t)qword_256C88B78);
    v15 = sub_23D66C588();
    v16 = sub_23D66BFC4();
    v17 = v15;
    if (os_log_type_enabled(v16, v15))
    {
      v18 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v18 = 0;
      _os_log_impl(&dword_23D5A8000, v16, v17, "attempted serialization without a seed diversifier", v18, 2u);
      MEMORY[0x242636844](v18, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v19 = 365;
    *(_OWORD *)(v19 + 8) = xmmword_23D673310;
    *(_QWORD *)(v19 + 24) = 0x800000023D6794F0;
    *(_QWORD *)(v19 + 32) = 0xD000000000000052;
    *(_QWORD *)(v19 + 40) = 0x800000023D677550;
    swift_willThrow();
  }
  else
  {
    MEMORY[0x24BDAC7A8](v11);
    v21[-6] = a1;
    v21[-5] = a2;
    v21[-4] = a3;
    v21[-3] = a4;
    v21[-2] = a3;
    v21[-1] = a4;
    sub_23D5AFA60(a3, a4);
    sub_23D5AE928(&qword_256C7A208, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D67073C);
    sub_23D66BF4C();
    v5 = sub_23D66BF1C();
    sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_AdminSeed);
    sub_23D5E725C(a3, a4);
  }
  return v5;
}

uint64_t sub_23D61B204(uint64_t *a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unint64_t a7)
{
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t result;

  v12 = *a1;
  v13 = a1[1];
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v12, v13);
  *a1 = a2;
  a1[1] = a3;
  v14 = a1[2];
  v15 = a1[3];
  sub_23D5AFA60(a6, a7);
  result = sub_23D5DDA20(v14, v15);
  a1[2] = a6;
  a1[3] = a7;
  return result;
}

uint64_t sub_23D61B290(uint64_t a1, uint64_t a2)
{
  return sub_23D61B894(a1, a2, &qword_256C78D58, &qword_256C89160, (unint64_t *)algn_256C89168);
}

uint64_t sub_23D61B2B0()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23D5AFA60(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t sub_23D61B2E0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD v11[5];

  v5 = *v3;
  v6 = v3[1];
  v8 = v3[2];
  v7 = v3[3];
  v11[3] = a1;
  v11[4] = a2;
  v9 = (_QWORD *)swift_allocObject();
  v11[0] = v9;
  v9[2] = v5;
  v9[3] = v6;
  v9[4] = v8;
  v9[5] = v7;
  sub_23D5AFA60(v5, v6);
  sub_23D5E7284(v8, v7);
  if (qword_256C78D08 != -1)
    swift_once();
  sub_23D61D4A8(v11, 1, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
}

uint64_t sub_23D61B3B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  result = sub_23D61C6A8(a1, a2);
  if (!v3)
  {
    *a3 = result;
    a3[1] = v6;
    a3[2] = v7;
    a3[3] = v8;
  }
  return result;
}

uint64_t sub_23D61B3E0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_23D66C8E8();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  sub_23D66C900();
  if (v4 >> 60 != 15)
  {
    sub_23D5AFA60(v3, v4);
    sub_23D66BDA8();
    sub_23D5E725C(v3, v4);
  }
  return sub_23D66C90C();
}

uint64_t sub_23D61B4A0()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_23D5AFA60(*v0, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  if (v4 >> 60 == 15)
    return sub_23D66C900();
  sub_23D66C900();
  sub_23D5AFA60(v3, v4);
  sub_23D66BDA8();
  return sub_23D5E725C(v3, v4);
}

uint64_t sub_23D61B558()
{
  uint64_t *v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  unint64_t v4;

  v1 = *v0;
  v2 = v0[1];
  v3 = v0[2];
  v4 = v0[3];
  sub_23D66C8E8();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  sub_23D66C900();
  if (v4 >> 60 != 15)
  {
    sub_23D5AFA60(v3, v4);
    sub_23D66BDA8();
    sub_23D5E725C(v3, v4);
  }
  return sub_23D66C90C();
}

uint64_t sub_23D61B614(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char v6;
  char v7;

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a1, v3);
  sub_23D5AFA60(v4, v5);
  sub_23D5D9848(v2, v3);
  v7 = v6;
  sub_23D5DDA20(v4, v5);
  sub_23D5DDA20(v2, v3);
  return v7 & 1;
}

unint64_t sub_23D61B694()
{
  unint64_t result;

  result = qword_256C7B5A0;
  if (!qword_256C7B5A0)
  {
    result = MEMORY[0x242636790](&unk_23D673388, &type metadata for AdminSeed);
    atomic_store(result, (unint64_t *)&qword_256C7B5A0);
  }
  return result;
}

uint64_t sub_23D61B6D8()
{
  if (qword_256C78CF0 != -1)
    swift_once();
  qword_256C89170 = qword_256C89090;
  *(_QWORD *)algn_256C89178 = *(_QWORD *)algn_256C89098;
  return sub_23D5AFA60(qword_256C89090, *(unint64_t *)algn_256C89098);
}

uint64_t sub_23D61B728(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD v14[5];

  if (qword_256C78D50 != -1)
    swift_once();
  v8 = qword_256C89150;
  v9 = *(_QWORD *)algn_256C89158;
  sub_23D5AFA60(qword_256C89150, *(unint64_t *)algn_256C89158);
  swift_bridgeObjectRetain();
  v10 = sub_23D628188(a1, a2);
  v12 = v11;
  sub_23D5AFA60(v8, v9);
  sub_23D64C120(v10, v12);
  sub_23D5DDA20(v10, v12);
  sub_23D5DDA20(v8, v9);
  v14[3] = &type metadata for MemberSeed;
  v14[4] = sub_23D5ED1F8();
  v14[0] = a3;
  v14[1] = a4;
  sub_23D5AFA60(a3, a4);
  sub_23D61D638((uint64_t)v14, 2, v8, v9);
  sub_23D5DDA20(v8, v9);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v14);
}

uint64_t sub_23D61B874(uint64_t a1, uint64_t a2)
{
  return sub_23D61B894(a1, a2, &qword_256C78D60, &qword_256C89170, (unint64_t *)algn_256C89178);
}

uint64_t sub_23D61B894(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4, unint64_t *a5)
{
  uint64_t v7;

  if (*a3 != -1)
    swift_once();
  v7 = *a4;
  sub_23D5AFA60(v7, *a5);
  return v7;
}

uint64_t sub_23D61B8EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v3;
  uint64_t v5;
  unint64_t v6;
  _QWORD v8[5];

  v5 = *v3;
  v6 = v3[1];
  v8[3] = a1;
  v8[4] = a2;
  v8[0] = v5;
  v8[1] = v6;
  sub_23D5AFA60(v5, v6);
  if (qword_256C78D30 != -1)
    swift_once();
  sub_23D61D4A8(v8, 1, a3);
  return __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
}

void sub_23D61B984(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  sub_23D61BF0C(a1, a2);
  if (!v3)
  {
    *a3 = v5;
    a3[1] = v6;
  }
}

unint64_t sub_23D61B9B0()
{
  unint64_t result;

  result = qword_256C7B5A8;
  if (!qword_256C7B5A8)
  {
    result = MEMORY[0x242636790](&unk_23D6733F0, &type metadata for MemberSeed);
    atomic_store(result, (unint64_t *)&qword_256C7B5A8);
  }
  return result;
}

unint64_t sub_23D61B9F4(uint64_t a1)
{
  unint64_t result;

  result = sub_23D61BA18();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23D61BA18()
{
  unint64_t result;

  result = qword_256C7B5B0;
  if (!qword_256C7B5B0)
  {
    result = MEMORY[0x242636790](&unk_23D673418, &type metadata for MemberSeed);
    atomic_store(result, (unint64_t *)&qword_256C7B5B0);
  }
  return result;
}

unint64_t sub_23D61BA5C(uint64_t a1)
{
  unint64_t result;

  result = sub_23D61BA80();
  *(_QWORD *)(a1 + 8) = result;
  return result;
}

unint64_t sub_23D61BA80()
{
  unint64_t result;

  result = qword_256C7B5B8;
  if (!qword_256C7B5B8)
  {
    result = MEMORY[0x242636790](&unk_23D6733B0, &type metadata for AdminSeed);
    atomic_store(result, (unint64_t *)&qword_256C7B5B8);
  }
  return result;
}

uint64_t sub_23D61BAC4(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v6;
  unint64_t v7;
  uint64_t inited;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v15;
  _BYTE v16[112];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v7 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E460;
  v15 = bswap32(*(_DWORD *)v3);
  *(_QWORD *)(inited + 32) = sub_23D628C44((uint64_t)&v15, (uint64_t)v16);
  *(_QWORD *)(inited + 40) = v9;
  *(_QWORD *)(inited + 48) = v6;
  *(_QWORD *)(inited + 56) = v7;
  v15 = bswap32(*(_DWORD *)(v3 + 56));
  sub_23D5AFA60(v6, v7);
  *(_QWORD *)(inited + 64) = sub_23D628C44((uint64_t)&v15, (uint64_t)v16);
  *(_QWORD *)(inited + 72) = v10;
  v11 = *(_QWORD *)(v3 + 8);
  v12 = *(_QWORD *)(v3 + 16);
  *(_QWORD *)(inited + 80) = v11;
  *(_QWORD *)(inited + 88) = v12;
  *(_QWORD *)(inited + 96) = a2;
  *(_QWORD *)(inited + 104) = a3;
  sub_23D5AFA60(v11, v12);
  sub_23D5AFA60(a2, a3);
  v13 = sub_23D62FE18(inited);
  swift_setDeallocating();
  swift_arrayDestroy();
  return v13;
}

uint64_t sub_23D61BC00@<X0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  char *v7;

  *a5 = a1;
  v7 = (char *)a5 + *(int *)(type metadata accessor for VersionedSeed(0, a3, a4, a4) + 36);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(_QWORD *)(a3 - 8) + 32))(v7, a2, a3);
}

void sub_23D61BC58(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_23D61BC98()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  if (BYTE6(v0) != 64)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v3 = sub_23D66BFDC();
    __swift_project_value_buffer(v3, (uint64_t)qword_256C88B78);
    v4 = sub_23D66C588();
    sub_23D5AFA60(v1, v0);
    v5 = sub_23D66BFC4();
    if (os_log_type_enabled(v5, v4))
    {
      v6 = swift_slowAlloc();
      *(_DWORD *)v6 = 134218240;
      sub_23D66C5D0();
      *(_WORD *)(v6 + 12) = 2048;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v1, v0);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v7 = 259;
    *(_OWORD *)(v7 + 8) = xmmword_23D673320;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D677550;
    swift_willThrow();
    sub_23D5DDA20(v1, v0);
    sub_23D5E725C(0, 0xF000000000000000);
  }
  return v1;
}

void sub_23D61BF0C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_23D61BF4C()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;
  os_log_type_t v4;
  NSObject *v5;
  uint64_t v6;
  uint64_t v7;

  if (BYTE6(v0) != 64)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v3 = sub_23D66BFDC();
    __swift_project_value_buffer(v3, (uint64_t)qword_256C88B78);
    v4 = sub_23D66C588();
    sub_23D5AFA60(v1, v0);
    v5 = sub_23D66BFC4();
    if (os_log_type_enabled(v5, v4))
    {
      v6 = swift_slowAlloc();
      *(_DWORD *)v6 = 134218240;
      sub_23D66C5D0();
      *(_WORD *)(v6 + 12) = 2048;
      __asm { BR              X11 }
    }
    sub_23D5DDA20(v1, v0);

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v7 = 261;
    *(_OWORD *)(v7 + 8) = xmmword_23D673330;
    *(_OWORD *)(v7 + 24) = xmmword_23D66DEA0;
    *(_QWORD *)(v7 + 40) = 0x800000023D677550;
    swift_willThrow();
    sub_23D5DDA20(v1, v0);
  }
  return v1;
}

void sub_23D61C1A8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_23D61C1F4()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;

  if (BYTE6(v0) == 64)
    __asm { BR              X9 }
  if (qword_256C78B10 != -1)
    swift_once();
  v5 = sub_23D66BFDC();
  __swift_project_value_buffer(v5, (uint64_t)qword_256C88B78);
  v6 = sub_23D66C588();
  sub_23D5AFA60(v1, v0);
  v7 = sub_23D66BFC4();
  if (os_log_type_enabled(v7, v6))
  {
    v8 = swift_slowAlloc();
    *(_DWORD *)v8 = 134218240;
    sub_23D66C5D0();
    *(_WORD *)(v8 + 12) = 2048;
    __asm { BR              X11 }
  }
  sub_23D5DDA20(v1, v0);

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D618E34();
  swift_allocError();
  *(_BYTE *)v9 = 3;
  *(_BYTE *)(v9 + 1) = 1;
  *(_QWORD *)(v9 + 8) = 125;
  *(_QWORD *)(v9 + 16) = 0xD00000000000001BLL;
  *(_QWORD *)(v9 + 24) = 0x800000023D679470;
  *(_QWORD *)(v9 + 32) = 0xD000000000000052;
  *(_QWORD *)(v9 + 40) = 0x800000023D677550;
  swift_willThrow();
  sub_23D5DDA20(v3, v2);
  sub_23D5DDA20(v1, v0);
  sub_23D5E725C(0, 0xF000000000000000);
  return v1;
}

uint64_t sub_23D61C6A8(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v15;
  _OWORD v16[2];
  uint64_t v17;

  v3 = v2;
  v6 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v6);
  v7 = type metadata accessor for GKCrypto_AdminSeed(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v17 = 0;
  memset(v16, 0, sizeof(v16));
  sub_23D5AFA60(a1, a2);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C7A208, type metadata accessor for GKCrypto_AdminSeed, (uint64_t)&unk_23D67073C);
  sub_23D66BF10();
  if (v2)
  {
    sub_23D5DDA20(a1, a2);
  }
  else
  {
    v10 = *v9;
    v11 = v9[1];
    v12 = v9[2];
    v13 = v9[3];
    sub_23D5AFA60(*v9, v11);
    sub_23D5AFA60(v12, v13);
    sub_23D61C1A8(v10, v11);
    v3 = v15;
    sub_23D5DDA20(a1, a2);
    sub_23D5E6950((uint64_t)v9, type metadata accessor for GKCrypto_AdminSeed);
  }
  return v3;
}

uint64_t sub_23D61C87C()
{
  _QWORD *v0;
  unint64_t v1;

  sub_23D5DDA20(v0[2], v0[3]);
  v1 = v0[5];
  if (v1 >> 60 != 15)
    sub_23D5DDA20(v0[4], v1);
  return swift_deallocObject();
}

uint64_t sub_23D61C8B8(uint64_t *a1)
{
  uint64_t v1;

  return sub_23D61B204(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56));
}

uint64_t type metadata accessor for VersionedSeed(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for VersionedSeed);
}

unint64_t sub_23D61C8E4()
{
  unint64_t result;
  uint64_t v1;
  unint64_t v2;
  _QWORD v3[2];

  result = qword_256C7B5C8;
  if (!qword_256C7B5C8)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256C7B5C0);
    v2 = sub_23D61C950();
    v3[0] = MEMORY[0x24BEE4530];
    v3[1] = v2;
    result = MEMORY[0x242636790](MEMORY[0x24BEE1BB8], v1, v3);
    atomic_store(result, (unint64_t *)&qword_256C7B5C8);
  }
  return result;
}

unint64_t sub_23D61C950()
{
  unint64_t result;

  result = qword_256C7B5D0[0];
  if (!qword_256C7B5D0[0])
  {
    result = MEMORY[0x242636790](MEMORY[0x24BEE1790], MEMORY[0x24BEE1768]);
    atomic_store(result, qword_256C7B5D0);
  }
  return result;
}

uint64_t sub_23D61C994(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GKCrypto_SeedBlob(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23D61C9D8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23D61C9E0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D61CA5C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v8;

  v3 = a1;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 80);
  if ((v5 | 3uLL) > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 4) & (unint64_t)~v5) + *(_QWORD *)(v4 + 64) > 0x18)
  {
    v8 = *a2;
    *v3 = *a2;
    v3 = (uint64_t *)(v8 + ((v5 + 16) & ~(v5 | 3)));
    swift_retain();
  }
  else
  {
    *(_DWORD *)a1 = *(_DWORD *)a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 4) & ~v5, ((unint64_t)a2 + v5 + 4) & ~v5);
  }
  return v3;
}

uint64_t sub_23D61CAFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_DWORD *sub_23D61CB1C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *sub_23D61CB6C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *sub_23D61CBBC(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

_DWORD *sub_23D61CC0C(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;

  *a1 = *a2;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 4) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_23D61CC5C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  int v10;
  unsigned int v11;
  int v12;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  v6 = *(unsigned __int8 *)(v4 + 80);
  v7 = a2 - v5;
  if (a2 <= v5)
    goto LABEL_18;
  v8 = ((v6 + 4) & ~v6) + *(_QWORD *)(v4 + 64);
  v9 = 8 * v8;
  if (v8 <= 3)
  {
    v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      v10 = *(_DWORD *)(a1 + v8);
      if (!v10)
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      v10 = *(unsigned __int16 *)(a1 + v8);
      if (!*(_WORD *)(a1 + v8))
        goto LABEL_18;
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_18:
      if (v5)
        return (*(uint64_t (**)(uint64_t))(v4 + 48))((a1 + v6 + 4) & ~v6);
      return 0;
    }
  }
  v10 = *(unsigned __int8 *)(a1 + v8);
  if (!*(_BYTE *)(a1 + v8))
    goto LABEL_18;
LABEL_11:
  v12 = (v10 - 1) << v9;
  if (v8 > 3)
    v12 = 0;
  if (!(_DWORD)v8)
    return v5 + v12 + 1;
  if (v8 > 3)
    LODWORD(v8) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23D61CD1C + 4 * byte_23D673340[(v8 - 1)]))();
}

void sub_23D61CD7C(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  size_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  v8 = *(unsigned __int8 *)(v6 + 80);
  v9 = ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64);
  v10 = a3 >= v7;
  v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      v14 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v14))
      {
        v12 = 4u;
      }
      else if (v14 >= 0x100)
      {
        v12 = 2;
      }
      else
      {
        v12 = v14 > 1;
      }
    }
    else
    {
      v12 = 1u;
    }
  }
  else
  {
    v12 = 0;
  }
  if (v7 < a2)
  {
    v13 = ~v7 + a2;
    if (v9 < 4)
    {
      if ((_DWORD)v9)
      {
        v15 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if ((_DWORD)v9 == 3)
        {
          *a1 = v15;
          *((_BYTE *)a1 + 2) = BYTE2(v15);
        }
        else if ((_DWORD)v9 == 2)
        {
          *a1 = v15;
        }
        else
        {
          *(_BYTE *)a1 = v15;
        }
      }
    }
    else
    {
      bzero(a1, ((v8 + 4) & ~v8) + *(_QWORD *)(v6 + 64));
      *(_DWORD *)a1 = v13;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t __swift_instantiateGenericMetadata(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD v6[3];

  v6[0] = a2;
  v6[1] = a3;
  v6[2] = a4;
  return MEMORY[0x24263673C](a1, v6, a5);
}

id sub_23D61CF74(void *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, unsigned int a6)
{
  objc_class *v6;
  objc_class *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  id v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  void *v25;
  _DWORD v27[10];
  id v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  id v35;
  unsigned int v36;
  uint64_t v37;

  v33 = a4;
  v7 = v6;
  v36 = a6;
  v34 = a5;
  v35 = a1;
  v11 = sub_23D66BE20();
  v29 = *(_QWORD *)(v11 - 8);
  v30 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a2;
  v14 = a2[1];
  v16 = *a3;
  v31 = a3[1];
  v32 = v16;
  v28 = objc_msgSend(objc_allocWithZone(v7), sel_initWithContext_, a1);
  v27[9] = sub_23D66BDD8();
  v27[8] = sub_23D66BDD8();
  v27[7] = sub_23D66BDD8();
  v27[6] = sub_23D66BDD8();
  v27[5] = sub_23D66BDD8();
  v27[4] = sub_23D66BDD8();
  v27[3] = sub_23D66BDD8();
  v27[2] = sub_23D66BDD8();
  v27[1] = sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDFC();
  sub_23D5DDA20(v15, v14);
  v17 = (void *)sub_23D66BDE4();
  (*(void (**)(char *, uint64_t))(v29 + 8))(v13, v30);
  v18 = v28;
  objc_msgSend(v28, sel_setGroupID_, v17);

  v20 = v31;
  v19 = v32;
  sub_23D5B06C8(v32, v31);
  v37 = v21;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
  sub_23D61D45C();
  sub_23D66C378();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v19, v20);
  v22 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  objc_msgSend(v18, sel_setUserID_, v22);

  v24 = v33;
  v23 = v34;
  v25 = (void *)sub_23D66BD84();
  objc_msgSend(v18, sel_setGroupAccessInfo_, v25);

  objc_msgSend(v18, sel_setVersion_, v36);
  sub_23D5DDA20(v24, v23);

  return v18;
}

id GroupAccessInfoBlob.__allocating_init(entity:insertInto:)(void *a1, void *a2)
{
  objc_class *v2;
  id v5;

  v5 = objc_msgSend(objc_allocWithZone(v2), sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

id GroupAccessInfoBlob.init(entity:insertInto:)(void *a1, void *a2)
{
  void *v2;
  id v5;
  objc_super v7;

  v7.receiver = v2;
  v7.super_class = (Class)type metadata accessor for GroupAccessInfoBlob();
  v5 = objc_msgSendSuper2(&v7, sel_initWithEntity_insertIntoManagedObjectContext_, a1, a2);

  return v5;
}

uint64_t type metadata accessor for GroupAccessInfoBlob()
{
  return objc_opt_self();
}

id GroupAccessInfoBlob.__deallocating_deinit()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupAccessInfoBlob();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t method lookup function for GroupAccessInfoBlob()
{
  return swift_lookUpClassMethod();
}

unint64_t sub_23D61D45C()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256C791A0;
  if (!qword_256C791A0)
  {
    v1 = __swift_instantiateConcreteTypeFromMangledNameAbstract(&qword_256C79198);
    result = MEMORY[0x242636790](MEMORY[0x24BEE12B0], v1);
    atomic_store(result, (unint64_t *)&qword_256C791A0);
  }
  return result;
}

uint64_t sub_23D61D4A8@<X0>(_QWORD *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD v17[2];
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v17[1] = a3;
  v5 = sub_23D66C084();
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23D61D918(0xD00000000000002ELL, 0x800000023D6799E0, a2);
  v10 = v9;
  v12 = v11;
  v14 = a1[3];
  v13 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v14);
  v20 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v14, v13);
  v21 = v15;
  v18 = v10;
  v19 = v12;
  sub_23D5AFA60(v10, v12);
  sub_23D66C060();
  sub_23D66C078();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  sub_23D66C354();
  sub_23D61E0EC();
  sub_23D5E6898();
  sub_23D66C114();
  sub_23D5DDA20(v10, v12);
  sub_23D5E725C(v18, v19);
  return sub_23D5DDA20(v20, v21);
}

void sub_23D61D638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23D61D6B0(a1, a2, a3, a4);
}

void sub_23D61D674(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23D61D6B0(a1, a2, a3, a4);
}

void sub_23D61D6B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = sub_23D66C054();
  MEMORY[0x24BDAC7A8](v5);
  __asm { BR              X10 }
}

void sub_23D61D8C4(uint64_t *a1@<X8>)
{
  _BYTE *v1;
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;

  v2 = 0x6C616E7265746E69;
  v3 = 0xE800000000000000;
  if (*v1 != 1)
  {
    v2 = 0x424470756F7247;
    v3 = 0xE700000000000000;
  }
  if (*v1)
  {
    v4 = v3;
  }
  else
  {
    v2 = 0x6C616E7265747865;
    v4 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v4;
}

void sub_23D61D918(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;

  swift_bridgeObjectRetain();
  sub_23D628188(a1, a2);
  v7 = v6;
  if (a3)
  {
    if (a3 == 1)
      v8 = 0x6C616E7265746E69;
    else
      v8 = 0x424470756F7247;
    if (a3 == 1)
      v9 = 0xE800000000000000;
    else
      v9 = 0xE700000000000000;
  }
  else
  {
    v8 = 0x6C616E7265747865;
    v9 = 0xE800000000000000;
  }
  sub_23D628188(v8, v9);
  __asm { BR              X10 }
}

uint64_t sub_23D61D9DC()
{
  unint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  sub_23D62EC44(BYTE6(v0), 2);
  v4 = v3;
  v6 = v5;
  sub_23D5AFA60(v3, v5);
  sub_23D5AFA60(v1, v0);
  sub_23D64C120(v1, v0);
  sub_23D5DDA20(v1, v0);
  sub_23D5DDA20(v4, v6);
  return ((uint64_t (*)(_QWORD))((char *)&loc_23D61DA64 + *((int *)qword_23D61DC78 + (v2 >> 62))))(0);
}

uint64_t sub_23D61DA74()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;

  sub_23D62EC44(BYTE6(v1), 2);
  v6 = v5;
  v8 = v7;
  sub_23D5AFA60(v3, v4);
  sub_23D64C120(v6, v8);
  sub_23D5DDA20(v6, v8);
  sub_23D5DDA20(v3, v4);
  sub_23D5AFA60(v3, v4);
  sub_23D5AFA60(v2, v1);
  sub_23D64C120(v2, v1);
  sub_23D5DDA20(v2, v1);
  sub_23D5DDA20(v3, v4);
  return ((uint64_t (*)(_QWORD))((char *)&loc_23D61DB40 + *((int *)qword_23D61DC88 + (v0 >> 62))))(0);
}

uint64_t sub_23D61DB50()
{
  unint64_t v0;
  unint64_t v1;
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v12;

  sub_23D62EC44(BYTE6(v0), 2);
  v8 = v7;
  v10 = v9;
  sub_23D5AFA60(v5, v6);
  sub_23D64C120(v8, v10);
  sub_23D5DDA20(v8, v10);
  sub_23D5DDA20(v5, v6);
  sub_23D5AFA60(v5, v6);
  sub_23D5AFA60(v12, v0);
  sub_23D64C120(v12, v0);
  sub_23D5DDA20(v12, v0);
  sub_23D5DDA20(v4, v3);
  sub_23D5DDA20(v2, v1);
  sub_23D5DDA20(v5, v6);
  return v5;
}

uint64_t sub_23D61DC98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return sub_23D61AEB8(a1, a2, a3);
}

uint64_t sub_23D61DCAC()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v0 = sub_23D66C1F8();
  v2 = v1;
  sub_23D5AFD60(v0, v1);
  v4 = v3;
  sub_23D5DDA20(v0, v2);
  return v4;
}

uint64_t sub_23D61DCF8()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v3;
  unint64_t v4;

  sub_23D66C030();
  sub_23D5AFD60(v3, v4);
  v1 = v0;
  sub_23D5DDA20(v3, v4);
  return v1;
}

uint64_t sub_23D61DD6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 8))();
}

uint64_t sub_23D61DD74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 8))();
}

uint64_t sub_23D61DD8C(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  os_log_type_t v20;
  NSObject *v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v26 = sub_23D66C054();
  v4 = *(_QWORD *)(v26 - 8);
  MEMORY[0x24BDAC7A8](v26);
  v6 = (char *)&v25 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    sub_23D61D918(0xD00000000000002CLL, 0x800000023D6799B0, a2);
    v9 = v8;
    v11 = v10;
    v12 = a1[3];
    v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v12, v13);
    v16 = v15;
    v29 = v14;
    v30 = v15;
    v27 = v9;
    v28 = v11;
    sub_23D66C354();
    sub_23D61E0EC();
    sub_23D5E6898();
    sub_23D66C114();
    sub_23D5DDA20(v14, v16);
    sub_23D66C030();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v26);
    sub_23D61BF0C(v29, v30);
    v18 = v17;
    sub_23D5DDA20(v9, v11);
    return v18;
  }
  v7 = sub_23D66C84C();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    goto LABEL_4;
  if (qword_256C78B10 != -1)
    swift_once();
  v19 = sub_23D66BFDC();
  __swift_project_value_buffer(v19, (uint64_t)qword_256C88B78);
  v20 = sub_23D66C588();
  v21 = sub_23D66BFC4();
  v18 = v20;
  if (os_log_type_enabled(v21, v20))
  {
    v22 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v22 = 0;
    _os_log_impl(&dword_23D5A8000, v21, (os_log_type_t)v18, "cannot derive external member seeds", v22, 2u);
    MEMORY[0x242636844](v22, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D618E34();
  swift_allocError();
  *(_WORD *)v23 = 304;
  *(_OWORD *)(v23 + 8) = xmmword_23D6734F0;
  *(_QWORD *)(v23 + 24) = 0x800000023D679930;
  *(_QWORD *)(v23 + 32) = 0xD000000000000051;
  *(_QWORD *)(v23 + 40) = 0x800000023D679950;
  swift_willThrow();
  return v18;
}

unint64_t sub_23D61E0EC()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256C79AC0;
  if (!qword_256C79AC0)
  {
    v1 = sub_23D66C354();
    result = MEMORY[0x242636790](MEMORY[0x24BDC6AE8], v1);
    atomic_store(result, (unint64_t *)&qword_256C79AC0);
  }
  return result;
}

char *sub_23D61E134(_QWORD *a1, char a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  os_log_type_t v21;
  NSObject *v22;
  uint8_t *v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;

  v27 = sub_23D66C054();
  v4 = *(_QWORD *)(v27 - 8);
  MEMORY[0x24BDAC7A8](v27);
  v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (a2 == 1)
  {
    swift_bridgeObjectRelease();
LABEL_4:
    sub_23D61D918(0xD00000000000002BLL, 0x800000023D679A90, a2);
    v9 = v8;
    v11 = v10;
    v12 = a1[3];
    v13 = a1[4];
    __swift_project_boxed_opaque_existential_1(a1, v12);
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 40))(v12, v13);
    v16 = v15;
    v30 = v14;
    v31 = v15;
    v28 = v9;
    v29 = v11;
    sub_23D66C354();
    sub_23D61E0EC();
    sub_23D5E6898();
    sub_23D66C114();
    sub_23D5DDA20(v14, v16);
    v17 = v6;
    v18 = v32;
    sub_23D66C030();
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v27);
    sub_23D61BC58(v30, v31);
    if (!v18)
      v17 = v19;
    sub_23D5DDA20(v9, v11);
    return v17;
  }
  v7 = sub_23D66C84C();
  swift_bridgeObjectRelease();
  if ((v7 & 1) != 0)
    goto LABEL_4;
  if (qword_256C78B10 != -1)
    swift_once();
  v20 = sub_23D66BFDC();
  __swift_project_value_buffer(v20, (uint64_t)qword_256C88B78);
  v21 = sub_23D66C588();
  v22 = sub_23D66BFC4();
  v17 = (char *)v21;
  if (os_log_type_enabled(v22, v21))
  {
    v23 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v23 = 0;
    _os_log_impl(&dword_23D5A8000, v22, (os_log_type_t)v17, "cannot derive external admin seeds", v23, 2u);
    MEMORY[0x242636844](v23, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D618E34();
  swift_allocError();
  *(_WORD *)v24 = 304;
  *(_OWORD *)(v24 + 8) = xmmword_23D673500;
  *(_QWORD *)(v24 + 24) = 0x800000023D679930;
  *(_QWORD *)(v24 + 32) = 0xD000000000000051;
  *(_QWORD *)(v24 + 40) = 0x800000023D679950;
  swift_willThrow();
  return v17;
}

uint64_t UserKeyingInfo.init(userID:dsid:)(uint64_t a1, _OWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  *(_QWORD *)(v3 + 416) = a1;
  v6 = sub_23D66C258();
  *(_QWORD *)(v3 + 424) = v6;
  *(_QWORD *)(v3 + 432) = *(_QWORD *)(v6 - 8);
  *(_QWORD *)(v3 + 440) = swift_task_alloc();
  v7 = sub_23D66C2AC();
  *(_QWORD *)(v3 + 448) = v7;
  *(_QWORD *)(v3 + 456) = *(_QWORD *)(v7 - 8);
  *(_QWORD *)(v3 + 464) = swift_task_alloc();
  type metadata accessor for UserKeyingInfo(0);
  *(_QWORD *)(v3 + 472) = swift_task_alloc();
  *(_QWORD *)(v3 + 480) = type metadata accessor for PCSKeyPair();
  *(_QWORD *)(v3 + 488) = swift_task_alloc();
  *(_OWORD *)(v3 + 496) = *a2;
  v8 = a3[1];
  *(_QWORD *)(v3 + 512) = *a3;
  *(_QWORD *)(v3 + 520) = v8;
  return swift_task_switch();
}

uint64_t sub_23D61E59C()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD v10[3];

  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5E6808(&byte_25431AB68, v0 + 16);
  sub_23D5AEF48(v0 + 232, v0 + 352, &qword_25431A828);
  if (*(_QWORD *)(v0 + 376))
  {
    v1 = *(_QWORD *)(v0 + 520);
    v2 = *(_QWORD *)(v0 + 512);
    sub_23D5AEF30((__int128 *)(v0 + 352), v0 + 312);
    sub_23D5E6844((_QWORD *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 336);
    v4 = *(_QWORD *)(v0 + 344);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 312), v3);
    v10[0] = v2;
    v10[1] = v1;
    (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v10, 0xD000000000000022, 0x800000023D676F50, v3, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 312);
    v5 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 304);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 272), v5);
    v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 16) + *(_QWORD *)(v6 + 16));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 528) = v7;
    *v7 = v0;
    v7[1] = sub_23D61E818;
    return v9(*(_QWORD *)(v0 + 488), v5, v6);
  }
  else
  {
    sub_23D5AEF8C(v0 + 352, &qword_25431A828);
    return sub_23D66C720();
  }
}

uint64_t sub_23D61E818()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 536) = v0;
  swift_task_dealloc();
  if (v0)
    sub_23D5DDA20(*(_QWORD *)(v2 + 496), *(_QWORD *)(v2 + 504));
  return swift_task_switch();
}

uint64_t sub_23D61E884()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14[3];

  v1 = *(_QWORD *)(v0 + 536);
  v3 = *(_QWORD *)(v0 + 480);
  v2 = *(_QWORD *)(v0 + 488);
  v5 = *(_QWORD *)(v0 + 464);
  v4 = *(uint64_t **)(v0 + 472);
  v6 = *(_QWORD *)(v0 + 448);
  v7 = *(_QWORD *)(v0 + 456);
  v9 = *(_QWORD *)(v0 + 432);
  v8 = *(_QWORD *)(v0 + 440);
  v10 = *(_QWORD *)(v0 + 424);
  *(_OWORD *)v14 = *(_OWORD *)(v0 + 496);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v2, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v2 + *(int *)(v3 + 20), v10);
  sub_23D61EB88(v14, v5, v8, v4);
  if (v1)
  {
    sub_23D5E6950(*(_QWORD *)(v0 + 488), (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
  }
  else
  {
    v11 = *(_QWORD *)(v0 + 472);
    v12 = *(_QWORD *)(v0 + 416);
    sub_23D5E6950(*(_QWORD *)(v0 + 488), (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
    sub_23D5E7F64(v11, v12, type metadata accessor for UserKeyingInfo);
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D61E9DC()
{
  uint64_t v0;

  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t type metadata accessor for UserKeyingInfo(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7B6B8);
}

uint64_t UserKeyingInfo.serializePublicKeysAndSignatures()()
{
  uint64_t v0;
  uint64_t v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v0 = type metadata accessor for GKCrypto_UserKeys(0);
  MEMORY[0x24BDAC7A8](v0);
  v2 = (char *)&v9 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  *((_QWORD *)v2 + 9) = MEMORY[0x24BEE4AF8];
  *((_OWORD *)v2 + 5) = xmmword_23D66DF40;
  sub_23D66BE5C();
  *(_DWORD *)v2 = 1;
  type metadata accessor for UserKeyingInfo(0);
  *((_QWORD *)v2 + 1) = sub_23D66C1F8();
  *((_QWORD *)v2 + 2) = v3;
  *((_QWORD *)v2 + 3) = sub_23D66C1F8();
  *((_QWORD *)v2 + 4) = v4;
  *((_QWORD *)v2 + 5) = sub_23D66C2B8();
  *((_QWORD *)v2 + 6) = v5;
  *((_QWORD *)v2 + 7) = sub_23D66C2B8();
  *((_QWORD *)v2 + 8) = v6;
  sub_23D622024();
  v7 = sub_23D66BF1C();
  sub_23D5E6950((uint64_t)v2, type metadata accessor for GKCrypto_UserKeys);
  return v7;
}

uint64_t sub_23D61EB88@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (*v17)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void (*v21)(uint64_t, _QWORD, uint64_t, uint64_t);
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t inited;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (*v47)(char *, char *, uint64_t);
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  uint64_t result;
  int *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  int *v79;

  v73 = sub_23D66C2DC();
  v58 = *(_QWORD *)(v73 - 8);
  v8 = MEMORY[0x24BDAC7A8](v73);
  v57 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v70 = (char *)&v56 - v10;
  v12 = *a1;
  v11 = a1[1];
  *a4 = *a1;
  a4[1] = v11;
  v13 = (int *)type metadata accessor for UserKeyingInfo(0);
  v14 = (uint64_t)a4 + v13[10];
  v15 = sub_23D66C258();
  v16 = *(_QWORD *)(v15 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v14, a3, v15);
  v64 = v16;
  v17 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v16 + 56);
  v62 = v14;
  v66 = v15;
  v17(v14, 0, 1, v15);
  v18 = (uint64_t)a4 + v13[11];
  v19 = sub_23D66C2AC();
  v20 = *(_QWORD *)(v19 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v20 + 16))(v18, a2, v19);
  v63 = v20;
  v21 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v20 + 56);
  v61 = v18;
  v65 = v19;
  v21(v18, 0, 1, v19);
  v22 = (char *)a4 + v13[5];
  sub_23D5AFA60(v12, v11);
  v67 = a3;
  sub_23D66C228();
  v79 = v13;
  v23 = v13[7];
  v74 = a4;
  v24 = (char *)a4 + v23;
  v72 = a2;
  sub_23D66C264();
  v59 = v22;
  v25 = sub_23D66C1F8();
  v27 = v26;
  if (qword_256C78D68 != -1)
    swift_once();
  v28 = qword_256C89180;
  v29 = *(_QWORD *)algn_256C89188;
  v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = v28;
  v68 = xmmword_23D66FC40;
  *(_OWORD *)(inited + 16) = xmmword_23D66FC40;
  *(_QWORD *)(inited + 40) = v29;
  *(_QWORD *)(inited + 48) = v12;
  *(_QWORD *)(inited + 56) = v11;
  *(_QWORD *)(inited + 64) = v25;
  *(_QWORD *)(inited + 72) = v27;
  sub_23D5AFA60(v12, v11);
  sub_23D5AFA60(v28, v29);
  sub_23D5AFA60(v25, v27);
  v75 = sub_23D62FE18(inited);
  v76 = v31;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5DDA20(v25, v27);
  v60 = v24;
  v32 = sub_23D66C1F8();
  v34 = v33;
  if (qword_256C78D70 != -1)
    swift_once();
  v35 = qword_256C89190;
  v36 = *(_QWORD *)algn_256C89198;
  v37 = swift_initStackObject();
  *(_QWORD *)(v37 + 32) = v35;
  *(_OWORD *)(v37 + 16) = v68;
  *(_QWORD *)(v37 + 40) = v36;
  *(_QWORD *)(v37 + 48) = v12;
  *(_QWORD *)(v37 + 56) = v11;
  *(_QWORD *)(v37 + 64) = v32;
  *(_QWORD *)(v37 + 72) = v34;
  sub_23D5AFA60(v12, v11);
  sub_23D5AFA60(v35, v36);
  sub_23D5AFA60(v32, v34);
  v38 = sub_23D62FE18(v37);
  v40 = v39;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5DDA20(v32, v34);
  sub_23D5DDA20(v12, v11);
  v41 = v75;
  v77 = v75;
  v42 = v76;
  v78 = v76;
  sub_23D5E6898();
  v43 = v70;
  v44 = v72;
  v45 = v71;
  sub_23D66C2A0();
  if (v45)
  {
    sub_23D5DDA20(v38, v40);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v66);
    (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v44, v65);
    sub_23D5DDA20(v41, v42);
    v71 = v45;
    sub_23D5DDA20(*v74, v74[1]);
    v51 = sub_23D66C210();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v51 - 8) + 8))(v59, v51);
    v52 = v60;
    v53 = sub_23D66C330();
    (*(void (**)(char *, uint64_t))(*(_QWORD *)(v53 - 8) + 8))(v52, v53);
    sub_23D5AEF8C(v62, &qword_256C79170);
    return sub_23D5AEF8C(v61, &qword_256C79120);
  }
  else
  {
    v46 = v74;
    v47 = *(void (**)(char *, char *, uint64_t))(v58 + 32);
    v48 = v43;
    v49 = v73;
    v47((char *)v74 + v79[6], v48, v73);
    v77 = v38;
    v78 = v40;
    v50 = v57;
    sub_23D66C2A0();
    v71 = 0;
    v55 = v79;
    v47((char *)v46 + v79[8], v50, v49);
    sub_23D5DDA20(v38, v40);
    sub_23D5DDA20(v75, v76);
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v67, v66);
    result = (*(uint64_t (**)(uint64_t, uint64_t))(v63 + 8))(v44, v65);
    *(uint64_t *)((char *)v46 + v55[9]) = MEMORY[0x24BEE4AF8];
  }
  return result;
}

uint64_t sub_23D61F210@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  os_log_type_t v28;
  NSObject *v29;
  os_log_type_t v30;
  uint8_t *v31;
  uint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  int *v35;
  NSObject *v36;
  os_log_type_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v46;
  uint64_t *v47;
  int *v48;
  void (*v49)(void);
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  void (*v53)(void);
  unint64_t v54;
  unint64_t v55;
  void (*v56)(void);
  unint64_t v57;
  int *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t inited;
  void (*v68)(void);
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  char v81;
  uint64_t v82;
  int *v83;
  uint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  os_log_type_t v89;
  NSObject *v90;
  os_log_type_t v91;
  _BOOL4 v92;
  uint64_t *v93;
  uint8_t *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  os_log_type_t v98;
  NSObject *v99;
  os_log_type_t v100;
  uint8_t *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD v104[4];
  char *v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int *v110;
  __int128 v111;
  void (*v112)(void);
  char *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;

  v121 = a5;
  v122 = a4;
  v127 = a3;
  v115 = sub_23D66C2DC();
  v114 = *(_QWORD *)(v115 - 8);
  v9 = MEMORY[0x24BDAC7A8](v115);
  *(_QWORD *)&v111 = (char *)v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v9);
  v112 = (void (*)(void))((char *)v104 - v11);
  v116 = sub_23D66C330();
  v117 = *(_QWORD *)(v116 - 8);
  MEMORY[0x24BDAC7A8](v116);
  v113 = (char *)v104 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v119 = sub_23D66C210();
  v118 = *(_QWORD *)(v119 - 8);
  MEMORY[0x24BDAC7A8](v119);
  v13 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v13);
  v14 = type metadata accessor for GKCrypto_UserKeys(0);
  v15 = MEMORY[0x24BDAC7A8](v14);
  v17 = (char *)v104 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v15);
  v19 = (char *)v104 - v18;
  v20 = *a1;
  v21 = a1[1];
  *a6 = v20;
  a6[1] = v21;
  v123 = a6;
  v22 = a2;
  v23 = v127;
  v126 = 0;
  v124 = 0u;
  v125 = 0u;
  sub_23D5AFA60(v20, v21);
  sub_23D5AFA60(v22, v23);
  sub_23D66BE74();
  sub_23D622024();
  v24 = v120;
  sub_23D66BF10();
  if (v24)
  {
    sub_23D5DDA20(v22, v23);
    sub_23D5DDA20(v20, v21);
    sub_23D5AEF8C(v121, &qword_256C79170);
    sub_23D5AEF8C(v122, &qword_256C79120);
LABEL_16:
    v26 = v123;
    return sub_23D5DDA20(*v26, v26[1]);
  }
  v120 = v22;
  v25 = v122;
  if (*(_DWORD *)v19 != 1)
  {
    sub_23D5DDA20(v20, v21);
    if (qword_256C78B10 != -1)
      swift_once();
    v33 = sub_23D66BFDC();
    __swift_project_value_buffer(v33, (uint64_t)qword_256C88B78);
    v34 = sub_23D66C588();
    v35 = (int *)v17;
    sub_23D5E7298((uint64_t)v19, (uint64_t)v17, type metadata accessor for GKCrypto_UserKeys);
    v36 = sub_23D66BFC4();
    v37 = v34;
    v38 = v25;
    if (os_log_type_enabled(v36, v34))
    {
      v39 = swift_slowAlloc();
      *(_DWORD *)v39 = 67109376;
      v40 = *v35;
      sub_23D5E6950((uint64_t)v35, type metadata accessor for GKCrypto_UserKeys);
      LODWORD(v124) = v40;
      sub_23D66C5D0();
      *(_WORD *)(v39 + 8) = 1024;
      LODWORD(v124) = 1;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v36, v37, "unsupported protobuf version, got %u expected %u", (uint8_t *)v39, 0xEu);
      MEMORY[0x242636844](v39, -1, -1);
    }
    else
    {
      sub_23D5E6950((uint64_t)v35, type metadata accessor for GKCrypto_UserKeys);
    }
    v41 = v121;
    v42 = v127;
    v43 = v120;

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v44 = 275;
    *(_OWORD *)(v44 + 8) = xmmword_23D673660;
    *(_QWORD *)(v44 + 24) = 0x800000023D679AC0;
    *(_QWORD *)(v44 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v44 + 40) = 0x800000023D679B00;
    swift_willThrow();
    sub_23D5DDA20(v43, v42);
    sub_23D5AEF8C(v41, &qword_256C79170);
    sub_23D5AEF8C(v38, &qword_256C79120);
    sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_UserKeys);
    goto LABEL_16;
  }
  if (*(_QWORD *)(*((_QWORD *)v19 + 9) + 16))
  {
    sub_23D5DDA20(v20, v21);
    v26 = v123;
    if (qword_256C78B10 != -1)
      swift_once();
    v27 = sub_23D66BFDC();
    __swift_project_value_buffer(v27, (uint64_t)qword_256C88B78);
    v28 = sub_23D66C588();
    v29 = sub_23D66BFC4();
    v30 = v28;
    if (os_log_type_enabled(v29, v28))
    {
      v31 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v31 = 0;
      _os_log_impl(&dword_23D5A8000, v29, v30, "empty verificationKey signatures", v31, 2u);
      MEMORY[0x242636844](v31, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v32 = 276;
    *(_OWORD *)(v32 + 8) = xmmword_23D673670;
    *(_QWORD *)(v32 + 24) = 0x800000023D679AC0;
    *(_QWORD *)(v32 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v32 + 40) = 0x800000023D679B00;
    swift_willThrow();
    sub_23D5DDA20(v120, v127);
    sub_23D5AEF8C(v121, &qword_256C79170);
    sub_23D5AEF8C(v25, &qword_256C79120);
    sub_23D5E6950((uint64_t)v19, type metadata accessor for GKCrypto_UserKeys);
    return sub_23D5DDA20(*v26, v26[1]);
  }
  v46 = *((_QWORD *)v19 + 2);
  *(_QWORD *)&v124 = *((_QWORD *)v19 + 1);
  *((_QWORD *)&v124 + 1) = v46;
  sub_23D5AFA60(v124, v46);
  sub_23D66C204();
  v47 = v123;
  v48 = (int *)type metadata accessor for UserKeyingInfo(0);
  v49 = *(void (**)(void))(v118 + 32);
  v109 = (uint64_t)v47 + v48[5];
  v49();
  v50 = *((_QWORD *)v19 + 4);
  *(_QWORD *)&v124 = *((_QWORD *)v19 + 3);
  *((_QWORD *)&v124 + 1) = v50;
  sub_23D5AFA60(v124, v50);
  sub_23D66C324();
  v110 = v48;
  v53 = *(void (**)(void))(v117 + 32);
  v107 = (unint64_t)v47 + v48[7];
  v53();
  v54 = *((_QWORD *)v19 + 6);
  *(_QWORD *)&v124 = *((_QWORD *)v19 + 5);
  *((_QWORD *)&v124 + 1) = v54;
  sub_23D5AFA60(v124, v54);
  v55 = sub_23D5E6898();
  v108 = 0;
  sub_23D66C2C4();
  v56 = *(void (**)(void))(v114 + 32);
  v106 = (uint64_t)v47 + v48[6];
  v112 = v56;
  v56();
  v57 = *((_QWORD *)v19 + 8);
  *(_QWORD *)&v124 = *((_QWORD *)v19 + 7);
  *((_QWORD *)&v124 + 1) = v57;
  sub_23D5AFA60(v124, v57);
  sub_23D66C2C4();
  v113 = 0;
  v104[3] = v55;
  v105 = v19;
  v104[2] = (char *)v47 + v48[8];
  v112();
  v62 = sub_23D66C1F8();
  v64 = v63;
  if (qword_256C78D68 != -1)
    swift_once();
  v66 = qword_256C89180;
  v65 = *(_QWORD *)algn_256C89188;
  v104[1] = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_QWORD *)(inited + 32) = v66;
  v111 = xmmword_23D66FC40;
  *(_OWORD *)(inited + 16) = xmmword_23D66FC40;
  *(_QWORD *)(inited + 40) = v65;
  *(_QWORD *)(inited + 48) = v20;
  *(_QWORD *)(inited + 56) = v21;
  *(_QWORD *)(inited + 64) = v62;
  *(_QWORD *)(inited + 72) = v64;
  sub_23D5AFA60(v20, v21);
  sub_23D5AFA60(v66, v65);
  sub_23D5AFA60(v62, v64);
  v109 = sub_23D62FE18(inited);
  v112 = v68;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5DDA20(v62, v64);
  v69 = sub_23D66C1F8();
  v71 = v70;
  if (qword_256C78D70 != -1)
    swift_once();
  v72 = qword_256C89190;
  v73 = *(_QWORD *)algn_256C89198;
  v74 = swift_initStackObject();
  *(_QWORD *)(v74 + 32) = v72;
  *(_OWORD *)(v74 + 16) = v111;
  *(_QWORD *)(v74 + 40) = v73;
  *(_QWORD *)(v74 + 48) = v20;
  *(_QWORD *)(v74 + 56) = v21;
  *(_QWORD *)(v74 + 64) = v69;
  *(_QWORD *)(v74 + 72) = v71;
  sub_23D5AFA60(v20, v21);
  sub_23D5AFA60(v72, v73);
  sub_23D5AFA60(v69, v71);
  v75 = v20;
  v76 = sub_23D62FE18(v74);
  v78 = v77;
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_23D5DDA20(v69, v71);
  sub_23D5DDA20(v75, v21);
  *(_QWORD *)&v111 = v76;
  *(_QWORD *)&v124 = v76;
  *((_QWORD *)&v124 + 1) = v78;
  if ((sub_23D66C2E8() & 1) != 0)
  {
    v79 = v109;
    v80 = (unint64_t)v112;
    *(_QWORD *)&v124 = v109;
    *((_QWORD *)&v124 + 1) = v112;
    v81 = sub_23D66C2E8();
    v82 = (uint64_t)v105;
    if ((v81 & 1) != 0)
    {
      sub_23D5DDA20(v111, v78);
      sub_23D5DDA20(v79, v80);
      sub_23D5DDA20(v120, v127);
      sub_23D5E6950(v82, type metadata accessor for GKCrypto_UserKeys);
      v83 = v110;
      v84 = v123;
      *(uint64_t *)((char *)v123 + v110[9]) = MEMORY[0x24BEE4AF8];
      sub_23D5F16C4(v121, (uint64_t)v84 + v83[10], &qword_256C79170);
      return sub_23D5F16C4(v25, (uint64_t)v84 + v83[11], &qword_256C79120);
    }
    v107 = v78;
    v93 = v123;
    if (qword_256C78B10 != -1)
      swift_once();
    v97 = sub_23D66BFDC();
    __swift_project_value_buffer(v97, (uint64_t)qword_256C88B78);
    v98 = sub_23D66C588();
    v99 = sub_23D66BFC4();
    v100 = v98;
    if (os_log_type_enabled(v99, v98))
    {
      v101 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v101 = 0;
      _os_log_impl(&dword_23D5A8000, v99, v100, "encryptionKeyStringThatWasSigned signature verification with encryptionKeySignature failed", v101, 2u);
      MEMORY[0x242636844](v101, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v102 = swift_allocError();
    *(_WORD *)v103 = 265;
    *(_OWORD *)(v103 + 8) = xmmword_23D673690;
    *(_QWORD *)(v103 + 24) = 0x800000023D679AC0;
    *(_QWORD *)(v103 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v103 + 40) = 0x800000023D679B00;
    v113 = (char *)v102;
    swift_willThrow();
    sub_23D5DDA20(v111, v107);
    sub_23D5DDA20(v79, v80);
    sub_23D5DDA20(v120, v127);
    sub_23D5AEF8C(v121, &qword_256C79170);
    sub_23D5AEF8C(v25, &qword_256C79120);
    sub_23D5E6950(v82, type metadata accessor for GKCrypto_UserKeys);
    v51 = v115;
    v52 = v118;
    v87 = v108;
  }
  else
  {
    v85 = v78;
    v86 = (uint64_t)v105;
    v87 = v108;
    if (qword_256C78B10 != -1)
      swift_once();
    v88 = sub_23D66BFDC();
    __swift_project_value_buffer(v88, (uint64_t)qword_256C88B78);
    v89 = sub_23D66C588();
    v90 = sub_23D66BFC4();
    v91 = v89;
    v92 = os_log_type_enabled(v90, v89);
    v93 = v123;
    if (v92)
    {
      v94 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v94 = 0;
      _os_log_impl(&dword_23D5A8000, v90, v91, "verificationKeyStringToSign signature verification with verificationKey failed", v94, 2u);
      v87 = v108;
      MEMORY[0x242636844](v94, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v95 = swift_allocError();
    *(_WORD *)v96 = 266;
    *(_OWORD *)(v96 + 8) = xmmword_23D673680;
    *(_QWORD *)(v96 + 24) = 0x800000023D679AC0;
    *(_QWORD *)(v96 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v96 + 40) = 0x800000023D679B00;
    v113 = (char *)v95;
    swift_willThrow();
    sub_23D5DDA20(v111, v85);
    sub_23D5DDA20(v109, (unint64_t)v112);
    sub_23D5DDA20(v120, v127);
    sub_23D5AEF8C(v121, &qword_256C79170);
    sub_23D5AEF8C(v25, &qword_256C79120);
    sub_23D5E6950(v86, type metadata accessor for GKCrypto_UserKeys);
    v51 = v115;
    v52 = v118;
  }
  sub_23D5DDA20(*v93, v93[1]);
  v58 = v110;
  (*(void (**)(char *, uint64_t))(v52 + 8))((char *)v93 + v110[5], v119);
  v59 = v116;
  v60 = v117;
  v61 = v114;
  (*(void (**)(char *, uint64_t))(v114 + 8))((char *)v93 + v58[6], v51);
  if (!v87)
    (*(void (**)(char *, uint64_t))(v60 + 8))((char *)v93 + v58[7], v59);
  return (*(uint64_t (**)(char *, uint64_t))(v61 + 8))((char *)v93 + v58[8], v51);
}

uint64_t sub_23D6202F0()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000034, 0x800000023D679BA0);
  qword_256C89180 = result;
  *(_QWORD *)algn_256C89188 = v1;
  return result;
}

uint64_t sub_23D620328()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000036, 0x800000023D679B60);
  qword_256C89190 = result;
  *(_QWORD *)algn_256C89198 = v1;
  return result;
}

uint64_t UserKeyingInfo.user.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t UserKeyingInfo.encryptionKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 20);
  v4 = sub_23D66C210();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UserKeyingInfo.encryptionKeySignature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 24);
  v4 = sub_23D66C2DC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UserKeyingInfo.verificationKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 28);
  v4 = sub_23D66C330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t UserKeyingInfo.verificationKeySelfSignature.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for UserKeyingInfo(0) + 32);
  v4 = sub_23D66C2DC();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t sub_23D620494(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  uint64_t v36;
  _BYTE *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char v44;
  char v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char v56;
  char v57;
  uint64_t v58;
  uint64_t v59;
  _BYTE *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  char v68;
  char v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  char v79;
  char v80;
  _BYTE *v81;
  uint64_t v82;
  _BYTE *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  _BYTE *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  char v95;
  unint64_t v97;
  void (*v98)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t (*v103)(uint64_t, uint64_t, uint64_t);
  int v104;
  int v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unint64_t v110;
  char v111;
  _BYTE v112[24];
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  _BYTE *v116;
  _BYTE *v117;
  _BYTE *v118;
  uint64_t v119;
  _BYTE *v120;
  _BYTE *v121;
  unint64_t v122;
  uint64_t *v123;
  _BYTE *v124;
  unint64_t v125;
  unint64_t v126;
  _BYTE *v127;
  _BYTE *v128;
  _BYTE *v129;
  uint64_t v130;
  _BYTE *v131;
  uint64_t v132;

  v132 = *MEMORY[0x24BDAC8D0];
  v130 = type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs(0);
  v119 = *(_QWORD *)(v130 - 8);
  v4 = MEMORY[0x24BDAC7A8](v130);
  v120 = &v112[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v6 = MEMORY[0x24BDAC7A8](v4);
  v121 = &v112[-v7];
  v8 = MEMORY[0x24BDAC7A8](v6);
  v129 = &v112[-v9];
  MEMORY[0x24BDAC7A8](v8);
  v128 = &v112[-v10];
  v115 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B7B8);
  MEMORY[0x24BDAC7A8](v115);
  v118 = &v112[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B7C0);
  v13 = MEMORY[0x24BDAC7A8](v12);
  v117 = &v112[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v13);
  v116 = &v112[-v15];
  v16 = type metadata accessor for UserKeyingInfo(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v123 = (uint64_t *)&v112[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v19 = MEMORY[0x24BDAC7A8](v17);
  v131 = &v112[-v20];
  v21 = MEMORY[0x24BDAC7A8](v19);
  v127 = &v112[-v22];
  v23 = MEMORY[0x24BDAC7A8](v21);
  v125 = (unint64_t)&v112[-v24];
  v25 = MEMORY[0x24BDAC7A8](v23);
  v126 = (unint64_t)&v112[-v26];
  v27 = MEMORY[0x24BDAC7A8](v25);
  v29 = &v112[-v28];
  v30 = MEMORY[0x24BDAC7A8](v27);
  v124 = &v112[-v31];
  v32 = MEMORY[0x24BDAC7A8](v30);
  v34 = &v112[-v33];
  v35 = MEMORY[0x24BDAC7A8](v32);
  v37 = &v112[-v36];
  v122 = v35;
  v38 = sub_23D66C1D4();
  v40 = v39;
  v41 = sub_23D66C1D4();
  v43 = v42;
  sub_23D5E6578(v38, v40);
  v45 = v44;
  sub_23D5DDA20(v41, v43);
  v46 = v40;
  v47 = a2;
  v48 = a1;
  sub_23D5DDA20(v38, v46);
  sub_23D5E7298(a1, (uint64_t)v37, type metadata accessor for UserKeyingInfo);
  sub_23D5E7298(v47, (uint64_t)v34, type metadata accessor for UserKeyingInfo);
  if ((v45 & 1) == 0)
  {
    sub_23D5E6950((uint64_t)v34, type metadata accessor for UserKeyingInfo);
    sub_23D5E6950((uint64_t)v37, type metadata accessor for UserKeyingInfo);
    v92 = a1;
    v60 = v124;
    sub_23D5E7298(v92, (uint64_t)v124, type metadata accessor for UserKeyingInfo);
    sub_23D5E7298(v47, (uint64_t)v29, type metadata accessor for UserKeyingInfo);
    v61 = v48;
    goto LABEL_7;
  }
  v49 = sub_23D66C1D4();
  v114 = v47;
  v50 = v49;
  v52 = v51;
  v53 = sub_23D66C1D4();
  v55 = v54;
  sub_23D5E6578(v50, v52);
  v57 = v56;
  sub_23D5DDA20(v53, v55);
  v58 = v50;
  v47 = v114;
  sub_23D5DDA20(v58, v52);
  sub_23D5E6950((uint64_t)v34, type metadata accessor for UserKeyingInfo);
  sub_23D5E6950((uint64_t)v37, type metadata accessor for UserKeyingInfo);
  v59 = a1;
  v60 = v124;
  sub_23D5E7298(v59, (uint64_t)v124, type metadata accessor for UserKeyingInfo);
  sub_23D5E7298(v47, (uint64_t)v29, type metadata accessor for UserKeyingInfo);
  v61 = v48;
  if ((v57 & 1) == 0)
  {
LABEL_7:
    sub_23D5E6950((uint64_t)v29, type metadata accessor for UserKeyingInfo);
    sub_23D5E6950((uint64_t)v60, type metadata accessor for UserKeyingInfo);
    v71 = v126;
    sub_23D5E7298(v61, v126, type metadata accessor for UserKeyingInfo);
    v72 = v125;
    sub_23D5E7298(v47, v125, type metadata accessor for UserKeyingInfo);
    goto LABEL_8;
  }
  v62 = sub_23D66C2D0();
  v64 = v63;
  v65 = sub_23D66C2D0();
  v67 = v66;
  sub_23D5E6578(v62, v64);
  v69 = v68;
  sub_23D5DDA20(v65, v67);
  v70 = v64;
  v47 = v114;
  sub_23D5DDA20(v62, v70);
  sub_23D5E6950((uint64_t)v29, type metadata accessor for UserKeyingInfo);
  sub_23D5E6950((uint64_t)v60, type metadata accessor for UserKeyingInfo);
  v71 = v126;
  sub_23D5E7298(v48, v126, type metadata accessor for UserKeyingInfo);
  v72 = v125;
  sub_23D5E7298(v47, v125, type metadata accessor for UserKeyingInfo);
  if ((v69 & 1) == 0)
  {
LABEL_8:
    sub_23D5E6950(v72, type metadata accessor for UserKeyingInfo);
    sub_23D5E6950(v71, type metadata accessor for UserKeyingInfo);
    v81 = v127;
    sub_23D5E7298(v61, (uint64_t)v127, type metadata accessor for UserKeyingInfo);
    v93 = v47;
    v83 = v131;
    sub_23D5E7298(v93, (uint64_t)v131, type metadata accessor for UserKeyingInfo);
    goto LABEL_9;
  }
  v73 = sub_23D66C2D0();
  v75 = v74;
  v76 = sub_23D66C2D0();
  v78 = v77;
  sub_23D5E6578(v73, v75);
  v80 = v79;
  sub_23D5DDA20(v76, v78);
  sub_23D5DDA20(v73, v75);
  sub_23D5E6950(v72, type metadata accessor for UserKeyingInfo);
  sub_23D5E6950(v71, type metadata accessor for UserKeyingInfo);
  v81 = v127;
  sub_23D5E7298(v61, (uint64_t)v127, type metadata accessor for UserKeyingInfo);
  v82 = v47;
  v83 = v131;
  sub_23D5E7298(v82, (uint64_t)v131, type metadata accessor for UserKeyingInfo);
  if ((v80 & 1) == 0)
  {
LABEL_9:
    sub_23D5E6950((uint64_t)v83, type metadata accessor for UserKeyingInfo);
    sub_23D5E6950((uint64_t)v81, type metadata accessor for UserKeyingInfo);
    v94 = v123;
    sub_23D5E7298(v61, (uint64_t)v123, type metadata accessor for UserKeyingInfo);
    v95 = 0;
LABEL_10:
    sub_23D5E6950((uint64_t)v94, type metadata accessor for UserKeyingInfo);
    return v95 & 1;
  }
  v84 = *(int *)(v122 + 36);
  v85 = *(_QWORD *)&v83[v84];
  v86 = *(_QWORD *)(*(_QWORD *)&v81[v84] + 16);
  v87 = *(_BYTE **)(v85 + 16);
  v114 = *(_QWORD *)&v81[v84];
  swift_bridgeObjectRetain();
  v113 = v85;
  swift_bridgeObjectRetain();
  v125 = 0;
  v126 = 0;
  v89 = (uint64_t)v118;
  v88 = v119;
  v91 = v116;
  v90 = (uint64_t)v117;
  v124 = v87;
  v122 = v86;
  v97 = v126;
  if (v126 == v86)
  {
    v98 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v119 + 56);
    v98(v116, 1, 1, v130);
    v126 = v86;
  }
  else
  {
    if (v126 >= *(_QWORD *)(v114 + 16))
    {
      __break(1u);
      goto LABEL_28;
    }
    sub_23D5E7298(v114+ ((*(unsigned __int8 *)(v119 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80))+ *(_QWORD *)(v119 + 72) * v126, (uint64_t)v116, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
    v126 = v97 + 1;
    v98 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v88 + 56);
    v98(v91, 0, 1, v130);
  }
  if ((_BYTE *)v125 == v87)
  {
    v99 = 1;
    goto LABEL_19;
  }
  if (v125 >= *(_QWORD *)(v113 + 16))
  {
LABEL_28:
    __break(1u);
    JUMPOUT(0x23D621E84);
  }
  v100 = v125;
  sub_23D5E7298(v113+ ((*(unsigned __int8 *)(v88 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))+ *(_QWORD *)(v88 + 72) * v125, v90, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  v99 = 0;
  v87 = (_BYTE *)(v100 + 1);
LABEL_19:
  v125 = (unint64_t)v87;
  v101 = v130;
  v98((_BYTE *)v90, v99, 1, v130);
  v102 = v89 + *(int *)(v115 + 48);
  sub_23D5F16C4((uint64_t)v91, v89, &qword_256C7B7C0);
  sub_23D5F16C4(v90, v102, &qword_256C7B7C0);
  v103 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
  v104 = v103(v89, 1, v101);
  v105 = v103(v102, 1, v101);
  if (v104 == 1)
  {
    if (v105 == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_23D5E6950((uint64_t)v83, type metadata accessor for UserKeyingInfo);
      sub_23D5E6950((uint64_t)v81, type metadata accessor for UserKeyingInfo);
      v94 = v123;
      sub_23D5E7298(v61, (uint64_t)v123, type metadata accessor for UserKeyingInfo);
      v109 = *v94;
      v110 = v94[1];
      sub_23D5AFA60(*v94, v110);
      sub_23D5E6578(v109, v110);
      v95 = v111;
      sub_23D5DDA20(v109, v110);
      goto LABEL_10;
    }
    sub_23D5AEF8C(v102, &qword_256C7B7C0);
    goto LABEL_25;
  }
  if (v105 == 1)
  {
    sub_23D5E6950(v89, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
LABEL_25:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_23D5E7F64(v89, (uint64_t)v128, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  sub_23D5E7F64(v102, (uint64_t)v129, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  sub_23D66C1D4();
  v107 = v106;
  v108 = sub_23D66C1D4();
  return ((uint64_t (*)(uint64_t))((char *)&loc_23D620DA0 + *((int *)qword_23D621FC0 + (v107 >> 62))))(v108);
}

unint64_t sub_23D622024()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256C79138;
  if (!qword_256C79138)
  {
    v1 = type metadata accessor for GKCrypto_UserKeys(255);
    result = MEMORY[0x242636790](&unk_23D672B9C, v1);
    atomic_store(result, (unint64_t *)&qword_256C79138);
  }
  return result;
}

void sub_23D62206C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (sub_23D66BC88())
  {
    if (__OFSUB__(a1, sub_23D66BCAC()))
    {
      __break(1u);
      JUMPOUT(0x23D622138);
    }
    sub_23D66BCA0();
    if (a3)
      __asm { BR              X10 }
  }
  else
  {
    sub_23D66BCA0();
    if (a3)
    {
LABEL_8:
      __break(1u);
      JUMPOUT(0x23D622150);
    }
  }
  __break(1u);
  goto LABEL_8;
}

uint64_t _s14GroupKitCrypto14UserKeyingInfoV2eeoiySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(_BYTE *, uint64_t, uint64_t);
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t (*v45)(_BYTE *, uint64_t, uint64_t);
  int v46;
  char v47;
  void (*v49)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v50;
  uint64_t v51;
  void (*v52)(_BYTE *, _BYTE *, uint64_t);
  uint64_t v53;
  uint64_t v54;
  _BYTE v55[32];
  _BYTE *v56;
  _BYTE *v57;
  _BYTE *v58;
  _BYTE *v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  uint64_t v64;
  uint64_t v65;
  _BYTE *v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;

  v71 = *MEMORY[0x24BDAC8D0];
  v4 = sub_23D66C2AC();
  v5 = *(_QWORD *)(v4 - 8);
  v64 = v4;
  v65 = v5;
  v6 = MEMORY[0x24BDAC7A8](v4);
  v60 = &v55[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v6);
  v61 = &v55[-v8];
  v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B7A8);
  MEMORY[0x24BDAC7A8](v62);
  v63 = &v55[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v10 = sub_23D66C258();
  v11 = *(_QWORD *)(v10 - 8);
  v69 = v10;
  v70 = v11;
  v12 = MEMORY[0x24BDAC7A8](v10);
  v66 = &v55[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v12);
  v67 = &v55[-v14];
  v68 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B7B0);
  MEMORY[0x24BDAC7A8](v68);
  v16 = &v55[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v17 = type metadata accessor for UserKeyingInfo(0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = &v55[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v21 = MEMORY[0x24BDAC7A8](v18);
  v23 = &v55[-v22];
  v24 = MEMORY[0x24BDAC7A8](v21);
  v26 = &v55[-v25];
  MEMORY[0x24BDAC7A8](v24);
  v28 = &v55[-v27];
  v29 = sub_23D620494(a1, a2);
  sub_23D5E7298(a1, (uint64_t)v28, type metadata accessor for UserKeyingInfo);
  sub_23D5E7298(a2, (uint64_t)v26, type metadata accessor for UserKeyingInfo);
  if ((v29 & 1) == 0)
    goto LABEL_11;
  v58 = v26;
  v59 = v23;
  v56 = v20;
  v57 = v28;
  v30 = v17;
  v31 = *(int *)(v17 + 40);
  v32 = (uint64_t)&v26[v31];
  v33 = (uint64_t)&v16[*(int *)(v68 + 48)];
  sub_23D5AEF48((uint64_t)&v28[v31], (uint64_t)v16, &qword_256C79170);
  sub_23D5AEF48(v32, v33, &qword_256C79170);
  v34 = v69;
  v35 = v70;
  v36 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v70 + 48);
  LODWORD(v32) = v36(v16, 1, v69);
  v37 = v36((_BYTE *)v33, 1, v34);
  if ((_DWORD)v32 != 1)
  {
    if (v37 != 1)
    {
      v49 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 32);
      v49(v67, v16, v34);
      v49(v66, (_BYTE *)v33, v34);
      v68 = sub_23D66C234();
      v51 = v50;
      sub_23D66C234();
      __asm { BR              X11 }
    }
    (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v16, v34);
    goto LABEL_10;
  }
  if (v37 != 1)
  {
    sub_23D5AEF8C(v33, &qword_256C79170);
LABEL_10:
    v20 = v56;
    v28 = v57;
    v26 = v58;
    v23 = v59;
LABEL_11:
    sub_23D5E6950((uint64_t)v26, type metadata accessor for UserKeyingInfo);
    sub_23D5E6950((uint64_t)v28, type metadata accessor for UserKeyingInfo);
    sub_23D5E7298(a1, (uint64_t)v23, type metadata accessor for UserKeyingInfo);
    sub_23D5E7298(a2, (uint64_t)v20, type metadata accessor for UserKeyingInfo);
    v47 = 0;
    v38 = (uint64_t)v23;
    goto LABEL_12;
  }
  sub_23D5E6950((uint64_t)v58, type metadata accessor for UserKeyingInfo);
  sub_23D5E6950((uint64_t)v57, type metadata accessor for UserKeyingInfo);
  v38 = (uint64_t)v59;
  sub_23D5E7298(a1, (uint64_t)v59, type metadata accessor for UserKeyingInfo);
  v20 = v56;
  sub_23D5E7298(a2, (uint64_t)v56, type metadata accessor for UserKeyingInfo);
  v39 = *(int *)(v30 + 44);
  v40 = (uint64_t)&v20[v39];
  v41 = v63;
  v42 = (uint64_t)&v63[*(int *)(v62 + 48)];
  sub_23D5AEF48(v38 + v39, (uint64_t)v63, &qword_256C79120);
  sub_23D5AEF48(v40, v42, &qword_256C79120);
  v44 = v64;
  v43 = v65;
  v45 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v65 + 48);
  LODWORD(v40) = v45(v41, 1, v64);
  v46 = v45((_BYTE *)v42, 1, v44);
  if ((_DWORD)v40 != 1)
  {
    if (v46 != 1)
    {
      v52 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v43 + 32);
      v52(v61, v41, v44);
      v52(v60, (_BYTE *)v42, v44);
      sub_23D66C234();
      v54 = v53;
      sub_23D66C234();
      __asm { BR              X11 }
    }
    (*(void (**)(_BYTE *, uint64_t))(v43 + 8))(v41, v44);
    goto LABEL_18;
  }
  if (v46 != 1)
  {
    sub_23D5AEF8C(v42, &qword_256C79120);
LABEL_18:
    v47 = 0;
    goto LABEL_12;
  }
  v47 = 1;
LABEL_12:
  sub_23D5E6950((uint64_t)v20, type metadata accessor for UserKeyingInfo);
  sub_23D5E6950(v38, type metadata accessor for UserKeyingInfo);
  return v47 & 1;
}

uint64_t *initializeBufferWithCopyOfBuffer for UserKeyingInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  void (*v17)(char *, char *, uint64_t);
  uint64_t v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v29 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v29 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a3[5];
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66C210();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
    v13 = a3[6];
    v14 = (char *)a1 + v13;
    v15 = (char *)a2 + v13;
    v16 = sub_23D66C2DC();
    v17 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v16 - 8) + 16);
    v17(v14, v15, v16);
    v18 = a3[7];
    v19 = (char *)a1 + v18;
    v20 = (char *)a2 + v18;
    v21 = sub_23D66C330();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v21 - 8) + 16))(v19, v20, v21);
    v17((char *)a1 + a3[8], (char *)a2 + a3[8], v16);
    v22 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    v23 = (char *)a1 + v22;
    v24 = (char *)a2 + v22;
    v25 = sub_23D66C258();
    v26 = *(_QWORD *)(v25 - 8);
    v27 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    swift_bridgeObjectRetain();
    if (v27(v24, 1, v25))
    {
      v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
      memcpy(v23, v24, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v26 + 16))(v23, v24, v25);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v26 + 56))(v23, 0, 1, v25);
    }
    v30 = a3[11];
    v31 = (char *)a1 + v30;
    v32 = (char *)a2 + v30;
    v33 = sub_23D66C2AC();
    v34 = *(_QWORD *)(v33 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v34 + 48))(v32, 1, v33))
    {
      v35 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
      memcpy(v31, v32, *(_QWORD *)(*(_QWORD *)(v35 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v34 + 16))(v31, v32, v33);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v34 + 56))(v31, 0, 1, v33);
    }
  }
  return a1;
}

uint64_t destroy for UserKeyingInfo(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void (*v8)(uint64_t, uint64_t);
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + a2[5];
  v5 = sub_23D66C210();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
  v6 = a1 + a2[6];
  v7 = sub_23D66C2DC();
  v8 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 8);
  v8(v6, v7);
  v9 = a1 + a2[7];
  v10 = sub_23D66C330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 8))(v9, v10);
  v8(a1 + a2[8], v7);
  swift_bridgeObjectRelease();
  v11 = a1 + a2[10];
  v12 = sub_23D66C258();
  v13 = *(_QWORD *)(v12 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v11, 1, v12))
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
  v14 = a1 + a2[11];
  v15 = sub_23D66C2AC();
  v16 = *(_QWORD *)(v15 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
  return result;
}

uint64_t *initializeWithCopy for UserKeyingInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int (*v26)(char *, uint64_t, uint64_t);
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = (char *)a2 + v12;
  v15 = sub_23D66C2DC();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 16);
  v16(v13, v14, v15);
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (char *)a2 + v17;
  v20 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 16))(v18, v19, v20);
  v16((char *)a1 + a3[8], (char *)a2 + a3[8], v15);
  v21 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  v22 = (char *)a1 + v21;
  v23 = (char *)a2 + v21;
  v24 = sub_23D66C258();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  swift_bridgeObjectRetain();
  if (v26(v23, 1, v24))
  {
    v27 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v27 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v25 + 16))(v22, v23, v24);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
  }
  v28 = a3[11];
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = sub_23D66C2AC();
  v32 = *(_QWORD *)(v31 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v32 + 48))(v30, 1, v31))
  {
    v33 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v29, v30, *(_QWORD *)(*(_QWORD *)(v33 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v32 + 16))(v29, v30, v31);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v32 + 56))(v29, 0, 1, v31);
  }
  return a1;
}

uint64_t *assignWithCopy for UserKeyingInfo(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t (*v28)(char *, uint64_t, uint64_t);
  int v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t (*v36)(char *, uint64_t, uint64_t);
  int v37;
  int v38;
  uint64_t v39;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a3[5];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66C2DC();
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 24);
  v18(v15, v16, v17);
  v19 = a3[7];
  v20 = (char *)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v22 - 8) + 24))(v20, v21, v22);
  v18((char *)a1 + a3[8], (char *)a2 + a3[8], v17);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v23 = a3[10];
  v24 = (char *)a1 + v23;
  v25 = (char *)a2 + v23;
  v26 = sub_23D66C258();
  v27 = *(_QWORD *)(v26 - 8);
  v28 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48);
  LODWORD(v18) = v28(v24, 1, v26);
  v29 = v28(v25, 1, v26);
  if ((_DWORD)v18)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v24, v26);
LABEL_6:
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v24, v25, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_7:
  v31 = a3[11];
  v32 = (char *)a1 + v31;
  v33 = (char *)a2 + v31;
  v34 = sub_23D66C2AC();
  v35 = *(_QWORD *)(v34 - 8);
  v36 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v35 + 48);
  v37 = v36(v32, 1, v34);
  v38 = v36(v33, 1, v34);
  if (!v37)
  {
    if (!v38)
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 24))(v32, v33, v34);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v35 + 8))(v32, v34);
    goto LABEL_12;
  }
  if (v38)
  {
LABEL_12:
    v39 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v32, v33, *(_QWORD *)(*(_QWORD *)(v39 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v35 + 56))(v32, 0, 1, v34);
  return a1;
}

char *initializeWithTake for UserKeyingInfo(char *a1, char *a2, int *a3)
{
  uint64_t v6;
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  void (*v14)(char *, char *, uint64_t);
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v6 = a3[5];
  v7 = &a1[v6];
  v8 = &a2[v6];
  v9 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v9 - 8) + 32))(v7, v8, v9);
  v10 = a3[6];
  v11 = &a1[v10];
  v12 = &a2[v10];
  v13 = sub_23D66C2DC();
  v14 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 32);
  v14(v11, v12, v13);
  v15 = a3[7];
  v16 = &a1[v15];
  v17 = &a2[v15];
  v18 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v18 - 8) + 32))(v16, v17, v18);
  v14(&a1[a3[8]], &a2[a3[8]], v13);
  v19 = a3[10];
  *(_QWORD *)&a1[a3[9]] = *(_QWORD *)&a2[a3[9]];
  v20 = &a1[v19];
  v21 = &a2[v19];
  v22 = sub_23D66C258();
  v23 = *(_QWORD *)(v22 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
  {
    v24 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v20, v21, *(_QWORD *)(*(_QWORD *)(v24 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v23 + 32))(v20, v21, v22);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
  }
  v25 = a3[11];
  v26 = &a1[v25];
  v27 = &a2[v25];
  v28 = sub_23D66C2AC();
  v29 = *(_QWORD *)(v28 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
  {
    v30 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v26, v27, *(_QWORD *)(*(_QWORD *)(v30 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v26, v27, v28);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
  }
  return a1;
}

uint64_t *assignWithTake for UserKeyingInfo(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  void (*v16)(char *, char *, uint64_t);
  uint64_t v17;
  char *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t (*v26)(char *, uint64_t, uint64_t);
  int v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t (*v34)(char *, uint64_t, uint64_t);
  int v35;
  int v36;
  uint64_t v37;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v6, v7);
  v8 = a3[5];
  v9 = (char *)a1 + v8;
  v10 = &a2[v8];
  v11 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  v12 = a3[6];
  v13 = (char *)a1 + v12;
  v14 = &a2[v12];
  v15 = sub_23D66C2DC();
  v16 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v15 - 8) + 40);
  v16(v13, v14, v15);
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = &a2[v17];
  v20 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v20 - 8) + 40))(v18, v19, v20);
  v16((char *)a1 + a3[8], &a2[a3[8]], v15);
  *(uint64_t *)((char *)a1 + a3[9]) = *(_QWORD *)&a2[a3[9]];
  swift_bridgeObjectRelease();
  v21 = a3[10];
  v22 = (char *)a1 + v21;
  v23 = &a2[v21];
  v24 = sub_23D66C258();
  v25 = *(_QWORD *)(v24 - 8);
  v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v16) = v26(v22, 1, v24);
  v27 = v26(v23, 1, v24);
  if ((_DWORD)v16)
  {
    if (!v27)
    {
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v22, v23, v24);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v25 + 56))(v22, 0, 1, v24);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v22, v24);
LABEL_6:
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v22, v23, *(_QWORD *)(*(_QWORD *)(v28 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v25 + 40))(v22, v23, v24);
LABEL_7:
  v29 = a3[11];
  v30 = (char *)a1 + v29;
  v31 = &a2[v29];
  v32 = sub_23D66C2AC();
  v33 = *(_QWORD *)(v32 - 8);
  v34 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v33 + 48);
  v35 = v34(v30, 1, v32);
  v36 = v34(v31, 1, v32);
  if (!v35)
  {
    if (!v36)
    {
      (*(void (**)(char *, char *, uint64_t))(v33 + 40))(v30, v31, v32);
      return a1;
    }
    (*(void (**)(char *, uint64_t))(v33 + 8))(v30, v32);
    goto LABEL_12;
  }
  if (v36)
  {
LABEL_12:
    v37 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v30, v31, *(_QWORD *)(*(_QWORD *)(v37 - 8) + 64));
    return a1;
  }
  (*(void (**)(char *, char *, uint64_t))(v33 + 32))(v30, v31, v32);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v33 + 56))(v30, 0, 1, v32);
  return a1;
}

uint64_t getEnumTagSinglePayload for UserKeyingInfo()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D6249AC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;

  v6 = sub_23D66C210();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = sub_23D66C2DC();
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_23D66C330();
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    v7 = *(_QWORD *)(v14 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      v8 = v14;
      v9 = a3[10];
    }
    else
    {
      v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
      v7 = *(_QWORD *)(v8 - 8);
      v9 = a3[11];
    }
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = *(_QWORD *)(a1 + a3[9]);
  if (v12 >= 0xFFFFFFFF)
    LODWORD(v12) = -1;
  return (v12 + 1);
}

uint64_t storeEnumTagSinglePayload for UserKeyingInfo()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D624AD0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;

  v8 = sub_23D66C210();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[5];
  }
  else
  {
    v12 = sub_23D66C2DC();
    v9 = *(_QWORD *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      v10 = v12;
      v11 = a4[6];
    }
    else
    {
      result = sub_23D66C330();
      v9 = *(_QWORD *)(result - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        v10 = result;
        v11 = a4[7];
      }
      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(_QWORD *)(a1 + a4[9]) = (a2 - 1);
          return result;
        }
        v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
        v9 = *(_QWORD *)(v14 - 8);
        if (*(_DWORD *)(v9 + 84) == a3)
        {
          v10 = v14;
          v11 = a4[10];
        }
        else
        {
          v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
          v9 = *(_QWORD *)(v10 - 8);
          v11 = a4[11];
        }
      }
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_23D624BE4()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_23D66C210();
  if (v0 <= 0x3F)
  {
    sub_23D66C2DC();
    if (v1 <= 0x3F)
    {
      sub_23D66C330();
      if (v2 <= 0x3F)
      {
        sub_23D5F5B08(319, &qword_256C7B6C8, (void (*)(uint64_t))MEMORY[0x24BDC6968]);
        if (v3 <= 0x3F)
        {
          sub_23D5F5B08(319, qword_256C7B6D0, (void (*)(uint64_t))MEMORY[0x24BDC69D0]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t *sub_23D624CF8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23D66C330();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23D66C2DC();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_23D624DA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23D66C330();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23D66C2DC();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_23D624DFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C2DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D624E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C2DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D624EF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C2DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D624F70(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C330();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C2DC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D624FEC()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D624FF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_23D66C330();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_23D66C2DC();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23D62506C()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D625078(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_23D66C330();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_23D66C2DC();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B770);
}

uint64_t sub_23D625108()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23D66C330();
  if (v1 <= 0x3F)
  {
    result = sub_23D66C2DC();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23D62518C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char v16;
  char v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  char v25;
  uint64_t v27;

  v4 = type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v27 - v8;
  v10 = sub_23D66C1D4();
  v12 = v11;
  v13 = sub_23D66C1D4();
  v15 = v14;
  sub_23D5E6578(v10, v12);
  v17 = v16;
  sub_23D5DDA20(v13, v15);
  sub_23D5DDA20(v10, v12);
  sub_23D5E7298(a1, (uint64_t)v9, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  sub_23D5E7298(a2, (uint64_t)v7, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  if ((v17 & 1) != 0)
  {
    v18 = sub_23D66C2D0();
    v20 = v19;
    v21 = sub_23D66C2D0();
    v23 = v22;
    sub_23D5E6578(v18, v20);
    v25 = v24;
    sub_23D5DDA20(v21, v23);
    sub_23D5DDA20(v18, v20);
  }
  else
  {
    v25 = 0;
  }
  sub_23D5E6950((uint64_t)v7, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  sub_23D5E6950((uint64_t)v9, type metadata accessor for UserKeyingInfo.ExternalVKsAndSigs);
  return v25 & 1;
}

uint64_t sub_23D625324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 8))();
}

uint64_t sub_23D62533C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))();
}

uint64_t sub_23D625354()
{
  uint64_t *v0;
  uint64_t v1;

  v1 = *v0;
  swift_bridgeObjectRetain();
  return v1;
}

unint64_t sub_23D625380(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t inited;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t result;
  uint64_t v20;
  void *v21;
  id v22;
  id v23;

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B7D0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E450;
  *(_QWORD *)(inited + 32) = sub_23D66C39C();
  *(_QWORD *)(inited + 40) = v9;
  v10 = (void *)*MEMORY[0x24BDE9230];
  type metadata accessor for CFString(0);
  v12 = v11;
  *(_QWORD *)(inited + 72) = v11;
  *(_QWORD *)(inited + 48) = v10;
  *(_QWORD *)(inited + 80) = sub_23D66C39C();
  *(_QWORD *)(inited + 88) = v13;
  v14 = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 120) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(inited + 96) = a3;
  *(_QWORD *)(inited + 104) = a4;
  *(_QWORD *)(inited + 128) = sub_23D66C39C();
  *(_QWORD *)(inited + 136) = v15;
  *(_QWORD *)(inited + 168) = v14;
  *(_QWORD *)(inited + 144) = a1;
  *(_QWORD *)(inited + 152) = a2;
  *(_QWORD *)(inited + 176) = sub_23D66C39C();
  *(_QWORD *)(inited + 184) = v16;
  v17 = MEMORY[0x24BEE1328];
  *(_QWORD *)(inited + 216) = MEMORY[0x24BEE1328];
  *(_BYTE *)(inited + 192) = 1;
  *(_QWORD *)(inited + 224) = sub_23D66C39C();
  *(_QWORD *)(inited + 232) = v18;
  *(_QWORD *)(inited + 264) = v17;
  *(_BYTE *)(inited + 240) = 1;
  result = *MEMORY[0x24BDE9138];
  if (*MEMORY[0x24BDE9138])
  {
    result = sub_23D66C39C();
    *(_QWORD *)(inited + 272) = result;
    *(_QWORD *)(inited + 280) = v20;
    v21 = (void *)*MEMORY[0x24BDE9198];
    if (*MEMORY[0x24BDE9198])
    {
      *(_QWORD *)(inited + 312) = v12;
      *(_QWORD *)(inited + 288) = v21;
      v22 = v10;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      v23 = v21;
      return sub_23D5B4A54(inited);
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

unint64_t sub_23D625504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  uint64_t v22;
  id v23;
  char v24;
  _OWORD v26[2];
  __int128 v27;
  uint64_t v28;

  v4 = sub_23D625380(a1, a2, a3, a4);
  v5 = sub_23D66C39C();
  v7 = v6;
  v8 = MEMORY[0x24BEE1328];
  v28 = MEMORY[0x24BEE1328];
  LOBYTE(v27) = 1;
  sub_23D5F1150(&v27, v26);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  sub_23D5E05FC(v26, v5, v7, isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v10 = sub_23D66C39C();
  v12 = v11;
  v28 = v8;
  LOBYTE(v27) = 1;
  sub_23D5F1150(&v27, v26);
  v13 = swift_isUniquelyReferenced_nonNull_native();
  sub_23D5E05FC(v26, v10, v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v14 = sub_23D66C39C();
  v16 = v15;
  v28 = v8;
  LOBYTE(v27) = 1;
  sub_23D5F1150(&v27, v26);
  v17 = swift_isUniquelyReferenced_nonNull_native();
  sub_23D5E05FC(v26, v14, v16, v17);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v18 = sub_23D66C39C();
  v20 = v19;
  v21 = (void *)*MEMORY[0x24BDE93B8];
  type metadata accessor for CFString(0);
  v28 = v22;
  *(_QWORD *)&v27 = v21;
  sub_23D5F1150(&v27, v26);
  v23 = v21;
  v24 = swift_isUniquelyReferenced_nonNull_native();
  sub_23D5E05FC(v26, v18, v20, v24);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23D6256F4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  unint64_t *i;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char isUniquelyReferenced_nonNull_native;
  const __CFDictionary *v15;
  OSStatus v16;
  CFStringRef v17;
  __CFString *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _OWORD v25[2];
  __int128 v26;
  uint64_t v27;
  unint64_t v28;

  v21 = result;
  v5 = *(_QWORD *)(a3 + 16);
  if (v5)
  {
    swift_bridgeObjectRetain();
    for (i = (unint64_t *)(a3 + 40); ; i += 2)
    {
      v8 = *(i - 1);
      v9 = *i;
      sub_23D5AFA60(v8, *i);
      v10 = sub_23D625380(v21, a2, a4, a5);
      v11 = sub_23D66C39C();
      v13 = v12;
      v27 = MEMORY[0x24BDCDDE8];
      *(_QWORD *)&v26 = v8;
      *((_QWORD *)&v26 + 1) = v9;
      sub_23D5F1150(&v26, v25);
      sub_23D5AFA60(v8, v9);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v28 = v10;
      sub_23D5E05FC(v25, v11, v13, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      v15 = (const __CFDictionary *)sub_23D66C360();
      swift_bridgeObjectRelease();
      v16 = SecItemDelete(v15);

      if (v16 != -25300)
      {
        if (v16)
          break;
      }
      sub_23D5DDA20(v8, v9);
      if (!--v5)
        return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
    *(_QWORD *)&v26 = 0;
    *((_QWORD *)&v26 + 1) = 0xE000000000000000;
    sub_23D66C630();
    sub_23D66C3D8();
    v17 = SecCopyErrorMessageString(v16, 0);
    if (v17)
    {
      v18 = (__CFString *)v17;
      sub_23D66C39C();

    }
    else
    {
      LODWORD(v25[0]) = v16;
      sub_23D66C840();
    }
    sub_23D66C3D8();
    swift_bridgeObjectRelease();
    v19 = v26;
    sub_23D62611C();
    swift_allocError();
    *(_OWORD *)v20 = v19;
    *(_DWORD *)(v20 + 16) = v16;
    swift_willThrow();
    return sub_23D5DDA20(v8, v9);
  }
  return result;
}

uint64_t sub_23D625968@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  id v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  char v10;
  id v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  id v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  unsigned __int8 v34;
  BOOL v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  unsigned int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  unsigned int v44;
  uint64_t v45;
  unsigned __int8 v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  __int128 v54;
  __int128 v55;
  unint64_t v56;

  v5 = *a1;
  v6 = (id)*MEMORY[0x24BDE9550];
  v7 = sub_23D66C3B4();
  if (!*(_QWORD *)(v5 + 16) || (v9 = sub_23D5DF330(v7, v8), (v10 & 1) == 0))
  {
    v54 = 0u;
    v55 = 0u;
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }
  sub_23D5F17CC(*(_QWORD *)(v5 + 56) + 32 * v9, (uint64_t)&v54);
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v55 + 1))
  {
LABEL_9:
    sub_23D6261C4((uint64_t)&v54);
    goto LABEL_10;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_10:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v16 = swift_allocError();
    *(_WORD *)v17 = 395;
    *(_OWORD *)(v17 + 8) = xmmword_23D6737A0;
    *(_QWORD *)(v17 + 24) = 0x800000023D679C40;
    *(_QWORD *)(v17 + 32) = 0xD00000000000005FLL;
    *(_QWORD *)(v17 + 40) = 0x800000023D679C60;
    result = swift_willThrow();
LABEL_11:
    *a2 = v16;
    return result;
  }
  v11 = (id)*MEMORY[0x24BDE9558];
  v12 = sub_23D66C3B4();
  if (*(_QWORD *)(v5 + 16) && (v14 = sub_23D5DF330(v12, v13), (v15 & 1) != 0))
  {
    sub_23D5F17CC(*(_QWORD *)(v5 + 56) + 32 * v14, (uint64_t)&v54);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v55 + 1))
  {
    sub_23D6261C4((uint64_t)&v54);
    goto LABEL_19;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_19:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v16 = swift_allocError();
    *(_WORD *)v24 = 395;
    *(_OWORD *)(v24 + 8) = xmmword_23D673790;
    *(_QWORD *)(v24 + 24) = 0x800000023D679C40;
    *(_QWORD *)(v24 + 32) = 0xD00000000000005FLL;
    *(_QWORD *)(v24 + 40) = 0x800000023D679C60;
    swift_willThrow();
LABEL_35:
    result = sub_23D5DDA20(v52, v53);
    goto LABEL_11;
  }
  v56 = v53;
  v19 = (id)*MEMORY[0x24BDE9128];
  v20 = sub_23D66C3B4();
  if (*(_QWORD *)(v5 + 16) && (v22 = sub_23D5DF330(v20, v21), (v23 & 1) != 0))
  {
    sub_23D5F17CC(*(_QWORD *)(v5 + 56) + 32 * v22, (uint64_t)&v54);
  }
  else
  {
    v54 = 0u;
    v55 = 0u;
  }
  swift_bridgeObjectRelease();
  if (!*((_QWORD *)&v55 + 1))
  {
    sub_23D6261C4((uint64_t)&v54);
    goto LABEL_33;
  }
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_33:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v16 = swift_allocError();
    *(_WORD *)v32 = 395;
    v33 = xmmword_23D673780;
LABEL_34:
    *(_OWORD *)(v32 + 8) = v33;
    *(_QWORD *)(v32 + 24) = 0x800000023D679C40;
    *(_QWORD *)(v32 + 32) = 0xD00000000000005FLL;
    *(_QWORD *)(v32 + 40) = 0x800000023D679C60;
    swift_willThrow();
    sub_23D5DDA20(v52, v56);
    goto LABEL_35;
  }
  result = v52;
  v25 = HIBYTE(v53) & 0xF;
  v26 = v52 & 0xFFFFFFFFFFFFLL;
  if ((v53 & 0x2000000000000000) != 0)
    v27 = HIBYTE(v53) & 0xF;
  else
    v27 = v52 & 0xFFFFFFFFFFFFLL;
  if (!v27)
  {
    swift_bridgeObjectRelease();
LABEL_85:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    v16 = swift_allocError();
    *(_WORD *)v32 = 396;
    v33 = xmmword_23D673770;
    goto LABEL_34;
  }
  if ((v53 & 0x1000000000000000) != 0)
  {
    v31 = sub_23D626204(v52, v53, 10);
    result = swift_bridgeObjectRelease();
    if ((v31 & 0x100000000) == 0)
      goto LABEL_64;
    goto LABEL_85;
  }
  if ((v53 & 0x2000000000000000) == 0)
  {
    if ((v52 & 0x1000000000000000) != 0)
      v28 = (unsigned __int8 *)((v53 & 0xFFFFFFFFFFFFFFFLL) + 32);
    else
      v28 = (unsigned __int8 *)sub_23D66C690();
    v29 = sub_23D6262E8(v28, v26, 10);
    v30 = BYTE4(v29) & 1;
    LODWORD(v31) = (_DWORD)v29;
LABEL_63:
    result = swift_bridgeObjectRelease();
    if ((v30 & 1) == 0)
    {
LABEL_64:
      *(_DWORD *)a3 = v31;
      *(_QWORD *)(a3 + 8) = v52;
      *(_QWORD *)(a3 + 16) = v53;
      v41 = v56;
      *(_QWORD *)(a3 + 24) = v52;
      *(_QWORD *)(a3 + 32) = v41;
      return result;
    }
    goto LABEL_85;
  }
  *(_QWORD *)&v54 = v52;
  *((_QWORD *)&v54 + 1) = v53 & 0xFFFFFFFFFFFFFFLL;
  if (v52 == 43)
  {
    if (v25)
    {
      if (v25 != 1)
      {
        LODWORD(v31) = (BYTE1(v52) - 48);
        if (v31 <= 9)
        {
          if (v25 == 2)
            goto LABEL_62;
          if ((BYTE2(v52) - 48) <= 9u)
          {
            LODWORD(v31) = 10 * v31 + (BYTE2(v52) - 48);
            v37 = v25 - 3;
            if (v37)
            {
              v38 = (unsigned __int8 *)&v54 + 3;
              while (1)
              {
                v39 = *v38 - 48;
                if (v39 > 9)
                  goto LABEL_59;
                v40 = 10 * v31;
                if ((v40 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_59;
                LODWORD(v31) = v40 + v39;
                if (__CFADD__((_DWORD)v40, v39))
                  goto LABEL_59;
                v30 = 0;
                ++v38;
                if (!--v37)
                  goto LABEL_63;
              }
            }
            goto LABEL_62;
          }
        }
      }
      goto LABEL_59;
    }
  }
  else
  {
    if (v52 != 45)
    {
      if (v25)
      {
        LODWORD(v31) = (v52 - 48);
        if (v31 <= 9)
        {
          if (v25 == 1)
            goto LABEL_62;
          if ((BYTE1(v52) - 48) <= 9u)
          {
            LODWORD(v31) = 10 * v31 + (BYTE1(v52) - 48);
            v42 = v25 - 2;
            if (v42)
            {
              v43 = (unsigned __int8 *)&v54 + 2;
              while (1)
              {
                v44 = *v43 - 48;
                if (v44 > 9)
                  goto LABEL_59;
                v45 = 10 * v31;
                if ((v45 & 0xFFFFFFFF00000000) != 0)
                  goto LABEL_59;
                LODWORD(v31) = v45 + v44;
                if (__CFADD__((_DWORD)v45, v44))
                  goto LABEL_59;
                v30 = 0;
                ++v43;
                if (!--v42)
                  goto LABEL_63;
              }
            }
            goto LABEL_62;
          }
        }
      }
LABEL_59:
      LODWORD(v31) = 0;
LABEL_60:
      v30 = 1;
      goto LABEL_63;
    }
    if (v25)
    {
      if (v25 != 1)
      {
        v34 = BYTE1(v52) - 48;
        if ((BYTE1(v52) - 48) <= 9u)
        {
          LODWORD(v31) = 0;
          v35 = v34 == 0;
          v36 = -v34;
          if (!v35)
            goto LABEL_60;
          if (v25 == 2)
          {
            v30 = 0;
            LODWORD(v31) = v36;
            goto LABEL_63;
          }
          v46 = BYTE2(v52) - 48;
          if ((BYTE2(v52) - 48) <= 9u)
          {
            v47 = 10 * v36;
            if ((v47 & 0xFFFFFFFF00000000) == 0)
            {
              LODWORD(v31) = v47 - v46;
              if (v47 >= v46)
              {
                v48 = v25 - 3;
                if (v48)
                {
                  v49 = (unsigned __int8 *)&v54 + 3;
                  while (1)
                  {
                    v50 = *v49 - 48;
                    if (v50 > 9)
                      goto LABEL_59;
                    v51 = 10 * v31;
                    if ((v51 & 0xFFFFFFFF00000000) != 0)
                      goto LABEL_59;
                    LODWORD(v31) = v51 - v50;
                    if (v51 < v50)
                      goto LABEL_59;
                    v30 = 0;
                    ++v49;
                    if (!--v48)
                      goto LABEL_63;
                  }
                }
LABEL_62:
                v30 = 0;
                goto LABEL_63;
              }
            }
          }
        }
      }
      goto LABEL_59;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_23D625FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  const __CFDictionary *v4;
  OSStatus v5;
  CFStringRef v7;
  __CFString *v8;
  uint64_t v9;

  sub_23D625380(a1, a2, a3, a4);
  v4 = (const __CFDictionary *)sub_23D66C360();
  swift_bridgeObjectRelease();
  v5 = SecItemDelete(v4);

  if (v5 != -25300 && v5 != 0)
  {
    sub_23D66C630();
    swift_bridgeObjectRelease();
    v7 = SecCopyErrorMessageString(v5, 0);
    if (v7)
    {
      v8 = (__CFString *)v7;
      sub_23D66C39C();

    }
    else
    {
      sub_23D66C840();
    }
    sub_23D66C3D8();
    swift_bridgeObjectRelease();
    sub_23D62611C();
    swift_allocError();
    *(_QWORD *)v9 = 0xD00000000000001BLL;
    *(_QWORD *)(v9 + 8) = 0x800000023D679BE0;
    *(_DWORD *)(v9 + 16) = v5;
    swift_willThrow();
  }
}

unint64_t sub_23D62611C()
{
  unint64_t result;

  result = qword_256C7B7C8;
  if (!qword_256C7B7C8)
  {
    result = MEMORY[0x242636790](&unk_23D673884, &type metadata for KeyStoreError);
    atomic_store(result, (unint64_t *)&qword_256C7B7C8);
  }
  return result;
}

_QWORD *sub_23D626160(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v4;
  size_t v5;

  if (a2 <= a1)
    v2 = a1;
  else
    v2 = a2;
  if (!v2)
    return (_QWORD *)MEMORY[0x24BEE4AF8];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79B18);
  v4 = (_QWORD *)swift_allocObject();
  v5 = _swift_stdlib_malloc_size(v4);
  v4[2] = a1;
  v4[3] = 2 * v5 - 64;
  return v4;
}

uint64_t sub_23D6261C4(uint64_t a1)
{
  uint64_t v2;

  v2 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B7D8);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23D626204(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 *v11;
  uint64_t v13;
  uint64_t v14;

  v13 = a1;
  v14 = a2;
  swift_bridgeObjectRetain();
  v5 = sub_23D66C42C();
  v6 = v4;
  if ((v4 & 0x1000000000000000) == 0)
  {
    if ((v4 & 0x2000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    v8 = HIBYTE(v6) & 0xF;
    v13 = v5;
    v14 = v6 & 0xFFFFFFFFFFFFFFLL;
    v7 = (unsigned __int8 *)&v13;
    goto LABEL_7;
  }
  v5 = sub_23D626568();
  v10 = v9;
  swift_bridgeObjectRelease();
  v6 = v10;
  if ((v10 & 0x2000000000000000) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v5 & 0x1000000000000000) != 0)
  {
    v7 = (unsigned __int8 *)((v6 & 0xFFFFFFFFFFFFFFFLL) + 32);
    v8 = v5 & 0xFFFFFFFFFFFFLL;
  }
  else
  {
    v7 = (unsigned __int8 *)sub_23D66C690();
  }
LABEL_7:
  v11 = sub_23D6262E8(v7, v8, a3);
  swift_bridgeObjectRelease();
  return v11 | ((((unint64_t)v11 >> 32) & 1) << 32);
}

unsigned __int8 *sub_23D6262E8(unsigned __int8 *result, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  unsigned __int8 v5;
  unsigned __int8 v6;
  unsigned __int8 v7;
  unsigned int v8;
  unsigned __int8 *v9;
  unsigned int v10;
  char v11;
  unsigned int v12;
  unsigned __int8 v13;
  unint64_t v14;
  unsigned __int8 v15;
  uint64_t v16;
  unsigned __int8 v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned int v21;
  char v22;
  unint64_t v23;
  unsigned __int8 v24;
  unsigned __int8 v25;
  unsigned __int8 v26;
  unsigned __int8 v27;
  unsigned int v28;
  unsigned int v29;
  char v30;
  unint64_t v31;
  unsigned __int8 v32;

  v3 = *result;
  if (v3 == 43)
  {
    if (a2 >= 1)
    {
      v16 = a2 - 1;
      if (a2 != 1)
      {
        v17 = a3 + 87;
        if (a3 > 10)
        {
          v18 = a3 + 55;
        }
        else
        {
          v17 = 97;
          v18 = 65;
        }
        if (a3 <= 10)
          v19 = a3 + 48;
        else
          v19 = 58;
        if (result)
        {
          v8 = 0;
          v20 = result + 1;
          do
          {
            v21 = *v20;
            if (v21 < 0x30 || v21 >= v19)
            {
              if (v21 < 0x41 || v21 >= v18)
              {
                v12 = 0;
                v13 = 1;
                if (v21 < 0x61 || v21 >= v17)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v22 = -87;
              }
              else
              {
                v22 = -55;
              }
            }
            else
            {
              v22 = -48;
            }
            v23 = v8 * (unint64_t)a3;
            if ((v23 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v24 = v21 + v22;
            v8 = v23 + v24;
            if (__CFADD__((_DWORD)v23, v24))
              goto LABEL_72;
            ++v20;
            --v16;
          }
          while (v16);
LABEL_48:
          v13 = 0;
          v12 = v8;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
LABEL_72:
      v12 = 0;
      v13 = 1;
      return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
    }
  }
  else
  {
    if (v3 != 45)
    {
      if (a2)
      {
        v25 = a3 + 87;
        if (a3 > 10)
        {
          v26 = a3 + 55;
        }
        else
        {
          v25 = 97;
          v26 = 65;
        }
        if (a3 <= 10)
          v27 = a3 + 48;
        else
          v27 = 58;
        if (result)
        {
          v28 = 0;
          do
          {
            v29 = *result;
            if (v29 < 0x30 || v29 >= v27)
            {
              if (v29 < 0x41 || v29 >= v26)
              {
                v12 = 0;
                v13 = 1;
                if (v29 < 0x61 || v29 >= v25)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v30 = -87;
              }
              else
              {
                v30 = -55;
              }
            }
            else
            {
              v30 = -48;
            }
            v31 = v28 * (unint64_t)a3;
            if ((v31 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v32 = v29 + v30;
            v28 = v31 + v32;
            if (__CFADD__((_DWORD)v31, v32))
              goto LABEL_72;
            ++result;
            --a2;
          }
          while (a2);
          v13 = 0;
          v12 = v28;
          return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
        }
        goto LABEL_71;
      }
      goto LABEL_72;
    }
    if (a2 >= 1)
    {
      v4 = a2 - 1;
      if (a2 != 1)
      {
        v5 = a3 + 87;
        if (a3 > 10)
        {
          v6 = a3 + 55;
        }
        else
        {
          v5 = 97;
          v6 = 65;
        }
        if (a3 <= 10)
          v7 = a3 + 48;
        else
          v7 = 58;
        if (result)
        {
          v8 = 0;
          v9 = result + 1;
          while (1)
          {
            v10 = *v9;
            if (v10 < 0x30 || v10 >= v7)
            {
              if (v10 < 0x41 || v10 >= v6)
              {
                v12 = 0;
                v13 = 1;
                if (v10 < 0x61 || v10 >= v5)
                  return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
                v11 = -87;
              }
              else
              {
                v11 = -55;
              }
            }
            else
            {
              v11 = -48;
            }
            v14 = v8 * (unint64_t)a3;
            if ((v14 & 0xFFFFFFFF00000000) != 0)
              goto LABEL_72;
            v15 = v10 + v11;
            v8 = v14 - v15;
            if (v14 < v15)
              goto LABEL_72;
            ++v9;
            if (!--v4)
              goto LABEL_48;
          }
        }
LABEL_71:
        v12 = 0;
        v13 = 0;
        return (unsigned __int8 *)(v12 | ((unint64_t)v13 << 32));
      }
      goto LABEL_72;
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23D626568()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t v4;

  v0 = sub_23D66C438();
  v4 = sub_23D6265E4(v0, v1, v2, v3);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_23D6265E4(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  if ((a4 & 0x1000000000000000) != 0)
  {
    v9 = sub_23D626728(a1, a2, a3, a4);
    if (v9)
    {
      v10 = v9;
      v11 = sub_23D626160(v9, 0);
      v12 = sub_23D626814((unint64_t)v14, (uint64_t)(v11 + 4), v10, a1, a2, a3, a4);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      if (v12 != v10)
      {
        __break(1u);
        goto LABEL_9;
      }
    }
    else
    {
      v11 = (_QWORD *)MEMORY[0x24BEE4AF8];
    }
    v13 = MEMORY[0x242635DA0](v11 + 4, v11[2]);
    swift_release();
    return v13;
  }
  else
  {
    if ((a4 & 0x2000000000000000) == 0)
    {
      if ((a3 & 0x1000000000000000) != 0)
LABEL_12:
        JUMPOUT(0x242635DA0);
LABEL_9:
      sub_23D66C690();
      goto LABEL_12;
    }
    v14[0] = a3;
    v14[1] = a4 & 0xFFFFFFFFFFFFFFLL;
    return MEMORY[0x242635DA0]((char *)v14 + (a1 >> 16), (a2 >> 16) - (a1 >> 16));
  }
}

unint64_t sub_23D626728(unint64_t result, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v7 = result;
  v8 = (a3 >> 59) & 1;
  if ((a4 & 0x1000000000000000) == 0)
    LOBYTE(v8) = 1;
  v9 = 4 << v8;
  if ((result & 0xC) == 4 << v8)
  {
    result = sub_23D62BCE0(result, a3, a4);
    v7 = result;
  }
  if ((a2 & 0xC) == v9)
  {
    result = sub_23D62BCE0(a2, a3, a4);
    a2 = result;
    if ((a4 & 0x1000000000000000) == 0)
      return (a2 >> 16) - (v7 >> 16);
  }
  else if ((a4 & 0x1000000000000000) == 0)
  {
    return (a2 >> 16) - (v7 >> 16);
  }
  v10 = HIBYTE(a4) & 0xF;
  if ((a4 & 0x2000000000000000) == 0)
    v10 = a3 & 0xFFFFFFFFFFFFLL;
  if (v10 < v7 >> 16)
  {
    __break(1u);
  }
  else if (v10 >= a2 >> 16)
  {
    return sub_23D66C408();
  }
  __break(1u);
  return result;
}

unint64_t sub_23D626814(unint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v26;
  unint64_t v27;
  _QWORD v28[2];

  v9 = (_QWORD *)result;
  if (!a2)
    goto LABEL_5;
  if (!a3)
  {
    v12 = a4;
    v11 = 0;
    goto LABEL_33;
  }
  if (a3 < 0)
    goto LABEL_36;
  v10 = a5 >> 14;
  v27 = a4 >> 14;
  if (a4 >> 14 == a5 >> 14)
  {
LABEL_5:
    v11 = 0;
    v12 = a4;
LABEL_33:
    *v9 = a4;
    v9[1] = a5;
    v9[2] = a6;
    v9[3] = a7;
    v9[4] = v12;
    return v11;
  }
  v11 = 0;
  v14 = (a6 >> 59) & 1;
  if ((a7 & 0x1000000000000000) == 0)
    LOBYTE(v14) = 1;
  v15 = 4 << v14;
  v21 = (a7 & 0xFFFFFFFFFFFFFFFLL) + 32;
  v22 = a7 & 0xFFFFFFFFFFFFFFLL;
  v16 = HIBYTE(a7) & 0xF;
  if ((a7 & 0x2000000000000000) == 0)
    v16 = a6 & 0xFFFFFFFFFFFFLL;
  v23 = v16;
  v26 = a3 - 1;
  v12 = a4;
  while (1)
  {
    v17 = v12 & 0xC;
    result = v12;
    if (v17 == v15)
      result = sub_23D62BCE0(v12, a6, a7);
    if (result >> 14 < v27 || result >> 14 >= v10)
      break;
    if ((a7 & 0x1000000000000000) != 0)
    {
      result = sub_23D66C414();
      v19 = result;
      if (v17 != v15)
        goto LABEL_23;
    }
    else
    {
      v18 = result >> 16;
      if ((a7 & 0x2000000000000000) != 0)
      {
        v28[0] = a6;
        v28[1] = v22;
        v19 = *((_BYTE *)v28 + v18);
        if (v17 != v15)
          goto LABEL_23;
      }
      else
      {
        result = v21;
        if ((a6 & 0x1000000000000000) == 0)
          result = sub_23D66C690();
        v19 = *(_BYTE *)(result + v18);
        if (v17 != v15)
        {
LABEL_23:
          if ((a7 & 0x1000000000000000) == 0)
            goto LABEL_24;
          goto LABEL_27;
        }
      }
    }
    result = sub_23D62BCE0(v12, a6, a7);
    v12 = result;
    if ((a7 & 0x1000000000000000) == 0)
    {
LABEL_24:
      v12 = (v12 & 0xFFFFFFFFFFFF0000) + 65540;
      goto LABEL_29;
    }
LABEL_27:
    if (v23 <= v12 >> 16)
      goto LABEL_35;
    v12 = sub_23D66C3F0();
LABEL_29:
    *(_BYTE *)(a2 + v11) = v19;
    if (v26 == v11)
    {
      v11 = a3;
      goto LABEL_33;
    }
    ++v11;
    if (v10 == v12 >> 14)
      goto LABEL_33;
  }
  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
  return result;
}

CFTypeID sub_23D626A24(const void *a1)
{
  CFTypeID v1;
  id v2;
  uint64_t v3;
  uint64_t v4;

  v1 = CFGetTypeID(a1);
  if (v1 == CFArrayGetTypeID())
  {
    type metadata accessor for CFArray(0);
    v2 = (id)swift_dynamicCastUnknownClassUnconditional();
    __swift_instantiateConcreteTypeFromMangledName(qword_256C7B7E0);
    sub_23D66C4B0();
    v1 = 0;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v4 = 395;
    *(_OWORD *)(v4 + 8) = xmmword_23D6737C0;
    *(_QWORD *)(v4 + 24) = 0x800000023D679CC0;
    *(_QWORD *)(v4 + 32) = 0xD00000000000005FLL;
    *(_QWORD *)(v4 + 40) = 0x800000023D679C60;
    swift_willThrow();

  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v3 = 395;
    *(_OWORD *)(v3 + 8) = xmmword_23D6737B0;
    *(_QWORD *)(v3 + 24) = 0x800000023D679CC0;
    *(_QWORD *)(v3 + 32) = 0xD00000000000005FLL;
    *(_QWORD *)(v3 + 40) = 0x800000023D679C60;
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_23D626BB8()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D626C30(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v12;

  v4 = a1;
  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v6 = *(_QWORD *)(v5 + 64);
  v7 = *(_DWORD *)(v5 + 80);
  v8 = v7 & 0xFC | 3;
  v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    v12 = *a2;
    *v4 = *a2;
    v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
  }
  return v4;
}

uint64_t sub_23D626CE0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))();
}

uint64_t sub_23D626CF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 16))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_23D626D4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 24))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_23D626DA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 32))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_23D626E04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;

  v5 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(void))(v5 + 40))();
  *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(_QWORD *)(v5 + 64) + 3 + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_23D626E60(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;
  uint64_t v8;

  if (!a2)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5)
      return (*(uint64_t (**)(void))(v4 + 48))();
    return 0;
  }
  if (((((*(_QWORD *)(v4 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0)
    v6 = 2;
  else
    v6 = a2 - v5 + 1;
  if (v6 >= 0x10000)
    v7 = 4;
  else
    v7 = 2;
  if (v6 < 0x100)
    v7 = 1;
  if (v6 >= 2)
    v8 = v7;
  else
    v8 = 0;
  return ((uint64_t (*)(void))((char *)&loc_23D626ED0 + 4 * byte_23D6737D0[v8]))();
}

void sub_23D626F28(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  int v11;
  unsigned int v12;

  v6 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    v11 = 0;
    if (a2 <= v7)
      goto LABEL_14;
  }
  else
  {
    v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC)
      v9 = v8 + 1;
    else
      v9 = 2;
    if (v9 >= 0x10000)
      v10 = 4;
    else
      v10 = 2;
    if (v9 < 0x100)
      v10 = 1;
    if (v9 >= 2)
      v11 = v10;
    else
      v11 = 0;
    if (a2 <= v7)
LABEL_14:
      __asm { BR              X11 }
  }
  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    v12 = ~v7 + a2;
    bzero(a1, ((*(_QWORD *)(v6 + 64) + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }
  __asm { BR              X10 }
}

void sub_23D627010()
{
  uint64_t v0;
  uint64_t v1;
  char v2;

  *(_BYTE *)(v0 + v1) = v2;
}

void sub_23D627018(uint64_t a1, int a2)
{
  uint64_t v2;
  uint64_t v3;

  *(_DWORD *)(v2 + v3) = 0;
  if (a2)
    JUMPOUT(0x23D627020);
}

void sub_23D62703C()
{
  uint64_t v0;
  uint64_t v1;
  __int16 v2;

  *(_WORD *)(v0 + v1) = v2;
}

void sub_23D627044()
{
  uint64_t v0;
  uint64_t v1;
  int v2;

  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_23D62704C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  *(_WORD *)(v4 + v5) = 0;
  if (!a2)
    JUMPOUT(0x23D627054);
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for KeychainStore.RetrievedVersionedGroupInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeychainStore.RetrievedVersionedGroupInfo);
}

uint64_t sub_23D62707C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for KeyStoreError(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy20_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for KeyStoreError(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for KeyStoreError(uint64_t a1, int a2)
{
  unint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *(_BYTE *)(a1 + 20))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *(_QWORD *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for KeyStoreError(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_DWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 20) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)(result + 8) = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 20) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for KeyStoreError()
{
  return &type metadata for KeyStoreError;
}

ValueMetadata *type metadata accessor for KeychainStore()
{
  return &type metadata for KeychainStore;
}

uint64_t sub_23D627200(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  unint64_t v18;
  char v19;
  uint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  CFStringRef v28;
  __CFString *v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46[2];
  uint64_t v47[2];
  uint64_t v48;

  LODWORD(v48) = a4;
  v5 = *a1;
  v6 = a1[1];
  v7 = *a2;
  v8 = a2[1];
  v37 = a3[1];
  v38 = *a3;
  v35 = a3[3];
  v36 = a3[2];
  v9 = a3[6];
  v33 = a3[5];
  v34 = a3[4];
  v10 = a3[7];
  swift_beginAccess();
  v11 = *(_QWORD *)(v4 + 16);
  if (!*(_QWORD *)(v11 + 16))
    goto LABEL_14;
  sub_23D5AFA60(v7, v8);
  swift_bridgeObjectRetain();
  v12 = sub_23D5DF32C(v7, v8);
  if ((v13 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v7, v8);
LABEL_14:
    v47[0] = v5;
    v47[1] = v6;
    v46[0] = v7;
    v46[1] = v8;
    *(_QWORD *)&v39 = v38;
    *((_QWORD *)&v39 + 1) = v37;
    v40 = v36;
    v41 = v35;
    v42 = v34;
    v43 = v33;
    v44 = v9;
    v45 = v10;
    return sub_23D627530(v47, v46, &v39, v48);
  }
  v14 = *(_QWORD *)(*(_QWORD *)(v11 + 56) + 8 * v12);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v7, v8);
  if (!*(_QWORD *)(v14 + 16))
  {
LABEL_13:
    swift_bridgeObjectRelease();
    goto LABEL_14;
  }
  sub_23D5AFA60(v5, v6);
  v15 = sub_23D5DF32C(v5, v6);
  if ((v16 & 1) == 0)
  {
    sub_23D5DDA20(v5, v6);
    goto LABEL_13;
  }
  v17 = *(_QWORD *)(*(_QWORD *)(v14 + 56) + 8 * v15);
  swift_bridgeObjectRetain();
  sub_23D5DDA20(v5, v6);
  if (!*(_QWORD *)(v17 + 16) || (v18 = sub_23D5DF568(v48), (v19 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  v20 = (uint64_t *)(*(_QWORD *)(v17 + 56) + (v18 << 6));
  v21 = v20[1];
  v48 = *v20;
  v23 = v20[2];
  v22 = v20[3];
  v25 = v20[4];
  v24 = v20[5];
  v26 = v20[6];
  v27 = v20[7];
  sub_23D5AFA60(v48, v21);
  sub_23D5AFA60(v23, v22);
  sub_23D5AFA60(v25, v24);
  sub_23D5AFA60(v26, v27);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v48, v21);
  sub_23D5DDA20(v23, v22);
  sub_23D5DDA20(v25, v24);
  sub_23D5DDA20(v26, v27);
  sub_23D66C630();
  swift_bridgeObjectRelease();
  *(_QWORD *)&v39 = 0xD000000000000014;
  *((_QWORD *)&v39 + 1) = 0x800000023D679D50;
  v28 = SecCopyErrorMessageString(-25299, 0);
  if (v28)
  {
    v29 = (__CFString *)v28;
    sub_23D66C39C();

  }
  else
  {
    LODWORD(v47[0]) = -25299;
    sub_23D66C840();
  }
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  v31 = *((_QWORD *)&v39 + 1);
  sub_23D62611C();
  swift_allocError();
  *(_QWORD *)v32 = v39;
  *(_QWORD *)(v32 + 8) = v31;
  *(_DWORD *)(v32 + 16) = -25299;
  return swift_willThrow();
}

uint64_t sub_23D627530(uint64_t *a1, uint64_t *a2, _OWORD *a3, int a4)
{
  uint64_t v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL8 v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  uint64_t v29;
  _BOOL8 v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t result;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  _OWORD v44[4];

  v6 = v4;
  LODWORD(v7) = a4;
  v8 = *a1;
  v9 = a1[1];
  v10 = *a2;
  v11 = a2[1];
  v12 = a3[1];
  v44[0] = *a3;
  v44[1] = v12;
  v13 = a3[3];
  v44[2] = a3[2];
  v44[3] = v13;
  v14 = v4 + 16;
  swift_beginAccess();
  sub_23D5AFA60(v10, v11);
  sub_23D5AFA60(v8, v9);
  sub_23D628114((uint64_t *)v44);
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v16 = *(_QWORD *)(v4 + 16);
  v42 = v16;
  *(_QWORD *)(v6 + 16) = 0x8000000000000000;
  v18 = sub_23D5DF32C(v10, v11);
  v19 = *(_QWORD *)(v16 + 16);
  v20 = (v17 & 1) == 0;
  v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
    __break(1u);
    goto LABEL_18;
  }
  v5 = v17;
  if (*(_QWORD *)(v16 + 24) >= v21)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      goto LABEL_19;
  }
  else
  {
    sub_23D66476C(v21, isUniquelyReferenced_nonNull_native);
    v22 = sub_23D5DF32C(v10, v11);
    if ((v5 & 1) != (v23 & 1))
    {
      sub_23D66C894();
      __break(1u);
      goto LABEL_21;
    }
    v18 = v22;
  }
  while (1)
  {
    v41 = v7;
    *(_QWORD *)v14 = v16;
    swift_bridgeObjectRelease();
    v24 = *(_QWORD *)v14;
    swift_bridgeObjectRetain();
    if ((v5 & 1) == 0)
    {
      v25 = sub_23D5B5208(MEMORY[0x24BEE4AF8]);
      sub_23D66684C(v18, v10, v11, v25, v24);
      sub_23D5AFA60(v10, v11);
    }
    v26 = *(_QWORD *)(v24 + 56);
    swift_bridgeObjectRelease();
    v7 = 8 * v18;
    v5 = swift_isUniquelyReferenced_nonNull_native();
    v27 = *(_QWORD *)(v26 + 8 * v18);
    v42 = v27;
    *(_QWORD *)(v26 + 8 * v18) = 0x8000000000000000;
    v14 = sub_23D5DF32C(v8, v9);
    v29 = *(_QWORD *)(v27 + 16);
    v30 = (v28 & 1) == 0;
    v31 = v29 + v30;
    if (!__OFADD__(v29, v30))
      break;
LABEL_18:
    __break(1u);
LABEL_19:
    sub_23D666AA8();
    v16 = v42;
  }
  v32 = v28;
  if (*(_QWORD *)(v27 + 24) >= v31)
  {
    if ((v5 & 1) == 0)
      sub_23D666AB4();
    goto LABEL_14;
  }
  sub_23D664778(v31, v5);
  v33 = sub_23D5DF32C(v8, v9);
  if ((v32 & 1) != (v34 & 1))
  {
LABEL_21:
    result = sub_23D66C894();
    __break(1u);
    return result;
  }
  v14 = v33;
LABEL_14:
  *(_QWORD *)(v26 + v7) = v27;
  swift_bridgeObjectRelease();
  v35 = *(_QWORD *)(v26 + v7);
  if ((v32 & 1) == 0)
  {
    v36 = sub_23D5E70D8(MEMORY[0x24BEE4AF8]);
    sub_23D66684C(v14, v8, v9, v36, v35);
    sub_23D5AFA60(v8, v9);
  }
  v37 = *(_QWORD *)(v35 + 56);
  v38 = 8 * v14;
  v39 = swift_isUniquelyReferenced_nonNull_native();
  v43 = *(_QWORD *)(v37 + v38);
  *(_QWORD *)(v37 + v38) = 0x8000000000000000;
  sub_23D5E09E8(v44, v41, v39);
  *(_QWORD *)(v37 + v38) = v43;
  swift_bridgeObjectRelease();
  swift_endAccess();
  sub_23D5DDA20(v8, v9);
  return sub_23D5DDA20(v10, v11);
}

uint64_t sub_23D627828@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t result;
  char v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  int v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _QWORD v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;

  v6 = *a1;
  v5 = a1[1];
  v8 = *a2;
  v7 = a2[1];
  v9 = (uint64_t *)(v3 + 16);
  result = swift_beginAccess();
  if (!*(_QWORD *)(*(_QWORD *)(v3 + 16) + 16))
    goto LABEL_16;
  sub_23D5AFA60(v8, v7);
  swift_bridgeObjectRetain();
  sub_23D5DF32C(v8, v7);
  if ((v11 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v29 = v8;
    v30 = v7;
LABEL_15:
    result = sub_23D5DDA20(v29, v30);
LABEL_16:
    *(_OWORD *)a3 = xmmword_23D66DF30;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_DWORD *)(a3 + 64) = 0;
    return result;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v8, v7);
  swift_bridgeObjectRelease();
  v12 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
  {
    sub_23D5AFA60(v6, v5);
    __break(1u);
    goto LABEL_18;
  }
  sub_23D5AFA60(v8, v7);
  sub_23D5AFA60(v6, v5);
  swift_bridgeObjectRetain();
  v13 = sub_23D5DF32C(v8, v7);
  if ((v14 & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v8, v7);
    __break(1u);
LABEL_19:
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v6, v5);
    __break(1u);
    goto LABEL_20;
  }
  v15 = *(_QWORD *)(*(_QWORD *)(v12 + 56) + 8 * v13);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v8, v7);
  if (!*(_QWORD *)(v15 + 16) || (sub_23D5DF32C(v6, v5), (v16 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    v29 = v6;
    v30 = v5;
    goto LABEL_15;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v6, v5);
  swift_bridgeObjectRelease();
  v17 = *v9;
  if (!*(_QWORD *)(*v9 + 16))
  {
LABEL_20:
    sub_23D5AFA60(v6, v5);
    __break(1u);
    goto LABEL_21;
  }
  sub_23D5AFA60(v8, v7);
  sub_23D5AFA60(v6, v5);
  swift_bridgeObjectRetain();
  v18 = sub_23D5DF32C(v8, v7);
  if ((v19 & 1) != 0)
  {
    v20 = *(_QWORD *)(*(_QWORD *)(v17 + 56) + 8 * v18);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    sub_23D5DDA20(v8, v7);
    if (*(_QWORD *)(v20 + 16))
    {
      v21 = sub_23D5DF32C(v6, v5);
      if ((v22 & 1) != 0)
      {
        v23 = *(_QWORD *)(*(_QWORD *)(v20 + 56) + 8 * v21);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v6, v5);
        sub_23D627B3C(v23, (int64_t)v31);
        result = swift_bridgeObjectRelease();
        v24 = v32;
        if ((unint64_t)v32 >> 60 != 15)
        {
          v25 = v31[0];
          v26 = v33;
          v27 = v34;
          v28 = v35;
          *(_QWORD *)a3 = v31[1];
          *(_OWORD *)(a3 + 8) = v24;
          *(_OWORD *)(a3 + 24) = v26;
          *(_OWORD *)(a3 + 40) = v27;
          *(_QWORD *)(a3 + 56) = v28;
          *(_DWORD *)(a3 + 64) = v25;
          return result;
        }
        goto LABEL_22;
      }
    }
    goto LABEL_19;
  }
LABEL_21:
  swift_bridgeObjectRelease();
  result = sub_23D5DDA20(v8, v7);
  __break(1u);
LABEL_22:
  __break(1u);
  return result;
}

double sub_23D627B3C@<D0>(uint64_t a1@<X0>, int64_t a2@<X8>)
{
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  int64_t v11;
  unsigned int v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unsigned int v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  double result;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v3 = a1 + 64;
  v4 = *(_BYTE *)(a1 + 32);
  v5 = 1 << v4;
  v6 = -1;
  if (1 << v4 < 64)
    v6 = ~(-1 << (1 << v4));
  v7 = v6 & *(_QWORD *)(a1 + 64);
  if (v7)
  {
    v34 = (_QWORD *)a2;
    v8 = 0;
    v9 = __clz(__rbit64(v7));
    v10 = (v7 - 1) & v7;
    v11 = (unint64_t)(v5 + 63) >> 6;
    while (2)
    {
      v12 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v9);
      v13 = (uint64_t *)(*(_QWORD *)(a1 + 56) + (v9 << 6));
      v15 = *v13;
      v14 = v13[1];
      v16 = v13[2];
      v17 = v13[3];
      v46 = v13[4];
      v47 = v13[5];
      v45 = v13[6];
      v48 = v13[7];
      swift_bridgeObjectRetain();
      v43 = v15;
      v41 = v14;
      sub_23D5AFA60(v15, v14);
      v44 = v16;
      v42 = v17;
      sub_23D5AFA60(v16, v17);
      sub_23D5AFA60(v46, v47);
      sub_23D5AFA60(v45, v48);
      v35 = v3;
      v36 = v11;
      if (v10)
      {
LABEL_6:
        v19 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        v20 = v19 | (v8 << 6);
        goto LABEL_7;
      }
      while (1)
      {
        a2 = v8 + 1;
        if (__OFADD__(v8, 1))
          break;
        if (a2 >= v11)
          goto LABEL_27;
        v22 = *(_QWORD *)(v3 + 8 * a2);
        ++v8;
        if (!v22)
        {
          v8 = a2 + 1;
          if (a2 + 1 >= v11)
            goto LABEL_27;
          v22 = *(_QWORD *)(v3 + 8 * v8);
          if (!v22)
          {
            v8 = a2 + 2;
            if (a2 + 2 >= v11)
              goto LABEL_27;
            v22 = *(_QWORD *)(v3 + 8 * v8);
            if (!v22)
            {
              v8 = a2 + 3;
              if (a2 + 3 >= v11)
                goto LABEL_27;
              v22 = *(_QWORD *)(v3 + 8 * v8);
              if (!v22)
              {
                a2 += 4;
                if (a2 >= v11)
                {
LABEL_27:
                  swift_release();
                  *v34 = v12;
                  v34[1] = v43;
                  v34[2] = v41;
                  v34[3] = v44;
                  v34[4] = v42;
                  v34[5] = v46;
                  v34[6] = v47;
                  v34[7] = v45;
                  v34[8] = v48;
                  return result;
                }
                v22 = *(_QWORD *)(v3 + 8 * a2);
                if (!v22)
                {
                  while (1)
                  {
                    v8 = a2 + 1;
                    if (__OFADD__(a2, 1))
                      break;
                    if (v8 >= v11)
                      goto LABEL_27;
                    v22 = *(_QWORD *)(v3 + 8 * v8);
                    ++a2;
                    if (v22)
                      goto LABEL_24;
                  }
                  __break(1u);
LABEL_44:
                  v31 = 0;
                  v32 = 6;
                  if (v11 > 6)
                    v32 = v11;
                  v33 = v32 - 6;
                  while (v33 != v31)
                  {
                    v30 = *(_QWORD *)(a1 + 112 + 8 * v31++);
                    if (v30)
                    {
                      v8 = v31 + 5;
                      goto LABEL_31;
                    }
                  }
                  goto LABEL_50;
                }
                v8 = a2;
              }
            }
          }
        }
LABEL_24:
        v18 = v22 - 1;
        v10 = (v22 - 1) & v22;
        v20 = __clz(__rbit64(v22)) + (v8 << 6);
LABEL_7:
        v21 = *(_DWORD *)(*(_QWORD *)(a1 + 48) + 4 * v20);
        if (v21 >= v12)
        {
          v23 = (uint64_t *)(*(_QWORD *)(a1 + 56) + (v20 << 6));
          v24 = v23[6];
          v26 = v23[4];
          v25 = v23[5];
          v27 = v23[2];
          v28 = v23[3];
          v39 = v23[1];
          v40 = v23[7];
          v37 = v28;
          v38 = *v23;
          sub_23D5AFA60(*v23, v39);
          sub_23D5AFA60(v27, v28);
          sub_23D5AFA60(v26, v25);
          sub_23D5AFA60(v24, v40);
          sub_23D5DDA20(v43, v41);
          sub_23D5DDA20(v44, v42);
          sub_23D5DDA20(v46, v47);
          sub_23D5DDA20(v45, v48);
          v12 = v21;
          v43 = v38;
          v44 = v27;
          v3 = v35;
          v41 = v39;
          v42 = v37;
          v46 = v26;
          v11 = v36;
          v47 = v25;
          v45 = v24;
          v48 = v40;
          if (v10)
            goto LABEL_6;
        }
        else if (v10)
        {
          goto LABEL_6;
        }
      }
      __break(1u);
LABEL_38:
      if (v18 >= 9)
      {
        v30 = *(_QWORD *)(a1 + 96);
        if (v30)
        {
          v8 = 4;
        }
        else
        {
          v30 = *(_QWORD *)(a1 + 104);
          if (!v30)
            goto LABEL_44;
          v8 = 5;
        }
LABEL_31:
        v10 = (v30 - 1) & v30;
        v9 = __clz(__rbit64(v30)) + (v8 << 6);
        continue;
      }
      break;
    }
  }
  else
  {
    v18 = v4 & 0x3F;
    if (v18 > 6)
    {
      v11 = (unint64_t)(v5 + 63) >> 6;
      v30 = *(_QWORD *)(a1 + 72);
      if (v30)
      {
        v34 = (_QWORD *)a2;
        v8 = 1;
        goto LABEL_31;
      }
      if (v18 >= 8)
      {
        v30 = *(_QWORD *)(a1 + 80);
        v34 = (_QWORD *)a2;
        if (v30)
        {
          v8 = 2;
        }
        else
        {
          v30 = *(_QWORD *)(a1 + 88);
          if (!v30)
            goto LABEL_38;
          v8 = 3;
        }
        goto LABEL_31;
      }
    }
  }
LABEL_50:
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0xF000000000000000;
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  return result;
}

uint64_t sub_23D627EF4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v14;

  v3 = *a1;
  v4 = a1[1];
  v6 = *a2;
  v5 = a2[1];
  v7 = (uint64_t *)(v2 + 16);
  result = swift_beginAccess();
  v9 = *(_QWORD *)(v2 + 16);
  if (*(_QWORD *)(v9 + 16))
  {
    sub_23D5AFA60(v6, v5);
    swift_bridgeObjectRetain();
    v10 = sub_23D5DF32C(v6, v5);
    if ((v11 & 1) != 0)
    {
      v12 = *(_QWORD *)(*(_QWORD *)(v9 + 56) + 8 * v10);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v6, v5);
      sub_23D5AFA60(v3, v4);
      sub_23D664428(v3, v4);
      sub_23D5DDA20(v3, v4);
      swift_bridgeObjectRelease();
      swift_beginAccess();
      sub_23D5AFA60(v6, v5);
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v14 = *v7;
      *v7 = 0x8000000000000000;
      sub_23D5E03B0(v12, v6, v5, isUniquelyReferenced_nonNull_native);
      *v7 = v14;
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v6, v5);
      return swift_endAccess();
    }
    else
    {
      swift_bridgeObjectRelease();
      return sub_23D5DDA20(v6, v5);
    }
  }
  return result;
}

uint64_t sub_23D628070()
{
  swift_bridgeObjectRelease();
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for UnitTestStorageInteraction()
{
  return objc_opt_self();
}

uint64_t sub_23D6280B4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  return sub_23D627828(a1, a2, a3);
}

uint64_t sub_23D6280D4(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  return sub_23D627200(a1, a2, a3, a4);
}

uint64_t sub_23D6280F4(uint64_t *a1, uint64_t *a2)
{
  return sub_23D627EF4(a1, a2);
}

uint64_t *sub_23D628114(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[2];
  v3 = a1[3];
  v4 = a1[4];
  v5 = a1[5];
  v6 = a1[6];
  v7 = a1[7];
  sub_23D5AFA60(*a1, a1[1]);
  sub_23D5AFA60(v2, v3);
  sub_23D5AFA60(v4, v5);
  sub_23D5AFA60(v6, v7);
  return a1;
}

uint64_t sub_23D628188(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v14[2];
  uint64_t v15;
  __int128 v16;
  _QWORD v17[7];

  v17[5] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v16 = a1;
  *((_QWORD *)&v16 + 1) = a2;
  swift_bridgeObjectRetain();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BB30);
  if (!swift_dynamicCast())
  {
    v15 = 0;
    memset(v14, 0, sizeof(v14));
    sub_23D5AEF8C((uint64_t)v14, &qword_256C7BB38);
    if ((a2 & 0x1000000000000000) != 0)
      goto LABEL_20;
    if ((a2 & 0x2000000000000000) != 0)
    {
      v17[0] = a1;
      v17[1] = a2 & 0xFFFFFFFFFFFFFFLL;
      v4 = (char *)v17 + (HIBYTE(a2) & 0xF);
      v5 = v17;
    }
    else
    {
      if ((a1 & 0x1000000000000000) != 0)
      {
        v2 = (a2 & 0xFFFFFFFFFFFFFFFLL) + 32;
        v3 = a1 & 0xFFFFFFFFFFFFLL;
      }
      else
      {
        v2 = sub_23D66C690();
      }
      if (v2)
        v4 = (_BYTE *)(v2 + v3);
      else
        v4 = 0;
      v5 = (_BYTE *)v2;
    }
    v6 = sub_23D62C8BC(v5, v4);
    v8 = v7;
    if (v7 >> 60 != 15)
    {
      swift_bridgeObjectRelease();
      *(_QWORD *)&v14[0] = v6;
      *((_QWORD *)&v14[0] + 1) = v8;
      return *(_QWORD *)&v14[0];
    }
    if ((a2 & 0x1000000000000000) != 0)
    {
LABEL_20:
      v9 = sub_23D66C3E4();
    }
    else if ((a2 & 0x2000000000000000) != 0)
    {
      v9 = HIBYTE(a2) & 0xF;
    }
    else
    {
      v9 = a1 & 0xFFFFFFFFFFFFLL;
    }
    *(_QWORD *)&v14[0] = sub_23D62C920(v9);
    *((_QWORD *)&v14[0] + 1) = v10;
    MEMORY[0x24BDAC7A8](*(_QWORD *)&v14[0]);
    sub_23D62BD58();
    __asm { BR              X12 }
  }
  sub_23D5AEF30(v14, (uint64_t)v17);
  __swift_project_boxed_opaque_existential_1(v17, v17[3]);
  sub_23D66BCC4();
  swift_bridgeObjectRelease();
  v14[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v17);
  return *(_QWORD *)&v14[0];
}

uint64_t sub_23D62868C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE v15[16];
  __int128 v16;
  __int128 v17[2];
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v2 = __swift_instantiateConcreteTypeFromMangledName(qword_256C79B20);
  v3 = MEMORY[0x24BDAC7A8](v2);
  v5 = &v15[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v3);
  sub_23D5AEF48(a1, (uint64_t)&v15[-v6], qword_256C79B20);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BB30);
  if (!swift_dynamicCast())
  {
    v18 = 0;
    memset(v17, 0, sizeof(v17));
    sub_23D5AEF8C((uint64_t)v17, &qword_256C7BB38);
    v17[0] = xmmword_23D66DF40;
    *(_QWORD *)((char *)&v16 + 7) = 0;
    *(_QWORD *)&v16 = 0;
    sub_23D5AEF48(a1, (uint64_t)v5, qword_256C79B20);
    v7 = sub_23D651E8C(&v19, &v16, 0);
    v8 = v19;
    if (v7)
    {
      if (v7 <= 0)
      {
        sub_23D66BD54();
        goto LABEL_6;
      }
    }
    else
    {
      v10 = *((_QWORD *)&v19 + 1);
      *(_QWORD *)((char *)&v19 + 7) = 0;
      *(_QWORD *)&v19 = 0;
      if (!v20 || (v11 = *(_QWORD *)(v8 + 16), v10 == v11))
      {
LABEL_6:
        swift_bridgeObjectRelease();
        sub_23D5AEF8C(a1, qword_256C79B20);
        return *(_QWORD *)&v17[0];
      }
      if ((v10 & 0x8000000000000000) != 0)
LABEL_26:
        __break(1u);
      if (v10 < *(_QWORD *)(v8 + 16))
      {
        LOBYTE(v12) = 0;
        v13 = v20 - 1;
        v14 = v11 - 1;
        do
        {
          *((_BYTE *)&v19 + v12) = *(_BYTE *)(v8 + v10 + 32);
          v12 = v12 + 1;
          if ((v12 & 0x100) != 0)
            goto LABEL_24;
          if (v12 == 14)
          {
            *(_QWORD *)&v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            sub_23D66BD60();
            if (!v13 || v14 == v10)
              goto LABEL_6;
            LOBYTE(v12) = 0;
          }
          else if (v14 == v10 || !v13)
          {
            *(_QWORD *)&v16 = v19;
            DWORD2(v16) = DWORD2(v19);
            WORD6(v16) = WORD6(v19);
            sub_23D66BD60();
            goto LABEL_6;
          }
          ++v10;
          --v13;
        }
        while (v10 < *(_QWORD *)(v8 + 16));
      }
      __break(1u);
LABEL_24:
      __break(1u);
    }
    __break(1u);
    goto LABEL_26;
  }
  sub_23D5AEF30(v17, (uint64_t)&v19);
  __swift_project_boxed_opaque_existential_1(&v19, v21);
  sub_23D66BCC4();
  sub_23D5AEF8C(a1, qword_256C79B20);
  v17[0] = v16;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v19);
  return *(_QWORD *)&v17[0];
}

void sub_23D62899C(uint64_t a1, uint64_t a2)
{
  char *v2;
  _QWORD v3[6];

  v3[5] = *MEMORY[0x24BDAC8D0];
  v3[3] = MEMORY[0x24BDCDDE8];
  v3[4] = MEMORY[0x24BDCDDC8];
  v3[0] = a1;
  v3[1] = a2;
  v2 = (char *)&loc_23D628A00
     + dword_23D628C34[__swift_project_boxed_opaque_existential_1(v3, MEMORY[0x24BDCDDE8])[1] >> 62];
  __asm { BR              X10 }
}

uint64_t sub_23D628A10()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  __int16 v7;
  char v8;
  char v9;
  char v10;
  char v11;
  uint64_t v12;
  uint64_t v13;

  v6 = v2;
  v7 = v3;
  v8 = BYTE2(v3);
  v9 = BYTE3(v3);
  v10 = BYTE4(v3);
  v11 = BYTE5(v3);
  sub_23D5AFA60(v1, v0);
  sub_23D62C048(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_23D5DDA20(v1, v0);
  v4 = v12;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v13);
  return v4;
}

uint64_t sub_23D628C44(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v8[5];

  v8[3] = MEMORY[0x24BEE0F88];
  v8[4] = MEMORY[0x24BDCFB90];
  v8[0] = a1;
  v8[1] = a2;
  v2 = __swift_project_boxed_opaque_existential_1(v8, MEMORY[0x24BEE0F88]);
  v3 = (_BYTE *)*v2;
  if (*v2 && (v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      v6 = sub_23D62C704(v3, v4);
    }
    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      v6 = sub_23D62C7C4((uint64_t)v3, (uint64_t)v4);
    }
    else
    {
      v6 = sub_23D62C83C((uint64_t)v3, (uint64_t)v4);
    }
  }
  else
  {
    v6 = 0;
  }
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v6;
}

uint64_t sub_23D628CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;

  v3 = type metadata accessor for GroupMembership.MemberProperties(0);
  v39 = *(_QWORD *)(v3 - 8);
  v4 = MEMORY[0x24BDAC7A8](v3);
  v38 = (uint64_t)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v4);
  v37 = (uint64_t)&v31 - v6;
  v7 = type metadata accessor for Group.MemberIDAndDiversifiedKey(0);
  v36 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = *(_QWORD *)(a1 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (!v10)
    return v11;
  v41 = MEMORY[0x24BEE4AF8];
  sub_23D5DE490(0, v10, 0);
  result = sub_23D5E5BC0(a1);
  v14 = result;
  v15 = 0;
  v16 = a1 + 64;
  v17 = *(_BYTE *)(a1 + 32);
  v31 = a1 + 88;
  v32 = v10;
  v34 = a1 + 64;
  v35 = v9;
  v33 = v13;
  while ((v14 & 0x8000000000000000) == 0 && v14 < 1 << v17)
  {
    v20 = (unint64_t)v14 >> 6;
    if ((*(_QWORD *)(v16 + 8 * ((unint64_t)v14 >> 6)) & (1 << v14)) == 0)
      goto LABEL_29;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v13)
      goto LABEL_30;
    v21 = v37;
    sub_23D5E7298(*(_QWORD *)(a1 + 56) + *(_QWORD *)(v39 + 72) * v14, v37, type metadata accessor for GroupMembership.MemberProperties);
    v22 = v21;
    v11 = v38;
    sub_23D5E7F64(v22, v38, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D62B19C(v11, &v40, v9);
    sub_23D5E6950(v11, type metadata accessor for GroupMembership.MemberProperties);
    if (v1)
    {
      swift_release();
      return v11;
    }
    v11 = v41;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23D5DE490(0, *(_QWORD *)(v11 + 16) + 1, 1);
      v11 = v41;
    }
    v24 = *(_QWORD *)(v11 + 16);
    v23 = *(_QWORD *)(v11 + 24);
    if (v24 >= v23 >> 1)
    {
      sub_23D5DE490(v23 > 1, v24 + 1, 1);
      v11 = v41;
    }
    *(_QWORD *)(v11 + 16) = v24 + 1;
    v25 = v11
        + ((*(unsigned __int8 *)(v36 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80))
        + *(_QWORD *)(v36 + 72) * v24;
    v9 = v35;
    result = sub_23D5E7F64((uint64_t)v35, v25, type metadata accessor for Group.MemberIDAndDiversifiedKey);
    v17 = *(_BYTE *)(a1 + 32);
    v18 = 1 << v17;
    if (v14 >= 1 << v17)
      goto LABEL_31;
    v16 = v34;
    v26 = *(_QWORD *)(v34 + 8 * v20);
    if ((v26 & (1 << v14)) == 0)
      goto LABEL_32;
    LODWORD(v13) = v33;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v33)
      goto LABEL_33;
    v27 = v26 & (-2 << (v14 & 0x3F));
    if (v27)
    {
      v18 = __clz(__rbit64(v27)) | v14 & 0xFFFFFFFFFFFFFFC0;
      v19 = v32;
    }
    else
    {
      v28 = v20 + 1;
      v29 = (v18 + 63) >> 6;
      v19 = v32;
      if (v20 + 1 < v29)
      {
        v30 = *(_QWORD *)(v34 + 8 * v28);
        if (!v30)
        {
          v28 = v20 + 2;
          if (v20 + 2 >= v29)
            goto LABEL_4;
          v30 = *(_QWORD *)(v34 + 8 * v28);
          if (!v30)
          {
            while (v29 - 3 != v20)
            {
              v30 = *(_QWORD *)(v31 + 8 * v20++);
              if (v30)
              {
                v28 = v20 + 2;
                goto LABEL_20;
              }
            }
            goto LABEL_4;
          }
        }
LABEL_20:
        v18 = __clz(__rbit64(v30)) + (v28 << 6);
      }
    }
LABEL_4:
    ++v15;
    v14 = v18;
    if (v15 == v19)
      return v11;
  }
  __break(1u);
LABEL_29:
  __break(1u);
LABEL_30:
  __break(1u);
LABEL_31:
  __break(1u);
LABEL_32:
  __break(1u);
LABEL_33:
  __break(1u);
  return result;
}

uint64_t static Group.GroupDBDecryptionKey.KeyType.== infix(_:_:)()
{
  return 1;
}

uint64_t Group.GroupDBDecryptionKey.p256DecryptionKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23D5AEF48(v1, a1, &qword_256C79170);
}

uint64_t Group.GroupDBDecryptionKey.hash(into:)(uint64_t a1)
{
  return sub_23D62A5D8(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6910]);
}

BOOL static Group.GroupDBDecryptionKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_23D62C254(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C7B7B0, &qword_256C79170, MEMORY[0x24BDC6910]);
}

uint64_t Group.GroupDBDecryptionKey.hashValue.getter()
{
  return sub_23D62A784((uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6910]);
}

uint64_t sub_23D6290F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D62A904(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6910]);
}

uint64_t sub_23D629114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D62AA78(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6910]);
}

BOOL sub_23D629130(uint64_t a1, uint64_t a2)
{
  return sub_23D62C254(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C7B7B0, &qword_256C79170, MEMORY[0x24BDC6910]);
}

uint64_t Group.generateVersionGroupDBDecryptionKeys(serviceName:version:keyType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  uint64_t result;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24[5];

  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = type metadata accessor for Group.GroupDBDecryptionKey(0);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v22 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (*(_BYTE *)(v4 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v16 = 421;
    v17 = xmmword_23D673920;
    goto LABEL_5;
  }
  swift_beginAccess();
  if (*(_DWORD *)(v4 + 64) < a3)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v16 = 422;
    v17 = xmmword_23D673940;
LABEL_5:
    *(_OWORD *)(v16 + 8) = v17;
    *(_QWORD *)(v16 + 24) = 0x800000023D679D70;
    *(_QWORD *)(v16 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v16 + 40) = 0x800000023D679DC0;
    return swift_willThrow();
  }
  LOBYTE(v22) = 1;
  result = sub_23D5D8E78(a3, (unsigned __int8 *)&v22, v24);
  if (!v5)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A50);
    if (swift_dynamicCast())
    {
      v19 = v22;
      v20 = v23;
      sub_23D5AFA60(v22, v23);
      swift_bridgeObjectRetain();
      sub_23D61B728(a1, a2, v19, v20);
      sub_23D5DDA20(v19, v20);
      swift_bridgeObjectRelease();
      v21 = sub_23D66C258();
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v21 - 8) + 56))(v12, 0, 1, v21);
      sub_23D5F16C4((uint64_t)v12, (uint64_t)v15, &qword_256C79170);
      sub_23D5E7F64((uint64_t)v15, a4, type metadata accessor for Group.GroupDBDecryptionKey);
      return sub_23D5DDA20(v19, v20);
    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v16 = 423;
    v17 = xmmword_23D673930;
    goto LABEL_5;
  }
  return result;
}

uint64_t Group.generateCurrentGroupDBDecryptionKeys(serviceName:keyType:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  swift_beginAccess();
  return Group.generateVersionGroupDBDecryptionKeys(serviceName:version:keyType:)(a1, a2, *(_DWORD *)(v3 + 64), a3);
}

uint64_t Group.generateGroupDBAllPreviousDecryptionKeys(serviceName:keyType:)(uint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t result;
  int v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;

  v20 = a1;
  v21 = a2;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B948);
  v18 = *(_QWORD *)(v4 - 8);
  v19 = v4;
  MEMORY[0x24BDAC7A8](v4);
  v6 = (unsigned int *)((char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0));
  v7 = type metadata accessor for Group.GroupDBDecryptionKey(0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  result = swift_beginAccess();
  v11 = *(_DWORD *)(v2 + 64);
  if (v11 == 1)
  {
    return MEMORY[0x24BEE4AF8];
  }
  else
  {
    if (v11)
    {
      v12 = MEMORY[0x24BEE4AF8];
      v13 = 1;
      while (v11 != v13)
      {
        Group.generateVersionGroupDBDecryptionKeys(serviceName:version:keyType:)(v20, v21, v13, (uint64_t)v9);
        if (v3)
        {
          swift_bridgeObjectRelease();
          return v12;
        }
        v14 = (uint64_t)v6 + *(int *)(v19 + 48);
        *v6 = v13;
        sub_23D5E7F64((uint64_t)v9, v14, type metadata accessor for Group.GroupDBDecryptionKey);
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          v12 = sub_23D62BAD4(0, *(_QWORD *)(v12 + 16) + 1, 1, v12, &qword_256C7BB60, &qword_256C7B948);
        v16 = *(_QWORD *)(v12 + 16);
        v15 = *(_QWORD *)(v12 + 24);
        if (v16 >= v15 >> 1)
          v12 = sub_23D62BAD4(v15 > 1, v16 + 1, 1, v12, &qword_256C7BB60, &qword_256C7B948);
        ++v13;
        *(_QWORD *)(v12 + 16) = v16 + 1;
        result = sub_23D5F16C4((uint64_t)v6, v12+ ((*(unsigned __int8 *)(v18 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v18 + 80))+ *(_QWORD *)(v18 + 72) * v16, &qword_256C7B948);
        if (v11 == v13)
          return v12;
      }
      __break(1u);
    }
    __break(1u);
  }
  return result;
}

uint64_t Group.stableIdentifierForMember(memberId:serviceName:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  uint8_t *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  os_log_type_t v40;
  NSObject *v41;
  os_log_type_t v42;
  uint8_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  os_log_type_t v53;
  NSObject *v54;
  os_log_type_t v55;
  uint8_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t inited;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  char *v85;
  char *v86;
  uint64_t v87;
  uint64_t *boxed_opaque_existential_1;
  uint64_t v89;
  void (*v90)(char *, uint64_t);
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  char *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;

  v104 = a3;
  v103 = a2;
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B950);
  v6 = *(_QWORD *)(v5 - 8);
  MEMORY[0x24BDAC7A8](v5);
  v99 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v100 = sub_23D66C054();
  v98 = *(_QWORD *)(v100 - 8);
  v8 = MEMORY[0x24BDAC7A8](v100);
  v102 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v8);
  v101 = (char *)&v92 - v10;
  v11 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v115 = sub_23D66C330();
  v107 = *(_QWORD *)(v115 - 8);
  MEMORY[0x24BDAC7A8](v115);
  v106 = (char *)&v92 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79178);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)&v92 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = type metadata accessor for GroupMembership.MemberProperties(0);
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v21 = OBJC_IVAR____TtC14GroupKitCrypto5Group_state;
  if (*(_BYTE *)(v3 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) != 6)
  {
    v28 = v3;
    if (qword_256C78B10 != -1)
      swift_once();
    v29 = sub_23D66BFDC();
    __swift_project_value_buffer(v29, (uint64_t)qword_256C88B78);
    v30 = sub_23D66C588();
    swift_retain_n();
    v31 = sub_23D66BFC4();
    if (os_log_type_enabled(v31, v30))
    {
      v32 = (uint8_t *)swift_slowAlloc();
      v33 = swift_slowAlloc();
      v112 = v33;
      *(_DWORD *)v32 = 136315138;
      v34 = sub_23D5B421C(*(_BYTE *)(v28 + v21));
      *(_QWORD *)&v109 = sub_23D5DDBDC(v34, v35, &v112);
      sub_23D66C5D0();
      swift_release_n();
      swift_bridgeObjectRelease();
      _os_log_impl(&dword_23D5A8000, v31, v30, "invalid group state, current state %s", v32, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v33, -1, -1);
      MEMORY[0x242636844](v32, -1, -1);

    }
    else
    {

      swift_release_n();
    }
    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v37 = 310;
    v38 = xmmword_23D673950;
    goto LABEL_20;
  }
  v94 = v6;
  v95 = v5;
  v97 = (uint64_t)&v92 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v23 = *a1;
  v22 = a1[1];
  swift_beginAccess();
  v96 = v3;
  v24 = *(_QWORD *)(v3 + 56);
  if (!*(_QWORD *)(v24 + 16))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, 1, 1, v18);
LABEL_14:
    sub_23D5AEF8C((uint64_t)v17, &qword_256C79178);
    if (qword_256C78B10 != -1)
      swift_once();
    v39 = sub_23D66BFDC();
    __swift_project_value_buffer(v39, (uint64_t)qword_256C88B78);
    v40 = sub_23D66C588();
    sub_23D5AFA60(v23, v22);
    sub_23D5AFA60(v23, v22);
    v41 = sub_23D66BFC4();
    v42 = v40;
    if (os_log_type_enabled(v41, v40))
    {
      v43 = (uint8_t *)swift_slowAlloc();
      v44 = swift_slowAlloc();
      v112 = v44;
      *(_DWORD *)v43 = 136315138;
      v115 = (uint64_t)(v43 + 4);
      sub_23D5AFA60(v23, v22);
      v45 = sub_23D66BD30();
      v47 = v46;
      sub_23D5DDA20(v23, v22);
      *(_QWORD *)&v109 = sub_23D5DDBDC(v45, v47, &v112);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v23, v22);
      sub_23D5DDA20(v23, v22);
      _os_log_impl(&dword_23D5A8000, v41, v42, "group member %s not found", v43, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v44, -1, -1);
      MEMORY[0x242636844](v43, -1, -1);
    }
    else
    {
      sub_23D5DDA20(v23, v22);
      sub_23D5DDA20(v23, v22);
    }

    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v37 = 420;
    v38 = xmmword_23D673970;
LABEL_20:
    *(_OWORD *)(v37 + 8) = v38;
    *(_QWORD *)(v37 + 24) = 0x800000023D679E20;
    *(_QWORD *)(v37 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v37 + 40) = 0x800000023D679DC0;
    swift_willThrow();
    return v36;
  }
  swift_bridgeObjectRetain();
  sub_23D5AFA60(v23, v22);
  v25 = sub_23D5DF32C(v23, v22);
  if ((v26 & 1) != 0)
  {
    sub_23D5E7298(*(_QWORD *)(v24 + 56) + *(_QWORD *)(v19 + 72) * v25, (uint64_t)v17, type metadata accessor for GroupMembership.MemberProperties);
    v27 = 0;
  }
  else
  {
    v27 = 1;
  }
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56))(v17, v27, 1, v18);
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v23, v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
    goto LABEL_14;
  v49 = v97;
  sub_23D5E7F64((uint64_t)v17, v97, type metadata accessor for GroupMembership.MemberProperties);
  sub_23D5AEF48(v49 + *(int *)(v18 + 28), (uint64_t)v13, &qword_256C799E0);
  v50 = v107;
  v51 = v115;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v107 + 48))(v13, 1, v115) == 1)
  {
    sub_23D5AEF8C((uint64_t)v13, &qword_256C799E0);
    if (qword_256C78B10 != -1)
      swift_once();
    v52 = sub_23D66BFDC();
    __swift_project_value_buffer(v52, (uint64_t)qword_256C88B78);
    v53 = sub_23D66C588();
    sub_23D5AFA60(v23, v22);
    sub_23D5AFA60(v23, v22);
    v54 = sub_23D66BFC4();
    v55 = v53;
    if (os_log_type_enabled(v54, v53))
    {
      v56 = (uint8_t *)swift_slowAlloc();
      v57 = swift_slowAlloc();
      v112 = v57;
      *(_DWORD *)v56 = 136315138;
      v115 = (uint64_t)(v56 + 4);
      sub_23D5AFA60(v23, v22);
      v58 = sub_23D66BD30();
      v60 = v59;
      sub_23D5DDA20(v23, v22);
      *(_QWORD *)&v109 = sub_23D5DDBDC(v58, v60, &v112);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v23, v22);
      sub_23D5DDA20(v23, v22);
      _os_log_impl(&dword_23D5A8000, v54, v55, "group member %s not found", v56, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v57, -1, -1);
      MEMORY[0x242636844](v56, -1, -1);
    }
    else
    {
      sub_23D5DDA20(v23, v22);
      sub_23D5DDA20(v23, v22);
    }

    v36 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v65 = 420;
    *(_OWORD *)(v65 + 8) = xmmword_23D673960;
    *(_QWORD *)(v65 + 24) = 0x800000023D679E20;
    *(_QWORD *)(v65 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v65 + 40) = 0x800000023D679DC0;
    swift_willThrow();
    goto LABEL_37;
  }
  v61 = v106;
  (*(void (**)(char *, char *, uint64_t))(v50 + 32))(v106, v13, v51);
  if (v104 >> 60 == 15)
    v62 = 0;
  else
    v62 = v103;
  if (v104 >> 60 == 15)
    v63 = 0xC000000000000000;
  else
    v63 = v104;
  LOBYTE(v109) = 1;
  sub_23D5E7284(v103, v104);
  v36 = v96;
  v64 = v105;
  sub_23D5D8E78(1u, (unsigned __int8 *)&v109, &v112);
  if (v64)
  {
    sub_23D5DDA20(v62, v63);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v61, v51);
LABEL_37:
    sub_23D5E6950(v97, type metadata accessor for GroupMembership.MemberProperties);
    return v36;
  }
  v66 = v113;
  v67 = v114;
  __swift_project_boxed_opaque_existential_1(&v112, v113);
  *(_QWORD *)&v109 = (*(uint64_t (**)(uint64_t, uint64_t))(v67 + 40))(v66, v67);
  *((_QWORD *)&v109 + 1) = v68;
  sub_23D66C03C();
  if (qword_256C78B78 != -1)
    swift_once();
  v109 = xmmword_256C88C50;
  sub_23D66C354();
  sub_23D5AE928((unint64_t *)&qword_256C79AC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
  sub_23D5E6898();
  sub_23D66C120();
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E0E0;
  if (qword_256C78B80 != -1)
    swift_once();
  v70 = qword_256C88C60;
  v71 = *(_QWORD *)algn_256C88C68;
  *(_QWORD *)(inited + 32) = qword_256C88C60;
  *(_QWORD *)(inited + 40) = v71;
  sub_23D5AFA60(v70, v71);
  *(_QWORD *)(inited + 48) = sub_23D66C1F8();
  *(_QWORD *)(inited + 56) = v72;
  *(_QWORD *)(inited + 64) = sub_23D62C9BC((uint64_t)&unk_250E288B0);
  *(_QWORD *)(inited + 72) = v73;
  *(_QWORD *)(inited + 80) = v62;
  *(_QWORD *)(inited + 88) = v63;
  v109 = xmmword_23D66DF40;
  v74 = v63;
  v93 = v63;
  v75 = *(_QWORD *)(inited + 32);
  v76 = *(_QWORD *)(inited + 40);
  sub_23D5AFA60(v62, v74);
  sub_23D5AFA60(v75, v76);
  sub_23D66BDB4();
  swift_bridgeObjectRetain();
  sub_23D5DDA20(v75, v76);
  v77 = *(_QWORD *)(inited + 48);
  v78 = *(_QWORD *)(inited + 56);
  sub_23D5AFA60(v77, v78);
  sub_23D66BDB4();
  sub_23D5DDA20(v77, v78);
  v79 = *(_QWORD *)(inited + 64);
  v80 = *(_QWORD *)(inited + 72);
  sub_23D5AFA60(v79, v80);
  sub_23D66BDB4();
  sub_23D5DDA20(v79, v80);
  v81 = *(_QWORD *)(inited + 80);
  v82 = *(_QWORD *)(inited + 88);
  sub_23D5AFA60(v81, v82);
  sub_23D66BDB4();
  sub_23D5DDA20(v81, v82);
  swift_bridgeObjectRelease_n();
  v84 = *((_QWORD *)&v109 + 1);
  v83 = v109;
  v85 = v99;
  v86 = v102;
  sub_23D66C138();
  sub_23D5DDA20(v83, v84);
  v87 = v95;
  v110 = v95;
  v111 = sub_23D5ED518(&qword_256C7B958, &qword_256C7B950, MEMORY[0x24BDC6538]);
  boxed_opaque_existential_1 = __swift_allocate_boxed_opaque_existential_1((uint64_t *)&v109);
  v89 = v94;
  (*(void (**)(uint64_t *, char *, uint64_t))(v94 + 16))(boxed_opaque_existential_1, v85, v87);
  __swift_project_boxed_opaque_existential_1(&v109, v110);
  sub_23D66BCC4();
  v36 = v108;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v109);
  sub_23D5DDA20(v62, v93);
  (*(void (**)(char *, uint64_t))(v89 + 8))(v85, v87);
  v90 = *(void (**)(char *, uint64_t))(v98 + 8);
  v91 = v100;
  v90(v86, v100);
  v90(v101, v91);
  (*(void (**)(char *, uint64_t))(v107 + 8))(v106, v115);
  sub_23D5E6950(v97, type metadata accessor for GroupMembership.MemberProperties);
  __swift_destroy_boxed_opaque_existential_1((uint64_t)&v112);
  return v36;
}

uint64_t static Group.GroupDBSigningKey.KeyType.== infix(_:_:)()
{
  return 1;
}

uint64_t Group.GroupDBSigningKey.KeyType.hash(into:)()
{
  return sub_23D66C8F4();
}

uint64_t Group.GroupDBSigningKey.p256SigningKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;

  return sub_23D5AEF48(v1, a1, &qword_256C79120);
}

uint64_t Group.GroupDBSigningKey.hash(into:)(uint64_t a1)
{
  return sub_23D62A5D8(a1, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6988]);
}

uint64_t sub_23D62A5D8(uint64_t a1, uint64_t (*a2)(_QWORD), uint64_t *a3, uint64_t (*a4)(uint64_t))
{
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v7 = a2(0);
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)&v19 - v9;
  v11 = __swift_instantiateConcreteTypeFromMangledName(a3);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)&v19 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23D66C8F4();
  sub_23D5AEF48(v4, (uint64_t)v13, a3);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v13, 1, v7) == 1)
    return sub_23D66C900();
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v13, v7);
  v15 = sub_23D66C900();
  v16 = a4(v15);
  v18 = v17;
  sub_23D66BDA8();
  sub_23D5DDA20(v16, v18);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

BOOL static Group.GroupDBSigningKey.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return sub_23D62C254(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C7B7A8, &qword_256C79120, MEMORY[0x24BDC6988]);
}

uint64_t Group.GroupDBSigningKey.hashValue.getter()
{
  return sub_23D62A784((uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6988]);
}

uint64_t sub_23D62A784(uint64_t (*a1)(_QWORD), uint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v18;

  v6 = a1(0);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v18 - v8;
  v10 = __swift_instantiateConcreteTypeFromMangledName(a2);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23D66C8E8();
  sub_23D66C8F4();
  sub_23D5AEF48(v3, (uint64_t)v12, a2);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1, v6) == 1)
  {
    sub_23D66C900();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    v13 = sub_23D66C900();
    v14 = a3(v13);
    v16 = v15;
    sub_23D66BDA8();
    sub_23D5DDA20(v14, v16);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }
  return sub_23D66C90C();
}

uint64_t sub_23D62A8E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D62A904(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6988]);
}

uint64_t sub_23D62A904(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;

  v9 = a4(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23D66C8F4();
  sub_23D5AEF48(v6, (uint64_t)v15, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
    return sub_23D66C900();
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
  v17 = sub_23D66C900();
  v18 = a6(v17);
  v20 = v19;
  sub_23D66BDA8();
  sub_23D5DDA20(v18, v20);
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_23D62AA5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_23D62AA78(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6988]);
}

uint64_t sub_23D62AA78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5, uint64_t (*a6)(uint64_t))
{
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v21;

  v9 = a4(0);
  v10 = *(_QWORD *)(v9 - 8);
  MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)&v21 - v11;
  v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v21 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23D66C8E8();
  sub_23D66C8F4();
  sub_23D5AEF48(v6, (uint64_t)v15, a5);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1, v9) == 1)
  {
    sub_23D66C900();
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    v16 = sub_23D66C900();
    v17 = a6(v16);
    v19 = v18;
    sub_23D66BDA8();
    sub_23D5DDA20(v17, v19);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }
  return sub_23D66C90C();
}

BOOL sub_23D62ABD8(uint64_t a1, uint64_t a2)
{
  return sub_23D62C254(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C7B7A8, &qword_256C79120, MEMORY[0x24BDC6988]);
}

uint64_t Group.retrieveDiversifiedSigningKey(keyType:)@<X0>(char *a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t inited;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v23;
  void (*v24)(char *, char *, uint64_t);
  char *v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;

  v3 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v3);
  v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v6 = sub_23D66C2AC();
  v7 = *(_QWORD *)(v6 - 8);
  v8 = MEMORY[0x24BDAC7A8](v6);
  MEMORY[0x24BDAC7A8](v8);
  if (*(_BYTE *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_state) == 6)
  {
    v34 = a1;
    v35 = v10;
    v36 = (char *)&v33 - v9;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
    if (qword_256C78D78 != -1)
      swift_once();
    v12 = qword_256C891A0;
    v13 = *(_QWORD *)algn_256C891A8;
    *(_QWORD *)(inited + 32) = qword_256C891A0;
    *(_QWORD *)(inited + 40) = v13;
    v14 = *(_QWORD *)(v1 + 16);
    v15 = *(_QWORD *)(v1 + 24);
    *(_QWORD *)(inited + 48) = v14;
    *(_QWORD *)(inited + 56) = v15;
    sub_23D5AFA60(v12, v13);
    sub_23D5AFA60(v14, v15);
    v16 = sub_23D62FE18(inited);
    v18 = v17;
    swift_setDeallocating();
    swift_arrayDestroy();
    v19 = v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyingMaterial;
    swift_beginAccess();
    v20 = type metadata accessor for UserKeyingInfo(0);
    sub_23D5AEF48(v19 + *(int *)(v20 + 44), (uint64_t)v5, &qword_256C79120);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1, v6) == 1)
    {
      sub_23D5AEF8C((uint64_t)v5, &qword_256C79120);
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v21 = 425;
      *(_OWORD *)(v21 + 8) = xmmword_23D6739A0;
      *(_QWORD *)(v21 + 24) = 0x800000023D679E60;
      *(_QWORD *)(v21 + 32) = 0xD00000000000005BLL;
      *(_QWORD *)(v21 + 40) = 0x800000023D679DC0;
      swift_willThrow();
      return sub_23D5DDA20(v16, v18);
    }
    else
    {
      v33 = v18;
      v24 = *(void (**)(char *, char *, uint64_t))(v7 + 32);
      v25 = v36;
      v24(v36, v5, v6);
      v26 = (uint64_t *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset);
      v27 = *(_QWORD *)(v1 + OBJC_IVAR____TtC14GroupKitCrypto5Group_memberKeyOffset + 8);
      if (v27 >> 60 == 15)
      {
        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v28 = 426;
        *(_OWORD *)(v28 + 8) = xmmword_23D673990;
        *(_QWORD *)(v28 + 24) = 0x800000023D679E60;
        *(_QWORD *)(v28 + 32) = 0xD00000000000005BLL;
        *(_QWORD *)(v28 + 40) = 0x800000023D679DC0;
        swift_willThrow();
        sub_23D5DDA20(v16, v33);
        return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v25, v6);
      }
      else
      {
        v29 = v25;
        v30 = *v26;
        sub_23D5AFA60(*v26, v27);
        sub_23D5AFA60(v30, v27);
        v31 = v33;
        sub_23D66C294();
        sub_23D5DDA20(v16, v31);
        sub_23D5E725C(v30, v27);
        sub_23D5E725C(v30, v27);
        (*(void (**)(char *, uint64_t))(v7 + 8))(v29, v6);
        v32 = v34;
        v24(v34, v35, v6);
        return (*(uint64_t (**)(char *, _QWORD, uint64_t, uint64_t))(v7 + 56))(v32, 0, 1, v6);
      }
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v23 = 424;
    *(_OWORD *)(v23 + 8) = xmmword_23D673980;
    *(_QWORD *)(v23 + 24) = 0x800000023D679E60;
    *(_QWORD *)(v23 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v23 + 40) = 0x800000023D679DC0;
    return swift_willThrow();
  }
}

uint64_t Group.MemberIDAndDiversifiedKey.userID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t Group.MemberIDAndDiversifiedKey.diversifiedPublicKey.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;

  v3 = v1 + *(int *)(type metadata accessor for Group.MemberIDAndDiversifiedKey(0) + 20);
  v4 = sub_23D66C330();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a1, v3, v4);
}

uint64_t Group.retrieveDiversifiedVerificationKeys()()
{
  uint64_t v0;
  uint64_t v1;

  swift_beginAccess();
  v0 = swift_bridgeObjectRetain();
  v1 = sub_23D628CFC(v0);
  swift_bridgeObjectRelease();
  return v1;
}

uint64_t sub_23D62B19C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t result;
  void (*v21)(char *, char *, uint64_t);
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char *v32;

  v31 = a2;
  v28 = a3;
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79990);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = type metadata accessor for UserKeyingInfo(0);
  v29 = *(_QWORD *)(v7 - 8);
  v30 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v9 = (uint64_t *)((char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v10 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  MEMORY[0x24BDAC7A8](v10);
  v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = sub_23D66C330();
  v14 = *(_QWORD *)(v13 - 8);
  MEMORY[0x24BDAC7A8](v13);
  v32 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = type metadata accessor for GroupMembership.MemberProperties(0);
  v17 = a1;
  sub_23D5AEF48(a1 + *(int *)(v16 + 28), (uint64_t)v12, &qword_256C799E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1, v13) == 1)
  {
    sub_23D5AEF8C((uint64_t)v12, &qword_256C799E0);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    v18 = swift_allocError();
    *(_WORD *)v19 = 427;
    *(_OWORD *)(v19 + 8) = xmmword_23D6739C0;
    *(_QWORD *)(v19 + 24) = 0x800000023D679F30;
    *(_QWORD *)(v19 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v19 + 40) = 0x800000023D679DC0;
    result = swift_willThrow();
LABEL_5:
    *v31 = v18;
    return result;
  }
  v21 = *(void (**)(char *, char *, uint64_t))(v14 + 32);
  v21(v32, v12, v13);
  sub_23D5AEF48(v17 + *(int *)(v16 + 24), (uint64_t)v6, &qword_256C79990);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v6, 1, v30) == 1)
  {
    sub_23D5AEF8C((uint64_t)v6, &qword_256C79990);
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    v18 = swift_allocError();
    *(_WORD *)v22 = 428;
    *(_OWORD *)(v22 + 8) = xmmword_23D6739B0;
    *(_QWORD *)(v22 + 24) = 0x800000023D679F30;
    *(_QWORD *)(v22 + 32) = 0xD00000000000005BLL;
    *(_QWORD *)(v22 + 40) = 0x800000023D679DC0;
    swift_willThrow();
    result = (*(uint64_t (**)(char *, uint64_t))(v14 + 8))(v32, v13);
    goto LABEL_5;
  }
  sub_23D5E7F64((uint64_t)v6, (uint64_t)v9, type metadata accessor for UserKeyingInfo);
  v23 = *v9;
  v24 = v9[1];
  sub_23D5AFA60(*v9, v24);
  sub_23D5E6950((uint64_t)v9, type metadata accessor for UserKeyingInfo);
  v25 = type metadata accessor for Group.MemberIDAndDiversifiedKey(0);
  v26 = v28;
  result = ((uint64_t (*)(char *, char *, uint64_t))v21)((char *)v28 + *(int *)(v25 + 20), v32, v13);
  *v26 = v23;
  v26[1] = v24;
  return result;
}

_QWORD *sub_23D62B518(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79938);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 40);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[5 * v8 + 4])
          memmove(v12, a4 + 4, 40 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23D62D8DC(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

_QWORD *sub_23D62B638(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  int64_t v11;
  uint64_t v12;
  _QWORD *v13;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v12 = v11 - 32;
      if (v11 < 32)
        v12 = v11 - 17;
      v10[2] = v8;
      v10[3] = 2 * (v12 >> 4);
      v13 = v10 + 4;
      if ((v5 & 1) != 0)
        goto LABEL_15;
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v13 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
      {
LABEL_15:
        if (v10 != a4 || v13 >= &a4[2 * v8 + 4])
          memmove(v13, a4 + 4, 16 * v8);
        a4[2] = 0;
        goto LABEL_24;
      }
    }
    sub_23D62D9E8(0, v8, (unint64_t)v13, (uint64_t)a4);
LABEL_24:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23D62B744(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23D62B76C(a1, a2, a3, a4, &qword_256C7BB68, (uint64_t (*)(_QWORD))MEMORY[0x24BDC63E0]);
}

uint64_t sub_23D62B758(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23D62B76C(a1, a2, a3, a4, &qword_256C79A60, type metadata accessor for UserKeyingInfo);
}

uint64_t sub_23D62B76C(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t (*a6)(_QWORD))
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(a6(0) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_23D66C714();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(a6(0) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23D62DAD8(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_23D62B978(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23D62BAD4(a1, a2, a3, a4, &qword_256C79AE8, &qword_256C79AD8);
}

uint64_t sub_23D62B98C(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23D62B76C(a1, a2, a3, a4, &qword_256C7BB40, type metadata accessor for UserAndAllInfo);
}

uint64_t sub_23D62B9A0(char a1, int64_t a2, char a3, unint64_t a4)
{
  return sub_23D62B76C(a1, a2, a3, a4, &qword_256C7BB48, type metadata accessor for GKCrypto_GroupAETextToSign.User);
}

_QWORD *sub_23D62B9B4(_QWORD *result, int64_t a2, char a3, _QWORD *a4)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  size_t v11;
  _QWORD *v12;

  v5 = (char)result;
  if ((a3 & 1) == 0)
  {
    v7 = a2;
    goto LABEL_8;
  }
  v6 = a4[3];
  v7 = v6 >> 1;
  if ((uint64_t)(v6 >> 1) >= a2)
    goto LABEL_8;
  if (v7 + 0x4000000000000000 >= 0)
  {
    v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
      v7 = a2;
LABEL_8:
    v8 = a4[2];
    if (v7 <= v8)
      v9 = a4[2];
    else
      v9 = v7;
    if (v9)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A70);
      v10 = (_QWORD *)swift_allocObject();
      v11 = _swift_stdlib_malloc_size(v10);
      v10[2] = v8;
      v10[3] = 2 * ((uint64_t)(v11 - 32) / 24);
      v12 = v10 + 4;
      if ((v5 & 1) != 0)
      {
LABEL_13:
        if (v10 != a4 || v12 >= &a4[3 * v8 + 4])
          memmove(v12, a4 + 4, 24 * v8);
        a4[2] = 0;
        goto LABEL_22;
      }
    }
    else
    {
      v10 = (_QWORD *)MEMORY[0x24BEE4AF8];
      v12 = (_QWORD *)(MEMORY[0x24BEE4AF8] + 32);
      if ((result & 1) != 0)
        goto LABEL_13;
    }
    sub_23D62D7D0(0, v8, (unint64_t)v12, (uint64_t)a4);
LABEL_22:
    swift_bridgeObjectRelease();
    return v10;
  }
  __break(1u);
  return result;
}

uint64_t sub_23D62BAD4(char a1, int64_t a2, char a3, unint64_t a4, uint64_t *a5, uint64_t *a6)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  size_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t result;

  if ((a3 & 1) != 0)
  {
    v9 = *(_QWORD *)(a4 + 24);
    v10 = v9 >> 1;
    if ((uint64_t)(v9 >> 1) < a2)
    {
      if (v10 + 0x4000000000000000 < 0)
      {
        __break(1u);
        goto LABEL_29;
      }
      v10 = v9 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v9 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v10 = a2;
    }
  }
  else
  {
    v10 = a2;
  }
  v11 = *(_QWORD *)(a4 + 16);
  if (v10 <= v11)
    v12 = *(_QWORD *)(a4 + 16);
  else
    v12 = v10;
  if (!v12)
  {
    v16 = (_QWORD *)MEMORY[0x24BEE4AF8];
    goto LABEL_19;
  }
  __swift_instantiateConcreteTypeFromMangledName(a5);
  v13 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v14 = *(_QWORD *)(v13 + 72);
  v15 = (*(unsigned __int8 *)(v13 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  v16 = (_QWORD *)swift_allocObject();
  v17 = _swift_stdlib_malloc_size(v16);
  if (!v14 || (v17 - v15 == 0x8000000000000000 ? (v18 = v14 == -1) : (v18 = 0), v18))
  {
LABEL_29:
    result = sub_23D66C714();
    __break(1u);
    return result;
  }
  v16[2] = v11;
  v16[3] = 2 * ((uint64_t)(v17 - v15) / v14);
LABEL_19:
  v19 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a6) - 8);
  v20 = (*(unsigned __int8 *)(v19 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80);
  v21 = (unint64_t)v16 + v20;
  if ((a1 & 1) != 0)
  {
    if ((unint64_t)v16 < a4 || v21 >= a4 + v20 + *(_QWORD *)(v19 + 72) * v11)
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v16 != (_QWORD *)a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    *(_QWORD *)(a4 + 16) = 0;
  }
  else
  {
    sub_23D62DBF0(0, v11, v21, a4, a6);
  }
  swift_bridgeObjectRelease();
  return (uint64_t)v16;
}

uint64_t sub_23D62BCE0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v3 = a1;
  v4 = (unsigned __int16)a1 >> 14;
  if ((a3 & 0x1000000000000000) == 0 || (a2 & 0x800000000000000) != 0)
  {
    v10 = sub_23D66C420();
    v11 = v10 + (v4 << 16);
    v12 = v10 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v13 = v11 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v13 = v12;
    return v13 | 4;
  }
  else
  {
    v5 = MEMORY[0x242635DDC](15, a1 >> 16);
    v6 = v5 + (v4 << 16);
    v7 = v5 & 0xFFFFFFFFFFFFFFFCLL | v3 & 3;
    v8 = v6 & 0xFFFFFFFFFFFF0000;
    if (!v4)
      v8 = v7;
    return v8 | 8;
  }
}

void sub_23D62BD58()
{
  __asm { BR              X11 }
}

_QWORD *sub_23D62BDB8@<X0>(uint64_t a1@<X8>)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *(*v3)(_QWORD **__return_ptr, uint64_t *, char *);
  uint64_t v4;
  _QWORD *result;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;

  v8 = v4;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  v10 = BYTE4(a1);
  v11 = BYTE5(a1);
  v12 = BYTE6(a1);
  result = v3(&v7, &v8, (char *)&v8 + BYTE6(a1));
  if (!v2)
    result = v7;
  v6 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *v1 = v8;
  v1[1] = v6;
  return result;
}

_BYTE *sub_23D62C048@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (!result)
    goto LABEL_4;
  v4 = a2 - result;
  if (a2 == result)
  {
    result = 0;
LABEL_4:
    v5 = 0xC000000000000000;
    goto LABEL_5;
  }
  if (v4 <= 14)
  {
    result = (_BYTE *)sub_23D62C704(result, a2);
    v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }
  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    result = (_BYTE *)sub_23D62C7C4((uint64_t)result, (uint64_t)a2);
    v5 = v8 | 0x8000000000000000;
  }
  else
  {
    result = (_BYTE *)sub_23D62C83C((uint64_t)result, (uint64_t)a2);
    v5 = v6 | 0x4000000000000000;
  }
LABEL_5:
  *a3 = result;
  a3[1] = v5;
  return result;
}

_QWORD *sub_23D62C0BC(_QWORD *(*a1)(uint64_t *__return_ptr, uint64_t, uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD *result;
  uint64_t v6;

  if (a3)
  {
    result = a1(&v6, a3, a4 - a3);
    if (v4)
      return result;
    return (_QWORD *)v6;
  }
  result = a1(&v6, 0, 0);
  if (!v4)
    return (_QWORD *)v6;
  return result;
}

char *sub_23D62C120(uint64_t a1, uint64_t a2, _QWORD *(*a3)(uint64_t *__return_ptr, char *, char *))
{
  uint64_t v3;
  char *result;
  char *v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  result = (char *)sub_23D66BC88();
  if (!result)
    goto LABEL_12;
  v8 = result;
  result = (char *)sub_23D66BCAC();
  v9 = a1 - (_QWORD)result;
  if (__OFSUB__(a1, result))
  {
    __break(1u);
    goto LABEL_11;
  }
  v10 = __OFSUB__(a2, a1);
  v11 = a2 - a1;
  if (v10)
  {
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
    return result;
  }
  v12 = sub_23D66BCA0();
  if (v12 >= v11)
    v13 = v11;
  else
    v13 = v12;
  result = (char *)a3(&v14, &v8[v9], &v8[v9 + v13]);
  if (!v3)
    return (char *)v14;
  return result;
}

uint64_t sub_23D62C1CC@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  char v3;
  uint64_t v4;

  if (result)
  {
    swift_bridgeObjectRetain();
    result = sub_23D66C63C();
    if ((v3 & 1) == 0)
    {
      v4 = result;
      result = swift_bridgeObjectRelease();
      *a2 = 0;
      a2[1] = 0xE000000000000000;
      a2[2] = 15;
      a2[3] = v4;
      return result;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

BOOL sub_23D62C254(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD), uint64_t *a4, uint64_t *a5, uint64_t (*a6)(void))
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  unsigned int (*v26)(uint64_t, uint64_t, uint64_t);
  uint64_t (*v27)(void);
  char *v28;
  uint64_t v29;
  uint64_t (*v30)(void);
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  int v37;
  void (*v38)(char *, uint64_t);
  uint64_t v40;
  uint64_t v41;
  char *v42;
  uint64_t (*v43)(void);
  char *v44;
  uint64_t *v45;

  v43 = a6;
  v10 = a3(0);
  v11 = *(_QWORD *)(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v44 = (char *)&v40 - v12;
  v45 = a4;
  v13 = __swift_instantiateConcreteTypeFromMangledName(a4);
  MEMORY[0x24BDAC7A8](v13);
  v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = __swift_instantiateConcreteTypeFromMangledName(a5);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = (char *)&v40 - v21;
  MEMORY[0x24BDAC7A8](v20);
  v24 = (char *)&v40 - v23;
  sub_23D5AEF48(a1, (uint64_t)&v40 - v23, a5);
  sub_23D5AEF48(a2, (uint64_t)v22, a5);
  v25 = (uint64_t)&v15[*(int *)(v13 + 48)];
  sub_23D5AEF48((uint64_t)v24, (uint64_t)v15, a5);
  sub_23D5AEF48((uint64_t)v22, v25, a5);
  v26 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (v26((uint64_t)v15, 1, v10) == 1)
  {
    sub_23D5AEF8C((uint64_t)v22, a5);
    sub_23D5AEF8C((uint64_t)v24, a5);
    if (v26(v25, 1, v10) == 1)
    {
      sub_23D5AEF8C((uint64_t)v15, a5);
      return 1;
    }
    goto LABEL_6;
  }
  sub_23D5AEF48((uint64_t)v15, (uint64_t)v19, a5);
  if (v26(v25, 1, v10) == 1)
  {
    sub_23D5AEF8C((uint64_t)v22, a5);
    sub_23D5AEF8C((uint64_t)v24, a5);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v19, v10);
LABEL_6:
    sub_23D5AEF8C((uint64_t)v15, v45);
    return 0;
  }
  v27 = *(uint64_t (**)(void))(v11 + 32);
  v41 = v11;
  v28 = v44;
  v29 = v27();
  v42 = v19;
  v30 = v43;
  v31 = ((uint64_t (*)(uint64_t))v43)(v29);
  v33 = v32;
  v34 = v30();
  v36 = v35;
  sub_23D5E6578(v31, v33);
  LODWORD(v45) = v37;
  sub_23D5DDA20(v34, v36);
  sub_23D5DDA20(v31, v33);
  v38 = *(void (**)(char *, uint64_t))(v41 + 8);
  v38(v28, v10);
  sub_23D5AEF8C((uint64_t)v22, a5);
  sub_23D5AEF8C((uint64_t)v24, a5);
  v38(v42, v10);
  sub_23D5AEF8C((uint64_t)v15, a5);
  return (v45 & 1) != 0;
}

uint64_t type metadata accessor for Group.GroupDBDecryptionKey(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7B9D8);
}

uint64_t _s14GroupKitCrypto0A0C25MemberIDAndDiversifiedKeyV2eeoiySbAE_AEtFZ_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char v14;
  char v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  char v23;
  uint64_t v25;

  v4 = type metadata accessor for Group.MemberIDAndDiversifiedKey(0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v9 = (char *)&v25 - v8;
  v10 = *a1;
  v11 = a1[1];
  v12 = *a2;
  v13 = a2[1];
  sub_23D5AFA60(*a1, v11);
  sub_23D5AFA60(v12, v13);
  sub_23D5E6578(v10, v11);
  v15 = v14;
  sub_23D5DDA20(v12, v13);
  sub_23D5DDA20(v10, v11);
  sub_23D5E7298((uint64_t)a1, (uint64_t)v9, type metadata accessor for Group.MemberIDAndDiversifiedKey);
  sub_23D5E7298((uint64_t)a2, (uint64_t)v7, type metadata accessor for Group.MemberIDAndDiversifiedKey);
  if ((v15 & 1) != 0)
  {
    v16 = sub_23D66C1D4();
    v18 = v17;
    v19 = sub_23D66C1D4();
    v21 = v20;
    sub_23D5E6578(v16, v18);
    v23 = v22;
    sub_23D5DDA20(v19, v21);
    sub_23D5DDA20(v16, v18);
  }
  else
  {
    v23 = 0;
  }
  sub_23D5E6950((uint64_t)v7, type metadata accessor for Group.MemberIDAndDiversifiedKey);
  sub_23D5E6950((uint64_t)v9, type metadata accessor for Group.MemberIDAndDiversifiedKey);
  return v23 & 1;
}

uint64_t sub_23D62C704(_BYTE *__src, _BYTE *a2)
{
  unint64_t v2;
  _BYTE __dst[14];
  char v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  if (__src)
    v2 = a2 - __src;
  else
    v2 = 0;
  if ((v2 & 0x8000000000000000) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }
  if (v2 > 0xFF)
    goto LABEL_11;
  memset(__dst, 0, sizeof(__dst));
  v5 = v2;
  if (__src && a2 != __src)
    memcpy(__dst, __src, a2 - __src);
  return *(_QWORD *)__dst;
}

uint64_t sub_23D62C7C4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23D66BCB8();
  swift_allocObject();
  result = sub_23D66BC7C();
  if (v2 < 0)
  {
    __break(1u);
  }
  else
  {
    sub_23D66BD3C();
    result = swift_allocObject();
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = v2;
  }
  return result;
}

uint64_t sub_23D62C83C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t result;

  if (a1)
    v2 = a2 - a1;
  else
    v2 = 0;
  sub_23D66BCB8();
  swift_allocObject();
  result = sub_23D66BC7C();
  if (v2 < (uint64_t)0xFFFFFFFF80000000)
  {
    __break(1u);
    goto LABEL_9;
  }
  if (v2 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  if ((v2 & 0x80000000) == 0)
    return v2 << 32;
LABEL_10:
  __break(1u);
  return result;
}

_BYTE *sub_23D62C8BC(_BYTE *result, _BYTE *a2)
{
  uint64_t v2;

  if (result)
  {
    v2 = a2 - result;
    if (a2 == result)
    {
      return 0;
    }
    else if (v2 <= 14)
    {
      return (_BYTE *)sub_23D62C704(result, a2);
    }
    else if ((unint64_t)v2 >= 0x7FFFFFFF)
    {
      return (_BYTE *)sub_23D62C7C4((uint64_t)result, (uint64_t)a2);
    }
    else
    {
      return (_BYTE *)sub_23D62C83C((uint64_t)result, (uint64_t)a2);
    }
  }
  return result;
}

uint64_t sub_23D62C920(uint64_t result)
{
  unint64_t v1;

  if (result)
  {
    v1 = result;
    if (result <= 14)
    {
      if (result < 0)
        __break(1u);
      else
        return 0;
    }
    else
    {
      sub_23D66BCB8();
      swift_allocObject();
      sub_23D66BC94();
      if (v1 >= 0x7FFFFFFF)
      {
        sub_23D66BD3C();
        result = swift_allocObject();
        *(_QWORD *)(result + 16) = 0;
        *(_QWORD *)(result + 24) = v1;
      }
      else
      {
        return v1 << 32;
      }
    }
  }
  return result;
}

uint64_t sub_23D62C9BC(uint64_t a1)
{
  _QWORD *v2;
  _BYTE *v3;
  _BYTE *v4;
  uint64_t v5;
  uint64_t v7;
  _QWORD v8[3];
  uint64_t v9;
  uint64_t v10;

  v9 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BB50);
  v10 = sub_23D5ED518(&qword_256C7BB58, &qword_256C7BB50, MEMORY[0x24BDCFBE0]);
  v8[0] = a1;
  v2 = __swift_project_boxed_opaque_existential_1(v8, v9);
  v3 = (_BYTE *)(*v2 + 32);
  v4 = &v3[*(_QWORD *)(*v2 + 16)];
  swift_bridgeObjectRetain();
  sub_23D62C048(v3, v4, &v7);
  v5 = v7;
  __swift_destroy_boxed_opaque_existential_1((uint64_t)v8);
  return v5;
}

uint64_t type metadata accessor for Group.MemberIDAndDiversifiedKey(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7BAF8);
}

unint64_t sub_23D62CA84()
{
  unint64_t result;

  result = qword_256C7B960;
  if (!qword_256C7B960)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for Group.GroupDBDecryptionKey.KeyType, &type metadata for Group.GroupDBDecryptionKey.KeyType);
    atomic_store(result, (unint64_t *)&qword_256C7B960);
  }
  return result;
}

uint64_t sub_23D62CAC8()
{
  return sub_23D5AE928(&qword_256C7B968, type metadata accessor for Group.GroupDBDecryptionKey, (uint64_t)&protocol conformance descriptor for Group.GroupDBDecryptionKey);
}

unint64_t sub_23D62CAF8()
{
  unint64_t result;

  result = qword_256C7B970;
  if (!qword_256C7B970)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for Group.GroupDBSigningKey.KeyType, &type metadata for Group.GroupDBSigningKey.KeyType);
    atomic_store(result, (unint64_t *)&qword_256C7B970);
  }
  return result;
}

uint64_t sub_23D62CB3C()
{
  return sub_23D5AE928(&qword_256C7B978, type metadata accessor for Group.GroupDBSigningKey, (uint64_t)&protocol conformance descriptor for Group.GroupDBSigningKey);
}

uint64_t type metadata accessor for Group.GroupDBSigningKey(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7BA68);
}

uint64_t *_s20GroupDBDecryptionKeyVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_23D62CC58(a1, a2, a3, &qword_256C79170, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968]);
}

uint64_t _s20GroupDBDecryptionKeyVwxx(uint64_t a1, uint64_t a2)
{
  return sub_23D62CD38(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968]);
}

void *_s20GroupDBDecryptionKeyVwcp(void *a1, const void *a2, uint64_t a3)
{
  return sub_23D62CDB4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170);
}

void *_s20GroupDBDecryptionKeyVwca(void *a1, void *a2, uint64_t a3)
{
  return sub_23D62CE74(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170);
}

void *_s20GroupDBDecryptionKeyVwtk(void *a1, const void *a2, uint64_t a3)
{
  return sub_23D62CF80(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170);
}

void *_s20GroupDBDecryptionKeyVwta(void *a1, void *a2, uint64_t a3)
{
  return sub_23D62D040(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC6968], &qword_256C79170);
}

uint64_t _s20GroupDBDecryptionKeyVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D62CBF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, &qword_256C79170);
}

uint64_t _s20GroupDBDecryptionKeyVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D62CC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, &qword_256C79170);
}

void sub_23D62CC1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D62D1F8(a1, a2, a3, &qword_256C7B6C8, (void (*)(uint64_t))MEMORY[0x24BDC6968]);
}

ValueMetadata *type metadata accessor for Group.GroupDBDecryptionKey.KeyType()
{
  return &type metadata for Group.GroupDBDecryptionKey.KeyType;
}

uint64_t *_s17GroupDBSigningKeyVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  return sub_23D62CC58(a1, a2, a3, &qword_256C79120, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0]);
}

uint64_t *sub_23D62CC58(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v8 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a4) - 8);
  v9 = *(_DWORD *)(v8 + 80);
  if ((v9 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v9 + 16) & ~(unint64_t)v9));
    swift_retain();
  }
  else
  {
    v10 = a5(0);
    v11 = *(_QWORD *)(v10 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v11 + 48))(a2, 1, v10))
    {
      memcpy(a1, a2, *(_QWORD *)(v8 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v11 + 16))(a1, a2, v10);
      (*(void (**)(uint64_t *, _QWORD, uint64_t, uint64_t))(v11 + 56))(a1, 0, 1, v10);
    }
  }
  return a1;
}

uint64_t _s17GroupDBSigningKeyVwxx(uint64_t a1, uint64_t a2)
{
  return sub_23D62CD38(a1, a2, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0]);
}

uint64_t sub_23D62CD38(uint64_t a1, uint64_t a2, uint64_t (*a3)(_QWORD))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v4 = a3(0);
  v5 = *(_QWORD *)(v4 - 8);
  result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v4);
  if (!(_DWORD)result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(v5 + 8))(a1, v4);
  return result;
}

void *_s17GroupDBSigningKeyVwcp(void *a1, const void *a2, uint64_t a3)
{
  return sub_23D62CDB4(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120);
}

void *sub_23D62CDB4(void *a1, const void *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a4(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 16))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  return a1;
}

void *_s17GroupDBSigningKeyVwca(void *a1, void *a2, uint64_t a3)
{
  return sub_23D62CE74(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120);
}

void *sub_23D62CE74(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  v8 = a4(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(a1, 1, v8);
  v12 = v10(a2, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 24))(a1, a2, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 16))(a1, a2, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  return a1;
}

void *_s17GroupDBSigningKeyVwtk(void *a1, const void *a2, uint64_t a3)
{
  return sub_23D62CF80(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120);
}

void *sub_23D62CF80(void *a1, const void *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v8 = a4(0);
  v9 = *(_QWORD *)(v8 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v9 + 48))(a2, 1, v8))
  {
    v10 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v10 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v9 + 32))(a1, a2, v8);
    (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  }
  return a1;
}

void *_s17GroupDBSigningKeyVwta(void *a1, void *a2, uint64_t a3)
{
  return sub_23D62D040(a1, a2, a3, (uint64_t (*)(_QWORD))MEMORY[0x24BDC69D0], &qword_256C79120);
}

void *sub_23D62D040(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(_QWORD), uint64_t *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t (*v10)(void *, uint64_t, uint64_t);
  int v11;
  int v12;
  uint64_t v13;

  v8 = a4(0);
  v9 = *(_QWORD *)(v8 - 8);
  v10 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v9 + 48);
  v11 = v10(a1, 1, v8);
  v12 = v10(a2, 1, v8);
  if (!v11)
  {
    if (!v12)
    {
      (*(void (**)(void *, void *, uint64_t))(v9 + 40))(a1, a2, v8);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v9 + 8))(a1, v8);
    goto LABEL_6;
  }
  if (v12)
  {
LABEL_6:
    v13 = __swift_instantiateConcreteTypeFromMangledName(a5);
    memcpy(a1, a2, *(_QWORD *)(*(_QWORD *)(v13 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v9 + 32))(a1, a2, v8);
  (*(void (**)(void *, _QWORD, uint64_t, uint64_t))(v9 + 56))(a1, 0, 1, v8);
  return a1;
}

uint64_t _s17GroupDBSigningKeyVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D62D144(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return __swift_get_extra_inhabitant_indexTm_0(a1, a2, a3, &qword_256C79120);
}

uint64_t __swift_get_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6;

  v6 = __swift_instantiateConcreteTypeFromMangledName(a4);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 48))(a1, a2, v6);
}

uint64_t _s17GroupDBSigningKeyVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D62D198(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_store_extra_inhabitant_indexTm_0(a1, a2, a3, a4, &qword_256C79120);
}

uint64_t __swift_store_extra_inhabitant_indexTm_0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v7;

  v7 = __swift_instantiateConcreteTypeFromMangledName(a5);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(a1, a2, a2, v7);
}

void sub_23D62D1E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_23D62D1F8(a1, a2, a3, qword_256C7B6D0, (void (*)(uint64_t))MEMORY[0x24BDC69D0]);
}

void sub_23D62D1F8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(uint64_t))
{
  unint64_t v5;

  sub_23D5F5B08(319, a4, a5);
  if (v5 <= 0x3F)
    swift_initStructMetadata();
}

uint64_t _s20GroupDBDecryptionKeyV7KeyTypeOwst_0(uint64_t a1, int a2, int a3)
{
  int v3;
  uint64_t v4;

  if ((a3 + 1) >= 0x10000)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) < 0x100)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3)
    v4 = v4;
  else
    v4 = 0;
  if (a2)
    return ((uint64_t (*)(void))((char *)sub_23D62D2B8 + 4 * byte_23D6739D0[v4]))();
  else
    return ((uint64_t (*)(void))((char *)sub_23D62D2D8 + 4 * byte_23D6739D5[v4]))();
}

_BYTE *sub_23D62D2B8(_BYTE *result, char a2)
{
  *result = a2;
  return result;
}

_BYTE *sub_23D62D2D8(_BYTE *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D62D2E0(_DWORD *result, int a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D62D2E8(_WORD *result, __int16 a2)
{
  *result = a2;
  return result;
}

_WORD *sub_23D62D2F0(_WORD *result)
{
  *result = 0;
  return result;
}

_DWORD *sub_23D62D2F8(_DWORD *result)
{
  *result = 0;
  return result;
}

ValueMetadata *type metadata accessor for Group.GroupDBSigningKey.KeyType()
{
  return &type metadata for Group.GroupDBSigningKey.KeyType;
}

uint64_t *_s25MemberIDAndDiversifiedKeyVwCP(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = *(int *)(a3 + 20);
    v10 = (char *)a1 + v9;
    v11 = (char *)a2 + v9;
    v12 = sub_23D66C330();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v12 - 8) + 16))(v10, v11, v12);
  }
  return a1;
}

uint64_t _s25MemberIDAndDiversifiedKeyVwxx(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  v4 = a1 + *(int *)(a2 + 20);
  v5 = sub_23D66C330();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 8))(v4, v5);
}

uint64_t *_s25MemberIDAndDiversifiedKeyVwcp(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  return a1;
}

uint64_t *_s25MemberIDAndDiversifiedKeyVwca(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = *(int *)(a3 + 20);
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v13 - 8) + 24))(v11, v12, v13);
  return a1;
}

_OWORD *_s25MemberIDAndDiversifiedKeyVwtk(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;

  *a1 = *a2;
  v4 = *(int *)(a3 + 20);
  v5 = (char *)a1 + v4;
  v6 = (char *)a2 + v4;
  v7 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v7 - 8) + 32))(v5, v6, v7);
  return a1;
}

uint64_t *_s25MemberIDAndDiversifiedKeyVwta(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = *(int *)(a3 + 20);
  v9 = (char *)a1 + v8;
  v10 = (char *)a2 + v8;
  v11 = sub_23D66C330();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 40))(v9, v10, v11);
  return a1;
}

uint64_t _s25MemberIDAndDiversifiedKeyVwet()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D62D5D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v8;

  if ((_DWORD)a2 == 12)
  {
    v4 = *(_QWORD *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0)
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    else
      return 0;
  }
  else
  {
    v8 = sub_23D66C330();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48))(a1 + *(int *)(a3 + 20), a2, v8);
  }
}

uint64_t _s25MemberIDAndDiversifiedKeyVwst()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

char *sub_23D62D668(char *result, uint64_t a2, int a3, uint64_t a4)
{
  char *v5;
  uint64_t v7;

  v5 = result;
  if (a3 == 12)
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }
  else
  {
    v7 = sub_23D66C330();
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v7 - 8) + 56))(&v5[*(int *)(a4 + 20)], a2, a2, v7);
  }
  return result;
}

uint64_t sub_23D62D6E4()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66C330();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

_QWORD *sub_23D62D758@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  _QWORD v13[2];

  v5 = *(uint64_t **)(v3 + 16);
  v7 = *v5;
  v6 = v5[1];
  v13[0] = v7;
  v13[1] = v6;
  v12[2] = v13;
  result = sub_23D62C0BC((_QWORD *(*)(uint64_t *__return_ptr, uint64_t, uint64_t))sub_23D62D7B4, (uint64_t)v12, a1, a2);
  *a3 = result;
  a3[1] = v9;
  a3[2] = v10;
  a3[3] = v11;
  return result;
}

uint64_t sub_23D62D7B4@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  return sub_23D62C1CC(a1, a2);
}

uint64_t sub_23D62D7D0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 24 * a1 + 32;
    v6 = a3 + 24 * v4;
    if (v5 >= v6 || v5 + 24 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A78);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D62D8DC(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 40 * a1 + 32;
    v6 = a3 + 40 * v4;
    if (v5 >= v6 || v5 + 40 * v4 <= a3)
    {
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79940);
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D62D9E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;

  v4 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v4 & 0x8000000000000000) == 0)
  {
    v5 = a4 + 16 * a1 + 32;
    v6 = a3 + 16 * v4;
    if (v5 >= v6 || v5 + 16 * v4 <= a3)
    {
      swift_arrayInitWithCopy();
      return v6;
    }
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D62DAD8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t (*a5)(_QWORD))
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(a5(0) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

uint64_t sub_23D62DBF0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t result;

  v5 = a2 - a1;
  if (__OFSUB__(a2, a1))
  {
    __break(1u);
  }
  else if ((v5 & 0x8000000000000000) == 0)
  {
    v9 = *(_QWORD *)(__swift_instantiateConcreteTypeFromMangledName(a5) - 8);
    v10 = *(unsigned __int8 *)(v9 + 80);
    v11 = *(_QWORD *)(v9 + 72);
    v12 = a4 + ((v10 + 32) & ~v10) + v11 * a1;
    v13 = v11 * v5;
    v14 = a3 + v13;
    v15 = v12 + v13;
    if (v12 >= v14 || v15 <= a3)
    {
      swift_arrayInitWithCopy();
      return v14;
    }
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

double sub_23D62DD0C()
{
  double result;

  byte_25431AB68 = 2;
  result = 0.0;
  unk_25431AB70 = 0u;
  unk_25431AB80 = 0u;
  unk_25431AB90 = 0u;
  unk_25431ABA0 = 0u;
  unk_25431ABB0 = 0u;
  unk_25431ABC0 = 0u;
  unk_25431ABD0 = 0u;
  unk_25431ABE0 = 0u;
  unk_25431ABF0 = 0u;
  unk_25431AC00 = 0u;
  unk_25431AC10 = 0u;
  unk_25431AC20 = 0u;
  unk_25431AC30 = 0u;
  unk_25431AC40 = 0u;
  unk_25431AC50 = 0u;
  qword_25431AC60 = 0;
  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> initializeProductionDependencies()()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  char v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  if (byte_25431AB68 == 2)
  {
    LOBYTE(v24) = 2;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v36 = 0u;
    v37 = 0u;
    v38 = 0u;
    v39 = 0u;
    v40 = 0;
    swift_beginAccess();
    sub_23D62E1DC((uint64_t)&v24, (uint64_t)&byte_25431AB68);
    byte_25431AB68 = 0;
    swift_endAccess();
    type metadata accessor for CoreDataUtils();
    swift_allocObject();
    v1 = sub_23D6162C8(0, 0, 0x6F74707972636B67, 0xEF6574696C71732ELL, 0xD000000000000020, 0x800000023D679F60, 1);
    if (!v0)
    {
      qword_25431AC38 = v1;
      swift_retain();
      swift_release();
      v2 = type metadata accessor for DeviceToDeviceEncryptedContainerInteraction();
      swift_allocObject();
      v3 = swift_retain();
      sub_23D64E0B4(v3, 0);
      *(_QWORD *)&v26 = v2;
      *((_QWORD *)&v26 + 1) = &off_250E2AF30;
      v24 = v4;
      swift_beginAccess();
      sub_23D5F1788((uint64_t)&v24, (uint64_t)&unk_25431AC10, &qword_25431A9A8);
      swift_endAccess();
      v5 = swift_retain();
      sub_23D644968(v5, 0);
      v7 = v6;
      v9 = v8;
      v11 = v10;
      swift_release();
      *(_QWORD *)&v26 = &type metadata for CoreDataInteraction;
      *((_QWORD *)&v26 + 1) = &off_250E2AD88;
      v24 = v7;
      *(_QWORD *)&v25 = v9;
      BYTE8(v25) = v11 & 1;
      swift_beginAccess();
      sub_23D5F1788((uint64_t)&v24, (uint64_t)&unk_25431AB98, &qword_25431A848);
      *(_QWORD *)&v26 = &type metadata for KeychainInteraction;
      *((_QWORD *)&v26 + 1) = &off_250E2AD60;
      v24 = 0xD000000000000019;
      *(_QWORD *)&v25 = 0x800000023D679210;
      sub_23D5F1788((uint64_t)&v24, (uint64_t)&unk_25431AB70, &qword_25431A848);
      swift_endAccess();
      v12 = swift_retain();
      sub_23D644968(v12, 1);
      v14 = v13;
      v16 = v15;
      v18 = v17;
      swift_release();
      *(_QWORD *)&v26 = &type metadata for CoreDataInteraction;
      *((_QWORD *)&v26 + 1) = &off_250E2AD88;
      v24 = v14;
      *(_QWORD *)&v25 = v16;
      BYTE8(v25) = v18 & 1;
      swift_beginAccess();
      sub_23D5F1788((uint64_t)&v24, (uint64_t)&unk_25431ABC0, &qword_25431A848);
      swift_endAccess();
      swift_allocObject();
      v19 = swift_retain();
      sub_23D64E0B4(v19, 1);
      *(_QWORD *)&v26 = v2;
      *((_QWORD *)&v26 + 1) = &off_250E2AF30;
      v24 = v20;
      swift_beginAccess();
      sub_23D5F1788((uint64_t)&v24, (uint64_t)&unk_25431ABE8, &qword_25431A9A8);
      v21 = type metadata accessor for PCSInterface();
      v22 = swift_allocObject();
      *(_QWORD *)&v26 = v21;
      *((_QWORD *)&v26 + 1) = &off_250E2AAC0;
      v24 = v22;
      sub_23D5F1788((uint64_t)&v24, (uint64_t)&unk_25431AC40, &qword_25431A828);
      swift_endAccess();
      swift_release();
    }
  }
  else
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D618E34();
    swift_allocError();
    *(_WORD *)v23 = 387;
    *(_OWORD *)(v23 + 8) = xmmword_23D673C60;
    *(_QWORD *)(v23 + 24) = 0x800000023D679F90;
    *(_QWORD *)(v23 + 32) = 0xD000000000000066;
    *(_QWORD *)(v23 + 40) = 0x800000023D679FC0;
    swift_willThrow();
  }
}

uint64_t sub_23D62E1DC(uint64_t a1, uint64_t a2)
{
  assignWithTake for DependencyContainer(a2, a1);
  return a2;
}

ValueMetadata *type metadata accessor for ICloudSecurityLevel()
{
  return &type metadata for ICloudSecurityLevel;
}

uint64_t destroy for DependencyContainer(_QWORD *a1)
{
  uint64_t result;

  if (a1[4])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 1));
  if (a1[9])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 6));
  if (a1[14])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 11));
  if (a1[19])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 16));
  if (a1[24])
    __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 21));
  result = swift_release();
  if (a1[30])
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)(a1 + 27));
  return result;
}

uint64_t initializeWithCopy for DependencyContainer(uint64_t a1, char *a2)
{
  char *v4;
  char v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  _OWORD *v15;
  _OWORD *v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  _OWORD *v20;
  _OWORD *v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  _OWORD *v25;
  _OWORD *v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;

  v5 = *a2;
  v4 = a2 + 8;
  *(_BYTE *)a1 = v5;
  v6 = a1 + 8;
  v7 = *((_QWORD *)a2 + 4);
  if (v7)
  {
    v8 = *((_QWORD *)a2 + 5);
    *(_QWORD *)(a1 + 32) = v7;
    *(_QWORD *)(a1 + 40) = v8;
    (**(void (***)(uint64_t, uint64_t))(v7 - 8))(v6, (uint64_t)v4);
  }
  else
  {
    v9 = *((_OWORD *)v4 + 1);
    *(_OWORD *)v6 = *(_OWORD *)v4;
    *(_OWORD *)(v6 + 16) = v9;
    *(_QWORD *)(v6 + 32) = *((_QWORD *)v4 + 4);
  }
  v10 = (_OWORD *)(a1 + 48);
  v11 = a2 + 48;
  v12 = *((_QWORD *)a2 + 9);
  if (v12)
  {
    v13 = *((_QWORD *)a2 + 10);
    *(_QWORD *)(a1 + 72) = v12;
    *(_QWORD *)(a1 + 80) = v13;
    (**(void (***)(_OWORD *, _OWORD *))(v12 - 8))(v10, v11);
  }
  else
  {
    v14 = *((_OWORD *)a2 + 4);
    *v10 = *v11;
    *(_OWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 80) = *((_QWORD *)a2 + 10);
  }
  v15 = (_OWORD *)(a1 + 88);
  v16 = a2 + 88;
  v17 = *((_QWORD *)a2 + 14);
  if (v17)
  {
    v18 = *((_QWORD *)a2 + 15);
    *(_QWORD *)(a1 + 112) = v17;
    *(_QWORD *)(a1 + 120) = v18;
    (**(void (***)(_OWORD *, _OWORD *))(v17 - 8))(v15, v16);
  }
  else
  {
    v19 = *(_OWORD *)(a2 + 104);
    *v15 = *v16;
    *(_OWORD *)(a1 + 104) = v19;
    *(_QWORD *)(a1 + 120) = *((_QWORD *)a2 + 15);
  }
  v20 = (_OWORD *)(a1 + 128);
  v21 = a2 + 128;
  v22 = *((_QWORD *)a2 + 19);
  if (v22)
  {
    v23 = *((_QWORD *)a2 + 20);
    *(_QWORD *)(a1 + 152) = v22;
    *(_QWORD *)(a1 + 160) = v23;
    (**(void (***)(_OWORD *, _OWORD *))(v22 - 8))(v20, v21);
  }
  else
  {
    v24 = *((_OWORD *)a2 + 9);
    *v20 = *v21;
    *(_OWORD *)(a1 + 144) = v24;
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
  }
  v25 = (_OWORD *)(a1 + 168);
  v26 = a2 + 168;
  v27 = *((_QWORD *)a2 + 24);
  if (v27)
  {
    v28 = *((_QWORD *)a2 + 25);
    *(_QWORD *)(a1 + 192) = v27;
    *(_QWORD *)(a1 + 200) = v28;
    (**(void (***)(_OWORD *, _OWORD *))(v27 - 8))(v25, v26);
  }
  else
  {
    v29 = *(_OWORD *)(a2 + 184);
    *v25 = *v26;
    *(_OWORD *)(a1 + 184) = v29;
    *(_QWORD *)(a1 + 200) = *((_QWORD *)a2 + 25);
  }
  *(_QWORD *)(a1 + 208) = *((_QWORD *)a2 + 26);
  v30 = *((_QWORD *)a2 + 30);
  swift_retain();
  if (v30)
  {
    v31 = *((_QWORD *)a2 + 31);
    *(_QWORD *)(a1 + 240) = v30;
    *(_QWORD *)(a1 + 248) = v31;
    (**(void (***)(uint64_t, uint64_t, uint64_t))(v30 - 8))(a1 + 216, (uint64_t)(a2 + 216), v30);
  }
  else
  {
    v32 = *(_OWORD *)(a2 + 232);
    *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
    *(_OWORD *)(a1 + 232) = v32;
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
  }
  return a1;
}

uint64_t assignWithCopy for DependencyContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;

  *(_BYTE *)a1 = *(_BYTE *)a2;
  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a1 + 32))
  {
    if (v6)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 8), (uint64_t *)(a2 + 8));
      goto LABEL_8;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  }
  else if (v6)
  {
    *(_QWORD *)(a1 + 32) = v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    (**(void (***)(uint64_t, uint64_t))(v6 - 8))(a1 + 8, a2 + 8);
    goto LABEL_8;
  }
  v7 = *v5;
  v8 = v5[1];
  *(_QWORD *)(v4 + 32) = *((_QWORD *)v5 + 4);
  *(_OWORD *)v4 = v7;
  *(_OWORD *)(v4 + 16) = v8;
LABEL_8:
  v9 = *(_QWORD *)(a2 + 72);
  if (*(_QWORD *)(a1 + 72))
  {
    if (v9)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 48), (uint64_t *)(a2 + 48));
      goto LABEL_15;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  }
  else if (v9)
  {
    *(_QWORD *)(a1 + 72) = v9;
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    (**(void (***)(uint64_t, uint64_t))(v9 - 8))(a1 + 48, a2 + 48);
    goto LABEL_15;
  }
  v10 = *(_OWORD *)(a2 + 48);
  v11 = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v10;
  *(_OWORD *)(a1 + 64) = v11;
LABEL_15:
  v12 = *(_QWORD *)(a2 + 112);
  if (*(_QWORD *)(a1 + 112))
  {
    if (v12)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 88), (uint64_t *)(a2 + 88));
      goto LABEL_22;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  }
  else if (v12)
  {
    *(_QWORD *)(a1 + 112) = v12;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    (**(void (***)(uint64_t, uint64_t))(v12 - 8))(a1 + 88, a2 + 88);
    goto LABEL_22;
  }
  v13 = *(_OWORD *)(a2 + 88);
  v14 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 88) = v13;
  *(_OWORD *)(a1 + 104) = v14;
LABEL_22:
  v15 = *(_QWORD *)(a2 + 152);
  if (*(_QWORD *)(a1 + 152))
  {
    if (v15)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 128), (uint64_t *)(a2 + 128));
      goto LABEL_29;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  }
  else if (v15)
  {
    *(_QWORD *)(a1 + 152) = v15;
    *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
    (**(void (***)(uint64_t, uint64_t))(v15 - 8))(a1 + 128, a2 + 128);
    goto LABEL_29;
  }
  v16 = *(_OWORD *)(a2 + 128);
  v17 = *(_OWORD *)(a2 + 144);
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 128) = v16;
  *(_OWORD *)(a1 + 144) = v17;
LABEL_29:
  v18 = *(_QWORD *)(a2 + 192);
  if (*(_QWORD *)(a1 + 192))
  {
    if (v18)
    {
      __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 168), (uint64_t *)(a2 + 168));
      goto LABEL_36;
    }
    __swift_destroy_boxed_opaque_existential_1(a1 + 168);
  }
  else if (v18)
  {
    *(_QWORD *)(a1 + 192) = v18;
    *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
    (**(void (***)(uint64_t, uint64_t))(v18 - 8))(a1 + 168, a2 + 168);
    goto LABEL_36;
  }
  v19 = *(_OWORD *)(a2 + 168);
  v20 = *(_OWORD *)(a2 + 184);
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_OWORD *)(a1 + 168) = v19;
  *(_OWORD *)(a1 + 184) = v20;
LABEL_36:
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_retain();
  swift_release();
  v21 = *(_QWORD *)(a2 + 240);
  if (!*(_QWORD *)(a1 + 240))
  {
    if (v21)
    {
      *(_QWORD *)(a1 + 240) = v21;
      *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
      (**(void (***)(uint64_t, uint64_t))(v21 - 8))(a1 + 216, a2 + 216);
      return a1;
    }
LABEL_42:
    v22 = *(_OWORD *)(a2 + 216);
    v23 = *(_OWORD *)(a2 + 232);
    *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
    *(_OWORD *)(a1 + 216) = v22;
    *(_OWORD *)(a1 + 232) = v23;
    return a1;
  }
  if (!v21)
  {
    __swift_destroy_boxed_opaque_existential_1(a1 + 216);
    goto LABEL_42;
  }
  __swift_assign_boxed_opaque_existential_1((uint64_t *)(a1 + 216), (uint64_t *)(a2 + 216));
  return a1;
}

uint64_t *__swift_assign_boxed_opaque_existential_1(uint64_t *result, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v11[24];

  if (result != a2)
  {
    v3 = result;
    v4 = result[3];
    v5 = a2[3];
    if (v4 == v5)
    {
      v9 = *(_QWORD *)(v4 - 8);
      if ((*(_BYTE *)(v9 + 82) & 2) != 0)
      {
        v10 = *a2;
        swift_retain();
        result = (uint64_t *)swift_release();
        *v3 = v10;
      }
      else
      {
        return (uint64_t *)(*(uint64_t (**)(uint64_t *, uint64_t *, uint64_t))(v9 + 24))(result, a2, result[3]);
      }
    }
    else
    {
      result[3] = v5;
      result[4] = a2[4];
      v6 = *(_QWORD *)(v4 - 8);
      v7 = *(_QWORD *)(v5 - 8);
      v8 = *(_DWORD *)(v7 + 80);
      if ((*(_BYTE *)(v6 + 82) & 2) != 0)
      {
        if ((v8 & 0x20000) != 0)
        {
          *result = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(result, a2, v5);
        }
        return (uint64_t *)swift_release();
      }
      else
      {
        (*(void (**)(_BYTE *, uint64_t *, uint64_t))(v6 + 32))(v11, result, v4);
        if ((v8 & 0x20000) != 0)
        {
          *v3 = *a2;
          swift_retain();
        }
        else
        {
          (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v7 + 16))(v3, a2, v5);
        }
        return (uint64_t *)(*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v11, v4);
      }
    }
  }
  return result;
}

__n128 __swift_memcpy256_8(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __n128 result;
  __int128 v12;
  __int128 v13;

  v2 = *a2;
  v3 = a2[1];
  v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  v5 = a2[4];
  v6 = a2[5];
  v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  v8 = a2[8];
  v9 = a2[9];
  v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(_OWORD *)(a1 + 128) = v8;
  *(_OWORD *)(a1 + 144) = v9;
  result = (__n128)a2[12];
  v12 = a2[13];
  v13 = a2[15];
  *(_OWORD *)(a1 + 224) = a2[14];
  *(_OWORD *)(a1 + 240) = v13;
  *(__n128 *)(a1 + 192) = result;
  *(_OWORD *)(a1 + 208) = v12;
  return result;
}

uint64_t assignWithTake for DependencyContainer(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  v4 = a2 + 8;
  *(_BYTE *)a1 = *(_BYTE *)a2;
  v5 = a1 + 8;
  if (*(_QWORD *)(a1 + 32))
    __swift_destroy_boxed_opaque_existential_1(a1 + 8);
  v6 = *(_OWORD *)(v4 + 16);
  *(_OWORD *)v5 = *(_OWORD *)v4;
  *(_OWORD *)(v5 + 16) = v6;
  *(_QWORD *)(v5 + 32) = *(_QWORD *)(v4 + 32);
  if (*(_QWORD *)(a1 + 72))
    __swift_destroy_boxed_opaque_existential_1(a1 + 48);
  v7 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v7;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  if (*(_QWORD *)(a1 + 112))
    __swift_destroy_boxed_opaque_existential_1(a1 + 88);
  v8 = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = v8;
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  if (*(_QWORD *)(a1 + 152))
    __swift_destroy_boxed_opaque_existential_1(a1 + 128);
  v9 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v9;
  *(_QWORD *)(a1 + 160) = *(_QWORD *)(a2 + 160);
  if (*(_QWORD *)(a1 + 192))
    __swift_destroy_boxed_opaque_existential_1(a1 + 168);
  v10 = *(_OWORD *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 184) = v10;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a2 + 200);
  *(_QWORD *)(a1 + 208) = *(_QWORD *)(a2 + 208);
  swift_release();
  if (*(_QWORD *)(a1 + 240))
    __swift_destroy_boxed_opaque_existential_1(a1 + 216);
  v11 = *(_OWORD *)(a2 + 232);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(_OWORD *)(a1 + 232) = v11;
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 248);
  return a1;
}

uint64_t getEnumTagSinglePayload for DependencyContainer(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  int v4;

  if (!a2)
    return 0;
  if (a2 >= 0x7FFFFFFF && *(_BYTE *)(a1 + 256))
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  v3 = *(_QWORD *)(a1 + 32);
  if (v3 >= 0xFFFFFFFF)
    LODWORD(v3) = -1;
  v4 = v3 - 1;
  if (v4 < 0)
    v4 = -1;
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for DependencyContainer(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_QWORD *)(result + 248) = 0;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 256) = 1;
  }
  else
  {
    if (a3 >= 0x7FFFFFFF)
      *(_BYTE *)(result + 256) = 0;
    if (a2)
      *(_QWORD *)(result + 32) = a2;
  }
  return result;
}

ValueMetadata *type metadata accessor for DependencyContainer()
{
  return &type metadata for DependencyContainer;
}

unint64_t sub_23D62EAEC()
{
  unint64_t result;

  result = qword_256C7BB70;
  if (!qword_256C7BB70)
  {
    result = MEMORY[0x242636790](&unk_23D673D04, &type metadata for ICloudSecurityLevel);
    atomic_store(result, (unint64_t *)&qword_256C7BB70);
  }
  return result;
}

uint64_t _s14GroupKitCrypto19ICloudSecurityLevelOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D62EB7C + 4 * byte_23D673C75[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D62EBB0 + 4 * byte_23D673C70[v4]))();
}

uint64_t sub_23D62EBB0(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D62EBB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D62EBC0);
  return result;
}

uint64_t sub_23D62EBCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D62EBD4);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D62EBD8(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D62EBE0(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DependencyEnvironment()
{
  return &type metadata for DependencyEnvironment;
}

unint64_t sub_23D62EC00()
{
  unint64_t result;

  result = qword_256C7BB78;
  if (!qword_256C7BB78)
  {
    result = MEMORY[0x242636790](&unk_23D673D88, &type metadata for DependencyEnvironment);
    atomic_store(result, (unint64_t *)&qword_256C7BB78);
  }
  return result;
}

void sub_23D62EC44(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  double v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v13;
  _QWORD v14[2];

  if (a1 < 0 || (v3 = a2 - 1, a2 < 1))
  {
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
    goto LABEL_28;
  }
  if (a1 <= 1)
    v4 = 1;
  else
    v4 = a1;
  v5 = __OFADD__(v4, 1);
  v6 = v4 + 1;
  if (v5)
    goto LABEL_27;
  v7 = ceil(log2((double)v6) * 0.125);
  if ((~*(_QWORD *)&v7 & 0x7FF0000000000000) == 0)
  {
LABEL_28:
    __break(1u);
    goto LABEL_29;
  }
  if (v7 <= -9.22337204e18)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }
  if (v7 >= 9.22337204e18)
  {
LABEL_30:
    __break(1u);
    goto LABEL_31;
  }
  v8 = (uint64_t)v7;
  if ((uint64_t)v7 > a2)
  {
LABEL_31:
    __break(1u);
    goto LABEL_32;
  }
  v14[0] = sub_23D62C920(a2);
  v14[1] = v9;
  sub_23D62EDD8((uint64_t)v14);
  if (__OFSUB__(a2, v8))
  {
LABEL_32:
    __break(1u);
    goto LABEL_33;
  }
  if (a2 - v8 < a2)
  {
    v10 = -v8;
    while (1)
    {
      v11 = a2 + v10;
      if (__OFSUB__(v3, a2 + v10))
        break;
      if ((unint64_t)(v3 - (a2 + v10) - 0x1000000000000000) >> 61 != 7)
        goto LABEL_25;
      v13 = __CFADD__(v10++, 1);
      sub_23D66BD78();
      if (v13)
        return;
      if (__OFADD__(v11, 1))
      {
        __break(1u);
        return;
      }
    }
    __break(1u);
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }
LABEL_33:
  __break(1u);
}

void sub_23D62EDD8(uint64_t a1)
{
  __asm { BR              X13 }
}

void *sub_23D62EE34(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t __b, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  int v27;
  void *result;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 v32;
  unsigned __int8 v33;
  unsigned __int8 v34;

  v30 = v25;
  LOWORD(v31) = v24;
  BYTE2(v31) = BYTE2(v24);
  HIBYTE(v31) = BYTE3(v24);
  v32 = BYTE4(v24);
  v33 = BYTE5(v24);
  v34 = BYTE6(v24);
  result = memset(&v30, v27, BYTE6(v24));
  v29 = v31 | ((unint64_t)v32 << 32) | ((unint64_t)v33 << 40) | ((unint64_t)v34 << 48);
  *v26 = v30;
  v26[1] = v29;
  return result;
}

char *sub_23D62EFC0(int *a1, int a2)
{
  char *result;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  int64_t v9;
  uint64_t v10;
  size_t v11;

  result = (char *)sub_23D66BD24();
  v5 = *a1;
  v6 = a1[1];
  if ((int)v6 < (int)v5)
  {
    __break(1u);
    goto LABEL_9;
  }
  result = (char *)sub_23D66BC88();
  if (!result)
  {
LABEL_10:
    __break(1u);
    return result;
  }
  v7 = result;
  result = (char *)sub_23D66BCAC();
  v8 = v5 - (_QWORD)result;
  if (__OFSUB__(v5, result))
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }
  v9 = v6 - v5;
  v10 = sub_23D66BCA0();
  if (v10 >= v9)
    v11 = v9;
  else
    v11 = v10;
  return (char *)memset(&v7[v8], a2, v11);
}

id sub_23D62F040(uint64_t *a1, uint64_t *a2, uint64_t a3, unint64_t a4, unsigned int a5, void *a6)
{
  objc_class *v6;
  objc_class *v7;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  id v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;
  unint64_t v25;
  uint64_t v26;
  void *v27;
  _DWORD v29[10];
  id v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  id v35;
  uint64_t v36;
  unint64_t v37;
  unsigned int v38;
  uint64_t v39;

  v35 = a6;
  v7 = v6;
  v38 = a5;
  v36 = a3;
  v37 = a4;
  v11 = sub_23D66BE20();
  v31 = *(_QWORD *)(v11 - 8);
  v32 = v11;
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v29 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v15 = *a1;
  v14 = a1[1];
  v16 = *a2;
  v33 = a2[1];
  v34 = v16;
  v30 = objc_msgSend(objc_allocWithZone(v7), sel_initWithContext_, a6);
  v29[9] = sub_23D66BDD8();
  v29[8] = sub_23D66BDD8();
  v29[7] = sub_23D66BDD8();
  v29[6] = sub_23D66BDD8();
  v29[5] = sub_23D66BDD8();
  v29[4] = sub_23D66BDD8();
  v29[3] = sub_23D66BDD8();
  v29[2] = sub_23D66BDD8();
  v29[1] = sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDFC();
  sub_23D5DDA20(v15, v14);
  v17 = (void *)sub_23D66BDE4();
  v18 = v32;
  v31 = *(_QWORD *)(v31 + 8);
  ((void (*)(char *, uint64_t))v31)(v13, v32);
  v19 = v30;
  objc_msgSend(v30, sel_setGroupID_, v17);

  v21 = v33;
  v20 = v34;
  sub_23D5B06C8(v34, v33);
  v39 = v22;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
  sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
  sub_23D66C378();
  swift_bridgeObjectRelease();
  sub_23D5DDA20(v20, v21);
  v23 = (void *)sub_23D66C390();
  swift_bridgeObjectRelease();
  objc_msgSend(v19, sel_setUserID_, v23);

  sub_23D66BE14();
  v24 = (void *)sub_23D66BDE4();
  ((void (*)(char *, uint64_t))v31)(v13, v18);
  objc_msgSend(v19, sel_setDedupeID_, v24);

  v26 = v36;
  v25 = v37;
  v27 = (void *)sub_23D66BD84();
  objc_msgSend(v19, sel_setBlobData_, v27);

  objc_msgSend(v19, sel_setGroupVersion_, v38);
  sub_23D5DDA20(v26, v25);

  return v19;
}

id sub_23D62F478()
{
  void *v0;
  objc_super v2;

  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GroupKitCryptoGroupBlob();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t type metadata accessor for GroupKitCryptoGroupBlob()
{
  return objc_opt_self();
}

uint64_t sub_23D62F4C8(void *a1)
{
  unsigned int (*v1)(uint64_t, uint64_t, uint64_t);
  unsigned int (*v2)(uint64_t, uint64_t, uint64_t);
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  _BYTE *v24;
  id v25;
  void *v26;
  uint64_t v27;
  void (*v28)(_BYTE *, uint64_t, uint64_t, uint64_t);
  _BYTE *v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  id v33;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int (*v39)(uint64_t, uint64_t, uint64_t);
  _BYTE *v40;
  id v41;
  uint64_t v42;
  uint64_t v43;
  void (*v44)(_BYTE *, uint64_t);
  uint64_t v45;
  id v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  id v51;
  void *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  id v57;
  id v58;
  void *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int (*v62)(uint64_t, uint64_t, uint64_t);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  id v67;
  uint64_t v68;
  unint64_t v69;
  _BYTE *v70;
  char v71;
  char v72;
  char v73;
  char v74;
  char v75;
  char v76;
  char v77;
  char v78;
  unint64_t v79;
  id v80;
  void *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _BYTE *v87;
  char v88;
  char v89;
  char v90;
  char v91;
  char v92;
  char v93;
  char v94;
  char v95;
  unint64_t v96;
  char v97;
  _BYTE v98[4];
  int v99;
  _BYTE *v100;
  _BYTE *v101;
  _BYTE *v102;
  _BYTE *v103;
  _BYTE *v104;
  unsigned int (*v105)(uint64_t, uint64_t, uint64_t);
  uint64_t v106;
  id v107;
  void (*v108)(_BYTE *, uint64_t, uint64_t, uint64_t);
  uint64_t v109;
  uint64_t __src;
  char v111;
  char v112;
  char v113;
  char v114;
  char v115;
  char v116;
  char v117;
  char v118;
  uint64_t v119;

  v2 = v1;
  v107 = a1;
  v119 = *MEMORY[0x24BDAC8D0];
  v3 = sub_23D66BE20();
  v4 = *(_QWORD *)(v3 - 8);
  MEMORY[0x24BDAC7A8](v3);
  v104 = &v98[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v106 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B580);
  MEMORY[0x24BDAC7A8](v106);
  v7 = &v98[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B588);
  v9 = MEMORY[0x24BDAC7A8](v8);
  v102 = &v98[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v11 = MEMORY[0x24BDAC7A8](v9);
  v103 = &v98[-v12];
  v13 = MEMORY[0x24BDAC7A8](v11);
  v100 = &v98[-v14];
  v15 = MEMORY[0x24BDAC7A8](v13);
  v101 = &v98[-v16];
  v17 = MEMORY[0x24BDAC7A8](v15);
  v19 = &v98[-v18];
  v20 = MEMORY[0x24BDAC7A8](v17);
  v22 = &v98[-v21];
  MEMORY[0x24BDAC7A8](v20);
  v24 = &v98[-v23];
  v105 = v2;
  v25 = objc_msgSend(v2, sel_groupID);
  if (v25)
  {
    v26 = v25;
    sub_23D66BDF0();

    v27 = v4;
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v29 = v24;
    v30 = 0;
  }
  else
  {
    v27 = v4;
    v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v29 = v24;
    v30 = 1;
  }
  v108 = v28;
  v28(v29, v30, 1, v3);
  v31 = v3;
  v32 = v107;
  v33 = objc_msgSend(v107, sel_groupID);
  v34 = (uint64_t)v19;
  if (v33)
  {
    v35 = v33;
    sub_23D66BDF0();

    v36 = 0;
  }
  else
  {
    v36 = 1;
  }
  v108(v22, v36, 1, v31);
  v37 = (uint64_t)&v7[*(int *)(v106 + 48)];
  sub_23D618DEC((uint64_t)v24, (uint64_t)v7);
  sub_23D618DEC((uint64_t)v22, v37);
  v38 = v27;
  v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v27 + 48);
  if (v39((uint64_t)v7, 1, v31) == 1)
  {
    sub_23D5AEF8C((uint64_t)v22, &qword_256C7B588);
    sub_23D5AEF8C((uint64_t)v24, &qword_256C7B588);
    if (v39(v37, 1, v31) == 1)
    {
      v106 = (uint64_t)v39;
      sub_23D5AEF8C((uint64_t)v7, &qword_256C7B588);
      v39 = v105;
      goto LABEL_14;
    }
LABEL_12:
    sub_23D5AEF8C((uint64_t)v7, &qword_256C7B580);
    goto LABEL_31;
  }
  sub_23D618DEC((uint64_t)v7, v34);
  if (v39(v37, 1, v31) == 1)
  {
    sub_23D5AEF8C((uint64_t)v22, &qword_256C7B588);
    sub_23D5AEF8C((uint64_t)v24, &qword_256C7B588);
    (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v34, v31);
    goto LABEL_12;
  }
  v106 = (uint64_t)v39;
  v40 = v104;
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v38 + 32))(v104, v37, v31);
  sub_23D62FDD0();
  v99 = sub_23D66C384();
  v41 = v32;
  v42 = v34;
  v43 = v31;
  v44 = *(void (**)(_BYTE *, uint64_t))(v38 + 8);
  v44(v40, v43);
  sub_23D5AEF8C((uint64_t)v22, &qword_256C7B588);
  sub_23D5AEF8C((uint64_t)v24, &qword_256C7B588);
  v45 = v42;
  v32 = v41;
  v44((_BYTE *)v45, v43);
  v31 = v43;
  sub_23D5AEF8C((uint64_t)v7, &qword_256C7B588);
  v39 = v105;
  if ((v99 & 1) == 0)
    goto LABEL_31;
LABEL_14:
  v46 = objc_msgSend(v39, sel_userID);
  if (v46)
  {
    v47 = v46;
    v48 = sub_23D66C39C();
    v50 = v49;

  }
  else
  {
    v48 = 0;
    v50 = 0;
  }
  v51 = objc_msgSend(v32, sel_userID);
  if (!v51)
  {
    if (!v50)
      goto LABEL_28;
    goto LABEL_26;
  }
  v52 = v51;
  v53 = sub_23D66C39C();
  v55 = v54;

  if (!v50)
  {
    if (!v55)
      goto LABEL_28;
    goto LABEL_26;
  }
  if (!v55)
  {
LABEL_26:
    swift_bridgeObjectRelease();
    goto LABEL_31;
  }
  if (v48 == v53 && v50 == v55)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }
  v56 = sub_23D66C84C();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v56 & 1) == 0)
  {
LABEL_31:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    v64 = swift_allocError();
    *(_WORD *)v65 = 402;
    *(_OWORD *)(v65 + 8) = xmmword_23D673DB0;
    *(_QWORD *)(v65 + 24) = 0x800000023D6793D0;
    *(_QWORD *)(v65 + 32) = 0xD000000000000072;
    *(_QWORD *)(v65 + 40) = 0x800000023D67A030;
    v109 = v64;
    swift_willThrow();
    return v39 & 1;
  }
LABEL_28:
  v57 = objc_msgSend(v39, sel_groupVersion);
  if (v57 == objc_msgSend(v32, sel_groupVersion))
  {
    v58 = objc_msgSend(v39, sel_dedupeID);
    if (v58)
    {
      v59 = v58;
      v60 = (uint64_t)v100;
      sub_23D66BDF0();

      v61 = 0;
      v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v106;
    }
    else
    {
      v61 = 1;
      v62 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v106;
      v60 = (uint64_t)v100;
    }
    v63 = (uint64_t)v101;
    v108((_BYTE *)v60, v61, 1, v31);
    sub_23D618E80(v60, v63);
    if (v62(v63, 1, v31))
    {
      sub_23D5AEF8C(v63, &qword_256C7B588);
      v68 = 0;
      v69 = 0xC000000000000000;
    }
    else
    {
      v70 = v104;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v38 + 16))(v104, v63, v31);
      sub_23D5AEF8C(v63, &qword_256C7B588);
      __src = sub_23D66BE08();
      v111 = v71;
      v112 = v72;
      v113 = v73;
      v114 = v74;
      v115 = v75;
      v116 = v76;
      v117 = v77;
      v118 = v78;
      v68 = sub_23D618EC8(&__src, 16);
      v69 = v79;
      (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v70, v31);
    }
    v80 = objc_msgSend(v32, sel_dedupeID);
    if (v80)
    {
      v81 = v80;
      v82 = (uint64_t)v102;
      sub_23D66BDF0();

      v83 = 0;
    }
    else
    {
      v83 = 1;
      v82 = (uint64_t)v102;
    }
    v84 = (uint64_t)v103;
    v108((_BYTE *)v82, v83, 1, v31);
    sub_23D618E80(v82, v84);
    if (v62(v84, 1, v31))
    {
      sub_23D5AEF8C(v84, &qword_256C7B588);
      v85 = 0;
      v86 = 0xC000000000000000;
    }
    else
    {
      v87 = v104;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v38 + 16))(v104, v84, v31);
      sub_23D5AEF8C(v84, &qword_256C7B588);
      __src = sub_23D66BE08();
      v111 = v88;
      v112 = v89;
      v113 = v90;
      v114 = v91;
      v115 = v92;
      v116 = v93;
      v117 = v94;
      v118 = v95;
      v85 = sub_23D618EC8(&__src, 16);
      v86 = v96;
      (*(void (**)(_BYTE *, uint64_t))(v38 + 8))(v87, v31);
    }
    sub_23D617FF0(v68, v69, v85, v86);
    LOBYTE(v39) = v97;
    sub_23D5DDA20(v68, v69);
    sub_23D5DDA20(v85, v86);
  }
  else
  {
    v67 = objc_msgSend(v39, sel_groupVersion);
    LOBYTE(v39) = (uint64_t)objc_msgSend(v32, sel_groupVersion) < (uint64_t)v67;
  }
  return v39 & 1;
}

unint64_t sub_23D62FDD0()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256C7B590;
  if (!qword_256C7B590)
  {
    v1 = sub_23D66BE20();
    result = MEMORY[0x242636790](MEMORY[0x24BDCEA98], v1);
    atomic_store(result, (unint64_t *)&qword_256C7B590);
  }
  return result;
}

uint64_t sub_23D62FE18(uint64_t a1)
{
  char *v1;
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  unsigned int v6;
  int v7;
  __int128 v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v8 = xmmword_23D673E00;
  if (*(_QWORD *)(a1 + 16))
  {
    v1 = (char *)&loc_23D62FEE4 + dword_23D63019C[*(_QWORD *)(swift_bridgeObjectRetain() + 40) >> 62];
    __asm { BR              X9 }
  }
  v6 = bswap32(4u);
  v2 = sub_23D628C44((uint64_t)&v6, (uint64_t)&v7);
  v4 = v3;
  sub_23D63CCB0(v2, v3);
  sub_23D5DDA20(v2, v4);
  return v8;
}

uint64_t sub_23D6301BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t inited;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v6 = sub_23D66C330();
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v27 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v28 = a2;
  v9 = *a1;
  v10 = a1[1];
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(a3, a2, v6);
  sub_23D66BCB8();
  swift_allocObject();
  v11 = sub_23D66BC94();
  v30 = 0x2000000000;
  v31 = v11;
  sub_23D5DE1E0((int *)&v30);
  v12 = v30;
  v13 = v31;
  v14 = v31 | 0x4000000000000000;
  v15 = type metadata accessor for MembershipVerifier(0);
  v16 = *(int *)(v15 + 24);
  v29 = a3;
  v17 = (uint64_t *)(a3 + v16);
  *v17 = v12;
  v17[1] = v14;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  sub_23D5AFA60(v12, v13 | 0x4000000000000000);
  if (qword_256C78D78 != -1)
    swift_once();
  v19 = qword_256C891A0;
  v20 = *(_QWORD *)algn_256C891A8;
  *(_QWORD *)(inited + 32) = qword_256C891A0;
  *(_QWORD *)(inited + 40) = v20;
  *(_QWORD *)(inited + 48) = v9;
  *(_QWORD *)(inited + 56) = v10;
  sub_23D5AFA60(v19, v20);
  v21 = sub_23D62FE18(inited);
  v23 = v22;
  swift_setDeallocating();
  swift_arrayDestroy();
  v24 = v27;
  v25 = v28;
  sub_23D66C30C();
  swift_release();
  sub_23D5DDA20(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v25, v6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v7 + 32))(v29 + *(int *)(v15 + 20), v24, v6);
}

uint64_t Invite.init(invitersID:invitersSigningKey:invitedID:groupID:groupVersion:invitedMembershipVerifier:invitedEncryptionPK:)@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X6>, _QWORD *a8@<X8>)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  void (*v24)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v25;
  char *v26;
  void (*v27)(char *, uint64_t, uint64_t);
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t result;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;

  v59 = a7;
  v67 = a6;
  v62 = a5;
  v64 = a2;
  v63 = sub_23D66C330();
  v61 = *(_QWORD *)(v63 - 8);
  MEMORY[0x24BDAC7A8](v63);
  v60 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v52 = a1[1];
  v14 = *a3;
  v15 = a3[1];
  v16 = *a4;
  v54 = a4[1];
  v55 = v16;
  v17 = (int *)type metadata accessor for Invite(0);
  v53 = (_QWORD *)((char *)a8 + v17[7]);
  v18 = (_QWORD *)((char *)a8 + v17[13]);
  *v18 = 0;
  v18[1] = 0;
  v18[2] = 0xF000000000000000;
  v19 = (char *)a8 + v17[14];
  v20 = sub_23D66C2DC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v20 - 8) + 56))(v19, 1, 1, v20);
  v21 = (char *)a8 + v17[16];
  v22 = sub_23D66C2AC();
  v23 = *(_QWORD *)(v22 - 8);
  v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v23 + 56);
  v58 = v23;
  v24(v21, 1, 1, v22);
  v25 = v52;
  *a8 = v13;
  a8[1] = v25;
  a8[2] = v14;
  a8[3] = v15;
  v26 = (char *)a8 + v17[6];
  v27 = *(void (**)(char *, uint64_t, uint64_t))(v23 + 16);
  v57 = v22;
  v27(v26, v64, v22);
  v24(v26, 0, 1, v22);
  sub_23D66BCB8();
  swift_allocObject();
  v28 = sub_23D66BC94();
  v65 = 0x2000000000;
  v66 = v28;
  v29 = v56;
  sub_23D5DE1E0((int *)&v65);
  v56 = v29;
  v30 = v66 | 0x4000000000000000;
  v31 = v53;
  *v53 = v65;
  v31[1] = v30;
  v32 = (_QWORD *)((char *)a8 + v17[8]);
  v33 = v54;
  *v32 = v55;
  v32[1] = v33;
  sub_23D5E7298(v67, (uint64_t)a8 + v17[10], type metadata accessor for MembershipVerifier);
  v34 = (char *)a8 + v17[11];
  v35 = sub_23D66C210();
  v36 = *(_QWORD *)(v35 - 8);
  v37 = v59;
  (*(void (**)(char *, uint64_t, uint64_t))(v36 + 16))(v34, v59, v35);
  *((_BYTE *)a8 + v17[15]) = 0;
  v38 = (char *)a8 + v17[12];
  v39 = sub_23D66C258();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v39 - 8) + 56))(v38, 1, 1, v39);
  *(_DWORD *)((char *)a8 + v17[9]) = v62;
  v40 = v60;
  sub_23D66C264();
  v41 = v40;
  v42 = sub_23D66C1F8();
  v44 = v43;
  (*(void (**)(char *, uint64_t))(v61 + 8))(v41, v63);
  sub_23D5AFD60(v42, v44);
  v46 = v45;
  v48 = v47;
  sub_23D5DDA20(v42, v44);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v37, v35);
  sub_23D5E6950(v67, type metadata accessor for MembershipVerifier);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v58 + 8))(v64, v57);
  v50 = (_QWORD *)((char *)a8 + v17[17]);
  *v50 = v46;
  v50[1] = v48;
  return result;
}

uint64_t type metadata accessor for Invite(uint64_t a1)
{
  return sub_23D5F15A0(a1, (uint64_t *)&unk_256C7BC88);
}

uint64_t sub_23D6306E4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t inited;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  char *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _QWORD v60[5];
  _QWORD *v61;
  __int128 v62;
  uint64_t v63;
  int *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  char *v76;
  uint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  char *v88;
  char *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;

  v74 = a1;
  v96 = *MEMORY[0x24BDAC8D0];
  v75 = type metadata accessor for GKCrypto_EncryptedInvitation(0);
  MEMORY[0x24BDAC7A8](v75);
  v76 = (char *)v60 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0);
  v80 = sub_23D66C210();
  v79 = *(_QWORD *)(v80 - 8);
  MEMORY[0x24BDAC7A8](v80);
  v78 = (char *)v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  v77 = type metadata accessor for GKCrypto_SignedInvite(0);
  MEMORY[0x24BDAC7A8](v77);
  v81 = (char *)v60 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  v83 = sub_23D66C2DC();
  v82 = *(_QWORD *)(v83 - 8);
  MEMORY[0x24BDAC7A8](v83);
  v84 = (char *)v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v86 = type metadata accessor for GKCrypto_Invite(0);
  MEMORY[0x24BDAC7A8](v86);
  v89 = (char *)v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  v87 = sub_23D66C354();
  v85 = *(_QWORD *)(v87 - 8);
  MEMORY[0x24BDAC7A8](v87);
  v88 = (char *)v60 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = sub_23D66C018();
  v8 = *(_QWORD *)(v7 - 8);
  MEMORY[0x24BDAC7A8](v7);
  v10 = (char *)v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for GKCrypto_RSVPResponse(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (char *)v60 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)v60 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23D66C2AC();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)v60 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Invite(0);
  v22 = *(int *)(v21 + 60);
  if (*(_BYTE *)(v91 + v22))
    goto LABEL_6;
  v71 = v11;
  v68 = v10;
  v69 = v8;
  v70 = v7;
  v67 = v22;
  v72 = v13;
  v73 = v20;
  v23 = (int *)v21;
  v24 = v91;
  sub_23D5AEF48(v91 + *(int *)(v21 + 24), (uint64_t)v16, &qword_256C79120);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    sub_23D5AEF8C((uint64_t)v16, &qword_256C79120);
LABEL_6:
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v29 = 299;
    *(_OWORD *)(v29 + 8) = xmmword_23D673E10;
    *(_QWORD *)(v29 + 24) = 0x800000023D67A410;
    *(_QWORD *)(v29 + 32) = 0xD000000000000058;
    *(_QWORD *)(v29 + 40) = 0x800000023D67A0D0;
    return swift_willThrow();
  }
  v25 = v18;
  v26 = v73;
  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v73, v16, v17);
  v27 = (uint64_t *)(v24 + v23[7]);
  v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v17);
    goto LABEL_6;
  }
  v65 = v25;
  v66 = v17;
  v31 = *v27;
  v32 = v24 + v23[11];
  v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  v62 = xmmword_23D66DF10;
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  sub_23D5AFA60(v31, v28);
  sub_23D5AFA60(v31, v28);
  if (qword_256C78D80 != -1)
    swift_once();
  v34 = qword_256C891B0;
  v35 = *(_QWORD *)algn_256C891B8;
  *(_QWORD *)(inited + 32) = qword_256C891B0;
  *(_QWORD *)(inited + 40) = v35;
  v36 = (uint64_t *)(v24 + v23[8]);
  v64 = v23;
  v37 = *v36;
  v38 = v36[1];
  *(_QWORD *)(inited + 48) = *v36;
  *(_QWORD *)(inited + 56) = v38;
  sub_23D5AFA60(v34, v35);
  sub_23D5AFA60(v37, v38);
  v39 = sub_23D62FE18(inited);
  v41 = v40;
  swift_setDeallocating();
  swift_arrayDestroy();
  v42 = v90;
  v43 = sub_23D64D2B4(v32, v31, v28, v39, v41);
  if (!v42)
  {
    v60[4] = v32;
    v45 = (uint64_t)v43;
    v46 = v39;
    v47 = v44;
    sub_23D5DDA20(v46, v41);
    v48 = sub_23D5E725C(v31, v28);
    v61 = v60;
    MEMORY[0x24BDAC7A8](v48);
    v90 = v45;
    v60[-4] = v45;
    v60[-3] = v47;
    v60[-2] = v24;
    sub_23D5AE928(&qword_256C7A2A0, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670E44);
    sub_23D66BF4C();
    v60[1] = sub_23D66BF1C();
    v60[2] = v49;
    v71 = v47;
    v60[3] = v31;
    v61 = (_QWORD *)v28;
    if (qword_256C78D88 != -1)
      swift_once();
    v50 = qword_256C891C0;
    v51 = *(_QWORD *)algn_256C891C8;
    type metadata accessor for MembershipVerifier(0);
    sub_23D5AFA60(v50, v51);
    v52 = sub_23D66C1F8();
    v54 = v53;
    v94 = v50;
    v95 = v51;
    sub_23D5AFA60(v50, v51);
    sub_23D64C120(v52, v54);
    sub_23D5DDA20(v52, v54);
    sub_23D5DDA20(v50, v51);
    v55 = v94;
    v56 = v95;
    v92 = v94;
    v93 = v95;
    sub_23D5AFA60(v94, v95);
    v57 = v90;
    v58 = v71;
    sub_23D5AFA60(v90, v71);
    sub_23D64C120(v57, v58);
    sub_23D5DDA20(v57, v58);
    sub_23D5DDA20(v55, v56);
    v59 = v93;
    sub_23D5AE928((unint64_t *)&qword_256C79AC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_23D66C00C();
    __asm { BR              X10 }
  }
  (*(void (**)(char *, uint64_t))(v65 + 8))(v26, v66);
  sub_23D5E725C(v31, v28);
  sub_23D5DDA20(v39, v41);
  return sub_23D5E725C(v31, v28);
}

uint64_t sub_23D631A38(uint64_t a1, uint64_t a2, int a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t inited;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  char *v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;

  v56 = a3;
  v55 = a2;
  v54 = a1;
  v50 = sub_23D66C2DC();
  v49 = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v64 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23D66C330();
  v61 = *(_QWORD *)(v10 - 8);
  v62 = v10;
  MEMORY[0x24BDAC7A8](v10);
  v58 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v63 = type metadata accessor for GKCrypto_SignedRSVP(0);
  MEMORY[0x24BDAC7A8](v63);
  v65 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v53 = type metadata accessor for GKCrypto_RSVP(0);
  MEMORY[0x24BDAC7A8](v53);
  v70 = (uint64_t)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = sub_23D66C2AC();
  v66 = *(_QWORD *)(v14 - 8);
  v67 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = *a4;
  v18 = a4[1];
  v52 = *a5;
  v51 = a5[1];
  v20 = *a6;
  v19 = a6[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  if (qword_256C78D78 != -1)
    swift_once();
  v22 = qword_256C891A0;
  v23 = *(_QWORD *)algn_256C891A8;
  *(_QWORD *)(inited + 32) = qword_256C891A0;
  *(_QWORD *)(inited + 40) = v23;
  *(_QWORD *)(inited + 48) = v17;
  *(_QWORD *)(inited + 56) = v18;
  sub_23D5AFA60(v22, v23);
  sub_23D5AFA60(v17, v18);
  v24 = sub_23D62FE18(inited);
  v26 = v25;
  swift_setDeallocating();
  swift_arrayDestroy();
  v59 = v26;
  v57 = v24;
  if (v19 >> 60 == 15)
  {
    v27 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 16))(v16, v54, v67);
  }
  else
  {
    sub_23D5AFA60(v20, v19);
    sub_23D66C294();
    v27 = sub_23D5E725C(v20, v19);
  }
  v28 = v16;
  v29 = v70;
  MEMORY[0x24BDAC7A8](v27);
  *((_DWORD *)&v49 - 16) = 1;
  v30 = v51;
  *(&v49 - 7) = v52;
  *(&v49 - 6) = v30;
  *(&v49 - 5) = v17;
  *(&v49 - 4) = v18;
  *(&v49 - 3) = v55;
  *((_BYTE *)&v49 - 16) = v56 & 1;
  *(&v49 - 1) = (uint64_t)v28;
  sub_23D5AE928(&qword_256C7A2D0, type metadata accessor for GKCrypto_RSVP, (uint64_t)&unk_23D6710C4);
  v31 = v60;
  v32 = sub_23D66BF4C();
  MEMORY[0x24BDAC7A8](v32);
  *(&v49 - 2) = v29;
  v33 = sub_23D5AE928(&qword_256C791B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D672AAC);
  v34 = v65;
  v60 = v33;
  sub_23D66BF4C();
  v68 = v17;
  v69 = v18;
  v35 = (uint64_t)v34;
  v36 = (uint64_t)v58;
  sub_23D66C264();
  v37 = sub_23D639A0C(&v68, v36);
  v39 = v38;
  (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v36, v62);
  v68 = v37;
  v69 = v39;
  sub_23D5E6898();
  v40 = v64;
  v62 = (uint64_t)v28;
  sub_23D66C2A0();
  if (v31)
  {
    sub_23D5DDA20(v57, v59);
    sub_23D5E6950(v70, type metadata accessor for GKCrypto_RSVP);
    sub_23D5DDA20(v37, v39);
    v47 = v62;
    sub_23D5E6950(v35, type metadata accessor for GKCrypto_SignedRSVP);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v47, v67);
  }
  else
  {
    v41 = sub_23D66C2B8();
    v43 = v42;
    sub_23D5DDA20(*(_QWORD *)(v35 + 8), *(_QWORD *)(v35 + 16));
    *(_QWORD *)(v35 + 8) = v41;
    *(_QWORD *)(v35 + 16) = v43;
    v44 = sub_23D66BF1C();
    v45 = v59;
    v46 = v57;
    v47 = v44;
    (*(void (**)(char *, uint64_t))(v49 + 8))(v40, v50);
    sub_23D5DDA20(v37, v39);
    sub_23D5DDA20(v46, v45);
    sub_23D5E6950(v70, type metadata accessor for GKCrypto_RSVP);
    sub_23D5E6950(v35, type metadata accessor for GKCrypto_SignedRSVP);
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v62, v67);
  }
  return v47;
}

uint64_t sub_23D631FF8(uint64_t a1, char a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v5 = *a3;
  v4 = a3[1];
  v7 = *a4;
  v6 = a4[1];
  if ((a2 & 1) != 0)
    __asm { BR              X12 }
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v8 = 305;
  *(_OWORD *)(v8 + 8) = xmmword_23D673E20;
  *(_QWORD *)(v8 + 24) = 0x800000023D67A3E0;
  *(_QWORD *)(v8 + 32) = 0xD000000000000058;
  *(_QWORD *)(v8 + 40) = 0x800000023D67A0D0;
  swift_willThrow();
  sub_23D5DDA20(v5, v4);
  return sub_23D5E725C(v7, v6);
}

uint64_t sub_23D632138(uint64_t a1, uint64_t *a2, uint64_t a3, unint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  char *v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int (*v37)(uint64_t, uint64_t, uint64_t);
  uint64_t v38;
  _DWORD *v39;
  _DWORD *v40;
  uint64_t v41;
  os_log_type_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  os_log_type_t v49;
  NSObject *v50;
  os_log_type_t v51;
  uint8_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;
  os_log_type_t v64;
  NSObject *v65;
  os_log_type_t v66;
  uint8_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  _DWORD *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  char *v80;
  _OWORD v81[2];
  uint64_t v82;
  char *v83;

  v79 = a4;
  v78 = a1;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
  v7 = MEMORY[0x24BDAC7A8](v6);
  v70 = (uint64_t)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v7);
  v73 = (uint64_t)&v69 - v9;
  v74 = type metadata accessor for GKCrypto_RSVP(0);
  v71 = *(_QWORD *)(v74 - 8);
  v10 = MEMORY[0x24BDAC7A8](v74);
  v75 = (char *)&v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v10);
  v72 = (_DWORD *)((char *)&v69 - v12);
  v77 = sub_23D66C2DC();
  v13 = *(_QWORD *)(v77 - 8);
  MEMORY[0x24BDAC7A8](v77);
  v15 = (char *)&v69 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  v16 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v16);
  v17 = type metadata accessor for GKCrypto_SignedRSVP(0);
  v18 = MEMORY[0x24BDAC7A8](v17);
  v20 = (int *)((char *)&v69 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x24BDAC7A8](v18);
  v22 = (char *)&v69 - v21;
  v23 = a2[1];
  v76 = *a2;
  v82 = 0;
  memset(v81, 0, sizeof(v81));
  sub_23D5AFA60(a3, v79);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C791B8, type metadata accessor for GKCrypto_SignedRSVP, (uint64_t)&unk_23D672AAC);
  v83 = v22;
  v24 = v80;
  result = sub_23D66BF10();
  if (!v24)
  {
    v26 = v23;
    v27 = v76;
    v28 = v77;
    v29 = v78;
    v79 = v13;
    v80 = v15;
    if (*(_DWORD *)v83 != 1)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v41 = sub_23D66BFDC();
      __swift_project_value_buffer(v41, (uint64_t)qword_256C88B78);
      v42 = sub_23D66C588();
      v43 = (uint64_t)v20;
      sub_23D5E7298((uint64_t)v83, (uint64_t)v20, type metadata accessor for GKCrypto_SignedRSVP);
      v44 = sub_23D66BFC4();
      if (os_log_type_enabled(v44, v42))
      {
        v45 = swift_slowAlloc();
        *(_DWORD *)v45 = 67109376;
        v46 = *v20;
        sub_23D5E6950(v43, type metadata accessor for GKCrypto_SignedRSVP);
        LODWORD(v81[0]) = v46;
        sub_23D66C5D0();
        *(_WORD *)(v45 + 8) = 1024;
        LODWORD(v81[0]) = 1;
        sub_23D66C5D0();
        _os_log_impl(&dword_23D5A8000, v44, v42, "invalid version when trying to validate group service message, got %u expected %u", (uint8_t *)v45, 0xEu);
        MEMORY[0x242636844](v45, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v20, type metadata accessor for GKCrypto_SignedRSVP);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v47 = 305;
      *(_OWORD *)(v47 + 8) = xmmword_23D673E30;
      *(_QWORD *)(v47 + 24) = 0x800000023D67A350;
      *(_QWORD *)(v47 + 32) = 0xD000000000000058;
      *(_QWORD *)(v47 + 40) = 0x800000023D67A0D0;
      swift_willThrow();
      return sub_23D5E6950((uint64_t)v83, type metadata accessor for GKCrypto_SignedRSVP);
    }
    v30 = *((_QWORD *)v83 + 2);
    *(_QWORD *)&v81[0] = *((_QWORD *)v83 + 1);
    *((_QWORD *)&v81[0] + 1) = v30;
    sub_23D5AFA60(*(uint64_t *)&v81[0], v30);
    sub_23D5E6898();
    sub_23D66C2C4();
    *(_QWORD *)&v81[0] = v27;
    *((_QWORD *)&v81[0] + 1) = v26;
    v31 = sub_23D639A0C((uint64_t *)v81, v29);
    v33 = v32;
    *(_QWORD *)&v81[0] = v31;
    *((_QWORD *)&v81[0] + 1) = v32;
    v34 = sub_23D66C2E8();
    sub_23D5DDA20(v31, v33);
    if ((v34 & 1) == 0)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v48 = sub_23D66BFDC();
      __swift_project_value_buffer(v48, (uint64_t)qword_256C88B78);
      v49 = sub_23D66C588();
      v50 = sub_23D66BFC4();
      v51 = v49;
      if (os_log_type_enabled(v50, v49))
      {
        v52 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v52 = 0;
        _os_log_impl(&dword_23D5A8000, v50, v51, "invalid signature when trying to validate group service message", v52, 2u);
        MEMORY[0x242636844](v52, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v53 = 383;
      *(_OWORD *)(v53 + 8) = xmmword_23D673E40;
      *(_QWORD *)(v53 + 24) = 0x800000023D67A350;
      *(_QWORD *)(v53 + 32) = 0xD000000000000058;
      *(_QWORD *)(v53 + 40) = 0x800000023D67A0D0;
      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v28);
      return sub_23D5E6950((uint64_t)v83, type metadata accessor for GKCrypto_SignedRSVP);
    }
    v35 = (uint64_t)&v83[*(int *)(v17 + 28)];
    v36 = v73;
    sub_23D5AEF48(v35, v73, &qword_256C791B0);
    v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v71 + 48);
    v38 = v74;
    if (v37(v36, 1, v74) == 1)
    {
      v39 = v72;
      *v72 = 0;
      *((_QWORD *)v39 + 1) = 0;
      *((_BYTE *)v39 + 16) = 1;
      v40 = v39;
      *(_OWORD *)(v39 + 6) = xmmword_23D66DF40;
      *(_OWORD *)(v39 + 10) = xmmword_23D66DF40;
      *(_OWORD *)(v39 + 14) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v36, &qword_256C791B0);
    }
    else
    {
      v40 = v72;
      sub_23D5E7F64(v36, (uint64_t)v72, type metadata accessor for GKCrypto_RSVP);
    }
    v54 = (uint64_t)v75;
    v55 = (uint64_t)v40;
    v56 = *((_QWORD *)v40 + 1);
    v57 = *(unsigned __int8 *)(v55 + 16);
    sub_23D5E6950(v55, type metadata accessor for GKCrypto_RSVP);
    if (v57 == 1)
    {
      v58 = v28;
      v59 = v79;
      if (!v56)
        goto LABEL_27;
    }
    else
    {
      v58 = v28;
      v59 = v79;
      if (v56 < 1)
        goto LABEL_27;
    }
    v60 = v70;
    sub_23D5AEF48(v35, v70, &qword_256C791B0);
    if (v37(v60, 1, v38) == 1)
    {
      *(_DWORD *)v54 = 0;
      *(_QWORD *)(v54 + 8) = 0;
      *(_BYTE *)(v54 + 16) = 1;
      *(_OWORD *)(v54 + 24) = xmmword_23D66DF40;
      *(_OWORD *)(v54 + 40) = xmmword_23D66DF40;
      *(_OWORD *)(v54 + 56) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v60, &qword_256C791B0);
    }
    else
    {
      sub_23D5E7F64(v60, v54, type metadata accessor for GKCrypto_RSVP);
    }
    v61 = *(_QWORD *)(v54 + 8);
    v62 = *(_BYTE *)(v54 + 16);
    sub_23D5E6950(v54, type metadata accessor for GKCrypto_RSVP);
    if ((v62 & 1) != 0 || v61 < 6)
    {
LABEL_32:
      (*(void (**)(char *, uint64_t))(v59 + 8))(v80, v58);
      return sub_23D5E6950((uint64_t)v83, type metadata accessor for GKCrypto_SignedRSVP);
    }
LABEL_27:
    if (qword_256C78B10 != -1)
      swift_once();
    v63 = sub_23D66BFDC();
    __swift_project_value_buffer(v63, (uint64_t)qword_256C88B78);
    v64 = sub_23D66C588();
    v65 = sub_23D66BFC4();
    v66 = v64;
    if (os_log_type_enabled(v65, v64))
    {
      v67 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v67 = 0;
      _os_log_impl(&dword_23D5A8000, v65, v66, "invalid version when trying to validate group service message", v67, 2u);
      MEMORY[0x242636844](v67, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v68 = 382;
    *(_OWORD *)(v68 + 8) = xmmword_23D673E50;
    *(_QWORD *)(v68 + 24) = 0x800000023D67A350;
    *(_QWORD *)(v68 + 32) = 0xD000000000000058;
    *(_QWORD *)(v68 + 40) = 0x800000023D67A0D0;
    swift_willThrow();
    goto LABEL_32;
  }
  return result;
}

uint64_t sub_23D632A4C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  int *v37;
  _OWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  void (*v42)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void (*v46)(void);
  uint64_t v47;
  void (*v48)(void);
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  int v56;
  int v57;
  _BOOL4 v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  os_log_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  void (*v70)(uint64_t, uint64_t);
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  char v77;
  char v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t inited;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  os_log_type_t v94;
  int *v95;
  NSObject *v96;
  os_log_type_t v97;
  uint64_t v98;
  int v99;
  void (*v100)(uint64_t, uint64_t);
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  os_log_type_t v105;
  uint64_t v106;
  NSObject *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  void (*v123)(os_log_t, uint64_t);
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  unint64_t v128;
  void (*v129)(os_log_t, uint64_t);
  os_log_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  os_log_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t result;
  unint64_t v147;
  unint64_t isa;
  uint64_t v149;
  unint64_t v150;
  uint64_t v151;
  os_log_type_t v152;
  int *v153;
  NSObject *v154;
  os_log_type_t v155;
  _BOOL4 v156;
  uint64_t v157;
  uint64_t v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  char v168;
  uint64_t v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  uint64_t v173;
  os_log_type_t v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  unint64_t v178;
  NSObject *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t v185;
  unint64_t v186;
  uint64_t v187;
  unint64_t v188;
  unint64_t v189;
  uint64_t v190;
  unint64_t v191;
  os_log_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  uint64_t v198;
  unsigned int v199;
  uint64_t v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  int *v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  char *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t v215;
  unint64_t v216;
  uint64_t v217;
  void (*v218)(char *, uint64_t);
  uint64_t v219;
  __int128 v220;
  void (*v221)(char *, char *, uint64_t);
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int *v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  unint64_t v229;
  uint64_t *v230;
  uint64_t v231;
  uint64_t v232;
  unint64_t v233;
  uint64_t v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  unint64_t v238;
  char *v239;
  uint64_t *v240;
  uint64_t v241;
  unint64_t v242;
  char *v243;
  void (*v244)(char *, uint64_t);
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  uint64_t v248;
  unint64_t v249;
  unint64_t v250;
  char v251;
  char v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  os_log_type_t v264;
  NSObject *v265;
  uint8_t *v266;
  uint64_t v267;
  uint64_t v268;
  void (*v269)(void);
  uint64_t v270;
  uint64_t v271;
  char *v272;
  char *v273;
  char *v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t v277;
  char *v278;
  char *v279;
  void (*v280)(uint64_t, _QWORD, uint64_t, uint64_t);
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  char *v285;
  unint64_t v286;
  unint64_t v287;
  uint64_t v288;
  os_log_t v289;
  uint64_t v290;
  __int128 v291;
  uint64_t v292;
  os_log_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t v296;
  _OWORD *v297;
  char *v298;
  uint64_t v299;
  _QWORD *v300;
  uint64_t v301;
  uint64_t v302;
  int *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unint64_t v310;
  NSObject *v311;
  uint64_t v312;
  __int128 v313;
  __int128 v314;
  uint64_t v315;
  uint64_t v316;
  unint64_t v317;

  v310 = a5;
  v312 = a4;
  v305 = a3;
  v311 = a2;
  v309 = sub_23D66C258();
  v302 = *(_QWORD *)(v309 - 8);
  MEMORY[0x24BDAC7A8](v309);
  v293 = (os_log_t)((char *)&v269 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0));
  v277 = sub_23D66C330();
  v276 = *(_QWORD *)(v277 - 8);
  v9 = MEMORY[0x24BDAC7A8](v277);
  v273 = (char *)&v269 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v274 = (char *)&v269 - v12;
  v13 = MEMORY[0x24BDAC7A8](v11);
  v278 = (char *)&v269 - v14;
  MEMORY[0x24BDAC7A8](v13);
  v279 = (char *)&v269 - v15;
  v275 = type metadata accessor for MembershipVerifier(0);
  MEMORY[0x24BDAC7A8](v275);
  v272 = (char *)&v269 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7A600);
  MEMORY[0x24BDAC7A8](v17);
  v283 = (uint64_t)&v269 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  v282 = type metadata accessor for GKCrypto_Invite(0);
  v281 = *(_QWORD *)(v282 - 8);
  MEMORY[0x24BDAC7A8](v282);
  v284 = (uint64_t)&v269 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v20 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
  MEMORY[0x24BDAC7A8](v20);
  v285 = (char *)&v269 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  v288 = type metadata accessor for GKCrypto_SignedInvite(0);
  v22 = MEMORY[0x24BDAC7A8](v288);
  v286 = (unint64_t)&v269 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v22);
  v289 = (os_log_t)((char *)&v269 - v24);
  v295 = sub_23D66C210();
  v294 = *(_QWORD *)(v295 - 8);
  MEMORY[0x24BDAC7A8](v295);
  *(_QWORD *)&v291 = (char *)&v269 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  v26 = sub_23D66BE80();
  v27 = MEMORY[0x24BDAC7A8](v26);
  v287 = (unint64_t)&v269 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v27);
  v298 = (char *)&v269 - v29;
  v30 = type metadata accessor for GKCrypto_EncryptedInvitation(0);
  v31 = MEMORY[0x24BDAC7A8](v30);
  v292 = (uint64_t)&v269 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0);
  v33 = MEMORY[0x24BDAC7A8](v31);
  v290 = (uint64_t)&v269 - v34;
  MEMORY[0x24BDAC7A8](v33);
  v36 = (char *)&v269 - v35;
  v308 = *a1;
  v307 = a1[1];
  v37 = (int *)type metadata accessor for Invite(0);
  v38 = (_OWORD *)(a6 + v37[7]);
  v39 = (_QWORD *)(a6 + v37[13]);
  *v39 = 0;
  v39[1] = 0;
  v300 = v39;
  v39[2] = 0xF000000000000000;
  v40 = a6 + v37[14];
  v41 = sub_23D66C2DC();
  v42 = *(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v41 - 8) + 56);
  v306 = v40;
  v280 = v42;
  v42(v40, 1, 1, v41);
  v43 = a6 + v37[16];
  v44 = sub_23D66C2AC();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(void (**)(void))(v45 + 56);
  v301 = v43;
  v47 = v43;
  v48 = v46;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v46)(v47, 1, 1, v44);
  v296 = a6 + v37[6];
  v48();
  v297 = v38;
  *v38 = xmmword_23D66DF30;
  v49 = v310;
  v303 = v37;
  v50 = v37[15];
  v51 = (uint64_t)v36;
  v304 = a6;
  *(_BYTE *)(a6 + v50) = 2;
  v52 = v312;
  v316 = v312;
  v317 = v49;
  v315 = 0;
  v313 = 0u;
  v314 = 0u;
  sub_23D5AFA60(v312, v49);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C7A170, type metadata accessor for GKCrypto_EncryptedInvitation, (uint64_t)&unk_23D66FFBC);
  v53 = v299;
  sub_23D66BF28();
  v299 = v53;
  if (v53)
  {
    sub_23D5DDA20(v52, v49);
    sub_23D5DDA20(v308, v307);
    (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v305, v44);
    (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = v304;
    v60 = v303;
    v61 = v306;
    v62 = v296;
    goto LABEL_25;
  }
  v63 = v292;
  v270 = v41;
  v64 = v293;
  v271 = v45;
  v298 = (char *)v44;
  if (*(_DWORD *)v51 != 1)
  {
    sub_23D5DDA20(v308, v307);
    if (qword_256C78B10 != -1)
      swift_once();
    v93 = sub_23D66BFDC();
    __swift_project_value_buffer(v93, (uint64_t)qword_256C88B78);
    v94 = sub_23D66C588();
    v95 = (int *)v63;
    sub_23D5E7298(v51, v63, type metadata accessor for GKCrypto_EncryptedInvitation);
    v96 = sub_23D66BFC4();
    v97 = v94;
    if (os_log_type_enabled(v96, v94))
    {
      v98 = swift_slowAlloc();
      *(_DWORD *)v98 = 67109376;
      v99 = *v95;
      sub_23D5E6950((uint64_t)v95, type metadata accessor for GKCrypto_EncryptedInvitation);
      LODWORD(v313) = v99;
      sub_23D66C5D0();
      *(_WORD *)(v98 + 8) = 1024;
      LODWORD(v313) = 1;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v96, v97, "invalid protobof version, got %u expected %u", (uint8_t *)v98, 0xEu);
      MEMORY[0x242636844](v98, -1, -1);
    }
    else
    {
      sub_23D5E6950((uint64_t)v95, type metadata accessor for GKCrypto_EncryptedInvitation);
    }
    v132 = v309;
    v133 = v302;
    v134 = v271;

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v135 = 305;
    *(_OWORD *)(v135 + 8) = xmmword_23D673E60;
    *(_QWORD *)(v135 + 24) = 0x800000023D67A2B0;
    *(_QWORD *)(v135 + 32) = 0xD000000000000058;
    *(_QWORD *)(v135 + 40) = 0x800000023D67A0D0;
    swift_willThrow();
    sub_23D5DDA20(v312, v49);
    (*(void (**)(uint64_t, char *))(v134 + 8))(v305, v298);
    (*(void (**)(NSObject *, uint64_t))(v133 + 8))(v311, v132);
    sub_23D5E6950(v51, type metadata accessor for GKCrypto_EncryptedInvitation);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    v59 = v304;
    goto LABEL_19;
  }
  v269 = v48;
  v65 = v291;
  v66 = (uint64_t)v311;
  sub_23D66C228();
  v67 = sub_23D66C1F8();
  v69 = v68;
  v70 = *(void (**)(uint64_t, uint64_t))(v294 + 8);
  v70(v65, v295);
  sub_23D5AFD60(v67, v69);
  v72 = v71;
  v74 = v73;
  sub_23D5DDA20(v67, v69);
  v75 = *(_QWORD *)(v51 + 8);
  v76 = *(_QWORD *)(v51 + 16);
  sub_23D5AFA60(v75, v76);
  sub_23D5E6578(v72, v74);
  v78 = v77;
  sub_23D5DDA20(v75, v76);
  sub_23D5DDA20(v72, v74);
  if ((v78 & 1) == 0)
  {
    v100 = v70;
    v292 = v51;
    sub_23D5DDA20(v308, v307);
    v101 = v309;
    v102 = v302;
    v103 = v299;
    if (qword_256C78B10 != -1)
      swift_once();
    v104 = sub_23D66BFDC();
    __swift_project_value_buffer(v104, (uint64_t)qword_256C88B78);
    v105 = sub_23D66C588();
    (*(void (**)(os_log_t, uint64_t, uint64_t))(v102 + 16))(v64, v66, v101);
    v106 = v290;
    sub_23D5E7298(v292, v290, type metadata accessor for GKCrypto_EncryptedInvitation);
    v107 = sub_23D66BFC4();
    if (os_log_type_enabled(v107, v105))
    {
      v108 = swift_slowAlloc();
      LODWORD(v307) = v105;
      v109 = v108;
      v308 = swift_slowAlloc();
      *(_QWORD *)&v313 = v308;
      *(_DWORD *)v109 = 136315394;
      v288 = v109 + 4;
      v110 = v291;
      v289 = v107;
      sub_23D66C228();
      v111 = sub_23D66C1F8();
      v113 = v112;
      v100(v110, v295);
      sub_23D5AFD60(v111, v113);
      v115 = v114;
      v117 = v116;
      sub_23D5DDA20(v111, v113);
      sub_23D5B06C8(v115, v117);
      v299 = v103;
      v316 = v118;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
      v119 = v102;
      sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
      v120 = sub_23D66C378();
      v122 = v121;
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v115, v117);
      v316 = sub_23D5DDBDC(v120, v122, (uint64_t *)&v313);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      v123 = *(void (**)(os_log_t, uint64_t))(v119 + 8);
      v123(v293, v309);
      *(_WORD *)(v109 + 12) = 2080;
      v124 = v290;
      sub_23D5B06C8(*(_QWORD *)(v290 + 8), *(_QWORD *)(v290 + 16));
      v316 = v125;
      v126 = sub_23D66C378();
      v128 = v127;
      swift_bridgeObjectRelease();
      v316 = sub_23D5DDBDC(v126, v128, (uint64_t *)&v313);
      v129 = v123;
      sub_23D66C5D0();
      v101 = v309;
      swift_bridgeObjectRelease();
      sub_23D5E6950(v124, type metadata accessor for GKCrypto_EncryptedInvitation);
      v130 = v289;
      _os_log_impl(&dword_23D5A8000, v289, (os_log_type_t)v307, "mismatched key in invite, got %s expected %s", (uint8_t *)v109, 0x16u);
      v131 = v308;
      swift_arrayDestroy();
      MEMORY[0x242636844](v131, -1, -1);
      MEMORY[0x242636844](v109, -1, -1);

    }
    else
    {
      v129 = *(void (**)(os_log_t, uint64_t))(v102 + 8);
      v129(v64, v101);
      sub_23D5E6950(v106, type metadata accessor for GKCrypto_EncryptedInvitation);

    }
    v59 = v304;
    v60 = v303;
    v136 = v305;
    v137 = v271;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v138 = 399;
    *(_OWORD *)(v138 + 8) = xmmword_23D673E70;
    *(_QWORD *)(v138 + 24) = 0x800000023D67A2B0;
    *(_QWORD *)(v138 + 32) = 0xD000000000000058;
    *(_QWORD *)(v138 + 40) = 0x800000023D67A0D0;
    swift_willThrow();
    sub_23D5DDA20(v312, v310);
    (*(void (**)(uint64_t, char *))(v137 + 8))(v136, v298);
    v129(v311, v101);
    sub_23D5E6950(v292, type metadata accessor for GKCrypto_EncryptedInvitation);
    v54 = 0;
    v55 = 0;
    v56 = 0;
    v57 = 0;
    v58 = 0;
    goto LABEL_24;
  }
  v80 = *(_QWORD *)(v51 + 24);
  v79 = *(_QWORD *)(v51 + 32);
  v293 = (os_log_t)__swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  v291 = xmmword_23D66DF10;
  *(_OWORD *)(inited + 16) = xmmword_23D66DF10;
  sub_23D5AFA60(v80, v79);
  v82 = v299;
  v83 = v308;
  if (qword_256C78D90 != -1)
    swift_once();
  v84 = qword_256C891D0;
  v85 = *(_QWORD *)algn_256C891D8;
  *(_QWORD *)(inited + 32) = qword_256C891D0;
  *(_QWORD *)(inited + 40) = v85;
  v86 = v307;
  *(_QWORD *)(inited + 48) = v83;
  *(_QWORD *)(inited + 56) = v86;
  sub_23D5AFA60(v84, v85);
  sub_23D5AFA60(v83, v86);
  v87 = sub_23D62FE18(inited);
  v89 = v88;
  swift_setDeallocating();
  swift_arrayDestroy();
  v90 = (uint64_t)v311;
  v91 = sub_23D64CD8C((uint64_t)v311, v80, v79, v87, v89);
  if (!v82)
  {
    v139 = v91;
    v140 = v87;
    v141 = v92;
    sub_23D5DDA20(v140, v89);
    sub_23D5DDA20(v80, v79);
    v315 = 0;
    v313 = 0u;
    v314 = 0u;
    sub_23D5AFA60(v139, v141);
    sub_23D66BE74();
    sub_23D5AE928(&qword_256C7A2F0, type metadata accessor for GKCrypto_SignedInvite, (uint64_t)&unk_23D67122C);
    v142 = v289;
    v143 = v288;
    sub_23D66BF10();
    v144 = v139;
    v145 = v309;
    v147 = v141;
    v290 = v144;
    if (LODWORD(v142->isa) != 1)
    {
      v150 = v141;
      sub_23D5DDA20(v308, v307);
      if (qword_256C78B10 != -1)
        swift_once();
      v151 = sub_23D66BFDC();
      __swift_project_value_buffer(v151, (uint64_t)qword_256C88B78);
      v152 = sub_23D66C588();
      v153 = (int *)v286;
      sub_23D5E7298((uint64_t)v142, v286, type metadata accessor for GKCrypto_SignedInvite);
      v154 = sub_23D66BFC4();
      v155 = v152;
      v156 = os_log_type_enabled(v154, v152);
      v59 = v304;
      v157 = v271;
      if (v156)
      {
        v158 = swift_slowAlloc();
        *(_DWORD *)v158 = 67109376;
        v292 = v51;
        v159 = *v153;
        sub_23D5E6950((uint64_t)v153, type metadata accessor for GKCrypto_SignedInvite);
        LODWORD(v313) = v159;
        v51 = v292;
        sub_23D66C5D0();
        *(_WORD *)(v158 + 8) = 1024;
        LODWORD(v313) = 1;
        v145 = v309;
        sub_23D66C5D0();
        _os_log_impl(&dword_23D5A8000, v154, v155, "unsupported version in invite, got %u expected %u", (uint8_t *)v158, 0xEu);
        MEMORY[0x242636844](v158, -1, -1);
      }
      else
      {
        sub_23D5E6950((uint64_t)v153, type metadata accessor for GKCrypto_SignedInvite);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_WORD *)v160 = 292;
      *(_OWORD *)(v160 + 8) = xmmword_23D673E80;
      *(_QWORD *)(v160 + 24) = 0x800000023D67A2B0;
      *(_QWORD *)(v160 + 32) = 0xD000000000000058;
      *(_QWORD *)(v160 + 40) = 0x800000023D67A0D0;
      swift_willThrow();
      sub_23D5DDA20(v312, v310);
      sub_23D5DDA20(v290, v150);
      (*(void (**)(uint64_t, char *))(v157 + 8))(v305, v298);
      (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v145);
      sub_23D5E6950((uint64_t)v289, type metadata accessor for GKCrypto_SignedInvite);
      v161 = v51;
      goto LABEL_45;
    }
    isa = (unint64_t)v142[2].isa;
    *&v313 = v142[1];
    *((_QWORD *)&v313 + 1) = isa;
    sub_23D5AFA60(v313, isa);
    sub_23D5E6898();
    v149 = (uint64_t)v285;
    sub_23D66C2C4();
    v59 = v304;
    v287 = v147;
    v280(v149, 0, 1, v270);
    sub_23D63D014(v149, v306);
    v162 = v283;
    sub_23D5AEF48((uint64_t)v142 + *(int *)(v143 + 28), v283, &qword_256C7A600);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v281 + 48))(v162, 1, v282) == 1)
    {
      v163 = v284;
      *(_OWORD *)v284 = xmmword_23D66DF40;
      *(_OWORD *)(v163 + 16) = xmmword_23D66DF40;
      *(_OWORD *)(v163 + 32) = xmmword_23D66DF40;
      *(_OWORD *)(v163 + 48) = xmmword_23D66DF40;
      *(_OWORD *)(v163 + 64) = xmmword_23D66DF40;
      *(_OWORD *)(v163 + 80) = xmmword_23D66DF40;
      *(_OWORD *)(v163 + 96) = xmmword_23D66DF40;
      *(_DWORD *)(v163 + 112) = 0;
      *(_OWORD *)(v163 + 120) = xmmword_23D66DF40;
      sub_23D66BE5C();
      sub_23D5AEF8C(v162, &qword_256C7A600);
    }
    else
    {
      v163 = v284;
      sub_23D5E7F64(v162, v284, type metadata accessor for GKCrypto_Invite);
    }
    v165 = *(_QWORD *)v163;
    v164 = *(_QWORD *)(v163 + 8);
    sub_23D5AFA60(*(_QWORD *)v163, v164);
    GroupKitUserID.init(_:)(v165, v164);
    v299 = 0;
    v286 = *((_QWORD *)&v313 + 1);
    v288 = v313;
    v166 = v308;
    v167 = v307;
    sub_23D5E6578(v313, *((uint64_t *)&v313 + 1));
    if ((v168 & 1) == 0)
    {
      if (qword_256C78B10 != -1)
        swift_once();
      v173 = sub_23D66BFDC();
      __swift_project_value_buffer(v173, (uint64_t)qword_256C88B78);
      v174 = sub_23D66C588();
      v175 = v288;
      v176 = v286;
      sub_23D5AFA60(v288, v286);
      v177 = v308;
      v178 = v307;
      sub_23D5AFA60(v308, v307);
      sub_23D5AFA60(v175, v176);
      v179 = sub_23D66BFC4();
      if (os_log_type_enabled(v179, v174))
      {
        v180 = swift_slowAlloc();
        v293 = v179;
        v181 = v180;
        v182 = swift_slowAlloc();
        v292 = v51;
        v299 = v182;
        *(_QWORD *)&v313 = v182;
        *(_DWORD *)v181 = 136315394;
        sub_23D5AFA60(v175, v176);
        v183 = sub_23D66BD30();
        LODWORD(v291) = v174;
        v184 = v183;
        v186 = v185;
        sub_23D5DDA20(v175, v176);
        v316 = sub_23D5DDBDC(v184, v186, (uint64_t *)&v313);
        sub_23D66C5D0();
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v175, v176);
        sub_23D5DDA20(v175, v176);
        *(_WORD *)(v181 + 12) = 2080;
        sub_23D5AFA60(v177, v178);
        v187 = sub_23D66BD30();
        v189 = v188;
        sub_23D5DDA20(v177, v178);
        v190 = v187;
        v191 = v310;
        v316 = sub_23D5DDBDC(v190, v189, (uint64_t *)&v313);
        sub_23D66C5D0();
        v176 = v286;
        swift_bridgeObjectRelease();
        sub_23D5DDA20(v177, v178);
        sub_23D5DDA20(v177, v178);
        v192 = v293;
        _os_log_impl(&dword_23D5A8000, v293, (os_log_type_t)v291, "invitation intended for a different recipient, got %s expected %s", (uint8_t *)v181, 0x16u);
        v193 = v299;
        swift_arrayDestroy();
        v51 = v292;
        MEMORY[0x242636844](v193, -1, -1);
        MEMORY[0x242636844](v181, -1, -1);

        v194 = v309;
        v195 = v302;
        v196 = v298;
      }
      else
      {
        sub_23D5DDA20(v175, v176);
        sub_23D5DDA20(v175, v176);
        sub_23D5DDA20(v177, v178);
        sub_23D5DDA20(v177, v178);

        v194 = v309;
        v195 = v302;
        v196 = v298;
        v191 = v310;
      }
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      v197 = swift_allocError();
      *(_WORD *)v198 = 293;
      *(_OWORD *)(v198 + 8) = xmmword_23D673E90;
      *(_QWORD *)(v198 + 24) = 0x800000023D67A2B0;
      *(_QWORD *)(v198 + 32) = 0xD000000000000058;
      *(_QWORD *)(v198 + 40) = 0x800000023D67A0D0;
      v299 = v197;
      swift_willThrow();
      sub_23D5DDA20(v312, v191);
      sub_23D5DDA20(v288, v176);
      sub_23D5DDA20(v290, v287);
      (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v196);
      (*(void (**)(NSObject *, uint64_t))(v195 + 8))(v311, v194);
      sub_23D5E6950(v284, type metadata accessor for GKCrypto_Invite);
      sub_23D5E6950((uint64_t)v289, type metadata accessor for GKCrypto_SignedInvite);
      sub_23D5E6950(v51, type metadata accessor for GKCrypto_EncryptedInvitation);
      v199 = 5644;
      v61 = v306;
      goto LABEL_67;
    }
    v292 = v51;
    sub_23D5DDA20(v166, v167);
    v169 = v163;
    v170 = *(_QWORD *)(v163 + 80);
    v171 = *(_QWORD *)(v169 + 88);
    sub_23D5AFA60(v170, v171);
    v172 = v299;
    GroupKitUserID.init(_:)(v170, v171);
    if (v172)
    {
      sub_23D5DDA20(v312, v310);
      sub_23D5DDA20(v288, v286);
      sub_23D5DDA20(v290, v287);
      (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
      (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
      sub_23D5E6950(v169, type metadata accessor for GKCrypto_Invite);
      sub_23D5E6950((uint64_t)v142, type metadata accessor for GKCrypto_SignedInvite);
      v161 = v292;
LABEL_45:
      sub_23D5E6950(v161, type metadata accessor for GKCrypto_EncryptedInvitation);
      v54 = 0;
      v55 = 0;
      v56 = 0;
      v57 = 0;
      v58 = 0;
LABEL_19:
      v62 = v296;
      v61 = v306;
LABEL_20:
      v60 = v303;
      goto LABEL_25;
    }
    *(_OWORD *)v59 = v313;
    sub_23D5AFA60(v165, v164);
    GroupKitUserID.init(_:)(v165, v164);
    v299 = 0;
    *(_OWORD *)(v59 + 16) = v313;
    v200 = v284;
    v202 = *(_QWORD *)(v284 + 16);
    v201 = *(_QWORD *)(v284 + 24);
    sub_23D5AFA60(v202, v201);
    v203 = v299;
    GroupID.init(_:)(v202, v201);
    v299 = v203;
    if (v203)
    {
      sub_23D5DDA20(v312, v310);
      sub_23D5DDA20(v288, v286);
      sub_23D5DDA20(v290, v287);
      (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
      (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
      sub_23D5E6950(v200, type metadata accessor for GKCrypto_Invite);
      sub_23D5E6950((uint64_t)v289, type metadata accessor for GKCrypto_SignedInvite);
      sub_23D5E6950(v292, type metadata accessor for GKCrypto_EncryptedInvitation);
      v199 = 5647;
LABEL_66:
      v61 = v306;
      sub_23D5DDA20(*(_QWORD *)v59, *(_QWORD *)(v59 + 8));
LABEL_67:
      v54 = (v199 >> 4) & 1;
      v55 = (v199 >> 6) & 1;
      v56 = (v199 >> 7) & 1;
      v57 = (v199 >> 8) & 1;
      v58 = (int)(v199 << 18) >> 18 < 0;
      if ((v199 & 2) != 0)
        sub_23D5DDA20(*(_QWORD *)(v59 + 16), *(_QWORD *)(v59 + 24));
      v62 = v296;
      goto LABEL_20;
    }
    v204 = v303;
    v205 = v59 + v303[8];
    *(_OWORD *)v205 = v313;
    *(_DWORD *)(v59 + v204[9]) = *(_DWORD *)(v200 + 112);
    v206 = (uint64_t)v311;
    sub_23D66C228();
    v207 = v59 + v204[12];
    v208 = v302;
    v209 = v206;
    v210 = v309;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v302 + 16))(v207, v209, v309);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v208 + 56))(v207, 0, 1, v210);
    v211 = v301;
    sub_23D5AEF8C(v301, &qword_256C79120);
    v212 = v298;
    (*(void (**)(uint64_t, uint64_t, char *))(v271 + 16))(v211, v305, v298);
    ((void (*)(uint64_t, _QWORD, uint64_t, char *))v269)(v211, 0, 1, v212);
    sub_23D66C264();
    v213 = *(_QWORD *)(v200 + 40);
    *(_QWORD *)&v313 = *(_QWORD *)(v200 + 32);
    *((_QWORD *)&v313 + 1) = v213;
    sub_23D5AFA60(v313, v213);
    v214 = v299;
    sub_23D66C324();
    v299 = v214;
    if (v214)
    {
      sub_23D5DDA20(v312, v310);
      sub_23D5DDA20(v288, v286);
      sub_23D5DDA20(v290, v287);
      (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
      (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
      (*(void (**)(char *, uint64_t))(v276 + 8))(v279, v277);
    }
    else
    {
      v215 = *(_QWORD *)(v284 + 48);
      v216 = *(_QWORD *)(v284 + 56);
      sub_23D5AFA60(v215, v216);
      v217 = v299;
      KeyOffset.init(_:)(v215, v216);
      v299 = v217;
      if (!v217)
      {
        v220 = v313;
        v221 = *(void (**)(char *, char *, uint64_t))(v276 + 32);
        v222 = (uint64_t)v272;
        v223 = v277;
        v221(v272, v279, v277);
        v224 = v275;
        v221((char *)(v222 + *(int *)(v275 + 20)), v278, v223);
        *(_OWORD *)(v222 + *(int *)(v224 + 24)) = v220;
        v225 = v303;
        v226 = v304;
        v227 = v304 + v303[10];
        sub_23D5E7F64(v222, v227, type metadata accessor for MembershipVerifier);
        v228 = *(_QWORD *)(v284 + 120);
        v229 = *(_QWORD *)(v284 + 128);
        v230 = (uint64_t *)(v226 + v225[17]);
        *v230 = v228;
        v230[1] = v229;
        v231 = swift_initStackObject();
        *(_OWORD *)(v231 + 16) = v291;
        sub_23D5AFA60(v228, v229);
        if (qword_256C78D78 != -1)
          swift_once();
        v232 = qword_256C891A0;
        v233 = *(_QWORD *)algn_256C891A8;
        *(_QWORD *)(v231 + 32) = qword_256C891A0;
        *(_QWORD *)(v231 + 40) = v233;
        v234 = *(_QWORD *)v205;
        v235 = *(_QWORD *)(v205 + 8);
        *(_QWORD *)(v231 + 48) = *(_QWORD *)v205;
        *(_QWORD *)(v231 + 56) = v235;
        sub_23D5AFA60(v232, v233);
        sub_23D5AFA60(v234, v235);
        v236 = sub_23D62FE18(v231);
        v238 = v237;
        swift_setDeallocating();
        swift_arrayDestroy();
        v239 = v273;
        sub_23D66C264();
        v240 = (uint64_t *)(v227 + *(int *)(v275 + 24));
        v241 = *v240;
        v242 = v240[1];
        sub_23D5AFA60(*v240, v242);
        sub_23D66C30C();
        sub_23D5DDA20(v241, v242);
        v243 = v239;
        v244 = *(void (**)(char *, uint64_t))(v276 + 8);
        v244(v243, v277);
        v245 = sub_23D66C1D4();
        v247 = v246;
        v248 = sub_23D66C1D4();
        v250 = v249;
        sub_23D5E6578(v245, v247);
        v252 = v251;
        sub_23D5DDA20(v248, v250);
        sub_23D5DDA20(v245, v247);
        if ((v252 & 1) != 0)
        {
          v253 = *(_QWORD *)(v284 + 96);
          v254 = *(_QWORD *)(v284 + 104);
          sub_23D5AFA60(v253, v254);
          v255 = v299;
          sub_23D63D05C(v253, v254);
          v299 = v255;
          if (!v255)
          {
            v259 = v256;
            v260 = v257;
            v261 = v258;
            sub_23D5DDA20(v236, v238);
            sub_23D5DDA20(v312, v310);
            sub_23D5DDA20(v288, v286);
            sub_23D5DDA20(v290, v287);
            (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
            (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
            v244(v274, v277);
            sub_23D5E6950(v284, type metadata accessor for GKCrypto_Invite);
            sub_23D5E6950((uint64_t)v289, type metadata accessor for GKCrypto_SignedInvite);
            sub_23D5E6950(v292, type metadata accessor for GKCrypto_EncryptedInvitation);
            v262 = v300;
            result = sub_23D5E7F48(*v300, v300[1], v300[2]);
            *v262 = v259;
            v262[1] = v260;
            v262[2] = v261;
            return result;
          }
        }
        else
        {
          if (qword_256C78B10 != -1)
            swift_once();
          v263 = sub_23D66BFDC();
          __swift_project_value_buffer(v263, (uint64_t)qword_256C88B78);
          v264 = sub_23D66C588();
          v265 = sub_23D66BFC4();
          if (os_log_type_enabled(v265, v264))
          {
            v266 = (uint8_t *)swift_slowAlloc();
            *(_WORD *)v266 = 0;
            _os_log_impl(&dword_23D5A8000, v265, v264, "mismatched verification key derived from invite", v266, 2u);
            MEMORY[0x242636844](v266, -1, -1);
          }

          __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
          sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
          v267 = swift_allocError();
          *(_WORD *)v268 = 294;
          *(_OWORD *)(v268 + 8) = xmmword_23D673EA0;
          *(_QWORD *)(v268 + 24) = 0x800000023D67A2B0;
          *(_QWORD *)(v268 + 32) = 0xD000000000000058;
          *(_QWORD *)(v268 + 40) = 0x800000023D67A0D0;
          v299 = v267;
          swift_willThrow();
        }
        sub_23D5DDA20(v236, v238);
        sub_23D5DDA20(v312, v310);
        sub_23D5DDA20(v288, v286);
        sub_23D5DDA20(v290, v287);
        (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
        (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
        v244(v274, v277);
        sub_23D5E6950(v284, type metadata accessor for GKCrypto_Invite);
        sub_23D5E6950((uint64_t)v289, type metadata accessor for GKCrypto_SignedInvite);
        sub_23D5E6950(v292, type metadata accessor for GKCrypto_EncryptedInvitation);
        v199 = 14303;
        goto LABEL_65;
      }
      sub_23D5DDA20(v312, v310);
      sub_23D5DDA20(v288, v286);
      sub_23D5DDA20(v290, v287);
      (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
      (*(void (**)(NSObject *, uint64_t))(v302 + 8))(v311, v309);
      v218 = *(void (**)(char *, uint64_t))(v276 + 8);
      v219 = v277;
      v218(v278, v277);
      v218(v279, v219);
    }
    sub_23D5E6950(v284, type metadata accessor for GKCrypto_Invite);
    sub_23D5E6950((uint64_t)v289, type metadata accessor for GKCrypto_SignedInvite);
    sub_23D5E6950(v292, type metadata accessor for GKCrypto_EncryptedInvitation);
    v199 = 6047;
LABEL_65:
    v59 = v304;
    goto LABEL_66;
  }
  sub_23D5DDA20(v87, v89);
  sub_23D5DDA20(v80, v79);
  sub_23D5DDA20(v312, v310);
  sub_23D5DDA20(v308, v86);
  (*(void (**)(uint64_t, char *))(v271 + 8))(v305, v298);
  (*(void (**)(uint64_t, uint64_t))(v302 + 8))(v90, v309);
  sub_23D5E6950(v51, type metadata accessor for GKCrypto_EncryptedInvitation);
  v54 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v58 = 0;
  v59 = v304;
  v60 = v303;
LABEL_24:
  v61 = v306;
  v62 = v296;
LABEL_25:
  sub_23D5AEF8C(v62, &qword_256C79120);
  sub_23D5E725C(*(_QWORD *)v297, *((_QWORD *)v297 + 1));
  if (v54)
  {
    sub_23D5DDA20(*(_QWORD *)(v59 + v60[8]), *(_QWORD *)(v59 + v60[8] + 8));
    if (!v55)
    {
LABEL_27:
      if (!v56)
        goto LABEL_28;
      goto LABEL_35;
    }
  }
  else if (!v55)
  {
    goto LABEL_27;
  }
  sub_23D5E6950(v59 + v60[10], type metadata accessor for MembershipVerifier);
  if (!v56)
  {
LABEL_28:
    if (!v57)
      goto LABEL_30;
    goto LABEL_29;
  }
LABEL_35:
  (*(void (**)(uint64_t, uint64_t))(v294 + 8))(v59 + v60[11], v295);
  if (v57)
LABEL_29:
    sub_23D5AEF8C(v59 + v60[12], &qword_256C79170);
LABEL_30:
  sub_23D5E7F48(*v300, v300[1], v300[2]);
  sub_23D5AEF8C(v61, &qword_256C7BC28);
  result = sub_23D5AEF8C(v301, &qword_256C79120);
  if (v58)
    return sub_23D5DDA20(*(_QWORD *)(v59 + v60[17]), *(_QWORD *)(v59 + v60[17] + 8));
  return result;
}

uint64_t sub_23D63527C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  os_log_type_t v30;
  NSObject *v31;
  os_log_type_t v32;
  uint8_t *v33;
  char v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  os_log_type_t v38;
  NSObject *v39;
  uint8_t *v40;
  uint64_t v41;
  uint64_t v42;
  os_log_type_t v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  uint64_t v47;
  NSObject *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  os_log_t v70;
  uint64_t v71;
  os_log_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  os_log_t v87;
  uint64_t v88;
  uint64_t v89[2];
  uint64_t v90;

  v4 = sub_23D66C330();
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v79 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v88 = sub_23D66C2DC();
  v11 = *(_QWORD *)(v88 - 8);
  MEMORY[0x24BDAC7A8](v88);
  v87 = (os_log_t)((char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v13 = type metadata accessor for Invite(0);
  if (*(_BYTE *)(v1 + *(int *)(v13 + 60)) != 2)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v37 = sub_23D66BFDC();
    __swift_project_value_buffer(v37, (uint64_t)qword_256C88B78);
    v38 = sub_23D66C588();
    v39 = sub_23D66BFC4();
    if (os_log_type_enabled(v39, v38))
    {
      v40 = (uint8_t *)swift_slowAlloc();
      v41 = swift_slowAlloc();
      v89[0] = v41;
      *(_DWORD *)v40 = 136315138;
      v90 = sub_23D5DDBDC(0x65526E4F74696E69, 0xEF6E6F6974706563, v89);
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v39, v38, "invalid state when trying to validate invite, current state %s", v40, 0xCu);
      swift_arrayDestroy();
      MEMORY[0x242636844](v41, -1, -1);
      MEMORY[0x242636844](v40, -1, -1);
    }

    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v35 = 299;
    v36 = xmmword_23D673EB0;
    goto LABEL_22;
  }
  v14 = v13;
  v79 = *(int *)(v13 + 60);
  v80 = v1;
  v81 = v2;
  v82 = v7;
  v84 = v5;
  v85 = v4;
  v15 = (uint64_t *)(v1 + *(int *)(v13 + 68));
  v17 = *v15;
  v16 = v15[1];
  v83 = a1;
  v18 = sub_23D66C1F8();
  v20 = v19;
  sub_23D5AFD60(v18, v19);
  v22 = v21;
  v24 = v23;
  sub_23D5DDA20(v18, v20);
  v86 = v17;
  v25 = v16;
  sub_23D5E6578(v22, v24);
  LOBYTE(v18) = v26;
  sub_23D5DDA20(v22, v24);
  if ((v18 & 1) == 0)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v42 = sub_23D66BFDC();
    __swift_project_value_buffer(v42, (uint64_t)qword_256C88B78);
    v43 = sub_23D66C588();
    v44 = v84;
    v45 = v82;
    v46 = v85;
    (*(void (**)(char *, uint64_t, uint64_t))(v84 + 16))(v82, v83, v85);
    v47 = v86;
    sub_23D5AFA60(v86, v25);
    sub_23D5AFA60(v47, v25);
    v48 = sub_23D66BFC4();
    if (os_log_type_enabled(v48, v43))
    {
      v49 = swift_slowAlloc();
      v88 = swift_slowAlloc();
      v89[0] = v88;
      *(_DWORD *)v49 = 136315394;
      v79 = v49 + 4;
      v87 = v48;
      v50 = sub_23D66C1F8();
      LODWORD(v83) = v43;
      v51 = v50;
      v53 = v52;
      sub_23D5AFD60(v50, v52);
      v80 = v25;
      v55 = v54;
      v57 = v56;
      sub_23D5DDA20(v51, v53);
      v58 = v81;
      sub_23D5B06C8(v55, v57);
      v81 = v58;
      v90 = v59;
      __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
      sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
      v60 = sub_23D66C378();
      v61 = v45;
      v63 = v62;
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v55, v57);
      v90 = sub_23D5DDBDC(v60, v63, v89);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v84 + 8))(v61, v85);
      *(_WORD *)(v49 + 12) = 2080;
      v64 = v86;
      v65 = v80;
      sub_23D5B06C8(v86, v80);
      v90 = v66;
      v67 = sub_23D66C378();
      v69 = v68;
      swift_bridgeObjectRelease();
      v90 = sub_23D5DDBDC(v67, v69, v89);
      sub_23D66C5D0();
      swift_bridgeObjectRelease();
      sub_23D5DDA20(v64, v65);
      sub_23D5DDA20(v64, v65);
      v70 = v87;
      _os_log_impl(&dword_23D5A8000, v87, (os_log_type_t)v83, "mismatched key when trying to validate invite, expected %s got %s", (uint8_t *)v49, 0x16u);
      v71 = v88;
      swift_arrayDestroy();
      MEMORY[0x242636844](v71, -1, -1);
      MEMORY[0x242636844](v49, -1, -1);

    }
    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
      sub_23D5DDA20(v47, v25);
      sub_23D5DDA20(v47, v25);

    }
    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v35 = 400;
    v36 = xmmword_23D673EC0;
    goto LABEL_22;
  }
  v27 = v80;
  sub_23D5AEF48(v80 + *(int *)(v14 + 56), (uint64_t)v10, &qword_256C7BC28);
  v28 = v88;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1, v88) == 1)
  {
    sub_23D5AEF8C((uint64_t)v10, &qword_256C7BC28);
    if (qword_256C78B10 != -1)
      swift_once();
    v29 = sub_23D66BFDC();
    __swift_project_value_buffer(v29, (uint64_t)qword_256C88B78);
    v30 = sub_23D66C588();
    v31 = sub_23D66BFC4();
    v32 = v30;
    if (os_log_type_enabled(v31, v30))
    {
      v33 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v33 = 0;
      _os_log_impl(&dword_23D5A8000, v31, v32, "missing signature when trying to validate invite", v33, 2u);
      MEMORY[0x242636844](v33, -1, -1);
    }

    v34 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v35 = 297;
    v36 = xmmword_23D673ED0;
LABEL_22:
    *(_OWORD *)(v35 + 8) = v36;
    *(_QWORD *)(v35 + 24) = 0x800000023D67A250;
    *(_QWORD *)(v35 + 32) = 0xD000000000000058;
    *(_QWORD *)(v35 + 40) = 0x800000023D67A0D0;
    swift_willThrow();
    return v34 & 1;
  }
  v72 = v87;
  (*(void (**)(os_log_t, char *, uint64_t))(v11 + 32))(v87, v10, v28);
  v34 = v27;
  v73 = v81;
  v74 = sub_23D636D2C();
  if (v73)
  {
    (*(void (**)(os_log_t, uint64_t))(v11 + 8))(v72, v28);
  }
  else
  {
    v77 = v74;
    v78 = v75;
    v89[0] = v74;
    v89[1] = v75;
    sub_23D5E6898();
    v34 = sub_23D66C2E8();
    sub_23D5DDA20(v77, v78);
    (*(void (**)(os_log_t, uint64_t))(v11 + 8))(v72, v28);
    if ((v34 & 1) != 0)
      *(_BYTE *)(v27 + v79) = 3;
  }
  return v34 & 1;
}

uint64_t Invite.produceRSVP(nonce:response:)(uint64_t *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  os_log_type_t v19;
  NSObject *v20;
  os_log_type_t v21;
  uint8_t *v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35[2];
  __int128 v36;
  uint64_t v37;

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23D66C2AC();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = *a1;
  v32 = a1[1];
  v33 = v12;
  v13 = *a2;
  v14 = type metadata accessor for Invite(0);
  v15 = *(int *)(v14 + 60);
  v16 = *(unsigned __int8 *)(v2 + v15);
  if ((_DWORD)v16 != 3)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v24 = sub_23D66BFDC();
    __swift_project_value_buffer(v24, (uint64_t)qword_256C88B78);
    v25 = sub_23D66C588();
    v26 = sub_23D66BFC4();
    if (os_log_type_enabled(v26, v25))
    {
      v27 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v36 = swift_slowAlloc();
      *v27 = 136315394;
      __asm { BR              X9 }
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v23 = 299;
    *(_OWORD *)(v23 + 8) = xmmword_23D673EE0;
    *(_QWORD *)(v23 + 24) = 0x800000023D67A0B0;
    *(_QWORD *)(v23 + 32) = 0xD000000000000058;
    goto LABEL_19;
  }
  v17 = v14;
  sub_23D5AEF48(v2 + *(int *)(v14 + 64), v7, &qword_256C79120);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_23D5AEF8C(v7, &qword_256C79120);
    if (qword_256C78B10 != -1)
      swift_once();
    v18 = sub_23D66BFDC();
    __swift_project_value_buffer(v18, (uint64_t)qword_256C88B78);
    v19 = sub_23D66C588();
    v20 = sub_23D66BFC4();
    v21 = v19;
    if (os_log_type_enabled(v20, v19))
    {
      v22 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v22 = 0;
      _os_log_impl(&dword_23D5A8000, v20, v21, "missing signing key when trying to produce RSVP", v22, 2u);
      MEMORY[0x242636844](v22, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v23 = 339;
    *(_OWORD *)(v23 + 8) = xmmword_23D673EF0;
    *(_QWORD *)(v23 + 24) = 0x800000023D67A0B0;
    *(_QWORD *)(v23 + 32) = 0xD000000000000058;
LABEL_19:
    *(_QWORD *)(v23 + 40) = 0x800000023D67A0D0;
    swift_willThrow();
    return v7;
  }
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 32))(v11, v7, v8);
  if (v13)
    v7 = 2;
  else
    v7 = 1;
  v36 = *(_OWORD *)(v2 + *(int *)(v17 + 32));
  v35[0] = v33;
  v35[1] = v32;
  v28 = v2 + *(int *)(v17 + 40);
  v34 = *(_OWORD *)(v28 + *(int *)(type metadata accessor for MembershipVerifier(0) + 24));
  v29 = v37;
  v30 = sub_23D631A38((uint64_t)v11, v7, 1, (uint64_t *)&v36, v35, (uint64_t *)&v34);
  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  }
  else
  {
    v7 = v30;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(_BYTE *)(v2 + v15) = 4;
  }
  return v7;
}

uint64_t sub_23D6360DC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000044, 0x800000023D67A430);
  qword_256C891A0 = result;
  *(_QWORD *)algn_256C891A8 = v1;
  return result;
}

uint64_t sub_23D636114()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000003FLL, 0x800000023D67A1D0);
  qword_256C891B0 = result;
  *(_QWORD *)algn_256C891B8 = v1;
  return result;
}

uint64_t sub_23D63614C()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD00000000000003ALL, 0x800000023D67A210);
  qword_256C891C0 = result;
  *(_QWORD *)algn_256C891C8 = v1;
  return result;
}

uint64_t sub_23D636184()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000037, 0x800000023D67A310);
  qword_256C891D0 = result;
  *(_QWORD *)algn_256C891D8 = v1;
  return result;
}

uint64_t sub_23D6361BC()
{
  uint64_t result;
  uint64_t v1;

  result = sub_23D628188(0xD000000000000038, 0x800000023D67A3A0);
  qword_256C891E0 = result;
  *(_QWORD *)algn_256C891E8 = v1;
  return result;
}

uint64_t sub_23D6361F4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  sub_23D66C8E8();
  sub_23D66C8F4();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  return sub_23D66C90C();
}

uint64_t sub_23D63626C()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  sub_23D66C8F4();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  return sub_23D5DDA20(v1, v2);
}

uint64_t sub_23D6362C4()
{
  uint64_t v0;
  uint64_t v1;
  unint64_t v2;

  v1 = *(_QWORD *)(v0 + 8);
  v2 = *(_QWORD *)(v0 + 16);
  sub_23D66C8E8();
  sub_23D66C8F4();
  sub_23D5AFA60(v1, v2);
  sub_23D66BDA8();
  sub_23D5DDA20(v1, v2);
  return sub_23D66C90C();
}

void sub_23D636338(_QWORD *a1, _QWORD *a2)
{
  if (*a1 == *a2)
    sub_23D5E6578(a1[1], a1[2]);
}

uint64_t ConstructedInvite.encryptedInviteBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)v0;
  sub_23D5AFA60(*(_QWORD *)v0, *(_QWORD *)(v0 + 8));
  return v1;
}

uint64_t ConstructedInvite.keyShare.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t ConstructedInvite.rsvpResponseBlob.getter()
{
  uint64_t v0;
  uint64_t v1;

  v1 = *(_QWORD *)(v0 + 32);
  sub_23D5AFA60(v1, *(_QWORD *)(v0 + 40));
  return v1;
}

BOOL static Invite.InviteResponse.== infix(_:_:)(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return ((*a1 ^ *a2) & 1) == 0;
}

uint64_t Invite.InviteResponse.hash(into:)()
{
  return sub_23D66C8F4();
}

uint64_t Invite.InviteResponse.hashValue.getter()
{
  sub_23D66C8E8();
  sub_23D66C8F4();
  return sub_23D66C90C();
}

uint64_t Invite.invitersID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t Invite.invitedID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t Invite.init(recipientID:recipientDSID:encryptedInviteBlob:)(uint64_t a1, _OWORD *a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  *(_QWORD *)(v5 + 424) = a4;
  *(_QWORD *)(v5 + 432) = a5;
  *(_QWORD *)(v5 + 416) = a1;
  v8 = sub_23D66C2AC();
  *(_QWORD *)(v5 + 440) = v8;
  *(_QWORD *)(v5 + 448) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(v5 + 456) = swift_task_alloc();
  v9 = sub_23D66C258();
  *(_QWORD *)(v5 + 464) = v9;
  *(_QWORD *)(v5 + 472) = *(_QWORD *)(v9 - 8);
  *(_QWORD *)(v5 + 480) = swift_task_alloc();
  type metadata accessor for Invite(0);
  *(_QWORD *)(v5 + 488) = swift_task_alloc();
  *(_QWORD *)(v5 + 496) = type metadata accessor for PCSKeyPair();
  *(_QWORD *)(v5 + 504) = swift_task_alloc();
  *(_OWORD *)(v5 + 512) = *a2;
  v10 = a3[1];
  *(_QWORD *)(v5 + 528) = *a3;
  *(_QWORD *)(v5 + 536) = v10;
  return swift_task_switch();
}

uint64_t sub_23D636550()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t (*v9)(_QWORD, uint64_t, uint64_t);
  _QWORD v10[3];

  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5E6808(&byte_25431AB68, v0 + 16);
  sub_23D5AEF48(v0 + 232, v0 + 352, &qword_25431A828);
  if (*(_QWORD *)(v0 + 376))
  {
    v1 = *(_QWORD *)(v0 + 536);
    v2 = *(_QWORD *)(v0 + 528);
    sub_23D5AEF30((__int128 *)(v0 + 352), v0 + 312);
    sub_23D5E6844((_QWORD *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 336);
    v4 = *(_QWORD *)(v0 + 344);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 312), v3);
    v10[0] = v2;
    v10[1] = v1;
    (*(void (**)(_QWORD *, unint64_t, unint64_t, uint64_t, uint64_t))(v4 + 8))(v10, 0xD000000000000022, 0x800000023D676F50, v3, v4);
    swift_bridgeObjectRelease();
    __swift_destroy_boxed_opaque_existential_1(v0 + 312);
    v5 = *(_QWORD *)(v0 + 296);
    v6 = *(_QWORD *)(v0 + 304);
    __swift_project_boxed_opaque_existential_1((_QWORD *)(v0 + 272), v5);
    v9 = (uint64_t (*)(_QWORD, uint64_t, uint64_t))(**(int **)(v6 + 16) + *(_QWORD *)(v6 + 16));
    v7 = (_QWORD *)swift_task_alloc();
    *(_QWORD *)(v0 + 544) = v7;
    *v7 = v0;
    v7[1] = sub_23D6367E0;
    return v9(*(_QWORD *)(v0 + 504), v5, v6);
  }
  else
  {
    sub_23D5AEF8C(v0 + 352, &qword_25431A828);
    return sub_23D66C720();
  }
}

uint64_t sub_23D6367E0()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(*v1 + 552) = v0;
  swift_task_dealloc();
  if (v0)
    sub_23D5DDA20(*(_QWORD *)(v2 + 512), *(_QWORD *)(v2 + 520));
  return swift_task_switch();
}

uint64_t sub_23D636850()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16[3];

  v1 = *(_QWORD *)(v0 + 552);
  v2 = *(_QWORD *)(v0 + 496);
  v3 = *(_QWORD *)(v0 + 504);
  v5 = *(_QWORD *)(v0 + 480);
  v4 = *(_QWORD *)(v0 + 488);
  v6 = *(_QWORD *)(v0 + 464);
  v7 = *(_QWORD *)(v0 + 472);
  v8 = *(_QWORD *)(v0 + 448);
  v9 = *(_QWORD *)(v0 + 456);
  v11 = *(_QWORD *)(v0 + 432);
  v10 = *(_QWORD *)(v0 + 440);
  v12 = *(_QWORD *)(v0 + 424);
  *(_OWORD *)v16 = *(_OWORD *)(v0 + 512);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v3 + *(int *)(v2 + 20), v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16))(v9, v3, v10);
  sub_23D632A4C(v16, v5, v9, v12, v11, v4);
  if (v1)
  {
    sub_23D5E6950(*(_QWORD *)(v0 + 504), (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
  }
  else
  {
    v13 = *(_QWORD *)(v0 + 488);
    v14 = *(_QWORD *)(v0 + 416);
    sub_23D5E6950(*(_QWORD *)(v0 + 504), (uint64_t (*)(_QWORD))type metadata accessor for PCSKeyPair);
    sub_23D5E7F64(v13, v14, type metadata accessor for Invite);
  }
  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D6369B8()
{
  uint64_t v0;

  sub_23D5DDA20(*(_QWORD *)(v0 + 424), *(_QWORD *)(v0 + 432));
  __swift_destroy_boxed_opaque_existential_1(v0 + 272);
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D636A28(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;

  v8 = sub_23D66C330();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v12, v13);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  v14 = a4 + *(int *)(type metadata accessor for Invite(0) + 40);
  v15 = type metadata accessor for MembershipVerifier(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v14 + *(int *)(v15 + 20), v8);
  v16 = sub_23D66C1F8();
  v18 = v17;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = v16;
  *(_QWORD *)(a1 + 16) = v18;
  return result;
}

uint64_t sub_23D636B38(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t result;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;

  v50 = a4;
  v51 = a5;
  v48 = sub_23D66C330();
  v7 = *(_QWORD *)(v48 - 8);
  MEMORY[0x24BDAC7A8](v48);
  v9 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = a2[2];
  v11 = a2[3];
  v12 = *(_QWORD *)a1;
  v13 = *(_QWORD *)(a1 + 8);
  sub_23D5AFA60(v10, v11);
  sub_23D5DDA20(v12, v13);
  *(_QWORD *)a1 = v10;
  *(_QWORD *)(a1 + 8) = v11;
  v14 = type metadata accessor for Invite(0);
  v15 = *(int *)(v14 + 32);
  v16 = v14;
  v49 = v14;
  v17 = (uint64_t *)((char *)a2 + v15);
  v18 = *v17;
  v19 = v17[1];
  v21 = *(_QWORD *)(a1 + 16);
  v20 = *(_QWORD *)(a1 + 24);
  sub_23D5AFA60(*v17, v19);
  sub_23D5DDA20(v21, v20);
  *(_QWORD *)(a1 + 16) = v18;
  *(_QWORD *)(a1 + 24) = v19;
  v22 = (char *)a2 + *(int *)(v16 + 40);
  v23 = type metadata accessor for MembershipVerifier(0);
  v24 = v48;
  (*(void (**)(char *, char *, uint64_t))(v7 + 16))(v9, &v22[*(int *)(v23 + 20)], v48);
  v25 = sub_23D66C1F8();
  v27 = v26;
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v24);
  sub_23D5DDA20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  *(_QWORD *)(a1 + 32) = v25;
  *(_QWORD *)(a1 + 40) = v27;
  v28 = (uint64_t *)&v22[*(int *)(v23 + 24)];
  v29 = *v28;
  v30 = v28[1];
  v31 = *(_QWORD *)(a1 + 48);
  v32 = *(_QWORD *)(a1 + 56);
  sub_23D5AFA60(*v28, v30);
  sub_23D5DDA20(v31, v32);
  *(_QWORD *)(a1 + 48) = v29;
  *(_QWORD *)(a1 + 56) = v30;
  v33 = *a2;
  v34 = a2[1];
  v35 = *(_QWORD *)(a1 + 80);
  v36 = *(_QWORD *)(a1 + 88);
  sub_23D5AFA60(*a2, v34);
  sub_23D5DDA20(v35, v36);
  *(_QWORD *)(a1 + 80) = v33;
  *(_QWORD *)(a1 + 88) = v34;
  v37 = *(_QWORD *)(a1 + 96);
  v38 = *(_QWORD *)(a1 + 104);
  v40 = v50;
  v39 = v51;
  sub_23D5AFA60(v50, v51);
  sub_23D5DDA20(v37, v38);
  *(_QWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 104) = v39;
  v41 = v49;
  *(_DWORD *)(a1 + 112) = *(_DWORD *)((char *)a2 + *(int *)(v49 + 36));
  v42 = (uint64_t *)((char *)a2 + *(int *)(v41 + 68));
  v43 = *v42;
  v44 = v42[1];
  v45 = *(_QWORD *)(a1 + 120);
  v46 = *(_QWORD *)(a1 + 128);
  sub_23D5AFA60(*v42, v44);
  result = sub_23D5DDA20(v45, v46);
  *(_QWORD *)(a1 + 120) = v43;
  *(_QWORD *)(a1 + 128) = v44;
  return result;
}

uint64_t sub_23D636D2C()
{
  uint64_t *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t inited;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  _BYTE v29[144];
  uint64_t v30;

  v1 = v0;
  v30 = *MEMORY[0x24BDAC8D0];
  v2 = type metadata accessor for Invite(0);
  v3 = (uint64_t *)((char *)v0 + *(int *)(v2 + 52));
  v4 = v3[2];
  if (v4 >> 60 == 15)
  {
    v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v6 = 298;
    *(_OWORD *)(v6 + 8) = xmmword_23D673F00;
    *(_QWORD *)(v6 + 24) = 0x800000023D67A290;
    *(_QWORD *)(v6 + 32) = 0xD000000000000058;
    *(_QWORD *)(v6 + 40) = 0x800000023D67A0D0;
    swift_willThrow();
  }
  else
  {
    v7 = v2;
    v8 = v3[1];
    v26 = v8;
    v27 = *v3;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
    inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_23D66FC50;
    v28 = 0x1000000;
    sub_23D5AFA60(v8, v4);
    *(_QWORD *)(inited + 32) = sub_23D628C44((uint64_t)&v28, (uint64_t)v29);
    *(_QWORD *)(inited + 40) = v10;
    v12 = v1[2];
    v11 = v1[3];
    *(_QWORD *)(inited + 48) = v12;
    *(_QWORD *)(inited + 56) = v11;
    v13 = (uint64_t *)((char *)v1 + *(int *)(v7 + 32));
    v14 = *v13;
    v15 = v13[1];
    *(_QWORD *)(inited + 64) = *v13;
    *(_QWORD *)(inited + 72) = v15;
    v25 = v4;
    v16 = (char *)v1 + *(int *)(v7 + 40);
    v17 = type metadata accessor for MembershipVerifier(0);
    sub_23D5AFA60(v12, v11);
    sub_23D5AFA60(v14, v15);
    *(_QWORD *)(inited + 80) = sub_23D66C1F8();
    *(_QWORD *)(inited + 88) = v18;
    v19 = (uint64_t *)&v16[*(int *)(v17 + 24)];
    v20 = *v19;
    v21 = v19[1];
    *(_QWORD *)(inited + 96) = *v19;
    *(_QWORD *)(inited + 104) = v21;
    v22 = *v1;
    v23 = v1[1];
    *(_QWORD *)(inited + 112) = *v1;
    *(_QWORD *)(inited + 120) = v23;
    *(_QWORD *)(inited + 128) = v26;
    *(_QWORD *)(inited + 136) = v25;
    sub_23D5E7F2C(v27, v26, v25);
    sub_23D5AFA60(v20, v21);
    sub_23D5AFA60(v22, v23);
    v5 = sub_23D62FE18(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    sub_23D5E7F48(v27, v26, v25);
  }
  return v5;
}

uint64_t sub_23D636FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v4 = type metadata accessor for GKCrypto_Invite(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v13 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  sub_23D5E7298(a2, (uint64_t)v7, type metadata accessor for GKCrypto_Invite);
  v8 = a1 + *(int *)(type metadata accessor for GKCrypto_SignedInvite(0) + 28);
  sub_23D5AEF8C(v8, &qword_256C7A600);
  sub_23D5E7F64((uint64_t)v7, v8, type metadata accessor for GKCrypto_Invite);
  (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
  v9 = sub_23D66C2B8();
  v11 = v10;
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = v9;
  *(_QWORD *)(a1 + 16) = v11;
  return result;
}

uint64_t sub_23D6370B4(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;

  v8 = sub_23D66C210();
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = 1;
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_QWORD *)(a1 + 32);
  sub_23D5AFA60(a2, a3);
  sub_23D5DDA20(v12, v13);
  *(_QWORD *)(a1 + 24) = a2;
  *(_QWORD *)(a1 + 32) = a3;
  v14 = type metadata accessor for Invite(0);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a4 + *(int *)(v14 + 44), v8);
  v15 = sub_23D66C1F8();
  v17 = v16;
  sub_23D5AFD60(v15, v16);
  v19 = v18;
  v21 = v20;
  sub_23D5DDA20(v15, v17);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  *(_QWORD *)(a1 + 8) = v19;
  *(_QWORD *)(a1 + 16) = v21;
  return result;
}

uint64_t Invite.validateInviteSignature(invitersKeyBlob:)(uint64_t a1, unint64_t a2)
{
  uint64_t *v2;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20[4];

  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  MEMORY[0x24BDAC7A8](v8);
  v10 = (char *)v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v11 = type metadata accessor for UserKeyingInfo(0);
  MEMORY[0x24BDAC7A8](v11);
  v13 = (uint64_t *)((char *)v20 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0));
  v14 = v2[1];
  v20[0] = *v2;
  v15 = v20[0];
  v20[1] = v14;
  v16 = sub_23D66C2AC();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v16 - 8) + 56))(v10, 1, 1, v16);
  v17 = sub_23D66C258();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v17 - 8) + 56))(v7, 1, 1, v17);
  sub_23D5AFA60(v15, v14);
  sub_23D5AFA60(a1, a2);
  v18 = v20[3];
  sub_23D61F210(v20, a1, a2, (uint64_t)v10, (uint64_t)v7, v13);
  if (!v18)
  {
    LOBYTE(v2) = sub_23D63527C((uint64_t)v13 + *(int *)(v11 + 28));
    sub_23D5E6950((uint64_t)v13, type metadata accessor for UserKeyingInfo);
  }
  return v2 & 1;
}

uint64_t Invite.validateRSVPResponse(rsvpResponseBlob:)(unint64_t a1, unint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  void (**v11)(char *, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t result;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  void (*v26)(char *, char *, uint64_t);
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  os_log_type_t v34;
  NSObject *v35;
  os_log_type_t v36;
  _BOOL4 v37;
  uint64_t v38;
  uint8_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  char *v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  char *v91;
  uint64_t v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108[2];
  uint64_t v109[3];
  uint64_t v110;

  v98 = a1;
  v99 = a2;
  v3 = sub_23D66C210();
  v92 = *(_QWORD *)(v3 - 8);
  v93 = v3;
  MEMORY[0x24BDAC7A8](v3);
  v91 = (char *)&v81 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = sub_23D66C2AC();
  v95 = *(_QWORD *)(v5 - 8);
  v96 = v5;
  MEMORY[0x24BDAC7A8](v5);
  v94 = (char *)&v81 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v7 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799E0);
  MEMORY[0x24BDAC7A8](v7);
  v9 = (char *)&v81 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = sub_23D66C330();
  v11 = *(void (***)(char *, uint64_t, uint64_t, uint64_t))(v10 - 8);
  MEMORY[0x24BDAC7A8](v10);
  v13 = (char *)&v81 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v17 = sub_23D66C258();
  v18 = *(_QWORD *)(v17 - 8);
  MEMORY[0x24BDAC7A8](v17);
  v20 = (char *)&v81 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  v97 = v2;
  v21 = v110;
  result = sub_23D637B68(v98, v99, (uint64_t)&v100);
  if (v21)
    return result;
  v87 = v9;
  v86 = 0;
  v85 = v13;
  v88 = v100;
  v89 = v101;
  v98 = v103;
  v99 = v102;
  v110 = v104;
  v90 = v105;
  v23 = type metadata accessor for Invite(0);
  sub_23D5AEF48(v97 + *(int *)(v23 + 48), (uint64_t)v16, &qword_256C79170);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17) == 1)
  {
    v24 = &qword_256C79170;
  }
  else
  {
    v25 = v18;
    v26 = *(void (**)(char *, char *, uint64_t))(v18 + 32);
    v84 = v20;
    v26(v20, v16, v17);
    v27 = v96;
    v28 = v97 + *(int *)(v23 + 64);
    v29 = v95;
    if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v95 + 48))(v28, 1, v96))
    {
      v16 = v87;
      v11[7](v87, 1, 1, v10);
    }
    else
    {
      v30 = v94;
      (*(void (**)(char *, uint64_t, unint64_t))(v29 + 16))(v94, v28, v27);
      v16 = v87;
      v83 = v25;
      sub_23D66C264();
      v25 = v83;
      (*(void (**)(char *, unint64_t))(v29 + 8))(v30, v27);
      v11[7](v16, 0, 1, v10);
      if (((unsigned int (*)(char *, uint64_t, uint64_t))v11[6])(v16, 1, v10) != 1)
      {
        v94 = (char *)v11;
        v95 = v17;
        ((void (*)(char *, char *, uint64_t))v11[4])(v85, v16, v10);
        v41 = sub_23D66C1F8();
        v87 = (char *)v10;
        v42 = v41;
        v44 = v43;
        sub_23D5AFD60(v41, v43);
        v82 = v45;
        v81 = v46;
        sub_23D5DDA20(v42, v44);
        v47 = v98;
        v48 = v99;
        sub_23D5AFA60(v99, v98);
        v49 = v23;
        v50 = v110;
        v51 = v90;
        sub_23D5AFA60(v110, v90);
        v52 = v91;
        sub_23D66C228();
        v53 = sub_23D66C1F8();
        v55 = v54;
        (*(void (**)(char *, uint64_t))(v92 + 8))(v52, v93);
        sub_23D5AFD60(v53, v55);
        v57 = v56;
        v59 = v58;
        sub_23D5DDA20(v53, v55);
        v60 = v49;
        v61 = (uint64_t *)(v97 + *(int *)(v49 + 32));
        v62 = v61[1];
        v64 = v51;
        v109[0] = *v61;
        v63 = v109[0];
        v109[1] = v62;
        v65 = v57;
        v67 = *(_QWORD *)(v97 + 24);
        v108[0] = *(_QWORD *)(v97 + 16);
        v66 = v108[0];
        v108[1] = v67;
        v100 = v48;
        v101 = v47;
        v102 = v50;
        v103 = v64;
        v93 = v65;
        v104 = v65;
        v105 = v59;
        v96 = v59;
        v68 = v82;
        v69 = v81;
        v106 = v82;
        v107 = v81;
        LODWORD(v53) = *(_DWORD *)(v97 + *(int *)(v60 + 36));
        sub_23D5AFA60(v82, v81);
        v97 = v63;
        sub_23D5AFA60(v63, v62);
        sub_23D5AFA60(v66, v67);
        v70 = v86;
        sub_23D63FF68(v109, v108, &v100, v53);
        v86 = v70;
        if (v70)
        {
          sub_23D5DDA20(v88, v89);
          v71 = v98;
          v72 = v99;
          sub_23D5DDA20(v99, v98);
          v73 = v110;
          v74 = v90;
          sub_23D5DDA20(v110, v90);
          sub_23D5DDA20(v68, v69);
          sub_23D5DDA20(v66, v67);
          sub_23D5DDA20(v97, v62);
          (*((void (**)(char *, char *))v94 + 1))(v85, v87);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v95);
          sub_23D5DDA20(v72, v71);
          v75 = v73;
          v76 = v74;
        }
        else
        {
          sub_23D5DDA20(v88, v89);
          v78 = v98;
          v77 = v99;
          sub_23D5DDA20(v99, v98);
          v79 = v110;
          v80 = v90;
          sub_23D5DDA20(v110, v90);
          sub_23D5DDA20(v68, v69);
          sub_23D5DDA20(v66, v67);
          sub_23D5DDA20(v97, v62);
          (*((void (**)(char *, char *))v94 + 1))(v85, v87);
          (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v95);
          sub_23D5DDA20(v77, v78);
          v75 = v79;
          v76 = v80;
        }
        sub_23D5DDA20(v75, v76);
        sub_23D5DDA20(v93, v96);
        return sub_23D5DDA20(v68, v69);
      }
    }
    (*(void (**)(char *, uint64_t))(v25 + 8))(v84, v17);
    v24 = &qword_256C799E0;
  }
  sub_23D5AEF8C((uint64_t)v16, v24);
  v31 = v110;
  v32 = v98;
  if (qword_256C78B10 != -1)
    swift_once();
  v33 = sub_23D66BFDC();
  __swift_project_value_buffer(v33, (uint64_t)qword_256C88B78);
  v34 = sub_23D66C588();
  v35 = sub_23D66BFC4();
  v36 = v34;
  v37 = os_log_type_enabled(v35, v34);
  v38 = v99;
  if (v37)
  {
    v39 = (uint8_t *)swift_slowAlloc();
    *(_WORD *)v39 = 0;
    _os_log_impl(&dword_23D5A8000, v35, v36, "missing keys when trying to produce RSVPResponse", v39, 2u);
    MEMORY[0x242636844](v39, -1, -1);
  }

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v40 = 339;
  *(_OWORD *)(v40 + 8) = xmmword_23D673F10;
  *(_QWORD *)(v40 + 24) = 0x800000023D67A150;
  *(_QWORD *)(v40 + 32) = 0xD000000000000058;
  *(_QWORD *)(v40 + 40) = 0x800000023D67A0D0;
  swift_willThrow();
  sub_23D5DDA20(v88, v89);
  sub_23D5DDA20(v38, v32);
  return sub_23D5DDA20(v31, v90);
}

uint64_t sub_23D637B68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  os_log_type_t v25;
  NSObject *v26;
  os_log_type_t v27;
  uint8_t *v28;
  uint64_t v29;
  uint64_t v30;
  os_log_type_t v31;
  NSObject *v32;
  _DWORD *v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  unint64_t v43;
  __int128 v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD v49[10];
  uint64_t v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60;

  v49[4] = a3;
  v60 = *MEMORY[0x24BDAC8D0];
  v52 = sub_23D66C354();
  v49[7] = *(_QWORD *)(v52 - 8);
  MEMORY[0x24BDAC7A8](v52);
  v51 = (char *)v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v50 = sub_23D66C018();
  v49[9] = *(_QWORD *)(v50 - 8);
  MEMORY[0x24BDAC7A8](v50);
  v49[8] = (char *)v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v8);
  v9 = type metadata accessor for GKCrypto_RSVPResponse(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v49[6] = (char *)v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v12 = MEMORY[0x24BDAC7A8](v10);
  v49[5] = (char *)v49 - v13;
  MEMORY[0x24BDAC7A8](v12);
  v54 = (char *)v49 - v14;
  v15 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  MEMORY[0x24BDAC7A8](v15);
  v17 = (char *)v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0);
  v18 = sub_23D66C258();
  v19 = *(_QWORD *)(v18 - 8);
  MEMORY[0x24BDAC7A8](v18);
  v55 = (char *)v49 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21 = type metadata accessor for Invite(0);
  v22 = *(unsigned __int8 *)(v3 + *(int *)(v21 + 60));
  if ((_DWORD)v22 != 4)
  {
    if (qword_256C78B10 != -1)
      swift_once();
    v30 = sub_23D66BFDC();
    __swift_project_value_buffer(v30, (uint64_t)qword_256C88B78);
    v31 = sub_23D66C588();
    v32 = sub_23D66BFC4();
    if (os_log_type_enabled(v32, v31))
    {
      v33 = (_DWORD *)swift_slowAlloc();
      *(_QWORD *)&v57 = swift_slowAlloc();
      *v33 = 136315394;
      __asm { BR              X9 }
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v29 = 299;
    *(_OWORD *)(v29 + 8) = xmmword_23D673F20;
    *(_QWORD *)(v29 + 24) = 0x800000023D67A180;
    *(_QWORD *)(v29 + 32) = 0xD000000000000058;
    goto LABEL_18;
  }
  v49[2] = v21;
  v23 = *(int *)(v21 + 48);
  v49[3] = v3;
  sub_23D5AEF48(v3 + v23, (uint64_t)v17, &qword_256C79170);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18) == 1)
  {
    sub_23D5AEF8C((uint64_t)v17, &qword_256C79170);
    if (qword_256C78B10 != -1)
      swift_once();
    v24 = sub_23D66BFDC();
    __swift_project_value_buffer(v24, (uint64_t)qword_256C88B78);
    v25 = sub_23D66C588();
    v26 = sub_23D66BFC4();
    v27 = v25;
    if (os_log_type_enabled(v26, v25))
    {
      v28 = (uint8_t *)swift_slowAlloc();
      *(_WORD *)v28 = 0;
      _os_log_impl(&dword_23D5A8000, v26, v27, "missing secret key when trying to validate RSVPResponse", v28, 2u);
      MEMORY[0x242636844](v28, -1, -1);
    }

    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v29 = 301;
    *(_OWORD *)(v29 + 8) = xmmword_23D673F60;
    *(_QWORD *)(v29 + 24) = 0x800000023D67A180;
    *(_QWORD *)(v29 + 32) = 0xD000000000000058;
LABEL_18:
    *(_QWORD *)(v29 + 40) = 0x800000023D67A0D0;
    return swift_willThrow();
  }
  v34 = v18;
  v35 = v19;
  v36 = v55;
  v37 = v17;
  v38 = v34;
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v55, v37, v34);
  v59 = 0;
  v57 = 0u;
  v58 = 0u;
  sub_23D5AFA60(a1, a2);
  sub_23D66BE74();
  sub_23D5AE928(&qword_256C7A2A0, type metadata accessor for GKCrypto_RSVPResponse, (uint64_t)&unk_23D670E44);
  v39 = v54;
  v40 = v53;
  sub_23D66BF10();
  if (!v40)
  {
    v49[1] = v38;
    v49[0] = v35;
    if (qword_256C78D88 != -1)
      swift_once();
    v41 = xmmword_256C891C0;
    v42 = v39[1];
    v43 = v39[2];
    v56 = xmmword_256C891C0;
    sub_23D5AFA60(xmmword_256C891C0, *((unint64_t *)&xmmword_256C891C0 + 1));
    sub_23D5AFA60(v41, *((unint64_t *)&v41 + 1));
    sub_23D5AFA60(v42, v43);
    sub_23D64C120(v42, v43);
    sub_23D5DDA20(v42, v43);
    sub_23D5DDA20(v41, *((unint64_t *)&v41 + 1));
    v44 = v56;
    v45 = v39[3];
    v46 = v39[4];
    v57 = v56;
    sub_23D5AFA60(v45, v46);
    sub_23D5AFA60(v44, *((unint64_t *)&v44 + 1));
    sub_23D64C120(v45, v46);
    sub_23D5DDA20(v45, v46);
    sub_23D5DDA20(v44, *((unint64_t *)&v44 + 1));
    v47 = *((_QWORD *)&v57 + 1);
    sub_23D5AE928((unint64_t *)&qword_256C79AC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
    sub_23D66C00C();
    __asm { BR              X10 }
  }
  return (*(uint64_t (**)(char *, uint64_t))(v35 + 8))(v36, v38);
}

uint64_t ServiceMessageRequestMetaData.groupID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *v1;
  v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_23D5AFA60(v2, v3);
}

uint64_t ServiceMessageRequestMetaData.groupID.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_23D5DDA20(*(_QWORD *)v1, *(_QWORD *)(v1 + 8));
  *(_QWORD *)v1 = v2;
  *(_QWORD *)(v1 + 8) = v3;
  return result;
}

uint64_t (*ServiceMessageRequestMetaData.groupID.modify())()
{
  return nullsub_1;
}

uint64_t ServiceMessageRequestMetaData.requesterID.getter@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 24);
  *a1 = v2;
  a1[1] = v3;
  return sub_23D5E7284(v2, v3);
}

uint64_t ServiceMessageRequestMetaData.requesterID.setter(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;

  v2 = *a1;
  v3 = a1[1];
  result = sub_23D5E725C(*(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24));
  *(_QWORD *)(v1 + 16) = v2;
  *(_QWORD *)(v1 + 24) = v3;
  return result;
}

uint64_t (*ServiceMessageRequestMetaData.requesterID.modify())()
{
  return nullsub_1;
}

void ServiceMessageRequestMetaData.role.getter(_BYTE *a1@<X8>)
{
  uint64_t v1;

  *a1 = *(_BYTE *)(v1 + 32);
}

_BYTE *ServiceMessageRequestMetaData.role.setter(_BYTE *result)
{
  uint64_t v1;

  *(_BYTE *)(v1 + 32) = *result;
  return result;
}

uint64_t (*ServiceMessageRequestMetaData.role.modify())()
{
  return nullsub_1;
}

uint64_t sub_23D639780(uint64_t a1, int a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7, int a8, uint64_t a9)
{
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;

  v38 = a8;
  v34 = a6;
  v36 = a9;
  v37 = a7;
  v14 = sub_23D66C330();
  v39 = *(_QWORD *)(v14 - 8);
  v40 = v14;
  MEMORY[0x24BDAC7A8](v14);
  v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  v35 = sub_23D66C2AC();
  v17 = *(_QWORD *)(v35 - 8);
  MEMORY[0x24BDAC7A8](v35);
  v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  *(_DWORD *)a1 = a2;
  v20 = *(_QWORD *)(a1 + 24);
  v21 = *(_QWORD *)(a1 + 32);
  sub_23D5AFA60(a3, a4);
  sub_23D5DDA20(v20, v21);
  *(_QWORD *)(a1 + 24) = a3;
  *(_QWORD *)(a1 + 32) = a4;
  v22 = v34;
  sub_23D5AFA60(a5, v34);
  sub_23D5AFD60(a5, v22);
  v24 = v23;
  v26 = v25;
  sub_23D5DDA20(a5, v22);
  sub_23D5DDA20(*(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 48));
  *(_QWORD *)(a1 + 40) = v24;
  *(_QWORD *)(a1 + 48) = v26;
  v27 = v36;
  *(_QWORD *)(a1 + 8) = v37;
  *(_BYTE *)(a1 + 16) = v38 & 1;
  v28 = v35;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v19, v27, v35);
  sub_23D66C264();
  (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v28);
  v29 = sub_23D66C1F8();
  v31 = v30;
  (*(void (**)(char *, uint64_t))(v39 + 8))(v16, v40);
  result = sub_23D5DDA20(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64));
  *(_QWORD *)(a1 + 56) = v29;
  *(_QWORD *)(a1 + 64) = v31;
  return result;
}

uint64_t sub_23D639928(_DWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v10;

  v4 = type metadata accessor for GKCrypto_RSVP(0);
  v5 = *(_QWORD *)(v4 - 8);
  MEMORY[0x24BDAC7A8](v4);
  v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  *a1 = 1;
  sub_23D5E7298(a2, (uint64_t)v7, type metadata accessor for GKCrypto_RSVP);
  v8 = (uint64_t)a1 + *(int *)(type metadata accessor for GKCrypto_SignedRSVP(0) + 28);
  sub_23D5AEF8C(v8, &qword_256C791B0);
  sub_23D5E7F64((uint64_t)v7, v8, type metadata accessor for GKCrypto_RSVP);
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(v5 + 56))(v8, 0, 1, v4);
}

uint64_t sub_23D639A0C(uint64_t *a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  char *v15;
  uint64_t inited;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int (*v21)(char *, uint64_t, uint64_t);
  unint64_t v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t result;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  _BYTE v39[128];
  uint64_t v40;

  v37 = a2;
  v40 = *MEMORY[0x24BDAC8D0];
  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C791B0);
  v5 = MEMORY[0x24BDAC7A8](v4);
  v36 = (uint64_t)&v33 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v5);
  v8 = (char *)&v33 - v7;
  v9 = type metadata accessor for GKCrypto_RSVP(0);
  v10 = *(_QWORD *)(v9 - 8);
  v11 = MEMORY[0x24BDAC7A8](v9);
  v13 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v11);
  v15 = (char *)&v33 - v14;
  v33 = *a1;
  v34 = a1[1];
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790F0);
  inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_23D66E450;
  v38 = bswap32(*v2);
  *(_QWORD *)(inited + 32) = sub_23D628C44((uint64_t)&v38, (uint64_t)v39);
  v35 = inited + 32;
  *(_QWORD *)(inited + 40) = v17;
  if (qword_256C78D98 != -1)
    swift_once();
  v18 = qword_256C891E0;
  v19 = *(_QWORD *)algn_256C891E8;
  *(_QWORD *)(inited + 48) = qword_256C891E0;
  *(_QWORD *)(inited + 56) = v19;
  v20 = (uint64_t)v2 + *(int *)(type metadata accessor for GKCrypto_SignedRSVP(0) + 28);
  sub_23D5AEF48(v20, (uint64_t)v8, &qword_256C791B0);
  v21 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v21(v8, 1, v9) == 1)
  {
    *(_DWORD *)v15 = 0;
    *((_QWORD *)v15 + 1) = 0;
    v15[16] = 1;
    *(_OWORD *)(v15 + 24) = xmmword_23D66DF40;
    *(_OWORD *)(v15 + 40) = xmmword_23D66DF40;
    *(_OWORD *)(v15 + 56) = xmmword_23D66DF40;
    sub_23D5AFA60(v18, v19);
    sub_23D66BE5C();
    sub_23D5AEF8C((uint64_t)v8, &qword_256C791B0);
  }
  else
  {
    sub_23D5E7F64((uint64_t)v8, (uint64_t)v15, type metadata accessor for GKCrypto_RSVP);
    sub_23D5AFA60(v18, v19);
  }
  v22 = *((_QWORD *)v15 + 1);
  v23 = v15[16];
  sub_23D5E6950((uint64_t)v15, type metadata accessor for GKCrypto_RSVP);
  v24 = v33;
  if ((v23 & 1) == 0 && ((v22 & 0x8000000000000000) != 0 || HIDWORD(v22)))
  {
    result = sub_23D66C714();
    __break(1u);
  }
  else
  {
    v38 = bswap32(v22);
    *(_QWORD *)(inited + 64) = sub_23D628C44((uint64_t)&v38, (uint64_t)v39);
    *(_QWORD *)(inited + 72) = v25;
    v26 = v34;
    *(_QWORD *)(inited + 80) = v24;
    *(_QWORD *)(inited + 88) = v26;
    v27 = v36;
    sub_23D5AEF48(v20, v36, &qword_256C791B0);
    if (v21((char *)v27, 1, v9) == 1)
    {
      *(_DWORD *)v13 = 0;
      *((_QWORD *)v13 + 1) = 0;
      v13[16] = 1;
      *(_OWORD *)(v13 + 24) = xmmword_23D66DF40;
      *(_OWORD *)(v13 + 40) = xmmword_23D66DF40;
      *(_OWORD *)(v13 + 56) = xmmword_23D66DF40;
      sub_23D5AFA60(v24, v26);
      sub_23D66BE5C();
      sub_23D5AEF8C(v27, &qword_256C791B0);
    }
    else
    {
      sub_23D5E7F64(v27, (uint64_t)v13, type metadata accessor for GKCrypto_RSVP);
      sub_23D5AFA60(v24, v26);
    }
    v28 = *((_QWORD *)v13 + 3);
    v29 = *((_QWORD *)v13 + 4);
    sub_23D5AFA60(v28, v29);
    sub_23D5E6950((uint64_t)v13, type metadata accessor for GKCrypto_RSVP);
    *(_QWORD *)(inited + 96) = v28;
    *(_QWORD *)(inited + 104) = v29;
    *(_QWORD *)(inited + 112) = sub_23D66C1F8();
    *(_QWORD *)(inited + 120) = v30;
    v31 = sub_23D62FE18(inited);
    swift_setDeallocating();
    swift_arrayDestroy();
    return v31;
  }
  return result;
}

uint64_t type metadata accessor for MembershipVerifier(uint64_t a1)
{
  return sub_23D5F15A0(a1, qword_256C7BBE8);
}

unint64_t sub_23D639E88()
{
  unint64_t result;

  result = qword_256C7BB88;
  if (!qword_256C7BB88)
  {
    result = MEMORY[0x242636790](&protocol conformance descriptor for Invite.InviteResponse, &type metadata for Invite.InviteResponse);
    atomic_store(result, (unint64_t *)&qword_256C7BB88);
  }
  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for MembershipVerifier(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  void (*v8)(uint64_t *, uint64_t *, uint64_t);
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v14 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v14 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23D66C330();
    v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
    v9 = *(int *)(a3 + 24);
    v10 = (uint64_t *)((char *)a1 + v9);
    v11 = (uint64_t *)((char *)a2 + v9);
    v12 = *v11;
    v13 = v11[1];
    sub_23D5AFA60(*v11, v13);
    *v10 = v12;
    v10[1] = v13;
  }
  return a1;
}

uint64_t destroy for MembershipVerifier(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void (*v5)(uint64_t, uint64_t);

  v4 = sub_23D66C330();
  v5 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8);
  v5(a1, v4);
  v5(a1 + *(int *)(a2 + 20), v4);
  return sub_23D5DDA20(*(_QWORD *)(a1 + *(int *)(a2 + 24)), *(_QWORD *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t initializeWithCopy for MembershipVerifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;

  v6 = sub_23D66C330();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *v10;
  v12 = v10[1];
  sub_23D5AFA60(*v10, v12);
  *v9 = v11;
  v9[1] = v12;
  return a1;
}

uint64_t assignWithCopy for MembershipVerifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v6 = sub_23D66C330();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = (uint64_t *)(a1 + v8);
  v10 = (uint64_t *)(a2 + v8);
  v11 = *v10;
  v12 = v10[1];
  sub_23D5AFA60(*v10, v12);
  v13 = *v9;
  v14 = v9[1];
  *v9 = v11;
  v9[1] = v12;
  sub_23D5DDA20(v13, v14);
  return a1;
}

uint64_t initializeWithTake for MembershipVerifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);

  v6 = sub_23D66C330();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 24)) = *(_OWORD *)(a2 + *(int *)(a3 + 24));
  return a1;
}

uint64_t assignWithTake for MembershipVerifier(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  void (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v6 = sub_23D66C330();
  v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  v8 = *(int *)(a3 + 24);
  v9 = *(_QWORD *)(a1 + v8);
  v10 = *(_QWORD *)(a1 + v8 + 8);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  sub_23D5DDA20(v9, v10);
  return a1;
}

uint64_t getEnumTagSinglePayload for MembershipVerifier()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D63A224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v6 = sub_23D66C330();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  v9 = *(_QWORD *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0)
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for MembershipVerifier()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D63A2C0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  _QWORD *v10;

  result = sub_23D66C330();
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  v10 = (_QWORD *)(a1 + *(int *)(a4 + 24));
  *v10 = 0;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_23D63A348()
{
  uint64_t result;
  unint64_t v1;

  result = sub_23D66C330();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t destroy for ConstructedInvite(uint64_t a1)
{
  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  return sub_23D5DDA20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
}

uint64_t *initializeWithCopy for ConstructedInvite(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_23D5AFA60(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v9 = a2[4];
  v8 = a2[5];
  sub_23D5AFA60(v9, v8);
  a1[4] = v9;
  a1[5] = v8;
  return a1;
}

uint64_t *assignWithCopy for ConstructedInvite(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_23D5DDA20(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_23D5DDA20(v10, v11);
  v13 = a2[4];
  v12 = a2[5];
  sub_23D5AFA60(v13, v12);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v13;
  a1[5] = v12;
  sub_23D5DDA20(v14, v15);
  return a1;
}

__n128 __swift_memcpy48_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t *assignWithTake for ConstructedInvite(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_23D5DDA20(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_23D5DDA20(v8, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for ConstructedInvite(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 48))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ConstructedInvite(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 48) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ConstructedInvite()
{
  return &type metadata for ConstructedInvite;
}

uint64_t *initializeBufferWithCopyOfBuffer for Invite(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int (*v16)(char *, uint64_t, uint64_t);
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  uint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  void (*v33)(char *, char *, uint64_t);
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  char *v45;
  char *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  unsigned int (*v71)(char *, uint64_t, uint64_t);

  v5 = *(_DWORD *)(*((_QWORD *)a3 - 1) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = *a2;
    v8 = a2[1];
    sub_23D5AFA60(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    v9 = a2[2];
    v10 = a2[3];
    sub_23D5AFA60(v9, v10);
    a1[2] = v9;
    a1[3] = v10;
    v11 = a3[6];
    v12 = (char *)a1 + v11;
    v13 = (char *)a2 + v11;
    v14 = sub_23D66C2AC();
    v15 = *(_QWORD *)(v14 - 8);
    v16 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48);
    if (v16(v13, 1, v14))
    {
      v17 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
      memcpy(v12, v13, *(_QWORD *)(*(_QWORD *)(v17 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v12, 0, 1, v14);
    }
    v19 = a3[7];
    v20 = (char *)a1 + v19;
    v21 = (uint64_t *)((char *)a2 + v19);
    v22 = v21[1];
    v71 = v16;
    if (v22 >> 60 == 15)
    {
      *(_OWORD *)v20 = *(_OWORD *)v21;
    }
    else
    {
      v23 = *v21;
      sub_23D5AFA60(*v21, v22);
      *(_QWORD *)v20 = v23;
      *((_QWORD *)v20 + 1) = v22;
    }
    v24 = a3[8];
    v25 = (uint64_t *)((char *)a1 + v24);
    v26 = (uint64_t *)((char *)a2 + v24);
    v27 = *v26;
    v28 = v26[1];
    sub_23D5AFA60(*v26, v28);
    *v25 = v27;
    v25[1] = v28;
    v29 = a3[10];
    *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
    v30 = (char *)a1 + v29;
    v31 = (char *)a2 + v29;
    v32 = sub_23D66C330();
    v33 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v32 - 8) + 16);
    v33(v30, v31, v32);
    v34 = type metadata accessor for MembershipVerifier(0);
    v33(&v30[*(int *)(v34 + 20)], &v31[*(int *)(v34 + 20)], v32);
    v35 = *(int *)(v34 + 24);
    v36 = (uint64_t *)&v30[v35];
    v37 = (uint64_t *)&v31[v35];
    v38 = *v37;
    v39 = v37[1];
    sub_23D5AFA60(*v37, v39);
    *v36 = v38;
    v36[1] = v39;
    v40 = a3[11];
    v41 = (char *)a1 + v40;
    v42 = (char *)a2 + v40;
    v43 = sub_23D66C210();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v43 - 8) + 16))(v41, v42, v43);
    v44 = a3[12];
    v45 = (char *)a1 + v44;
    v46 = (char *)a2 + v44;
    v47 = sub_23D66C258();
    v48 = *(_QWORD *)(v47 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
    {
      v49 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
      memcpy(v45, v46, *(_QWORD *)(*(_QWORD *)(v49 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v48 + 16))(v45, v46, v47);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
    }
    v50 = a3[13];
    v51 = (char *)a1 + v50;
    v52 = (char *)a2 + v50;
    v53 = *((_QWORD *)v52 + 2);
    if (v53 >> 60 == 15)
    {
      *(_OWORD *)v51 = *(_OWORD *)v52;
      *((_QWORD *)v51 + 2) = *((_QWORD *)v52 + 2);
    }
    else
    {
      v54 = *((_QWORD *)v52 + 1);
      *(_QWORD *)v51 = *(_QWORD *)v52;
      sub_23D5AFA60(v54, v53);
      *((_QWORD *)v51 + 1) = v54;
      *((_QWORD *)v51 + 2) = v53;
    }
    v55 = a3[14];
    v56 = (char *)a1 + v55;
    v57 = (char *)a2 + v55;
    v58 = sub_23D66C2DC();
    v59 = *(_QWORD *)(v58 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48))(v57, 1, v58))
    {
      v60 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
      memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v60 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
    }
    v61 = a3[16];
    *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
    v62 = (char *)a1 + v61;
    v63 = (char *)a2 + v61;
    if (v71((char *)a2 + v61, 1, v14))
    {
      v64 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
      memcpy(v62, v63, *(_QWORD *)(*(_QWORD *)(v64 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v62, v63, v14);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v15 + 56))(v62, 0, 1, v14);
    }
    v65 = a3[17];
    v66 = (uint64_t *)((char *)a1 + v65);
    v67 = (uint64_t *)((char *)a2 + v65);
    v68 = *v67;
    v69 = v67[1];
    sub_23D5AFA60(*v67, v69);
    *v66 = v68;
    v66[1] = v69;
  }
  return a1;
}

uint64_t destroy for Invite(uint64_t a1, int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int (*v7)(uint64_t, uint64_t, uint64_t);
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  v4 = a1 + a2[6];
  v5 = sub_23D66C2AC();
  v6 = *(_QWORD *)(v5 - 8);
  v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  v8 = (uint64_t *)(a1 + a2[7]);
  v9 = v8[1];
  if (v9 >> 60 != 15)
    sub_23D5DDA20(*v8, v9);
  sub_23D5DDA20(*(_QWORD *)(a1 + a2[8]), *(_QWORD *)(a1 + a2[8] + 8));
  v10 = a1 + a2[10];
  v11 = sub_23D66C330();
  v12 = *(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v11 - 8) + 8);
  v12(v10, v11);
  v13 = type metadata accessor for MembershipVerifier(0);
  v12(v10 + *(int *)(v13 + 20), v11);
  sub_23D5DDA20(*(_QWORD *)(v10 + *(int *)(v13 + 24)), *(_QWORD *)(v10 + *(int *)(v13 + 24) + 8));
  v14 = a1 + a2[11];
  v15 = sub_23D66C210();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v15 - 8) + 8))(v14, v15);
  v16 = a1 + a2[12];
  v17 = sub_23D66C258();
  v18 = *(_QWORD *)(v17 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v16, v17);
  v19 = a1 + a2[13];
  v20 = *(_QWORD *)(v19 + 16);
  if (v20 >> 60 != 15)
    sub_23D5DDA20(*(_QWORD *)(v19 + 8), v20);
  v21 = a1 + a2[14];
  v22 = sub_23D66C2DC();
  v23 = *(_QWORD *)(v22 - 8);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v23 + 48))(v21, 1, v22))
    (*(void (**)(uint64_t, uint64_t))(v23 + 8))(v21, v22);
  v24 = a1 + a2[16];
  if (!v7(v24, 1, v5))
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v24, v5);
  return sub_23D5DDA20(*(_QWORD *)(a1 + a2[17]), *(_QWORD *)(a1 + a2[17] + 8));
}

uint64_t *initializeWithCopy for Invite(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int (*v15)(char *, uint64_t, uint64_t);
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  char *v29;
  uint64_t v30;
  void (*v31)(char *, char *, uint64_t);
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  char *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  char *v60;
  char *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t *v65;
  uint64_t v66;
  unint64_t v67;
  unsigned int (*v69)(char *, uint64_t, uint64_t);

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  a1[2] = v8;
  a1[3] = v9;
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66C2AC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  if (v15(v12, 1, v13))
  {
    v16 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v16 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
  }
  v17 = a3[7];
  v18 = (char *)a1 + v17;
  v19 = (uint64_t *)((char *)a2 + v17);
  v20 = v19[1];
  v69 = v15;
  if (v20 >> 60 == 15)
  {
    *(_OWORD *)v18 = *(_OWORD *)v19;
  }
  else
  {
    v21 = *v19;
    sub_23D5AFA60(*v19, v20);
    *(_QWORD *)v18 = v21;
    *((_QWORD *)v18 + 1) = v20;
  }
  v22 = a3[8];
  v23 = (uint64_t *)((char *)a1 + v22);
  v24 = (uint64_t *)((char *)a2 + v22);
  v25 = *v24;
  v26 = v24[1];
  sub_23D5AFA60(*v24, v26);
  *v23 = v25;
  v23[1] = v26;
  v27 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  v28 = (char *)a1 + v27;
  v29 = (char *)a2 + v27;
  v30 = sub_23D66C330();
  v31 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v30 - 8) + 16);
  v31(v28, v29, v30);
  v32 = type metadata accessor for MembershipVerifier(0);
  v31(&v28[*(int *)(v32 + 20)], &v29[*(int *)(v32 + 20)], v30);
  v33 = *(int *)(v32 + 24);
  v34 = (uint64_t *)&v28[v33];
  v35 = (uint64_t *)&v29[v33];
  v36 = *v35;
  v37 = v35[1];
  sub_23D5AFA60(*v35, v37);
  *v34 = v36;
  v34[1] = v37;
  v38 = a3[11];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 16))(v39, v40, v41);
  v42 = a3[12];
  v43 = (char *)a1 + v42;
  v44 = (char *)a2 + v42;
  v45 = sub_23D66C258();
  v46 = *(_QWORD *)(v45 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v46 + 48))(v44, 1, v45))
  {
    v47 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v43, v44, *(_QWORD *)(*(_QWORD *)(v47 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v46 + 16))(v43, v44, v45);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v46 + 56))(v43, 0, 1, v45);
  }
  v48 = a3[13];
  v49 = (char *)a1 + v48;
  v50 = (char *)a2 + v48;
  v51 = *((_QWORD *)v50 + 2);
  if (v51 >> 60 == 15)
  {
    *(_OWORD *)v49 = *(_OWORD *)v50;
    *((_QWORD *)v49 + 2) = *((_QWORD *)v50 + 2);
  }
  else
  {
    v52 = *((_QWORD *)v50 + 1);
    *(_QWORD *)v49 = *(_QWORD *)v50;
    sub_23D5AFA60(v52, v51);
    *((_QWORD *)v49 + 1) = v52;
    *((_QWORD *)v49 + 2) = v51;
  }
  v53 = a3[14];
  v54 = (char *)a1 + v53;
  v55 = (char *)a2 + v53;
  v56 = sub_23D66C2DC();
  v57 = *(_QWORD *)(v56 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v57 + 48))(v55, 1, v56))
  {
    v58 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
    memcpy(v54, v55, *(_QWORD *)(*(_QWORD *)(v58 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v57 + 16))(v54, v55, v56);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v57 + 56))(v54, 0, 1, v56);
  }
  v59 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v60 = (char *)a1 + v59;
  v61 = (char *)a2 + v59;
  if (v69((char *)a2 + v59, 1, v13))
  {
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v60, v61, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v60, v61, v13);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v60, 0, 1, v13);
  }
  v63 = a3[17];
  v64 = (uint64_t *)((char *)a1 + v63);
  v65 = (uint64_t *)((char *)a2 + v63);
  v66 = *v65;
  v67 = v65[1];
  sub_23D5AFA60(*v65, v67);
  *v64 = v66;
  v64[1] = v67;
  return a1;
}

uint64_t *assignWithCopy for Invite(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t (*v19)(char *, uint64_t, uint64_t);
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  void (*v42)(char *, char *, uint64_t);
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  __int128 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t (*v81)(char *, uint64_t, uint64_t);
  int v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  char *v86;
  char *v87;
  int v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t (*v99)(char *, uint64_t, uint64_t);
  uint64_t v100;

  v6 = *a2;
  v7 = a2[1];
  sub_23D5AFA60(*a2, v7);
  v8 = *a1;
  v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_23D5DDA20(v8, v9);
  v10 = a2[2];
  v11 = a2[3];
  sub_23D5AFA60(v10, v11);
  v12 = a1[2];
  v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_23D5DDA20(v12, v13);
  v14 = a3[6];
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66C2AC();
  v18 = *(_QWORD *)(v17 - 8);
  v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  v20 = v19(v15, 1, v17);
  v99 = v19;
  v21 = v19(v16, 1, v17);
  if (v20)
  {
    if (!v21)
    {
      (*(void (**)(char *, char *, uint64_t))(v18 + 16))(v15, v16, v17);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v21)
  {
    (*(void (**)(char *, uint64_t))(v18 + 8))(v15, v17);
LABEL_6:
    v22 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v15, v16, *(_QWORD *)(*(_QWORD *)(v22 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v18 + 24))(v15, v16, v17);
LABEL_7:
  v23 = a3[7];
  v24 = (uint64_t *)((char *)a1 + v23);
  v25 = (uint64_t *)((char *)a2 + v23);
  v26 = *(uint64_t *)((char *)a2 + v23 + 8);
  v100 = v18;
  if (*(unint64_t *)((char *)a1 + v23 + 8) >> 60 == 15)
  {
    if (v26 >> 60 != 15)
    {
      v27 = *v25;
      sub_23D5AFA60(v27, v26);
      *v24 = v27;
      v24[1] = v26;
      goto LABEL_14;
    }
    goto LABEL_12;
  }
  if (v26 >> 60 == 15)
  {
    sub_23D63B5EC((uint64_t)v24);
LABEL_12:
    *(_OWORD *)v24 = *(_OWORD *)v25;
    goto LABEL_14;
  }
  v28 = *v25;
  sub_23D5AFA60(v28, v26);
  v29 = *v24;
  v30 = v24[1];
  *v24 = v28;
  v24[1] = v26;
  sub_23D5DDA20(v29, v30);
LABEL_14:
  v31 = a3[8];
  v32 = (uint64_t *)((char *)a1 + v31);
  v33 = (uint64_t *)((char *)a2 + v31);
  v34 = *v33;
  v35 = v33[1];
  sub_23D5AFA60(*v33, v35);
  v36 = *v32;
  v37 = v32[1];
  *v32 = v34;
  v32[1] = v35;
  sub_23D5DDA20(v36, v37);
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  v38 = a3[10];
  v39 = (char *)a1 + v38;
  v40 = (char *)a2 + v38;
  v41 = sub_23D66C330();
  v42 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v41 - 8) + 24);
  v42(v39, v40, v41);
  v43 = type metadata accessor for MembershipVerifier(0);
  v42(&v39[*(int *)(v43 + 20)], &v40[*(int *)(v43 + 20)], v41);
  v44 = *(int *)(v43 + 24);
  v45 = (uint64_t *)&v39[v44];
  v46 = (uint64_t *)&v40[v44];
  v47 = *v46;
  v48 = v46[1];
  sub_23D5AFA60(*v46, v48);
  v49 = *v45;
  v50 = v45[1];
  *v45 = v47;
  v45[1] = v48;
  sub_23D5DDA20(v49, v50);
  v51 = a3[11];
  v52 = (char *)a1 + v51;
  v53 = (char *)a2 + v51;
  v54 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v54 - 8) + 24))(v52, v53, v54);
  v55 = a3[12];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = sub_23D66C258();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  LODWORD(v43) = v60(v56, 1, v58);
  v61 = v60(v57, 1, v58);
  if ((_DWORD)v43)
  {
    if (!v61)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v56, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if (v61)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
LABEL_19:
    v62 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v62 - 8) + 64));
    goto LABEL_20;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 24))(v56, v57, v58);
LABEL_20:
  v63 = a3[13];
  v64 = (uint64_t *)((char *)a1 + v63);
  v65 = (uint64_t *)((char *)a2 + v63);
  v66 = *(unint64_t *)((char *)a1 + v63 + 16) >> 60;
  v67 = *(unint64_t *)((char *)a2 + v63 + 16) >> 60;
  if (v66 <= 0xE)
  {
    if (v67 <= 0xE)
    {
      *v64 = *v65;
      v72 = v65[1];
      v73 = v65[2];
      sub_23D5AFA60(v72, v73);
      v74 = v64[1];
      v75 = v64[2];
      v64[1] = v72;
      v64[2] = v73;
      sub_23D5DDA20(v74, v75);
    }
    else
    {
      sub_23D63B620((uint64_t)v64);
      v69 = v65[2];
      *(_OWORD *)v64 = *(_OWORD *)v65;
      v64[2] = v69;
    }
  }
  else if (v67 <= 0xE)
  {
    *v64 = *v65;
    v70 = v65[1];
    v71 = v65[2];
    sub_23D5AFA60(v70, v71);
    v64[1] = v70;
    v64[2] = v71;
  }
  else
  {
    v68 = *(_OWORD *)v65;
    v64[2] = v65[2];
    *(_OWORD *)v64 = v68;
  }
  v76 = a3[14];
  v77 = (char *)a1 + v76;
  v78 = (char *)a2 + v76;
  v79 = sub_23D66C2DC();
  v80 = *(_QWORD *)(v79 - 8);
  v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v80 + 48);
  v82 = v81(v77, 1, v79);
  v83 = v81(v78, 1, v79);
  if (v82)
  {
    if (!v83)
    {
      (*(void (**)(char *, char *, uint64_t))(v80 + 16))(v77, v78, v79);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v80 + 56))(v77, 0, 1, v79);
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v83)
  {
    (*(void (**)(char *, uint64_t))(v80 + 8))(v77, v79);
LABEL_32:
    v84 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
    memcpy(v77, v78, *(_QWORD *)(*(_QWORD *)(v84 - 8) + 64));
    goto LABEL_33;
  }
  (*(void (**)(char *, char *, uint64_t))(v80 + 24))(v77, v78, v79);
LABEL_33:
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v85 = a3[16];
  v86 = (char *)a1 + v85;
  v87 = (char *)a2 + v85;
  v88 = v99((char *)a1 + v85, 1, v17);
  v89 = v99(v87, 1, v17);
  if (!v88)
  {
    if (!v89)
    {
      (*(void (**)(char *, char *, uint64_t))(v100 + 24))(v86, v87, v17);
      goto LABEL_39;
    }
    (*(void (**)(char *, uint64_t))(v100 + 8))(v86, v17);
    goto LABEL_38;
  }
  if (v89)
  {
LABEL_38:
    v90 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v86, v87, *(_QWORD *)(*(_QWORD *)(v90 - 8) + 64));
    goto LABEL_39;
  }
  (*(void (**)(char *, char *, uint64_t))(v100 + 16))(v86, v87, v17);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v100 + 56))(v86, 0, 1, v17);
LABEL_39:
  v91 = a3[17];
  v92 = (uint64_t *)((char *)a1 + v91);
  v93 = (uint64_t *)((char *)a2 + v91);
  v94 = *v93;
  v95 = v93[1];
  sub_23D5AFA60(*v93, v95);
  v96 = *v92;
  v97 = v92[1];
  *v92 = v94;
  v92[1] = v95;
  sub_23D5DDA20(v96, v97);
  return a1;
}

uint64_t sub_23D63B5EC(uint64_t a1)
{
  destroy for GroupKitUserID();
  return a1;
}

uint64_t sub_23D63B620(uint64_t a1)
{
  sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  return a1;
}

_OWORD *initializeWithTake for Invite(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6;
  uint64_t v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void (*v18)(char *, char *, uint64_t);
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t v42;
  unsigned int (*v44)(char *, uint64_t, uint64_t);

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  v7 = a3[6];
  v8 = (char *)a1 + v7;
  v9 = (char *)a2 + v7;
  v10 = sub_23D66C2AC();
  v11 = *(_QWORD *)(v10 - 8);
  v44 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v44(v9, 1, v10))
  {
    v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v8, v9, *(_QWORD *)(*(_QWORD *)(v12 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
  }
  v13 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *(_OWORD *)((char *)a1 + v13) = *(_OWORD *)((char *)a2 + v13);
  v14 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  v15 = (char *)a1 + v14;
  v16 = (char *)a2 + v14;
  v17 = sub_23D66C330();
  v18 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v17 - 8) + 32);
  v18(v15, v16, v17);
  v19 = type metadata accessor for MembershipVerifier(0);
  v18(&v15[*(int *)(v19 + 20)], &v16[*(int *)(v19 + 20)], v17);
  *(_OWORD *)&v15[*(int *)(v19 + 24)] = *(_OWORD *)&v16[*(int *)(v19 + 24)];
  v20 = a3[11];
  v21 = (char *)a1 + v20;
  v22 = (char *)a2 + v20;
  v23 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v23 - 8) + 32))(v21, v22, v23);
  v24 = a3[12];
  v25 = (char *)a1 + v24;
  v26 = (char *)a2 + v24;
  v27 = sub_23D66C258();
  v28 = *(_QWORD *)(v27 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v28 + 48))(v26, 1, v27))
  {
    v29 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v25, v26, *(_QWORD *)(*(_QWORD *)(v29 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v28 + 32))(v25, v26, v27);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v28 + 56))(v25, 0, 1, v27);
  }
  v30 = a3[13];
  v31 = a3[14];
  v32 = (char *)a1 + v30;
  v33 = (char *)a2 + v30;
  *(_OWORD *)v32 = *(_OWORD *)v33;
  *((_QWORD *)v32 + 2) = *((_QWORD *)v33 + 2);
  v34 = (char *)a1 + v31;
  v35 = (char *)a2 + v31;
  v36 = sub_23D66C2DC();
  v37 = *(_QWORD *)(v36 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48))(v35, 1, v36))
  {
    v38 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
    memcpy(v34, v35, *(_QWORD *)(*(_QWORD *)(v38 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v34, v35, v36);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v37 + 56))(v34, 0, 1, v36);
  }
  v39 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v40 = (char *)a1 + v39;
  v41 = (char *)a2 + v39;
  if (v44((char *)a2 + v39, 1, v10))
  {
    v42 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v40, v41, *(_QWORD *)(*(_QWORD *)(v42 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v40, v41, v10);
    (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v11 + 56))(v40, 0, 1, v10);
  }
  *(_OWORD *)((char *)a1 + a3[17]) = *(_OWORD *)((char *)a2 + a3[17]);
  return a1;
}

uint64_t *assignWithTake for Invite(uint64_t *a1, _OWORD *a2, int *a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (*v15)(char *, uint64_t, uint64_t);
  int v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  void (*v32)(char *, char *, uint64_t);
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  char *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t (*v46)(char *, uint64_t, uint64_t);
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t (*v60)(char *, uint64_t, uint64_t);
  int v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  char *v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t (*v74)(char *, uint64_t, uint64_t);
  uint64_t v75;

  v6 = *a1;
  v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v6, v7);
  v8 = a1[2];
  v9 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_23D5DDA20(v8, v9);
  v10 = a3[6];
  v11 = (char *)a1 + v10;
  v12 = (char *)a2 + v10;
  v13 = sub_23D66C2AC();
  v14 = *(_QWORD *)(v13 - 8);
  v15 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  v16 = v15(v11, 1, v13);
  v74 = v15;
  v17 = v15(v12, 1, v13);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v11, v12, v13);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v14 + 56))(v11, 0, 1, v13);
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  if (v17)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v11, v13);
LABEL_6:
    v18 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v11, v12, *(_QWORD *)(*(_QWORD *)(v18 - 8) + 64));
    goto LABEL_7;
  }
  (*(void (**)(char *, char *, uint64_t))(v14 + 40))(v11, v12, v13);
LABEL_7:
  v19 = a3[7];
  v20 = (uint64_t)a1 + v19;
  v21 = (char *)a2 + v19;
  v22 = *(uint64_t *)((char *)a1 + v19 + 8);
  v75 = v14;
  if (v22 >> 60 == 15)
  {
LABEL_10:
    *(_OWORD *)v20 = *(_OWORD *)v21;
    goto LABEL_12;
  }
  v23 = *((_QWORD *)v21 + 1);
  if (v23 >> 60 == 15)
  {
    sub_23D63B5EC(v20);
    goto LABEL_10;
  }
  v24 = *(_QWORD *)v20;
  *(_QWORD *)v20 = *(_QWORD *)v21;
  *(_QWORD *)(v20 + 8) = v23;
  sub_23D5DDA20(v24, v22);
LABEL_12:
  v25 = a3[8];
  v26 = *(uint64_t *)((char *)a1 + v25);
  v27 = *(uint64_t *)((char *)a1 + v25 + 8);
  *(_OWORD *)((char *)a1 + v25) = *(_OWORD *)((char *)a2 + v25);
  sub_23D5DDA20(v26, v27);
  v28 = a3[10];
  *(_DWORD *)((char *)a1 + a3[9]) = *(_DWORD *)((char *)a2 + a3[9]);
  v29 = (char *)a1 + v28;
  v30 = (char *)a2 + v28;
  v31 = sub_23D66C330();
  v32 = *(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v31 - 8) + 40);
  v32(v29, v30, v31);
  v33 = type metadata accessor for MembershipVerifier(0);
  v32(&v29[*(int *)(v33 + 20)], &v30[*(int *)(v33 + 20)], v31);
  v34 = *(int *)(v33 + 24);
  v35 = *(_QWORD *)&v29[v34];
  v36 = *(_QWORD *)&v29[v34 + 8];
  *(_OWORD *)&v29[v34] = *(_OWORD *)&v30[v34];
  sub_23D5DDA20(v35, v36);
  v37 = a3[11];
  v38 = (char *)a1 + v37;
  v39 = (char *)a2 + v37;
  v40 = sub_23D66C210();
  (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v40 - 8) + 40))(v38, v39, v40);
  v41 = a3[12];
  v42 = (char *)a1 + v41;
  v43 = (char *)a2 + v41;
  v44 = sub_23D66C258();
  v45 = *(_QWORD *)(v44 - 8);
  v46 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v45 + 48);
  LODWORD(v33) = v46(v42, 1, v44);
  v47 = v46(v43, 1, v44);
  if ((_DWORD)v33)
  {
    if (!v47)
    {
      (*(void (**)(char *, char *, uint64_t))(v45 + 32))(v42, v43, v44);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v45 + 56))(v42, 0, 1, v44);
      goto LABEL_18;
    }
    goto LABEL_17;
  }
  if (v47)
  {
    (*(void (**)(char *, uint64_t))(v45 + 8))(v42, v44);
LABEL_17:
    v48 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
    memcpy(v42, v43, *(_QWORD *)(*(_QWORD *)(v48 - 8) + 64));
    goto LABEL_18;
  }
  (*(void (**)(char *, char *, uint64_t))(v45 + 40))(v42, v43, v44);
LABEL_18:
  v49 = a3[13];
  v50 = (uint64_t)a1 + v49;
  v51 = (char *)a2 + v49;
  v52 = *(uint64_t *)((char *)a1 + v49 + 16);
  if (v52 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)v50 = *(_OWORD *)v51;
    *(_QWORD *)(v50 + 16) = *((_QWORD *)v51 + 2);
    goto LABEL_23;
  }
  v53 = *((_QWORD *)v51 + 2);
  if (v53 >> 60 == 15)
  {
    sub_23D63B620(v50);
    goto LABEL_21;
  }
  v54 = *(_QWORD *)(v50 + 8);
  *(_OWORD *)v50 = *(_OWORD *)v51;
  *(_QWORD *)(v50 + 16) = v53;
  sub_23D5DDA20(v54, v52);
LABEL_23:
  v55 = a3[14];
  v56 = (char *)a1 + v55;
  v57 = (char *)a2 + v55;
  v58 = sub_23D66C2DC();
  v59 = *(_QWORD *)(v58 - 8);
  v60 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v59 + 48);
  v61 = v60(v56, 1, v58);
  v62 = v60(v57, 1, v58);
  if (v61)
  {
    if (!v62)
    {
      (*(void (**)(char *, char *, uint64_t))(v59 + 32))(v56, v57, v58);
      (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  if (v62)
  {
    (*(void (**)(char *, uint64_t))(v59 + 8))(v56, v58);
LABEL_28:
    v63 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
    memcpy(v56, v57, *(_QWORD *)(*(_QWORD *)(v63 - 8) + 64));
    goto LABEL_29;
  }
  (*(void (**)(char *, char *, uint64_t))(v59 + 40))(v56, v57, v58);
LABEL_29:
  v64 = a3[16];
  *((_BYTE *)a1 + a3[15]) = *((_BYTE *)a2 + a3[15]);
  v65 = (char *)a1 + v64;
  v66 = (char *)a2 + v64;
  v67 = v74((char *)a1 + v64, 1, v13);
  v68 = v74(v66, 1, v13);
  if (!v67)
  {
    if (!v68)
    {
      (*(void (**)(char *, char *, uint64_t))(v75 + 40))(v65, v66, v13);
      goto LABEL_35;
    }
    (*(void (**)(char *, uint64_t))(v75 + 8))(v65, v13);
    goto LABEL_34;
  }
  if (v68)
  {
LABEL_34:
    v69 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
    memcpy(v65, v66, *(_QWORD *)(*(_QWORD *)(v69 - 8) + 64));
    goto LABEL_35;
  }
  (*(void (**)(char *, char *, uint64_t))(v75 + 32))(v65, v66, v13);
  (*(void (**)(char *, _QWORD, uint64_t, uint64_t))(v75 + 56))(v65, 0, 1, v13);
LABEL_35:
  v70 = a3[17];
  v71 = *(uint64_t *)((char *)a1 + v70);
  v72 = *(uint64_t *)((char *)a1 + v70 + 8);
  *(_OWORD *)((char *)a1 + v70) = *(_OWORD *)((char *)a2 + v70);
  sub_23D5DDA20(v71, v72);
  return a1;
}

uint64_t getEnumTagSinglePayload for Invite()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D63BE90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v15;

  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v10 = type metadata accessor for MembershipVerifier(0);
  v7 = *(_QWORD *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v10;
    v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v11 = sub_23D66C210();
  v7 = *(_QWORD *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v11;
    v9 = a3[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v12 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  v7 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v12;
    v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v13 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
  v7 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v13;
    v9 = a3[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }
  v15 = *(unsigned __int8 *)(a1 + a3[15]);
  if (v15 >= 6)
    return v15 - 5;
  else
    return 0;
}

uint64_t storeEnumTagSinglePayload for Invite()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D63BFB4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;

  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79120);
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v12 = type metadata accessor for MembershipVerifier(0);
  v9 = *(_QWORD *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v12;
    v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v13 = sub_23D66C210();
  v9 = *(_QWORD *)(v13 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v13;
    v11 = a4[11];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  v14 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79170);
  v9 = *(_QWORD *)(v14 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v14;
    v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  result = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
  v9 = *(_QWORD *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = result;
    v11 = a4[14];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }
  *(_BYTE *)(a1 + a4[15]) = a2 + 5;
  return result;
}

void sub_23D63C0CC()
{
  unint64_t v0;
  unint64_t v1;
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;

  sub_23D5F5B08(319, qword_256C7B6D0, (void (*)(uint64_t))MEMORY[0x24BDC69D0]);
  if (v0 <= 0x3F)
  {
    type metadata accessor for MembershipVerifier(319);
    if (v1 <= 0x3F)
    {
      sub_23D66C210();
      if (v2 <= 0x3F)
      {
        sub_23D5F5B08(319, &qword_256C7B6C8, (void (*)(uint64_t))MEMORY[0x24BDC6968]);
        if (v3 <= 0x3F)
        {
          sub_23D5F5B08(319, qword_256C7BC98, (void (*)(uint64_t))MEMORY[0x24BDC6A00]);
          if (v4 <= 0x3F)
            swift_initStructMetadata();
        }
      }
    }
  }
}

uint64_t storeEnumTagSinglePayload for Invite.InviteResponse(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 1 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 1) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFF)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFE)
    return ((uint64_t (*)(void))((char *)&loc_23D63C260 + 4 * byte_23D673FA1[v4]))();
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_23D63C294 + 4 * byte_23D673F9C[v4]))();
}

uint64_t sub_23D63C294(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D63C29C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D63C2A4);
  return result;
}

uint64_t sub_23D63C2B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D63C2B8);
  *(_BYTE *)result = a2 + 1;
  return result;
}

uint64_t sub_23D63C2BC(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D63C2C4(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Invite.InviteResponse()
{
  return &type metadata for Invite.InviteResponse;
}

uint64_t initializeWithCopy for ServiceMessageRequestMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t v7;
  uint64_t v8;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v5);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  v6 = (uint64_t *)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if (v7 >> 60 == 15)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
  }
  else
  {
    v8 = *v6;
    sub_23D5AFA60(*v6, *(_QWORD *)(a2 + 24));
    *(_QWORD *)(a1 + 16) = v8;
    *(_QWORD *)(a1 + 24) = v7;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t assignWithCopy for ServiceMessageRequestMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 8);
  sub_23D5AFA60(*(_QWORD *)a2, v5);
  v6 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v5;
  sub_23D5DDA20(v6, v7);
  v8 = (uint64_t *)(a2 + 16);
  v9 = *(_QWORD *)(a2 + 24);
  if (*(_QWORD *)(a1 + 24) >> 60 != 15)
  {
    if (v9 >> 60 != 15)
    {
      v11 = *v8;
      sub_23D5AFA60(*v8, *(_QWORD *)(a2 + 24));
      v12 = *(_QWORD *)(a1 + 16);
      v13 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)(a1 + 16) = v11;
      *(_QWORD *)(a1 + 24) = v9;
      sub_23D5DDA20(v12, v13);
      goto LABEL_8;
    }
    sub_23D63C434(a1 + 16);
    goto LABEL_6;
  }
  if (v9 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)(a1 + 16) = *(_OWORD *)v8;
    goto LABEL_8;
  }
  v10 = *v8;
  sub_23D5AFA60(*v8, *(_QWORD *)(a2 + 24));
  *(_QWORD *)(a1 + 16) = v10;
  *(_QWORD *)(a1 + 24) = v9;
LABEL_8:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t sub_23D63C434(uint64_t a1)
{
  destroy for GroupKitUserID();
  return a1;
}

__n128 __swift_memcpy33_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ServiceMessageRequestMetaData(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;

  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_23D5DDA20(v4, v5);
  v6 = (_QWORD *)(a2 + 16);
  v7 = *(_QWORD *)(a1 + 24);
  if (v7 >> 60 != 15)
  {
    v8 = *(_QWORD *)(a2 + 24);
    if (v8 >> 60 != 15)
    {
      v9 = *(_QWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 16) = *v6;
      *(_QWORD *)(a1 + 24) = v8;
      sub_23D5DDA20(v9, v7);
      goto LABEL_6;
    }
    sub_23D63C434(a1 + 16);
  }
  *(_OWORD *)(a1 + 16) = *(_OWORD *)v6;
LABEL_6:
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceMessageRequestMetaData(uint64_t a1, unsigned int a2)
{
  int v3;
  int v4;
  int v5;

  if (!a2)
    return 0;
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 33))
    return (*(_DWORD *)a1 + 254);
  if (*(unsigned __int8 *)(a1 + 32) <= 2u)
    v3 = 2;
  else
    v3 = *(unsigned __int8 *)(a1 + 32);
  v4 = v3 - 3;
  if (*(unsigned __int8 *)(a1 + 32) < 2u)
    v5 = -1;
  else
    v5 = v4;
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ServiceMessageRequestMetaData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_BYTE *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 254;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 1;
  }
  else
  {
    if (a3 >= 0xFE)
      *(_BYTE *)(result + 33) = 0;
    if (a2)
      *(_BYTE *)(result + 32) = a2 + 2;
  }
  return result;
}

ValueMetadata *type metadata accessor for ServiceMessageRequestMetaData()
{
  return &type metadata for ServiceMessageRequestMetaData;
}

uint64_t destroy for ServiceMessageRequest(uint64_t a1)
{
  return sub_23D63C5F4(*(_QWORD *)a1, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24), *(unsigned __int8 *)(a1 + 32), *(_BYTE *)(a1 + 33), (void (*)(uint64_t, unint64_t))sub_23D5DDA20, (uint64_t (*)(uint64_t, uint64_t))sub_23D63D24C);
}

uint64_t sub_23D63C5F4(uint64_t result, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, void (*a7)(uint64_t, unint64_t), uint64_t (*a8)(uint64_t, uint64_t))
{
  int v8;

  if ((a6 & 1) != 0)
    v8 = 4;
  else
    v8 = 0;
  switch(v8 | (a2 >> 60) & 3)
  {
    case 0uLL:
    case 4uLL:
      goto LABEL_6;
    case 1uLL:
    case 2uLL:
    case 3uLL:
      a2 &= 0xCFFFFFFFFFFFFFFFLL;
LABEL_6:
      a7(result, a2);
      result = a8(a3, a4);
      break;
    default:
      return result;
  }
  return result;
}

uint64_t initializeWithCopy for ServiceMessageRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 33);
  v8 = *(unsigned __int8 *)(a2 + 32);
  sub_23D63C5F4(*(_QWORD *)a2, v4, v5, v6, v8, v7, (void (*)(uint64_t, unint64_t))sub_23D5AFA60, (uint64_t (*)(uint64_t, uint64_t))sub_23D63D248);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = v7;
  return a1;
}

uint64_t assignWithCopy for ServiceMessageRequest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v3 = *(_QWORD *)a2;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(_QWORD *)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_BYTE *)(a2 + 33);
  v8 = *(unsigned __int8 *)(a2 + 32);
  sub_23D63C5F4(*(_QWORD *)a2, v4, v5, v6, v8, v7, (void (*)(uint64_t, unint64_t))sub_23D5AFA60, (uint64_t (*)(uint64_t, uint64_t))sub_23D63D248);
  v9 = *(_QWORD *)a1;
  v10 = *(_QWORD *)(a1 + 8);
  v11 = *(_QWORD *)(a1 + 16);
  v12 = *(_QWORD *)(a1 + 24);
  v13 = *(_BYTE *)(a1 + 33);
  *(_QWORD *)a1 = v3;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 24) = v6;
  v14 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v8;
  *(_BYTE *)(a1 + 33) = v7;
  sub_23D63C5F4(v9, v10, v11, v12, v14, v13, (void (*)(uint64_t, unint64_t))sub_23D5DDA20, (uint64_t (*)(uint64_t, uint64_t))sub_23D63D24C);
  return a1;
}

__n128 __swift_memcpy34_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t assignWithTake for ServiceMessageRequest(uint64_t a1, uint64_t a2)
{
  char v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  uint64_t v11;

  v3 = *(_BYTE *)(a2 + 32);
  v4 = *(_BYTE *)(a2 + 33);
  v5 = *(_QWORD *)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_BYTE *)(a1 + 33);
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v10;
  v11 = *(unsigned __int8 *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  *(_BYTE *)(a1 + 33) = v4;
  sub_23D63C5F4(v5, v7, v6, v8, v11, v9, (void (*)(uint64_t, unint64_t))sub_23D5DDA20, (uint64_t (*)(uint64_t, uint64_t))sub_23D63D24C);
  return a1;
}

uint64_t getEnumTagSinglePayload for ServiceMessageRequest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0x3FC && *(_BYTE *)(a1 + 34))
    return (*(_DWORD *)a1 + 1020);
  v3 = ((*(_QWORD *)(a1 + 8) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 33))) ^ 0x3FF;
  if (v3 >= 0x3FB)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ServiceMessageRequest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3FB)
  {
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)(result + 24) = 0;
    *(_WORD *)(result + 32) = 0;
    *(_QWORD *)result = a2 - 1020;
    *(_QWORD *)(result + 8) = 0;
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 34) = 1;
  }
  else
  {
    if (a3 >= 0x3FC)
      *(_BYTE *)(result + 34) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (-a2 & 3) << 60;
      *(_QWORD *)(result + 16) = 0;
      *(_QWORD *)(result + 24) = 0;
      *(_BYTE *)(result + 32) = 0;
      *(_BYTE *)(result + 33) = -a2 >> 2;
    }
  }
  return result;
}

uint64_t sub_23D63C8C0(uint64_t a1)
{
  int v1;

  if (*(_BYTE *)(a1 + 33))
    v1 = 4;
  else
    v1 = 0;
  return (*(_QWORD *)(a1 + 8) >> 60) & 3 | v1;
}

uint64_t sub_23D63C8E0(uint64_t result)
{
  *(_QWORD *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_23D63C8F0(uint64_t result, char a2)
{
  *(_QWORD *)(result + 8) = *(_QWORD *)(result + 8) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
  *(_BYTE *)(result + 33) = (a2 & 4) != 0;
  return result;
}

ValueMetadata *type metadata accessor for ServiceMessageRequest()
{
  return &type metadata for ServiceMessageRequest;
}

uint64_t getEnumTagSinglePayload for Invite.InternalState(unsigned __int8 *a1, unsigned int a2)
{
  int v2;
  int v3;
  int v4;
  unsigned int v6;
  BOOL v7;
  int v8;

  if (!a2)
    return 0;
  if (a2 < 0xFB)
    goto LABEL_17;
  if (a2 + 5 >= 0xFFFF00)
    v2 = 4;
  else
    v2 = 2;
  if ((a2 + 5) >> 8 < 0xFF)
    v3 = 1;
  else
    v3 = v2;
  if (v3 == 4)
  {
    v4 = *(_DWORD *)(a1 + 1);
    if (v4)
      return (*a1 | (v4 << 8)) - 5;
  }
  else
  {
    if (v3 == 2)
    {
      v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1))
        goto LABEL_17;
      return (*a1 | (v4 << 8)) - 5;
    }
    v4 = a1[1];
    if (a1[1])
      return (*a1 | (v4 << 8)) - 5;
  }
LABEL_17:
  v6 = *a1;
  v7 = v6 >= 6;
  v8 = v6 - 6;
  if (!v7)
    v8 = -1;
  return (v8 + 1);
}

uint64_t storeEnumTagSinglePayload for Invite.InternalState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  int v3;
  uint64_t v4;

  if (a3 + 5 >= 0xFFFF00)
    v3 = 4;
  else
    v3 = 2;
  if ((a3 + 5) >> 8 < 0xFF)
    LODWORD(v4) = 1;
  else
    LODWORD(v4) = v3;
  if (a3 >= 0xFB)
    v4 = v4;
  else
    v4 = 0;
  if (a2 <= 0xFA)
    return ((uint64_t (*)(void))((char *)&loc_23D63C9F8 + 4 * byte_23D673FB0[v4]))();
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_23D63CA2C + 4 * byte_23D673FAB[v4]))();
}

uint64_t sub_23D63CA2C(uint64_t result)
{
  char v1;

  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D63CA34(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2)
    JUMPOUT(0x23D63CA3CLL);
  return result;
}

uint64_t sub_23D63CA48(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2)
    JUMPOUT(0x23D63CA50);
  *(_BYTE *)result = a2 + 5;
  return result;
}

uint64_t sub_23D63CA54(uint64_t result)
{
  int v1;

  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_23D63CA5C(uint64_t result)
{
  __int16 v1;

  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Invite.InternalState()
{
  return &type metadata for Invite.InternalState;
}

uint64_t destroy for GKSHADigest(uint64_t a1)
{
  return sub_23D5DDA20(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
}

_QWORD *_s14GroupKitCrypto11GKSHADigestVwCP_0(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;

  v3 = a2[1];
  *a1 = *a2;
  v4 = a2[2];
  sub_23D5AFA60(v3, v4);
  a1[1] = v3;
  a1[2] = v4;
  return a1;
}

_QWORD *assignWithCopy for GKSHADigest(_QWORD *a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;

  *a1 = *a2;
  v3 = a2[1];
  v4 = a2[2];
  sub_23D5AFA60(v3, v4);
  v5 = a1[1];
  v6 = a1[2];
  a1[1] = v3;
  a1[2] = v4;
  sub_23D5DDA20(v5, v6);
  return a1;
}

__n128 __swift_memcpy24_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for GKSHADigest(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;

  v3 = *(_QWORD *)(a2 + 16);
  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(_QWORD *)(a1 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = v3;
  sub_23D5DDA20(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for GKSHADigest(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 24))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 16) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 16) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GKSHADigest(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 24) = 0;
    if (a2)
    {
      *(_QWORD *)(result + 8) = 0;
      *(_QWORD *)(result + 16) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GKSHADigest()
{
  return &type metadata for GKSHADigest;
}

unint64_t sub_23D63CC24()
{
  unint64_t result;

  result = qword_256C7BCF8;
  if (!qword_256C7BCF8)
  {
    result = MEMORY[0x242636790](&unk_23D674178, &type metadata for GKSHADigest);
    atomic_store(result, (unint64_t *)&qword_256C7BCF8);
  }
  return result;
}

unint64_t sub_23D63CC6C()
{
  unint64_t result;

  result = qword_256C7BD00[0];
  if (!qword_256C7BD00[0])
  {
    result = MEMORY[0x242636790](&unk_23D674220, &type metadata for Invite.InternalState);
    atomic_store(result, qword_256C7BD00);
  }
  return result;
}

void sub_23D63CCB0(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23D63CD18()
{
  return sub_23D66BD54();
}

uint64_t sub_23D63CEAC(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23D66BC88();
  if (!result || (result = sub_23D66BCAC(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23D66BCA0();
      return sub_23D66BD54();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23D63CF50(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = sub_23D66BC88();
  if (!result || (result = sub_23D66BCAC(), !__OFSUB__(a1, result)))
  {
    if (!__OFSUB__(a2, a1))
    {
      sub_23D66BCA0();
      sub_23D66C354();
      sub_23D5AE928((unint64_t *)&qword_256C79AC0, (uint64_t (*)(uint64_t))MEMORY[0x24BDC6AF8], MEMORY[0x24BDC6AE8]);
      return sub_23D66BFF4();
    }
    __break(1u);
  }
  __break(1u);
  return result;
}

uint64_t sub_23D63D014(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BC28);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

void sub_23D63D05C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }
}

uint64_t sub_23D63D094()
{
  unint64_t v0;
  uint64_t v1;
  uint64_t v3;

  if (BYTE6(v0) == 32)
    return 32;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
  swift_allocError();
  *(_WORD *)v3 = 296;
  *(_OWORD *)(v3 + 8) = xmmword_23D673F70;
  *(_OWORD *)(v3 + 24) = xmmword_23D673F80;
  *(_QWORD *)(v3 + 40) = 0x800000023D67A0D0;
  swift_willThrow();
  return sub_23D5DDA20(v1, v0);
}

uint64_t sub_23D63D18C(uint64_t a1)
{
  uint64_t v1;

  return sub_23D639780(a1, *(_DWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40), *(_QWORD *)(v1 + 48), *(_QWORD *)(v1 + 56), *(unsigned __int8 *)(v1 + 64), *(_QWORD *)(v1 + 72));
}

uint64_t sub_23D63D1C4(_DWORD *a1)
{
  uint64_t v1;

  return sub_23D639928(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23D63D1DC(uint64_t a1)
{
  uint64_t v1;

  return sub_23D636A28(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23D63D1F8(uint64_t a1)
{
  uint64_t v1;

  return sub_23D636B38(a1, *(uint64_t **)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 40));
}

uint64_t sub_23D63D214(uint64_t a1)
{
  uint64_t v1;

  return sub_23D636FB4(a1, *(_QWORD *)(v1 + 16));
}

uint64_t sub_23D63D22C(uint64_t a1)
{
  uint64_t v1;

  return sub_23D6370B4(a1, *(_QWORD *)(v1 + 16), *(_QWORD *)(v1 + 24), *(_QWORD *)(v1 + 32));
}

uint64_t sub_23D63D254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void))(a5 + 8))();
}

uint64_t sub_23D63D26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 16) + *(_QWORD *)(a3 + 16));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23D63F7FC;
  return v9(a1, a2, a3);
}

uint64_t sub_23D63D2E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 24) + *(_QWORD *)(a3 + 24));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23D63F7FC;
  return v9(a1, a2, a3);
}

uint64_t sub_23D63D364(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v7;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);

  v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))(**(int **)(a3 + 32) + *(_QWORD *)(a3 + 32));
  v7 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v3 + 16) = v7;
  *v7 = v3;
  v7[1] = sub_23D63D3E0;
  return v9(a1, a2, a3);
}

uint64_t sub_23D63D3E0()
{
  uint64_t *v0;
  uint64_t v2;

  v2 = *v0;
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23D63D428(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 40))();
}

uint64_t sub_23D63D440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t result;
  uint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  BOOL v17;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23D66C8E8();
    swift_bridgeObjectRetain();
    sub_23D66C3CC();
    swift_bridgeObjectRelease();
    v6 = sub_23D66C90C();
    v7 = -1 << *(_BYTE *)(a3 + 32);
    v8 = v6 & ~v7;
    v9 = a3 + 56;
    if (((*(_QWORD *)(a3 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8)) >> v8) & 1) != 0)
    {
      v10 = *(_QWORD *)(a3 + 48);
      v11 = (_QWORD *)(v10 + 16 * v8);
      v12 = *v11 == a1 && v11[1] == a2;
      if (v12 || (sub_23D66C84C() & 1) != 0)
        return 1;
      v14 = ~v7;
      v15 = (v8 + 1) & v14;
      if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) != 0)
      {
        while (1)
        {
          v16 = (_QWORD *)(v10 + 16 * v15);
          v17 = *v16 == a1 && v16[1] == a2;
          if (v17 || (sub_23D66C84C() & 1) != 0)
            break;
          result = 0;
          v15 = (v15 + 1) & v14;
          if (((*(_QWORD *)(v9 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8)) >> v15) & 1) == 0)
            return result;
        }
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_23D63D584(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v6;

  if (*(_QWORD *)(a3 + 16))
  {
    sub_23D66C8E8();
    sub_23D5AFA60(a1, a2);
    sub_23D66BDA8();
    sub_23D5DDA20(a1, a2);
    v6 = sub_23D66C90C() & ~(-1 << *(_BYTE *)(a3 + 32));
    if (((*(_QWORD *)(a3 + 56 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8)) >> v6) & 1) != 0)
      __asm { BR              X8 }
  }
  return 0;
}

uint64_t sub_23D63DF7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  uint64_t result;
  _BYTE *v14;

  type metadata accessor for SimPCSIDSet();
  v9 = (_QWORD *)swift_allocObject();
  v10 = qword_256C78DB0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v10 != -1)
    swift_once();
  v11 = qword_256C89208;
  swift_bridgeObjectRetain();
  v12 = sub_23D63D440(a1, a2, v11);
  result = swift_bridgeObjectRelease();
  if ((v12 & 1) != 0)
  {
    v9[2] = a1;
    v9[3] = a2;
    v9[4] = a3;
    v9[5] = a4;
    *a5 = a1;
    a5[1] = a2;
    a5[2] = a3;
    a5[3] = a4;
    a5[4] = (uint64_t)v9;
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_23D63ED64();
    swift_allocError();
    *v14 = 3;
    swift_willThrow();
    swift_deallocPartialClassInstance();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_23D63E0D4()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for PCSInterface()
{
  return objc_opt_self();
}

uint64_t sub_23D63E104@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t result;
  uint64_t v12[2];

  v9 = *a1;
  v8 = a1[1];
  a4[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BE50);
  a4[4] = &off_250E2AB78;
  v10 = (_QWORD *)swift_allocObject();
  *a4 = v10;
  v12[0] = v9;
  v12[1] = v8;
  type metadata accessor for PCSIDSet();
  swift_allocObject();
  swift_bridgeObjectRetain_n();
  swift_bridgeObjectRetain_n();
  result = sub_23D657BE0(v12);
  if (v4)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  }
  else
  {
    v10[2] = v9;
    v10[3] = v8;
    v10[4] = a2;
    v10[5] = a3;
    v10[6] = result;
  }
  return result;
}

uint64_t type metadata accessor for SimPCSInterface()
{
  return objc_opt_self();
}

uint64_t *sub_23D63E220(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;

  v5 = *(_DWORD *)(*(_QWORD *)(a3 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    v7 = sub_23D66C2AC();
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(_QWORD *)(v7 - 8) + 16))(a1, a2, v7);
    v8 = *(int *)(a3 + 20);
    v9 = (char *)a1 + v8;
    v10 = (char *)a2 + v8;
    v11 = sub_23D66C258();
    (*(void (**)(char *, char *, uint64_t))(*(_QWORD *)(v11 - 8) + 16))(v9, v10, v11);
  }
  return a1;
}

uint64_t sub_23D63E2C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v4 = sub_23D66C2AC();
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 8))(a1, v4);
  v5 = a1 + *(int *)(a2 + 20);
  v6 = sub_23D66C258();
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 8))(v5, v6);
}

uint64_t sub_23D63E324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C2AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 16))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C258();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 16))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D63E3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C2AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 24))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C258();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 24))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D63E41C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C2AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 32))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C258();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 32))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D63E498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v6 = sub_23D66C2AC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v6 - 8) + 40))(a1, a2, v6);
  v7 = *(int *)(a3 + 20);
  v8 = a1 + v7;
  v9 = a2 + v7;
  v10 = sub_23D66C258();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 40))(v8, v9, v10);
  return a1;
}

uint64_t sub_23D63E514()
{
  return swift_getEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D63E520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t (*v9)(uint64_t, uint64_t, uint64_t);
  uint64_t v10;

  v6 = sub_23D66C2AC();
  v7 = *(_QWORD *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    v8 = v6;
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    v10 = a1;
  }
  else
  {
    v8 = sub_23D66C258();
    v10 = a1 + *(int *)(a3 + 20);
    v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v8 - 8) + 48);
  }
  return v9(v10, a2, v8);
}

uint64_t sub_23D63E594()
{
  return swift_storeEnumTagSinglePayloadGeneric();
}

uint64_t sub_23D63E5A0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t (*v11)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v12;

  v8 = sub_23D66C2AC();
  v9 = *(_QWORD *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    v10 = v8;
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    v12 = a1;
  }
  else
  {
    v10 = sub_23D66C258();
    v12 = a1 + *(int *)(a4 + 20);
    v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v10 - 8) + 56);
  }
  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for PCSKeyPair()
{
  uint64_t result;

  result = qword_256C7BE18;
  if (!qword_256C7BE18)
    return swift_getSingletonMetadata();
  return result;
}

uint64_t sub_23D63E658()
{
  uint64_t result;
  unint64_t v1;
  unint64_t v2;

  result = sub_23D66C2AC();
  if (v1 <= 0x3F)
  {
    result = sub_23D66C258();
    if (v2 <= 0x3F)
    {
      swift_initStructMetadata();
      return 0;
    }
  }
  return result;
}

uint64_t sub_23D63E6DC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t result;

  v5 = v4;
  v9 = *a1;
  v10 = a1[1];
  a4[3] = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BE58);
  a4[4] = (uint64_t)&off_250E2AB78;
  v11 = swift_allocObject();
  v12 = (uint64_t *)(v11 + 16);
  *a4 = v11;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  result = sub_23D63DF7C(v9, v10, a2, a3, v12);
  if (v5)
    return __swift_deallocate_boxed_opaque_existential_1((uint64_t)a4);
  return result;
}

uint64_t sub_23D63E790(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v3[8] = a2;
  v3[9] = v2;
  v3[7] = a1;
  v5 = sub_23D66C258();
  v3[10] = v5;
  v3[11] = *(_QWORD *)(v5 - 8);
  v3[12] = swift_task_alloc();
  v6 = sub_23D66C2AC();
  v3[13] = v6;
  v3[14] = *(_QWORD *)(v6 - 8);
  v3[15] = swift_task_alloc();
  v7 = (_QWORD *)swift_task_alloc();
  v3[16] = v7;
  *v7 = v3;
  v7[1] = sub_23D63E858;
  v7[5] = a2;
  v7[6] = v2;
  v7[4] = v3 + 2;
  return swift_task_switch();
}

uint64_t sub_23D63E858()
{
  uint64_t v0;
  uint64_t v1;

  *(_QWORD *)(*(_QWORD *)v1 + 136) = v0;
  swift_task_dealloc();
  return swift_task_switch();
}

uint64_t sub_23D63E8BC()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v1 = *(_QWORD *)(v0 + 136);
  sub_23D63EB64((_QWORD *)(v0 + 16));
  if (v1)
  {
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
  }
  else
  {
    sub_23D63EC18((_QWORD *)(v0 + 16));
    v3 = *(_QWORD *)(v0 + 112);
    v2 = *(_QWORD *)(v0 + 120);
    v4 = *(_QWORD *)(v0 + 104);
    v7 = *(_QWORD *)(v0 + 88);
    v6 = *(_QWORD *)(v0 + 96);
    v8 = *(_QWORD *)(v0 + 80);
    v9 = *(_QWORD *)(v0 + 56);
    __swift_destroy_boxed_opaque_existential_1(v0 + 16);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v9, v2, v4);
    v10 = type metadata accessor for PCSKeyPair();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v9 + *(int *)(v10 + 20), v6, v8);
  }
  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D63E9D0()
{
  uint64_t v0;

  swift_task_dealloc();
  swift_task_dealloc();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D63EA10(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v3;

  v3[5] = a2;
  v3[6] = v2;
  v3[4] = a1;
  return swift_task_switch();
}

uint64_t sub_23D63EA2C()
{
  _QWORD *v0;
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t (*v11)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t);

  v2 = v0[5];
  v1 = (uint64_t *)v0[6];
  v4 = *v1;
  v3 = v1[1];
  v0[7] = v3;
  v0[2] = v4;
  v0[3] = v3;
  v6 = *(_QWORD *)(v2 + 16);
  v5 = *(_QWORD *)(v2 + 24);
  v11 = (uint64_t (*)(_QWORD, _QWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(**(int **)(v5 + 16)
                                                                                     + *(_QWORD *)(v5 + 16));
  v7 = v1[2];
  v8 = v1[3];
  swift_bridgeObjectRetain();
  v9 = (_QWORD *)swift_task_alloc();
  v0[8] = v9;
  *v9 = v0;
  v9[1] = sub_23D63EAE4;
  return v11(v0[4], v0 + 2, v7, v8, v6, v5);
}

uint64_t sub_23D63EAE4()
{
  uint64_t v0;
  uint64_t *v1;
  uint64_t v2;

  v2 = *v1;
  *(_QWORD *)(v2 + 72) = v0;
  swift_task_dealloc();
  swift_bridgeObjectRelease();
  if (v0)
    return swift_task_switch();
  else
    return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_23D63EB58()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_23D63EB64(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 8))(v2, v3);
  if (!v1)
  {
    v6 = result;
    v7 = v5;
    sub_23D63F500(result, v5);
    sub_23D66C27C();
    return sub_23D5DDA20(v6, v7);
  }
  return result;
}

uint64_t sub_23D63EC18(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;

  v2 = a1[3];
  v3 = a1[4];
  __swift_project_boxed_opaque_existential_1(a1, v2);
  result = (*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v2, v3);
  if (!v1)
  {
    v6 = result;
    v7 = v5;
    sub_23D63F500(result, v5);
    sub_23D66C240();
    return sub_23D5DDA20(v6, v7);
  }
  return result;
}

uint64_t sub_23D63ECCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _QWORD *v5;

  v5 = (_QWORD *)swift_task_alloc();
  *(_QWORD *)(v2 + 16) = v5;
  *v5 = v2;
  v5[1] = sub_23D63D3E0;
  return sub_23D63E790(a1, a2);
}

uint64_t objectdestroyTm()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject();
}

unint64_t sub_23D63ED64()
{
  unint64_t result;

  result = qword_256C7BE60[0];
  if (!qword_256C7BE60[0])
  {
    result = MEMORY[0x242636790](&unk_23D674C4C, &type metadata for SimPCSError);
    atomic_store(result, qword_256C7BE60);
  }
  return result;
}

uint64_t sub_23D63EDA8()
{
  return swift_allocateGenericValueMetadata();
}

uint64_t sub_23D63EDB0()
{
  uint64_t result;
  unint64_t v1;

  result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_23D63EE28(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  void (*v15)(uint64_t, uint64_t, uint64_t);

  v4 = *(_QWORD *)(a3 + 16);
  v5 = *(_QWORD *)(v4 - 8);
  v6 = *(_DWORD *)(v5 + 80);
  if (v6 > 7
    || (*(_DWORD *)(v5 + 80) & 0x100000) != 0
    || ((v6 + 32) & (unint64_t)~v6) + *(_QWORD *)(v5 + 64) > 0x18)
  {
    v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v6 & 0xF8 ^ 0x1F8) & (v6 + 16)));
    swift_retain();
  }
  else
  {
    v10 = a2[1];
    *a1 = *a2;
    a1[1] = v10;
    v11 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
    v12 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
    *v11 = *v12;
    v11[1] = v12[1];
    v13 = ((unint64_t)v11 + v6 + 16) & ~v6;
    v14 = ((unint64_t)v12 + v6 + 16) & ~v6;
    v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    v15(v13, v14, v4);
  }
  return a1;
}

uint64_t sub_23D63EF14(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(unint64_t))(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 8))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(a2 + 16) - 8) + 80));
}

_QWORD *sub_23D63EF68(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(uint64_t, uint64_t, uint64_t);

  v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  v5 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v6 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v5 = *v6;
  v5[1] = v6[1];
  v7 = *(_QWORD *)(a3 + 16);
  v8 = *(_QWORD *)(v7 - 8);
  v9 = *(unsigned __int8 *)(v8 + 80);
  v10 = ((unint64_t)v5 + v9 + 16) & ~v9;
  v11 = ((unint64_t)v6 + v9 + 16) & ~v9;
  v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v8 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  v12(v10, v11, v7);
  return a1;
}

_QWORD *sub_23D63F000(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v6 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v7 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v6 = *v7;
  v6[1] = v7[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v8 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v8 + 24))(((unint64_t)v6 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80), ((unint64_t)v7 + *(unsigned __int8 *)(v8 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80));
  return a1;
}

_OWORD *sub_23D63F0B0(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  _OWORD *v4;
  _OWORD *v5;
  uint64_t v6;

  *a1 = *a2;
  v4 = (_OWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v5 = (_OWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v4 = *v5;
  v6 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v6 + 32))(((unint64_t)v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80), ((unint64_t)v5 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  return a1;
}

_QWORD *sub_23D63F118(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;

  v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease();
  v7 = (_QWORD *)(((unint64_t)a1 + 23) & 0xFFFFFFFFFFFFFFF8);
  v8 = (_QWORD *)(((unint64_t)a2 + 23) & 0xFFFFFFFFFFFFFFF8);
  *v7 = *v8;
  v7[1] = v8[1];
  swift_bridgeObjectRelease();
  v9 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v9 + 40))(((unint64_t)v7 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80), ((unint64_t)v8 + *(unsigned __int8 *)(v9 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
  return a1;
}

uint64_t sub_23D63F1A8(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v13;
  int v14;
  unint64_t v15;

  v4 = *(_QWORD *)(*(_QWORD *)(a3 + 16) - 8);
  v5 = *(_DWORD *)(v4 + 84);
  if (v5 <= 0x7FFFFFFF)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v4 + 84);
  if (!a2)
    return 0;
  v7 = *(unsigned __int8 *)(v4 + 80);
  v8 = a2 - v6;
  if (a2 <= v6)
    goto LABEL_22;
  v9 = ((v7 + 32) & ~v7) + *(_QWORD *)(v4 + 64);
  v10 = 8 * v9;
  if (v9 <= 3)
  {
    v13 = ((v8 + ~(-1 << v10)) >> v10) + 1;
    if (HIWORD(v13))
    {
      v11 = *(_DWORD *)(a1 + v9);
      if (!v11)
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 > 0xFF)
    {
      v11 = *(unsigned __int16 *)(a1 + v9);
      if (!*(_WORD *)(a1 + v9))
        goto LABEL_22;
      goto LABEL_15;
    }
    if (v13 < 2)
    {
LABEL_22:
      if ((v5 & 0x80000000) != 0)
        return (*(uint64_t (**)(unint64_t))(v4 + 48))((((a1 + 23) & 0xFFFFFFFFFFFFFFF8) + v7 + 16) & ~v7);
      v15 = *(_QWORD *)(a1 + 8);
      if (v15 >= 0xFFFFFFFF)
        LODWORD(v15) = -1;
      return (v15 + 1);
    }
  }
  v11 = *(unsigned __int8 *)(a1 + v9);
  if (!*(_BYTE *)(a1 + v9))
    goto LABEL_22;
LABEL_15:
  v14 = (v11 - 1) << v10;
  if (v9 > 3)
    v14 = 0;
  if (!(_DWORD)v9)
    return v6 + v14 + 1;
  if (v9 > 3)
    LODWORD(v9) = 4;
  return ((uint64_t (*)(void))((char *)&loc_23D63F27C + 4 * byte_23D674250[(v9 - 1)]))();
}

void sub_23D63F2F4(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v5;
  unsigned int v6;
  size_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  int v11;

  v5 = *(_QWORD *)(*(_QWORD *)(a4 + 16) - 8);
  if (*(_DWORD *)(v5 + 84) <= 0x7FFFFFFFu)
    v6 = 0x7FFFFFFF;
  else
    v6 = *(_DWORD *)(v5 + 84);
  v7 = ((*(unsigned __int8 *)(v5 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
     + *(_QWORD *)(v5 + 64);
  if (a3 > v6)
  {
    if (v7 <= 3)
    {
      v10 = ((a3 - v6 + ~(-1 << (8 * v7))) >> (8 * v7)) + 1;
      if (HIWORD(v10))
      {
        v8 = 4u;
      }
      else if (v10 >= 0x100)
      {
        v8 = 2;
      }
      else
      {
        v8 = v10 > 1;
      }
    }
    else
    {
      v8 = 1u;
    }
  }
  else
  {
    v8 = 0;
  }
  if (v6 < a2)
  {
    v9 = ~v6 + a2;
    if (v7 < 4)
    {
      if ((_DWORD)v7)
      {
        v11 = v9 & ~(-1 << (8 * v7));
        bzero(a1, v7);
        if ((_DWORD)v7 == 3)
        {
          *a1 = v11;
          *((_BYTE *)a1 + 2) = BYTE2(v11);
        }
        else if ((_DWORD)v7 == 2)
        {
          *a1 = v11;
        }
        else
        {
          *(_BYTE *)a1 = v11;
        }
      }
    }
    else
    {
      bzero(a1, v7);
      *(_DWORD *)a1 = v9;
    }
    __asm { BR              X10 }
  }
  __asm { BR              X13 }
}

uint64_t type metadata accessor for GKCPCSId(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return __swift_instantiateGenericMetadata(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for GKCPCSId);
}

void sub_23D63F500(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

void sub_23D63F540()
{
  unint64_t v0;
  uint64_t v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  os_log_type_t v6;
  NSObject *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (BYTE6(v0) == 64)
  {
    if (v2)
    {
      if (v2 == 1)
      {
        v3 = (int)v1;
        v4 = (int)v1 + 32;
      }
      else
      {
        v3 = *(_QWORD *)(v1 + 16);
        v4 = v3 + 32;
        if (__OFADD__(v3, 32))
        {
          __break(1u);
          JUMPOUT(0x23D63F7D4);
        }
      }
    }
    else
    {
      v3 = 0;
      v4 = 32;
    }
    if (__OFADD__(v3, 64))
    {
      __break(1u);
    }
    else if (v3 + 64 >= v4)
    {
      v9 = sub_23D66BD6C();
      sub_23D62899C(v9, v10);
      return;
    }
    __break(1u);
    JUMPOUT(0x23D63F7C8);
  }
  if (qword_256C78B10 != -1)
    swift_once();
  v5 = sub_23D66BFDC();
  __swift_project_value_buffer(v5, (uint64_t)qword_256C88B78);
  v6 = sub_23D66C588();
  sub_23D5AFA60(v1, v0);
  v7 = sub_23D66BFC4();
  if (os_log_type_enabled(v7, v6))
  {
    v8 = swift_slowAlloc();
    *(_DWORD *)v8 = 134218240;
    sub_23D66C5D0();
    *(_WORD *)(v8 + 12) = 2048;
    __asm { BR              X11 }
  }
  sub_23D5DDA20(v1, v0);

  __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
  sub_23D618E34();
  swift_allocError();
  *(_WORD *)v11 = 404;
  *(_OWORD *)(v11 + 8) = xmmword_23D674330;
  *(_QWORD *)(v11 + 24) = 0x800000023D67A4E0;
  *(_QWORD *)(v11 + 32) = 0xD000000000000062;
  *(_QWORD *)(v11 + 40) = 0x800000023D67A520;
  swift_willThrow();
}

uint64_t sub_23D63F804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 16))();
}

uint64_t sub_23D63F81C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  return (*(uint64_t (**)(void))(a6 + 24))();
}

uint64_t sub_23D63F834(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(a4 + 32))();
}

uint64_t destroy for GroupAccessInfo(uint64_t a1)
{
  sub_23D5DDA20(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  sub_23D5DDA20(*(_QWORD *)(a1 + 16), *(_QWORD *)(a1 + 24));
  sub_23D5DDA20(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40));
  return sub_23D5DDA20(*(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 56));
}

uint64_t *initializeWithCopy for GroupAccessInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  v6 = a2[2];
  v7 = a2[3];
  sub_23D5AFA60(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  v8 = a2[4];
  v9 = a2[5];
  sub_23D5AFA60(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  v11 = a2[6];
  v10 = a2[7];
  sub_23D5AFA60(v11, v10);
  a1[6] = v11;
  a1[7] = v10;
  return a1;
}

uint64_t *assignWithCopy for GroupAccessInfo(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;

  v4 = *a2;
  v5 = a2[1];
  sub_23D5AFA60(*a2, v5);
  v6 = *a1;
  v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_23D5DDA20(v6, v7);
  v8 = a2[2];
  v9 = a2[3];
  sub_23D5AFA60(v8, v9);
  v10 = a1[2];
  v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_23D5DDA20(v10, v11);
  v12 = a2[4];
  v13 = a2[5];
  sub_23D5AFA60(v12, v13);
  v14 = a1[4];
  v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_23D5DDA20(v14, v15);
  v17 = a2[6];
  v16 = a2[7];
  sub_23D5AFA60(v17, v16);
  v18 = a1[6];
  v19 = a1[7];
  a1[6] = v17;
  a1[7] = v16;
  sub_23D5DDA20(v18, v19);
  return a1;
}

__n128 __swift_memcpy64_8(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t *assignWithTake for GroupAccessInfo(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v4 = *a1;
  v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_23D5DDA20(v4, v5);
  v6 = a1[2];
  v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_23D5DDA20(v6, v7);
  v8 = a1[4];
  v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_23D5DDA20(v8, v9);
  v10 = a1[6];
  v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_23D5DDA20(v10, v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for GroupAccessInfo(uint64_t a1, unsigned int a2)
{
  unsigned int v3;

  if (!a2)
    return 0;
  if (a2 >= 0xD && *(_BYTE *)(a1 + 64))
    return (*(_DWORD *)a1 + 13);
  v3 = (((*(_QWORD *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(_QWORD *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC)
    v3 = -1;
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for GroupAccessInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(_QWORD *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_QWORD *)result = a2 - 13;
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 1;
  }
  else
  {
    if (a3 >= 0xD)
      *(_BYTE *)(result + 64) = 0;
    if (a2)
    {
      *(_QWORD *)result = 0;
      *(_QWORD *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GroupAccessInfo()
{
  return &type metadata for GroupAccessInfo;
}

ValueMetadata *type metadata accessor for KeychainInteraction()
{
  return &type metadata for KeychainInteraction;
}

void destroy for CoreDataInteraction(uint64_t a1)
{
  swift_release();

}

uint64_t _s14GroupKitCrypto19CoreDataInteractionVwCP_0(uint64_t a1, uint64_t a2)
{
  void *v3;
  id v4;

  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  swift_retain();
  v4 = v3;
  return a1;
}

uint64_t assignWithCopy for CoreDataInteraction(uint64_t a1, uint64_t a2)
{
  void *v4;
  void *v5;
  id v6;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  swift_retain();
  swift_release();
  v4 = *(void **)(a2 + 8);
  v5 = *(void **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v4;
  v6 = v4;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

__n128 __swift_memcpy17_8(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  *a1 = result;
  return result;
}

uint64_t assignWithTake for CoreDataInteraction(uint64_t a1, uint64_t a2)
{
  void *v4;

  swift_release();
  v4 = *(void **)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;

  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for CoreDataInteraction(uint64_t *a1, int a2)
{
  uint64_t v2;

  if (!a2)
    return 0;
  if (a2 < 0 && *((_BYTE *)a1 + 17))
    return *(_DWORD *)a1 + 0x80000000;
  v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF)
    LODWORD(v2) = -1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CoreDataInteraction(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 16) = 0;
    *(_QWORD *)result = a2 ^ 0x80000000;
    *(_QWORD *)(result + 8) = 0;
    if (a3 < 0)
      *(_BYTE *)(result + 17) = 1;
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2)
        return result;
LABEL_8:
      *(_QWORD *)result = (a2 - 1);
      return result;
    }
    *(_BYTE *)(result + 17) = 0;
    if (a2)
      goto LABEL_8;
  }
  return result;
}

ValueMetadata *type metadata accessor for CoreDataInteraction()
{
  return &type metadata for CoreDataInteraction;
}

uint64_t sub_23D63FCA4(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5AEF48((uint64_t)&unk_25431AB98, (uint64_t)&v9, &qword_25431A848);
  if (v10)
  {
    sub_23D5AEF30(&v9, (uint64_t)v11);
    swift_endAccess();
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    *(_QWORD *)&v9 = v2;
    *((_QWORD *)&v9 + 1) = v3;
    v14[0] = v4;
    v14[1] = v5;
    (*(void (**)(__int128 *, _QWORD *, uint64_t, uint64_t))(v7 + 8))(&v9, v14, v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    sub_23D5AEF8C((uint64_t)&v9, &qword_25431A848);
    result = sub_23D66C720();
    __break(1u);
  }
  return result;
}

uint64_t sub_23D63FE0C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  __int128 v9;
  uint64_t v10;
  _QWORD v11[3];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];

  v2 = *a1;
  v3 = a1[1];
  v4 = *a2;
  v5 = a2[1];
  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5AEF48((uint64_t)&unk_25431AB98, (uint64_t)&v9, &qword_25431A848);
  if (v10)
  {
    sub_23D5AEF30(&v9, (uint64_t)v11);
    swift_endAccess();
    v6 = v12;
    v7 = v13;
    __swift_project_boxed_opaque_existential_1(v11, v12);
    *(_QWORD *)&v9 = v2;
    *((_QWORD *)&v9 + 1) = v3;
    v14[0] = v4;
    v14[1] = v5;
    (*(void (**)(__int128 *, _QWORD *, uint64_t, uint64_t))(v7 + 32))(&v9, v14, v6, v7);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v11);
  }
  else
  {
    sub_23D5AEF8C((uint64_t)&v9, &qword_25431A848);
    result = sub_23D66C720();
    __break(1u);
  }
  return result;
}

uint64_t sub_23D63FF68(uint64_t *a1, uint64_t *a2, uint64_t *a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD v27[2];
  _QWORD v28[3];
  uint64_t v29;
  uint64_t v30;
  _QWORD v31[4];

  v4 = *a1;
  v5 = a1[1];
  v6 = *a2;
  v7 = a2[1];
  v9 = *a3;
  v8 = a3[1];
  v10 = a3[2];
  v17 = a3[4];
  v18 = a3[3];
  v15 = a3[6];
  v16 = a3[5];
  v14 = a3[7];
  if (qword_25431AB48 != -1)
    swift_once();
  swift_beginAccess();
  sub_23D5AEF48((uint64_t)&unk_25431AB98, (uint64_t)&v20, &qword_25431A848);
  if (v22)
  {
    sub_23D5AEF30(&v20, (uint64_t)v28);
    swift_endAccess();
    v11 = v29;
    v12 = v30;
    __swift_project_boxed_opaque_existential_1(v28, v29);
    v31[0] = v4;
    v31[1] = v5;
    v27[0] = v6;
    v27[1] = v7;
    *(_QWORD *)&v20 = v9;
    *((_QWORD *)&v20 + 1) = v8;
    v21 = v10;
    v22 = v18;
    v23 = v17;
    v24 = v16;
    v25 = v15;
    v26 = v14;
    (*(void (**)(_QWORD *, _QWORD *, __int128 *, _QWORD, uint64_t, uint64_t))(v12 + 16))(v31, v27, &v20, a4, v11, v12);
    return __swift_destroy_boxed_opaque_existential_1((uint64_t)v28);
  }
  else
  {
    sub_23D5AEF8C((uint64_t)&v20, &qword_25431A848);
    result = sub_23D66C720();
    __break(1u);
  }
  return result;
}

uint64_t sub_23D640124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void *v3;
  void *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  id v12;
  uint64_t v13;
  unint64_t v14;
  id v15;
  _QWORD v16[6];
  id v17;
  uint64_t v18;
  unint64_t v19;
  unsigned __int8 v20;

  v4 = v3;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = -1;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = &v17;
  v8[3] = a1;
  v8[4] = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_23D644E20;
  *(_QWORD *)(v9 + 24) = v8;
  v16[4] = sub_23D644E60;
  v16[5] = v9;
  v16[0] = MEMORY[0x24BDAC760];
  v16[1] = 1107296256;
  v16[2] = sub_23D6407D4;
  v16[3] = &block_descriptor_27;
  v10 = _Block_copy(v16);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_performBlockAndWait_, v10);
  _Block_release(v10);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v20 == 255)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v12 = v17;
  if ((v20 & 1) != 0)
  {
    v16[0] = v17;
    v15 = v17;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
    swift_willThrowTypedImpl();
    sub_23D644E3C(v17, v18, v19, v20);
    return swift_release();
  }
  else
  {
    v13 = v18;
    v14 = v19;
    result = swift_release();
    *a3 = v12;
    a3[1] = v13;
    a3[2] = v14;
  }
  return result;
}

uint64_t sub_23D6402E4(uint64_t a1, uint64_t a2)
{
  void *v2;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  char isEscapingClosureAtFileLocation;
  uint64_t result;
  id v10;
  _QWORD v11[6];
  id v12;
  unsigned __int8 v13;

  v12 = 0;
  v13 = -1;
  v5 = (_QWORD *)swift_allocObject();
  v5[2] = &v12;
  v5[3] = a1;
  v5[4] = a2;
  v6 = swift_allocObject();
  *(_QWORD *)(v6 + 16) = sub_23D5F1488;
  *(_QWORD *)(v6 + 24) = v5;
  v11[4] = sub_23D64371C;
  v11[5] = v6;
  v11[0] = MEMORY[0x24BDAC760];
  v11[1] = 1107296256;
  v11[2] = sub_23D6407D4;
  v11[3] = &block_descriptor_1;
  v7 = _Block_copy(v11);
  swift_retain();
  swift_release();
  objc_msgSend(v2, sel_performBlockAndWait_, v7);
  _Block_release(v7);
  isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v13 == 255)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  if ((v13 & 1) != 0)
  {
    v11[0] = v12;
    v10 = v12;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
    swift_willThrowTypedImpl();
  }
  sub_23D5F14C4(v12, v13);
  return swift_release();
}

uint64_t sub_23D640490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v3;
  void *v4;
  _QWORD *v8;
  uint64_t v9;
  void *v10;
  uint64_t result;
  id v12;
  id v13;
  __int128 v14;
  __int128 v15;
  id v16;
  _QWORD v17[6];
  id v18[2];
  __int128 v19;
  __int128 v20;
  unsigned __int8 v21;

  v4 = v3;
  v19 = 0u;
  v20 = 0u;
  *(_OWORD *)v18 = 0u;
  v21 = -1;
  v8 = (_QWORD *)swift_allocObject();
  v8[2] = v18;
  v8[3] = a1;
  v8[4] = a2;
  v9 = swift_allocObject();
  *(_QWORD *)(v9 + 16) = sub_23D644D94;
  *(_QWORD *)(v9 + 24) = v8;
  v17[4] = sub_23D644E60;
  v17[5] = v9;
  v17[0] = MEMORY[0x24BDAC760];
  v17[1] = 1107296256;
  v17[2] = sub_23D6407D4;
  v17[3] = &block_descriptor_17;
  v10 = _Block_copy(v17);
  swift_retain();
  swift_release();
  objc_msgSend(v4, sel_performBlockAndWait_, v10);
  _Block_release(v10);
  LOBYTE(v4) = swift_isEscapingClosureAtFileLocation();
  result = swift_release();
  if ((v4 & 1) != 0)
  {
    __break(1u);
    goto LABEL_7;
  }
  if (v21 == 255)
  {
LABEL_7:
    __break(1u);
    return result;
  }
  v12 = v18[0];
  if ((v21 & 1) != 0)
  {
    v17[0] = v18[0];
    v16 = v18[0];
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A48);
    swift_willThrowTypedImpl();
    sub_23D644DB0(v18[0], (unint64_t)v18[1], v19, *((unint64_t *)&v19 + 1), v20, *((unint64_t *)&v20 + 1), v21);
    return swift_release();
  }
  else
  {
    v13 = v18[1];
    v14 = v19;
    v15 = v20;
    result = swift_release();
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v13;
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)(a3 + 32) = v15;
  }
  return result;
}

void sub_23D640674(uint64_t a1, void (*a2)(int8x16_t *__return_ptr))
{
  uint64_t v3;
  int32x2_t v4;
  int64x2_t v5;
  void *v6;
  uint64_t v7;
  unint64_t v8;
  unsigned __int8 v9;
  int8x16_t v10;
  uint64_t v11;

  a2(&v10);
  v3 = v11;
  v4 = vdup_n_s32(0);
  v5.i64[0] = v4.u32[0];
  v5.i64[1] = v4.u32[1];
  v6 = *(void **)a1;
  v7 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD *)(a1 + 16);
  *(int8x16_t *)a1 = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v5, 0x3FuLL)), (int8x16_t)0, v10);
  *(_QWORD *)(a1 + 16) = v3;
  v9 = *(_BYTE *)(a1 + 24);
  *(_BYTE *)(a1 + 24) = 0;
  sub_23D644E3C(v6, v7, v8, v9);
}

void sub_23D6406F8(uint64_t a1, void (*a2)(uint64_t *__return_ptr))
{
  void *v3;
  unsigned __int8 v4;
  uint64_t v5;

  a2(&v5);
  v3 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  v4 = *(_BYTE *)(a1 + 8);
  *(_BYTE *)(a1 + 8) = 0;
  sub_23D5F14C4(v3, v4);
}

void sub_23D640754(uint64_t a1, void (*a2)(_OWORD *__return_ptr))
{
  __int128 v3;
  __int128 v4;
  void *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unsigned __int8 v11;
  _OWORD v12[4];

  a2(v12);
  v3 = v12[1];
  v4 = v12[2];
  v5 = *(void **)a1;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 32);
  v10 = *(_QWORD *)(a1 + 40);
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  v11 = *(_BYTE *)(a1 + 48);
  *(_BYTE *)(a1 + 48) = 0;
  sub_23D644DB0(v5, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_23D6407D4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 32))();
}

void sub_23D6407F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  id v14;
  char isUniquelyReferenced_nonNull_native;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  const __CFDictionary *v30;
  OSStatus v31;
  CFStringRef v32;
  __CFString *v33;
  __int128 v34;
  uint64_t v35;
  _OWORD v36[2];
  __int128 v37;
  uint64_t v38;
  unint64_t v39;

  v8 = sub_23D625380(a2, a3, a5, a6);
  v9 = sub_23D66C39C();
  v11 = v10;
  v12 = (void *)*MEMORY[0x24BDE8F68];
  type metadata accessor for CFString(0);
  v38 = v13;
  *(_QWORD *)&v37 = v12;
  sub_23D5F1150(&v37, v36);
  v14 = v12;
  isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  v39 = v8;
  sub_23D5E05FC(v36, v9, v11, isUniquelyReferenced_nonNull_native);
  v16 = v39;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v17 = sub_23D66C39C();
  v19 = v18;
  type metadata accessor for GKCrypto_GroupAccessInfo(0);
  sub_23D6437F8();
  v20 = sub_23D66BF1C();
  if (v6)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    v38 = MEMORY[0x24BDCDDE8];
    *(_QWORD *)&v37 = v20;
    *((_QWORD *)&v37 + 1) = v21;
    sub_23D5F1150(&v37, v36);
    v22 = swift_isUniquelyReferenced_nonNull_native();
    v39 = v16;
    sub_23D5E05FC(v36, v17, v19, v22);
    v23 = v39;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v24 = sub_23D66C39C();
    v26 = v25;
    LODWORD(v37) = a4;
    v27 = sub_23D66C840();
    v38 = MEMORY[0x24BEE0D00];
    *(_QWORD *)&v37 = v27;
    *((_QWORD *)&v37 + 1) = v28;
    sub_23D5F1150(&v37, v36);
    v29 = swift_isUniquelyReferenced_nonNull_native();
    v39 = v23;
    sub_23D5E05FC(v36, v24, v26, v29);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v30 = (const __CFDictionary *)sub_23D66C360();
    swift_bridgeObjectRelease();
    v31 = SecItemAdd(v30, 0);

    if (v31)
    {
      *(_QWORD *)&v37 = 0;
      *((_QWORD *)&v37 + 1) = 0xE000000000000000;
      sub_23D66C630();
      swift_bridgeObjectRelease();
      *(_QWORD *)&v37 = 0xD000000000000016;
      *((_QWORD *)&v37 + 1) = 0x800000023D67A6D0;
      v32 = SecCopyErrorMessageString(v31, 0);
      if (v32)
      {
        v33 = (__CFString *)v32;
        sub_23D66C39C();

      }
      else
      {
        LODWORD(v36[0]) = v31;
        sub_23D66C840();
      }
      sub_23D66C3D8();
      swift_bridgeObjectRelease();
      v34 = v37;
      sub_23D62611C();
      swift_allocError();
      *(_OWORD *)v35 = v34;
      *(_DWORD *)(v35 + 16) = v31;
      swift_willThrow();
    }
  }
}

uint64_t sub_23D640B1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _BYTE *v18;
  const __CFDictionary *v19;
  OSStatus v20;
  CFTypeRef v21;
  const void *v22;
  CFTypeID v23;
  uint64_t v25;
  CFStringRef v26;
  __CFString *v27;
  uint64_t v28;
  __int128 v29;
  uint64_t v30;
  CFTypeID v31;
  int64_t v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  char isUniquelyReferenced_nonNull_native;
  uint64_t v46;
  uint64_t v47;
  int64_t v48;
  _QWORD *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE v67[4];
  int v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  _BYTE *v75;
  _BYTE *v76;
  _BYTE *v77;
  CFTypeRef v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  _QWORD *v86;
  _BYTE v87[40];
  CFTypeRef result[3];

  result[1] = *(CFTypeRef *)MEMORY[0x24BDAC8D0];
  v11 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v11);
  v13 = &v67[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  v79 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  v14 = MEMORY[0x24BDAC7A8](v79);
  v16 = &v67[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x24BDAC7A8](v14);
  v18 = &v67[-v17];
  v80 = a2;
  v81 = a3;
  v82 = a4;
  sub_23D625504(a1, a2, a3, a4);
  result[0] = 0;
  v19 = (const __CFDictionary *)sub_23D66C360();
  swift_bridgeObjectRelease();
  v20 = SecItemCopyMatching(v19, result);

  v21 = result[0];
  if (v20 == -25300)
  {
    v25 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF38);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v25 - 8) + 56))(a5, 1, 1, v25);
    return swift_unknownObjectRelease();
  }
  if (v20)
  {
    *(_QWORD *)v87 = 0;
    *(_QWORD *)&v87[8] = 0xE000000000000000;
    sub_23D66C630();
    swift_bridgeObjectRelease();
    *(_QWORD *)v87 = 0xD000000000000016;
    *(_QWORD *)&v87[8] = 0x800000023D67A6F0;
    v26 = SecCopyErrorMessageString(v20, 0);
    if (v26)
    {
      v27 = (__CFString *)v26;
      sub_23D66C39C();

    }
    else
    {
      LODWORD(v86) = v20;
      sub_23D66C840();
    }
    sub_23D66C3D8();
    swift_bridgeObjectRelease();
    v29 = *(_OWORD *)v87;
    sub_23D62611C();
    swift_allocError();
    *(_OWORD *)v30 = v29;
    *(_DWORD *)(v30 + 16) = v20;
    swift_willThrow();
    return swift_unknownObjectRelease();
  }
  if (!result[0])
  {
    v28 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF38);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v28 - 8) + 56))(a5, 1, 1, v28);
  }
  v22 = (const void *)swift_unknownObjectRetain();
  v23 = sub_23D626A24(v22);
  if (v5)
    return swift_unknownObjectRelease_n();
  v31 = v23;
  v32 = *(_QWORD *)(v23 + 16);
  if (v32)
  {
    v75 = v18;
    v76 = v16;
    v77 = v13;
    v78 = v21;
    v74 = a5;
    v85 = (_QWORD *)MEMORY[0x24BEE4AF8];
    sub_23D5DE2C0(0, v32, 0);
    v33 = 0;
    v34 = v85;
    do
    {
      v84 = *(_QWORD *)(v31 + 8 * v33 + 32);
      swift_bridgeObjectRetain();
      sub_23D625968(&v84, &v83, (uint64_t)v87);
      v35 = 0;
      swift_bridgeObjectRelease();
      v36 = *(_DWORD *)v87;
      v37 = *(_OWORD *)&v87[8];
      v38 = *(_OWORD *)&v87[24];
      v85 = v34;
      v40 = v34[2];
      v39 = v34[3];
      v41 = v40 + 1;
      if (v40 >= v39 >> 1)
      {
        v73 = *(_OWORD *)&v87[8];
        v72 = *(_OWORD *)&v87[24];
        sub_23D5DE2C0(v39 > 1, v40 + 1, 1);
        v38 = v72;
        v37 = v73;
        v34 = v85;
      }
      v34[2] = v41;
      v42 = &v34[5 * v40];
      *((_DWORD *)v42 + 8) = v36;
      ++v33;
      *(_OWORD *)(v42 + 5) = v37;
      *(_OWORD *)(v42 + 7) = v38;
    }
    while (v32 != v33);
    swift_bridgeObjectRelease();
    v86 = v34;
    sub_23D641288(&v86);
    v44 = v86;
    if (v86[2])
    {
      isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      v41 = (uint64_t)v76;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
LABEL_22:
        v46 = (uint64_t)v75;
        v47 = v44[2];
        if (!v47)
          __break(1u);
        v48 = v47 - 1;
        v49 = &v44[5 * v47 - 5];
        v68 = *((_DWORD *)v49 + 8);
        *(_QWORD *)&v72 = v49[5];
        v71 = v49[6];
        v50 = v49[8];
        *(_QWORD *)&v73 = v49[7];
        v44[2] = v48;
        if (v48)
        {
          v69 = 0;
          v70 = v50;
          *(_QWORD *)v87 = MEMORY[0x24BEE4AF8];
          swift_bridgeObjectRetain();
          v51 = v44;
          sub_23D5DE2A4(0, v48, 0);
          v52 = *(_QWORD *)v87;
          v53 = v51 + 8;
          do
          {
            v54 = *(v53 - 3);
            v55 = *(v53 - 2);
            v56 = *(v53 - 1);
            v57 = *v53;
            sub_23D5AFA60(v54, v55);
            sub_23D5AFA60(v56, v57);
            sub_23D5DDA20(v54, v55);
            *(_QWORD *)v87 = v52;
            v59 = *(_QWORD *)(v52 + 16);
            v58 = *(_QWORD *)(v52 + 24);
            if (v59 >= v58 >> 1)
            {
              sub_23D5DE2A4(v58 > 1, v59 + 1, 1);
              v52 = *(_QWORD *)v87;
            }
            v53 += 5;
            *(_QWORD *)(v52 + 16) = v59 + 1;
            v60 = v52 + 16 * v59;
            *(_QWORD *)(v60 + 32) = v56;
            *(_QWORD *)(v60 + 40) = v57;
            --v48;
          }
          while (v48);
          swift_bridgeObjectRelease_n();
          v41 = (uint64_t)v76;
          v46 = (uint64_t)v75;
          v50 = v70;
          v35 = v69;
        }
        else
        {
          swift_bridgeObjectRelease();
          v52 = MEMORY[0x24BEE4AF8];
        }
        sub_23D6256F4(a1, v80, v52, v81, v82);
        v61 = v71;
        swift_bridgeObjectRelease();
        if (v35)
        {
          swift_unknownObjectRelease();
          sub_23D5DDA20(v72, v61);
          sub_23D5DDA20(v73, v50);
        }
        else
        {
          v62 = v72;
          sub_23D5AFA60(v72, v61);
          v63 = v73;
          sub_23D5AFA60(v73, v50);
          sub_23D5DDA20(v63, v50);
          memset(v87, 0, sizeof(v87));
          sub_23D66BE74();
          sub_23D6437F8();
          sub_23D66BF10();
          sub_23D644924(v41, v46);
          swift_unknownObjectRelease();
          v64 = v46;
          v65 = v74;
          sub_23D644924(v64, v74);
          sub_23D5DDA20(v62, v61);
          sub_23D5DDA20(v63, v50);
          v66 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF38);
          *(_DWORD *)(v65 + *(int *)(v66 + 36)) = v68;
          (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)(v66 - 8) + 56))(v65, 0, 1, v66);
        }
        return swift_unknownObjectRelease();
      }
    }
    else
    {
      __break(1u);
    }
    v44 = sub_23D64482C(v44);
    goto LABEL_22;
  }
  v43 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF38);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v43 - 8) + 56))(a5, 1, 1, v43);
  swift_unknownObjectRelease_n();
  return swift_bridgeObjectRelease();
}

uint64_t sub_23D641288(_QWORD **a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;
  uint64_t v5[2];

  v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    v2 = sub_23D64482C(v2);
  v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  result = sub_23D643908(v5);
  *a1 = v2;
  return result;
}

void sub_23D6412F4(_OWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v5;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void *v15;
  void *v16;
  unint64_t v17;
  id v18;
  void *v19;
  _OWORD v21[2];
  uint64_t v22;
  __int128 v23;
  unint64_t v24;

  v11 = sub_23D66BE80();
  MEMORY[0x24BDAC7A8](v11);
  v12 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  MEMORY[0x24BDAC7A8](v12);
  v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  v21[0] = *a1;
  v23 = *a2;
  sub_23D6416FC((uint64_t *)v21, (uint64_t *)&v23, a3, a4);
  if (!v5)
  {
    v16 = v15;
    if (v15)
    {
      v17 = (unint64_t)objc_msgSend(v15, sel_version);
      if ((v17 & 0x8000000000000000) == 0 && !HIDWORD(v17))
      {
        v24 = v17;
        v18 = objc_msgSend(v16, sel_groupAccessInfo);
        if (v18)
        {
          v19 = v18;
          sub_23D66BD9C();

          v22 = 0;
          memset(v21, 0, sizeof(v21));
          sub_23D66BE74();
          sub_23D6437F8();
          sub_23D66BF10();
          __asm { BR              X10 }
        }
        __break(1u);
      }
      sub_23D66C714();
      __break(1u);
      JUMPOUT(0x23D6416ECLL);
    }
    *(_OWORD *)a5 = xmmword_23D66DF30;
    *(_OWORD *)(a5 + 16) = 0u;
    *(_OWORD *)(a5 + 32) = 0u;
    *(_OWORD *)(a5 + 48) = 0u;
    *(_DWORD *)(a5 + 64) = 0;
  }
}

void sub_23D6416FC(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v24;
  id v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  id v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  id v35;
  void *v36;
  id v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  id v43;
  _DWORD v44[8];
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  id v55;
  uint64_t v56;

  v52 = a3;
  v7 = sub_23D66BE20();
  v53 = *(_QWORD *)(v7 - 8);
  v54 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v48 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  v11 = *a2;
  v49 = a2[1];
  v50 = v11;
  v12 = objc_allocWithZone(MEMORY[0x24BDBB678]);
  v13 = (void *)sub_23D66C390();
  v14 = objc_msgSend(v12, sel_initWithEntityName_, v13);
  v55 = v14;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25431A870);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23D673120;
  *(_QWORD *)(v15 + 32) = a4;
  v56 = v15;
  sub_23D66C4C8();
  sub_23D643600(0, &qword_25431A858);
  v16 = a4;
  v17 = (void *)sub_23D66C4A4();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAffectedStores_, v17);

  v45 = sub_23D643600(0, &qword_256C7BF00);
  swift_getKeyPath();
  v46 = sub_23D66C564();
  swift_getKeyPath();
  v47 = sub_23D66C564();
  sub_23D5AFA60(v10, v9);
  v44[7] = sub_23D66BDD8();
  v44[6] = sub_23D66BDD8();
  v44[5] = sub_23D66BDD8();
  v44[4] = sub_23D66BDD8();
  v44[3] = sub_23D66BDD8();
  v44[2] = sub_23D66BDD8();
  v44[1] = sub_23D66BDD8();
  v44[0] = sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  v18 = v48;
  sub_23D66BDFC();
  v19 = v10;
  v20 = v18;
  sub_23D5DDA20(v19, v9);
  sub_23D643600(0, &qword_256C7BF08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A40);
  v21 = swift_allocObject();
  *(_OWORD *)(v21 + 16) = xmmword_23D66E0E0;
  v22 = v45;
  *(_QWORD *)(v21 + 56) = v45;
  v23 = sub_23D643638(&qword_256C7BF10, &qword_256C7BF00);
  *(_QWORD *)(v21 + 64) = v23;
  v24 = (void *)v46;
  *(_QWORD *)(v21 + 32) = v46;
  v25 = v24;
  v26 = sub_23D66BDE4();
  *(_QWORD *)(v21 + 96) = sub_23D643600(0, &qword_256C7BF18);
  v27 = sub_23D643638(&qword_256C7BF20, &qword_256C7BF18);
  *(_QWORD *)(v21 + 72) = v26;
  *(_QWORD *)(v21 + 136) = v22;
  *(_QWORD *)(v21 + 144) = v23;
  v28 = (void *)v47;
  *(_QWORD *)(v21 + 104) = v27;
  *(_QWORD *)(v21 + 112) = v28;
  v29 = v28;
  v30 = v51;
  sub_23D5B06C8(v50, v49);
  v56 = v31;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
  sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
  v32 = sub_23D66C378();
  v34 = v33;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v21 + 176) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v21 + 184) = sub_23D643678();
  *(_QWORD *)(v21 + 152) = v32;
  *(_QWORD *)(v21 + 160) = v34;
  v35 = v55;
  v36 = (void *)sub_23D66C558();
  objc_msgSend(v35, sel_setPredicate_, v36);

  v37 = sub_23D617574();
  type metadata accessor for GroupAccessInfoBlob();
  v38 = sub_23D66C5A0();
  if (v30)
  {
    (*(void (**)(char *, uint64_t))(v53 + 8))(v20, v54);

    return;
  }
  v39 = v38;
  v41 = v53;
  v40 = v54;

  if (v39 >> 62)
  {
    swift_bridgeObjectRetain();
    v42 = sub_23D66C72C();
    swift_bridgeObjectRelease();
  }
  else
  {
    v42 = *(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10);
  }
  if (!v42)
    goto LABEL_9;
  if ((v39 & 0xC000000000000001) != 0)
  {
    MEMORY[0x242636040](0, v39);
    goto LABEL_9;
  }
  if (*(_QWORD *)((v39 & 0xFFFFFFFFFFFFF8) + 0x10))
  {
    v43 = *(id *)(v39 + 32);
LABEL_9:

    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v41 + 8))(v20, v40);
    return;
  }
  __break(1u);
}

uint64_t sub_23D641D0C@<X0>(id *a1@<X0>, uint64_t a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t (*v6)(uint64_t, uint64_t, uint64_t, uint64_t);
  uint64_t v7;
  uint64_t v8;

  v3 = objc_msgSend(*a1, sel_groupID);
  if (v3)
  {
    v4 = v3;
    sub_23D66BDF0();

    v5 = sub_23D66BE20();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 0;
  }
  else
  {
    v5 = sub_23D66BE20();
    v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v5 - 8) + 56);
    v7 = a2;
    v8 = 1;
  }
  return v6(v7, v8, 1, v5);
}

void sub_23D641D90(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7B588);
  MEMORY[0x24BDAC7A8](v4);
  v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_23D5AEF48(a1, (uint64_t)v6, &qword_256C7B588);
  v7 = *a2;
  v8 = sub_23D66BE20();
  v9 = *(_QWORD *)(v8 - 8);
  v10 = 0;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v6, 1, v8) != 1)
  {
    v10 = (void *)sub_23D66BDE4();
    (*(void (**)(char *, uint64_t))(v9 + 8))(v6, v8);
  }
  objc_msgSend(v7, sel_setGroupID_, v10);

}

void sub_23D641E74(id *a1@<X0>, uint64_t *a2@<X8>)
{
  id v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v3 = objc_msgSend(*a1, sel_userID);
  if (v3)
  {
    v4 = v3;
    v5 = sub_23D66C39C();
    v7 = v6;

  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
  *a2 = v5;
  a2[1] = v7;
}

void sub_23D641ED8(uint64_t a1, void **a2)
{
  void *v2;
  uint64_t v3;
  id v4;

  v2 = *a2;
  if (*(_QWORD *)(a1 + 8))
    v3 = sub_23D66C390();
  else
    v3 = 0;
  v4 = (id)v3;
  objc_msgSend(v2, sel_setUserID_);

}

void sub_23D641F34(uint64_t a1, void *a2, uint64_t a3, void *a4, unint64_t a5, uint64_t a6, unint64_t a7, unsigned int a8, uint64_t *a9, char a10)
{
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  id v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  os_log_type_t v45;
  id v46;
  NSObject *v47;
  uint64_t v48;
  uint64_t v49;
  os_log_type_t v50;
  NSObject *v51;
  os_log_type_t v52;
  uint8_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  void *v58;
  id v59;
  unsigned __int8 v60;
  id v61;
  id v62;
  uint64_t v63;
  unint64_t v64;
  id v65;
  unint64_t v66;
  id v67;
  id v68;
  uint64_t v69;
  void *v70;
  void *v71;
  unint64_t v72;
  uint64_t v73;
  _DWORD *v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  id v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;

  v75 = a8;
  v89 = *MEMORY[0x24BDAC8D0];
  v16 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  v17 = MEMORY[0x24BDAC7A8](v16);
  v19 = (char *)&v69 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x24BDAC7A8](v17);
  v21 = (char *)&v69 - v20;
  v79 = a4;
  v80 = a5;
  v77 = a6;
  v78 = a7;
  v22 = v76;
  sub_23D6416FC((uint64_t *)&v79, &v77, a1, a2);
  if (!v22)
  {
    v71 = a4;
    v74 = v21;
    v72 = a7;
    v70 = a2;
    v73 = a1;
    v76 = 0;
    if (!v23)
    {
      if ((a10 & 1) == 0)
      {
        if (qword_256C78B08 != -1)
          swift_once();
        v49 = sub_23D66BFDC();
        __swift_project_value_buffer(v49, (uint64_t)qword_256C88B60);
        v50 = sub_23D66C588();
        v51 = sub_23D66BFC4();
        v52 = v50;
        if (os_log_type_enabled(v51, v50))
        {
          v53 = (uint8_t *)swift_slowAlloc();
          *(_WORD *)v53 = 0;
          _os_log_impl(&dword_23D5A8000, v51, v52, "Attempted to update GroupAccessInfo that does not exist", v53, 2u);
          MEMORY[0x242636844](v53, -1, -1);
        }

        __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
        sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
        swift_allocError();
        *(_WORD *)v54 = 390;
        *(_OWORD *)(v54 + 8) = xmmword_23D674350;
        *(_QWORD *)(v54 + 24) = 0x800000023D67A5D0;
        *(_QWORD *)(v54 + 32) = 0xD000000000000064;
        *(_QWORD *)(v54 + 40) = 0x800000023D67A630;
LABEL_24:
        swift_willThrow();
        return;
      }
      v36 = v19;
      *(_DWORD *)v19 = 0;
      sub_23D643780(a9, (void (*)(uint64_t, uint64_t))sub_23D5AFA60);
      sub_23D66BE5C();
      v37 = *(_OWORD *)a9;
      v87 = *((_OWORD *)a9 + 1);
      v38 = v87;
      v88 = v37;
      *(_OWORD *)(v19 + 8) = v37;
      *(_OWORD *)(v19 + 24) = v38;
      v39 = *((_OWORD *)a9 + 2);
      v85 = *((_OWORD *)a9 + 3);
      v40 = v85;
      v86 = v39;
      *(_OWORD *)(v19 + 40) = v39;
      *(_OWORD *)(v19 + 56) = v40;
      sub_23D643754((uint64_t)&v88);
      sub_23D643754((uint64_t)&v87);
      sub_23D643754((uint64_t)&v86);
      sub_23D643754((uint64_t)&v85);
      sub_23D643780(a9, (void (*)(uint64_t, uint64_t))sub_23D5DDA20);
      sub_23D6437F8();
      v41 = v76;
      v42 = sub_23D66BF1C();
      if (v41)
      {
        sub_23D643840((uint64_t)v19);
        return;
      }
      v63 = v42;
      v64 = v43;
      v76 = type metadata accessor for GroupAccessInfoBlob();
      v65 = sub_23D617574();
      v79 = v71;
      v80 = a5;
      v66 = v72;
      v77 = a6;
      v78 = v72;
      sub_23D5AFA60((uint64_t)v71, a5);
      sub_23D5AFA60(a6, v66);
      sub_23D5AFA60(v63, v64);
      v67 = sub_23D61CF74(v65, (uint64_t *)&v79, &v77, v63, v64, v75);
      v68 = sub_23D617574();
      objc_msgSend(v68, sel_assignObject_toPersistentStore_, v67, v70);

      sub_23D5DDA20(v63, v64);
      v28 = (uint64_t)v36;
LABEL_21:
      sub_23D643840(v28);
      v59 = sub_23D617574();
      v79 = 0;
      v60 = objc_msgSend(v59, sel_save_, &v79);

      if ((v60 & 1) != 0)
      {
        v61 = v79;
        return;
      }
      v62 = v79;
      sub_23D66BCDC();

      goto LABEL_24;
    }
    v24 = v23;
    v25 = objc_msgSend(v23, sel_version);
    v26 = v75;
    v27 = v75;
    if ((uint64_t)v25 < v75)
    {
      v28 = (uint64_t)v74;
      *v74 = 0;
      sub_23D643780(a9, (void (*)(uint64_t, uint64_t))sub_23D5AFA60);
      sub_23D66BE5C();
      v29 = *(_OWORD *)a9;
      v83 = *((_OWORD *)a9 + 1);
      v30 = v83;
      v84 = v29;
      *(_OWORD *)(v28 + 8) = v29;
      *(_OWORD *)(v28 + 24) = v30;
      v31 = *((_OWORD *)a9 + 2);
      v81 = *((_OWORD *)a9 + 3);
      v32 = v81;
      v82 = v31;
      *(_OWORD *)(v28 + 40) = v31;
      *(_OWORD *)(v28 + 56) = v32;
      sub_23D643754((uint64_t)&v84);
      sub_23D643754((uint64_t)&v83);
      sub_23D643754((uint64_t)&v82);
      sub_23D643754((uint64_t)&v81);
      sub_23D643780(a9, (void (*)(uint64_t, uint64_t))sub_23D5DDA20);
      sub_23D6437F8();
      v33 = v76;
      v34 = sub_23D66BF1C();
      if (v33)
      {
        sub_23D643840(v28);

        return;
      }
      v56 = v34;
      v57 = v35;
      v58 = (void *)sub_23D66BD84();
      objc_msgSend(v24, sel_setGroupAccessInfo_, v58);

      objc_msgSend(v24, sel_setVersion_, v27);
      sub_23D5DDA20(v56, v57);

      goto LABEL_21;
    }
    if (qword_256C78B08 != -1)
      swift_once();
    v44 = sub_23D66BFDC();
    __swift_project_value_buffer(v44, (uint64_t)qword_256C88B60);
    v45 = sub_23D66C57C();
    v46 = v24;
    v47 = sub_23D66BFC4();
    if (os_log_type_enabled(v47, v45))
    {
      v48 = swift_slowAlloc();
      *(_DWORD *)v48 = 134218240;
      v79 = objc_msgSend(v46, sel_version);
      sub_23D66C5D0();

      *(_WORD *)(v48 + 12) = 1024;
      LODWORD(v79) = v26;
      sub_23D66C5D0();
      _os_log_impl(&dword_23D5A8000, v47, v45, "Attempted to update existing GroupAccessInfo at version %lld with version %u", (uint8_t *)v48, 0x12u);
      MEMORY[0x242636844](v48, -1, -1);

    }
    else
    {

    }
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
    sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
    swift_allocError();
    *(_WORD *)v55 = 389;
    *(_OWORD *)(v55 + 8) = xmmword_23D674340;
    *(_QWORD *)(v55 + 24) = 0x800000023D67A5D0;
    *(_QWORD *)(v55 + 32) = 0xD000000000000064;
    *(_QWORD *)(v55 + 40) = 0x800000023D67A630;
    swift_willThrow();

  }
}

void sub_23D6426AC(uint64_t *a1, uint64_t *a2, uint64_t a3, void *a4)
{
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  id v12;
  void *v13;
  id v14;
  uint64_t v15;
  id v16;
  void *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  id v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  id v26;
  id v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  id v32;
  void *v33;
  id v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  id v39;
  void *v40;
  id v41;
  id v42;
  unsigned __int8 v43;
  void (*v44)(char *, uint64_t);
  id v45;
  id v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  uint64_t v57;
  id v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  id v63;
  id v64;
  char *v65;
  id v66[2];

  v62 = a3;
  v66[1] = *(id *)MEMORY[0x24BDAC8D0];
  v7 = sub_23D66BE20();
  v47 = *(_QWORD *)(v7 - 8);
  v48 = v7;
  MEMORY[0x24BDAC7A8](v7);
  v65 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *a1;
  v9 = a1[1];
  v11 = *a2;
  v60 = a2[1];
  v61 = v11;
  v12 = objc_allocWithZone(MEMORY[0x24BDBB678]);
  v13 = (void *)sub_23D66C390();
  v14 = objc_msgSend(v12, sel_initWithEntityName_, v13);
  v64 = v14;

  __swift_instantiateConcreteTypeFromMangledName(&qword_25431A870);
  v15 = swift_allocObject();
  *(_OWORD *)(v15 + 16) = xmmword_23D673120;
  *(_QWORD *)(v15 + 32) = a4;
  v66[0] = (id)v15;
  sub_23D66C4C8();
  sub_23D643600(0, &qword_25431A858);
  v16 = a4;
  v17 = (void *)sub_23D66C4A4();
  swift_bridgeObjectRelease();
  objc_msgSend(v14, sel_setAffectedStores_, v17);

  v57 = sub_23D643600(0, &qword_256C7BF00);
  swift_getKeyPath();
  v58 = (id)sub_23D66C564();
  swift_getKeyPath();
  v59 = sub_23D66C564();
  sub_23D5AFA60(v10, v9);
  v56 = sub_23D66BDD8();
  v55 = sub_23D66BDD8();
  v54 = sub_23D66BDD8();
  v53 = sub_23D66BDD8();
  v52 = sub_23D66BDD8();
  v51 = sub_23D66BDD8();
  v50 = sub_23D66BDD8();
  v49 = sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  sub_23D66BDD8();
  v18 = v65;
  sub_23D66BDFC();
  sub_23D5DDA20(v10, v9);
  sub_23D643600(0, &qword_256C7BF08);
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A40);
  v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_23D66E0E0;
  v20 = v57;
  *(_QWORD *)(v19 + 56) = v57;
  v21 = sub_23D643638(&qword_256C7BF10, &qword_256C7BF00);
  *(_QWORD *)(v19 + 64) = v21;
  v22 = v58;
  *(_QWORD *)(v19 + 32) = v58;
  v58 = v22;
  v23 = sub_23D66BDE4();
  *(_QWORD *)(v19 + 96) = sub_23D643600(0, &qword_256C7BF18);
  v24 = sub_23D643638(&qword_256C7BF20, &qword_256C7BF18);
  *(_QWORD *)(v19 + 72) = v23;
  *(_QWORD *)(v19 + 136) = v20;
  *(_QWORD *)(v19 + 144) = v21;
  v25 = (void *)v59;
  *(_QWORD *)(v19 + 104) = v24;
  *(_QWORD *)(v19 + 112) = v25;
  v26 = v25;
  v27 = v63;
  sub_23D5B06C8(v61, v60);
  v66[0] = v28;
  __swift_instantiateConcreteTypeFromMangledName(&qword_256C79198);
  sub_23D5ED518((unint64_t *)&qword_256C791A0, &qword_256C79198, MEMORY[0x24BEE12B0]);
  v29 = sub_23D66C378();
  v31 = v30;
  swift_bridgeObjectRelease();
  *(_QWORD *)(v19 + 176) = MEMORY[0x24BEE0D00];
  *(_QWORD *)(v19 + 184) = sub_23D643678();
  *(_QWORD *)(v19 + 152) = v29;
  *(_QWORD *)(v19 + 160) = v31;
  v32 = v64;
  v33 = (void *)sub_23D66C558();
  objc_msgSend(v32, sel_setPredicate_, v33);

  v34 = sub_23D617574();
  type metadata accessor for GroupAccessInfoBlob();
  v35 = sub_23D66C5A0();
  if (v27)
  {
    (*(void (**)(char *, uint64_t))(v47 + 8))(v18, v48);

    goto LABEL_14;
  }
  v36 = v35;
  v63 = v26;

  if (v36 >> 62)
  {
    swift_bridgeObjectRetain();
    v37 = sub_23D66C72C();
    swift_bridgeObjectRelease();
    if (v37)
      goto LABEL_5;
  }
  else
  {
    v37 = *(_QWORD *)((v36 & 0xFFFFFFFFFFFFF8) + 0x10);
    if (v37)
    {
LABEL_5:
      if (v37 < 1)
        __break(1u);
      v38 = 0;
      do
      {
        if ((v36 & 0xC000000000000001) != 0)
          v39 = (id)MEMORY[0x242636040](v38, v36);
        else
          v39 = *(id *)(v36 + 8 * v38 + 32);
        v40 = v39;
        ++v38;
        v41 = sub_23D617574();
        objc_msgSend(v41, sel_deleteObject_, v40);

      }
      while (v37 != v38);
    }
  }
  swift_bridgeObjectRelease();
  v42 = sub_23D617574();
  v66[0] = 0;
  v43 = objc_msgSend(v42, sel_save_, v66);

  if ((v43 & 1) == 0)
  {
    v46 = v66[0];
    sub_23D66BCDC();

    swift_willThrow();
    (*(void (**)(char *, uint64_t))(v47 + 8))(v65, v48);
    return;
  }
  v44 = *(void (**)(char *, uint64_t))(v47 + 8);
  v45 = v66[0];
  v44(v65, v48);

LABEL_14:
}

void sub_23D642D98(_OWORD *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;

  sub_23D6412F4(a1, a2, *(_QWORD *)v3, *(void **)(v3 + 8), a3);
}

void sub_23D642DB4(uint64_t *a1, uint64_t *a2, _OWORD *a3, int a4)
{
  __int128 *v4;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  id v13;
  __int128 v14;
  _BYTE v15[16];
  __int128 v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  _OWORD *v23;
  char v24;
  _OWORD v25[4];

  v6 = *((_BYTE *)v4 + 16);
  v7 = *a1;
  v8 = a1[1];
  v9 = a3[1];
  v25[0] = *a3;
  v25[1] = v9;
  v10 = a3[3];
  v25[2] = a3[2];
  v25[3] = v10;
  v14 = *v4;
  v11 = *a2;
  v12 = a2[1];
  v13 = sub_23D617574();
  v16 = v14;
  v17 = v6;
  v18 = v7;
  v19 = v8;
  v20 = v11;
  v21 = v12;
  v22 = a4;
  v23 = v25;
  v24 = 1;
  sub_23D6402E4((uint64_t)sub_23D6436BC, (uint64_t)v15);

}

void sub_23D642E6C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;

  sub_23D6426AC(a1, a2, *(_QWORD *)v2, *(void **)(v2 + 8));
}

uint64_t sub_23D642E84(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD v24[5];
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v26 = a5;
  v27 = a6;
  v25 = a4;
  v9 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  v10 = MEMORY[0x24BDAC7A8](v9);
  v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  v13 = *a1;
  v24[1] = a1[1];
  v24[2] = v13;
  v14 = *a2;
  v24[3] = a2[1];
  v24[4] = v14;
  v15 = *a3;
  v16 = a3[1];
  v17 = a3[2];
  v18 = a3[3];
  v19 = a3[4];
  v20 = a3[5];
  v21 = a3[6];
  v22 = a3[7];
  v24[0] = &v12[*(int *)(v10 + 36)];
  *(_DWORD *)v12 = 0;
  sub_23D5AFA60(v15, v16);
  sub_23D5AFA60(v17, v18);
  sub_23D5AFA60(v19, v20);
  sub_23D5AFA60(v21, v22);
  sub_23D66BE5C();
  *((_QWORD *)v12 + 1) = v15;
  *((_QWORD *)v12 + 2) = v16;
  *((_QWORD *)v12 + 3) = v17;
  *((_QWORD *)v12 + 4) = v18;
  *((_QWORD *)v12 + 5) = v19;
  *((_QWORD *)v12 + 6) = v20;
  *((_QWORD *)v12 + 7) = v21;
  *((_QWORD *)v12 + 8) = v22;
  sub_23D5AFA60(v15, v16);
  sub_23D5AFA60(v17, v18);
  sub_23D5AFA60(v19, v20);
  sub_23D5AFA60(v21, v22);
  sub_23D5DDA20(v15, v16);
  sub_23D5DDA20(v17, v18);
  sub_23D5DDA20(v19, v20);
  sub_23D5DDA20(v21, v22);
  v28 = 0;
  v29 = 0xE000000000000000;
  sub_23D66C630();
  swift_bridgeObjectRelease();
  v28 = 0xD000000000000020;
  v29 = 0x800000023D67A6A0;
  sub_23D66BD90();
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  sub_23D66C3D8();
  sub_23D66BD90();
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  sub_23D6407F4((uint64_t)v12, v28, v29, v25, v26, v27);
  sub_23D643840((uint64_t)v12);
  return swift_bridgeObjectRelease();
}

double sub_23D6430A0@<D0>(uint64_t a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  double result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  v20 = a1;
  v21 = a2;
  v19 = a3;
  v3 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  MEMORY[0x24BDAC7A8](v3);
  v18 = (char *)&v17 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  v5 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF30);
  MEMORY[0x24BDAC7A8](v5);
  v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF38);
  v9 = *(_QWORD *)(v8 - 8);
  MEMORY[0x24BDAC7A8](v8);
  v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  v22 = 0;
  v23 = 0xE000000000000000;
  sub_23D66C630();
  swift_bridgeObjectRelease();
  v22 = 0xD000000000000020;
  v23 = 0x800000023D67A6A0;
  sub_23D66BD90();
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  sub_23D66C3D8();
  sub_23D66BD90();
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  v12 = v24;
  sub_23D640B1C(v22, v23, v20, v21, (uint64_t)v7);
  swift_bridgeObjectRelease();
  if (!v12)
  {
    v14 = (uint64_t)v11;
    v15 = (uint64_t)v18;
    v16 = v19;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) != 1)
    {
      sub_23D64387C((uint64_t)v7, v14);
      sub_23D6438C4(v14, v15);
      __asm { BR              X10 }
    }
    sub_23D5AEF8C((uint64_t)v7, &qword_256C7BF30);
    result = 0.0;
    *(_OWORD *)v16 = xmmword_23D66DF30;
    *(_OWORD *)(v16 + 16) = 0u;
    *(_OWORD *)(v16 + 32) = 0u;
    *(_OWORD *)(v16 + 48) = 0u;
    *(_DWORD *)(v16 + 64) = 0;
  }
  return result;
}

uint64_t sub_23D64348C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_23D66C630();
  swift_bridgeObjectRelease();
  sub_23D66BD90();
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  sub_23D66C3D8();
  sub_23D66BD90();
  sub_23D66C3D8();
  swift_bridgeObjectRelease();
  sub_23D625FC8(0xD000000000000020, 0x800000023D67A6A0, a3, a4);
  return swift_bridgeObjectRelease();
}

double sub_23D643590@<D0>(uint64_t a1@<X8>)
{
  uint64_t *v1;

  return sub_23D6430A0(*v1, v1[1], a1);
}

uint64_t sub_23D6435A8(uint64_t *a1, uint64_t *a2, uint64_t *a3, int a4)
{
  uint64_t *v4;

  return sub_23D642E84(a1, a2, a3, a4, *v4, v4[1]);
}

uint64_t sub_23D6435C0(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;

  return sub_23D64348C(a1, a2, *v2, v2[1]);
}

char *keypath_get_selector_groupID()
{
  return sel_groupID;
}

char *keypath_get_selector_userID()
{
  return sel_userID;
}

uint64_t sub_23D643600(uint64_t a1, unint64_t *a2)
{
  uint64_t result;

  result = *a2;
  if (!*a2)
  {
    objc_opt_self();
    result = swift_getObjCClassMetadata();
    atomic_store(result, a2);
  }
  return result;
}

uint64_t sub_23D643638(unint64_t *a1, unint64_t *a2)
{
  uint64_t result;
  uint64_t v4;

  result = *a1;
  if (!result)
  {
    v4 = sub_23D643600(255, a2);
    result = MEMORY[0x242636790](MEMORY[0x24BEE5BE8], v4);
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_23D643678()
{
  unint64_t result;

  result = qword_256C7BF28;
  if (!qword_256C7BF28)
  {
    result = MEMORY[0x242636790](MEMORY[0x24BDCFB50], MEMORY[0x24BEE0D00]);
    atomic_store(result, (unint64_t *)&qword_256C7BF28);
  }
  return result;
}

void sub_23D6436BC()
{
  uint64_t v0;

  sub_23D641F34(*(_QWORD *)(v0 + 16), *(void **)(v0 + 24), *(unsigned __int8 *)(v0 + 32), *(void **)(v0 + 40), *(_QWORD *)(v0 + 48), *(_QWORD *)(v0 + 56), *(_QWORD *)(v0 + 64), *(_DWORD *)(v0 + 72), *(uint64_t **)(v0 + 80), *(_BYTE *)(v0 + 88));
}

uint64_t sub_23D6436FC()
{
  return swift_deallocObject();
}

uint64_t sub_23D64370C()
{
  return swift_deallocObject();
}

uint64_t sub_23D64371C()
{
  uint64_t v0;

  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t block_copy_helper_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  return swift_retain();
}

uint64_t block_destroy_helper_1()
{
  return swift_release();
}

uint64_t sub_23D643754(uint64_t a1)
{
  sub_23D5AFA60(*(_QWORD *)a1, *(_QWORD *)(a1 + 8));
  return a1;
}

uint64_t *sub_23D643780(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v4 = a1[2];
  v5 = a1[3];
  v6 = a1[4];
  v7 = a1[5];
  v8 = a1[6];
  v9 = a1[7];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v7);
  a2(v8, v9);
  return a1;
}

unint64_t sub_23D6437F8()
{
  unint64_t result;
  uint64_t v1;

  result = qword_256C7A1A0;
  if (!qword_256C7A1A0)
  {
    v1 = type metadata accessor for GKCrypto_GroupAccessInfo(255);
    result = MEMORY[0x242636790](&unk_23D670214, v1);
    atomic_store(result, (unint64_t *)&qword_256C7A1A0);
  }
  return result;
}

uint64_t sub_23D643840(uint64_t a1)
{
  uint64_t v2;

  v2 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_23D64387C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF38);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_23D6438C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_23D643908(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  char *v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  char v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  BOOL v57;
  unint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  uint64_t v68;
  char v69;
  char *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  BOOL v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  char *v86;
  char *v87;
  uint64_t v88;
  char *v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t i;
  unsigned int v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  char *v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  char *v109;
  unint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  char *__dst;

  v3 = a1[1];
  result = sub_23D66C834();
  if (result >= v3)
  {
    if (v3 < 0)
      goto LABEL_136;
    if ((unint64_t)v3 >= 2)
    {
      v93 = 0;
      v94 = *a1;
      for (i = 1; i != v3; ++i)
      {
        v96 = *(_DWORD *)(v94 + 40 * i);
        v97 = v93;
        do
        {
          v98 = v94 + v97;
          if (*(_DWORD *)(v94 + v97) < v96)
            break;
          if (!v94)
            goto LABEL_140;
          v99 = v94 + v97;
          v100 = *(_OWORD *)(v94 + v97 + 48);
          v101 = *(_OWORD *)(v94 + v97 + 64);
          v102 = *(_OWORD *)(v98 + 16);
          *(_OWORD *)(v94 + v97 + 40) = *(_OWORD *)v98;
          *(_OWORD *)(v94 + v97 + 56) = v102;
          *(_QWORD *)(v94 + v97 + 72) = *(_QWORD *)(v98 + 32);
          *(_DWORD *)v99 = v96;
          *(_OWORD *)(v99 + 8) = v100;
          *(_OWORD *)(v99 + 24) = v101;
          v97 -= 40;
        }
        while (v97 != -40);
        v93 += 40;
      }
    }
    return result;
  }
  if (v3 >= 0)
    v5 = v3;
  else
    v5 = v3 + 1;
  if (v3 < -1)
    goto LABEL_145;
  v6 = result;
  v112 = a1;
  if (v3 < 2)
  {
    v9 = MEMORY[0x24BEE4AF8];
    __dst = (char *)(MEMORY[0x24BEE4AF8] + 32);
    if (v3 != 1)
    {
      v13 = *(_QWORD *)(MEMORY[0x24BEE4AF8] + 16);
      v12 = (char *)MEMORY[0x24BEE4AF8];
LABEL_102:
      v103 = v12;
      v114 = v9;
      if (v13 >= 2)
      {
        v104 = *v112;
        do
        {
          v105 = v13 - 2;
          if (v13 < 2)
            goto LABEL_131;
          if (!v104)
            goto LABEL_144;
          v106 = v103;
          v107 = *(_QWORD *)&v103[16 * v105 + 32];
          v108 = *(_QWORD *)&v103[16 * v13 + 24];
          sub_23D644034((char *)(v104 + 40 * v107), (char *)(v104 + 40 * *(_QWORD *)&v103[16 * v13 + 16]), v104 + 40 * v108, __dst);
          if (v1)
            break;
          if (v108 < v107)
            goto LABEL_132;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
            v106 = sub_23D644818((uint64_t)v106);
          if (v105 >= *((_QWORD *)v106 + 2))
            goto LABEL_133;
          v109 = &v106[16 * v105 + 32];
          *(_QWORD *)v109 = v107;
          *((_QWORD *)v109 + 1) = v108;
          v110 = *((_QWORD *)v106 + 2);
          if (v13 > v110)
            goto LABEL_134;
          memmove(&v106[16 * v13 + 16], &v106[16 * v13 + 32], 16 * (v110 - v13));
          v103 = v106;
          *((_QWORD *)v106 + 2) = v110 - 1;
          v13 = v110 - 1;
        }
        while (v110 > 2);
      }
LABEL_93:
      swift_bridgeObjectRelease();
      *(_QWORD *)(v114 + 16) = 0;
      return swift_bridgeObjectRelease();
    }
    v114 = MEMORY[0x24BEE4AF8];
  }
  else
  {
    v7 = v5 >> 1;
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C79940);
    v8 = sub_23D66C4E0();
    *(_QWORD *)(v8 + 16) = v7;
    v114 = v8;
    __dst = (char *)(v8 + 32);
  }
  v10 = 0;
  v11 = *a1;
  v113 = *a1 + 80;
  v111 = *a1 - 40;
  v12 = (char *)MEMORY[0x24BEE4AF8];
  v115 = v6;
  v116 = v3;
  v117 = v11;
  while (1)
  {
    v14 = v10++;
    if (v10 < v3)
    {
      v15 = *(_DWORD *)(v11 + 40 * v10);
      v16 = *(_DWORD *)(v11 + 40 * v14);
      v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        v17 = (unsigned int *)(v113 + 40 * v14);
        v18 = v15;
        while (1)
        {
          v20 = *v17;
          v17 += 10;
          v19 = v20;
          if (v16 >= v15 == v18 < v20)
            break;
          ++v10;
          v18 = v19;
          if (v3 == v10)
          {
            v10 = v3;
            break;
          }
        }
      }
      if (v16 >= v15)
      {
        if (v10 < v14)
          goto LABEL_137;
        if (v14 < v10)
        {
          v21 = 40 * v10;
          v22 = 40 * v14;
          v23 = v10;
          v24 = v14;
          do
          {
            if (v24 != --v23)
            {
              if (!v11)
                goto LABEL_143;
              v25 = v11 + v22;
              v26 = *(_DWORD *)(v11 + v22);
              v27 = v11 + v21;
              v28 = *(_OWORD *)(v11 + v22 + 8);
              v29 = *(_OWORD *)(v11 + v22 + 24);
              v30 = *(_QWORD *)(v11 + v21 - 8);
              v31 = *(_OWORD *)(v11 + v21 - 24);
              *(_OWORD *)v25 = *(_OWORD *)(v11 + v21 - 40);
              *(_OWORD *)(v25 + 16) = v31;
              *(_QWORD *)(v25 + 32) = v30;
              *(_DWORD *)(v27 - 40) = v26;
              *(_OWORD *)(v27 - 32) = v28;
              *(_OWORD *)(v27 - 16) = v29;
            }
            ++v24;
            v21 -= 40;
            v22 += 40;
          }
          while (v24 < v23);
        }
      }
    }
    if (v10 >= v3)
      goto LABEL_46;
    if (__OFSUB__(v10, v14))
      goto LABEL_135;
    if (v10 - v14 >= v6)
      goto LABEL_46;
    v32 = v14 + v6;
    if (__OFADD__(v14, v6))
      goto LABEL_138;
    if (v32 >= v3)
      v32 = v3;
    if (v32 < v14)
      break;
    if (v10 != v32)
    {
      v33 = v111 + 40 * v10;
      do
      {
        v34 = *(_DWORD *)(v11 + 40 * v10);
        v35 = v14;
        v36 = v33;
        do
        {
          v37 = v36 + 40;
          if (*(_DWORD *)v36 < v34)
            break;
          if (!v11)
            goto LABEL_141;
          v38 = *(_OWORD *)(v36 + 48);
          v39 = *(_OWORD *)(v36 + 64);
          v40 = *(_OWORD *)(v36 + 16);
          *(_OWORD *)v37 = *(_OWORD *)v36;
          *(_OWORD *)(v36 + 56) = v40;
          v41 = *(_QWORD *)(v36 + 32);
          *(_DWORD *)v36 = v34;
          *(_OWORD *)(v36 + 8) = v38;
          *(_OWORD *)(v36 + 24) = v39;
          v36 -= 40;
          ++v35;
          *(_QWORD *)(v37 + 32) = v41;
        }
        while (v10 != v35);
        ++v10;
        v33 += 40;
      }
      while (v10 != v32);
      v10 = v32;
    }
LABEL_46:
    if (v10 < v14)
      goto LABEL_130;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      v12 = sub_23D6442E4(0, *((_QWORD *)v12 + 2) + 1, 1, v12);
    v43 = *((_QWORD *)v12 + 2);
    v42 = *((_QWORD *)v12 + 3);
    v13 = v43 + 1;
    v11 = v117;
    if (v43 >= v42 >> 1)
    {
      v92 = sub_23D6442E4((char *)(v42 > 1), v43 + 1, 1, v12);
      v11 = v117;
      v12 = v92;
    }
    *((_QWORD *)v12 + 2) = v13;
    v44 = v12 + 32;
    v45 = &v12[16 * v43 + 32];
    *(_QWORD *)v45 = v14;
    *((_QWORD *)v45 + 1) = v10;
    if (v43)
    {
      while (1)
      {
        v46 = v13 - 1;
        if (v13 >= 4)
        {
          v51 = &v44[16 * v13];
          v52 = *((_QWORD *)v51 - 8);
          v53 = *((_QWORD *)v51 - 7);
          v57 = __OFSUB__(v53, v52);
          v54 = v53 - v52;
          if (v57)
            goto LABEL_119;
          v56 = *((_QWORD *)v51 - 6);
          v55 = *((_QWORD *)v51 - 5);
          v57 = __OFSUB__(v55, v56);
          v49 = v55 - v56;
          v50 = v57;
          if (v57)
            goto LABEL_120;
          v58 = v13 - 2;
          v59 = &v44[16 * v13 - 32];
          v61 = *(_QWORD *)v59;
          v60 = *((_QWORD *)v59 + 1);
          v57 = __OFSUB__(v60, v61);
          v62 = v60 - v61;
          if (v57)
            goto LABEL_122;
          v57 = __OFADD__(v49, v62);
          v63 = v49 + v62;
          if (v57)
            goto LABEL_125;
          if (v63 >= v54)
          {
            v81 = &v44[16 * v46];
            v83 = *(_QWORD *)v81;
            v82 = *((_QWORD *)v81 + 1);
            v57 = __OFSUB__(v82, v83);
            v84 = v82 - v83;
            if (v57)
              goto LABEL_129;
            v74 = v49 < v84;
            goto LABEL_83;
          }
        }
        else
        {
          if (v13 != 3)
          {
            v75 = *((_QWORD *)v12 + 4);
            v76 = *((_QWORD *)v12 + 5);
            v57 = __OFSUB__(v76, v75);
            v68 = v76 - v75;
            v69 = v57;
            goto LABEL_77;
          }
          v48 = *((_QWORD *)v12 + 4);
          v47 = *((_QWORD *)v12 + 5);
          v57 = __OFSUB__(v47, v48);
          v49 = v47 - v48;
          v50 = v57;
        }
        if ((v50 & 1) != 0)
          goto LABEL_121;
        v58 = v13 - 2;
        v64 = &v44[16 * v13 - 32];
        v66 = *(_QWORD *)v64;
        v65 = *((_QWORD *)v64 + 1);
        v67 = __OFSUB__(v65, v66);
        v68 = v65 - v66;
        v69 = v67;
        if (v67)
          goto LABEL_124;
        v70 = &v44[16 * v46];
        v72 = *(_QWORD *)v70;
        v71 = *((_QWORD *)v70 + 1);
        v57 = __OFSUB__(v71, v72);
        v73 = v71 - v72;
        if (v57)
          goto LABEL_127;
        if (__OFADD__(v68, v73))
          goto LABEL_128;
        if (v68 + v73 >= v49)
        {
          v74 = v49 < v73;
LABEL_83:
          if (v74)
            v46 = v58;
          goto LABEL_85;
        }
LABEL_77:
        if ((v69 & 1) != 0)
          goto LABEL_123;
        v77 = &v44[16 * v46];
        v79 = *(_QWORD *)v77;
        v78 = *((_QWORD *)v77 + 1);
        v57 = __OFSUB__(v78, v79);
        v80 = v78 - v79;
        if (v57)
          goto LABEL_126;
        if (v80 < v68)
          goto LABEL_15;
LABEL_85:
        v85 = v46 - 1;
        if (v46 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }
        if (!v11)
          goto LABEL_142;
        v86 = v12;
        v87 = &v44[16 * v85];
        v88 = *(_QWORD *)v87;
        v89 = &v44[16 * v46];
        v90 = *((_QWORD *)v89 + 1);
        sub_23D644034((char *)(v11 + 40 * *(_QWORD *)v87), (char *)(v11 + 40 * *(_QWORD *)v89), v11 + 40 * v90, __dst);
        if (v1)
          goto LABEL_93;
        if (v90 < v88)
          goto LABEL_116;
        if (v46 > *((_QWORD *)v86 + 2))
          goto LABEL_117;
        *(_QWORD *)v87 = v88;
        *(_QWORD *)&v44[16 * v85 + 8] = v90;
        v91 = *((_QWORD *)v86 + 2);
        if (v46 >= v91)
          goto LABEL_118;
        v12 = v86;
        v13 = v91 - 1;
        memmove(&v44[16 * v46], v89 + 16, 16 * (v91 - 1 - v46));
        *((_QWORD *)v86 + 2) = v91 - 1;
        v11 = v117;
        if (v91 <= 2)
          goto LABEL_15;
      }
    }
    v13 = 1;
LABEL_15:
    v6 = v115;
    v3 = v116;
    if (v10 >= v116)
    {
      v9 = v114;
      goto LABEL_102;
    }
  }
LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  result = sub_23D66C714();
  __break(1u);
  return result;
}

uint64_t sub_23D644034(char *__src, char *a2, unint64_t a3, char *__dst)
{
  char *v4;
  char *v6;
  char *v7;
  int64_t v8;
  int64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  unsigned int v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t result;
  char *v28;
  char *v29;
  char *v30;

  v4 = __dst;
  v6 = a2;
  v7 = __src;
  v8 = a2 - __src;
  v9 = (a2 - __src) / 40;
  v10 = a3 - (_QWORD)a2;
  v11 = (uint64_t)(a3 - (_QWORD)a2) / 40;
  v30 = __src;
  v29 = __dst;
  if (v9 >= v11)
  {
    if (v10 >= -39)
    {
      if (__dst != a2 || &a2[40 * v11] <= __dst)
        memmove(__dst, a2, 40 * v11);
      v18 = &v4[40 * v11];
      v28 = v18;
      v30 = v6;
      if (v7 < v6 && v10 >= 40)
      {
        v19 = a3 - 40;
        v20 = v6;
        while (1)
        {
          v21 = (char *)(v19 + 40);
          v22 = *((_DWORD *)v20 - 10);
          v20 -= 40;
          if (v22 >= *((_DWORD *)v18 - 10))
          {
            if (v21 != v6 || v19 >= (unint64_t)v6)
            {
              v25 = *(_OWORD *)v20;
              v26 = *((_OWORD *)v20 + 1);
              *(_QWORD *)(v19 + 32) = *((_QWORD *)v20 + 4);
              *(_OWORD *)v19 = v25;
              *(_OWORD *)(v19 + 16) = v26;
            }
            v30 = v20;
            if (v20 <= v7)
              goto LABEL_38;
          }
          else
          {
            v28 = v18 - 40;
            if (v21 < v18 || v19 >= (unint64_t)v18 || v21 != v18)
            {
              v23 = *(_OWORD *)(v18 - 40);
              v24 = *(_OWORD *)(v18 - 24);
              *(_QWORD *)(v19 + 32) = *((_QWORD *)v18 - 1);
              *(_OWORD *)v19 = v23;
              *(_OWORD *)(v19 + 16) = v24;
            }
            v20 = v6;
            v18 -= 40;
            if (v6 <= v7)
              goto LABEL_38;
          }
          v19 -= 40;
          v6 = v20;
          if (v18 <= v4)
            goto LABEL_38;
        }
      }
      goto LABEL_38;
    }
  }
  else if (v8 >= -39)
  {
    if (__dst != __src || &__src[40 * v9] <= __dst)
      memmove(__dst, __src, 40 * v9);
    v12 = &v4[40 * v9];
    v28 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 40)
    {
      do
      {
        if (*(_DWORD *)v4 >= *(_DWORD *)v6)
        {
          v15 = v6 + 40;
          if (v7 < v6 || v7 >= v15 || v7 != v6)
          {
            v16 = *(_OWORD *)v6;
            v17 = *((_OWORD *)v6 + 1);
            *((_QWORD *)v7 + 4) = *((_QWORD *)v6 + 4);
            *(_OWORD *)v7 = v16;
            *((_OWORD *)v7 + 1) = v17;
          }
        }
        else
        {
          if (v7 != v4)
          {
            v13 = *(_OWORD *)v4;
            v14 = *((_OWORD *)v4 + 1);
            *((_QWORD *)v7 + 4) = *((_QWORD *)v4 + 4);
            *(_OWORD *)v7 = v13;
            *((_OWORD *)v7 + 1) = v14;
          }
          v4 += 40;
          v29 = v4;
          v15 = v6;
        }
        v7 += 40;
        if (v4 >= v12)
          break;
        v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      v30 = v7;
    }
LABEL_38:
    sub_23D6443DC((void **)&v30, (const void **)&v29, &v28);
    return 1;
  }
  result = sub_23D66C768();
  __break(1u);
  return result;
}

char *sub_23D6442E4(char *result, int64_t a2, char a3, char *a4)
{
  char v5;
  unint64_t v6;
  int64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;

  v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    v6 = *((_QWORD *)a4 + 3);
    v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000 < 0)
      {
        __break(1u);
        return result;
      }
      v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
      if ((uint64_t)(v6 & 0xFFFFFFFFFFFFFFFELL) <= a2)
        v7 = a2;
    }
  }
  else
  {
    v7 = a2;
  }
  v8 = *((_QWORD *)a4 + 2);
  if (v7 <= v8)
    v9 = *((_QWORD *)a4 + 2);
  else
    v9 = v7;
  if (v9)
  {
    __swift_instantiateConcreteTypeFromMangledName(&qword_256C7BF40);
    v10 = (char *)swift_allocObject();
    v11 = _swift_stdlib_malloc_size(v10);
    v12 = v11 - 32;
    if (v11 < 32)
      v12 = v11 - 17;
    *((_QWORD *)v10 + 2) = v8;
    *((_QWORD *)v10 + 3) = 2 * (v12 >> 4);
  }
  else
  {
    v10 = (char *)MEMORY[0x24BEE4AF8];
  }
  v13 = v10 + 32;
  v14 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v10 != a4 || v13 >= &v14[16 * v8])
      memmove(v13, v14, 16 * v8);
    *((_QWORD *)a4 + 2) = 0;
  }
  else
  {
    memcpy(v13, v14, 16 * v8);
  }
  swift_bridgeObjectRelease();
  return v10;
}

char *sub_23D6443DC(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  char *result;
  uint64_t v6;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  if (v4 <= -40)
  {
    result = (char *)sub_23D66C768();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6])
      return (char *)memmove(result, v3, 40 * v6);
  }
  return result;
}

char *sub_23D644494(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 15;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -16)
  {
    result = (char *)sub_23D66C768();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7])
      return (char *)memmove(result, v3, 16 * v7);
  }
  return result;
}

uint64_t sub_23D64453C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;

  v3 = *a1;
  v4 = *a2;
  v5 = *a3;
  result = type metadata accessor for UserKeyingInfo(0);
  v7 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v7)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v8 = v5 - v4;
  if (v5 - v4 == 0x8000000000000000 && v7 == -1)
    goto LABEL_14;
  if (v8 / v7 < 0)
  {
LABEL_15:
    result = sub_23D66C768();
    __break(1u);
    return result;
  }
  if (v3 < v4 || v3 >= v4 + v8 / v7 * v7)
    return swift_arrayInitWithTakeFrontToBack();
  if (v3 != v4)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

uint64_t sub_23D644648(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_23D644660(a1, a2, a3, &qword_256C79AD8);
}

uint64_t sub_23D644654(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_23D644660(a1, a2, a3, &qword_256C799A0);
}

uint64_t sub_23D644660(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;

  v4 = *a1;
  v5 = *a2;
  v6 = *a3;
  result = __swift_instantiateConcreteTypeFromMangledName(a4);
  v8 = *(_QWORD *)(*(_QWORD *)(result - 8) + 72);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }
  v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000 && v8 == -1)
    goto LABEL_14;
  if (v9 / v8 < 0)
  {
LABEL_15:
    result = sub_23D66C768();
    __break(1u);
    return result;
  }
  if (v4 < v5 || v4 >= v5 + v9 / v8 * v8)
    return swift_arrayInitWithTakeFrontToBack();
  if (v4 != v5)
    return swift_arrayInitWithTakeBackToFront();
  return result;
}

char *sub_23D644770(void **a1, const void **a2, _QWORD *a3)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *result;
  uint64_t v7;

  v3 = (char *)*a2;
  v4 = *a3 - (_QWORD)v3;
  v5 = v4 + 7;
  if (v4 >= 0)
    v5 = *a3 - (_QWORD)v3;
  if (v4 <= -8)
  {
    result = (char *)sub_23D66C768();
    __break(1u);
  }
  else
  {
    result = (char *)*a1;
    v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7])
      return (char *)memmove(result, v3, 8 * v7);
  }
  return result;
}

char *sub_23D644818(uint64_t a1)
{
  return sub_23D6442E4(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

_QWORD *sub_23D64482C(_QWORD *a1)
{
  return sub_23D62B518(0, a1[2], 0, a1);
}

uint64_t sub_23D644840(unint64_t a1)
{
  return sub_23D62B978(0, *(_QWORD *)(a1 + 16), 0, a1);
}

void sub_23D644858(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_23D66C72C();
    swift_bridgeObjectRelease();
  }
  JUMPOUT(0x24263604CLL);
}

uint64_t sub_23D6448C0(uint64_t a1)
{
  return sub_23D5DE624(0, *(_QWORD *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_23D6448D4(_QWORD *a1)
{
  return sub_23D5DE940(0, a1[2], 0, a1);
}

uint64_t sub_23D6448E8(_QWORD *a1)
{
  return sub_23D5DE954(0, a1[2], 0, a1);
}

uint64_t sub_23D6448FC(_QWORD *a1)
{
  return sub_23D5DE92C(0, a1[2], 0, a1);
}

void sub_23D644910()
{
  JUMPOUT(0x242636208);
}

uint64_t sub_23D644924(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = type metadata accessor for GKCrypto_GroupAccessInfo(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_23D644968(uint64_t a1, char a2)
{
  uint64_t v3;
  uint64_t v4;
  os_log_type_t v5;
  NSObject *v6;
  uint8_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  os_log_type_t v12;
  NSObject *v13;
  uint8_t *v14;
  unint64_t v15;
  void *v16;
  id v17;
  id v18;
  uint64_t v19;
  void *v20;
  id v21;
  id v22;
  id v23;

  if ((a2 & 1) != 0)
  {
    if (*(_BYTE *)(a1 + 144) == 1)
    {
      v10 = qword_256C78B08;
      swift_retain();
      if (v10 != -1)
        swift_once();
      v11 = sub_23D66BFDC();
      __swift_project_value_buffer(v11, (uint64_t)qword_256C88B60);
      v12 = sub_23D66C588();
      v13 = sub_23D66BFC4();
      if (os_log_type_enabled(v13, v12))
      {
        v14 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v14 = 0;
        _os_log_impl(&dword_23D5A8000, v13, v12, "Failed to initialize CoreDataInteraction due to uninitialized strictPeersStoreIndex", v14, 2u);
        MEMORY[0x242636844](v14, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v8 = -94;
      v9 = 149;
      goto LABEL_14;
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 160) == 1)
    {
      v3 = qword_256C78B08;
      swift_retain();
      if (v3 != -1)
        swift_once();
      v4 = sub_23D66BFDC();
      __swift_project_value_buffer(v4, (uint64_t)qword_256C88B60);
      v5 = sub_23D66C588();
      v6 = sub_23D66BFC4();
      if (os_log_type_enabled(v6, v5))
      {
        v7 = (uint8_t *)swift_slowAlloc();
        *(_WORD *)v7 = 0;
        _os_log_impl(&dword_23D5A8000, v6, v5, "Failed to initialize CoreDataInteraction due to uninitialized allPeersStoreIndex", v7, 2u);
        MEMORY[0x242636844](v7, -1, -1);
      }

      __swift_instantiateConcreteTypeFromMangledName(&qword_256C790D8);
      sub_23D5ED518((unint64_t *)&qword_256C790E0, &qword_256C790D8, (uint64_t)&protocol conformance descriptor for GroupKitCryptoError<A>);
      swift_allocError();
      *(_BYTE *)v8 = -93;
      v9 = 156;
LABEL_14:
      *(_BYTE *)(v8 + 1) = 1;
      *(_QWORD *)(v8 + 8) = v9;
      *(_QWORD *)(v8 + 16) = 0xD00000000000001DLL;
      *(_QWORD *)(v8 + 24) = 0x800000023D67A710;
      *(_QWORD *)(v8 + 32) = 0xD000000000000064;
      *(_QWORD *)(v8 + 40) = 0x800000023D67A630;
      swift_willThrow();
      swift_release();
      return;
    }
    v15 = *(_QWORD *)(a1 + 152);
    v16 = *(void **)(a1 + 168);
    swift_retain();
    v17 = objc_msgSend(v16, sel_persistentStoreCoordinator);
    v18 = objc_msgSend(v17, sel_persistentStores);

    sub_23D643600(0, &qword_25431A858);
    v19 = sub_23D66C4BC();

    if ((v19 & 0xC000000000000001) != 0)
      goto LABEL_24;
    if ((v15 & 0x8000000000000000) != 0)
    {
      __break(1u);
      goto LABEL_26;
    }
    if (v15 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    {
LABEL_22:
      v23 = *(id *)(v19 + 8 * v15 + 32);
LABEL_23:
      swift_bridgeObjectRelease();
      return;
    }
    __break(1u);
  }
  v15 = *(_QWORD *)(a1 + 136);
  v20 = *(void **)(a1 + 168);
  swift_retain();
  v21 = objc_msgSend(v20, sel_persistentStoreCoordinator);
  v22 = objc_msgSend(v21, sel_persistentStores);

  sub_23D643600(0, &qword_25431A858);
  v19 = sub_23D66C4BC();

  if ((v19 & 0xC000000000000001) != 0)
  {
LABEL_24:
    MEMORY[0x242636040](v15, v19);
    goto LABEL_23;
  }
  if ((v15 & 0x8000000000000000) != 0)
  {
LABEL_26:
    __break(1u);
    goto LABEL_27;
  }
  if (v15 < *(_QWORD *)((v19 & 0xFFFFFFFFFFFFF8) + 0x10))
    goto LABEL_22;
LABEL_27:
  __break(1u);
}

uint64_t sub_23D644D84()
{
  return swift_deallocObject();
}

void sub_23D644D94()
{
  uint64_t v0;

  sub_23D640754(*(_QWORD *)(v0 + 16), *(void (**)(_OWORD *__return_ptr))(v0 + 24));
}

uint64_t sub_23D644DA0()
{
  return swift_deallocObject();
}

void sub_23D644DB0(void *a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, unsigned __int8 a7)
{
  if (a7 != 255)
    sub_23D644DC8(a1, a2, a3, a4, a5, a6, a7 & 1);
}

void sub_23D644DC8(id a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6, char a7)
{
  if ((a7 & 1) != 0)

  else
    sub_23D644DD4((uint64_t)a1, a2, a3, a4, a5, a6);
}

uint64_t sub_23D644DD4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a6 >> 60 != 15)
  {
    sub_23D5E7220(result, a2, a3, a4);
    return sub_23D5DDA20(a5, a6);
  }
  return result;
}

uint64_t sub_23D644E10()
{
  return swift_deallocObject();
}

void sub_23D644E20()
{
  uint64_t v0;

  sub_23D640674(*(_QWORD *)(v0 + 16), *(void (**)(int8x16_t *__return_ptr))(v0 + 24));
}

uint64_t sub_23D644E2C()
{
  return swift_deallocObject();
}

void sub_23D644E3C(void *a1, uint64_t a2, unint64_t a3, unsigned __int8 a4)
{
  if (a4 != 255)
    sub_23D644E54(a1, a2, a3, a4 & 1);
}

void sub_23D644E54(id a1, uint64_t a2, unint64_t a3, char a4)
{
  if ((a4 & 1) != 0)

  else
    sub_23D5E7F48((uint64_t)a1, a2, a3);
}

uint64_t sub_23D644E78(void (*a1)(uint64_t, uint64_t *), uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t *);
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v4 = v3;
  v18 = a1;
  v19 = a2;
  v6 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79A08);
  v7 = *(_QWORD *)(v6 - 8);
  MEMORY[0x24BDAC7A8](v6);
  v9 = (char *)&v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = MEMORY[0x24BEE4AF8];
  if (v10)
  {
    v21 = MEMORY[0x24BEE4AF8];
    sub_23D5DE2DC(0, v10, 0);
    v11 = v21;
    v12 = *(_QWORD *)(type metadata accessor for GKCrypto_GroupHandle.CiphertextAndTag(0) - 8);
    v13 = a3 + ((*(unsigned __int8 *)(v12 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80));
    v17 = *(_QWORD *)(v12 + 72);
    while (1)
    {
      v18(v13, &v20);
      if (v4)
        break;
      v4 = 0;
      v21 = v11;
      v15 = *(_QWORD *)(v11 + 16);
      v14 = *(_QWORD *)(v11 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_23D5DE2DC(v14 > 1, v15 + 1, 1);
        v11 = v21;
      }
      *(_QWORD *)(v11 + 16) = v15 + 1;
      sub_23D5F16C4((uint64_t)v9, v11+ ((*(unsigned __int8 *)(v7 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))+ *(_QWORD *)(v7 + 72) * v15, &qword_256C79A08);
      v13 += v17;
      if (!--v10)
        return v11;
    }
    swift_release();
  }
  return v11;
}

uint64_t sub_23D644FF4(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  int64_t v19;
  int64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  _QWORD v44[2];
  uint64_t v45;
  int64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v56 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C799A0);
  v3 = MEMORY[0x24BDAC7A8](v56);
  v55 = (_QWORD *)((char *)v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0));
  v5 = MEMORY[0x24BDAC7A8](v3);
  v54 = (_QWORD *)((char *)v44 - v6);
  MEMORY[0x24BDAC7A8](v5);
  v53 = (_QWORD *)((char *)v44 - v7);
  v8 = __swift_instantiateConcreteTypeFromMangledName(&qword_256C79AD8);
  v51 = *(_QWORD *)(v8 - 8);
  v52 = v8;
  MEMORY[0x24BDAC7A8](v8);
  v10 = (_QWORD *)((char *)v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0));
  v11 = *(_QWORD *)(a1 + 16);
  v12 = MEMORY[0x24BEE4AF8];
  if (!v11)
    return v12;
  v44[1] = v1;
  v59 = MEMORY[0x24BEE4AF8];
  sub_23D5DE360(0, v11, 0);
  result = sub_23D5E5BBC(a1);
  v15 = result;
  v16 = 0;
  v17 = a1 + 64;
  v45 = a1 + 80;
  v46 = v11;
  v49 = v10;
  v50 = a1;
  v47 = v14;
  v48 = a1 + 64;
  v18 = v53;
  while ((v15 & 0x8000000000000000) == 0 && v15 < 1 << *(_BYTE *)(a1 + 32))
  {
    v21 = (unint64_t)v15 >> 6;
    if ((*(_QWORD *)(v17 + 8 * ((unint64_t)v15 >> 6)) & (1 << v15)) == 0)
      goto LABEL_25;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v14)
      goto LABEL_26;
    v57 = v16;
    v58 = 1 << v15;
    v22 = v56;
    v23 = (uint64_t)v18 + *(int *)(v56 + 48);
    v24 = *(_QWORD *)(a1 + 56);
    v25 = (uint64_t *)(*(_QWORD *)(a1 + 48) + 16 * v15);
    v27 = *v25;
    v26 = v25[1];
    *v18 = *v25;
    v18[1] = v26;
    v28 = type metadata accessor for GroupMembership.MemberProperties(0);
    sub_23D5E7298(v24 + *(_QWORD *)(*(_QWORD *)(v28 - 8) + 72) * v15, v23, type metadata accessor for GroupMembership.MemberProperties);
    v29 = v54;
    *v54 = v27;
    v29[1] = v26;
    sub_23D5E7298(v23, (uint64_t)v29 + *(int *)(v22 + 48), type metadata accessor for GroupMembership.MemberProperties);
    v30 = (uint64_t)v29;
    v31 = v55;
    sub_23D5F16C4(v30, (uint64_t)v55, &qword_256C799A0);
    sub_23D5AFA60(v27, v26);
    sub_23D5AFA60(v27, v26);
    sub_23D5AEF8C((uint64_t)v18, &qword_256C799A0);
    v32 = *(int *)(v22 + 48);
    v33 = (uint64_t)v49;
    v34 = (uint64_t)v49 + *(int *)(v52 + 48);
    v35 = *v31;
    v36 = v31[1];
    *v49 = *v31;
    *(_QWORD *)(v33 + 8) = v36;
    sub_23D5E7298((uint64_t)v31 + v32, v34, type metadata accessor for GroupMembership.MemberProperties);
    sub_23D5AFA60(v35, v36);
    sub_23D5AEF8C((uint64_t)v31, &qword_256C799A0);
    v12 = v59;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
    {
      sub_23D5DE360(0, *(_QWORD *)(v12 + 16) + 1, 1);
      v12 = v59;
    }
    v38 = *(_QWORD *)(v12 + 16);
    v37 = *(_QWORD *)(v12 + 24);
    if (v38 >= v37 >> 1)
    {
      sub_23D5DE360(v37 > 1, v38 + 1, 1);
      v12 = v59;
    }
    *(_QWORD *)(v12 + 16) = v38 + 1;
    result = sub_23D5F16C4(v33, v12+ ((*(unsigned __int8 *)(v51 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))+ *(_QWORD *)(v51 + 72) * v38, &qword_256C79AD8);
    a1 = v50;
    v19 = 1 << *(_BYTE *)(v50 + 32);
    if (v15 >= v19)
      goto LABEL_27;
    v17 = v48;
    v39 = *(_QWORD *)(v48 + 8 * v21);
    if ((v39 & v58) == 0)
      goto LABEL_28;
    LODWORD(v14) = v47;
    if (*(_DWORD *)(v50 + 36) != (_DWORD)v47)
      goto LABEL_29;
    v40 = v39 & (-2 << (v15 & 0x3F));
    if (v40)
    {
      v19 = __clz(__rbit64(v40)) | v15 & 0xFFFFFFFFFFFFFFC0;
      v20 = v46;
    }
    else
    {
      v41 = v21 + 1;
      v42 = (unint64_t)(v19 + 63) >> 6;
      v20 = v46;
      if (v21 + 1 < v42)
      {
        v43 = *(_QWORD *)(v48 + 8 * v41);
        if (v43)
        {
LABEL_22:
          v19 = __clz(__rbit64(v43)) + (v41 << 6);
        }
        else
        {
          while (v42 - 2 != v21)
          {
            v43 = *(_QWORD *)(v45 + 8 * v21++);
            if (v43)
            {
              v41 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }
    v16 = v57 + 1;
    v15 = v19;
    if (v57 + 1 == v20)
      return v12;
  }
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

