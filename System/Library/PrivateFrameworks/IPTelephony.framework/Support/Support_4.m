void sub_1BEFAF5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((_QWORD *)(v15 - 32));
  _Unwind_Resume(a1);
}

_QWORD *SipSessionId::generateFromCallId(_QWORD *result, const void **a2)
{
  const void *v2;
  _QWORD *v4;
  ImsRandomStringGenerator *v5;
  std::string *v6;
  size_t size;
  int v8;
  const void *v9;
  size_t v10;
  void **v11;
  void **v12;
  int v13;
  std::string v14;
  void *__p[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  ims *v19;
  ims *v20;
  uint64_t v21;
  char v22;
  std::string v23;
  _QWORD v24[2];

  v2 = (const void *)*((unsigned __int8 *)a2 + 23);
  if ((char)v2 < 0)
    v2 = a2[1];
  if (v2)
  {
    v4 = result;
    v24[0] = 0;
    v24[1] = 0;
    v5 = (ImsRandomStringGenerator *)ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator(v24, 0, 63);
    memset(&v23, 0, sizeof(v23));
    ImsRandomStringGenerator::randomString(v5, 16, &v23);
    v19 = 0;
    v20 = 0;
    v21 = 0;
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v23;
    else
      v6 = (std::string *)v23.__r_.__value_.__r.__words[0];
    if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
    else
      size = v23.__r_.__value_.__l.__size_;
    v8 = *((char *)a2 + 23);
    if (v8 >= 0)
      v9 = a2;
    else
      v9 = *a2;
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)a2 + 23);
    else
      v10 = (size_t)a2[1];
    SipSHA1DigestAlgorithm::computeHmac((int)&v22, v6, size, v9, v10, (unint64_t *)&v19);
    ims::makeHexString(v19, (unsigned __int8 *)0x10, &v14);
    ObfuscatedString::ObfuscatedString((uint64_t)__p, &v14);
    v11 = (void **)(v4 + 1);
    if (*((char *)v4 + 31) < 0)
      operator delete(*v11);
    *(_OWORD *)v11 = *(_OWORD *)__p;
    v4[3] = v16;
    HIBYTE(v16) = 0;
    LOBYTE(__p[0]) = 0;
    v12 = (void **)(v4 + 4);
    if (*((char *)v4 + 55) < 0)
    {
      operator delete(*v12);
      v13 = SHIBYTE(v16);
      *(_OWORD *)v12 = v17;
      v4[6] = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)v12 = v17;
      v4[6] = v18;
      HIBYTE(v18) = 0;
      LOBYTE(v17) = 0;
    }
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    ObfuscatedString::str((ObfuscatedString *)(v4 + 1));
    if (v19)
    {
      v20 = v19;
      operator delete(v19);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    return ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(v24);
  }
  return result;
}

void sub_1BEFAF794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22)
{
  uint64_t v22;

  if (a14 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((_QWORD *)(v22 - 48));
  _Unwind_Resume(a1);
}

void SipIdString::~SipIdString(void **this)
{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CCB28;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipIdString::log(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 56))(a2, a1 + 8);
  return a2;
}

std::string *SipIdString::loggableName@<X0>(SipIdString *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v3;

  v3 = (const std::string *)((char *)this + 8);
  ObfuscatedString::str((SipIdString *)((char *)this + 8));
  return LoggableString::LoggableString(a2, v3);
}

uint64_t QMISipLogger::procedureForInstance(QMISipLogger *this, unsigned int a2)
{
  uint64_t **v3;
  char *v4;
  char *v5;
  char *v6;
  unsigned int v7;
  BOOL v8;
  char **v9;
  uint64_t **v10;
  uint64_t result;
  unsigned int v12;

  v12 = a2;
  v3 = (uint64_t **)((char *)this + 248);
  v4 = (char *)*((_QWORD *)this + 32);
  if (v4)
  {
    v5 = (char *)this + 256;
    v6 = (char *)this + 256;
    do
    {
      v7 = *((_DWORD *)v4 + 7);
      v8 = v7 >= a2;
      if (v7 >= a2)
        v9 = (char **)v4;
      else
        v9 = (char **)(v4 + 8);
      if (v8)
        v6 = v4;
      v4 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *((_DWORD *)v6 + 7) <= a2)
      return *((unsigned __int16 *)std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, a2, &v12)+ 16);
  }
  v10 = std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v3, a2, &v12);
  result = 0;
  *((_WORD *)v10 + 16) = 0;
  return result;
}

void QMISipLogger::reportHighestProcedure(QMISipLogger *this, unsigned int a2)
{
  unsigned int v3;
  uint64_t v4;
  void *v5;
  const void **v6;
  _DWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE *v27;
  void **p_p;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  std::__shared_weak_count *v49;
  _QWORD v50[2];
  uint64_t (*v51)(uint64_t, _DWORD *);
  void *v52;
  unsigned int v53;
  void *v54[2];
  __int128 v55;
  unsigned int v56;
  void *__p;
  uint64_t v58;
  uint64_t (*v59)();
  void *v60;
  _QWORD *v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  _QWORD aBlock[5];

  v3 = __clz(QMISipLogger::procedureForInstance(this, a2) | 1) ^ 0x1F;
  v56 = v3;
  v4 = (*(uint64_t (**)(QMISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(QMISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Highest procedure is ", 21);
  *(_BYTE *)(v4 + 17) = 0;
  ims::toString<nas::ProcedureType>((int *)&v56, &__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" for instance ", 14);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(v59) < 0)
    operator delete(__p);
  if (*((_BYTE *)this + 192))
  {
    *(_OWORD *)v54 = 0u;
    v55 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v54);
    v5 = (void *)MEMORY[0x1E0C809B0];
    v50[0] = MEMORY[0x1E0C809B0];
    v50[1] = 0x40000000;
    v51 = ___ZN12QMISipLogger22reportHighestProcedureEj_block_invoke;
    v52 = &__block_descriptor_tmp_18;
    v53 = v3;
    v6 = (const void **)v54[1];
    if (v54[1] != (void *)v55)
    {
      while (*((_BYTE *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v55)
          goto LABEL_11;
      }
    }
    if (v6 == (const void **)v55)
    {
LABEL_11:
      v8 = operator new();
      v9 = v8;
      *(_BYTE *)(v8 + 8) = 1;
      *(_QWORD *)v8 = &off_1E78CCE50;
      *(_DWORD *)(v8 + 12) = 0;
      v10 = (_DWORD *)(v8 + 12);
      v11 = v55;
      if ((unint64_t)v55 >= *((_QWORD *)&v55 + 1))
      {
        v13 = (uint64_t)(v55 - (unint64_t)v54[1]) >> 3;
        if ((unint64_t)(v13 + 1) >> 61)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v14 = (uint64_t)(*((_QWORD *)&v55 + 1) - (unint64_t)v54[1]) >> 2;
        if (v14 <= v13 + 1)
          v14 = v13 + 1;
        if (*((_QWORD *)&v55 + 1) - (unint64_t)v54[1] >= 0x7FFFFFFFFFFFFFF8)
          v15 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (v15)
          v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v55 + 8, v15);
        else
          v16 = 0;
        v17 = (uint64_t *)&v16[8 * v13];
        v18 = &v16[8 * v15];
        *v17 = v9;
        v12 = v17 + 1;
        v20 = (char *)v54[1];
        v19 = (char *)v55;
        if ((void *)v55 != v54[1])
        {
          do
          {
            v21 = *((_QWORD *)v19 - 1);
            v19 -= 8;
            *--v17 = v21;
          }
          while (v19 != v20);
          v19 = (char *)v54[1];
        }
        v54[1] = v17;
        *(_QWORD *)&v55 = v12;
        *((_QWORD *)&v55 + 1) = v18;
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v55 = v8;
        v12 = (_QWORD *)(v11 + 8);
      }
      *(_QWORD *)&v55 = v12;
      v51((uint64_t)v50, v10);
    }
    else
    {
      if (!v7)
        __cxa_bad_cast();
      ___ZN12QMISipLogger22reportHighestProcedureEj_block_invoke((uint64_t)v50, v7 + 3);
    }
    v48 = 0;
    v49 = 0;
    v22 = *(_QWORD *)(*((_QWORD *)this + 34) + 240);
    if (v22)
    {
      v23 = *(void **)(v22 + 8);
      v24 = *(_QWORD *)(v22 + 16);
      __p = v23;
      v58 = v24;
      if (v24)
      {
        v25 = (unint64_t *)(v24 + 8);
        do
          v26 = __ldxr(v25);
        while (__stxr(v26 + 1, v25));
      }
      if (v23
      {
        v48 = v27;
        v49 = (std::__shared_weak_count *)v24;
        p_p = &__p;
      }
      else
      {
        p_p = (void **)&v48;
      }
      *p_p = 0;
      p_p[1] = 0;
      v29 = (std::__shared_weak_count *)v58;
      if (v58)
      {
        v30 = (unint64_t *)(v58 + 8);
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v48 && v48[96])
      {
        v32 = qmi::ClientRouter::get();
        v33 = operator new();
        *(_QWORD *)v33 = v32;
        *(_QWORD *)(v33 + 8) = QMIServiceMsg::create();
        *(_DWORD *)(v33 + 16) = 25000;
        *(_QWORD *)(v33 + 24) = 0;
        *(_QWORD *)(v33 + 32) = 0;
        v47 = v33;
        v34 = (std::__shared_weak_count *)operator new(0x20uLL);
        v34->__shared_owners_ = 0;
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        v34->__shared_weak_owners_ = 0;
        v34->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CCEB8;
        v63 = &v34[1].__vftable;
        v64 = v34;
        __p = v5;
        v58 = 1174405120;
        v59 = ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN12QMISipLogger22reportHighestProcedureEjE3__0EEOS1_OT__block_invoke;
        v60 = &__block_descriptor_tmp_21;
        v61 = &v34[1].__vftable;
        v62 = v34;
        do
          v36 = __ldxr(p_shared_owners);
        while (__stxr(v36 + 1, p_shared_owners));
        aBlock[0] = v5;
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas14SetImsProcType8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        aBlock[3] = &unk_1E78CCF00;
        aBlock[4] = &__p;
        *(_QWORD *)(v33 + 32) = _Block_copy(aBlock);
        v37 = v62;
        if (v62)
        {
          v38 = (unint64_t *)&v62->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v40 = v64;
        if (v64)
        {
          v41 = (unint64_t *)&v64->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        v43 = v47;
        v47 = 0;
        if (v43)
          std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&v47, v43);
      }
    }
    v44 = v49;
    if (v49)
    {
      v45 = (unint64_t *)&v49->__shared_owners_;
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v54);
  }
}

void sub_1BEFAFEBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v31 - 136);
  if (a11)
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v29, a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12QMISipLogger22reportHighestProcedureEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void QMISipLogger::recordProcedure(uint64_t **this, _QWORD *a2, int a3, int a4, int a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unsigned int v13;
  unint64_t *v14;
  unint64_t v15;
  int v16;
  int v18;
  uint64_t **v19;
  __int16 v20;
  __int16 v21;
  __int16 v22;
  int v23;
  uint64_t v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  void *__p[2];
  char v30;
  unsigned int v31;
  int v32;

  v32 = a3;
  v9 = *a2;
  v10 = (std::__shared_weak_count *)a2[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  if (v9)
    v13 = *(_DWORD *)(v9 + 4076);
  else
    v13 = 0;
  v31 = 0;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v31 = v13;
  v16 = QMISipLogger::procedureForInstance((QMISipLogger *)this, v13);
  if (!ims::AccessNetwork::isWifi((ims::AccessNetwork *)(*a2 + 3136)) || a5 != 0)
  {
    v18 = 1 << v32;
    v19 = std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 31, v13, &v31);
    v20 = *((_WORD *)v19 + 16);
    v21 = v20 & ~(_WORD)v18;
    v22 = v20 | v18;
    if (!a4)
      v22 = v21;
    *((_WORD *)v19 + 16) = v22;
    v23 = *((unsigned __int16 *)std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 31, v13, &v31)+ 16);
    v24 = ((uint64_t (*)(uint64_t **))(*this)[8])(this);
    ((void (*)(uint64_t **, uint64_t))(*this)[2])(this, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Procedure ", 10);
    *(_BYTE *)(v24 + 17) = 0;
    if (v16 == v23)
    {
      ims::toString<nas::ProcedureType>(&v32, __p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 32))(v24, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" already ", 9);
      *(_BYTE *)(v24 + 17) = 0;
      if (a4)
        v25 = "started";
      else
        v25 = "ended";
      if (a4)
        v26 = 7;
      else
        v26 = 5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)v25, v26);
      *(_BYTE *)(v24 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" for instance ", 14);
      *(_BYTE *)(v24 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
    }
    else
    {
      ims::toString<nas::ProcedureType>(&v32, __p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 32))(v24, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" ", 1);
      *(_BYTE *)(v24 + 17) = 0;
      if (a4)
        v27 = "started";
      else
        v27 = "ended";
      if (a4)
        v28 = 7;
      else
        v28 = 5;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)v27, v28);
      *(_BYTE *)(v24 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" for instance ", 14);
      *(_BYTE *)(v24 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      QMISipLogger::reportHighestProcedure((QMISipLogger *)this, v13);
    }
  }
}

void sub_1BEFB0248(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void QMISipLogger::~QMISipLogger(QMISipLogger *this)
{
  *(_QWORD *)this = &off_1E78CCB90;
  *((_QWORD *)this + 13) = &unk_1E78CCCE0;
  *((_QWORD *)this + 17) = &unk_1E78CCD10;
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((_QWORD **)this + 32));
  LegacyQMISipLogger::~LegacyQMISipLogger(this);
}

{
  *(_QWORD *)this = &off_1E78CCB90;
  *((_QWORD *)this + 13) = &unk_1E78CCCE0;
  *((_QWORD *)this + 17) = &unk_1E78CCD10;
  std::__tree<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::__map_value_compare<SDPType,std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>,std::less<SDPType>,true>,std::allocator<std::__value_type<SDPType,BOOL (*)(SDPParser::SDPParserContext const&,std::string &,std::istringstream &)>>>::destroy(*((_QWORD **)this + 32));
  LegacyQMISipLogger::~LegacyQMISipLogger(this);
  JUMPOUT(0x1C3B87100);
}

void QMISipLogger::logSipRequest(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void `non-virtual thunk to'QMISipLogger::logSipRequest(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void QMISipLogger::logSipResponse(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void `non-virtual thunk to'QMISipLogger::logSipResponse(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void QMISipLogger::logEarlyMTSessionRequestedEvent(uint64_t **a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = *a2;
  v13 = 0;
  v14 = 0;
  v5 = *(std::__shared_weak_count **)(v4 + 360);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    v14 = v6;
    if (v6)
      v13 = *(_QWORD *)(v4 + 352);
  }
  else
  {
    v6 = 0;
  }
  QMISipLogger::recordProcedure(a1, &v13, 6, 1, 0);
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = (std::__shared_weak_count *)a2[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEFB05A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
  QMISipLogger::logEarlyMTSessionRequestedEvent((uint64_t **)(a1 - 136), a2);
}

void QMISipLogger::logSessionRequestedEvent(uint64_t **a1, uint64_t *a2, char a3, int a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;

  v8 = *a2;
  v22 = 0;
  v23 = 0;
  v9 = *(std::__shared_weak_count **)(v8 + 360);
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    v23 = v10;
    if (v10)
      v22 = *(_QWORD *)(v8 + 352);
  }
  else
  {
    v10 = 0;
  }
  QMISipLogger::recordProcedure(a1, &v22, 6, 1, 0);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
  ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"QMISipLogger::logSessionRequestedEvent [appCallId=", 50);
  *(_BYTE *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v14;
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  LegacyQMISipLogger::logSessionRequestedEvent((uint64_t)a1, (uint64_t)&v20, a3, a4);
  v17 = v21;
  if (v21)
  {
    v18 = (unint64_t *)&v21->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BEFB0770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t *a2, char a3, int a4)
{
  QMISipLogger::logSessionRequestedEvent((uint64_t **)(a1 - 136), a2, a3, a4);
}

void QMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"QMISipLogger::logSessionProgressEvent [appCallId=", 49);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (std::__shared_weak_count *)a2[1];
  v11 = *a2;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  LegacyQMISipLogger::logSessionProgressEvent(a1, (uint64_t)&v11);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEFB08C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t *a2)
{
  QMISipLogger::logSessionProgressEvent(a1 - 136, a2);
}

void QMISipLogger::logRingingEvent(_BYTE *a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"QMISipLogger::logRingingEvent [appCallId=", 41);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = a2[1];
  v15 = *a2;
  v16 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  LegacyQMISipLogger::logRingingEvent(a1, &v15, a3, a4);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEFB0A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logRingingEvent(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  QMISipLogger::logRingingEvent((_BYTE *)(a1 - 136), a2, a3, a4);
}

void QMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"QMISipLogger::logPrackResponse [appCallId=", 42);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  LegacyQMISipLogger::logPrackResponse(a1, a2, &v15, a4);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEFB0B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  QMISipLogger::logPrackResponse(a1 - 136, a2, a3, a4);
}

void QMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"QMISipLogger::logIncomingPrack [appCallId=", 42);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = a3[1];
  v15 = *a3;
  v16 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  LegacyQMISipLogger::logIncomingPrack(a1, a2, &v15, a4);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEFB0CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  QMISipLogger::logIncomingPrack(a1 - 136, a2, a3, a4);
}

void QMISipLogger::logSessionConfirmedEvent(_BYTE *a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v8 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"QMISipLogger::logSessionConfirmedEvent [appCallId=", 50);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = (std::__shared_weak_count *)a2[1];
  v15 = *a2;
  v16 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  LegacyQMISipLogger::logSessionConfirmedEvent(a1, (uint64_t)&v15, a3, a4);
  v12 = v16;
  if (v16)
  {
    v13 = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEFB0DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logSessionConfirmedEvent(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  QMISipLogger::logSessionConfirmedEvent((_BYTE *)(a1 - 136), a2, a3, a4);
}

uint64_t QMISipLogger::logSessionTerminationEvent(QMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  uint64_t v8;

  v8 = (*(uint64_t (**)(QMISipLogger *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(QMISipLogger *, uint64_t))(*(_QWORD *)this + 16))(this, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"QMISipLogger::logSessionTerminationEvent [appCallId=", 52);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  return LegacyQMISipLogger::logSessionTerminationEvent(this, a2, a3, a4);
}

uint64_t `non-virtual thunk to'QMISipLogger::logSessionTerminationEvent(QMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  return QMISipLogger::logSessionTerminationEvent((QMISipLogger *)((char *)this - 136), a2, a3, a4);
}

void QMISipLogger::logSessionTerminatedEvent(QMISipLogger *this, const BambiCallSessionTerminatedEvent *a2)
{
  std::__shared_weak_count *v2;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  std::string v25;
  uint64_t v26;
  std::__shared_weak_count *v27;

  v2 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (!v2)
  {
    v26 = 0;
    v27 = 0;
    goto LABEL_34;
  }
  v4 = *((_QWORD *)a2 + 2);
  p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
  do
    v6 = __ldxr(p_shared_weak_owners);
  while (__stxr(v6 + 1, p_shared_weak_owners));
  v26 = 0;
  v27 = std::__shared_weak_count::lock(v2);
  if (!v27)
    goto LABEL_33;
  v26 = v4;
  std::__shared_weak_count::__release_weak(v2);
  if (!v4)
    goto LABEL_34;
  v7 = *((_QWORD *)this + 34);
  v23 = 0;
  v24 = 0;
  v8 = *(std::__shared_weak_count **)(v4 + 360);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v24 = v9;
    if (v9)
    {
      v10 = *(_QWORD *)(v4 + 352);
      v23 = v10;
      goto LABEL_12;
    }
  }
  else
  {
    v9 = 0;
  }
  v10 = 0;
LABEL_12:
  if (*(char *)(v10 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  else
    v25 = *(std::string *)(v10 + 4136);
  v11 = BambiClient::callCountForStack(v7, (unsigned __int8 *)&v25);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (!v9)
    goto LABEL_21;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (v11)
      goto LABEL_34;
  }
  else
  {
LABEL_21:
    if (v11)
      goto LABEL_34;
  }
  v14 = v26;
  v21 = 0;
  v22 = 0;
  v15 = *(std::__shared_weak_count **)(v26 + 360);
  if (v15)
  {
    v2 = std::__shared_weak_count::lock(v15);
    v22 = v2;
    if (v2)
      v21 = *(_QWORD *)(v14 + 352);
  }
  else
  {
    v2 = 0;
  }
  QMISipLogger::recordProcedure((uint64_t **)this, &v21, 6, 0, 0);
  if (v2)
  {
    v16 = (unint64_t *)&v2->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
LABEL_33:
      std::__shared_weak_count::__release_weak(v2);
    }
  }
LABEL_34:
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_1BEFB10DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18 - 48);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logSessionTerminatedEvent(QMISipLogger *this, const BambiCallSessionTerminatedEvent *a2)
{
  QMISipLogger::logSessionTerminatedEvent((QMISipLogger *)((char *)this - 136), a2);
}

void QMISipLogger::logWiFiHandover(QMISipLogger *this, uint64_t *a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _QWORD v26[2];
  _QWORD v27[2];
  std::string v28;

  v6 = *a2;
  if (*a2)
  {
    v7 = *((_QWORD *)this + 34);
    if (*(char *)(v6 + 4159) < 0)
      std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)(v6 + 4136), *(_QWORD *)(v6 + 4144));
    else
      v28 = *(std::string *)(v6 + 4136);
    v8 = BambiClient::callCountForStack(v7, (unsigned __int8 *)&v28);
    v9 = v8;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v28.__r_.__value_.__l.__data_);
      if (!v9)
        return;
    }
    else if (!v8)
    {
      return;
    }
    v6 = *a2;
  }
  if (a3)
  {
    v10 = (std::__shared_weak_count *)a2[1];
    v27[0] = v6;
    v27[1] = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    QMISipLogger::recordProcedure((uint64_t **)this, v27, 6, 0, 1);
    if (!v10)
      goto LABEL_26;
    v13 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
  }
  else
  {
    v10 = (std::__shared_weak_count *)a2[1];
    v26[0] = v6;
    v26[1] = v10;
    if (v10)
    {
      v15 = (unint64_t *)&v10->__shared_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    QMISipLogger::recordProcedure((uint64_t **)this, v26, 6, 1, 0);
    if (!v10)
      goto LABEL_26;
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v14 = __ldaxr(v17);
    while (__stlxr(v14 - 1, v17));
  }
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
LABEL_26:
  v18 = (std::__shared_weak_count *)a2[1];
  v24 = *a2;
  v25 = v18;
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  LegacyQMISipLogger::logWiFiHandover((uint64_t)this, (uint64_t)&v24, a3);
  v21 = v25;
  if (v25)
  {
    v22 = (unint64_t *)&v25->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEFB1308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logWiFiHandover(uint64_t a1, uint64_t *a2, int a3)
{
  QMISipLogger::logWiFiHandover((QMISipLogger *)(a1 - 136), a2, a3);
}

void QMISipLogger::logRegistrationError(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QMISipLogger::recordProcedure(a1, v12, 4, 0, 0);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEFB1434(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logRegistrationError(uint64_t a1, _QWORD *a2)
{
  QMISipLogger::logRegistrationError((uint64_t **)(a1 - 136), a2);
}

void QMISipLogger::logRegistrationRequest(uint64_t **a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  _QWORD v13[2];

  if (!*(_BYTE *)(a3 + 92))
  {
    v8 = (std::__shared_weak_count *)a2[1];
    v13[0] = *a2;
    v13[1] = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    QMISipLogger::recordProcedure(a1, v13, 4, 1, 0);
    if (v8)
    {
      v11 = (unint64_t *)&v8->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEFB153C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logRegistrationRequest(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  QMISipLogger::logRegistrationRequest((uint64_t **)(a1 - 136), a2, a3);
}

void QMISipLogger::logRegistrationSuccess(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QMISipLogger::recordProcedure(a1, v12, 4, 0, 0);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEFB1638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logRegistrationSuccess(uint64_t a1, _QWORD *a2)
{
  QMISipLogger::logRegistrationSuccess((uint64_t **)(a1 - 136), a2);
}

void QMISipLogger::logRegistrationStateChange(uint64_t **this, _QWORD *a2, _DWORD *a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD v20[2];
  unsigned int v21;

  if (*a3)
  {
    if (*a3 == 1)
    {
      v5 = (std::__shared_weak_count *)a2[1];
      v20[0] = *a2;
      v20[1] = v5;
      if (v5)
      {
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v7 = __ldxr(p_shared_owners);
        while (__stxr(v7 + 1, p_shared_owners));
      }
      QMISipLogger::recordProcedure(this, v20, 4, 1, 0);
      if (v5)
      {
        v8 = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        goto LABEL_19;
      }
    }
  }
  else
  {
    v10 = *a2;
    v5 = (std::__shared_weak_count *)a2[1];
    if (v5)
    {
      v11 = (unint64_t *)&v5->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    if (v10)
      v13 = *(_DWORD *)(v10 + 4076);
    else
      v13 = 0;
    v21 = v13;
    v14 = ((uint64_t (*)(uint64_t **))(*this)[8])(this);
    ((void (*)(uint64_t **, uint64_t))(*this)[2])(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Clearing Procedure flags for instance ", 38);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    *((_WORD *)std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(this + 31, v13, &v21)+ 16) = 0;
    QMISipLogger::reportHighestProcedure((QMISipLogger *)this, v13);
    if (v5)
    {
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v15);
      while (__stlxr(v9 - 1, v15));
LABEL_19:
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  v16 = (std::__shared_weak_count *)a2[1];
  if (v16)
  {
    v17 = (unint64_t *)&v16->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    do
      v19 = __ldaxr(v17);
    while (__stlxr(v19 - 1, v17));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BEFB1840(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logRegistrationStateChange(uint64_t a1, _QWORD *a2, _DWORD *a3)
{
  QMISipLogger::logRegistrationStateChange((uint64_t **)(a1 - 136), a2, a3);
}

void QMISipLogger::logSmsSendAttemptedEvent(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QMISipLogger::recordProcedure(a1, v12, 2, 1, 0);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEFB1948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logSmsSendAttemptedEvent(uint64_t a1, _QWORD *a2)
{
  QMISipLogger::logSmsSendAttemptedEvent((uint64_t **)(a1 - 136), a2);
}

void QMISipLogger::logSmsSendCompletedEvent(uint64_t **a1, _QWORD *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD v12[2];

  v3 = (std::__shared_weak_count *)a2[1];
  v12[0] = *a2;
  v12[1] = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  QMISipLogger::recordProcedure(a1, v12, 2, 0, 0);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v9 = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    do
      v11 = __ldaxr(v9);
    while (__stlxr(v11 - 1, v9));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BEFB1A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'QMISipLogger::logSmsSendCompletedEvent(uint64_t a1, _QWORD *a2)
{
  QMISipLogger::logSmsSendCompletedEvent((uint64_t **)(a1 - 136), a2);
}

uint64_t LegacyQMISipLogger::start(LegacyQMISipLogger *this)
{
  return (*(uint64_t (**)(LegacyQMISipLogger *))(*(_QWORD *)this + 80))(this);
}

{
  NSObject *v2;
  char v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  IPTelephonyManager *v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p;
  char v28;
  dispatch_object_t object;
  void *v30;
  char v31;
  _BYTE v32[16];
  __int128 v33;

  if (!*((_BYTE *)this + 192))
  {
    v2 = sImsDispatchQueue;
    if (sImsDispatchQueue
      || (v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v2) != 0))
    {
      dispatch_retain(v2);
      v3 = 0;
    }
    else
    {
      v3 = 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v30, "LegacyQMISipLogger:MAVIMS");
    object = v2;
    if ((v3 & 1) == 0)
      dispatch_retain(v2);
    std::string::basic_string[abi:ne180100]<0>(&__p, "ims");
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (v4)
    {
      v5 = *((_QWORD *)this + 18);
      p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
      v25 = 0;
      v26 = 0;
      v8 = std::__shared_weak_count::lock(v4);
      v9 = v8;
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      else
      {
        v5 = 0;
      }
      v25 = v5;
      v26 = v8;
      std::__shared_weak_count::__release_weak(v4);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    else
    {
      v25 = 0;
      v26 = 0;
    }
    IPTelephonyManager::getInstance((uint64_t *)&v21);
    IPTelephonyManager::getBBServerConnection(v21, &v23);
    qmi::Client::createWithQueueLocal();
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 176, &v33);
    qmi::Client::~Client((qmi::Client *)v32);
    v14 = v24;
    if (v24)
    {
      v15 = (unint64_t *)&v24->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = v22;
    if (v22)
    {
      v18 = (unint64_t *)&v22->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    if (v26)
      std::__shared_weak_count::__release_weak(v26);
    if (v28 < 0)
      operator delete(__p);
    if (object)
      dispatch_release(object);
    if (v31 < 0)
      operator delete(v30);
    qmi::Client::setHandler();
    qmi::Client::start((LegacyQMISipLogger *)((char *)this + 160));
    *((_BYTE *)this + 192) = 1;
    *((_QWORD *)this + 30) = 0;
    *((_DWORD *)this + 57) = 0;
    *((_DWORD *)this + 58) = 0;
    if ((v3 & 1) == 0)
      dispatch_release(v2);
  }
  return 1;
}

uint64_t LegacyQMISipLogger::isATCommandModeEnabled(LegacyQMISipLogger *this)
{
  return *((unsigned __int8 *)this + 194);
}

uint64_t `non-virtual thunk to'LegacyQMISipLogger::start(LegacyQMISipLogger *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 13) + 80))((char *)this - 104);
}

{
  LegacyQMISipLogger::start((LegacyQMISipLogger *)((char *)this - 104));
  return 1;
}

void std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](uint64_t a1, uint64_t a2)
{
  const void *v3;

  if (a2)
  {
    if (*(_QWORD *)(a2 + 8))
      qmi::Client::send();
    v3 = *(const void **)(a2 + 32);
    if (v3)
      _Block_release(v3);
    JUMPOUT(0x1C3B87100);
  }
}

uint64_t **std::__tree<std::__value_type<unsigned int,unsigned short>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,unsigned short>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,unsigned short>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unsigned int v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_WORD *)v7 + 16) = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_DWORD *)(v3 + 3) = *(_DWORD *)(result + 12);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ProcType>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78CCE50;
  *(_DWORD *)(result + 12) = *(_DWORD *)(a1 + 12);
  return result;
}

uint64_t __copy_helper_block_e8_32c73_ZTSNSt3__110shared_ptrIZN12QMISipLogger22reportHighestProcedureEjE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c73_ZTSNSt3__110shared_ptrIZN12QMISipLogger22reportHighestProcedureEjE3__0EE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void std::__shared_ptr_emplace<QMISipLogger::reportHighestProcedure(unsigned int)::$_0,std::allocator<QMISipLogger::reportHighestProcedure(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CCEB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMISipLogger::reportHighestProcedure(unsigned int)::$_0,std::allocator<QMISipLogger::reportHighestProcedure(unsigned int)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CCEB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas14SetImsProcType8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BEFB1DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

void LegacyQMISipLogger::LegacyQMISipLogger(LegacyQMISipLogger *this)
{
  uint64_t v2;
  void *v3[2];
  char v4;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.log");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  *(_QWORD *)this = &off_1E78CCF30;
  *((_QWORD *)this + 13) = &unk_1E78CD080;
  *((_QWORD *)this + 17) = &unk_1E78CD0B0;
  *((_OWORD *)this + 10) = 0u;
  *((_BYTE *)this + 194) = 0;
  *((_QWORD *)this + 25) = 0;
  *((_QWORD *)this + 26) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_OWORD *)this + 11) = 0u;
  *((_BYTE *)this + 192) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(v3, (char *)&str_2_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"LegacyQMISipLogger to start", 27);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(v3[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEFB1F40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  qmi::Client *v21;
  void **v22;
  void **v23;
  std::__shared_weak_count *v25;

  if (a20 < 0)
    operator delete(__p);
  if (*(char *)(v20 + 223) < 0)
    operator delete(*v23);
  qmi::Client::~Client(v21);
  v25 = *(std::__shared_weak_count **)(v20 + 152);
  if (v25)
    std::__shared_weak_count::__release_weak(v25);
  *(_QWORD *)(v20 + 104) = &unk_1E78BDE98;
  if (*(char *)(v20 + 135) < 0)
    operator delete(*v22);
  ImsLogContainer::~ImsLogContainer((void **)v20);
  _Unwind_Resume(a1);
}

void LegacyQMISipLogger::~LegacyQMISipLogger(LegacyQMISipLogger *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78CCF30;
  *((_QWORD *)this + 13) = &unk_1E78CD080;
  *((_QWORD *)this + 17) = &unk_1E78CD0B0;
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  qmi::Client::~Client((LegacyQMISipLogger *)((char *)this + 160));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *((_QWORD *)this + 13) = &unk_1E78BDE98;
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  LegacyQMISipLogger::~LegacyQMISipLogger(this);
  JUMPOUT(0x1C3B87100);
}

void sub_1BEFB232C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  NSObject *v28;
  char v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  if (a21 < 0)
    operator delete(__p);
  if (object)
    dispatch_release(object);
  if (a28 < 0)
    operator delete(a23);
  if ((v29 & 1) == 0)
    dispatch_release(v28);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger5startEv_block_invoke()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void *v3[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(v3, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v0 = ImsLogger::debug(ims::_logger, (uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)"LegacyQMISipLogger Started", 26);
  *(_BYTE *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v0 + 17) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_1BEFB2470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t LegacyQMISipLogger::stop(uint64_t this)
{
  if (*(_BYTE *)(this + 192))
    return qmi::Client::stop((qmi::Client *)(this + 160));
  return this;
}

uint64_t `non-virtual thunk to'LegacyQMISipLogger::stop(uint64_t this)
{
  if (*(_BYTE *)(this + 88))
    return qmi::Client::stop((qmi::Client *)(this + 56));
  return this;
}

void LegacyQMISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  BambiClient *v9;
  BambiCall *v10;
  time_t v11;
  BambiCall *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string::size_type v21;
  char *v22;
  capabilities::radio *v23;
  BambiCall *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  BambiCall *v32;
  void *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  const void **v37;
  char *v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  uint64_t *v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  BambiCall *v54;
  unint64_t *v55;
  unint64_t v56;
  void *v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  _QWORD v64[5];
  _QWORD v65[6];
  std::__shared_weak_count *v66;
  char v67;
  void *__p;
  uint64_t v69;
  int v70;
  char v71;
  uint64_t v72;
  void *v73;
  _QWORD v74[2];
  void (*v75)(uint64_t, uint64_t);
  void *v76;
  BambiCall *v77;
  std::__shared_weak_count *v78;
  std::string v79;
  std::string v80;
  _QWORD v81[2];
  uint64_t (*v82)(uint64_t, char *);
  void *v83;
  int v84;
  _QWORD v85[2];
  void (*v86)(uint64_t, uint64_t);
  void *v87;
  std::string v88;
  char v89;
  char v90;
  __int128 v91;
  __int128 v92;
  std::string __str;
  std::string aBlock;
  void *v95;
  _QWORD *v96;

  std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logSessionRequestedEvent [appCallId=", 56);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v71 < 0)
    operator delete(__p);
  if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
    operator delete(aBlock.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 192))
  {
    v9 = (BambiClient *)BambiCall::bambiClient(*(BambiCall **)a2);
    memset(&__str, 0, sizeof(__str));
    v10 = *(BambiCall **)a2;
    if (*(char *)(*(_QWORD *)a2 + 511) < 0)
      std::string::__init_copy_ctor_external(&__str, *((const std::string::value_type **)v10 + 61), *((_QWORD *)v10 + 62));
    else
      __str = *(std::string *)((char *)v10 + 488);
    v11 = time(0);
    *(_BYTE *)(a1 + 224) = a3;
    if ((unint64_t)BambiClient::callCount(v9) < 2 || a4)
      std::string::operator=((std::string *)(a1 + 200), &__str);
    *(_QWORD *)(a1 + 240) = v11;
    v12 = *(BambiCall **)a2;
    __p = 0;
    v69 = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)v12 + 45);
    if (v13)
    {
      v14 = std::__shared_weak_count::lock(v13);
      v69 = (uint64_t)v14;
      if (v14)
      {
        v15 = *((_QWORD *)v12 + 44);
        __p = (void *)v15;
        goto LABEL_17;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
LABEL_17:
    if (*(char *)(v15 + 4159) < 0)
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v15 + 4136), *(_QWORD *)(v15 + 4144));
    else
      aBlock = *(std::string *)(v15 + 4136);
    v16 = *((_QWORD *)v9 + 19);
    if (v16)
    {
      v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v16 + 320) == v17)
        v18 = 0;
      else
        v18 = *((_DWORD *)v17 + 14);
      LOBYTE(v16) = v18 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(aBlock.__r_.__value_.__l.__data_);
      if (!v14)
        goto LABEL_32;
    }
    else if (!v14)
    {
      goto LABEL_32;
    }
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v16 & 1) == 0)
        goto LABEL_33;
      goto LABEL_110;
    }
LABEL_32:
    if ((v16 & 1) == 0)
    {
LABEL_33:
      v91 = 0u;
      v92 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v91);
      v21 = MEMORY[0x1E0C809B0];
      v85[0] = MEMORY[0x1E0C809B0];
      v85[1] = 1174405120;
      v86 = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke;
      v87 = &__block_descriptor_tmp_11;
      v89 = a4;
      v90 = a3;
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v88, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
      else
        v88 = __str;
      v22 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(&v91);
      v23 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v86)(v85, v22);
      if (capabilities::radio::mav20Plus(v23))
      {
        v24 = *(BambiCall **)a2;
        v25 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 360);
        if (v25 && (v26 = std::__shared_weak_count::lock(v25)) != 0)
        {
          v27 = v26;
          v28 = *(_DWORD *)(*((_QWORD *)v24 + 44) + 4076);
          v29 = (unint64_t *)&v26->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        else
        {
          v28 = MEMORY[0xFEC];
        }
        v81[0] = v21;
        v81[1] = 0x40000000;
        v82 = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_12;
        v83 = &__block_descriptor_tmp_14;
        v84 = v28;
        v31 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(&v91);
        v82((uint64_t)v81, v31);
      }
      if ((a4 & 1) != 0 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 304))(a1))
      {
        __p = (void *)(a1 + 160);
        v69 = QMIServiceMsg::create();
        v70 = 25000;
        v72 = 0;
        v73 = 0;
        v64[0] = v21;
        v64[1] = 0x40000000;
        v64[2] = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_20;
        v64[3] = &__block_descriptor_tmp_21_0;
        v64[4] = a1;
        aBlock.__r_.__value_.__r.__words[0] = v21;
        aBlock.__r_.__value_.__l.__size_ = 0x40000000;
        aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v95 = &unk_1E78CD758;
        v96 = v64;
        v33 = _Block_copy(&aBlock);
        v73 = v33;
        if (v69)
        {
          qmi::Client::send();
          v33 = v73;
        }
        if (v33)
          _Block_release(v33);
      }
      else
      {
        memset(&v80, 0, sizeof(v80));
        v32 = *(BambiCall **)a2;
        if (*(char *)(*(_QWORD *)a2 + 1239) < 0)
        {
          std::string::__init_copy_ctor_external(&v80, *((const std::string::value_type **)v32 + 152), *((_QWORD *)v32 + 153));
          v32 = *(BambiCall **)a2;
        }
        else
        {
          v80 = *(std::string *)((char *)v32 + 1216);
        }
        v74[0] = v21;
        v74[1] = 1174405120;
        v75 = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_2;
        v76 = &__block_descriptor_tmp_15_1;
        v34 = *(std::__shared_weak_count **)(a2 + 8);
        v77 = v32;
        v78 = v34;
        if (v34)
        {
          v35 = (unint64_t *)&v34->__shared_owners_;
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v79, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
        else
          v79 = v80;
        v37 = (const void **)*((_QWORD *)&v91 + 1);
        if (*((_QWORD *)&v91 + 1) != (_QWORD)v92)
        {
          while (*((_BYTE *)*v37 + 8) != 18)
          {
            if (++v37 == (const void **)v92)
              goto LABEL_69;
          }
        }
        if (v37 == (const void **)v92)
        {
LABEL_69:
          v40 = operator new();
          v41 = v40;
          *(_BYTE *)(v40 + 8) = 18;
          *(_QWORD *)v40 = &off_1E78CD728;
          *(_QWORD *)(v40 + 16) = 0;
          v39 = (char *)(v40 + 16);
          *(_QWORD *)(v40 + 56) = 0;
          *(_QWORD *)(v40 + 64) = 0;
          *(_QWORD *)(v40 + 48) = 0;
          *(_BYTE *)(v40 + 24) = 0;
          *(_QWORD *)(v40 + 28) = 0;
          *(_QWORD *)(v40 + 33) = 0;
          v42 = v92;
          if ((unint64_t)v92 >= *((_QWORD *)&v92 + 1))
          {
            v44 = (uint64_t)(v92 - *((_QWORD *)&v91 + 1)) >> 3;
            if ((unint64_t)(v44 + 1) >> 61)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v45 = (uint64_t)(*((_QWORD *)&v92 + 1) - *((_QWORD *)&v91 + 1)) >> 2;
            if (v45 <= v44 + 1)
              v45 = v44 + 1;
            if (*((_QWORD *)&v92 + 1) - *((_QWORD *)&v91 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v46 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v46 = v45;
            if (v46)
              v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v92 + 8, v46);
            else
              v47 = 0;
            v48 = (uint64_t *)&v47[8 * v44];
            v49 = &v47[8 * v46];
            *v48 = v41;
            v43 = v48 + 1;
            v51 = (char *)*((_QWORD *)&v91 + 1);
            v50 = (char *)v92;
            if ((_QWORD)v92 != *((_QWORD *)&v91 + 1))
            {
              do
              {
                v52 = *((_QWORD *)v50 - 1);
                v50 -= 8;
                *--v48 = v52;
              }
              while (v50 != v51);
              v50 = (char *)*((_QWORD *)&v91 + 1);
            }
            *((_QWORD *)&v91 + 1) = v48;
            *(_QWORD *)&v92 = v43;
            *((_QWORD *)&v92 + 1) = v49;
            if (v50)
              operator delete(v50);
          }
          else
          {
            *(_QWORD *)v92 = v40;
            v43 = (_QWORD *)(v42 + 8);
          }
          *(_QWORD *)&v92 = v43;
        }
        else
        {
          if (!v38)
            __cxa_bad_cast();
          v39 = v38 + 16;
        }
        v75((uint64_t)v74, (uint64_t)v39);
        __p = (void *)(a1 + 160);
        v69 = QMIServiceMsg::create();
        v70 = 25000;
        v72 = 0;
        v73 = 0;
        v65[0] = v21;
        v65[1] = 1174405120;
        v65[2] = ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_16;
        v65[3] = &__block_descriptor_tmp_19_0;
        v54 = *(BambiCall **)a2;
        v53 = *(std::__shared_weak_count **)(a2 + 8);
        v65[4] = a1;
        v65[5] = v54;
        v66 = v53;
        if (v53)
        {
          v55 = (unint64_t *)&v53->__shared_owners_;
          do
            v56 = __ldxr(v55);
          while (__stxr(v56 + 1, v55));
        }
        v67 = a3;
        aBlock.__r_.__value_.__r.__words[0] = v21;
        aBlock.__r_.__value_.__l.__size_ = 0x40000000;
        aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        v95 = &unk_1E78CD758;
        v96 = v65;
        v57 = _Block_copy(&aBlock);
        v73 = v57;
        if (v69)
        {
          qmi::Client::send();
          v57 = v73;
        }
        if (v57)
          _Block_release(v57);
        v58 = v66;
        if (v66)
        {
          v59 = (unint64_t *)&v66->__shared_owners_;
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
          if (!v60)
          {
            ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
            std::__shared_weak_count::__release_weak(v58);
          }
        }
        if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v79.__r_.__value_.__l.__data_);
        v61 = v78;
        if (v78)
        {
          v62 = (unint64_t *)&v78->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v80.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v91);
    }
LABEL_110:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFB2D00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  uint64_t v63;
  uint64_t v64;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v63 + 32);
  if (a48 < 0)
    operator delete(__p);
  if (a63 < 0)
    operator delete(a58);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v64 - 208));
  if (*(char *)(v64 - 153) < 0)
    operator delete(*(void **)(v64 - 176));
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  char v24;

  v4 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)a2 = v4;
  *(_WORD *)(a2 + 1) = 513;
  *(_WORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 57);
  if (*(char *)(a1 + 55) < 0)
    v5 = *(unsigned __int16 *)(a1 + 40);
  else
    v5 = *(unsigned __int8 *)(a1 + 55);
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 32);
    v8 = (unint64_t *)(a2 + 16);
    do
    {
      v9 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v9 = *v7;
      v10 = *(_BYTE *)(v9 + v6);
      v12 = *(_BYTE **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *v8;
        v15 = &v12[-*v8];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v17 = v11 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v15[(_QWORD)v19];
        v21 = &v15[(_QWORD)v19];
        *v21 = v10;
        v13 = v21 + 1;
        if (v12 != (_BYTE *)v14)
        {
          v22 = &v12[~v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != (_BYTE *)v14);
          v12 = (_BYTE *)*v8;
          v20 = v19;
        }
        *(_QWORD *)(a2 + 16) = v20;
        *(_QWORD *)(a2 + 24) = v13;
        *(_QWORD *)(a2 + 32) = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
    v4 = *(unsigned __int8 *)(a1 + 56);
  }
  if (v4)
    v24 = 5;
  else
    v24 = 6;
  *(_BYTE *)(a2 + 7) = v24;
  *(_DWORD *)(a2 + 8) = 0;
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

uint64_t ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_12(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t v18;
  _BYTE *v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  char *v23;
  char *v24;
  _BYTE *v25;
  _BYTE *v26;
  char v27;

  *(_DWORD *)a2 = 1;
  *(_DWORD *)(a2 + 4) = BambiCall::senderIsPrivate(*(BambiCall **)(a1 + 32));
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *(std::__shared_weak_count **)(v4 + 360);
  if (v5 && (v6 = std::__shared_weak_count::lock(v5)) != 0)
  {
    v7 = v6;
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(*(_QWORD *)(v4 + 352) + 176);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = MEMORY[0xB0];
  }
  *(_QWORD *)(a2 + 12) = 0x300000001;
  *(_DWORD *)(a2 + 20) = 0;
  if (*(char *)(a1 + 71) < 0)
    v10 = *(unsigned __int8 *)(a1 + 56);
  else
    v10 = *(unsigned __int8 *)(a1 + 71);
  *(_BYTE *)(a2 + 24) = v10;
  if (v10)
  {
    v11 = 0;
    v12 = (unint64_t *)(a2 + 32);
    do
    {
      v13 = a1 + 48;
      if (*(char *)(a1 + 71) < 0)
        v13 = *(_QWORD *)(a1 + 48);
      v14 = *(_BYTE *)(v13 + v11);
      v16 = *(_BYTE **)(a2 + 40);
      v15 = *(_QWORD *)(a2 + 48);
      if ((unint64_t)v16 >= v15)
      {
        v18 = *v12;
        v19 = &v16[-*v12];
        v20 = (unint64_t)(v19 + 1);
        if ((uint64_t)(v19 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v21 = v15 - v18;
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x3FFFFFFFFFFFFFFFLL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v20;
        if (v22)
          v23 = (char *)operator new(v22);
        else
          v23 = 0;
        v24 = &v19[(_QWORD)v23];
        v25 = &v19[(_QWORD)v23];
        *v25 = v14;
        v17 = v25 + 1;
        if (v16 != (_BYTE *)v18)
        {
          v26 = &v16[~v18];
          do
          {
            v27 = *--v16;
            (v26--)[(_QWORD)v23] = v27;
          }
          while (v16 != (_BYTE *)v18);
          v16 = (_BYTE *)*v12;
          v24 = v23;
        }
        *(_QWORD *)(a2 + 32) = v24;
        *(_QWORD *)(a2 + 40) = v17;
        *(_QWORD *)(a2 + 48) = &v23[v22];
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v16 = v14;
        v17 = v16 + 1;
      }
      *(_QWORD *)(a2 + 40) = v17;
      ++v11;
    }
    while (v11 < *(unsigned __int8 *)(a2 + 24));
  }
}

void __copy_helper_block_e8_32c36_ZTSNSt3__110shared_ptrI9BambiCallEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(std::string *a1, uint64_t a2)
{
  std::string::size_type v2;
  unint64_t *v3;
  unint64_t v4;
  std::string *v5;
  __int128 v6;

  v2 = *(_QWORD *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = *(_QWORD *)(a2 + 32);
  a1[1].__r_.__value_.__r.__words[2] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 48);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BEFB3218(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c36_ZTSNSt3__110shared_ptrI9BambiCallEE48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_16(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *TlvValue;
  int v13;
  void *v14;
  int v15;
  char *v16;
  capabilities::radio *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  int v21;
  unint64_t *v22;
  unint64_t v23;
  const void **v24;
  char *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  uint64_t *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  void *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD v43[6];
  uint64_t v44;
  int v45;
  uint64_t v46;
  void *v47;
  void *__p[2];
  void (*v49)(uint64_t, uint64_t);
  void *v50;
  std::string v51;
  char v52;
  std::string v53;
  void *v54[2];
  __int128 v55;
  _QWORD v56[2];
  uint64_t (*v57)(uint64_t, void **);
  void *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char v63;
  void *aBlock[2];
  void (*v65)(uint64_t, QMIServiceMsg *);
  void *v66;
  _QWORD *v67;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = *(_BYTE *)(a1 + 56);
  v60 = 0;
  v61 = &v60;
  v62 = 0x2000000000;
  v63 = -1;
  std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(aBlock, (char *)&str_2_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"logSessionRequestedEvent", 24);
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" handleResponseForIncomingCall  for incoming call ", 50);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(v65) < 0)
    operator delete(aBlock[0]);
  if (SHIBYTE(v49) < 0)
    operator delete(__p[0]);
  if (*((_DWORD *)a2 + 1))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(aBlock, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"logSessionRequestedEvent", 24);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" request failed for incoming call", 33);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_17:
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(v65) < 0)
      operator delete(aBlock[0]);
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    goto LABEL_67;
  }
  v11 = (void *)MEMORY[0x1E0C809B0];
  v56[0] = MEMORY[0x1E0C809B0];
  v56[1] = 0x40000000;
  v57 = (uint64_t (*)(uint64_t, void **))___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke;
  v58 = &unk_1E78CD538;
  v59 = &v60;
  TlvValue = (void *)qmi::MessageBase::findTlvValue(a2);
  v14 = TlvValue;
  if (!TlvValue)
    goto LABEL_16;
  v15 = v13;
  __p[0] = TlvValue;
  LOBYTE(aBlock[0]) = tlv::parseV<mavims::tlv::IncomingCallBasebandCallId>((tlv **)__p, v13);
  if (!__p[0])
  {
    if (((unsigned int (*)(_QWORD, uint64_t, void *, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a2, 18, v14, v15))
    {
      goto LABEL_14;
    }
LABEL_16:
    std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(aBlock, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"LegacyQMISipLogger::handleResponseForIncomingCall did not contain a baseband Call Id", 84);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_17;
  }
  v57((uint64_t)v56, aBlock);
LABEL_14:
  *(_OWORD *)v54 = 0u;
  v55 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v54);
  memset(&v53, 0, sizeof(v53));
  if (*(char *)(v4 + 511) < 0)
    std::string::__init_copy_ctor_external(&v53, *(const std::string::value_type **)(v4 + 488), *(_QWORD *)(v4 + 496));
  else
    v53 = *(std::string *)(v4 + 488);
  __p[0] = v11;
  __p[1] = (void *)1174405120;
  v49 = ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2;
  v50 = &__block_descriptor_tmp_69_0;
  v52 = v8;
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v51, v53.__r_.__value_.__l.__data_, v53.__r_.__value_.__l.__size_);
  else
    v51 = v53;
  v16 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(v54);
  v17 = (capabilities::radio *)((uint64_t (*)(void **, char *))v49)(__p, v16);
  if (capabilities::radio::mav20Plus(v17))
  {
    v18 = *(std::__shared_weak_count **)(v4 + 360);
    if (v18 && (v19 = std::__shared_weak_count::lock(v18)) != 0)
    {
      v20 = v19;
      v21 = *(_DWORD *)(*(_QWORD *)(v4 + 352) + 4076);
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      LOBYTE(v21) = MEMORY[0xFEC];
    }
    *qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(v54) = v21;
  }
  v24 = (const void **)v54[1];
  if (v54[1] != (void *)v55)
  {
    while (*((_BYTE *)*v24 + 8) != 19)
    {
      if (++v24 == (const void **)v55)
        goto LABEL_41;
    }
  }
  if (v24 == (const void **)v55)
  {
LABEL_41:
    v27 = operator new();
    v28 = v27;
    *(_BYTE *)(v27 + 8) = 19;
    *(_QWORD *)v27 = &off_1E78CD890;
    *(_BYTE *)(v27 + 12) = 0;
    v26 = (char *)(v27 + 12);
    *(_DWORD *)(v27 + 16) = 0;
    v29 = v55;
    if ((unint64_t)v55 >= *((_QWORD *)&v55 + 1))
    {
      v31 = (uint64_t)(v55 - (unint64_t)v54[1]) >> 3;
      if ((unint64_t)(v31 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v32 = (uint64_t)(*((_QWORD *)&v55 + 1) - (unint64_t)v54[1]) >> 2;
      if (v32 <= v31 + 1)
        v32 = v31 + 1;
      if (*((_QWORD *)&v55 + 1) - (unint64_t)v54[1] >= 0x7FFFFFFFFFFFFFF8)
        v33 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v33 = v32;
      if (v33)
        v34 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v55 + 8, v33);
      else
        v34 = 0;
      v35 = (uint64_t *)&v34[8 * v31];
      v36 = &v34[8 * v33];
      *v35 = v28;
      v30 = v35 + 1;
      v38 = (char *)v54[1];
      v37 = (char *)v55;
      if ((void *)v55 != v54[1])
      {
        do
        {
          v39 = *((_QWORD *)v37 - 1);
          v37 -= 8;
          *--v35 = v39;
        }
        while (v37 != v38);
        v37 = (char *)v54[1];
      }
      v54[1] = v35;
      *(_QWORD *)&v55 = v30;
      *((_QWORD *)&v55 + 1) = v36;
      if (v37)
        operator delete(v37);
    }
    else
    {
      *(_QWORD *)v55 = v27;
      v30 = (_QWORD *)(v29 + 8);
    }
    *(_QWORD *)&v55 = v30;
  }
  else
  {
    if (!v25)
      __cxa_bad_cast();
    v26 = v25 + 12;
  }
  *v26 = *((_BYTE *)v61 + 24);
  *((_DWORD *)v26 + 1) = 1;
  v43[5] = v3 + 160;
  v44 = QMIServiceMsg::create();
  v45 = 25000;
  v46 = 0;
  v47 = 0;
  v43[0] = v11;
  v43[1] = 0x40000000;
  v43[2] = ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_3;
  v43[3] = &__block_descriptor_tmp_76;
  v43[4] = v3;
  aBlock[0] = v11;
  aBlock[1] = (void *)0x40000000;
  v65 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v66 = &unk_1E78CD758;
  v67 = v43;
  v40 = _Block_copy(aBlock);
  v47 = v40;
  if (v44)
  {
    qmi::Client::send();
    v40 = v47;
  }
  if (v40)
    _Block_release(v40);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v53.__r_.__value_.__l.__data_);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v54);
LABEL_67:
  _Block_object_dispose(&v60, 8);
  if (v5)
  {
    v41 = (unint64_t *)&v5->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEFB3930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  uint64_t v42;

  if (a40 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a42);
  _Block_object_dispose((const void *)(v42 - 168), 8);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_40c36_ZTSNSt3__110shared_ptrI9BambiCallEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 40);
}

void ___ZN18LegacyQMISipLogger24logSessionRequestedEventENSt3__110shared_ptrI9BambiCallEEhb_block_invoke_20(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logSessionRequestedEvent");
}

void LegacyQMISipLogger::handleResponse(uint64_t a1, const char *a2)
{
  uint64_t v3;
  size_t v4;
  const char *v5;
  size_t v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (*(_DWORD *)(a1 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
    v4 = strlen(a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)a2, v4);
    *(_BYTE *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" request failed: ", 17);
    *(_BYTE *)(v3 + 17) = 0;
    v5 = (const char *)qmi::asString();
    v6 = strlen(v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)v5, v6);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_1BEFB3B5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'LegacyQMISipLogger::logSessionRequestedEvent(uint64_t a1, uint64_t a2, char a3, int a4)
{
  LegacyQMISipLogger::logSessionRequestedEvent(a1 - 136, a2, a3, a4);
}

void LegacyQMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  if (*(_BYTE *)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"LegacyQMISipLogger::logRingingEvent", 35);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"P-Asserted-Identity tel phone number ", 37);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, *(_QWORD *)a2 + 1216);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
    std::string::basic_string[abi:ne180100]<0>(v9, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"P-Asserted-Identity Context ", 28);
    *(_BYTE *)(v5 + 17) = 0;
    v6 = SipUri::phoneContext((SipUri *)(*(_QWORD *)a2 + 1040));
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 32))(v5, v6);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v8 < 0)
      operator delete(__p[0]);
    if (v10 < 0)
      operator delete(v9[0]);
  }
}

void sub_1BEFB3DDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'LegacyQMISipLogger::logSessionProgressEvent(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::logSessionProgressEvent(a1 - 136, a2);
}

void LegacyQMISipLogger::logRingingEvent(_BYTE *a1, uint64_t *a2, char a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int128 *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  int v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::string::size_type v24;
  char *v25;
  capabilities::radio *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  int v31;
  unint64_t *v32;
  unint64_t v33;
  char *v34;
  uint64_t v35;
  const void **v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  char *v46;
  uint64_t *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  void *v52;
  _QWORD v53[5];
  void *__p;
  uint64_t v55;
  int v56;
  char v57;
  uint64_t v58;
  void *v59;
  _QWORD v60[2];
  void (*v61)(unsigned __int8 *, uint64_t);
  void *v62;
  std::string v63;
  char v64;
  _QWORD v65[2];
  uint64_t (*v66)(uint64_t, char *);
  void *v67;
  int v68;
  _QWORD v69[2];
  void (*v70)(uint64_t, uint64_t);
  void *v71;
  std::string v72;
  char v73;
  __int128 v74;
  __int128 v75;
  std::string v76;
  std::string aBlock;
  void *v78;
  _QWORD *v79;

  if (a1[192])
  {
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logRingingEvent [appCallId=", 47);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v57 < 0)
      operator delete(__p);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"LegacyQMISipLogger::logRingingEvent", 35);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v57 < 0)
      operator delete(__p);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"P-Asserted-Identity tel phone number ", 37);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, *a2 + 1216);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v57 < 0)
      operator delete(__p);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"P-Asserted-Identity Context ", 28);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = SipUri::phoneContext((SipUri *)(*a2 + 1040));
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 32))(v11, v12);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v57 < 0)
      operator delete(__p);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    memset(&v76, 0, sizeof(v76));
    v13 = *a2;
    if (*(char *)(*a2 + 511) < 0)
    {
      std::string::__init_copy_ctor_external(&v76, *(const std::string::value_type **)(v13 + 488), *(_QWORD *)(v13 + 496));
      v13 = *a2;
    }
    else
    {
      v76 = *(std::string *)(v13 + 488);
    }
    v14 = BambiCall::bambiClient((BambiCall *)v13);
    v15 = *a2;
    __p = 0;
    v55 = 0;
    v16 = *(std::__shared_weak_count **)(v15 + 360);
    if (v16)
    {
      v17 = std::__shared_weak_count::lock(v16);
      v55 = (uint64_t)v17;
      if (v17)
      {
        v18 = *(_QWORD *)(v15 + 352);
        __p = (void *)v18;
        goto LABEL_26;
      }
    }
    else
    {
      v17 = 0;
    }
    v18 = 0;
LABEL_26:
    if (*(char *)(v18 + 4159) < 0)
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v18 + 4136), *(_QWORD *)(v18 + 4144));
    else
      aBlock = *(std::string *)(v18 + 4136);
    v19 = *(_QWORD *)(v14 + 152);
    if (v19)
    {
      v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v19 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v19 + 320) == v20)
        v21 = 0;
      else
        v21 = *((_DWORD *)v20 + 14);
      LOBYTE(v19) = v21 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(aBlock.__r_.__value_.__l.__data_);
      if (!v17)
        goto LABEL_41;
    }
    else if (!v17)
    {
      goto LABEL_41;
    }
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
      if ((v19 & 1) == 0)
        goto LABEL_42;
      goto LABEL_98;
    }
LABEL_41:
    if ((v19 & 1) == 0)
    {
LABEL_42:
      v74 = 0u;
      v75 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v74);
      v24 = MEMORY[0x1E0C809B0];
      v69[0] = MEMORY[0x1E0C809B0];
      v69[1] = 1174405120;
      v70 = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke;
      v71 = &__block_descriptor_tmp_26_0;
      v73 = a3;
      if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v72, v76.__r_.__value_.__l.__data_, v76.__r_.__value_.__l.__size_);
      else
        v72 = v76;
      v25 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(&v74);
      v26 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v70)(v69, v25);
      if (capabilities::radio::mav20Plus(v26))
      {
        v27 = *a2;
        v28 = *(std::__shared_weak_count **)(*a2 + 360);
        if (v28 && (v29 = std::__shared_weak_count::lock(v28)) != 0)
        {
          v30 = v29;
          v31 = *(_DWORD *)(*(_QWORD *)(v27 + 352) + 4076);
          v32 = (unint64_t *)&v29->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v30);
          }
        }
        else
        {
          v31 = MEMORY[0xFEC];
        }
        v65[0] = v24;
        v65[1] = 0x40000000;
        v66 = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_27;
        v67 = &__block_descriptor_tmp_28;
        v68 = v31;
        v34 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(&v74);
        v66((uint64_t)v65, v34);
      }
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 304))(a1))
      {
        memset(&aBlock, 0, sizeof(aBlock));
        v35 = *a2;
        if (*(char *)(*a2 + 1239) < 0)
          std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v35 + 1216), *(_QWORD *)(v35 + 1224));
        else
          aBlock = *(std::string *)(v35 + 1216);
        v60[0] = v24;
        v60[1] = 1174405120;
        v61 = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2;
        v62 = &__block_descriptor_tmp_29_2;
        v64 = a4;
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v63, aBlock.__r_.__value_.__l.__data_, aBlock.__r_.__value_.__l.__size_);
        else
          v63 = aBlock;
        v36 = (const void **)*((_QWORD *)&v74 + 1);
        if (*((_QWORD *)&v74 + 1) != (_QWORD)v75)
        {
          while (*((_BYTE *)*v36 + 8) != 16)
          {
            if (++v36 == (const void **)v75)
              goto LABEL_70;
          }
        }
        if (v36 == (const void **)v75)
        {
LABEL_70:
          v39 = operator new();
          v40 = v39;
          *(_BYTE *)(v39 + 8) = 16;
          *(_QWORD *)v39 = &off_1E78CD7A0;
          *(_BYTE *)(v39 + 16) = 0;
          v38 = (char *)(v39 + 16);
          *(_QWORD *)(v39 + 40) = 0;
          *(_QWORD *)(v39 + 48) = 0;
          *(_QWORD *)(v39 + 32) = 0;
          *(_QWORD *)(v39 + 20) = 0;
          *(_BYTE *)(v39 + 28) = 0;
          v41 = v75;
          if ((unint64_t)v75 >= *((_QWORD *)&v75 + 1))
          {
            v43 = (uint64_t)(v75 - *((_QWORD *)&v74 + 1)) >> 3;
            if ((unint64_t)(v43 + 1) >> 61)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v44 = (uint64_t)(*((_QWORD *)&v75 + 1) - *((_QWORD *)&v74 + 1)) >> 2;
            if (v44 <= v43 + 1)
              v44 = v43 + 1;
            if (*((_QWORD *)&v75 + 1) - *((_QWORD *)&v74 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v45 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v45 = v44;
            if (v45)
              v46 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v75 + 8, v45);
            else
              v46 = 0;
            v47 = (uint64_t *)&v46[8 * v43];
            v48 = &v46[8 * v45];
            *v47 = v40;
            v42 = v47 + 1;
            v50 = (char *)*((_QWORD *)&v74 + 1);
            v49 = (char *)v75;
            if ((_QWORD)v75 != *((_QWORD *)&v74 + 1))
            {
              do
              {
                v51 = *((_QWORD *)v49 - 1);
                v49 -= 8;
                *--v47 = v51;
              }
              while (v49 != v50);
              v49 = (char *)*((_QWORD *)&v74 + 1);
            }
            *((_QWORD *)&v74 + 1) = v47;
            *(_QWORD *)&v75 = v42;
            *((_QWORD *)&v75 + 1) = v48;
            if (v49)
              operator delete(v49);
          }
          else
          {
            *(_QWORD *)v75 = v39;
            v42 = (_QWORD *)(v41 + 8);
          }
          *(_QWORD *)&v75 = v42;
        }
        else
        {
          if (!v37)
            __cxa_bad_cast();
          v38 = v37 + 16;
        }
        v61((unsigned __int8 *)v60, (uint64_t)v38);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
          operator delete(aBlock.__r_.__value_.__l.__data_);
      }
      __p = a1 + 160;
      v55 = QMIServiceMsg::create();
      v56 = 25000;
      v58 = 0;
      v59 = 0;
      v53[0] = v24;
      v53[1] = 0x40000000;
      v53[2] = ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_30;
      v53[3] = &__block_descriptor_tmp_32;
      v53[4] = a1;
      aBlock.__r_.__value_.__r.__words[0] = v24;
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v78 = &unk_1E78CD758;
      v79 = v53;
      v52 = _Block_copy(&aBlock);
      v59 = v52;
      if (v55)
      {
        qmi::Client::send();
        v52 = v59;
      }
      if (v52)
        _Block_release(v52);
      if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v72.__r_.__value_.__l.__data_);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v74);
    }
LABEL_98:
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFB46BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;

  if (*(char *)(v48 - 121) < 0)
    operator delete(*(void **)(v48 - 144));
  if (a48 < 0)
    operator delete(__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v48 - 208));
  if (*(char *)(v48 - 153) < 0)
    operator delete(*(void **)(v48 - 176));
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 2;
  *(_WORD *)(a2 + 4) = 180;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    v4 = *(unsigned __int16 *)(a1 + 40);
  else
    v4 = *(unsigned __int8 *)(a1 + 55);
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(a1 + 32);
    v7 = (unint64_t *)(a2 + 16);
    do
    {
      v8 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v8 = *v6;
      v9 = *(_BYTE *)(v8 + v5);
      v11 = *(_BYTE **)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *v7;
        v14 = &v11[-*v7];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*v7;
          v19 = v18;
        }
        *(_QWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 24) = v12;
        *(_QWORD *)(a2 + 32) = &v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(_BYTE *)(a2 + 7) = 9;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_27(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2(unsigned __int8 *a1, uint64_t a2)
{
  int v4;
  unint64_t v5;
  unsigned __int8 **v6;
  unint64_t *v7;
  unsigned __int8 *v8;
  unsigned __int8 v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  unsigned __int8 *v20;
  _BYTE *v21;
  char v22;

  *(_BYTE *)a2 = a1[56];
  *(_QWORD *)(a2 + 4) = 0x100000003;
  if ((char)a1[55] < 0)
    v4 = a1[40];
  else
    v4 = a1[55];
  *(_BYTE *)(a2 + 12) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = (unsigned __int8 **)(a1 + 32);
    v7 = (unint64_t *)(a2 + 16);
    do
    {
      v8 = a1 + 32;
      if ((char)a1[55] < 0)
        v8 = *v6;
      v9 = v8[v5];
      v11 = *(_BYTE **)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *v7;
        v14 = &v11[-*v7];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*v7;
          v19 = v18;
        }
        *(_QWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 24) = v12;
        *(_QWORD *)(a2 + 32) = &v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int8 *)(a2 + 12));
  }
}

void ___ZN18LegacyQMISipLogger15logRingingEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_30(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logRingingEvent");
}

void `non-virtual thunk to'LegacyQMISipLogger::logRingingEvent(uint64_t a1, uint64_t *a2, char a3, char a4)
{
  LegacyQMISipLogger::logRingingEvent((_BYTE *)(a1 - 136), a2, a3, a4);
}

void LegacyQMISipLogger::logSessionConfirmedEvent(_BYTE *a1, uint64_t a2, char a3, char a4)
{
  uint64_t v8;
  BambiClient *v9;
  uint64_t v10;
  BambiCall *v11;
  char v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  void **v17;
  int v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::string::size_type v21;
  char *v22;
  capabilities::radio *v23;
  BambiCall *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  char *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  const void **v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  uint64_t *v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54;
  _QWORD v55[5];
  void *__p;
  uint64_t v57;
  int v58;
  char v59;
  uint64_t v60;
  void *v61;
  _QWORD v62[2];
  void (*v63)(uint64_t, uint64_t);
  void *v64;
  BambiCall *v65;
  std::__shared_weak_count *v66;
  char v67;
  _QWORD v68[2];
  uint64_t (*v69)(uint64_t, char *);
  void *v70;
  int v71;
  _QWORD v72[2];
  void (*v73)(uint64_t, uint64_t);
  void *v74;
  std::string v75;
  char v76;
  char v77;
  __int128 v78;
  __int128 v79;
  std::string v80;
  std::string aBlock;
  void *v82;
  _QWORD *v83;

  if (a1[192])
  {
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logSessionConfirmedEvent [appCallId=", 56);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v59 < 0)
      operator delete(__p);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    v9 = (BambiClient *)BambiCall::bambiClient(*(BambiCall **)a2);
    std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Current call count is ", 22);
    *(_BYTE *)(v10 + 17) = 0;
    BambiClient::callCount(v9);
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v59 < 0)
      operator delete(__p);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    memset(&v80, 0, sizeof(v80));
    v11 = *(BambiCall **)a2;
    if (*(char *)(*(_QWORD *)a2 + 511) < 0)
    {
      std::string::__init_copy_ctor_external(&v80, *((const std::string::value_type **)v11 + 61), *((_QWORD *)v11 + 62));
      v11 = *(BambiCall **)a2;
    }
    else
    {
      v80 = *(std::string *)((char *)v11 + 488);
    }
    v12 = *((_BYTE *)v11 + 1488);
    __p = 0;
    v57 = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)v11 + 45);
    if (v13)
    {
      v14 = std::__shared_weak_count::lock(v13);
      v57 = (uint64_t)v14;
      if (v14)
      {
        v15 = *((_QWORD *)v11 + 44);
        __p = (void *)v15;
        goto LABEL_18;
      }
    }
    else
    {
      v14 = 0;
    }
    v15 = 0;
LABEL_18:
    if (*(char *)(v15 + 4159) < 0)
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v15 + 4136), *(_QWORD *)(v15 + 4144));
    else
      aBlock = *(std::string *)(v15 + 4136);
    v16 = *((_QWORD *)v9 + 19);
    if (v16)
    {
      v17 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v16 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v16 + 320) == v17)
        v18 = 0;
      else
        v18 = *((_DWORD *)v17 + 14);
      LOBYTE(v16) = v18 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(aBlock.__r_.__value_.__l.__data_);
      if (!v14)
        goto LABEL_33;
    }
    else if (!v14)
    {
      goto LABEL_33;
    }
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
      if ((v16 & 1) == 0)
        goto LABEL_34;
      goto LABEL_88;
    }
LABEL_33:
    if ((v16 & 1) == 0)
    {
LABEL_34:
      v78 = 0u;
      v79 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v78);
      v21 = MEMORY[0x1E0C809B0];
      v72[0] = MEMORY[0x1E0C809B0];
      v72[1] = 1174405120;
      v73 = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke;
      v74 = &__block_descriptor_tmp_35_0;
      v76 = v12;
      v77 = a3;
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v75, v80.__r_.__value_.__l.__data_, v80.__r_.__value_.__l.__size_);
      else
        v75 = v80;
      v22 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(&v78);
      v23 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v73)(v72, v22);
      if (capabilities::radio::mav20Plus(v23))
      {
        v24 = *(BambiCall **)a2;
        v25 = *(std::__shared_weak_count **)(*(_QWORD *)a2 + 360);
        if (v25 && (v26 = std::__shared_weak_count::lock(v25)) != 0)
        {
          v27 = v26;
          v28 = *(_DWORD *)(*((_QWORD *)v24 + 44) + 4076);
          v29 = (unint64_t *)&v26->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        else
        {
          v28 = MEMORY[0xFEC];
        }
        v68[0] = v21;
        v68[1] = 0x40000000;
        v69 = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_36;
        v70 = &__block_descriptor_tmp_37;
        v71 = v28;
        v31 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(&v78);
        v69((uint64_t)v68, v31);
      }
      if ((*(unsigned int (**)(_BYTE *))(*(_QWORD *)a1 + 304))(a1))
      {
        v62[0] = v21;
        v62[1] = 1174405120;
        v63 = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2;
        v64 = &__block_descriptor_tmp_39;
        v67 = a4;
        v32 = *(std::__shared_weak_count **)(a2 + 8);
        v65 = *(BambiCall **)a2;
        v66 = v32;
        if (v32)
        {
          v33 = (unint64_t *)&v32->__shared_owners_;
          do
            v34 = __ldxr(v33);
          while (__stxr(v34 + 1, v33));
        }
        v35 = (const void **)*((_QWORD *)&v78 + 1);
        if (*((_QWORD *)&v78 + 1) != (_QWORD)v79)
        {
          while (*((_BYTE *)*v35 + 8) != 17)
          {
            if (++v35 == (const void **)v79)
              goto LABEL_59;
          }
        }
        if (v35 == (const void **)v79)
        {
LABEL_59:
          v38 = operator new();
          v39 = v38;
          *(_BYTE *)(v38 + 8) = 17;
          *(_QWORD *)v38 = &off_1E78CD7F0;
          *(_BYTE *)(v38 + 12) = 0;
          v37 = (char *)(v38 + 12);
          *(_DWORD *)(v38 + 16) = 0;
          *(_BYTE *)(v38 + 20) = 0;
          *(_DWORD *)(v38 + 24) = 0;
          v40 = v79;
          if ((unint64_t)v79 >= *((_QWORD *)&v79 + 1))
          {
            v42 = (uint64_t)(v79 - *((_QWORD *)&v78 + 1)) >> 3;
            if ((unint64_t)(v42 + 1) >> 61)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v43 = (uint64_t)(*((_QWORD *)&v79 + 1) - *((_QWORD *)&v78 + 1)) >> 2;
            if (v43 <= v42 + 1)
              v43 = v42 + 1;
            if (*((_QWORD *)&v79 + 1) - *((_QWORD *)&v78 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v44 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v44 = v43;
            if (v44)
              v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v79 + 8, v44);
            else
              v45 = 0;
            v46 = (uint64_t *)&v45[8 * v42];
            v47 = &v45[8 * v44];
            *v46 = v39;
            v41 = v46 + 1;
            v49 = (char *)*((_QWORD *)&v78 + 1);
            v48 = (char *)v79;
            if ((_QWORD)v79 != *((_QWORD *)&v78 + 1))
            {
              do
              {
                v50 = *((_QWORD *)v48 - 1);
                v48 -= 8;
                *--v46 = v50;
              }
              while (v48 != v49);
              v48 = (char *)*((_QWORD *)&v78 + 1);
            }
            *((_QWORD *)&v78 + 1) = v46;
            *(_QWORD *)&v79 = v41;
            *((_QWORD *)&v79 + 1) = v47;
            if (v48)
              operator delete(v48);
          }
          else
          {
            *(_QWORD *)v79 = v38;
            v41 = (_QWORD *)(v40 + 8);
          }
          *(_QWORD *)&v79 = v41;
        }
        else
        {
          if (!v36)
            __cxa_bad_cast();
          v37 = v36 + 12;
        }
        v63((uint64_t)v62, (uint64_t)v37);
        v51 = v66;
        if (v66)
        {
          v52 = (unint64_t *)&v66->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
      }
      __p = a1 + 160;
      v57 = QMIServiceMsg::create();
      v58 = 25000;
      v60 = 0;
      v61 = 0;
      v55[0] = v21;
      v55[1] = 0x40000000;
      v55[2] = ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_40;
      v55[3] = &__block_descriptor_tmp_42_0;
      v55[4] = a1;
      aBlock.__r_.__value_.__r.__words[0] = v21;
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v82 = &unk_1E78CD758;
      v83 = v55;
      v54 = _Block_copy(&aBlock);
      v61 = v54;
      if (v57)
      {
        qmi::Client::send();
        v54 = v61;
      }
      if (v54)
        _Block_release(v54);
      if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v75.__r_.__value_.__l.__data_);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v78);
    }
LABEL_88:
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFB51B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v43 - 208));
  if (*(char *)(v43 - 153) < 0)
    operator delete(*(void **)(v43 - 176));
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  char v24;

  v4 = *(unsigned __int8 *)(a1 + 56);
  *(_BYTE *)a2 = v4 ^ 1;
  *(_WORD *)(a2 + 1) = 513;
  *(_WORD *)(a2 + 4) = 200;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 57);
  if (*(char *)(a1 + 55) < 0)
    v5 = *(unsigned __int16 *)(a1 + 40);
  else
    v5 = *(unsigned __int8 *)(a1 + 55);
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 32);
    v8 = (unint64_t *)(a2 + 16);
    do
    {
      v9 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v9 = *v7;
      v10 = *(_BYTE *)(v9 + v6);
      v12 = *(_BYTE **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *v8;
        v15 = &v12[-*v8];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v17 = v11 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v15[(_QWORD)v19];
        v21 = &v15[(_QWORD)v19];
        *v21 = v10;
        v13 = v21 + 1;
        if (v12 != (_BYTE *)v14)
        {
          v22 = &v12[~v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != (_BYTE *)v14);
          v12 = (_BYTE *)*v8;
          v20 = v19;
        }
        *(_QWORD *)(a2 + 16) = v20;
        *(_QWORD *)(a2 + 24) = v13;
        *(_QWORD *)(a2 + 32) = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
    v4 = *(unsigned __int8 *)(a1 + 56);
  }
  if (v4)
    v24 = 13;
  else
    v24 = 12;
  *(_BYTE *)(a2 + 7) = v24;
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_36(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  *(_BYTE *)a2 = *(_BYTE *)(a1 + 48);
  *(_DWORD *)(a2 + 4) = 1;
  v3 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count **)(v3 + 360);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(*(_QWORD *)(v3 + 352) + 176);
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *(_BYTE *)(a2 + 8) = MEMORY[0xB0];
  }
  *(_DWORD *)(a2 + 12) = 1;
}

uint64_t __copy_helper_block_e8_32c37_ZTSKNSt3__110shared_ptrI9BambiCallEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c37_ZTSKNSt3__110shared_ptrI9BambiCallEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void ___ZN18LegacyQMISipLogger24logSessionConfirmedEventENSt3__110shared_ptrI9BambiCallEEhh_block_invoke_40(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logSessionConfirmedEvent");
}

void `non-virtual thunk to'LegacyQMISipLogger::logSessionConfirmedEvent(uint64_t a1, uint64_t a2, char a3, char a4)
{
  LegacyQMISipLogger::logSessionConfirmedEvent((_BYTE *)(a1 - 136), a2, a3, a4);
}

uint64_t LegacyQMISipLogger::logSessionTerminationEvent(LegacyQMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  BambiClient *v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  int v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::string::size_type v33;
  char *v34;
  capabilities::radio *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  int v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  const void **v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t *v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  int v63;
  _QWORD v64[5];
  void *__p;
  uint64_t v66;
  int v67;
  char v68;
  uint64_t v69;
  void *v70;
  _QWORD v71[2];
  void (*v72)(uint64_t, uint64_t);
  void *v73;
  LegacyQMISipLogger *v74;
  const BambiCallSessionTerminationBaseEvent *v75;
  char v76;
  _QWORD v77[2];
  uint64_t (*v78)(uint64_t, char *);
  void *v79;
  int v80;
  _QWORD v81[2];
  void (*v82)(uint64_t, uint64_t);
  void *v83;
  std::string v84;
  int v85;
  int v86;
  int v87;
  int v88;
  char v89;
  __int128 v90;
  __int128 v91;
  std::string aBlock;
  void *v93;
  _QWORD *v94;
  char v95;
  std::string v96;
  uint64_t v97;
  std::__shared_weak_count *v98;

  if (!*((_BYTE *)this + 192))
    return 1013;
  std::string::basic_string[abi:ne180100]<0>(&aBlock, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logSessionTerminationEvent [appCallId=", 58);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v68 < 0)
    operator delete(__p);
  if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(aBlock.__r_.__value_.__l.__data_);
    if (!a2)
      return 1013;
  }
  else if (!a2)
  {
    return 1013;
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (!v9)
    return 1013;
  v10 = *((_QWORD *)a2 + 2);
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = std::__shared_weak_count::lock(v9);
  v98 = v13;
  if (!v13)
  {
    v16 = 1013;
LABEL_108:
    std::__shared_weak_count::__release_weak(v9);
    return v16;
  }
  v14 = v13;
  v97 = v10;
  std::__shared_weak_count::__release_weak(v9);
  if (v10)
  {
    v15 = (BambiClient *)BambiCall::bambiClient((BambiCall *)v10);
    memset(&v96, 0, sizeof(v96));
    if (*(char *)(v10 + 511) < 0)
      std::string::__init_copy_ctor_external(&v96, *(const std::string::value_type **)(v10 + 488), *(_QWORD *)(v10 + 496));
    else
      v96 = *(std::string *)(v10 + 488);
    std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&v90, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v90);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Current call count is ", 22);
    *(_BYTE *)(v18 + 17) = 0;
    BambiClient::callCount(v15);
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" SIP callID=", 12);
    *(_BYTE *)(v18 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&aBlock, (const std::string *)(v10 + 464));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 56))(v18, &aBlock);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" handover ", 10);
    *(_BYTE *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v95 < 0)
      operator delete(v93);
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    if (SBYTE7(v91) < 0)
      operator delete((void *)v90);
    if (v68 < 0)
      operator delete(__p);
    v19 = *((_QWORD *)a2 + 6);
    if (v19)
    {
      v20 = *((unsigned __int8 *)a2 + 56);
      v21 = *(_DWORD *)(v19 + 88);
      if (v21 == 408)
        v22 = 23;
      else
        v22 = 22;
      v63 = v22;
      v23 = 2;
    }
    else
    {
      v24 = *((int *)a2 + 10);
      if (v24 > 0xD)
      {
        v23 = 0;
        v21 = 0;
        v63 = 23;
        v20 = 1;
      }
      else
      {
        v21 = 0;
        v20 = dword_1BF2A3028[v24];
        v23 = dword_1BF2A3060[v24];
        v63 = dword_1BF2A3098[v24];
      }
    }
    __p = 0;
    v66 = 0;
    v25 = *(std::__shared_weak_count **)(v10 + 360);
    if (v25)
    {
      v26 = std::__shared_weak_count::lock(v25);
      v66 = (uint64_t)v26;
      if (v26)
      {
        v27 = *(_QWORD *)(v10 + 352);
        __p = (void *)v27;
        goto LABEL_41;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 0;
LABEL_41:
    if (*(char *)(v27 + 4159) < 0)
      std::string::__init_copy_ctor_external(&aBlock, *(const std::string::value_type **)(v27 + 4136), *(_QWORD *)(v27 + 4144));
    else
      aBlock = *(std::string *)(v27 + 4136);
    v28 = *((_QWORD *)v15 + 19);
    if (v28)
    {
      v29 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v28 + 312, (void **)&aBlock.__r_.__value_.__l.__data_);
      if ((void **)(v28 + 320) == v29)
        v30 = 0;
      else
        v30 = *((_DWORD *)v29 + 14);
      LOBYTE(v28) = v30 == 1;
    }
    if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      operator delete(aBlock.__r_.__value_.__l.__data_);
    if (v26)
    {
      p_shared_owners = (unint64_t *)&v26->__shared_owners_;
      do
        v32 = __ldaxr(p_shared_owners);
      while (__stlxr(v32 - 1, p_shared_owners));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    if ((v28 & 1) == 0)
    {
      v90 = 0u;
      v91 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v90);
      v33 = MEMORY[0x1E0C809B0];
      v81[0] = MEMORY[0x1E0C809B0];
      v81[1] = 1174405120;
      v82 = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke;
      v83 = &__block_descriptor_tmp_46;
      v85 = v20;
      v86 = v23;
      v87 = v21;
      v89 = a3;
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v84, v96.__r_.__value_.__l.__data_, v96.__r_.__value_.__l.__size_);
      else
        v84 = v96;
      v88 = v63;
      v34 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(&v90);
      v35 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v82)(v81, v34);
      if (capabilities::radio::mav20Plus(v35))
      {
        v36 = v97;
        v37 = *(std::__shared_weak_count **)(v97 + 360);
        if (v37 && (v38 = std::__shared_weak_count::lock(v37)) != 0)
        {
          v39 = v38;
          v40 = *(_DWORD *)(*(_QWORD *)(v36 + 352) + 4076);
          v41 = (unint64_t *)&v38->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        else
        {
          v40 = MEMORY[0xFEC];
        }
        v77[0] = v33;
        v77[1] = 0x40000000;
        v78 = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_47;
        v79 = &__block_descriptor_tmp_48;
        v80 = v40;
        v43 = qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(&v90);
        v78((uint64_t)v77, v43);
      }
      if ((*(unsigned int (**)(LegacyQMISipLogger *))(*(_QWORD *)this + 304))(this))
      {
        v71[0] = v33;
        v71[1] = 0x40000000;
        v72 = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_2;
        v73 = &__block_descriptor_tmp_49;
        v76 = a4;
        v74 = this;
        v75 = a2;
        v44 = (const void **)*((_QWORD *)&v90 + 1);
        if (*((_QWORD *)&v90 + 1) != (_QWORD)v91)
        {
          while (*((_BYTE *)*v44 + 8) != 20)
          {
            if (++v44 == (const void **)v91)
              goto LABEL_77;
          }
        }
        if (v44 == (const void **)v91)
        {
LABEL_77:
          v46 = operator new();
          v47 = v46;
          *(_BYTE *)(v46 + 8) = 20;
          *(_QWORD *)v46 = &off_1E78CD840;
          *(_BYTE *)(v46 + 16) = 0;
          v48 = v46 + 16;
          *(_QWORD *)(v46 + 20) = 0;
          *(_QWORD *)(v46 + 36) = 0;
          *(_QWORD *)(v46 + 28) = 0;
          *(_DWORD *)(v46 + 44) = 0;
          v49 = v91;
          if ((unint64_t)v91 >= *((_QWORD *)&v91 + 1))
          {
            v51 = (uint64_t)(v91 - *((_QWORD *)&v90 + 1)) >> 3;
            if ((unint64_t)(v51 + 1) >> 61)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v52 = (uint64_t)(*((_QWORD *)&v91 + 1) - *((_QWORD *)&v90 + 1)) >> 2;
            if (v52 <= v51 + 1)
              v52 = v51 + 1;
            if (*((_QWORD *)&v91 + 1) - *((_QWORD *)&v90 + 1) >= 0x7FFFFFFFFFFFFFF8uLL)
              v53 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v53 = v52;
            if (v53)
              v54 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)&v91 + 8, v53);
            else
              v54 = 0;
            v55 = (uint64_t *)&v54[8 * v51];
            v56 = &v54[8 * v53];
            *v55 = v47;
            v50 = v55 + 1;
            v58 = (char *)*((_QWORD *)&v90 + 1);
            v57 = (char *)v91;
            if ((_QWORD)v91 != *((_QWORD *)&v90 + 1))
            {
              do
              {
                v59 = *((_QWORD *)v57 - 1);
                v57 -= 8;
                *--v55 = v59;
              }
              while (v57 != v58);
              v57 = (char *)*((_QWORD *)&v90 + 1);
            }
            *((_QWORD *)&v90 + 1) = v55;
            *(_QWORD *)&v91 = v50;
            *((_QWORD *)&v91 + 1) = v56;
            if (v57)
              operator delete(v57);
          }
          else
          {
            *(_QWORD *)v91 = v46;
            v50 = (_QWORD *)(v49 + 8);
          }
          *(_QWORD *)&v91 = v50;
          v72((uint64_t)v71, v48);
        }
        else
        {
          if (!v45)
            __cxa_bad_cast();
          ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_2((uint64_t)v71, (uint64_t)v45 + 16);
        }
      }
      __p = (char *)this + 160;
      v66 = QMIServiceMsg::create();
      v67 = 25000;
      v69 = 0;
      v70 = 0;
      v64[0] = v33;
      v64[1] = 0x40000000;
      v64[2] = ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_3;
      v64[3] = &__block_descriptor_tmp_51;
      v64[4] = this;
      aBlock.__r_.__value_.__r.__words[0] = v33;
      aBlock.__r_.__value_.__l.__size_ = 0x40000000;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v93 = &unk_1E78CD758;
      v94 = v64;
      v60 = _Block_copy(&aBlock);
      v70 = v60;
      if (v66)
      {
        qmi::Client::send();
        v60 = v70;
      }
      if (v60)
        _Block_release(v60);
      if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v84.__r_.__value_.__l.__data_);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v90);
    }
    *((_QWORD *)this + 30) = 0;
    if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v96.__r_.__value_.__l.__data_);
    v9 = v98;
    v16 = 1003;
    if (!v98)
      return v16;
    goto LABEL_104;
  }
  v16 = 1013;
  v9 = v14;
LABEL_104:
  v61 = (unint64_t *)&v9->__shared_owners_;
  do
    v62 = __ldaxr(v61);
  while (__stlxr(v62 - 1, v61));
  if (!v62)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    goto LABEL_108;
  }
  return v16;
}

void sub_1BEFB5D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  uint64_t v45;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v45 - 208));
  if (*(char *)(v45 - 105) < 0)
    operator delete(*(void **)(v45 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v45 - 104);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;

  v4 = *(_DWORD *)(a1 + 60);
  *(_BYTE *)a2 = *(_DWORD *)(a1 + 56);
  *(_BYTE *)(a2 + 1) = 0;
  *(_BYTE *)(a2 + 2) = v4;
  *(_WORD *)(a2 + 4) = *(_DWORD *)(a1 + 64);
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 72);
  if (*(char *)(a1 + 55) < 0)
    v5 = *(unsigned __int16 *)(a1 + 40);
  else
    v5 = *(unsigned __int8 *)(a1 + 55);
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 32);
    v8 = (unint64_t *)(a2 + 16);
    do
    {
      v9 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v9 = *v7;
      v10 = *(_BYTE *)(v9 + v6);
      v12 = *(_BYTE **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *v8;
        v15 = &v12[-*v8];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v17 = v11 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v15[(_QWORD)v19];
        v21 = &v15[(_QWORD)v19];
        *v21 = v10;
        v13 = v21 + 1;
        if (v12 != (_BYTE *)v14)
        {
          v22 = &v12[~v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != (_BYTE *)v14);
          v12 = (_BYTE *)*v8;
          v20 = v19;
        }
        *(_QWORD *)(a2 + 16) = v20;
        *(_QWORD *)(a2 + 24) = v13;
        *(_QWORD *)(a2 + 32) = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
  }
  *(_BYTE *)(a2 + 7) = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a2 + 8) = 0;
}

uint64_t ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_47(uint64_t result, _BYTE *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  unint64_t v13;
  size_t v14;
  _BYTE *v15;
  char *v16;
  _BYTE *v17;
  char v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  *(_BYTE *)a2 = *(_BYTE *)(a1 + 48);
  v3 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(v21, "qmi.log");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" callEndCauseFromEvent for call", 31);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (*(_QWORD *)(v3 + 48) || (v5 = *(int *)(v3 + 40), v5 > 0x11))
    v6 = 4;
  else
    v6 = dword_1BF2A30D0[v5];
  *(_DWORD *)(a2 + 4) = v6;
  v8 = *(_BYTE **)(a2 + 16);
  v7 = *(_QWORD *)(a2 + 24);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD *)(a2 + 8);
    v11 = &v8[-v10];
    v12 = (uint64_t)&v8[-v10 + 1];
    if (v12 < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v13 = v7 - v10;
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
      v14 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = operator new(v14);
    else
      v15 = 0;
    v16 = &v15[v14];
    v11[(_QWORD)v15] = 0;
    v9 = (uint64_t)&v11[(_QWORD)v15 + 1];
    if (v8 == (_BYTE *)v10)
    {
      v15 = &v11[(_QWORD)v15];
    }
    else
    {
      v17 = &v8[~v10];
      do
      {
        v18 = *--v8;
        (v17--)[(_QWORD)v15] = v18;
      }
      while (v8 != (_BYTE *)v10);
      v8 = *(_BYTE **)(a2 + 8);
    }
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v9;
    *(_QWORD *)(a2 + 24) = v16;
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = 0;
    v9 = (uint64_t)(v8 + 1);
  }
  *(_QWORD *)(a2 + 16) = v9;
}

void sub_1BEFB61A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN18LegacyQMISipLogger26logSessionTerminationEventEPK36BambiCallSessionTerminationBaseEventhhb_block_invoke_3(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logSessionTerminationEvent");
}

uint64_t `non-virtual thunk to'LegacyQMISipLogger::logSessionTerminationEvent(LegacyQMISipLogger *this, const BambiCallSessionTerminationBaseEvent *a2, char a3, char a4)
{
  return LegacyQMISipLogger::logSessionTerminationEvent((LegacyQMISipLogger *)((char *)this - 136), a2, a3, a4);
}

void LegacyQMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char *v10;
  capabilities::radio *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  int v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  void *v19;
  _QWORD v20[5];
  void *__p;
  uint64_t v22;
  int v23;
  char v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[2];
  void (*v28)(uint64_t, uint64_t);
  void *v29;
  std::string v30;
  char v31;
  _OWORD v32[2];
  std::string v33;
  void *aBlock[2];
  void (*v35)(uint64_t, QMIServiceMsg *);
  void *v36;
  _QWORD *v37;

  if (*(_BYTE *)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"LegacyQMISipLogger::logIncomingPrack [appCallId=", 48);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v24 < 0)
      operator delete(__p);
    if (SHIBYTE(v35) < 0)
      operator delete(aBlock[0]);
    memset(&v33, 0, sizeof(v33));
    v8 = *a3;
    if (*(char *)(*a3 + 511) < 0)
      std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v8 + 488), *(_QWORD *)(v8 + 496));
    else
      v33 = *(std::string *)(v8 + 488);
    memset(v32, 0, sizeof(v32));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v32);
    v9 = (void *)MEMORY[0x1E0C809B0];
    v27[0] = MEMORY[0x1E0C809B0];
    v27[1] = 1174405120;
    v28 = ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke;
    v29 = &__block_descriptor_tmp_53;
    v31 = a4;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v30, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
    else
      v30 = v33;
    v10 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(v32);
    v11 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v28)(v27, v10);
    if (capabilities::radio::mav20Plus(v11))
    {
      v12 = *a3;
      v13 = *(std::__shared_weak_count **)(*a3 + 360);
      if (v13 && (v14 = std::__shared_weak_count::lock(v13)) != 0)
      {
        v15 = v14;
        v16 = *(_DWORD *)(*(_QWORD *)(v12 + 352) + 4076);
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        LOBYTE(v16) = MEMORY[0xFEC];
      }
      *qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(v32) = v16;
    }
    __p = (void *)(a1 + 160);
    v22 = QMIServiceMsg::create();
    v23 = 25000;
    v25 = 0;
    v26 = 0;
    v20[0] = v9;
    v20[1] = 0x40000000;
    v20[2] = ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2;
    v20[3] = &__block_descriptor_tmp_57_0;
    v20[4] = a1;
    aBlock[0] = v9;
    aBlock[1] = (void *)0x40000000;
    v35 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v36 = &unk_1E78CD758;
    v37 = v20;
    v19 = _Block_copy(aBlock);
    v26 = v19;
    if (v22)
    {
      qmi::Client::send();
      v19 = v26;
    }
    if (v19)
      _Block_release(v19);
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v32);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFB64F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33)
{
  uint64_t v33;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a33);
  if (*(char *)(v33 - 89) < 0)
    operator delete(*(void **)(v33 - 112));
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 3;
  *(_WORD *)(a2 + 4) = 0;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    v4 = *(unsigned __int16 *)(a1 + 40);
  else
    v4 = *(unsigned __int8 *)(a1 + 55);
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(a1 + 32);
    v7 = (unint64_t *)(a2 + 16);
    do
    {
      v8 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v8 = *v6;
      v9 = *(_BYTE *)(v8 + v5);
      v11 = *(_BYTE **)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *v7;
        v14 = &v11[-*v7];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*v7;
          v19 = v18;
        }
        *(_QWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 24) = v12;
        *(_QWORD *)(a2 + 32) = &v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(_BYTE *)(a2 + 7) = 31;
  *(_DWORD *)(a2 + 8) = 0;
}

void ___ZN18LegacyQMISipLogger16logIncomingPrackERK10SipRequestNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logIncomingPrack");
}

void `non-virtual thunk to'LegacyQMISipLogger::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  LegacyQMISipLogger::logIncomingPrack(a1 - 136, a2, a3, a4);
}

void LegacyQMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  uint64_t v8;
  uint64_t v9;
  void *v10;
  char *v11;
  capabilities::radio *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  int v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  void *v20;
  _QWORD v21[5];
  void *__p;
  uint64_t v23;
  int v24;
  char v25;
  uint64_t v26;
  void *v27;
  _QWORD v28[2];
  void (*v29)(uint64_t, uint64_t);
  void *v30;
  uint64_t v31;
  std::string v32;
  char v33;
  _QWORD v34[4];
  std::string v35;
  void *aBlock[2];
  void (*v37)(uint64_t, QMIServiceMsg *);
  void *v38;
  _QWORD *v39;

  if (*(_BYTE *)(a1 + 192))
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"LegacyQMISipLogger::logPrackResponse [appCallId=", 48);
    *(_BYTE *)(v8 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v25 < 0)
      operator delete(__p);
    if (SHIBYTE(v37) < 0)
      operator delete(aBlock[0]);
    memset(&v35, 0, sizeof(v35));
    v9 = *a3;
    if (*(char *)(*a3 + 511) < 0)
      std::string::__init_copy_ctor_external(&v35, *(const std::string::value_type **)(v9 + 488), *(_QWORD *)(v9 + 496));
    else
      v35 = *(std::string *)(v9 + 488);
    memset(v34, 0, sizeof(v34));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v34);
    v10 = (void *)MEMORY[0x1E0C809B0];
    v28[0] = MEMORY[0x1E0C809B0];
    v28[1] = 1174405120;
    v29 = ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke;
    v30 = &__block_descriptor_tmp_59_0;
    v31 = a2;
    v33 = a4;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v32, v35.__r_.__value_.__l.__data_, v35.__r_.__value_.__l.__size_);
    else
      v32 = v35;
    v11 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(v34);
    v12 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v29)(v28, v11);
    if (capabilities::radio::mav20Plus(v12))
    {
      v13 = *a3;
      v14 = *(std::__shared_weak_count **)(*a3 + 360);
      if (v14 && (v15 = std::__shared_weak_count::lock(v14)) != 0)
      {
        v16 = v15;
        v17 = *(_DWORD *)(*(_QWORD *)(v13 + 352) + 4076);
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v19 = __ldaxr(p_shared_owners);
        while (__stlxr(v19 - 1, p_shared_owners));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      else
      {
        LOBYTE(v17) = MEMORY[0xFEC];
      }
      *qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(v34) = v17;
    }
    __p = (void *)(a1 + 160);
    v23 = QMIServiceMsg::create();
    v24 = 25000;
    v26 = 0;
    v27 = 0;
    v21[0] = v10;
    v21[1] = 0x40000000;
    v21[2] = ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2;
    v21[3] = &__block_descriptor_tmp_63_0;
    v21[4] = a1;
    aBlock[0] = v10;
    aBlock[1] = (void *)0x40000000;
    v37 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v38 = &unk_1E78CD758;
    v39 = v21;
    v20 = _Block_copy(aBlock);
    v27 = v20;
    if (v23)
    {
      qmi::Client::send();
      v20 = v27;
    }
    if (v20)
      _Block_release(v20);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v34);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFB6A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  if (*(char *)(v35 - 105) < 0)
    operator delete(*(void **)(v35 - 128));
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 3;
  *(_WORD *)(a2 + 4) = *(_DWORD *)(*(_QWORD *)(a1 + 32) + 88);
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 64);
  if (*(char *)(a1 + 63) < 0)
    v4 = *(unsigned __int16 *)(a1 + 48);
  else
    v4 = *(unsigned __int8 *)(a1 + 63);
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(a1 + 40);
    v7 = (unint64_t *)(a2 + 16);
    do
    {
      v8 = a1 + 40;
      if (*(char *)(a1 + 63) < 0)
        v8 = *v6;
      v9 = *(_BYTE *)(v8 + v5);
      v11 = *(_BYTE **)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *v7;
        v14 = &v11[-*v7];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*v7;
          v19 = v18;
        }
        *(_QWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 24) = v12;
        *(_QWORD *)(a2 + 32) = &v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(_BYTE *)(a2 + 7) = 38;
  *(_DWORD *)(a2 + 8) = 0;
}

void ___ZN18LegacyQMISipLogger16logPrackResponseERK11SipResponseNSt3__110shared_ptrI9BambiCallEEh_block_invoke_2(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logPrackResponse");
}

void `non-virtual thunk to'LegacyQMISipLogger::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, char a4)
{
  LegacyQMISipLogger::logPrackResponse(a1 - 136, a2, a3, a4);
}

uint64_t ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke(uint64_t result, _BYTE *a2)
{
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  char v9;
  unint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  unint64_t v13;
  _BYTE *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  _BYTE *v20;
  _BYTE *v21;
  char v22;

  *(_WORD *)a2 = 1;
  *(_BYTE *)(a2 + 2) = 0;
  *(_WORD *)(a2 + 4) = 180;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(a1 + 56);
  if (*(char *)(a1 + 55) < 0)
    v4 = *(unsigned __int16 *)(a1 + 40);
  else
    v4 = *(unsigned __int8 *)(a1 + 55);
  *(_WORD *)(a2 + 12) = v4;
  if (v4)
  {
    v5 = 0;
    v6 = (uint64_t *)(a1 + 32);
    v7 = (unint64_t *)(a2 + 16);
    do
    {
      v8 = a1 + 32;
      if (*(char *)(a1 + 55) < 0)
        v8 = *v6;
      v9 = *(_BYTE *)(v8 + v5);
      v11 = *(_BYTE **)(a2 + 24);
      v10 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v11 >= v10)
      {
        v13 = *v7;
        v14 = &v11[-*v7];
        v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v16 = v10 - v13;
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
          v17 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v17 = v15;
        if (v17)
          v18 = (char *)operator new(v17);
        else
          v18 = 0;
        v19 = &v14[(_QWORD)v18];
        v20 = &v14[(_QWORD)v18];
        *v20 = v9;
        v12 = v20 + 1;
        if (v11 != (_BYTE *)v13)
        {
          v21 = &v11[~v13];
          do
          {
            v22 = *--v11;
            (v21--)[(_QWORD)v18] = v22;
          }
          while (v11 != (_BYTE *)v13);
          v11 = (_BYTE *)*v7;
          v19 = v18;
        }
        *(_QWORD *)(a2 + 16) = v19;
        *(_QWORD *)(a2 + 24) = v12;
        *(_QWORD *)(a2 + 32) = &v18[v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        *v11 = v9;
        v12 = v11 + 1;
      }
      *(_QWORD *)(a2 + 24) = v12;
      ++v5;
    }
    while (v5 < *(unsigned __int16 *)(a2 + 12));
  }
  *(_BYTE *)(a2 + 7) = 9;
  *(_DWORD *)(a2 + 8) = 0;
}

void ___ZN18LegacyQMISipLogger29handleResponseForIncomingCallERKN6mavims17SendSipPacketInfo8ResponseENSt3__110shared_ptrI9BambiCallEEPKch_block_invoke_3(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logOutgoingRingingInfo");
}

void LegacyQMISipLogger::setATCommandMode(LegacyQMISipLogger *this, int a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  if (*((unsigned __int8 *)this + 194) != a2)
  {
    *((_BYTE *)this + 194) = a2;
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.log");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_2_10);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    v4 = v3;
    if (a2)
      v5 = "Enabling";
    else
      v5 = "Disabling";
    v6 = *(_QWORD **)(v3 + 8);
    if (a2)
      v7 = 8;
    else
      v7 = 9;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v5, v7);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"AT Command Mode", 15);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
    if (v11 < 0)
      operator delete(v10[0]);
  }
}

void sub_1BEFB6EBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'LegacyQMISipLogger::setATCommandMode(LegacyQMISipLogger *this, int a2)
{
  LegacyQMISipLogger::setATCommandMode((LegacyQMISipLogger *)((char *)this - 136), a2);
}

uint64_t LegacyQMISipLogger::logWiFiHandover(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v3;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char *v14;
  capabilities::radio *v15;
  int v16;
  void *v17;
  _QWORD v18[5];
  void *v19;
  uint64_t v20;
  int v21;
  char v22;
  uint64_t v23;
  void *v24;
  _QWORD v25[2];
  void (*v26)(uint64_t, uint64_t);
  void *v27;
  uint64_t v28;
  std::string v29;
  char v30;
  _QWORD v31[5];
  std::string v32;
  void *__p[2];
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  _BYTE v40[144];
  uint64_t v41;
  void *aBlock[2];
  void (*v43)(uint64_t, QMIServiceMsg *);
  void *v44;
  _QWORD *v45;

  if (*(_QWORD *)(result + 240))
  {
    v3 = result;
    if (*(_BYTE *)(result + 192))
    {
      ++*(_DWORD *)(result + 228);
      if ((a3 & 1) == 0)
        ++*(_DWORD *)(result + 232);
      std::string::basic_string[abi:ne180100]<0>(__p, "qmi.log");
      std::string::basic_string[abi:ne180100]<0>(aBlock, (char *)&str_2_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)aBlock);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handover total ", 15);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" wifiToCellHandovers ", 21);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (SHIBYTE(v43) < 0)
        operator delete(aBlock[0]);
      if (SBYTE7(v34) < 0)
        operator delete(__p[0]);
      v41 = 0;
      v39 = 0u;
      memset(v40, 0, sizeof(v40));
      v37 = 0u;
      v38 = 0u;
      v35 = 0u;
      v36 = 0u;
      *(_OWORD *)__p = 0u;
      v34 = 0u;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      v7 = *(char *)(v3 + 223);
      if (v7 >= 0)
        v8 = v3 + 200;
      else
        v8 = *(_QWORD *)(v3 + 200);
      if (v7 >= 0)
        v9 = *(unsigned __int8 *)(v3 + 223);
      else
        v9 = *(_QWORD *)(v3 + 208);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v8, v9);
      LOBYTE(aBlock[0]) = 48;
      v10 = std::operator<<[abi:ne180100]<std::char_traits<char>>(__p, (char *)aBlock);
      v11 = *v10;
      *(uint64_t *)((char *)v10 + *(_QWORD *)(*v10 - 24) + 24) = 4;
      *(_DWORD *)((char *)v10 + *(_QWORD *)(v11 - 24) + 8) = *(_DWORD *)((_BYTE *)v10 + *(_QWORD *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::ostream::operator<<();
      memset(&v32, 0, sizeof(v32));
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v32);
      std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.log");
      std::string::basic_string[abi:ne180100]<0>(&v19, (char *)&str_2_10);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"LegacyQMISipLogger::logWiFiHandover handover total ", 51);
      *(_BYTE *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" notify BB call ID ", 19);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 32))(v12, &v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"_currentAppCallId ", 18);
      *(_BYTE *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      if (v22 < 0)
        operator delete(v19);
      if (SHIBYTE(v43) < 0)
        operator delete(aBlock[0]);
      memset(v31, 0, 32);
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v31);
      v13 = (void *)MEMORY[0x1E0C809B0];
      v25[0] = MEMORY[0x1E0C809B0];
      v25[1] = 1174405120;
      v26 = ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke;
      v27 = &__block_descriptor_tmp_87;
      v28 = v3;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      else
        v29 = v32;
      v30 = a3;
      v14 = qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(v31);
      v15 = (capabilities::radio *)((uint64_t (*)(_QWORD *, char *))v26)(v25, v14);
      if (capabilities::radio::mav20Plus(v15))
      {
        if (*(_QWORD *)a2)
          v16 = *(_DWORD *)(*(_QWORD *)a2 + 4076);
        else
          LOBYTE(v16) = 0;
        *qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(v31) = v16;
      }
      v19 = (void *)(v3 + 160);
      v20 = QMIServiceMsg::create();
      v21 = 25000;
      v23 = 0;
      v24 = 0;
      v18[0] = v13;
      v18[1] = 0x40000000;
      v18[2] = ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke_2;
      v18[3] = &__block_descriptor_tmp_91;
      v18[4] = v3;
      aBlock[0] = v13;
      aBlock[1] = (void *)0x40000000;
      v43 = ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      v44 = &unk_1E78CD758;
      v45 = v18;
      v17 = _Block_copy(aBlock);
      v24 = v17;
      if (v20)
      {
        qmi::Client::send();
        v17 = v24;
      }
      if (v17)
        _Block_release(v17);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v31);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SHIBYTE(v38) < 0)
        operator delete(*((void **)&v37 + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      return MEMORY[0x1C3B8707C](v40);
    }
  }
  return result;
}

void sub_1BEFB73D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  if (a45 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a46);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  char v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  char *v19;
  char *v20;
  _BYTE *v21;
  _BYTE *v22;
  char v23;
  char v24;

  v4 = *(_QWORD *)(a1 + 32);
  *(_WORD *)a2 = 0;
  *(_BYTE *)(a2 + 2) = 2;
  *(_BYTE *)(a2 + 6) = *(_BYTE *)(v4 + 224);
  if (*(char *)(a1 + 63) < 0)
    v5 = *(unsigned __int16 *)(a1 + 48);
  else
    v5 = *(unsigned __int8 *)(a1 + 63);
  *(_WORD *)(a2 + 12) = v5;
  if (v5)
  {
    v6 = 0;
    v7 = (uint64_t *)(a1 + 40);
    v8 = (unint64_t *)(a2 + 16);
    do
    {
      v9 = a1 + 40;
      if (*(char *)(a1 + 63) < 0)
        v9 = *v7;
      v10 = *(_BYTE *)(v9 + v6);
      v12 = *(_BYTE **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if ((unint64_t)v12 >= v11)
      {
        v14 = *v8;
        v15 = &v12[-*v8];
        v16 = (unint64_t)(v15 + 1);
        if ((uint64_t)(v15 + 1) < 0)
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        v17 = v11 - v14;
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
          v18 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v18 = v16;
        if (v18)
          v19 = (char *)operator new(v18);
        else
          v19 = 0;
        v20 = &v15[(_QWORD)v19];
        v21 = &v15[(_QWORD)v19];
        *v21 = v10;
        v13 = v21 + 1;
        if (v12 != (_BYTE *)v14)
        {
          v22 = &v12[~v14];
          do
          {
            v23 = *--v12;
            (v22--)[(_QWORD)v19] = v23;
          }
          while (v12 != (_BYTE *)v14);
          v12 = (_BYTE *)*v8;
          v20 = v19;
        }
        *(_QWORD *)(a2 + 16) = v20;
        *(_QWORD *)(a2 + 24) = v13;
        *(_QWORD *)(a2 + 32) = &v19[v18];
        if (v12)
          operator delete(v12);
      }
      else
      {
        *v12 = v10;
        v13 = v12 + 1;
      }
      *(_QWORD *)(a2 + 24) = v13;
      ++v6;
    }
    while (v6 < *(unsigned __int16 *)(a2 + 12));
  }
  if (*(_BYTE *)(a1 + 64))
    v24 = 44;
  else
    v24 = 45;
  *(_BYTE *)(a2 + 7) = v24;
  *(_DWORD *)(a2 + 8) = 0;
}

void ___ZN18LegacyQMISipLogger15logWiFiHandoverENSt3__110shared_ptrI8SipStackEEbb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  LegacyQMISipLogger::handleResponse(a2, "logWiFiHandover");
}

uint64_t `non-virtual thunk to'LegacyQMISipLogger::logWiFiHandover(uint64_t a1, uint64_t a2, char a3)
{
  return LegacyQMISipLogger::logWiFiHandover(a1 - 136, a2, a3);
}

char *qmi::MutableMessageBase::getTLV<mavims::tlv::SipPacketInfo>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 1)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_BYTE *)(v7 + 8) = 1;
    *(_WORD *)(v7 + 16) = 0;
    v6 = v7 + 16;
    *(_QWORD *)v7 = &off_1E78CD688;
    *(_BYTE *)(v7 + 18) = 0;
    *(_QWORD *)(v7 + 40) = 0;
    *(_QWORD *)(v7 + 48) = 0;
    *(_QWORD *)(v7 + 32) = 0;
    *(_QWORD *)(v7 + 20) = 0;
    *(_WORD *)(v7 + 28) = 0;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 16;
  }
  return (char *)v6;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD688;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD688;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) + 13;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = *a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = mavims::tlv::writeField(v5, a1 + 16);
  *a2 = result;
  *(_BYTE *)v4 = v3;
  *(_WORD *)(v4 + 1) = result - v5;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::SipPacketInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78CD688;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 22) = *(_QWORD *)(a1 + 22);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 32), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_1BEFB7998(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C4030C8ECF9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<mavims::tlv::PairedSub>(_QWORD *a1)
{
  const void **v2;
  const void **v3;
  char **v4;
  char *v5;
  char *result;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  v4 = (char **)(a1 + 1);
  if (v2 != v3)
  {
    while (*((_BYTE *)*v2 + 8) != 2)
    {
      if (++v2 == v3)
        goto LABEL_8;
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    v7 = operator new();
    *(_WORD *)(v7 + 8) = 2;
    *(_QWORD *)v7 = &off_1E78CD6D8;
    v8 = a1[3];
    v9 = (uint64_t *)a1[2];
    if ((unint64_t)v9 >= v8)
    {
      v11 = ((char *)v9 - *v4) >> 3;
      if ((unint64_t)(v11 + 1) >> 61)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v12 = v8 - (_QWORD)*v4;
      v13 = v12 >> 2;
      if (v12 >> 2 <= (unint64_t)(v11 + 1))
        v13 = v11 + 1;
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
        v14 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v14);
      else
        v15 = 0;
      v16 = (uint64_t *)&v15[8 * v11];
      v17 = &v15[8 * v14];
      *v16 = v7;
      v10 = v16 + 1;
      v19 = (char *)a1[1];
      v18 = (char *)a1[2];
      if (v18 != v19)
      {
        do
        {
          v20 = *((_QWORD *)v18 - 1);
          v18 -= 8;
          *--v16 = v20;
        }
        while (v18 != v19);
        v18 = *v4;
      }
      a1[1] = v16;
      a1[2] = v10;
      a1[3] = v17;
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v9 = v7;
      v10 = v9 + 1;
    }
    result = (char *)(v7 + 9);
    a1[2] = v10;
  }
  else
  {
    if (!v5)
      __cxa_bad_cast();
    return v5 + 9;
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::PairedSub>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78CD6D8;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD728;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD728;
  v2 = (void *)a1[6];
  if (v2)
  {
    a1[7] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48) + 10;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3;
  _BYTE *v4;
  uint64_t v5;
  void *result;
  _BYTE *v7;

  v3 = *(_BYTE *)(a1 + 8);
  v4 = (_BYTE *)*a2;
  v5 = *a2 + 3;
  *a2 = v5;
  result = tlv::writeV<mavims::tlv::IncomingCallInfo>((_BYTE **)a2, a1 + 16);
  v7 = (_BYTE *)(*a2 - v5);
  *v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::IncomingCallInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78CD728;
  *(_OWORD *)(v2 + 16) = *(_OWORD *)(a1 + 16);
  *(_OWORD *)(v2 + 25) = *(_OWORD *)(a1 + 25);
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  v3 = *(const void **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(v2 + 48) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 48), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_1BEFB7D1C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C405FD21850);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN6mavims17SendSipPacketInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2;
  _BYTE v4[24];
  void *__p;
  void *v6;
  uint64_t v7;

  v2 = *(_QWORD *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    v6 = 0;
    v7 = 0;
    QMIServiceMsg::serialize(this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, 0);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_1BEFB7DFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a9);
  _Unwind_Resume(a1);
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD7A0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD7A0;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32) + 7;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int16 v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 += 3;
  *(_BYTE *)(v5 + 3) = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(v5 + 4) = *(_DWORD *)(a1 + 20);
  *(_BYTE *)(v5 + 5) = *(_DWORD *)(a1 + 24);
  *(_BYTE *)(v5 + 6) = *(_BYTE *)(a1 + 28);
  result = memcpy((void *)(v5 + 7), *(const void **)(a1 + 32), *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32));
  v8 = v5 + 7 + *(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32);
  *a2 = v8;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::OutgoingCallInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;
  uint64_t v4;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78CD7A0;
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 21) = *(_QWORD *)(a1 + 21);
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  v3 = *(const void **)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 32) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 32), v3, v4, v4 - (_QWORD)v3);
  return v2;
}

void sub_1BEFB7FE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C40DB3BAA9ALL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::getSize()
{
  return 7;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 12);
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(result + 16);
  *(_BYTE *)(v3 + 5) = *(_BYTE *)(result + 20);
  *(_BYTE *)(v3 + 6) = *(_DWORD *)(result + 24);
  *a2 = v3 + 7;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 4;
  return result;
}

__n128 qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ConnectedCallInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  __n128 result;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78CD7F0;
  result = *(__n128 *)(a1 + 12);
  *(__n128 *)(v2 + 12) = result;
  return result;
}

_QWORD *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD840;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::~TlvWrapper(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E78CD840;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::getSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24) + 8;
}

void *qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  __int16 v6;
  void *result;
  uint64_t v8;

  v4 = *(_BYTE *)(a1 + 8);
  v5 = *a2;
  v6 = *a2 + 3;
  *a2 += 3;
  *(_BYTE *)(v5 + 3) = *(_BYTE *)(a1 + 16);
  *(_DWORD *)(v5 + 4) = *(_DWORD *)(a1 + 20);
  result = memcpy((void *)(v5 + 8), *(const void **)(a1 + 24), *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24));
  v8 = v5 + 8 + *(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24);
  *a2 = v8;
  *(_BYTE *)v5 = v4;
  *(_WORD *)(v5 + 1) = v8 - v6;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::ReleasedCallInfo>::clone(uint64_t a1)
{
  uint64_t v2;
  const void *v3;

  v2 = operator new();
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)v2 = &off_1E78CD840;
  v3 = *(const void **)(a1 + 24);
  *(_QWORD *)(v2 + 16) = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(v2 + 32) = 0;
  *(_QWORD *)(v2 + 40) = 0;
  *(_QWORD *)(v2 + 24) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 24), v3, *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 32) - (_QWORD)v3);
  return v2;
}

void sub_1BEFB8240(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1091C40B9267B58);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::getSize()
{
  return 5;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 12);
  *(_BYTE *)(v3 + 4) = *(_DWORD *)(result + 16);
  *a2 = v3 + 5;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 2;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<mavims::tlv::RingingInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 8) = *(_BYTE *)(a1 + 8);
  *(_QWORD *)result = &off_1E78CD890;
  *(_QWORD *)(result + 12) = *(_QWORD *)(a1 + 12);
  return result;
}

void IMSMetricsManager::~IMSMetricsManager(IMSMetricsManager *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78CD8C8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 22);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 120);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  IMSMetricsManager::~IMSMetricsManager(this);
  JUMPOUT(0x1C3B87100);
}

void IMSMetricsManager::create(uint64_t a1@<X0>, uint64_t *a2@<X1>, std::__shared_weak_count **a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  std::__shared_weak_count *shared_owners;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count_vtbl *v24;
  std::string::size_type v25;
  std::string::size_type p_get_deleter;
  unint64_t *v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::__shared_weak_count_vtbl *v31;
  std::string::size_type v32;
  std::string::size_type p_on_zero_shared;
  unint64_t *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  capabilities::radio *RadioVendor;
  BambiClient *shared_weak_owners;
  IMSCallManager *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  std::string::size_type v43;
  unint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  std::string::size_type v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  std::__shared_weak_count *v66;
  unint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  std::string::size_type v77;
  unint64_t v78;
  _QWORD *v79;
  uint64_t v80;
  unint64_t v81;
  std::__shared_weak_count_vtbl *v82;
  powerlog::PowerLogger *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  unint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t *v98;
  std::string __p;
  _QWORD *p_shared_weak_owners;
  std::__shared_weak_count *v101;

  v6 = (std::__shared_weak_count *)operator new(0x100uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDB00;
  v9 = *a2;
  v8 = (std::__shared_weak_count *)a2[1];
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldxr(v10);
    while (__stxr(v12 + 1, v10));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.metrics.mgr");
  v13 = v6 + 1;
  ImsLogContainer::ImsLogContainer((uint64_t)&v6[1], &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6[9].__shared_weak_owners_ = 0;
  v6[5].__shared_owners_ = 0;
  v6[5].__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CD8C8;
  v6[6].std::__shared_count = 0u;
  *(_OWORD *)&v6[6].__shared_weak_owners_ = 0u;
  v6[7].__shared_owners_ = (uint64_t)&v6[7].__shared_owners_;
  v6[7].__shared_weak_owners_ = (uint64_t)&v6[7].__shared_owners_;
  v98 = &v6[7].__shared_owners_;
  v14 = &v6[8].__shared_owners_;
  v6[8].__vftable = 0;
  v6[8].__shared_owners_ = (uint64_t)&v6[8].__shared_owners_;
  v6[8].__shared_weak_owners_ = (uint64_t)&v6[8].__shared_owners_;
  v6[9].__vftable = 0;
  v6[10].__vftable = 0;
  v6[9].__shared_owners_ = a1;
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v17 = (std::__shared_weak_count *)v6[10].__vftable;
    v6[9].__shared_weak_owners_ = v9;
    v6[10].__vftable = (std::__shared_weak_count_vtbl *)v8;
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    v6[9].__shared_weak_owners_ = v9;
    v6[10].__vftable = 0;
  }
  v20 = (char *)operator new(0x2B0uLL);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *(_QWORD *)v20 = &off_1E78CD9C0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.awd");
  ImsLogContainer::ImsLogContainer((uint64_t)(v20 + 24), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)v20 + 3) = &off_1E78C0928;
  *((_OWORD *)v20 + 11) = 0u;
  *((_QWORD *)v20 + 18) = 0;
  *((_QWORD *)v20 + 19) = 0;
  *((_QWORD *)v20 + 16) = &unk_1E78C0AB0;
  *((_QWORD *)v20 + 17) = 0;
  *((_QWORD *)v20 + 20) = &unk_1E78C0AE0;
  *((_QWORD *)v20 + 77) = 0;
  *((_OWORD *)v20 + 39) = 0u;
  *((_OWORD *)v20 + 41) = 0u;
  *((_OWORD *)v20 + 12) = 0u;
  *((_OWORD *)v20 + 13) = 0u;
  *((_OWORD *)v20 + 14) = 0u;
  *((_OWORD *)v20 + 15) = 0u;
  *((_OWORD *)v20 + 16) = 0u;
  *((_OWORD *)v20 + 17) = 0u;
  *(_OWORD *)(v20 + 284) = 0u;
  *((_DWORD *)v20 + 88) = 0;
  *((_OWORD *)v20 + 20) = 0u;
  *((_OWORD *)v20 + 21) = 0u;
  *((_OWORD *)v20 + 19) = 0u;
  *((_DWORD *)v20 + 102) = 0;
  *(_OWORD *)(v20 + 392) = 0u;
  *(_OWORD *)(v20 + 376) = 0u;
  *(_OWORD *)(v20 + 360) = 0u;
  *((_DWORD *)v20 + 116) = 0;
  *((_OWORD *)v20 + 26) = 0u;
  *((_OWORD *)v20 + 27) = 0u;
  *((_OWORD *)v20 + 28) = 0u;
  *(_OWORD *)(v20 + 472) = 0u;
  *(_OWORD *)(v20 + 488) = 0u;
  *(_OWORD *)(v20 + 501) = 0u;
  *((_QWORD *)v20 + 84) = xpc_null_create();
  v20[680] = 0;
  shared_owners = (std::__shared_weak_count *)v6[6].__shared_owners_;
  v6[6].__vftable = (std::__shared_weak_count_vtbl *)(v20 + 24);
  v6[6].__shared_owners_ = (uint64_t)v20;
  if (shared_owners)
  {
    v22 = (unint64_t *)&shared_owners->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))shared_owners->__on_zero_shared)(shared_owners);
      std::__shared_weak_count::__release_weak(shared_owners);
    }
  }
  v24 = v6[6].__vftable;
  v25 = v6[6].__shared_owners_;
  if (v24)
    p_get_deleter = (std::string::size_type)&v24[2].__get_deleter;
  else
    p_get_deleter = 0;
  __p.__r_.__value_.__r.__words[0] = p_get_deleter;
  __p.__r_.__value_.__l.__size_ = v25;
  if (v25)
  {
    v27 = (unint64_t *)(v25 + 8);
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = operator new(0x20uLL);
  v29[2] = p_get_deleter;
  v29[3] = v25;
  v30 = v6[7].__shared_owners_;
  *v29 = v30;
  v29[1] = v98;
  *(_QWORD *)(v30 + 8) = v29;
  v6[7].__shared_owners_ = (uint64_t)v29;
  ++v6[8].__vftable;
  v31 = v6[6].__vftable;
  v32 = v6[6].__shared_owners_;
  if (v31)
    p_on_zero_shared = (std::string::size_type)&v31[3].__on_zero_shared;
  else
    p_on_zero_shared = 0;
  __p.__r_.__value_.__r.__words[0] = p_on_zero_shared;
  __p.__r_.__value_.__l.__size_ = v32;
  if (v32)
  {
    v34 = (unint64_t *)(v32 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = operator new(0x20uLL);
  v36[2] = p_on_zero_shared;
  v36[3] = v32;
  v37 = v6[8].__shared_owners_;
  *v36 = v37;
  v36[1] = v14;
  *(_QWORD *)(v37 + 8) = v36;
  v6[8].__shared_owners_ = (uint64_t)v36;
  ++v6[9].__vftable;
  RadioVendor = (capabilities::radio *)TelephonyRadiosGetRadioVendor();
  if ((_DWORD)RadioVendor != 1)
  {
    if ((_DWORD)RadioVendor == 2)
    {
      v40 = (IMSCallManager *)v6[9].__shared_owners_;
      shared_weak_owners = (BambiClient *)v6[9].__shared_weak_owners_;
      v41 = (std::__shared_weak_count *)operator new(0xE0uLL);
      v41->__shared_owners_ = 0;
      v42 = (unint64_t *)&v41->__shared_owners_;
      v41->__shared_weak_owners_ = 0;
      v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDA10;
      IBISipLogger::IBISipLogger((IBISipLogger *)&v41[1], v40, shared_weak_owners);
      __p.__r_.__value_.__r.__words[0] = v43;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v41;
      p_shared_weak_owners = &v41[5].__shared_owners_;
      v101 = v41;
      do
        v44 = __ldxr(v42);
      while (__stxr(v44 + 1, v42));
      v45 = operator new(0x20uLL);
      v45[2] = (char *)v41 + 128;
      v45[3] = v41;
      v46 = v6[7].__shared_owners_;
      *v45 = v46;
      v45[1] = v98;
      *(_QWORD *)(v46 + 8) = v45;
      v6[7].__shared_owners_ = (uint64_t)v45;
      ++v6[8].__vftable;
      p_shared_weak_owners = &v41[6].__shared_weak_owners_;
      v101 = v41;
      do
        v47 = __ldxr(v42);
      while (__stxr(v47 + 1, v42));
      v48 = operator new(0x20uLL);
      v48[2] = (char *)v41 + 160;
      v48[3] = v41;
      v49 = v6[8].__shared_owners_;
      *v48 = v49;
      v48[1] = v14;
      *(_QWORD *)(v49 + 8) = v48;
      v6[8].__shared_owners_ = (uint64_t)v48;
      ++v6[9].__vftable;
      do
        v50 = __ldaxr(v42);
      while (__stlxr(v50 - 1, v42));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        v51 = v41;
LABEL_80:
        std::__shared_weak_count::__release_weak(v51);
        goto LABEL_81;
      }
    }
    else
    {
      v64 = ((uint64_t (*)(std::__shared_weak_count *))v13->__vftable[1].__on_zero_shared)(v6 + 1);
      ((void (*)(std::__shared_weak_count *, uint64_t))v13->__on_zero_shared)(v6 + 1, v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"unknown radio vendor ", 21);
      *(_BYTE *)(v64 + 17) = 0;
      TelephonyRadiosGetRadioVendor();
      std::ostream::operator<<();
      *(_BYTE *)(v64 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v64 + 17) = 0;
    }
    goto LABEL_81;
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  if (capabilities::radio::mav20Plus(RadioVendor))
  {
    v52 = v6[9].__shared_weak_owners_;
    v53 = (std::__shared_weak_count *)operator new(0x130uLL);
    v53->__shared_owners_ = 0;
    v54 = (unint64_t *)&v53->__shared_owners_;
    v53->__shared_weak_owners_ = 0;
    v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDA60;
    v55 = (std::string::size_type)&v53[1];
    LegacyQMISipLogger::LegacyQMISipLogger((LegacyQMISipLogger *)&v53[1]);
    v53[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CCB90;
    v53[5].__shared_owners_ = (uint64_t)&unk_1E78CCCE0;
    v53[6].__shared_weak_owners_ = (uint64_t)&unk_1E78CCD10;
    v53[11].__shared_owners_ = (uint64_t)&v53[11].__shared_weak_owners_;
    v53[11].__shared_weak_owners_ = 0;
    v53[12].__vftable = 0;
    v53[12].__shared_owners_ = v52;
    v56 = (std::__shared_weak_count *)v53[7].__shared_owners_;
    if (v56)
    {
      if (v56->__shared_owners_ != -1)
        goto LABEL_72;
      do
        v57 = __ldxr(v54);
      while (__stxr(v57 + 1, v54));
      v58 = (unint64_t *)&v53->__shared_weak_owners_;
      do
        v59 = __ldxr(v58);
      while (__stxr(v59 + 1, v58));
      v53[7].__vftable = (std::__shared_weak_count_vtbl *)v55;
      v53[7].__shared_owners_ = (uint64_t)v53;
      std::__shared_weak_count::__release_weak(v56);
    }
    else
    {
      do
        v60 = __ldxr(v54);
      while (__stxr(v60 + 1, v54));
      v61 = (unint64_t *)&v53->__shared_weak_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      v53[7].__vftable = (std::__shared_weak_count_vtbl *)v55;
      v53[7].__shared_owners_ = (uint64_t)v53;
    }
    do
      v63 = __ldaxr(v54);
    while (__stlxr(v63 - 1, v54));
  }
  else
  {
    v53 = (std::__shared_weak_count *)operator new(0x110uLL);
    v53->__shared_owners_ = 0;
    v65 = (unint64_t *)&v53->__shared_owners_;
    v53->__shared_weak_owners_ = 0;
    v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDAB0;
    v55 = (std::string::size_type)&v53[1];
    LegacyQMISipLogger::LegacyQMISipLogger((LegacyQMISipLogger *)&v53[1]);
    v66 = (std::__shared_weak_count *)v53[7].__shared_owners_;
    if (v66)
    {
      if (v66->__shared_owners_ != -1)
        goto LABEL_72;
      do
        v67 = __ldxr(v65);
      while (__stxr(v67 + 1, v65));
      v68 = (unint64_t *)&v53->__shared_weak_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
      v53[7].__vftable = (std::__shared_weak_count_vtbl *)v55;
      v53[7].__shared_owners_ = (uint64_t)v53;
      std::__shared_weak_count::__release_weak(v66);
    }
    else
    {
      do
        v70 = __ldxr(v65);
      while (__stxr(v70 + 1, v65));
      v71 = (unint64_t *)&v53->__shared_weak_owners_;
      do
        v72 = __ldxr(v71);
      while (__stxr(v72 + 1, v71));
      v53[7].__vftable = (std::__shared_weak_count_vtbl *)v55;
      v53[7].__shared_owners_ = (uint64_t)v53;
    }
    do
      v63 = __ldaxr(v65);
    while (__stlxr(v63 - 1, v65));
  }
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
LABEL_72:
  __p.__r_.__value_.__r.__words[0] = v55;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
  p_shared_weak_owners = (_QWORD *)(v55 + 104);
  v101 = v53;
  v73 = (unint64_t *)&v53->__shared_owners_;
  do
    v74 = __ldxr(v73);
  while (__stxr(v74 + 1, v73));
  v75 = operator new(0x20uLL);
  v75[2] = v55 + 104;
  v75[3] = v53;
  v76 = v6[7].__shared_owners_;
  *v75 = v76;
  v75[1] = v98;
  *(_QWORD *)(v76 + 8) = v75;
  v6[7].__shared_owners_ = (uint64_t)v75;
  ++v6[8].__vftable;
  v77 = v55 + 136;
  p_shared_weak_owners = (_QWORD *)v77;
  v101 = v53;
  do
    v78 = __ldxr(v73);
  while (__stxr(v78 + 1, v73));
  v79 = operator new(0x20uLL);
  v79[2] = v77;
  v79[3] = v53;
  v80 = v6[8].__shared_owners_;
  *v79 = v80;
  v79[1] = v14;
  *(_QWORD *)(v80 + 8) = v79;
  v6[8].__shared_owners_ = (uint64_t)v79;
  ++v6[9].__vftable;
  do
    v81 = __ldaxr(v73);
  while (__stlxr(v81 - 1, v73));
  if (!v81)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    v51 = v53;
    goto LABEL_80;
  }
LABEL_81:
  v82 = (std::__shared_weak_count_vtbl *)operator new(0x88uLL);
  v82->~__shared_weak_count_0 = 0;
  v82->__on_zero_shared = 0;
  v82->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E78CD970;
  v83 = powerlog::PowerLogger::PowerLogger((powerlog::PowerLogger *)&v82->__get_deleter);
  v84 = (std::__shared_weak_count *)v6[7].__vftable;
  v6[6].__shared_weak_owners_ = (uint64_t)v83;
  v6[7].__vftable = v82;
  if (!v84)
    goto LABEL_85;
  v85 = (unint64_t *)&v84->__shared_owners_;
  do
    v86 = __ldaxr(v85);
  while (__stlxr(v86 - 1, v85));
  if (v86)
  {
LABEL_85:
    if (v8)
      goto LABEL_86;
LABEL_95:
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDB50;
    goto LABEL_96;
  }
  ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
  std::__shared_weak_count::__release_weak(v84);
  if (!v8)
    goto LABEL_95;
LABEL_86:
  v87 = (unint64_t *)&v8->__shared_owners_;
  do
    v88 = __ldaxr(v87);
  while (__stlxr(v88 - 1, v87));
  if (!v88)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDB50;
  do
    v89 = __ldaxr(v87);
  while (__stlxr(v89 - 1, v87));
  if (!v89)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
LABEL_96:
  v90 = (std::__shared_weak_count *)v6[5].__shared_weak_owners_;
  if (v90)
  {
    if (v90->__shared_owners_ != -1)
      goto LABEL_109;
    do
      v91 = __ldxr(p_shared_owners);
    while (__stxr(v91 + 1, p_shared_owners));
    v92 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v93 = __ldxr(v92);
    while (__stxr(v93 + 1, v92));
    v6[5].__shared_owners_ = (uint64_t)v13;
    v6[5].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(v90);
  }
  else
  {
    do
      v94 = __ldxr(p_shared_owners);
    while (__stxr(v94 + 1, p_shared_owners));
    v95 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v96 = __ldxr(v95);
    while (__stxr(v96 + 1, v95));
    v6[5].__shared_owners_ = (uint64_t)v13;
    v6[5].__shared_weak_owners_ = (uint64_t)v6;
  }
  do
    v97 = __ldaxr(p_shared_owners);
  while (__stlxr(v97 - 1, p_shared_owners));
  if (!v97)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_109:
  *a3 = v13;
  a3[1] = v6;
}

void sub_1BEFB8C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  void **v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  std::__shared_weak_count *v25;
  void *v27;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t *p_shared_owners;
  unint64_t v30;
  unint64_t v31;
  void *v32;

  std::__shared_weak_count::~__shared_weak_count(v25);
  operator delete(v27);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v24);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a11);
  shared_weak_owners = (std::__shared_weak_count *)v23[5].__shared_weak_owners_;
  if (shared_weak_owners)
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  ImsLogContainer::~ImsLogContainer(v21);
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
    do
      v31 = __ldaxr(p_shared_owners);
    while (__stlxr(v31 - 1, p_shared_owners));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v23);
  operator delete(v32);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSipRequest(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  void (***v18)(_QWORD, uint64_t *, uint64_t, uint64_t, uint64_t);
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = (std::__shared_weak_count *)a2[1];
    v27 = *a2;
    v28 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 112))(v9, &v27, a3, a4, a5);
    v13 = v28;
    if (v28)
    {
      v14 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v16; i = *(_QWORD *)(i + 8))
    {
      v18 = *(void (****)(_QWORD, uint64_t *, uint64_t, uint64_t, uint64_t))(i + 16);
      v19 = (std::__shared_weak_count *)a2[1];
      v25 = *a2;
      v26 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      (**v18)(v18, &v25, a3, a4, a5);
      v22 = v26;
      if (v26)
      {
        v23 = (unint64_t *)&v26->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void sub_1BEFB8F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSipResponse(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t i;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v9 = *(_QWORD *)(a1 + 120);
    v10 = (std::__shared_weak_count *)a2[1];
    v27 = *a2;
    v28 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 120))(v9, &v27, a3, a4, a5);
    v13 = v28;
    if (v28)
    {
      v14 = (unint64_t *)&v28->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    v16 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v16; i = *(_QWORD *)(i + 8))
    {
      v18 = *(_QWORD *)(i + 16);
      v19 = (std::__shared_weak_count *)a2[1];
      v25 = *a2;
      v26 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v18 + 8))(v18, &v25, a3, a4, a5);
      v22 = v26;
      if (v26)
      {
        v23 = (unint64_t *)&v26->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void sub_1BEFB90D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSipRequestFromNonProxyDropped(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = (std::__shared_weak_count *)a2[1];
  v9 = *a2;
  v10 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 128))(v2, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BEFB9180(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logEarlyMTSessionRequestedEvent(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  v2 = a1 + 176;
  v3 = *(_QWORD *)(a1 + 184);
  if (v3 != a1 + 176)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 16);
      v6 = (std::__shared_weak_count *)a2[1];
      v12 = *a2;
      v13 = v6;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(v5, &v12);
      v9 = v13;
      if (v13)
      {
        v10 = (unint64_t *)&v13->__shared_owners_;
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
}

void sub_1BEFB9248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSessionRequestedEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1 + 176;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = (std::__shared_weak_count *)a2[1];
      v16 = *a2;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v9 + 40))(v9, &v16, a3, a4);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1BEFB9328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRingingEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1 + 176;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = (std::__shared_weak_count *)a2[1];
      v16 = *a2;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v9 + 64))(v9, &v16, a3, a4);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1BEFB9408(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSessionProgress(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1 + 176;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = (std::__shared_weak_count *)a3[1];
      v16 = *a3;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 88))(v9, a2, &v16, a4);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1BEFB94E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSessionConfirmedEvent(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1 + 176;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = (std::__shared_weak_count *)a2[1];
      v16 = *a2;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, &v16, a3, a4);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1BEFB95C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t IMSMetricsManager::logSessionTerminationEvent(IMSMetricsManager *this, const BambiCallSessionTerminationBaseEvent *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  char *v5;
  uint64_t v6;
  uint64_t v11;
  uint64_t v12;
  const void *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  unint64_t v17;

  v5 = (char *)this + 176;
  v6 = *((_QWORD *)this + 23);
  if ((IMSMetricsManager *)v6 == (IMSMetricsManager *)((char *)this + 176))
    return 0;
  v11 = 0;
  do
  {
    v12 = (*(uint64_t (**)(_QWORD, const BambiCallSessionTerminationBaseEvent *, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(v6 + 16) + 72))(*(_QWORD *)(v6 + 16), a2, a3, a4, a5);
    v13 = *(const void **)(v6 + 16);
    if (v13
    {
      v14 = *(std::__shared_weak_count **)(v6 + 24);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(p_shared_owners);
        while (__stxr(v16 + 1, p_shared_owners));
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v11 = v12;
    }
    v6 = *(_QWORD *)(v6 + 8);
  }
  while ((char *)v6 != v5);
  return v11;
}

void IMSMetricsManager::logIncomingPrack(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1 + 176;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = (std::__shared_weak_count *)a3[1];
      v16 = *a3;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 16))(v9, a2, &v16, a4);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1BEFB97B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logWiFiHandover(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v7 = *(_QWORD *)(a1 + 120);
    v8 = (std::__shared_weak_count *)a2[1];
    v25 = *a2;
    v26 = v8;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v7 + 280))(v7, &v25, a3, a4);
    v11 = v26;
    if (v26)
    {
      v12 = (unint64_t *)&v26->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    v14 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v14; i = *(_QWORD *)(i + 8))
    {
      v16 = *(_QWORD *)(i + 16);
      v17 = (std::__shared_weak_count *)a2[1];
      v23 = *a2;
      v24 = v17;
      if (v17)
      {
        v18 = (unint64_t *)&v17->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v16 + 160))(v16, &v23, a3, a4);
      v20 = v24;
      if (v24)
      {
        v21 = (unint64_t *)&v24->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
  }
}

void sub_1BEFB9914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logPrackResponse(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;

  v4 = a1 + 176;
  v5 = *(_QWORD *)(a1 + 184);
  if (v5 != a1 + 176)
  {
    do
    {
      v9 = *(_QWORD *)(v5 + 16);
      v10 = (std::__shared_weak_count *)a3[1];
      v16 = *a3;
      v17 = v10;
      if (v10)
      {
        p_shared_owners = (unint64_t *)&v10->__shared_owners_;
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 24))(v9, a2, &v16, a4);
      v13 = v17;
      if (v17)
      {
        v14 = (unint64_t *)&v17->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v5 = *(_QWORD *)(v5 + 8);
    }
    while (v5 != v4);
  }
}

void sub_1BEFB9A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRegistrationSuccess(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 288))(v5, &v23, a3);
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v12; i = *(_QWORD *)(i + 8))
    {
      v14 = *(_QWORD *)(i + 16);
      v15 = (std::__shared_weak_count *)a2[1];
      v21 = *a2;
      v22 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v14 + 176))(v14, &v21, a3);
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void sub_1BEFB9B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRegistrationError(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 296))(v5, &v23, a3);
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v12; i = *(_QWORD *)(i + 8))
    {
      v14 = *(_QWORD *)(i + 16);
      v15 = (std::__shared_weak_count *)a2[1];
      v21 = *a2;
      v22 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v14 + 184))(v14, &v21, a3);
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void sub_1BEFB9CAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRegistrationRequest(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 304))(v5, &v23, a3);
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v12; i = *(_QWORD *)(i + 8))
    {
      v14 = *(_QWORD *)(i + 16);
      v15 = (std::__shared_weak_count *)a2[1];
      v21 = *a2;
      v22 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v14 + 168))(v14, &v21, a3);
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void sub_1BEFB9E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRegistrationTerminated(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 312))(v3, &v21);
    v7 = v22;
    if (v22)
    {
      v8 = (unint64_t *)&v22->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v10 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v10; i = *(_QWORD *)(i + 8))
    {
      v12 = *(_QWORD *)(i + 16);
      v13 = (std::__shared_weak_count *)a2[1];
      v19 = *a2;
      v20 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 200))(v12, &v19);
      v16 = v20;
      if (v20)
      {
        v17 = (unint64_t *)&v20->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1BEFB9F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRegistrationTerminated(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 320))(v5, &v23, a3);
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v12; i = *(_QWORD *)(i + 8))
    {
      v14 = *(_QWORD *)(i + 16);
      v15 = (std::__shared_weak_count *)a2[1];
      v21 = *a2;
      v22 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v14 + 192))(v14, &v21, a3);
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void sub_1BEFBA0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logRegistrationStateChange(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v5 = *(_QWORD *)(a1 + 120);
    v6 = (std::__shared_weak_count *)a2[1];
    v23 = *a2;
    v24 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v5 + 328))(v5, &v23, a3);
    v9 = v24;
    if (v24)
    {
      v10 = (unint64_t *)&v24->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else
  {
    v12 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v12; i = *(_QWORD *)(i + 8))
    {
      v14 = *(_QWORD *)(i + 16);
      v15 = (std::__shared_weak_count *)a2[1];
      v21 = *a2;
      v22 = v15;
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v14 + 208))(v14, &v21, a3);
      v18 = v22;
      if (v22)
      {
        v19 = (unint64_t *)&v22->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
  }
}

void sub_1BEFBA208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logDeRegistration(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 336))(v3, &v21);
    v7 = v22;
    if (v22)
    {
      v8 = (unint64_t *)&v22->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v10 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v10; i = *(_QWORD *)(i + 8))
    {
      v12 = *(_QWORD *)(i + 16);
      v13 = (std::__shared_weak_count *)a2[1];
      v19 = *a2;
      v20 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 216))(v12, &v19);
      v16 = v20;
      if (v20)
      {
        v17 = (unint64_t *)&v20->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1BEFBA350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSmsSendAttemptedEvent(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 344))(v3, &v21);
    v7 = v22;
    if (v22)
    {
      v8 = (unint64_t *)&v22->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v10 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v10; i = *(_QWORD *)(i + 8))
    {
      v12 = *(_QWORD *)(i + 16);
      v13 = (std::__shared_weak_count *)a2[1];
      v19 = *a2;
      v20 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 224))(v12, &v19);
      v16 = v20;
      if (v20)
      {
        v17 = (unint64_t *)&v20->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1BEFBA498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSmsSendCompletedEvent(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  if (*(_BYTE *)(*a2 + 2657))
  {
    v3 = *(_QWORD *)(a1 + 120);
    v4 = (std::__shared_weak_count *)a2[1];
    v21 = *a2;
    v22 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 352))(v3, &v21);
    v7 = v22;
    if (v22)
    {
      v8 = (unint64_t *)&v22->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    v10 = a1 + 176;
    for (i = *(_QWORD *)(a1 + 184); i != v10; i = *(_QWORD *)(i + 8))
    {
      v12 = *(_QWORD *)(i + 16);
      v13 = (std::__shared_weak_count *)a2[1];
      v19 = *a2;
      v20 = v13;
      if (v13)
      {
        v14 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(v14);
        while (__stxr(v15 + 1, v14));
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 232))(v12, &v19);
      v16 = v20;
      if (v20)
      {
        v17 = (unint64_t *)&v20->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
}

void sub_1BEFBA5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logSignalingReduction(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  v3 = *(_QWORD *)(a1 + 120);
  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  AnalyticsLogger::logSignalingReduction(v3, v9, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEFBA68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::addCallEndInfo(uint64_t a1, void **a2)
{
  uint64_t v2;
  void *v3;
  xpc_object_t object;

  v2 = *(_QWORD *)(a1 + 120);
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  AnalyticsLogger::addCallEndInfo(v2, &object);
  xpc_release(object);
}

void sub_1BEFBA6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logLazuliRefer(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::string __p;
  std::string v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v11 = *(_QWORD *)(a1 + 120);
  v12 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v19 = *(std::string *)a3;
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    __p = *(std::string *)a7;
  (*(void (**)(uint64_t, uint64_t *, std::string *, uint64_t, uint64_t, uint64_t, std::string *))(*(_QWORD *)v11 + 176))(v11, &v20, &v19, a4, a5, a6, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEFBA848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a21 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void IMSMetricsManager::logLazuliMessageSessionSetup(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;
  std::string v21;

  v16 = *(_QWORD *)(a1 + 120);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v21 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v20 = *(std::string *)a6;
  if (*(char *)(a7 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
  else
    v19 = *(std::string *)a7;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v18 = *(std::string *)a8;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *, std::string *, std::string *, std::string *, std::string *, char))(*(_QWORD *)v16 + 184))(v16, a2, a3, a4, &v21, &v20, &v19, &v18, &v17, a10);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1BEFBAA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a37 < 0)
    operator delete(a32);
  if (*(char *)(v37 - 73) < 0)
    operator delete(*(void **)(v37 - 96));
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSessionEnd(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, uint64_t a10)
{
  uint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;

  v16 = *(_QWORD *)(a1 + 120);
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v19 = *(std::string *)a6;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v18 = *(std::string *)a8;
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, std::string *, int, std::string *))(*(_QWORD *)v16 + 192))(v16, a2, a3, a4, a5, &v19, a7, &v18, a9, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BEFBABF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSessionSendReceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  uint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;

  v16 = *(_QWORD *)(a1 + 120);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v19 = *(std::string *)a5;
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v18 = *(std::string *)a6;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *, std::string *, uint64_t, uint64_t, std::string *, char))(*(_QWORD *)v16 + 200))(v16, a2, a3, a4, &v19, &v18, a7, a8, &v17, a10);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BEFBAD80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSendReceive(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v16;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string v20;

  v16 = *(_QWORD *)(a1 + 120);
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v20 = *(std::string *)a5;
  if (*(char *)(a8 + 23) < 0)
    std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a8, *(_QWORD *)(a8 + 8));
  else
    v19 = *(std::string *)a8;
  if (*(char *)(a9 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a9, *(_QWORD *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)a9;
    v18.__r_.__value_.__r.__words[2] = *(_QWORD *)(a9 + 16);
  }
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v17, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v17.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, std::string *, uint64_t, uint64_t, std::string *, std::string *, std::string *))(*(_QWORD *)v16 + 208))(v16, a2, a3, a4, &v20, a6, a7, &v19, &v18, &v17);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
}

void sub_1BEFBAF40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a23 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 73) < 0)
    operator delete(*(void **)(v30 - 96));
  _Unwind_Resume(exception_object);
}

void IMSMetricsManager::logLazuliMessageSipOptions(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10;
  std::string v11;

  v10 = *(_QWORD *)(a1 + 120);
  if (*(char *)(a10 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)a10, *(_QWORD *)(a10 + 8));
  }
  else
  {
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)a10;
    v11.__r_.__value_.__r.__words[2] = *(_QWORD *)(a10 + 16);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v10 + 216))(v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
}

void sub_1BEFBB0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *IMSMetricsManager::logPrefix(IMSMetricsManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"ims_metrics: ", 13);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void std::__shared_ptr_emplace<powerlog::PowerLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CD970;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<powerlog::PowerLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CD970;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<powerlog::PowerLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<AnalyticsLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CD9C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<AnalyticsLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CD9C0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<AnalyticsLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<IBISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDA10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDA10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IBISipLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<QMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDA60;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDA60;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMISipLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<LegacyQMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDAB0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LegacyQMISipLogger>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDAB0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LegacyQMISipLogger>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper,std::allocator<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDB00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper,std::allocator<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDB00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper,std::allocator<IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void IMSMetricsManager::create(IMSCallManager *,std::shared_ptr<BambiClient>)::ManagerWrapper::~ManagerWrapper(IMSMetricsManager *a1)
{
  IMSMetricsManager::~IMSMetricsManager(a1);
  JUMPOUT(0x1C3B87100);
}

double ims::analytics::RegistrationResultEvent::createRegistrationSuccess@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  const char *v12;
  xpc_object_t *v13;
  uint64_t v14;
  const char *v15;
  int v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  int64_t v22;
  const char *v23;
  xpc_object_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  double result;
  uint64_t v34;
  std::__shared_weak_count *v35;
  __int128 v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t v43;
  xpc_object_t v44;
  xpc_object_t v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t object;
  xpc_object_t v50;
  xpc_object_t v51;
  xpc_object_t v52;
  uint64_t v53;
  const char *v54;
  xpc_object_t v55;
  xpc_object_t v56;

  v36 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v36);
  v6 = v36;
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v34 = *a1;
  v35 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a2 + 48);
  if (!*(_DWORD *)(v11 + 456))
  {
    v55 = xpc_string_create("ATM_REG_DE_UE");
    if (!v55)
      v55 = xpc_null_create();
    goto LABEL_19;
  }
  if (!*(_BYTE *)(a2 + 144))
  {
    v55 = xpc_string_create("ATM_REG_INIT");
    if (!v55)
      v55 = xpc_null_create();
LABEL_19:
    v53 = v6 + 112;
    v54 = "type";
    xpc::dict::object_proxy::operator=((uint64_t)&v53, &v55, &v56);
    xpc_release(v56);
    v56 = 0;
    xpc_release(v55);
    v55 = 0;
    goto LABEL_20;
  }
  v55 = xpc_string_create("ATM_REG_RE");
  if (!v55)
    v55 = xpc_null_create();
  v53 = v6 + 112;
  v54 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v55, &v56);
  xpc_release(v56);
  v56 = 0;
  xpc_release(v55);
  v55 = 0;
  if (*(char *)(a2 + 175) >= 0)
    v12 = (const char *)(a2 + 152);
  else
    v12 = *(const char **)(a2 + 152);
  v51 = xpc_string_create(v12);
  if (!v51)
    v51 = xpc_null_create();
  v53 = v6 + 112;
  v54 = "rereg_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v51, &v52);
  xpc_release(v52);
  v52 = 0;
  xpc_release(v51);
  v51 = 0;
LABEL_20:
  object = xpc_int64_create(*(unsigned int *)(v11 + 456));
  if (!object)
    object = xpc_null_create();
  v13 = (xpc_object_t *)(v6 + 112);
  v53 = v6 + 112;
  v54 = "expires";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &object, &v50);
  xpc_release(v50);
  v50 = 0;
  xpc_release(object);
  object = 0;
  if (*(char *)(v8 + 3231) < 0)
    v14 = *(_QWORD *)(v8 + 3216);
  else
    v14 = *(unsigned __int8 *)(v8 + 3231);
  v15 = (const char *)(v8 + 3136);
  if (v14)
  {
    if (*(char *)(v8 + 3255) < 0 ? *(_QWORD *)(v8 + 3240) : *(unsigned __int8 *)(v8 + 3255))
      v15 = (const char *)(v8 + 3208);
  }
  if (v15[23] < 0)
    v15 = *(const char **)v15;
  v47 = xpc_string_create(v15);
  if (!v47)
    v47 = xpc_null_create();
  v53 = v6 + 112;
  v54 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v47, &v48);
  xpc_release(v48);
  v48 = 0;
  xpc_release(v47);
  v47 = 0;
  v17 = *(_DWORD *)(v11 + 504);
  if ((v17 & 1) != 0)
  {
    v45 = xpc_string_create("ATM_REGD_VS");
    if (!v45)
      v45 = xpc_null_create();
  }
  else
  {
    if ((v17 & 4) == 0)
      goto LABEL_43;
    v45 = xpc_string_create("ATM_REGD_S");
    if (!v45)
      v45 = xpc_null_create();
  }
  v53 = v6 + 112;
  v54 = "feature";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v45, &v46);
  xpc_release(v46);
  v46 = 0;
  xpc_release(v45);
  v45 = 0;
LABEL_43:
  v43 = xpc_string_create("ATM_CALL_Status_200");
  if (!v43)
    v43 = xpc_null_create();
  v53 = v6 + 112;
  v54 = "result";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v43, &v44);
  xpc_release(v44);
  v44 = 0;
  xpc_release(v43);
  v43 = 0;
  v18 = *(_QWORD *)(a2 + 56);
  v19 = *(_QWORD *)(a2 + 64);
  v20 = v19 >= v18;
  v21 = v19 - v18;
  if (!v20)
    v21 = 0;
  if (v18)
    v22 = v21;
  else
    v22 = 0;
  v41 = xpc_int64_create(v22);
  if (!v41)
    v41 = xpc_null_create();
  v53 = v6 + 112;
  v54 = "latency";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v41, &v42);
  xpc_release(v42);
  v42 = 0;
  xpc_release(v41);
  v41 = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2))
  {
    if (*(_DWORD *)(v11 + 456))
      v23 = "ATM_REG_RE_EMERGENCY";
    else
      v23 = "ATM_REG_DE_EMERGENCY";
    v39 = xpc_string_create(v23);
    if (!v39)
      v39 = xpc_null_create();
    v53 = v6 + 112;
    v54 = "type";
    xpc::dict::object_proxy::operator=((uint64_t)&v53, &v39, &v40);
    xpc_release(v40);
    v40 = 0;
    xpc_release(v39);
    v39 = 0;
  }
  v24 = *v13;
  if (*v13)
    xpc_retain(*v13);
  else
    v24 = xpc_null_create();
  if (v35)
  {
    v25 = (unint64_t *)&v35->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    do
      v27 = __ldaxr(v25);
    while (__stlxr(v27 - 1, v25));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  xpc_release(v24);
  if (v35)
  {
    v28 = (unint64_t *)&v35->__shared_owners_;
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    do
      v30 = __ldaxr(v28);
    while (__stlxr(v30 - 1, v28));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  else
  {
  }
  v37 = xpc_int64_create(*(unsigned int *)(a2 + 180));
  if (!v37)
    v37 = xpc_null_create();
  v53 = v6 + 112;
  v54 = "keep_alive_timer";
  xpc::dict::object_proxy::operator=((uint64_t)&v53, &v37, &v38);
  xpc_release(v38);
  v38 = 0;
  xpc_release(v37);
  if (v35)
  {
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  result = *(double *)&v36;
  *a3 = v36;
  return result;
}

void sub_1BEFBB9C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  std::string __p;

  v2 = operator new(0x90uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E78CDBC8;
  v2[3] = off_1E78CDD00;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.regresult");
  ImsLogContainer::ImsLogContainer((uint64_t)(v2 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2[3] = off_1E78CDC18;
  v2[4] = &unk_1E78CDC50;
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    v2[17] = v3;
  }
  else
  {
    v4 = xpc_null_create();
    v2[17] = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C3B87B98](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_10:
    v2[17] = v5;
    goto LABEL_11;
  }
  xpc_retain(v4);
LABEL_11:
  xpc_release(v4);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_1BEFBBB28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

void ims::analytics::RegistrationResultEvent::createRegistrationTerminated(uint64_t *a1@<X0>, int64_t a2@<X1>, _anonymous_namespace_::RegistrationResultEventImpl **a3@<X8>)
{
  _anonymous_namespace_::RegistrationResultEventImpl *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  xpc_object_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  _anonymous_namespace_::RegistrationResultEventImpl *v19;
  _anonymous_namespace_::RegistrationResultEventImpl *v20;
  _anonymous_namespace_::RegistrationResultEventImpl *v21;
  _anonymous_namespace_::RegistrationResultEventImpl *v22;
  _QWORD v23[2];
  xpc_object_t v24;
  xpc_object_t object;

  v21 = 0;
  v22 = 0;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v21);
  v6 = v21;
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v24 = xpc_string_create("ATM_REG_DE_UE");
  if (!v24)
    v24 = xpc_null_create();
  v23[0] = (char *)v6 + 112;
  v23[1] = "type";
  xpc::dict::object_proxy::operator=((uint64_t)v23, &v24, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v24);
  v24 = 0;
  v11 = (xpc_object_t)*((_QWORD *)v6 + 14);
  if (v11)
  {
    xpc_retain(*((xpc_object_t *)v6 + 14));
    if (!v7)
      goto LABEL_15;
  }
  else
  {
    v11 = xpc_null_create();
    if (!v7)
      goto LABEL_15;
  }
  v12 = (unint64_t *)&v7->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  do
    v14 = __ldaxr(v12);
  while (__stlxr(v14 - 1, v12));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_15:
  xpc_release(v11);
  if (v7)
  {
    v15 = (unint64_t *)&v7->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    do
      v18 = __ldaxr(v15);
    while (__stlxr(v18 - 1, v15));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  else
  {
  }
  v19 = v21;
  v20 = v22;
  *a3 = v19;
  a3[1] = v20;
}

void `anonymous namespace'::RegistrationResultEventImpl::processPcscfPinningDroppedRequestsCount(_anonymous_namespace_::RegistrationResultEventImpl *this, int64_t value)
{
  _QWORD v3[2];
  xpc_object_t v4;
  xpc_object_t object;

  v4 = xpc_int64_create(value);
  if (!v4)
    v4 = xpc_null_create();
  v3[0] = (char *)this + 112;
  v3[1] = "pcscf_pinning_message_count";
  xpc::dict::object_proxy::operator=((uint64_t)v3, &v4, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v4);
}

void ims::analytics::RegistrationResultEvent::createRegistrationTerminated(uint64_t *a1@<X0>, uint64_t a2@<X1>, int64_t a3@<X2>, _anonymous_namespace_::RegistrationResultEventImpl **a4@<X8>)
{
  _anonymous_namespace_::RegistrationResultEventImpl *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  xpc_object_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _anonymous_namespace_::RegistrationResultEventImpl *v23;
  _anonymous_namespace_::RegistrationResultEventImpl *v24;
  _anonymous_namespace_::RegistrationResultEventImpl *v25;
  _anonymous_namespace_::RegistrationResultEventImpl *v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t object;
  char *v35;
  const char *v36;
  xpc_object_t v37;
  xpc_object_t v38;

  v25 = 0;
  v26 = 0;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v25);
  v8 = v25;
  v10 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v13 = *(_QWORD *)(a2 + 48);
  v37 = xpc_string_create("ATM_REG_DE_NE");
  if (!v37)
    v37 = xpc_null_create();
  v35 = (char *)v8 + 112;
  v36 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v35, &v37, &v38);
  xpc_release(v38);
  v38 = 0;
  xpc_release(v37);
  v37 = 0;
  v33 = xpc_int64_create(*(unsigned int *)(v13 + 456));
  if (!v33)
    v33 = xpc_null_create();
  v35 = (char *)v8 + 112;
  v36 = "expires";
  xpc::dict::object_proxy::operator=((uint64_t)&v35, &v33, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v33);
  v33 = 0;
  v14 = *(_DWORD *)(v13 + 504);
  if ((v14 & 1) != 0)
  {
    v31 = xpc_string_create("ATM_REGD_VS");
    if (!v31)
      v31 = xpc_null_create();
    v35 = (char *)v8 + 112;
    v36 = "feature";
    xpc::dict::object_proxy::operator=((uint64_t)&v35, &v31, &v32);
    xpc_release(v32);
    v32 = 0;
    xpc_release(v31);
    v31 = 0;
  }
  else if ((v14 & 4) != 0)
  {
    v29 = xpc_string_create("ATM_REGD_S");
    if (!v29)
      v29 = xpc_null_create();
    v35 = (char *)v8 + 112;
    v36 = "feature";
    xpc::dict::object_proxy::operator=((uint64_t)&v35, &v29, &v30);
    xpc_release(v30);
    v30 = 0;
    xpc_release(v29);
    v29 = 0;
  }
  v27 = xpc_string_create("ATM_CALL_Status_200");
  if (!v27)
    v27 = xpc_null_create();
  v35 = (char *)v8 + 112;
  v36 = "result";
  xpc::dict::object_proxy::operator=((uint64_t)&v35, &v27, &v28);
  xpc_release(v28);
  v28 = 0;
  xpc_release(v27);
  v27 = 0;
  v15 = (xpc_object_t)*((_QWORD *)v8 + 14);
  if (v15)
  {
    xpc_retain(v15);
    if (!v9)
      goto LABEL_27;
  }
  else
  {
    v15 = xpc_null_create();
    if (!v9)
      goto LABEL_27;
  }
  v16 = (unint64_t *)&v9->__shared_owners_;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  do
    v18 = __ldaxr(v16);
  while (__stlxr(v18 - 1, v16));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_27:
  xpc_release(v15);
  if (v9)
  {
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
    do
      v22 = __ldaxr(v19);
    while (__stlxr(v22 - 1, v19));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  else
  {
  }
  v23 = v25;
  v24 = v26;
  *a4 = v23;
  a4[1] = v24;
}

double ims::analytics::RegistrationResultEvent::createRegistrationError@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *v11;
  xpc_object_t *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  BOOL v20;
  unsigned int v21;
  int64_t v22;
  uint64_t *v23;
  const char *p_p;
  int v25;
  uint64_t v26;
  const char *v27;
  ImsResult *v29;
  const char *v30;
  const char *v31;
  xpc_object_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  double result;
  const char *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  __int128 v45;
  xpc_object_t v46;
  xpc_object_t v47;
  xpc_object_t v48;
  xpc_object_t v49;
  void *__p;
  const char *v51;
  int v52;
  char v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  const char *v58;
  xpc_object_t object;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  xpc_object_t v64;
  xpc_object_t v65;
  xpc_object_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  xpc_object_t v69;

  v45 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_127RegistrationResultEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v45);
  v6 = v45;
  v8 = *a1;
  v7 = (std::__shared_weak_count *)a1[1];
  v43 = v8;
  v44 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  v12 = (xpc_object_t *)(v6 + 112);
  v11 = *(void **)(v6 + 112);
  v69 = v11;
  if (v11)
    xpc_retain(v11);
  else
    v69 = xpc_null_create();
  v67 = v8;
  v68 = v7;
  if (v7)
  {
    v13 = (unint64_t *)&v7->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  ims::analytics::populateCellularInfo(&v69, (uint64_t)&v67);
  v15 = v68;
  if (v68)
  {
    v16 = (unint64_t *)&v68->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  xpc_release(v69);
  v69 = 0;
  if (*(_BYTE *)(a2 + 137))
  {
    v65 = xpc_string_create("ATM_REG_DE_EMERGENCY");
    if (!v65)
      v65 = xpc_null_create();
LABEL_22:
    __p = (void *)(v6 + 112);
    v51 = "type";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v65, &v66);
    xpc_release(v66);
    v66 = 0;
    xpc_release(v65);
    v65 = 0;
    goto LABEL_23;
  }
  if (*(_BYTE *)(a2 + 140))
  {
    v65 = xpc_string_create("ATM_REG_DE_UE");
    if (!v65)
      v65 = xpc_null_create();
    goto LABEL_22;
  }
  if (!*(_BYTE *)(a2 + 136))
  {
    v65 = xpc_string_create("ATM_REG_INIT");
    if (!v65)
      v65 = xpc_null_create();
    goto LABEL_22;
  }
  v65 = xpc_string_create("ATM_REG_RE");
  if (!v65)
    v65 = xpc_null_create();
  __p = (void *)(v6 + 112);
  v51 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v65, &v66);
  xpc_release(v66);
  v66 = 0;
  xpc_release(v65);
  v65 = 0;
  if (*(char *)(a2 + 167) >= 0)
    v42 = (const char *)(a2 + 144);
  else
    v42 = *(const char **)(a2 + 144);
  v63 = xpc_string_create(v42);
  if (!v63)
    v63 = xpc_null_create();
  __p = (void *)(v6 + 112);
  v51 = "rereg_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v63, &v64);
  xpc_release(v64);
  v64 = 0;
  xpc_release(v63);
  v63 = 0;
LABEL_23:
  v18 = *(_QWORD *)(a2 + 48);
  v19 = *(_QWORD *)(a2 + 56);
  v20 = v19 >= v18;
  v21 = v19 - v18;
  if (!v20)
    v21 = 0;
  if (v18)
    v22 = v21;
  else
    v22 = 0;
  v61 = xpc_int64_create(v22);
  if (!v61)
    v61 = xpc_null_create();
  __p = (void *)(v6 + 112);
  v51 = "latency";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v61, &v62);
  xpc_release(v62);
  v62 = 0;
  xpc_release(v61);
  v61 = 0;
  v23 = *(uint64_t **)(a2 + 72);
  if (v23 != &SipResultDomain::_domain)
  {
    if (v23 == &_posixDomain)
    {
      object = xpc_string_create("Reg_POSIX_Error");
      if (!object)
        object = xpc_null_create();
      goto LABEL_50;
    }
    v54 = 0u;
    v55 = 0u;
    v56 = 0u;
    __p = &off_1E78B7238;
    v51 = (const char *)&_bambiDomain;
    v52 = 1073741830;
    if (v23 == &_bambiDomain)
    {
      v25 = *(_DWORD *)(a2 + 80);
      ImsResult::~ImsResult((ImsResult *)&__p);
      if (v25 == 1073741830)
      {
        object = xpc_string_create("ATM_REG_AUTHTIMEOUTERROR");
        if (!object)
          object = xpc_null_create();
        goto LABEL_50;
      }
    }
    else
    {
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    object = xpc_string_create("Reg_LOST_CONNECTION");
    if (!object)
      object = xpc_null_create();
LABEL_50:
    __p = (void *)(v6 + 112);
    v51 = "result";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &object, &v60);
    xpc_release(v60);
    v60 = 0;
    xpc_release(object);
    object = 0;
    goto LABEL_51;
  }
  LODWORD(v49) = *(_DWORD *)(a2 + 80);
  ims::detail::to_string_impl<int,std::integral_constant<BOOL,false>>::operator()(&__p);
  if (v53 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  object = xpc_string_create(p_p);
  if (!object)
    object = xpc_null_create();
  v57 = v6 + 112;
  v58 = "result";
  xpc::dict::object_proxy::operator=((uint64_t)&v57, &object, &v60);
  xpc_release(v60);
  v60 = 0;
  xpc_release(object);
  object = 0;
  if (v53 < 0)
    operator delete(__p);
LABEL_51:
  if (*(char *)(v43 + 3231) < 0)
    v26 = *(_QWORD *)(v43 + 3216);
  else
    v26 = *(unsigned __int8 *)(v43 + 3231);
  v27 = (const char *)(v43 + 3136);
  if (v26)
  {
    if (*(char *)(v43 + 3255) < 0 ? *(_QWORD *)(v43 + 3240) : *(unsigned __int8 *)(v43 + 3255))
      v27 = (const char *)(v43 + 3208);
  }
  if (v27[23] < 0)
    v27 = *(const char **)v27;
  v48 = xpc_string_create(v27);
  if (!v48)
    v48 = xpc_null_create();
  __p = (void *)(v6 + 112);
  v51 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v48, &v49);
  xpc_release(v49);
  v49 = 0;
  xpc_release(v48);
  v29 = (ImsResult *)(a2 + 64);
  v48 = 0;
  ImsResult::description(v29, &__p);
  if (v53 < 0)
  {
    v30 = v51;
    operator delete(__p);
    if (!v30)
      goto LABEL_75;
  }
  else if (!v53)
  {
    goto LABEL_75;
  }
  ImsResult::description(v29, &__p);
  if (v53 >= 0)
    v31 = (const char *)&__p;
  else
    v31 = (const char *)__p;
  v46 = xpc_string_create(v31);
  if (!v46)
    v46 = xpc_null_create();
  v57 = v6 + 112;
  v58 = "q_reason";
  xpc::dict::object_proxy::operator=((uint64_t)&v57, &v46, &v47);
  xpc_release(v47);
  v47 = 0;
  xpc_release(v46);
  v46 = 0;
  if (v53 < 0)
    operator delete(__p);
LABEL_75:
  v32 = *v12;
  if (*v12)
    xpc_retain(*v12);
  else
    v32 = xpc_null_create();
  if (v44)
  {
    v33 = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    do
      v35 = __ldaxr(v33);
    while (__stlxr(v35 - 1, v33));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  xpc_release(v32);
  if (v44)
  {
    v36 = (unint64_t *)&v44->__shared_owners_;
    do
      v37 = __ldxr(v36);
    while (__stxr(v37 + 1, v36));
    do
      v38 = __ldaxr(v36);
    while (__stlxr(v38 - 1, v36));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  else
  {
  }
  if (v44)
  {
    v39 = (unint64_t *)&v44->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  result = *(double *)&v45;
  *a3 = v45;
  return result;
}

void sub_1BEFBC960(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 88);
  xpc_release(*(xpc_object_t *)(v11 - 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `anonymous namespace'::RegistrationResultEventImpl::populateLazuliFields(uint64_t a1, char a2)
{
  _QWORD v3[2];
  xpc_object_t v4;
  xpc_object_t object;

  v4 = xpc_BOOL_create(a2 != 0);
  if (!v4)
    v4 = xpc_null_create();
  v3[0] = a1 + 112;
  v3[1] = "is_RCS";
  xpc::dict::object_proxy::operator=((uint64_t)v3, &v4, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v4);
}

uint64_t ims::detail::to_string_impl<int,std::integral_constant<BOOL,false>>::operator()@<X0>(_QWORD *a1@<X8>)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v3, 1);
  std::ostream::operator<<();
  BYTE1(v4) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v4 + 1) + 8, a1);
  *(_QWORD *)&v3 = &off_1E78D7A10;
  if ((_BYTE)v4)
  {
    result = *((_QWORD *)&v3 + 1);
    if (*((_QWORD *)&v3 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 8))(*((_QWORD *)&v3 + 1));
  }
  return result;
}

void sub_1BEFBCAAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_emplace<`anonymous namespace'::RegistrationResultEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDBC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::RegistrationResultEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDBC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::RegistrationResultEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::RegistrationResultEventImpl::~RegistrationResultEventImpl(_anonymous_namespace_::RegistrationResultEventImpl *this)
{
  *(_QWORD *)this = off_1E78CDC18;
  *((_QWORD *)this + 1) = &unk_1E78CDC50;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_1E78CDC18;
  *((_QWORD *)this + 1) = &unk_1E78CDC50;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x1C3B87100);
}

xpc_object_t `anonymous namespace'::RegistrationResultEventImpl::getDict@<X0>(_anonymous_namespace_::RegistrationResultEventImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  xpc_object_t result;

  v2 = (void *)*((_QWORD *)this + 14);
  *a2 = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

_QWORD *`anonymous namespace'::RegistrationResultEventImpl::getName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "atm_Registration_Result");
}

void `non-virtual thunk to'`anonymous namespace'::RegistrationResultEventImpl::~RegistrationResultEventImpl(_anonymous_namespace_::RegistrationResultEventImpl *this)
{
  *((_QWORD *)this - 1) = off_1E78CDC18;
  *(_QWORD *)this = &unk_1E78CDC50;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *((_QWORD *)this - 1) = off_1E78CDC18;
  *(_QWORD *)this = &unk_1E78CDC50;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

uint64_t base64Encode(uint64_t a1, uint64_t a2, std::string *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  const std::string::value_type *v11;
  uint64_t v12;

  v6 = (void *)MEMORY[0x1C3B876AC]();
  objc_msgSend(MEMORY[0x1E0C99D50], "dataWithBytes:length:", a1, a2);
  v7 = (void *)objc_claimAutoreleasedReturnValue();
  v8 = v7;
  if (v7)
  {
    objc_msgSend(v7, "base64Encoding");
    v9 = (void *)objc_claimAutoreleasedReturnValue();
    v10 = v9;
    if (v9
      && (v11 = (const std::string::value_type *)objc_msgSend(objc_retainAutorelease(v9), "cStringUsingEncoding:", 1)) != 0)
    {
      std::string::__assign_external(a3, v11);
      v12 = 1;
    }
    else
    {
      v12 = 0;
    }

  }
  else
  {
    v12 = 0;
  }

  objc_autoreleasePoolPop(v6);
  return v12;
}

void sub_1BEFBCE18(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

BOOL base64Decode(uint64_t *a1, unint64_t *a2)
{
  void *v4;
  uint64_t *v5;
  void *v6;
  void *v7;
  void *v8;
  _BOOL8 v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;

  v4 = (void *)MEMORY[0x1C3B876AC]();
  if (*((char *)a1 + 23) >= 0)
    v5 = a1;
  else
    v5 = (uint64_t *)*a1;
  objc_msgSend(MEMORY[0x1E0CB3940], "stringWithUTF8String:", v5);
  v6 = (void *)objc_claimAutoreleasedReturnValue();
  if (v6)
  {
    v7 = (void *)objc_msgSend(objc_alloc(MEMORY[0x1E0C99D50]), "initWithBase64Encoding:", v6);
    v8 = v7;
    v9 = v7 != 0;
    if (v7)
    {
      v10 = objc_msgSend(v7, "length");
      v11 = *a2;
      v12 = a2[1];
      v13 = v12 - *a2;
      if (v10 <= v13)
      {
        if (v10 < v13)
        {
          v12 = v11 + v10;
          a2[1] = v11 + v10;
        }
      }
      else
      {
        std::vector<unsigned char>::__append(a2, v10 - v13);
        v11 = *a2;
        v12 = a2[1];
      }
      objc_msgSend(v8, "getBytes:length:", v11, v12 - v11);
    }

  }
  else
  {
    v9 = 0;
  }

  objc_autoreleasePoolPop(v4);
  return v9;
}

void sub_1BEFBCF14(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaSendRecvAttribute(uint64_t a1)
{
  SDPMedia::setDirection(a1, 1);
  return 1;
}

uint64_t SDPParser::parseMediaSendOnlyAttribute(uint64_t a1)
{
  SDPMedia::setDirection(a1, 3);
  return 1;
}

uint64_t SDPParser::parseMediaRecvOnlyAttribute(uint64_t a1)
{
  SDPMedia::setDirection(a1, 2);
  return 1;
}

uint64_t SDPParser::parseMediaInactiveAttribute(uint64_t a1)
{
  SDPMedia::setDirection(a1, 4);
  return 1;
}

uint64_t SDPParser::parseMediaPacketTimeAttribute(uint64_t a1, const std::string *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  _QWORD v8[4];
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[174];
  __int16 v18;

  v18 = 0;
  memset(v17, 0, 160);
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v10, a2, 8);
  MEMORY[0x1C3B86E90](&v10, &v18);
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "ptime");
    SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)v8, (uint64_t)v6, v18, 0);
    v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>(a1 + 136, 0, 0, (const SDPPacketizationTimeAttribute *)v8);
    v3[1] = a1 + 136;
    v4 = *(_QWORD *)(a1 + 136);
    *v3 = v4;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)(a1 + 136) = v3;
    ++*(_QWORD *)(a1 + 152);
    v8[0] = off_1E78ED0A8;
    if (v9 < 0)
      operator delete((void *)v8[2]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
  *(_QWORD *)&v10 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v10 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v11 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v16) < 0)
    operator delete((void *)v15);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C](&v17[8]);
  return 1;
}

void sub_1BEFBD108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::istringstream::~istringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void SDPPacketizationTimeAttribute::~SDPPacketizationTimeAttribute(void **this)
{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPParser::parseMediaMaxPacketTimeAttribute(uint64_t a1, const std::string *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6[2];
  char v7;
  _QWORD v8[4];
  char v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  _BYTE v17[174];
  __int16 v18;

  v18 = 0;
  memset(v17, 0, 160);
  v15 = 0u;
  v16 = 0u;
  v14 = 0u;
  v12 = 0u;
  v13 = 0u;
  v10 = 0u;
  v11 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v10, a2, 8);
  MEMORY[0x1C3B86E90](&v10, &v18);
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "maxptime");
    SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((uint64_t)v8, (uint64_t)v6, v18, 1);
    v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>(a1 + 136, 0, 0, (const SDPPacketizationTimeAttribute *)v8);
    v3[1] = a1 + 136;
    v4 = *(_QWORD *)(a1 + 136);
    *v3 = v4;
    *(_QWORD *)(v4 + 8) = v3;
    *(_QWORD *)(a1 + 136) = v3;
    ++*(_QWORD *)(a1 + 152);
    v8[0] = off_1E78ED0A8;
    if (v9 < 0)
      operator delete((void *)v8[2]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
  *(_QWORD *)&v10 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v10 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v11 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v16) < 0)
    operator delete((void *)v15);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C](&v17[8]);
  return 1;
}

void sub_1BEFBD300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a23 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  std::istringstream::~istringstream((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaCandidateAttribute(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  std::string::size_type size;
  __int16 v5;
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  std::string v12;
  void *v13[2];
  char v14;
  void *__p[2];
  char v16;
  __int16 v17;
  std::string v18;
  int v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  void *v29[2];
  __int128 v30;
  _OWORD v31[10];

  memset(v31, 0, sizeof(v31));
  *(_OWORD *)v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  v25 = 0u;
  v26 = 0u;
  v24 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v24, a2, 8);
  v23 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v19 = 0;
  memset(&v18, 0, sizeof(v18));
  v17 = 0;
  MEMORY[0x1C3B86E90](&v24, (char *)&v23 + 2);
  if (HIWORD(v23))
  {
    MEMORY[0x1C3B86E90](&v24, &v23);
    if ((_WORD)v23)
    {
      std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v24, (uint64_t)&v20);
      v3 = HIBYTE(v22);
      if (v22 < 0)
        v3 = v21;
      if (v3)
      {
        MEMORY[0x1C3B86E84](&v24, &v19);
        if (v19)
        {
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v24, (uint64_t)&v18);
          size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
          if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v18.__r_.__value_.__l.__size_;
          if (size)
          {
            MEMORY[0x1C3B86E90](&v24, &v17);
            v5 = v17;
            if (v17)
            {
              v6 = v23;
              if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
              {
                std::string::__init_copy_ctor_external(&v12, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
                v5 = v17;
              }
              else
              {
                v12 = v18;
              }
              SDPMediaCandidate::SDPMediaCandidate((uint64_t)v13, v6, &v12, v5);
              v10 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCandidate>(a1 + 136, 0, 0, (const SDPMediaCandidate *)v13);
              v10[1] = a1 + 136;
              v11 = *(_QWORD *)(a1 + 136);
              *v10 = v11;
              *(_QWORD *)(v11 + 8) = v10;
              *(_QWORD *)(a1 + 136) = v10;
              ++*(_QWORD *)(a1 + 152);
              SDPMediaCandidate::~SDPMediaCandidate(v13);
              if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v12.__r_.__value_.__l.__data_);
              v8 = 1;
              goto LABEL_24;
            }
            std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no port", 38);
            *(_BYTE *)(v7 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no ipAddress", 43);
            *(_BYTE *)(v7 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no priority", 42);
          *(_BYTE *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no transportType", 47);
        *(_BYTE *)(v7 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no componentId", 45);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SDPMediaCandidate parse error, no foundation", 44);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v7 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  v8 = 0;
LABEL_24:
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  if (SHIBYTE(v22) < 0)
    operator delete(v20);
  *(_QWORD *)&v24 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v24 + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v25 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v30) < 0)
    operator delete(v29[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v31 + 8);
  return v8;
}

void sub_1BEFBD8B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,char a50)
{
  if (a41 < 0)
    operator delete(__p);
  if (a48 < 0)
    operator delete(a43);
  std::istringstream::~istringstream((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaCryptoAttribute(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v13;
  size_t size;
  std::string *p_p;
  _BYTE *v16;
  std::string::size_type v17;
  std::string::size_type v18;
  int v19;
  std::string *v20;
  int data;
  int v22;
  uint64_t v24;
  uint64_t v25;
  size_t v27;
  std::string *v28;
  _BYTE *v29;
  std::string::size_type v30;
  std::string::size_type v31;
  char v32;
  char v33;
  char v34;
  uint64_t v35;
  void *v36;
  unint64_t v37;
  unint64_t v38;
  int v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *v54;
  std::string v55;
  void *v56[2];
  char v57;
  void *v58[2];
  char v59;
  void *v60;
  uint64_t v61;
  uint64_t v62;
  std::string v63;
  std::string v64;
  std::string __p;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  void *v69;
  _BYTE *v70;
  uint64_t v71;
  __int16 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  _BYTE v80[176];

  memset(v80, 0, 160);
  v78 = 0u;
  v79 = 0u;
  v76 = 0u;
  v77 = 0u;
  v74 = 0u;
  v75 = 0u;
  v73 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v73, a2, 8);
  v72 = 1;
  v69 = 0;
  v70 = 0;
  v71 = 0;
  std::vector<unsigned char>::vector(&v69, 0x1EuLL);
  MEMORY[0x1C3B86E90](&v73, &v72);
  if (v72)
  {
    v66 = 0;
    v67 = 0;
    v68 = 0;
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&v66);
    v3 = HIBYTE(v68);
    if (v68 < 0)
      v3 = v67;
    if (v3 == 23)
    {
      v7 = (uint64_t *)&v66;
      if (v68 < 0)
        v7 = (uint64_t *)v66;
      v8 = *v7;
      v9 = v7[1];
      v10 = *(uint64_t *)((char *)v7 + 15);
      v13 = v8 == 0x315F4D435F534541 && v9 == 0x5F43414D485F3832 && v10 == 0x30385F314148535FLL;
    }
    else
    {
      if (!v3)
      {
        std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v4 = ImsLogger::error(ims::_logger, (uint64_t)&v55, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SDPMediaCrypto parse error, no crypto-suite", 43);
        *(_BYTE *)(v4 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v4 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v5 = 0;
LABEL_61:
        if (SHIBYTE(v68) < 0)
          operator delete(v66);
        goto LABEL_63;
      }
      v13 = 0;
    }
    memset(&__p, 0, sizeof(__p));
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    if (!size)
    {
      std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
      std::string::basic_string[abi:ne180100]<0>(&v64, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::error(ims::_logger, (uint64_t)&v55, (uint64_t)&v64);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"SDPMediaCrypto parse error, no key-params", 41);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v5 = 0;
      goto LABEL_59;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    v16 = memchr(p_p, 58, size);
    if (v16)
      v17 = v16 - (_BYTE *)p_p;
    else
      v17 = -1;
    std::string::basic_string(&v55, &__p, 0, v17, (std::allocator<char> *)&v63);
    v64 = v55;
    v18 = HIBYTE(v55.__r_.__value_.__r.__words[2]);
    v19 = SHIBYTE(v55.__r_.__value_.__r.__words[2]);
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v18 = v64.__r_.__value_.__l.__size_;
    if (v18 != 6)
      goto LABEL_47;
    v20 = (std::string *)v64.__r_.__value_.__r.__words[0];
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v20 = &v64;
    data = (int)v20->__r_.__value_.__l.__data_;
    v22 = WORD2(v20->__r_.__value_.__r.__words[0]);
    if (data != 1768713833 || v22 != 25966)
    {
LABEL_47:
      std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
      std::string::basic_string[abi:ne180100]<0>(&v63, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::error(ims::_logger, (uint64_t)&v55, (uint64_t)&v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"SDPMediaCrypto parse error, unsupported key-param", 49);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v55.__r_.__value_.__l.__data_);
      v5 = 0;
LABEL_52:
      if (v19 < 0)
        operator delete(v64.__r_.__value_.__l.__data_);
LABEL_59:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      goto LABEL_61;
    }
    memset(&v63, 0, sizeof(v63));
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v27 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v27 = __p.__r_.__value_.__l.__size_;
    if (v27
      && ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? (v28 = &__p)
        : (v28 = (std::string *)__p.__r_.__value_.__r.__words[0]),
          (v29 = memchr(v28, 124, v27)) != 0))
    {
      v30 = v17 + 1;
      if (v29 - (_BYTE *)v28 != -1)
      {
        v31 = v29 - (_BYTE *)v28 - v30;
LABEL_80:
        std::string::basic_string(&v55, &__p, v30, v31, (std::allocator<char> *)&v60);
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        v63 = v55;
        if (base64Decode((uint64_t *)&v63, (unint64_t *)&v69) && v70 - (_BYTE *)v69 == 30)
        {
          v60 = 0;
          v61 = 0;
          v62 = 0;
          std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&v60);
          v32 = 1;
          v33 = 1;
          v34 = 1;
          while (1)
          {
            v35 = HIBYTE(v62);
            if (v62 < 0)
              v35 = v61;
            if (v35 <= 16)
            {
              if (v35 == 16)
              {
                v40 = (uint64_t *)v60;
                if (v62 >= 0)
                  v40 = (uint64_t *)&v60;
                v42 = *v40;
                v41 = v40[1];
                v44 = v42 != 0x505952434E454E55 || v41 != 0x505452535F444554;
                v32 &= v44;
              }
              else if (!v35)
              {
                if ((*(_DWORD *)(a1 + 32) | 2) == 6)
                {
                  SDPMediaCrypto::SDPMediaCrypto((uint64_t)&v55, v72, (uint64_t)&v69, v13, v32 & 1, v33 & 1, v34 & 1);
                  std::list<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::emplace_back<SDPMediaCrypto>((uint64_t *)(a1 + 136), (const SDPMediaCrypto *)&v55);
                  SDPMediaCrypto::~SDPMediaCrypto((SDPMediaCrypto *)&v55);
                  v5 = 1;
                }
                else
                {
                  std::string::basic_string[abi:ne180100]<0>(&v55, "sdp.parse");
                  std::string::basic_string[abi:ne180100]<0>(v58, "");
                  v53 = ims::error((uint64_t)&v55, (uint64_t)v58);
                  v54 = (_BYTE *)ImsOutStream::operator<<(v53, "Invalid protocol type used for SRTP: ");
                  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v54 + 32))(v54, v56);
                  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  v54[17] = 0;
                  if (v57 < 0)
                    operator delete(v56[0]);
                  if (v59 < 0)
                    operator delete(v58[0]);
                  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v55.__r_.__value_.__l.__data_);
                  v5 = 0;
                }
                if (SHIBYTE(v62) < 0)
                  operator delete(v60);
                goto LABEL_133;
              }
            }
            else if (v35 == 17)
            {
              v45 = (uint64_t *)v60;
              if (v62 >= 0)
                v45 = (uint64_t *)&v60;
              v46 = *v45;
              v47 = v45[1];
              v48 = *((unsigned __int8 *)v45 + 16);
              v51 = v46 != 0x505952434E454E55 || v47 != 0x435452535F444554 || v48 != 80;
              v33 &= v51;
            }
            else if (v35 == 20)
            {
              if (v62 >= 0)
                v36 = &v60;
              else
                v36 = v60;
              v37 = bswap64(*(_QWORD *)v36);
              v38 = 0x554E41555448454ELL;
              if (v37 == 0x554E41555448454ELL
                && (v37 = bswap64(*((_QWORD *)v36 + 1)), v38 = 0x544943415445445FLL, v37 == 0x544943415445445FLL)
                && (v37 = bswap32(*((_DWORD *)v36 + 4)), v38 = 1397904464, v37 == 1397904464))
              {
                v39 = 0;
              }
              else if (v37 < v38)
              {
                v39 = -1;
              }
              else
              {
                v39 = 1;
              }
              v34 &= v39 != 0;
            }
            if (SHIBYTE(v62) < 0)
            {
              *(_BYTE *)v60 = 0;
              v61 = 0;
            }
            else
            {
              LOBYTE(v60) = 0;
              HIBYTE(v62) = 0;
            }
            std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v73, (uint64_t)&v60);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
        std::string::basic_string[abi:ne180100]<0>(&v60, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v52 = ImsLogger::error(ims::_logger, (uint64_t)&v55, (uint64_t)&v60);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v52 + 8), (uint64_t)"SDPMediaCrypto parse error, invalid key and salt", 48);
        *(_BYTE *)(v52 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v52 + 64))(v52, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v52 + 17) = 0;
        if (SHIBYTE(v62) < 0)
          operator delete(v60);
        if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v55.__r_.__value_.__l.__data_);
        v5 = 0;
LABEL_133:
        if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v63.__r_.__value_.__l.__data_);
        goto LABEL_52;
      }
    }
    else
    {
      v30 = v17 + 1;
    }
    v31 = -1;
    goto LABEL_80;
  }
  std::string::basic_string[abi:ne180100]<0>(&v55, "sdp");
  std::string::basic_string[abi:ne180100]<0>(&v66, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::error(ims::_logger, (uint64_t)&v55, (uint64_t)&v66);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"SDPMediaCrypto parse error, no tag", 34);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(v68) < 0)
    operator delete(v66);
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v55.__r_.__value_.__l.__data_);
  v5 = 0;
LABEL_63:
  if (v69)
  {
    v70 = v69;
    operator delete(v69);
  }
  *(_QWORD *)&v73 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v73 + *(_QWORD *)(v73 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v74 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v79) < 0)
    operator delete((void *)v78);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C](&v80[8]);
  return v5;
}

void sub_1BEFBE304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, int a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61,void *a62,uint64_t a63)
{
  char a66;

  if (a32 < 0)
    operator delete(__p);
  if (a16 < 0)
    operator delete(a11);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (a10 < 0)
    operator delete(a46);
  if (a55 < 0)
    operator delete(a50);
  if (a61 < 0)
    operator delete(a56);
  if (a62)
    operator delete(a62);
  std::istringstream::~istringstream((uint64_t)&a66);
  _Unwind_Resume(a1);
}

_QWORD *std::list<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::emplace_back<SDPMediaCrypto>(uint64_t *a1, const SDPMediaCrypto *a2)
{
  _QWORD *result;
  uint64_t v4;

  result = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCrypto>((uint64_t)a1, 0, 0, a2);
  v4 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v4 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

uint64_t SDPParser::parseMediaEndToAccessEdgeProtection(uint64_t a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  std::string v6;
  _QWORD v7[4];
  char v8;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v6, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v6 = *(std::string *)a2;
  SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection((uint64_t)v7, (uint64_t **)&v6);
  v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaEndToAccessEdgeProtection const&>(a1 + 136, 0, 0, (const SDPMediaEndToAccessEdgeProtection *)v7);
  v3[1] = a1 + 136;
  v4 = *(_QWORD *)(a1 + 136);
  *v3 = v4;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(a1 + 136) = v3;
  ++*(_QWORD *)(a1 + 152);
  v7[0] = off_1E78ED0A8;
  if (v8 < 0)
    operator delete((void *)v7[2]);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEFBE628(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

void SDPMediaEndToAccessEdgeProtection::~SDPMediaEndToAccessEdgeProtection(void **this)
{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPParser::parseMediaPathAttribute(uint64_t a1, std::string *a2)
{
  _QWORD *v3;
  uint64_t v4;
  void *v6[12];
  void (**v7)(LazuliRouteSet *__hidden);
  __int128 v8;
  __int128 v9;
  __int128 v10;

  v7 = &off_1E78EF3C0;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  LazuliRouteSet::fromString((LazuliRouteSet *)&v7, a2);
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)v6, (const LazuliRouteSet *)&v7);
  v3 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaPath>(a1 + 136, 0, 0, (const SDPMediaPath *)v6);
  v3[1] = a1 + 136;
  v4 = *(_QWORD *)(a1 + 136);
  *v3 = v4;
  *(_QWORD *)(v4 + 8) = v3;
  *(_QWORD *)(a1 + 136) = v3;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaPath::~SDPMediaPath(v6);
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&v7);
  return 1;
}

void sub_1BEFBE740(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  SDPMediaPath::~SDPMediaPath((void **)va);
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)(v2 - 72));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaAcceptTypesAttribute(uint64_t a1, const std::string *a2)
{
  std::string::value_type *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v10[8];
  std::string::value_type *__s[2];
  int64_t v12;
  __int128 *v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  _OWORD v23[10];

  memset(v23, 0, sizeof(v23));
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v16, a2, 8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  __s[0] = 0;
  __s[1] = 0;
  v12 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  while (1)
  {
    v3 = (std::string::value_type *)HIBYTE(v12);
    if (v12 < 0)
      v3 = __s[1];
    if (!v3)
      break;
    v4 = v14;
    if ((unint64_t)v14 >= v15)
    {
      v6 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v13, (__int128 *)__s);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(v14, __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        v5 = *(_OWORD *)__s;
        v14->__r_.__value_.__r.__words[2] = v12;
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      v6 = v4 + 1;
    }
    v14 = v6;
    if (SHIBYTE(v12) < 0)
    {
      *__s[0] = 0;
      __s[1] = 0;
    }
    else
    {
      LOBYTE(__s[0]) = 0;
      HIBYTE(v12) = 0;
    }
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  }
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((uint64_t)v10, &v13);
  v7 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptTypes>(a1 + 136, 0, 0, (const SDPMediaAcceptTypes *)v10);
  v7[1] = a1 + 136;
  v8 = *(_QWORD *)(a1 + 136);
  *v7 = v8;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(a1 + 136) = v7;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes(v10);
  if (SHIBYTE(v12) < 0)
    operator delete(__s[0]);
  v10[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  *(_QWORD *)&v16 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v16 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v17 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v23 + 8);
  return 1;
}

void sub_1BEFBE944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  SDPMediaAcceptTypes::~SDPMediaAcceptTypes((void **)&a9);
  if (a22 < 0)
    operator delete(__p);
  a9 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::istringstream::~istringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaAcceptWrappedTypesAttribute(uint64_t a1, const std::string *a2)
{
  std::string::value_type *v3;
  std::string *v4;
  __int128 v5;
  std::string *v6;
  _QWORD *v7;
  uint64_t v8;
  void *v10[8];
  std::string::value_type *__s[2];
  int64_t v12;
  __int128 *v13;
  std::string *v14;
  unint64_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  __int128 v22;
  _OWORD v23[10];

  memset(v23, 0, sizeof(v23));
  *(_OWORD *)__p = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  v17 = 0u;
  v18 = 0u;
  v16 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v16, a2, 8);
  v13 = 0;
  v14 = 0;
  v15 = 0;
  __s[0] = 0;
  __s[1] = 0;
  v12 = 0;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  while (1)
  {
    v3 = (std::string::value_type *)HIBYTE(v12);
    if (v12 < 0)
      v3 = __s[1];
    if (!v3)
      break;
    v4 = v14;
    if ((unint64_t)v14 >= v15)
    {
      v6 = (std::string *)std::vector<std::string>::__emplace_back_slow_path<std::string&>((uint64_t *)&v13, (__int128 *)__s);
    }
    else
    {
      if (SHIBYTE(v12) < 0)
      {
        std::string::__init_copy_ctor_external(v14, __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        v5 = *(_OWORD *)__s;
        v14->__r_.__value_.__r.__words[2] = v12;
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
      }
      v6 = v4 + 1;
    }
    v14 = v6;
    if (SHIBYTE(v12) < 0)
    {
      *__s[0] = 0;
      __s[1] = 0;
    }
    else
    {
      LOBYTE(__s[0]) = 0;
      HIBYTE(v12) = 0;
    }
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v16, (uint64_t)__s);
  }
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((uint64_t)v10, &v13);
  v7 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptWrappedTypes>(a1 + 136, 0, 0, (const SDPMediaAcceptWrappedTypes *)v10);
  v7[1] = a1 + 136;
  v8 = *(_QWORD *)(a1 + 136);
  *v7 = v8;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(a1 + 136) = v7;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes(v10);
  if (SHIBYTE(v12) < 0)
    operator delete(__s[0]);
  v10[0] = &v13;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v10);
  *(_QWORD *)&v16 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v16 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v17 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v22) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v23 + 8);
  return 1;
}

void sub_1BEFBEB78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  SDPMediaAcceptWrappedTypes::~SDPMediaAcceptWrappedTypes((void **)&a9);
  if (a22 < 0)
    operator delete(__p);
  a9 = &a23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a9);
  std::istringstream::~istringstream((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaSetupAttribute(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  void *v7[8];

  v3 = a1 + 136;
  SDPMediaSetup::SDPMediaSetup((uint64_t)v7, a2);
  v4 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaSetup>(v3, 0, 0, (uint64_t)v7);
  v4[1] = v3;
  v5 = *(_QWORD *)(a1 + 136);
  *v4 = v5;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(a1 + 136) = v4;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaSetup::~SDPMediaSetup(v7);
  return 1;
}

void sub_1BEFBEC40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SDPMediaSetup::~SDPMediaSetup(&a9);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaFingerprintAttribute(uint64_t a1, const std::string *a2)
{
  std::string::size_type size;
  std::string::size_type v4;
  uint64_t v5;
  std::string *p_p;
  _QWORD *v7;
  uint64_t v8;
  void *v10[11];
  std::string __str;
  __int128 __p;
  uint64_t v13;
  std::string v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *v20[2];
  __int128 v21;
  _OWORD v22[10];

  memset(v22, 0, sizeof(v22));
  *(_OWORD *)v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  v16 = 0u;
  v17 = 0u;
  v15 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v15, a2, 8);
  memset(&v14, 0, sizeof(v14));
  std::string::basic_string[abi:ne180100]<0>(&v14, "");
  __p = 0uLL;
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  memset(&__str, 0, sizeof(__str));
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v15, (uint64_t)&__str);
  while (1)
  {
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __str.__r_.__value_.__l.__size_;
    if (!size)
      break;
    v4 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v4 = v14.__r_.__value_.__l.__size_;
    if (v4)
    {
      v5 = HIBYTE(v13);
      if (v13 < 0)
        v5 = *((_QWORD *)&__p + 1);
      if (v5)
        break;
      p_p = (std::string *)&__p;
    }
    else
    {
      p_p = &v14;
    }
    std::string::operator=(p_p, &__str);
    std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v15, (uint64_t)&__str);
  }
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)v10, (__int128 *)&v14, &__p);
  v7 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaFingerprint>(a1 + 136, 0, 0, (uint64_t)v10);
  v7[1] = a1 + 136;
  v8 = *(_QWORD *)(a1 + 136);
  *v7 = v8;
  *(_QWORD *)(v8 + 8) = v7;
  *(_QWORD *)(a1 + 136) = v7;
  ++*(_QWORD *)(a1 + 152);
  SDPMediaFingerprint::~SDPMediaFingerprint(v10);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  *(_QWORD *)&v15 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v15 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v16 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v21) < 0)
    operator delete(v20[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v22 + 8);
  return 1;
}

void sub_1BEFBEE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  SDPMediaFingerprint::~SDPMediaFingerprint((void **)&a9);
  if (a25 < 0)
    operator delete(__p);
  if (a31 < 0)
    operator delete(a26);
  if (a37 < 0)
    operator delete(a32);
  std::istringstream::~istringstream((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaRTPMapAttribute(_QWORD *a1, const std::string *a2)
{
  _QWORD *v3;
  uint64_t v4;
  size_t size;
  std::string *p_str;
  _BYTE *v7;
  std::string::size_type v8;
  size_t v9;
  std::string *v10;
  _BYTE *v11;
  std::string::size_type v12;
  __int16 v13;
  void *v14;
  __int16 v15;
  uint64_t v16;
  __int16 v17;
  uint64_t v18;
  __int16 v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  void *v23;
  uint64_t v24;
  std::string::size_type v25;
  uint64_t **v26;
  uint64_t *v27;
  std::string *v28;
  uint64_t (*v29)(uint64_t, std::string *, std::string *);
  std::string v31;
  std::string v32;
  std::string v33;
  std::string v34;
  __int16 v35;
  std::string v36;
  int v37;
  std::string __p;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  void *v44[2];
  __int128 v45;
  _OWORD v46[10];
  std::string __str;
  std::string v48;
  unsigned __int16 v49;
  uint64_t v50;

  v49 = 255;
  memset(&v48, 0, sizeof(v48));
  memset(&__str, 0, sizeof(__str));
  memset(v46, 0, sizeof(v46));
  *(_OWORD *)v44 = 0u;
  v45 = 0u;
  v42 = 0u;
  v43 = 0u;
  v40 = 0u;
  v41 = 0u;
  v39 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v39, a2, 8);
  v3 = (_QWORD *)MEMORY[0x1C3B86E90](&v39, &v49);
  if ((*((_BYTE *)v3 + *(_QWORD *)(*v3 - 24) + 32) & 5) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v34, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Payload type missing from RTPMap", 32);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
  }
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v39, (uint64_t)&__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  else
    size = __str.__r_.__value_.__l.__size_;
  if (size)
  {
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v7 = memchr(p_str, 47, size);
    if (v7)
      v8 = v7 - (_BYTE *)p_str;
    else
      v8 = -1;
  }
  else
  {
    v8 = -1;
  }
  std::string::basic_string(&v34, &__str, 0, v8, (std::allocator<char> *)&__p);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  v48 = v34;
  if (v8 == -1)
  {
    v13 = 0;
LABEL_40:
    v15 = 1;
    goto LABEL_41;
  }
  std::string::basic_string(&v34, &__str, v8 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __str = v34;
  if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v9 = HIBYTE(v34.__r_.__value_.__r.__words[2]);
  else
    v9 = __str.__r_.__value_.__l.__size_;
  if (v9)
  {
    if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &__str;
    else
      v10 = (std::string *)__str.__r_.__value_.__r.__words[0];
    v11 = memchr(v10, 47, v9);
    if (v11)
      v12 = v11 - (_BYTE *)v10;
    else
      v12 = -1;
  }
  else
  {
    v12 = -1;
  }
  std::string::basic_string(&v34, &__str, 0, v12, (std::allocator<char> *)&__p);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    v14 = (void *)v34.__r_.__value_.__r.__words[0];
    v13 = atoi(v34.__r_.__value_.__l.__data_);
    operator delete(v14);
  }
  else
  {
    v13 = atoi((const char *)&v34);
  }
  if (v12 == -1)
    goto LABEL_40;
  std::string::basic_string(&v34, &__str, v12 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&__p);
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
  {
    v23 = (void *)v34.__r_.__value_.__r.__words[0];
    v15 = atoi(v34.__r_.__value_.__l.__data_);
    operator delete(v23);
  }
  else
  {
    v15 = atoi((const char *)&v34);
  }
LABEL_41:
  v16 = a1[6];
  if ((_QWORD *)v16 == a1 + 5)
  {
LABEL_45:
    std::string::basic_string[abi:ne180100]<0>(&v34, "sdp.parser");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::warn(ims::_logger, (uint64_t)&v34, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"RTP map attribute included for unexpected media format.", 55);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    v19 = v49;
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v31, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    else
      v31 = v48;
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v34, v19, (__int128 *)&v31, v13, v15);
    v20 = operator new(0x90uLL);
    *v20 = 0;
    v20[1] = 0;
    SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)(v20 + 2), (const SDPMediaRTPMap *)&v34);
    *((_DWORD *)v20 + 34) = 12;
    v21 = a1[17];
    *v20 = v21;
    v20[1] = a1 + 17;
    *(_QWORD *)(v21 + 8) = v20;
    a1[17] = v20;
    ++a1[19];
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    LOBYTE(v22) = 0;
  }
  else
  {
    v17 = v49;
    while (*(unsigned __int16 *)(v16 + 24) != v49)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if ((_QWORD *)v16 == a1 + 5)
        goto LABEL_45;
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v33, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
    else
      v33 = v48;
    v22 = &v34;
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v34, v17, (__int128 *)&v33, v13, v15);
    *(_BYTE *)(v16 + 40) = v34.__r_.__value_.__s.__data_[8];
    std::string::operator=((std::string *)(v16 + 48), (const std::string *)&v34.__r_.__value_.__r.__words[2]);
    *(_WORD *)(v16 + 72) = v35;
    std::string::operator=((std::string *)(v16 + 80), &v36);
    *(_DWORD *)(v16 + 104) = v37;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v34.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::find<std::string>((uint64_t)&v48) == &qword_1ED70CD68)
      goto LABEL_80;
    memset(&__p, 0, sizeof(__p));
    v24 = *(unsigned int *)(v16 + 232);
    if ((_DWORD)v24 == -1)
      std::__throw_bad_variant_access[abi:ne180100]();
    v34.__r_.__value_.__r.__words[0] = (std::string::size_type)&v50;
    ((void (*)(std::string *__return_ptr, std::string *, uint64_t))off_1E78CDD28[v24])(&__p, &v34, v16 + 112);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v25 = __p.__r_.__value_.__l.__size_;
    if (v25)
    {
      v50 = 0;
      v26 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaFormatParameterParsers, &v50, (uint64_t)&v48);
      v27 = *v26;
      if (!*v26)
      {
        v34.__r_.__value_.__r.__words[2] = 0;
        v27 = (uint64_t *)operator new(0x40uLL);
        v34.__r_.__value_.__l.__size_ = (std::string::size_type)&qword_1ED70CD68;
        v34.__r_.__value_.__s.__data_[16] = 0;
        v28 = (std::string *)(v27 + 4);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
        {
          std::string::__init_copy_ctor_external(v28, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
        }
        else
        {
          *(_OWORD *)&v28->__r_.__value_.__l.__data_ = *(_OWORD *)&v48.__r_.__value_.__l.__data_;
          v27[6] = v48.__r_.__value_.__r.__words[2];
        }
        v27[7] = 0;
        std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaFormatParameterParsers, v50, v26, v27);
      }
      v29 = (uint64_t (*)(uint64_t, std::string *, std::string *))v27[7];
      v22 = (std::string *)v49;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v32, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v32 = __p;
      LOBYTE(v22) = v29(v16 + 16, v22, &v32);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
      if (v25)
        goto LABEL_81;
      goto LABEL_80;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v25)
LABEL_80:
      LOBYTE(v22) = 1;
  }
LABEL_81:
  *(_QWORD *)&v39 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v39 + *(_QWORD *)(v39 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v40 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v45) < 0)
    operator delete(v44[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v46 + 8);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  return v22 & 1;
}

void sub_1BEFBF5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  void **v48;
  uint64_t v49;
  uint64_t v50;

  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v49, v48);
  if (a47 < 0)
    operator delete(__p);
  std::istringstream::~istringstream((uint64_t)&a48);
  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (*(char *)(v50 - 89) < 0)
    operator delete(*(void **)(v50 - 112));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaFormatParamsAttribute(_QWORD *a1, const std::string *a2)
{
  const std::locale::facet *v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  __int16 v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  __int16 v13;
  uint64_t **v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t, uint64_t, std::string *);
  uint64_t v18;
  std::string v20;
  std::string v21;
  void *v22[9];
  std::string v23;
  void *__p[2];
  __int128 v25;
  __int128 v26;
  std::string::value_type *__s[2];
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  void *v34[2];
  __int128 v35;
  _OWORD v36[10];
  std::string v37;
  unsigned __int16 v38;
  std::string v39[5];
  int v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v38 = 0;
  memset(&v37, 0, sizeof(v37));
  memset(v36, 0, sizeof(v36));
  *(_OWORD *)v34 = 0u;
  v35 = 0u;
  v32 = 0u;
  v33 = 0u;
  v30 = 0u;
  v31 = 0u;
  v29 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v29, a2, 8);
  MEMORY[0x1C3B86E90](&v29, &v38);
  std::ios_base::getloc((const std::ios_base *)((char *)&v29 + *(_QWORD *)(v29 - 24)));
  v3 = std::locale::use_facet((const std::locale *)v39, MEMORY[0x1E0DE4A90]);
  v4 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v3->__vftable[2].~facet_0)(v3, 10);
  std::locale::~locale((std::locale *)v39);
  std::getline[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v29, (uint64_t)&v37, v4);
  v5 = a1[6];
  if ((_QWORD *)v5 != a1 + 5)
  {
    while (*(unsigned __int16 *)(v5 + 24) != v38)
    {
      v5 = *(_QWORD *)(v5 + 8);
      if ((_QWORD *)v5 == a1 + 5)
        goto LABEL_4;
    }
    *(_OWORD *)__s = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    *(_OWORD *)__p = 0u;
    SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)__p, (const SDPMediaRTPMap *)(v5 + 32));
    v8 = v5 + 16;
    if (SBYTE7(v28) < 0)
    {
      if (!__s[1])
        goto LABEL_24;
      std::string::__init_copy_ctor_external(v39, __s[0], (std::string::size_type)__s[1]);
    }
    else
    {
      if (!BYTE7(v28))
        goto LABEL_24;
      *(_OWORD *)&v39[0].__r_.__value_.__l.__data_ = *(_OWORD *)__s;
      v39[0].__r_.__value_.__r.__words[2] = v28;
    }
    v12 = std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::find<std::string>((uint64_t)v39);
    if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39[0].__r_.__value_.__l.__data_);
    if (v12 != &qword_1ED70CD68)
    {
      if (SBYTE7(v28) < 0)
      {
        std::string::__init_copy_ctor_external(v39, __s[0], (std::string::size_type)__s[1]);
      }
      else
      {
        *(_OWORD *)&v39[0].__r_.__value_.__l.__data_ = *(_OWORD *)__s;
        v39[0].__r_.__value_.__r.__words[2] = v28;
      }
      v22[0] = 0;
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::__find_equal<std::string>((uint64_t)&SDPParser::mediaFormatParameterParsers, v22, (uint64_t)v39);
      v15 = *v14;
      if (!*v14)
      {
        v15 = (uint64_t *)operator new(0x40uLL);
        *((_OWORD *)v15 + 2) = *(_OWORD *)&v39[0].__r_.__value_.__l.__data_;
        v16 = v39[0].__r_.__value_.__r.__words[2];
        memset(v39, 0, 24);
        v15[6] = v16;
        v15[7] = 0;
        std::__tree<unsigned int>::__insert_node_at((uint64_t **)&SDPParser::mediaFormatParameterParsers, (uint64_t)v22[0], v14, v15);
      }
      v17 = (uint64_t (*)(uint64_t, uint64_t, std::string *))v15[7];
      v18 = v38;
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v23, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
      else
        v23 = v37;
      v11 = v17(v8, v18, &v23);
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v39[0].__r_.__value_.__l.__data_);
LABEL_40:
      SDPMediaRTPMap::~SDPMediaRTPMap(__p);
      goto LABEL_41;
    }
LABEL_24:
    v13 = v38;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v21, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
    else
      v21 = v37;
    SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatParams *)v22, v13, (__int128 *)&v21);
    SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)v39, (const SDPMediaFormatUnknownParams *)v22);
    v40 = 0;
    SDPMediaFormatInfo::setSDPMediaFormatParams(v8, (uint64_t)v39);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v39);
    SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams(v22);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    v11 = 1;
    goto LABEL_40;
  }
LABEL_4:
  std::string::basic_string[abi:ne180100]<0>(v39, "sdp.parser");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::warn(ims::_logger, (uint64_t)v39, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Format parameters attribute included for unexpected media format.", 65);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SBYTE7(v25) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v39[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39[0].__r_.__value_.__l.__data_);
  v7 = v38;
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v20, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
  else
    v20 = v37;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatParams *)v39, v7, (__int128 *)&v20);
  v9 = operator new(0x90uLL);
  *v9 = 0;
  v9[1] = 0;
  SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams((SDPMediaFormatUnknownParams *)(v9 + 2), (const SDPMediaFormatUnknownParams *)v39);
  *((_DWORD *)v9 + 34) = 6;
  v10 = a1[17];
  *v9 = v10;
  v9[1] = a1 + 17;
  *(_QWORD *)(v10 + 8) = v9;
  a1[17] = v9;
  ++a1[19];
  SDPMediaFormatUnknownParams::~SDPMediaFormatUnknownParams((void **)&v39[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  v11 = 0;
LABEL_41:
  *(_QWORD *)&v29 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v29 + *(_QWORD *)(v29 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v30 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v35) < 0)
    operator delete(v34[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v36 + 8);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  return v11;
}

void sub_1BEFBFBCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,char a51)
{
  uint64_t v51;

  SDPMediaRTPMap::~SDPMediaRTPMap(&a38);
  std::istringstream::~istringstream((uint64_t)&a51);
  if (*(char *)(v51 - 201) < 0)
    operator delete(*(void **)(v51 - 224));
  _Unwind_Resume(a1);
}

uint64_t SDPParser::parseMediaPreconditionCurrentAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v12 = 3;
  v11 = 0;
  v13 = 0;
  v10 = 0;
  v3 = SDPPrecondition::parse((unsigned int *)&v10, a2);
  LOBYTE(v13) = v3;
  if ((_DWORD)v3)
  {
    SDPPreconditionTable::processPrecondition((void **)(a1 + 160), &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SDPMedia attribute parsing error: invalid precondition", 54);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  return v3;
}

void sub_1BEFBFDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaPreconditionDesiredAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v12 = 3;
  v11 = 0;
  v13 = 0;
  v10 = 1;
  v3 = SDPPrecondition::parse((unsigned int *)&v10, a2);
  LOBYTE(v13) = v3;
  if ((_DWORD)v3)
  {
    SDPPreconditionTable::processPrecondition((void **)(a1 + 160), &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SDPMedia attribute parsing error: invalid precondition", 54);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  return v3;
}

void sub_1BEFBFF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPParser::parseMediaPreconditionConfirmedAttribute(uint64_t a1, std::string *a2)
{
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  v12 = 3;
  v11 = 0;
  v13 = 0;
  v10 = 2;
  v3 = SDPPrecondition::parse((unsigned int *)&v10, a2);
  LOBYTE(v13) = v3;
  if ((_DWORD)v3)
  {
    SDPPreconditionTable::processPrecondition((void **)(a1 + 160), &v10);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v8, "sdp.parse");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)v8, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SDPMedia attribute parsing error: invalid precondition", 54);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v7 < 0)
      operator delete(__p[0]);
    if (v9 < 0)
      operator delete(v8[0]);
  }
  return v3;
}

void sub_1BEFC007C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute(uint64_t a1, uint64_t a2, __int16 a3, char a4)
{
  std::string *v7;
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  v7 = (std::string *)(a1 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v7, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 32) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *(_QWORD *)a1 = off_1E78CDD68;
  *(_WORD *)(a1 + 40) = a3;
  *(_BYTE *)(a1 + 42) = a4;
  return a1;
}

void sub_1BEFC0174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPPacketizationTimeAttribute::value@<X0>(_QWORD *a1@<X8>)
{
  _OWORD v4[4];
  void *__p[2];
  __int128 v6;
  __int128 v7;
  _OWORD v8[9];
  uint64_t v9;

  v9 = 0;
  v7 = 0u;
  memset(v8, 0, sizeof(v8));
  *(_OWORD *)__p = 0u;
  v6 = 0u;
  memset(v4, 0, sizeof(v4));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v4);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v4 + 8, a1);
  *(_QWORD *)&v4[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v4 + *(_QWORD *)(*(_QWORD *)&v4[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v4[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v6) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v8);
}

void sub_1BEFC02BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaCrypto::SDPMediaCrypto(uint64_t a1, __int16 a2, uint64_t a3, char a4, char a5, char a6, char a7)
{
  void *__p[2];
  uint64_t v16;

  std::string::basic_string[abi:ne180100]<0>(__p, "crypto");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v16) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v16) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v16;
  }
  *(_QWORD *)a1 = &off_1E78E2A68;
  *(_WORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 48), *(const void **)a3, *(_QWORD *)(a3 + 8), *(_QWORD *)(a3 + 8) - *(_QWORD *)a3);
  *(_BYTE *)(a1 + 72) = a4;
  *(_BYTE *)(a1 + 73) = a5;
  *(_BYTE *)(a1 + 74) = a6;
  *(_BYTE *)(a1 + 75) = a7;
  return a1;
}

void sub_1BEFC03C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaEndToAccessEdgeProtection::SDPMediaEndToAccessEdgeProtection(uint64_t a1, uint64_t **a2)
{
  std::string *v4;
  uint64_t *v5;
  int v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  BOOL v11;
  void *__p[2];
  uint64_t v14;

  std::string::basic_string[abi:ne180100]<0>(__p, "3ge2ae");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  v4 = (std::string *)(a1 + 16);
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_QWORD *)a1 = off_1E78CDDC0;
  *(_BYTE *)(a1 + 40) = 1;
  v5 = (uint64_t *)*((unsigned __int8 *)a2 + 23);
  v6 = (char)v5;
  if ((char)v5 < 0)
    v5 = a2[1];
  if (v5 == (uint64_t *)9)
  {
    if (v6 >= 0)
      v7 = (uint64_t *)a2;
    else
      v7 = *a2;
    v8 = *v7;
    v9 = *((unsigned __int8 *)v7 + 8);
    v11 = v8 == 0x6574736575716572 && v9 == 100;
  }
  else
  {
    v11 = 0;
  }
  *(_BYTE *)(a1 + 40) = v11;
  return a1;
}

void sub_1BEFC04F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *SDPMediaEndToAccessEdgeProtection::value@<X0>(SDPMediaEndToAccessEdgeProtection *this@<X0>, _QWORD *a2@<X8>)
{
  char *v2;

  if (*((_BYTE *)this + 40))
    v2 = "requested";
  else
    v2 = "applied";
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<0ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<1ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<2ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<3ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<4ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

uint64_t std::__variant_detail::__visitation::__base::__dispatcher<5ul>::__dispatch[abi:ne180100]<std::__variant_detail::__visitation::__variant::__value_visitor<overloaded<SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_0,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_1,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_2,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_3,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_4,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_5,SDPParser::parseMediaRTPMapAttribute(SDPMedia &,std::string &)::$_6>> &&,std::__variant_detail::__base<(std::__variant_detail::_Trait)1,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams> const&>(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
}

SDPMediaFormatParams *SDPMediaFormatUnknownParams::SDPMediaFormatUnknownParams(SDPMediaFormatParams *a1, __int16 a2, __int128 *a3)
{
  std::string *v5;
  std::string *v6;
  __int128 v7;

  SDPMediaFormatParams::SDPMediaFormatParams(a1, a2);
  v5->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B8590;
  v6 = v5 + 2;
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    v6->__r_.__value_.__r.__words[2] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1BEFC0638(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  *(_QWORD *)v1 = off_1E78ED0A8;
  if (*(char *)(v1 + 39) < 0)
    operator delete(*(void **)(v1 + 16));
  _Unwind_Resume(exception_object);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPPacketizationTimeAttribute>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPPacketizationTimeAttribute *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute((SDPPacketizationTimeAttribute *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 13;
  return v7;
}

void sub_1BEFC06B0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPPacketizationTimeAttribute::SDPPacketizationTimeAttribute(SDPPacketizationTimeAttribute *this, const SDPPacketizationTimeAttribute *a2)
{
  std::string *v4;
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  v4 = (std::string *)((char *)this + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v4, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((_QWORD *)this + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  *(_QWORD *)this = off_1E78CDD68;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  *((_BYTE *)this + 42) = *((_BYTE *)a2 + 42);
}

void sub_1BEFC0784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCandidate>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaCandidate *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaCandidate::SDPMediaCandidate((SDPMediaCandidate *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 2;
  return v7;
}

void sub_1BEFC07F0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void SDPMediaCandidate::SDPMediaCandidate(SDPMediaCandidate *this, const SDPMediaCandidate *a2)
{
  std::string *v4;
  __int128 v5;
  std::string __p;

  if (*((char *)a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *((const std::string::value_type **)a2 + 2), *((_QWORD *)a2 + 3));
  else
    __p = *(std::string *)((char *)a2 + 16);
  *((_BYTE *)this + 8) = 1;
  *(_QWORD *)this = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)((char *)this + 16) = __p;
  }
  *(_QWORD *)this = &off_1E78BD508;
  *((_WORD *)this + 20) = *((_WORD *)a2 + 20);
  v4 = (std::string *)((char *)this + 48);
  if (*((char *)a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *((const std::string::value_type **)a2 + 6), *((_QWORD *)a2 + 7));
  }
  else
  {
    v5 = *((_OWORD *)a2 + 3);
    *((_QWORD *)this + 8) = *((_QWORD *)a2 + 8);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *((_WORD *)this + 36) = *((_WORD *)a2 + 36);
}

void sub_1BEFC08FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;

  *(_QWORD *)v14 = v16;
  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaCrypto>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaCrypto *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaCrypto::SDPMediaCrypto((SDPMediaCrypto *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 3;
  return v7;
}

void sub_1BEFC0980(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaPath>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaPath *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaPath::SDPMediaPath((SDPMediaPath *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 14;
  return v7;
}

void sub_1BEFC09E4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptTypes>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaAcceptTypes *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaAcceptTypes::SDPMediaAcceptTypes((SDPMediaAcceptTypes *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 15;
  return v7;
}

void sub_1BEFC0A48(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaAcceptWrappedTypes>(uint64_t a1, uint64_t a2, uint64_t a3, const SDPMediaAcceptWrappedTypes *a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaAcceptWrappedTypes::SDPMediaAcceptWrappedTypes((SDPMediaAcceptWrappedTypes *)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 16;
  return v7;
}

void sub_1BEFC0AAC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaSetup>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaSetup::SDPMediaSetup((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 17;
  return v7;
}

void sub_1BEFC0B10(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaFingerprint>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaFingerprint::SDPMediaFingerprint((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 18;
  return v7;
}

void sub_1BEFC0B74(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>,SDPParser::str_caseless_compare,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatInfo &,unsigned short,std::string)>>>::find<std::string>(uint64_t a1)
{
  uint64_t v1;
  const char *v2;
  uint64_t *v3;
  const char *v4;
  int v5;
  uint64_t *v6;
  const char *v7;

  v1 = qword_1ED70CD68;
  if (!qword_1ED70CD68)
    return &qword_1ED70CD68;
  v2 = *(char *)(a1 + 23) >= 0 ? (const char *)a1 : *(const char **)a1;
  v3 = &qword_1ED70CD68;
  do
  {
    if (*(char *)(v1 + 55) >= 0)
      v4 = (const char *)(v1 + 32);
    else
      v4 = *(const char **)(v1 + 32);
    v5 = strcasecmp(v4, v2);
    v6 = (uint64_t *)(v1 + 8);
    if (v5 >= 0)
    {
      v6 = (uint64_t *)v1;
      v3 = (uint64_t *)v1;
    }
    v1 = *v6;
  }
  while (*v6);
  if (v3 == &qword_1ED70CD68)
    return &qword_1ED70CD68;
  v7 = *((char *)v3 + 55) >= 0 ? (const char *)(v3 + 4) : (const char *)v3[4];
  if (strcasecmp(v2, v7) < 0)
    return &qword_1ED70CD68;
  return v3;
}

void XcapCallBarringManager::_fetchCallBarring(uint64_t a1, unsigned int a2, uint64_t a3)
{
  const std::string *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[7];
  BOOL v11;
  char v12;
  __int16 v13;
  std::string __p;
  _OWORD v15[2];
  uint64_t v16;

  v16 = 0;
  memset(v15, 0, sizeof(v15));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v15);
  if ((_BYTE)a2)
    v6 = (const std::string *)&XcapDocumentCallBarring::kNameIncoming;
  else
    v6 = (const std::string *)&XcapDocumentCallBarring::kNameOutgoing;
  XcapNodeSelector::appendNode((uint64_t **)v15, v6, (unsigned __int8 *)&XcapNs::kNsSs);
  if (a2 == 1)
    v7 = a1 + 376;
  else
    v7 = a1 + 408;
  LOWORD(__p.__r_.__value_.__l.__data_) = a2;
  __p.__r_.__value_.__s.__data_[2] = BYTE2(a2);
  v8 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(v7 + 8, (unsigned __int8 *)&__p);
  if (v7 + 16 != v8)
  {
    XcapNodeSelector::appendNode((uint64_t **)v15, (const std::string *)"ruleset", (unsigned __int8 *)&XcapNs::kNsCp);
    XcapCallBarringManager::CallBarringInfo::fetchRuleIdOrDefaultForProperty(&__p, v7, a2 & 0xFFFFFF);
    XcapNodeSelector::appendNodeByAttr((uint64_t **)v15, (const std::string *)"rule", (const std::string *)XcapCDRule::kId, &__p, (unsigned __int8 *)&XcapNs::kNsCp);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  v9 = operator new();
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN22XcapCallBarringManager17_fetchCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v10[3] = &unk_1E78CDE30;
  v11 = v7 + 16 == v8;
  v12 = a2;
  v13 = a2 >> 8;
  v10[5] = a1;
  v10[6] = v7;
  v10[4] = a3;
  XcapRequest::XcapRequest(v9, 5, (XcapRequest *)v15, v10);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v9);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v15);
}

void sub_1BEFC0DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a23 < 0)
    operator delete(__p);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&a24);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::CallBarringInfo::fetchRuleIdOrDefaultForProperty(std::string *a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  unsigned int v11;
  BOOL v12;
  char v13;
  unsigned int v14;
  BOOL v15;
  unsigned int v16;
  BOOL v17;
  BOOL v18;
  unsigned __int8 *v19;
  unsigned int v20;
  _BOOL4 v21;
  unsigned int v22;
  unsigned int v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;
  __int16 v28;
  char v29;

  v28 = a3;
  v29 = BYTE2(a3);
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  a1->__r_.__value_.__r.__words[0] = 0;
  BYTE2(v26[0]) = BYTE2(a3);
  v6 = a2 + 8;
  LOWORD(v26[0]) = a3;
  if (a2 + 16 == std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(a2 + 8, (unsigned __int8 *)v26))
  {
    if (*(_QWORD *)(a2 + 24))
    {
      std::string::operator=(a1, (const std::string *)(*(_QWORD *)v6 + 40));
      std::string::basic_string[abi:ne180100]<0>(v26, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Rule not exist. Choose the first one - ", 39);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 32))(v8, a1);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      v9 = (unsigned __int8 *)qword_1ED70CC48;
      if (!qword_1ED70CC48)
        goto LABEL_34;
      v10 = &qword_1ED70CC48;
      do
      {
        v11 = v9[32];
        v12 = v11 == a3;
        if (v11 < a3)
          v13 = -1;
        else
          v13 = 1;
        if (v12)
        {
          v14 = v9[33];
          v15 = v14 == BYTE1(a3);
          v13 = v14 < BYTE1(a3) ? -1 : 1;
          if (v15)
          {
            v16 = v9[34];
            v17 = v16 == BYTE2(a3);
            v13 = v16 < BYTE2(a3) ? -1 : 1;
            if (v17)
              v13 = 0;
          }
        }
        v18 = v13 < 0;
        if (v13 >= 0)
          v19 = v9;
        else
          v19 = v9 + 8;
        if (!v18)
          v10 = (uint64_t *)v9;
        v9 = *(unsigned __int8 **)v19;
      }
      while (*(_QWORD *)v19);
      if (v10 == &qword_1ED70CC48
        || ((v20 = *((unsigned __int8 *)v10 + 32), v21 = v20 > a3, v20 != a3)
         || (v22 = *((unsigned __int8 *)v10 + 33), v12 = v22 == BYTE1(a3), v21 = v22 > BYTE1(a3), !v12)
         || (v23 = *((unsigned __int8 *)v10 + 34), v21 = v23 > BYTE2(a3), v23 != BYTE2(a3)))
        && v21)
      {
LABEL_34:
        v10 = &qword_1ED70CC48;
      }
      std::string::operator=(a1, (const std::string *)(v10 + 5));
      std::string::basic_string[abi:ne180100]<0>(v26, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Rule not exist. Choose from the default rules - ", 48);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 32))(v8, a1);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v8 + 17) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
    if (v27 < 0)
      operator delete(v26[0]);
  }
  else
  {
    v7 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(v6, (unsigned __int8 *)&v28);
    std::string::operator=(a1, (const std::string *)(v7 + 40));
  }
}

void sub_1BEFC1114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  if (*(char *)(v21 + 23) < 0)
    operator delete(*(void **)v21);
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager17_fetchCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  const ImsResult *v4;
  uint64_t v6;
  __int16 v7;
  XcapDocumentCallBarring *v8;
  uint64_t v9;
  bambi::XmlParserItem *v10;
  uint64_t v11;
  bambi::XmlParserItem *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  int v21;
  XcapDocumentCallBarring *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t **v25;
  uint64_t v26;
  uint64_t v27;
  __int16 v28;
  std::__shared_weak_count *v29;
  unsigned __int8 *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  void *v33;
  std::__shared_weak_count *v34;
  __int16 v35;
  unint64_t *v36;
  unint64_t v37;
  char v38;
  uint64_t *v39;
  uint64_t *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  __int16 v46;
  unsigned __int8 *v47;
  unint64_t *v48;
  unint64_t v49;
  __int16 v50;
  uint64_t *v51;
  uint64_t *v52;
  unint64_t *v53;
  XcapDocumentCallBarring *v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  __int16 v58;
  XcapDocumentCallBarring *v59;
  const XcapCBRule *RuleForCondition;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  const ImsResult *v71;
  _BYTE v72[72];
  XcapDocumentCallBarring *v73;
  std::__shared_weak_count *v74;
  void *v75;
  std::__shared_weak_count *v76;
  char v77;
  void *v78;
  std::__shared_weak_count *v79;
  char v80;
  XcapDocumentCallBarring *v81;
  std::__shared_weak_count *v82;
  XcapDocumentCallBarring *v83;
  std::__shared_weak_count *v84;
  _BYTE v85[32];
  __int128 v86;
  __int128 v87;
  __int128 __p;
  __int128 v89;
  __int128 v90;
  __int16 v91;
  unsigned __int8 v92;
  unsigned __int8 v93[24];

  v4 = (const ImsResult *)a2;
  v6 = *(_QWORD *)(a1 + 40);
  v83 = 0;
  v84 = 0;
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)
  {
    v81 = 0;
    v82 = 0;
    v7 = *(_WORD *)(a1 + 57);
    if (*(_BYTE *)(a1 + 56))
    {
      *(_OWORD *)v85 = 0uLL;
      std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>((uint64_t *)v85, v7);
      v8 = *(XcapDocumentCallBarring **)v85;
      if (bambi::XmlParser::parseXml(a3, *(uint64_t *)v85, v9, v10))
      {
        v81 = v8;
        v82 = *(std::__shared_weak_count **)&v85[8];
      }
      else
      {
        v81 = 0;
        v82 = 0;
        v16 = *(std::__shared_weak_count **)&v85[8];
        if (*(_QWORD *)&v85[8])
        {
          v17 = (unint64_t *)(*(_QWORD *)&v85[8] + 8);
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
        }
      }
    }
    else
    {
      v89 = 0u;
      v90 = 0u;
      v87 = 0u;
      __p = 0u;
      v86 = 0u;
      memset(v85, 0, sizeof(v85));
      XcapCBRule::XcapCBRule((XcapCBRule *)v85);
      v81 = 0;
      v82 = 0;
      if (bambi::XmlParser::parseXml(a3, (uint64_t)v85, v11, v12))
      {
        std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>((uint64_t *)&v81, v7);
        XcapDocumentCallBarring::addRule(v81, (const XcapCBRule *)v85);
      }
      *(_QWORD *)v85 = off_1E78C8A30;
      *(_QWORD *)&v85[8] = &unk_1E78C8AA8;
      v13 = (std::__shared_weak_count *)v90;
      if ((_QWORD)v90)
      {
        v14 = (unint64_t *)(v90 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      if (SBYTE7(v89) < 0)
        operator delete((void *)__p);
      bambi::XmlTreeItem::~XmlTreeItem((void **)&v85[8]);
    }
    if (v81)
    {
      std::string::basic_string[abi:ne180100]<0>(v85, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(&v78, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::debug(ims::_logger, (uint64_t)v85, (uint64_t)&v78);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v81 + 104))(&v75);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, &v75);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v77 < 0)
        operator delete(v75);
      if (v80 < 0)
        operator delete(v78);
      v71 = v4;
      if ((v85[23] & 0x80000000) != 0)
        operator delete(*(void **)v85);
      v20 = *(_BYTE **)(a1 + 48);
      v21 = *(unsigned __int8 *)(v6 + 365);
      v22 = v81;
      *v20 = 1;
      v23 = (uint64_t *)*((_QWORD *)v22 + 11);
      v24 = (uint64_t *)*((_QWORD *)v22 + 12);
      if (v23 != v24)
      {
        v25 = (uint64_t **)(v20 + 8);
        do
        {
          v26 = *v23;
          v27 = *v23 + 64;
          if (v21)
          {
            if (*(char *)(v26 + 87) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v85, *(const std::string::value_type **)(v26 + 64), *(_QWORD *)(v26 + 72));
            }
            else
            {
              *(_OWORD *)v85 = *(_OWORD *)v27;
              *(_QWORD *)&v85[16] = *(_QWORD *)(v27 + 16);
            }
            v28 = *((unsigned __int8 *)v22 + 81);
            v30 = *(unsigned __int8 **)(v26 + 88);
            v29 = *(std::__shared_weak_count **)(v26 + 96);
            v78 = v30;
            v79 = v29;
            if (v29)
            {
              p_shared_owners = (unint64_t *)&v29->__shared_owners_;
              do
                v32 = __ldxr(p_shared_owners);
              while (__stxr(v32 + 1, p_shared_owners));
              v33 = *(void **)(v26 + 88);
              v34 = *(std::__shared_weak_count **)(v26 + 96);
              v35 = v30[65];
              v75 = v33;
              v76 = v34;
              if (v34)
              {
                v36 = (unint64_t *)&v34->__shared_owners_;
                do
                  v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
                v38 = 0;
              }
              else
              {
                v38 = 1;
              }
              v30 = (unsigned __int8 *)v33;
            }
            else
            {
              v34 = 0;
              v35 = v30[65];
              v38 = 1;
              v75 = v30;
              v76 = 0;
            }
            v92 = v30[66];
            v91 = v28 | (v35 << 8);
            *(_QWORD *)v93 = &v91;
            v39 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::__emplace_unique_key_args<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>&&>,std::tuple<>>(v25, (unsigned __int8 *)&v91, (_WORD **)v93);
            v40 = v39 + 5;
            if (*((char *)v39 + 63) < 0)
              operator delete((void *)*v40);
            *(_OWORD *)v40 = *(_OWORD *)v85;
            v40[2] = *(_QWORD *)&v85[16];
            v85[23] = 0;
            v85[0] = 0;
            if ((v38 & 1) == 0)
            {
              v41 = (unint64_t *)&v34->__shared_owners_;
              do
                v42 = __ldaxr(v41);
              while (__stlxr(v42 - 1, v41));
              if (!v42)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
            v43 = v79;
            if (!v79)
              goto LABEL_67;
            v44 = (unint64_t *)&v79->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
          }
          else
          {
            if (*(char *)(v26 + 87) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v85, *(const std::string::value_type **)(v26 + 64), *(_QWORD *)(v26 + 72));
            }
            else
            {
              *(_OWORD *)v85 = *(_OWORD *)v27;
              *(_QWORD *)&v85[16] = *(_QWORD *)(v27 + 16);
            }
            v46 = *((unsigned __int8 *)v22 + 81);
            v47 = *(unsigned __int8 **)(v26 + 88);
            v43 = *(std::__shared_weak_count **)(v26 + 96);
            v78 = v47;
            v79 = v43;
            if (v43)
            {
              v48 = (unint64_t *)&v43->__shared_owners_;
              do
                v49 = __ldxr(v48);
              while (__stxr(v49 + 1, v48));
            }
            v50 = v47[65];
            v93[2] = 0;
            *(_WORD *)v93 = v46 | (v50 << 8);
            v75 = v93;
            v51 = std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::__emplace_unique_key_args<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>&&>,std::tuple<>>(v25, v93, (_WORD **)&v75);
            v52 = v51 + 5;
            if (*((char *)v51 + 63) < 0)
              operator delete((void *)*v52);
            *(_OWORD *)v52 = *(_OWORD *)v85;
            v52[2] = *(_QWORD *)&v85[16];
            v85[23] = 0;
            v85[0] = 0;
            if (!v43)
              goto LABEL_69;
            v53 = (unint64_t *)&v43->__shared_owners_;
            do
              v45 = __ldaxr(v53);
            while (__stlxr(v45 - 1, v53));
          }
          if (!v45)
          {
            ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
            std::__shared_weak_count::__release_weak(v43);
          }
LABEL_67:
          if ((v85[23] & 0x80000000) != 0)
            operator delete(*(void **)v85);
LABEL_69:
          ++v23;
        }
        while (v23 != v24);
      }
      v54 = v81;
      v4 = v71;
    }
    else
    {
      v54 = 0;
    }
    v55 = v82;
    v73 = v54;
    v74 = v82;
    if (v82)
    {
      v56 = (unint64_t *)&v82->__shared_owners_;
      do
        v57 = __ldxr(v56);
      while (__stxr(v57 + 1, v56));
    }
    v58 = *(_WORD *)(a1 + 57);
    *(_OWORD *)v85 = 0uLL;
    std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>((uint64_t *)v85, v58);
    v59 = *(XcapDocumentCallBarring **)v85;
    *(_BYTE *)(*(_QWORD *)v85 + 80) = 0;
    if (v54)
    {
      RuleForCondition = (const XcapCBRule *)XcapDocumentCallBarring::findRuleForCondition((uint64_t)v54, HIBYTE(v58));
      if (RuleForCondition)
      {
        *((_BYTE *)v59 + 80) = *((_BYTE *)v54 + 80);
        XcapDocumentCallBarring::addRule(v59, RuleForCondition);
      }
    }
    v61 = *(std::__shared_weak_count **)&v85[8];
    *(_OWORD *)v85 = 0uLL;
    v83 = v59;
    v84 = v61;
    if (v55)
    {
      v62 = (unint64_t *)&v55->__shared_owners_;
      do
        v63 = __ldaxr(v62);
      while (__stlxr(v63 - 1, v62));
      if (!v63)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v64 = v82;
    if (v82)
    {
      v65 = (unint64_t *)&v82->__shared_owners_;
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 - 1, v65));
      if (!v66)
      {
        ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
        std::__shared_weak_count::__release_weak(v64);
      }
    }
  }
  v67 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v72, v4);
  (*(void (**)(uint64_t, _BYTE *, XcapDocumentCallBarring *))(v67 + 16))(v67, v72, v83);
  ImsResult::~ImsResult((ImsResult *)v72);
  v68 = v84;
  if (v84)
  {
    v69 = (unint64_t *)&v84->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
}

void sub_1BEFC17BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  XcapCBRule::~XcapCBRule((XcapCBRule *)&a37);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::setCallBarring(uint64_t a1, unsigned int a2, char a3, char a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[6];
  char v13;
  __int16 v14;
  char v15;
  char v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  if (a2 == 1)
    v10 = a1 + 376;
  else
    v10 = a1 + 408;
  if (*(_QWORD *)(v10 + 24))
  {
    XcapCallBarringManager::_setCallBarring(a1, a2 & 0xFFFFFF, a3, a4, a5);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::info(ims::_logger, (uint64_t)v19, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"No Rule-Ids. Perform GET before PUT", 35);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v18 < 0)
      operator delete(__p[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    v12[0] = MEMORY[0x1E0C809B0];
    v12[1] = 0x40000000;
    v12[2] = ___ZN22XcapCallBarringManager14setCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
    v12[3] = &unk_1E78CDE58;
    v13 = a2;
    v14 = a2 >> 8;
    v15 = a3;
    v16 = a4;
    v12[4] = a5;
    v12[5] = a1;
    XcapCallBarringManager::_fetchCallBarring(a1, a2 & 0xFFFFFF, (uint64_t)v12);
  }
}

void sub_1BEFC1A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager14setCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1)
{
  XcapCallBarringManager::_setCallBarring(*(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16), *(_BYTE *)(a1 + 51), *(_BYTE *)(a1 + 52), *(_QWORD *)(a1 + 32));
}

void XcapCallBarringManager::_setCallBarring(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  if (a2 == 1)
    v5 = a1 + 376;
  else
    v5 = a1 + 408;
  v6 = a2 & 0xFFFFFF;
  if (*(_QWORD *)(v5 + 24))
    XcapCallBarringManager::_setCallBarringForRule(a1, v6, a3, a4, a5);
  else
    XcapCallBarringManager::_setCallBarringForDoc(a1, v6, a3, a4, a5);
}

void XcapCallBarringManager::activateCallBarring(uint64_t a1, unsigned int a2, char a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[6];
  char v11;
  __int16 v12;
  char v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  if (a2 == 1)
    v8 = a1 + 376;
  else
    v8 = a1 + 408;
  if (*(_QWORD *)(v8 + 24))
  {
    XcapCallBarringManager::_setCallBarringActivationMode(a1, a2 & 0xFFFFFF, a3, a4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v16, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::info(ims::_logger, (uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"No Rule-Ids. Perform GET before PUT", 35);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    v10[0] = MEMORY[0x1E0C809B0];
    v10[1] = 0x40000000;
    v10[2] = ___ZN22XcapCallBarringManager19activateCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
    v10[3] = &unk_1E78CDE80;
    v11 = a2;
    v12 = a2 >> 8;
    v13 = a3;
    v10[4] = a4;
    v10[5] = a1;
    XcapCallBarringManager::_fetchCallBarring(a1, a2 & 0xFFFFFF, (uint64_t)v10);
  }
}

void sub_1BEFC1C50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager19activateCallBarringENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1)
{
  XcapCallBarringManager::_setCallBarringActivationMode(*(_QWORD *)(a1 + 40), *(unsigned __int16 *)(a1 + 48) | (*(unsigned __int8 *)(a1 + 50) << 16), *(_BYTE *)(a1 + 51), *(_QWORD *)(a1 + 32));
}

void XcapCallBarringManager::_setCallBarringActivationMode(uint64_t a1, int a2, char a3, uint64_t a4)
{
  uint64_t v4;
  int v5;

  if (a2 == 1)
    v4 = a1 + 376;
  else
    v4 = a1 + 408;
  v5 = a2 & 0xFFFFFF;
  if (*(_QWORD *)(v4 + 24))
    XcapCallBarringManager::_setCallBarringActivationModeForRule(a1, v5, a3, a4);
  else
    XcapCallBarringManager::_setCallBarringForDoc(a1, v5, 1, a3, a4);
}

void XcapCallBarringManager::_setCallBarringForDoc(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  const std::string *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[5];
  std::string v17;
  std::string v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 __p;
  __int128 v27;
  uint64_t v28;
  _QWORD v29[8];
  __int128 v30;
  __int128 v31;
  __int128 v32;

  v31 = 0u;
  v32 = 0u;
  v30 = 0u;
  memset(v29, 0, sizeof(v29));
  XcapCBRule::XcapCBRule((XcapCBRule *)v29);
  if (XcapCallBarringManager::_makeCallBarringRule(a1, a2 & 0xFFFFFF, a3, a4, (uint64_t)v29))
  {
    v28 = 0;
    __p = 0u;
    v27 = 0u;
    XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)&__p);
    if ((_BYTE)a2)
      v10 = (const std::string *)&XcapDocumentCallBarring::kNameIncoming;
    else
      v10 = (const std::string *)&XcapDocumentCallBarring::kNameOutgoing;
    XcapNodeSelector::appendNode((uint64_t **)&__p, v10, (unsigned __int8 *)&XcapNs::kNsSs);
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    v23 = 0u;
    v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v19 = 0u;
    XcapDocumentCallBarring::XcapDocumentCallBarring((uint64_t)v19, a2);
    XcapDocumentCallBarring::addRule((XcapDocumentCallBarring *)v19, (const XcapCBRule *)v29);
    memset(&v18, 0, sizeof(v18));
    bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)&v19[1], 1, 0, &v18);
    v11 = operator new();
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v17, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      v17 = v18;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZN22XcapCallBarringManager21_setCallBarringForDocENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
    v16[3] = &unk_1E78CDEA8;
    v16[4] = a5;
    XcapRequest::XcapRequest(v11, 5, (XcapRequest *)&__p, &v17, v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v11);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    XcapDocumentCallBarring::~XcapDocumentCallBarring((XcapDocumentCallBarring *)v19);
    XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&__p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Failed to set Call Barring", 26);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (SBYTE7(v27) < 0)
      operator delete((void *)__p);
    if (SBYTE7(v20) < 0)
      operator delete(v19[0]);
  }
  v29[0] = off_1E78C8A30;
  v29[1] = &unk_1E78C8AA8;
  v13 = (std::__shared_weak_count *)v32;
  if ((_QWORD)v32)
  {
    v14 = (unint64_t *)(v32 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SBYTE7(v31) < 0)
    operator delete((void *)v30);
  bambi::XmlTreeItem::~XmlTreeItem((void **)&v29[1]);
}

void sub_1BEFC1FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  uint64_t v49;
  uint64_t v50;

  MEMORY[0x1C3B87100](v49, 0x10B2C409DA9FE99);
  if (a26 < 0)
    operator delete(__p);
  XcapDocumentCallBarring::~XcapDocumentCallBarring((XcapDocumentCallBarring *)&a27);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&a44);
  XcapCBRule::~XcapCBRule((XcapCBRule *)(v50 - 176));
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::_setCallBarringForRule(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  int v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[5];
  std::string v17;
  std::string __p;
  void *v19[2];
  __int128 v20;
  uint64_t v21;
  _QWORD v22[8];
  __int128 v23;
  __int128 v24;
  __int128 v25;

  v24 = 0u;
  v25 = 0u;
  v23 = 0u;
  memset(v22, 0, sizeof(v22));
  XcapCBRule::XcapCBRule((XcapCBRule *)v22);
  v10 = a2 & 0xFFFFFF;
  if (XcapCallBarringManager::_makeCallBarringRule(a1, v10, a3, a4, (uint64_t)v22))
  {
    v21 = 0;
    *(_OWORD *)v19 = 0u;
    v20 = 0u;
    XcapCallBarringManager::_generateNodeSelectorForCBRule((uint64_t)v19, a1, v10);
    memset(&__p, 0, sizeof(__p));
    bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)&v22[1], 1, 0, &__p);
    v11 = operator new();
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v17, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    else
      v17 = __p;
    v16[0] = MEMORY[0x1E0C809B0];
    v16[1] = 0x40000000;
    v16[2] = ___ZN22XcapCallBarringManager22_setCallBarringForRuleENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
    v16[3] = &unk_1E78CDED0;
    v16[4] = a5;
    XcapRequest::XcapRequest(v11, 5, (XcapRequest *)v19, &v17, v16);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v11);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v19);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v19, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Failed to set Call Barring", 26);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SBYTE7(v20) < 0)
      operator delete(v19[0]);
  }
  v22[0] = off_1E78C8A30;
  v22[1] = &unk_1E78C8AA8;
  v13 = (std::__shared_weak_count *)v25;
  if ((_QWORD)v25)
  {
    v14 = (unint64_t *)(v25 + 8);
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (SBYTE7(v24) < 0)
    operator delete((void *)v23);
  bambi::XmlTreeItem::~XmlTreeItem((void **)&v22[1]);
}

void sub_1BEFC2350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  uint64_t v36;

  MEMORY[0x1C3B87100](v36, 0x10B2C409DA9FE99);
  if (a26 < 0)
    operator delete(__p);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)&a27);
  XcapCBRule::~XcapCBRule((XcapCBRule *)&a36);
  _Unwind_Resume(a1);
}

BOOL XcapCallBarringManager::_makeCallBarringRule(uint64_t a1, int a2, char a3, char a4, uint64_t a5)
{
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  void *__p[2];
  char v22;
  std::string __str;

  if (a5)
  {
    if (a2 == 1)
      v9 = a1 + 376;
    else
      v9 = a1 + 408;
    XcapCallBarringManager::CallBarringInfo::fetchRuleIdOrDefaultForProperty(&__str, v9, a2 & 0xFFFFFF);
    std::string::operator=((std::string *)(a5 + 64), &__str);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    *(_BYTE *)(a5 + 104) = a3;
    v10 = *(_QWORD *)(a5 + 88);
    v11 = *(std::__shared_weak_count **)(a5 + 96);
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      *(_BYTE *)(v10 + 65) = BYTE1(a2);
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
      v10 = *(_QWORD *)(a5 + 88);
      v15 = *(std::__shared_weak_count **)(a5 + 96);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldxr(v16);
        while (__stxr(v17 + 1, v16));
        *(_BYTE *)(v10 + 64) = a4;
        do
          v18 = __ldaxr(v16);
        while (__stlxr(v18 - 1, v16));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
        return a5 != 0;
      }
    }
    else
    {
      *(_BYTE *)(v10 + 65) = BYTE1(a2);
    }
    *(_BYTE *)(v10 + 64) = a4;
    return a5 != 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__str, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ImsLogger::error(ims::_logger, (uint64_t)&__str, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v19 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"NULL rule object to make CB rule", 32);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return a5 != 0;
}

void sub_1BEFC25E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN22XcapCallBarringManager21_setCallBarringForDocENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const ImsResult *a2)
{
  uint64_t v2;
  _BYTE v3[72];

  v2 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BEFC2668(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::_generateNodeSelectorForCBRule(uint64_t a1, uint64_t a2, int a3)
{
  const std::string *v5;
  uint64_t v6;
  uint64_t **v7;
  std::string __p;

  if ((_BYTE)a3)
    v5 = (const std::string *)&XcapDocumentCallBarring::kNameIncoming;
  else
    v5 = (const std::string *)&XcapDocumentCallBarring::kNameOutgoing;
  if (a3 == 1)
    v6 = a2 + 376;
  else
    v6 = a2 + 408;
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)a1);
  XcapNodeSelector::appendNode(v7, v5, (unsigned __int8 *)&XcapNs::kNsSs);
  XcapNodeSelector::appendNode((uint64_t **)a1, (const std::string *)"ruleset", (unsigned __int8 *)&XcapNs::kNsCp);
  XcapCallBarringManager::CallBarringInfo::fetchRuleIdOrDefaultForProperty(&__p, v6, a3 & 0xFFFFFF);
  XcapNodeSelector::appendNodeByAttr((uint64_t **)a1, (const std::string *)"rule", (const std::string *)XcapCDRule::kId, &__p, (unsigned __int8 *)&XcapNs::kNsCp);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEFC2750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  XcapNodeSelector *v15;

  if (a15 < 0)
    operator delete(__p);
  XcapNodeSelector::~XcapNodeSelector(v15);
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallBarringManager22_setCallBarringForRuleENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const ImsResult *a2)
{
  uint64_t v2;
  _BYTE v3[72];

  v2 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BEFC27C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::_setCallBarringActivationModeForRule(uint64_t a1, int a2, char a3, uint64_t a4)
{
  char v6;
  uint64_t v8;
  _QWORD v9[5];
  std::string v10;
  std::string __p;
  _OWORD v12[4];
  uint64_t v13;
  uint64_t *v14[6];

  v6 = BYTE1(a2);
  memset(v14, 0, 40);
  XcapCallBarringManager::_generateNodeSelectorForCBRule((uint64_t)v14, a1, a2 & 0xFFFFFF);
  XcapNodeSelector::appendNode(v14, (const std::string *)"conditions", (unsigned __int8 *)&XcapNs::kNsCp);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  XcapCBCondition::XcapCBCondition((XcapCBCondition *)v12);
  BYTE1(v13) = v6;
  LOBYTE(v13) = a3;
  memset(&__p, 0, sizeof(__p));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v12 + 8), 1, 0, &__p);
  v8 = operator new();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v10, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v10 = __p;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN22XcapCallBarringManager36_setCallBarringActivationModeForRuleENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v9[3] = &unk_1E78CDEF8;
  v9[4] = a4;
  XcapRequest::XcapRequest(v8, 5, (XcapRequest *)v14, &v10, v9);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v12 + 1);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v14);
}

void sub_1BEFC2970(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void **v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x1C3B87100](v27, 0x10B2C409DA9FE99);
  if (a26 < 0)
    operator delete(__p);
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN22XcapCallBarringManager36_setCallBarringActivationModeForRuleENSt3__15tupleIJN23XcapDocumentCallBarring9DirectionEN15XcapCBCondition9ConditionENS4_5MediaEEEEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const ImsResult *a2)
{
  uint64_t v2;
  _BYTE v3[72];

  v2 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BEFC2A30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallBarringManager::~XcapCallBarringManager(XcapCallBarringManager *this)
{
  XcapCallBarringManager::~XcapCallBarringManager(this);
  JUMPOUT(0x1C3B87100);
}

{
  *(_QWORD *)this = &off_1E78CDE18;
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((char **)this + 53));
  std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((char **)this + 49));
  *(_QWORD *)this = &off_1E78C1018;
  XcapConfig::~XcapConfig((void **)this + 1);
}

uint64_t std::allocate_shared[abi:ne180100]<XcapDocumentCallBarring,std::allocator<XcapDocumentCallBarring>,XcapDocumentCallBarring::Direction &,void>(uint64_t *a1, unsigned __int8 a2)
{
  _QWORD *v4;
  uint64_t result;

  v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78CDF40;
  result = XcapDocumentCallBarring::XcapDocumentCallBarring((uint64_t)(v4 + 3), a2);
  *a1 = result;
  a1[1] = (uint64_t)v4;
  return result;
}

void sub_1BEFC2ABC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<XcapDocumentCallBarring>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDF40;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<XcapDocumentCallBarring>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CDF40;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<XcapDocumentCallBarring>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*(_QWORD *)a1);
    std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::destroy(*((_QWORD *)a1 + 1));
    if (a1[63] < 0)
      operator delete(*((void **)a1 + 5));
    operator delete(a1);
  }
}

uint64_t *std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::__emplace_unique_key_args<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::piecewise_construct_t const&,std::tuple<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>&&>,std::tuple<>>(uint64_t **a1, unsigned __int8 *a2, _WORD **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  unsigned __int8 *v9;
  uint64_t *v10;
  char v11;
  uint64_t *v12;
  uint64_t *v13;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = (uint64_t *)operator new(0x40uLL);
    v11 = *((_BYTE *)*a3 + 2);
    *((_WORD *)v10 + 16) = **a3;
    *((_BYTE *)v10 + 34) = v11;
    v10[6] = 0;
    v10[7] = 0;
    v10[5] = 0;
    *v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v8;
    *v6 = v10;
    v12 = (uint64_t *)**a1;
    v13 = v10;
    if (v12)
    {
      *a1 = v12;
      v13 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v10;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = (unsigned __int8 *)(v5 + 4);
      if ((std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(a2, (unsigned __int8 *)v5 + 32) & 0x80) == 0)break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(v9, a2) & 0x80) == 0)break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v10 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v10;
}

uint64_t std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned int v3;
  unsigned int v4;
  uint64_t result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  unsigned int v11;

  v3 = *a1;
  v4 = *a2;
  if (v3 < v4)
    result = 0xFFFFFFFFLL;
  else
    result = 1;
  if (v3 == v4)
  {
    v6 = a1[1];
    v7 = a2[1];
    result = v6 < v7 ? 0xFFFFFFFFLL : 1;
    if (v6 == v7)
    {
      v8 = a1[2];
      v9 = a2[2];
      v10 = v8 == v9;
      if (v8 < v9)
        v11 = -1;
      else
        v11 = 1;
      if (v10)
        return 0;
      else
        return v11;
    }
  }
  return result;
}

uint64_t std::__tree<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::__map_value_compare<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>,std::less<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>,true>,std::allocator<std::__value_type<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>,std::string>>>::find<std::tuple<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media>>(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  char v6;
  uint64_t *v7;

  v2 = a1 + 8;
  v3 = *(_QWORD *)(a1 + 8);
  if (!v3)
    return v2;
  v5 = a1 + 8;
  do
  {
    v6 = std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>((unsigned __int8 *)(v3 + 32), a2);
    if (v6 >= 0)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
      v5 = v3;
    v3 = *v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::__tuple_compare_three_way[abi:ne180100]<XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,XcapDocumentCallBarring::Direction,XcapCBCondition::Condition,XcapCBCondition::Media,0ul,1ul,2ul>(a2, (unsigned __int8 *)(v5 + 32)) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t SDPSettingsBuilder::SDPSettingsBuilder(uint64_t a1, _QWORD *a2, char a3)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)a1 = &off_1E78B8D78;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = *a2;
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  *(_BYTE *)(a1 + 24) = a3;
  std::string::operator=(&SDPSettingsBuilder::_username, (const std::string *)(*a2 + 112));
  return a1;
}

void sub_1BEFC2DEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SDPSettingsBuilder::findRTPMatches(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::string *v14;
  int v15;
  void *v16;
  std::string *v17;
  int v18;
  int v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  std::string v24;
  std::string v25;
  std::string v26;
  std::string v27;
  _OWORD v28[3];
  __int128 v29;
  __int128 v30;
  _OWORD v31[3];
  __int128 v32;
  __int128 v33;

  if (*(_BYTE *)(a1 + 24))
    v5 = a3;
  else
    v5 = a2;
  if (*(_BYTE *)(a1 + 24))
    v6 = a2;
  else
    v6 = a3;
  v7 = *(_QWORD *)(v5 + 8);
  v22 = v5;
  if (v7 != v5)
  {
    while (1)
    {
      v9 = *(_QWORD *)(v6 + 8);
      if (v9 != v6)
        break;
LABEL_58:
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v22)
        return;
    }
    while (1)
    {
      v10 = *(unsigned __int16 *)(v7 + 24);
      v32 = 0u;
      v33 = 0u;
      memset(v31, 0, sizeof(v31));
      SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v31, (const SDPMediaRTPMap *)(v7 + 32));
      v29 = 0u;
      v30 = 0u;
      memset(v28, 0, sizeof(v28));
      SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v28, (const SDPMediaRTPMap *)(v9 + 32));
      if (v10 <= 0x5F && (_DWORD)v10 == *(unsigned __int16 *)(v9 + 24))
      {
        (*(void (**)(uint64_t, uint64_t))(a5 + 16))(a5, v10);
        goto LABEL_57;
      }
      v11 = BYTE7(v33);
      if (SBYTE7(v33) < 0)
        v11 = *((_QWORD *)&v32 + 1);
      if (!v11)
        goto LABEL_57;
      v12 = BYTE7(v30);
      if (SBYTE7(v30) < 0)
        v12 = *((_QWORD *)&v29 + 1);
      if (!v12)
        goto LABEL_57;
      if (SBYTE7(v33) < 0)
      {
        std::string::__init_copy_ctor_external(&v27, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
        if ((BYTE7(v30) & 0x80) != 0)
        {
LABEL_22:
          std::string::__init_copy_ctor_external(&v26, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
          goto LABEL_23;
        }
      }
      else
      {
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v32;
        v27.__r_.__value_.__r.__words[2] = v33;
        if ((BYTE7(v30) & 0x80) != 0)
          goto LABEL_22;
      }
      *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v29;
      v26.__r_.__value_.__r.__words[2] = v30;
LABEL_23:
      v13 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = &v27;
      else
        v14 = (std::string *)v27.__r_.__value_.__r.__words[0];
      v15 = SHIBYTE(v26.__r_.__value_.__r.__words[2]);
      v16 = (void *)v26.__r_.__value_.__r.__words[0];
      if ((v26.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v17 = &v26;
      else
        v17 = (std::string *)v26.__r_.__value_.__r.__words[0];
      if (strcasecmp((const char *)v14, (const char *)v17))
        goto LABEL_39;
      v18 = WORD4(v33);
      if (!WORD4(v33))
        v18 = 8000;
      v19 = WORD4(v30);
      if (!WORD4(v30))
        v19 = 8000;
      if (v18 == v19)
      {
        v20 = WORD5(v33) == WORD5(v30);
        if (v15 < 0)
          goto LABEL_36;
      }
      else
      {
LABEL_39:
        v20 = 0;
        if (v15 < 0)
        {
LABEL_36:
          operator delete(v16);
          if ((*((_BYTE *)&v27.__r_.__value_.__s + 23) & 0x80) != 0)
            goto LABEL_37;
          goto LABEL_41;
        }
      }
      if (v13 < 0)
      {
LABEL_37:
        operator delete(v27.__r_.__value_.__l.__data_);
        if (v20)
          goto LABEL_42;
        goto LABEL_57;
      }
LABEL_41:
      if (v20)
      {
LABEL_42:
        std::string::basic_string[abi:ne180100]<0>(&v27, "sdp.settings");
        std::string::basic_string[abi:ne180100]<0>(&v26, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v21 = ImsLogger::debug(ims::_logger, (uint64_t)&v27, (uint64_t)&v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Trying dynamic match: ", 22);
        *(_BYTE *)(v21 + 17) = 0;
        if (SBYTE7(v30) < 0)
        {
          std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)v29, *((std::string::size_type *)&v29 + 1));
        }
        else
        {
          *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v29;
          v25.__r_.__value_.__r.__words[2] = v30;
        }
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 32))(v21, &v25);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"(", 1);
        *(_BYTE *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)":", 1);
        *(_BYTE *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)")", 1);
        *(_BYTE *)(v21 + 17) = 0;
        if (SBYTE7(v33) < 0)
        {
          std::string::__init_copy_ctor_external(&v24, (const std::string::value_type *)v32, *((std::string::size_type *)&v32 + 1));
        }
        else
        {
          *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v32;
          v24.__r_.__value_.__r.__words[2] = v33;
        }
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 32))(v21, &v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"(", 1);
        *(_BYTE *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)":", 1);
        *(_BYTE *)(v21 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v21 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)")", 1);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v21 + 17) = 0;
        if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v24.__r_.__value_.__l.__data_);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v26.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        (*(void (**)(void))(a4 + 16))();
      }
LABEL_57:
      SDPMediaRTPMap::~SDPMediaRTPMap((void **)v28);
      SDPMediaRTPMap::~SDPMediaRTPMap((void **)v31);
      v9 = *(_QWORD *)(v9 + 8);
      if (v9 == v6)
        goto LABEL_58;
    }
  }
}

void sub_1BEFC3284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43)
{
  uint64_t v43;

  if (a27 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (a41 < 0)
    operator delete(a36);
  SDPMediaRTPMap::~SDPMediaRTPMap(&a43);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)(v43 - 176));
  _Unwind_Resume(a1);
}

void SDPSettingsBuilder::connectionForMedia(SDPMedia *this@<X1>, SDPModel **a2@<X0>, uint64_t a3@<X8>)
{
  void (**v5)(SDPConnection *__hidden);
  __int128 v6;
  std::string v7;
  uint64_t v8;
  char v9;
  _BYTE v10[32];
  __int128 v11;
  __int128 v12;

  v11 = 0u;
  v12 = 0u;
  memset(v10, 0, sizeof(v10));
  SDPMedia::validConnection(this, (uint64_t)v10);
  if (BYTE8(v12))
  {
    SDPConnection::SDPConnection(a3, (uint64_t)v10);
LABEL_6:
    *(_BYTE *)(a3 + 56) = BYTE8(v12);
    goto LABEL_7;
  }
  SDPModel::validConnection(*a2, (uint64_t)&v5);
  v10[8] = v6;
  *(_QWORD *)&v10[12] = *(_QWORD *)((char *)&v6 + 4);
  std::string::operator=((std::string *)&v10[24], &v7);
  LOWORD(v12) = v8;
  BYTE8(v12) = v9;
  v5 = off_1E78D19C0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v7.__r_.__value_.__l.__data_);
    if (BYTE8(v12))
      goto LABEL_5;
  }
  else if (v9)
  {
LABEL_5:
    SDPConnection::SDPConnection(a3, (uint64_t)v10);
    goto LABEL_6;
  }
  v6 = 0u;
  v8 = 0;
  LOBYTE(v6) = 1;
  v5 = off_1E78D19C0;
  memset(&v7, 0, sizeof(v7));
  SDPConnection::SDPConnection(a3, (uint64_t)&v5);
  *(_BYTE *)(a3 + 56) = 0;
  v5 = off_1E78D19C0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
LABEL_7:
  *(_QWORD *)v10 = off_1E78D19C0;
  if (SHIBYTE(v11) < 0)
    operator delete(*(void **)&v10[24]);
}

void sub_1BEFC345C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a17 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

unint64_t SDPSettingsBuilder::generateBandwidthSpecifierInfo(unint64_t result, SDPModel **a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  _BOOL4 isHeld;
  _BOOL4 v10;
  uint64_t v11;
  uint64_t i;
  int v13;
  _BOOL4 v14;
  _BOOL4 v15;
  _BOOL4 v16;

  v4 = result;
  if (*(_QWORD *)(a3 + 128))
  {
    v5 = a3 + 112;
    v6 = *(_QWORD *)(a3 + 120);
    if (v6 != a3 + 112)
    {
      do
      {
        v7 = *(_DWORD *)(v6 + 28);
        switch(v7)
        {
          case 4:
            isHeld = SDPModel::isHeld(*a2);
            result = SDPBandwidth::bandwidth((SDPBandwidth *)(v6 + 16), isHeld);
            *(_QWORD *)(v4 + 56) = result;
            *(_BYTE *)(v4 + 32) = 1;
            break;
          case 3:
            v10 = SDPModel::isHeld(*a2);
            result = SDPBandwidth::bandwidth((SDPBandwidth *)(v6 + 16), v10);
            *(_QWORD *)(v4 + 64) = result;
            *(_BYTE *)(v4 + 33) = 1;
            break;
          case 2:
            v8 = SDPModel::isHeld(*a2);
            result = SDPBandwidth::bandwidth((SDPBandwidth *)(v6 + 16), v8);
            *(_QWORD *)(v4 + 48) = result;
            break;
        }
        v6 = *(_QWORD *)(v6 + 8);
      }
      while (v6 != v5);
    }
  }
  else
  {
    v11 = (uint64_t)*a2 + 296;
    for (i = *((_QWORD *)*a2 + 38); i != v11; i = *(_QWORD *)(i + 8))
    {
      v13 = *(_DWORD *)(i + 28);
      switch(v13)
      {
        case 4:
          v16 = SDPModel::isHeld(*a2);
          result = SDPBandwidth::bandwidth((SDPBandwidth *)(i + 16), v16);
          *(_QWORD *)(v4 + 56) = result;
          *(_BYTE *)(v4 + 32) = 1;
          break;
        case 3:
          v15 = SDPModel::isHeld(*a2);
          result = SDPBandwidth::bandwidth((SDPBandwidth *)(i + 16), v15);
          *(_QWORD *)(v4 + 64) = result;
          *(_BYTE *)(v4 + 33) = 1;
          break;
        case 2:
          v14 = SDPModel::isHeld(*a2);
          result = SDPBandwidth::bandwidth((SDPBandwidth *)(i + 16), v14);
          *(_QWORD *)(v4 + 48) = result;
          break;
      }
    }
  }
  return result;
}

_QWORD *SDPSettingsBuilder::copyGeneralMediaSettings(std::string *this, SDPMediaSettings *a2, SDPMedia *a3, SDPMedia *a4, const ImsPrefs *a5)
{
  uint64_t *v8;
  SDPMediaCrypto *v9;
  SDPMediaCrypto *v10;
  uint64_t v11;
  uint64_t *v12;
  unsigned __int16 *v13;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  std::string::operator=(this + 3, &SDPSettingsBuilder::_username);
  LOWORD(this[1].__r_.__value_.__l.__data_) = *((_QWORD *)a2 + 2);
  *(_WORD *)&this[1].__r_.__value_.__s.__data_[2] = *((_QWORD *)a3 + 2);
  SDPMedia::mediaCryptoList(a2, &v17);
  v8 = v18;
  if (v18 != &v17)
  {
    v9 = (SDPMediaCrypto *)&this[4].__r_.__value_.__r.__words[1];
    v10 = (SDPMediaCrypto *)&this[8];
    do
    {
      v11 = v8[2];
      if (*(_BYTE *)(v11 + 72))
      {
        SDPMedia::mediaCryptoList(a3, &v15);
        v12 = v16;
        if (v16 != &v15)
        {
          while (1)
          {
            v13 = (unsigned __int16 *)v12[2];
            if (v13[20] == *(unsigned __int16 *)(v11 + 40))
              break;
            v12 = (uint64_t *)v12[1];
            if (v12 == &v15)
              goto LABEL_9;
          }
          std::optional<SDPMediaCrypto>::operator=[abi:ne180100]<SDPMediaCrypto const&,void>(v9, (const SDPMediaCrypto *)v11);
          std::optional<SDPMediaCrypto>::operator=[abi:ne180100]<SDPMediaCrypto const&,void>(v10, (const SDPMediaCrypto *)v13);
        }
LABEL_9:
        std::__list_imp<unsigned long long>::clear(&v15);
      }
      v8 = (uint64_t *)v8[1];
    }
    while (v8 != &v17);
  }
  return std::__list_imp<unsigned long long>::clear(&v17);
}

void sub_1BEFC3730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::__list_imp<unsigned long long>::clear(&a9);
  std::__list_imp<unsigned long long>::clear(&a12);
  _Unwind_Resume(a1);
}

void SDPSettingsBuilder::copyRemoteMediaSettings(uint64_t a1, _QWORD *a2, SDPMedia *this)
{
  SDPModel *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  std::string __p;
  SDPModel *v19[2];
  __int128 v20;
  void *v21[2];
  __int128 v22;
  __int128 v23;

  v22 = 0u;
  v23 = 0u;
  v20 = 0u;
  *(_OWORD *)v21 = 0u;
  v6 = (SDPModel *)a2[1];
  v19[0] = *(SDPModel **)a2;
  v19[1] = v6;
  if (v6)
  {
    v7 = (unint64_t *)((char *)v6 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  SDPSettingsBuilder::connectionForMedia(this, v19, (uint64_t)&v20);
  if (v6)
  {
    v9 = (unint64_t *)((char *)v6 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v6 + 16))(v6);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v6);
    }
  }
  if (BYTE8(v23))
  {
    if (IpAddress::isAddress((std::string *)&v21[1]))
    {
      SDPMediaSettings::setRemoteAddress(a1, (std::string *)&v21[1]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "::");
      SDPMediaSettings::setRemoteAddress(a1, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  v11 = *((_QWORD *)this + 18);
  if ((SDPMedia *)v11 == (SDPMedia *)((char *)this + 136))
  {
LABEL_18:
    v13 = 0;
  }
  else
  {
    v12 = *((_QWORD *)this + 18);
    while (*(_DWORD *)(v12 + 136) != 4)
    {
      v12 = *(_QWORD *)(v12 + 8);
      if ((SDPMedia *)v12 == (SDPMedia *)((char *)this + 136))
        goto LABEL_18;
    }
    while (*(_DWORD *)(v11 + 136) != 4)
      v11 = *(_QWORD *)(v11 + 8);
    v13 = *(_DWORD *)(v11 + 56);
  }
  *(_DWORD *)(a1 + 40) = v13;
  v14 = *a2 + 392;
  v15 = *(_QWORD *)(*a2 + 400);
  if (v15 == v14)
  {
LABEL_26:
    v17 = 0;
  }
  else
  {
    v16 = *(_QWORD *)(*a2 + 400);
    while (*(_DWORD *)(v16 + 136) != 4)
    {
      v16 = *(_QWORD *)(v16 + 8);
      if (v16 == v14)
        goto LABEL_26;
    }
    while (*(_DWORD *)(v15 + 136) != 4)
      v15 = *(_QWORD *)(v15 + 8);
    v17 = *(_DWORD *)(v15 + 56);
  }
  *(_DWORD *)(a1 + 36) = v17;
  *(_QWORD *)&v20 = off_1E78D19C0;
  if (SHIBYTE(v22) < 0)
    operator delete(v21[1]);
}

void sub_1BEFC3908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a15 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

BOOL SDPSettingsBuilder::isIPv6(SDPModel **a1, SDPMedia *a2)
{
  SDPModel *v2;
  unint64_t *v3;
  unint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  int v8;
  SDPModel *v11[2];
  __int128 v12;
  void *__p[2];
  __int128 v14;
  __int128 v15;

  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  *(_OWORD *)__p = 0u;
  v2 = a1[1];
  v11[0] = *a1;
  v11[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)((char *)v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  SDPSettingsBuilder::connectionForMedia(a2, v11, (uint64_t)&v12);
  if (v2)
  {
    v5 = (unint64_t *)((char *)v2 + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      (*(void (**)(SDPModel *))(*(_QWORD *)v2 + 16))(v2);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v2);
    }
  }
  v7 = BYTE8(v15);
  v8 = (int)__p[0];
  *(_QWORD *)&v12 = off_1E78D19C0;
  if (SHIBYTE(v14) < 0)
    operator delete(__p[1]);
  return v7 && v8 == 2;
}

void sub_1BEFC3A18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SDPSettingsBuilder_cpp()
{
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &SDPSettingsBuilder::_username, &dword_1BEDF4000);
}

uint64_t ImsListenSocket::ImsListenSocket(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  v5 = ImsSocket::ImsSocket(a1, a3);
  *(_QWORD *)v5 = off_1E78CDF90;
  *(_QWORD *)(v5 + 80) = &unk_1E78CE000;
  *(_DWORD *)(v5 + 88) = 0;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_QWORD *)(v5 + 128) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(std::__shared_weak_count **)(a1 + 128);
    *(_QWORD *)(a1 + 120) = v6;
    *(_QWORD *)(a1 + 128) = v7;
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 120) = v6;
    *(_QWORD *)(a1 + 128) = 0;
  }
  return a1;
}

void ImsListenSocket::initialize(ImsResult *a1, _QWORD *a2, ImsSocket *this, dispatch_object_t *a4, uint64_t a5)
{
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const ImsResult *v14;
  void *v15[2];
  int v16;
  char v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  void *__p[2];
  char v22;
  _BYTE v23[72];

  v10 = (_DWORD *)a2[5];
  if (v10 && *v10 != -1)
    (*(void (**)(_QWORD *))(*a2 + 8))(a2);
  ImsSocket::setNoSigpipeOptionForSocket(this, (uint64_t)v23);
  ImsResult::~ImsResult((ImsResult *)v23);
  if (listen((int)this, 64))
  {
    *((_QWORD *)a1 + 8) = 0;
    *((_OWORD *)a1 + 2) = 0u;
    *((_OWORD *)a1 + 3) = 0u;
    *(_OWORD *)a1 = 0u;
    *((_OWORD *)a1 + 1) = 0u;
    v11 = *__error();
    *(_OWORD *)((char *)a1 + 24) = 0u;
    *(_OWORD *)((char *)a1 + 40) = 0u;
    *(_OWORD *)((char *)a1 + 56) = 0u;
    *(_QWORD *)a1 = &off_1E78B7238;
    *((_QWORD *)a1 + 1) = &_posixDomain;
    *((_DWORD *)a1 + 4) = v11;
    std::string::basic_string[abi:ne180100]<0>(v15, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Couldn't listen on socket: ", 27);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(ImsResult *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v15[0]);
    close((int)this);
  }
  else if ((ImsSocket::_createSocketWithDispatch((uint64_t)a2, (int)this, a4, a5, 1) & 1) != 0)
  {
    *(_OWORD *)((char *)a1 + 24) = 0u;
    *(_OWORD *)((char *)a1 + 40) = 0u;
    *(_OWORD *)((char *)a1 + 56) = 0u;
    *(_QWORD *)a1 = &off_1E78B7238;
    *((_QWORD *)a1 + 1) = &_bambiDomain;
    *((_DWORD *)a1 + 4) = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::error(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to create CFSocket", 25);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v15[0]);
    close((int)this);
    v18 = 0u;
    v19 = 0u;
    v20 = 0u;
    v15[0] = &off_1E78B7238;
    v15[1] = &_bambiDomain;
    v16 = 0x40000000;
    v14 = (const ImsResult *)ImsResult::operator<<<char [40]>((uint64_t)v15, "Unable to create CFSocket for listening");
    ImsResult::ImsResult(a1, v14);
    ImsResult::~ImsResult((ImsResult *)v15);
  }
}

void sub_1BEFC3D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsListenSocket::socketReadCallback(ImsListenSocket *this)
{
  uint64_t v2;
  int v3;
  int v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  void *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  _QWORD v28[2];
  _QWORD v29[9];
  _QWORD *v30;
  std::__shared_weak_count *v31;
  void *__p;
  std::__shared_weak_count *v33;
  char v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  socklen_t v40;
  int v41[4];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v49 = 0;
  v50 = 0;
  v47 = 0u;
  v48 = 0u;
  v45 = 0u;
  v46 = 0u;
  v43 = 0u;
  v44 = 0u;
  *(_OWORD *)v41 = 0u;
  v42 = 0u;
  v40 = 128;
  v41[0] = -1;
  v41[0] = accept(**((_DWORD **)this + 5), (sockaddr *)&v41[2], &v40);
  if (v41[0] >= 1)
  {
    v38 = 0;
    v39 = 0;
    IpAddress::createAddress((IpAddress *)&v41[2], (uint64_t)&v38);
    if (v38)
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "net");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v35, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Accepted incoming connection from ", 34);
      *(_BYTE *)(v2 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v38 + 40))(v38, v2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v2 + 17) = 0;
      if (v34 < 0)
        operator delete(__p);
      if (v37 < 0)
        operator delete(v35);
      v3 = *((_DWORD *)this + 22);
      v4 = *((_DWORD *)this + 17);
      v5 = (std::__shared_weak_count *)operator new(0xC8uLL);
      v5->__shared_owners_ = 0;
      v5->__shared_weak_owners_ = 0;
      v5->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C9A18;
      v35 = 0;
      v36 = 0;
      ImsTcpSocket::ImsTcpSocket((uint64_t)&v5[1], (uint64_t *)&v35, v3, v4);
      v30 = &v5[1].__vftable;
      v31 = v5;
      std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v30, &v5[1].__shared_owners_, (uint64_t)&v5[1]);
      v6 = v31;
      if (v30)
        v7 = v30 + 10;
      else
        v7 = 0;
      __p = v7;
      v33 = v31;
      v8 = v41[0];
      v28[0] = &off_1E78B7BD8;
      v28[1] = 0;
      std::string::basic_string[abi:ne180100]<0>(&v35, "");
      (*(void (**)(_QWORD *__return_ptr, void *, uint64_t, uint64_t *, char *, char *, _QWORD, _QWORD *, void **))(*(_QWORD *)v7 + 112))(v29, v7, v8, &v38, (char *)this + 56, (char *)this + 96, 0, v28, &v35);
      ImsResult::~ImsResult((ImsResult *)v29);
      if (v37 < 0)
        operator delete(v35);
      ims::CFType::~CFType((ims::CFType *)v28);
      v35 = 0;
      v36 = 0;
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
      if (v9)
      {
        v36 = std::__shared_weak_count::lock(v9);
        if (v36)
        {
          v10 = (void *)*((_QWORD *)this + 15);
          v35 = v10;
          if (v10)
          {
            v26 = v7;
            v27 = v6;
            if (v6)
            {
              p_shared_owners = (unint64_t *)&v6->__shared_owners_;
              do
                v12 = __ldxr(p_shared_owners);
              while (__stxr(v12 + 1, p_shared_owners));
            }
            (*(void (**)(void *, void **))(*(_QWORD *)v10 + 16))(v10, &v26);
            v13 = v27;
            if (v27)
            {
              v14 = (unint64_t *)&v27->__shared_owners_;
              do
                v15 = __ldaxr(v14);
              while (__stlxr(v15 - 1, v14));
              if (!v15)
              {
                ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
                std::__shared_weak_count::__release_weak(v13);
              }
            }
          }
        }
      }
      v16 = v36;
      if (v36)
      {
        v17 = (unint64_t *)&v36->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      v19 = v33;
      if (v33)
      {
        v20 = (unint64_t *)&v33->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v35, "net");
      std::string::basic_string[abi:ne180100]<0>(&__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v22 = ImsLogger::error(ims::_logger, (uint64_t)&v35, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"No valid remote IP address for ImsListenSocket ", 47);
      *(_BYTE *)(v22 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v22 + 17) = 0;
      if (v34 < 0)
        operator delete(__p);
      if (v37 < 0)
        operator delete(v35);
      close(v41[0]);
    }
    v23 = v39;
    if (v39)
    {
      v24 = (unint64_t *)&v39->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
}

void sub_1BEFC4254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void ImsListenSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X7>, uint64_t a6@<X8>, char a7)
{
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  const sockaddr *v16;
  int *v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD v28[2];
  void *__p[2];
  char v30;
  void *v31[2];
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36[2];
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v28[0] = &off_1E78B7BD8;
  v28[1] = 0;
  v13 = *a2;
  v12 = (std::__shared_weak_count *)a2[1];
  v38 = *a2;
  v39 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v15 = __ldxr(p_shared_owners);
    while (__stxr(v15 + 1, p_shared_owners));
  }
  v16 = (const sockaddr *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 72))(v13);
  *(_DWORD *)(a1 + 64) = v16->sa_family;
  std::string::operator=((std::string *)(a1 + 96), a4);
  v17 = (int *)socket(*(_DWORD *)(a1 + 64), 1, 0);
  if ((v17 & 0x80000000) != 0)
  {
    *(_QWORD *)(a6 + 64) = 0;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    v21 = *__error();
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_QWORD *)a6 = &off_1E78B7238;
    *(_QWORD *)(a6 + 8) = &_posixDomain;
    *(_DWORD *)(a6 + 16) = v21;
    std::string::basic_string[abi:ne180100]<0>(v31, "net");
    std::string::basic_string[abi:ne180100]<0>(v36, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v22 = ImsLogger::error(ims::_logger, (uint64_t)v31, (uint64_t)v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"ImsListenSocket: failed to create socket : ", 43);
    *(_BYTE *)(v22 + 17) = 0;
    ImsResult::log((ImsResult *)a6, (ImsOutStream *)v22);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v37 < 0)
      operator delete(v36[0]);
    if (SBYTE7(v32) < 0)
      operator delete(v31[0]);
  }
  else
  {
    v18 = *(unsigned __int8 *)(a5 + 23);
    if ((v18 & 0x80u) != 0)
      v18 = *(_QWORD *)(a5 + 8);
    if (v18)
    {
      v35 = 0;
      v33 = 0u;
      v34 = 0u;
      *(_OWORD *)v31 = 0u;
      v32 = 0u;
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 136))(v13);
      ImsSocket::bindSocketToInterface(v17, v19, a5, (uint64_t)v31);
      if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v31[1] + 24))(v31[1], v32))
      {
        std::string::basic_string[abi:ne180100]<0>(v36, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v20 = ImsLogger::error(ims::_logger, (uint64_t)v36, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Unable to bind socket to interface: ", 36);
        *(_BYTE *)(v20 + 17) = 0;
        (*((void (**)(void **, uint64_t))v31[0] + 2))(v31, v20);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v20 + 17) = 0;
        if (v30 < 0)
          operator delete(__p[0]);
        if (v37 < 0)
          operator delete(v36[0]);
      }
      ImsResult::~ImsResult((ImsResult *)v31);
    }
    if (a7)
    {
      ImsSocket::setReusePortOptionForSocket((ImsSocket *)v17, (uint64_t)v31);
      ImsResult::~ImsResult((ImsResult *)v31);
    }
    if (bind((int)v17, v16, v16->sa_len) < 0)
    {
      *(_QWORD *)(a6 + 64) = 0;
      *(_OWORD *)(a6 + 32) = 0u;
      *(_OWORD *)(a6 + 48) = 0u;
      *(_OWORD *)a6 = 0u;
      *(_OWORD *)(a6 + 16) = 0u;
      v23 = *__error();
      *(_OWORD *)(a6 + 24) = 0u;
      *(_OWORD *)(a6 + 40) = 0u;
      *(_OWORD *)(a6 + 56) = 0u;
      *(_QWORD *)a6 = &off_1E78B7238;
      *(_QWORD *)(a6 + 8) = &_posixDomain;
      *(_DWORD *)(a6 + 16) = v23;
      std::string::basic_string[abi:ne180100]<0>(v36, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::error(ims::_logger, (uint64_t)v36, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Couldn't bind listen socket to ", 31);
      *(_BYTE *)(v24 + 17) = 0;
      v25 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 40))(v13, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v25 + 17) = 0;
      ImsResult::log((ImsResult *)a6, (ImsOutStream *)v25);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (v30 < 0)
        operator delete(__p[0]);
      if (v37 < 0)
        operator delete(v36[0]);
      close((int)v17);
    }
    else
    {
      ImsListenSocket::initialize((ImsResult *)a6, (_QWORD *)a1, (ImsSocket *)v17, a3, (uint64_t)a4);
    }
  }
  if (v12)
  {
    v26 = (unint64_t *)&v12->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  ims::CFType::~CFType((ims::CFType *)v28);
}

void sub_1BEFC4790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 96);
  ims::CFType::~CFType((ims::CFType *)&a10);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ImsListenSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, const std::string *a4@<X3>, uint64_t a5@<X7>, uint64_t a6@<X8>, char a7)
{
  ImsListenSocket::initializeSocket(a1 - 80, a2, a3, a4, a5, a6, a7);
}

void ImsListenSocket::initializeSocket(ImsSocket *this@<X1>, _QWORD *a2@<X0>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, ImsResult *a5@<X8>)
{
  ImsListenSocket::initialize(a5, a2, this, a3, a4);
}

void `non-virtual thunk to'ImsListenSocket::initializeSocket(ImsSocket *this@<X1>, uint64_t a2@<X0>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, ImsResult *a5@<X8>)
{
  ImsListenSocket::initialize(a5, (_QWORD *)(a2 - 80), this, a3, a4);
}

void ImsListenSocket::setDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 128);
  *(_QWORD *)(a1 + 120) = v3;
  *(_QWORD *)(a1 + 128) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void `non-virtual thunk to'ImsListenSocket::setDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v3;
  *(_QWORD *)(a1 + 48) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

uint64_t ImsListenSocket::setMaxSegmentSizeForSocket(uint64_t this, int a2)
{
  *(_DWORD *)(this + 88) = a2;
  return this;
}

uint64_t `non-virtual thunk to'ImsListenSocket::setMaxSegmentSizeForSocket(uint64_t this, int a2)
{
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t ImsListenSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t `non-virtual thunk to'ImsListenSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this - 48);
  *a2 = *(_QWORD *)(this - 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t ImsListenSocket::closeSocket(ImsListenSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(ImsListenSocket *))(*(_QWORD *)this + 8))(this);
}

uint64_t `non-virtual thunk to'ImsListenSocket::closeSocket(ImsListenSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 8))((char *)this - 80);
}

void ImsListenSocket::~ImsListenSocket(ImsListenSocket *this)
{
  ImsListenSocket::~ImsListenSocket(this);
  JUMPOUT(0x1C3B87100);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E78CDF90;
  *((_QWORD *)this + 10) = &unk_1E78CE000;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*((char *)this + 119) < 0)
    operator delete(*((void **)this + 12));
  ImsSocket::~ImsSocket(this);
}

void ImsListenSocket::resetSocketDelegate(ImsListenSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'ImsListenSocket::~ImsListenSocket(ImsListenSocket *this)
{
  ImsListenSocket::~ImsListenSocket((ImsListenSocket *)((char *)this - 80));
}

{
  ImsListenSocket::~ImsListenSocket((ImsListenSocket *)((char *)this - 80));
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'ImsListenSocket::resetSocketDelegate(ImsListenSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

ImsOutStream *RTCPXRReceiverReferenceTimeReport::toStream(RTCPXRReceiverReferenceTimeReport *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"RTCP XR Receiver Reference Time Report, timestamp: ", 51);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  return a2;
}

uint64_t bambi::XmlParserItem::parseChild(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  uint64_t v7;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (result)
  {
    v7 = result;
    bambi::XmlParser::parseNode(result, a3, a1);
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 56))(v7, a2);
  }
  return result;
}

void bambi::XmlParser::parseNode(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v5;
  uint64_t v6;
  const std::string::value_type *v7;
  const std::string::value_type *v8;
  std::string::size_type size;
  std::string::size_type v10;
  char v11;
  uint64_t i;
  uint64_t v13;
  std::string::size_type j;
  int v15;
  std::string v16;
  void *__p;
  char v18;
  std::string v19;
  void *v20;
  void *v21;
  uint64_t v22;
  std::string v23;

  v3 = *a2;
  if (*a2)
  {
    v20 = 0;
    v21 = 0;
    v22 = 0;
    v5 = *(_QWORD **)(v3 + 72);
    if (a3)
    {
      if (v5 && v5[3])
      {
        std::string::basic_string[abi:ne180100]<0>(&v23, "");
        std::string::basic_string[abi:ne180100]<0>(&v19, *(char **)(*(_QWORD *)(v3 + 72) + 24));
        bambi::XmlParserNamespace::XmlParserNamespace((uint64_t)&v16, &v23, &v19);
        std::vector<bambi::XmlParserNamespace>::push_back[abi:ne180100](&v20, (__int128 *)&v16);
        if (v18 < 0)
          operator delete(__p);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v16.__r_.__value_.__l.__data_);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      for (; v5; v5 = (_QWORD *)*v5)
      {
        memset(&v23, 0, sizeof(v23));
        memset(&v19, 0, sizeof(v19));
        v7 = (const std::string::value_type *)v5[2];
        if (v7)
          std::string::__assign_external(&v23, v7);
        v8 = (const std::string::value_type *)v5[3];
        if (v8)
          std::string::__assign_external(&v19, v8);
        size = HIBYTE(v23.__r_.__value_.__r.__words[2]);
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v23.__r_.__value_.__l.__size_;
        if (size)
          goto LABEL_28;
        v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v10 = v19.__r_.__value_.__l.__size_;
        if (v10)
        {
LABEL_28:
          bambi::XmlParserNamespace::XmlParserNamespace((uint64_t)&v16, &v23, &v19);
          std::vector<bambi::XmlParserNamespace>::push_back[abi:ne180100](&v20, (__int128 *)&v16);
          if (v18 < 0)
            operator delete(__p);
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        }
        if (v11 < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
      }
    }
    if (v20 != v21)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 40))(a1, &v20);
    for (i = *(_QWORD *)(v3 + 88); i; i = *(_QWORD *)(i + 48))
    {
      if (*(_QWORD *)(i + 16))
      {
        v13 = *(_QWORD *)(i + 24);
        if (v13)
        {
          if (*(_QWORD *)(v13 + 80))
          {
            memset(&v16, 0, sizeof(v16));
            std::string::basic_string[abi:ne180100]<0>(&v16, *(char **)(i + 16));
            memset(&v23, 0, sizeof(v23));
            std::string::basic_string[abi:ne180100]<0>(&v23, *(char **)(*(_QWORD *)(i + 24) + 80));
            (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 32))(a1, &v16, &v23);
            if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v23.__r_.__value_.__l.__data_);
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v16.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    memset(&v16, 0, sizeof(v16));
    memset(&v23, 0, sizeof(v23));
    if (*(_DWORD *)(v3 + 8) == 3)
    {
      std::string::__assign_external(&v23, *(const std::string::value_type **)(v3 + 80));
      std::string::__assign_external(&v16, *(const std::string::value_type **)(v3 + 16));
      (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 24))(a1, &v16, &v23);
    }
    for (j = *(_QWORD *)(v3 + 24); j; j = *(_QWORD *)(j + 48))
    {
      v15 = *(_DWORD *)(j + 8);
      if (v15 == 3)
      {
        std::string::__assign_external(&v23, *(const std::string::value_type **)(j + 80));
        std::string::__assign_external(&v16, *(const std::string::value_type **)(v3 + 16));
        (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 24))(a1, &v16, &v23);
      }
      else if (v15 == 1)
      {
        std::string::__assign_external(&v16, *(const std::string::value_type **)(j + 16));
        v19.__r_.__value_.__r.__words[0] = j;
        (*(void (**)(uint64_t, std::string *, std::string *))(*(_QWORD *)a1 + 64))(a1, &v16, &v19);
      }
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
    v16.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
    std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v16);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "bambi.xml");
    std::string::basic_string[abi:ne180100]<0>(&v23, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)&v16, (uint64_t)&v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"NULL parser node", 16);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFC4F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  uint64_t v25;

  ims::AccessNetwork::~AccessNetwork(&a10);
  if (a24 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 33) < 0)
    operator delete(*(void **)(v25 - 56));
  *(_QWORD *)(v25 - 56) = &a25;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)(v25 - 56));
  _Unwind_Resume(a1);
}

void bambi::XmlParserItem::parseSimpleTextChild(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = &off_1E78CE0D0;
  v4[1] = a4;
  bambi::XmlParser::parseNode((uint64_t)v4, a3, a1);
}

void bambi::XmlParserItem::parseSimpleUintChild(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = &off_1E78CE158;
  v4[1] = a4;
  bambi::XmlParser::parseNode((uint64_t)v4, a3, a1);
}

void bambi::XmlParserItem::parseSimpleUriChild(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  _QWORD v4[2];

  v4[0] = &off_1E78CE1E0;
  v4[1] = a4;
  bambi::XmlParser::parseNode((uint64_t)v4, a3, a1);
}

void bambi::XmlParserTextItem::setText(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::string __p;

  if (*(_QWORD *)(a1 + 8))
  {
    memset(&__p, 0, sizeof(__p));
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      __p = *(std::string *)a3;
    ims::chomp(&__p, "\r\n\t ", 3);
    std::string::operator=(*(std::string **)(a1 + 8), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1BEFC5178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unint64_t bambi::XmlParserUintItem::setText(unint64_t result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  const char *v4;

  if (*(_QWORD *)(result + 8))
  {
    v3 = result;
    if (*(char *)(a3 + 23) >= 0)
      v4 = (const char *)a3;
    else
      v4 = *(const char **)a3;
    result = strtoul(v4, 0, 10);
    **(_DWORD **)(v3 + 8) = result;
  }
  return result;
}

uint64_t bambi::XmlParserUriItem::setText(uint64_t a1, uint64_t a2, std::string *a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 8);
  if (result)
    return SipUri::fromString(result, a3);
  return result;
}

void std::vector<bambi::XmlParserNamespace>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(_QWORD *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (_QWORD)*a1) >> 4);
    v12 = v11 + 1;
    if (v11 + 1 > 0x555555555555555)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v13 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x2AAAAAAAAAAAAAALL)
      v14 = 0x555555555555555;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<bambi::XmlParserNamespace>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[48 * v11];
    v17 = *a2;
    *((_QWORD *)v16 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v16 = v17;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v18 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v16 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v16 + 24) = v18;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v19 = (char *)*a1;
    v20 = (char *)a1[1];
    if (v20 == *a1)
    {
      v10 = v16 + 48;
      *a1 = v16;
      a1[1] = v16 + 48;
      a1[2] = &v15[48 * v14];
    }
    else
    {
      v21 = &v15[48 * v11];
      do
      {
        v22 = *((_OWORD *)v20 - 3);
        *((_QWORD *)v21 - 4) = *((_QWORD *)v20 - 4);
        *((_OWORD *)v21 - 3) = v22;
        *((_QWORD *)v20 - 5) = 0;
        *((_QWORD *)v20 - 4) = 0;
        *((_QWORD *)v20 - 6) = 0;
        v23 = *(_OWORD *)(v20 - 24);
        *((_QWORD *)v21 - 1) = *((_QWORD *)v20 - 1);
        *(_OWORD *)(v21 - 24) = v23;
        v21 -= 48;
        *((_QWORD *)v20 - 2) = 0;
        *((_QWORD *)v20 - 1) = 0;
        *((_QWORD *)v20 - 3) = 0;
        v20 -= 48;
      }
      while (v20 != v19);
      v20 = (char *)*a1;
      v24 = (uint64_t)a1[1];
      v10 = v16 + 48;
      *a1 = v21;
      a1[1] = v16 + 48;
      a1[2] = &v15[48 * v14];
      while ((char *)v24 != v20)
      {
        v24 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v24);
      }
    }
    if (v20)
      operator delete(v20);
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v7 = v8;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v9 = *(__int128 *)((char *)a2 + 24);
    *(_QWORD *)(v7 + 40) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v10 = (char *)(v7 + 48);
  }
  a1[1] = v10;
}

uint64_t bambi::XmlParser::parseXml(bambi::XmlParser *this, const char *a2, uint64_t a3, bambi::XmlParserItem *a4)
{
  const xmlDoc *Memory;
  xmlDoc *v8;
  xmlNodePtr RootElement;
  xmlNodePtr v10;
  uint64_t v12;
  _BYTE *v13;
  void *v14[2];
  char v15;
  void *v16[2];
  char v17;
  void *__p[2];
  uint64_t v19;

  if (!a3)
    return 0;
  Memory = xmlReadMemory((const char *)this, (int)a2, "", 0, 1);
  if (!Memory)
  {
    __p[0] = 0;
    __p[1] = 0;
    v19 = 0;
    std::string::basic_string[abi:ne180100](__p, this, (size_t)a2);
    std::string::basic_string[abi:ne180100]<0>(v16, "bambi.xml");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::error(ims::_logger, (uint64_t)v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Unable to parse xml:", 20);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v15 < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    std::string::basic_string[abi:ne180100]<0>(v16, "bambi.xml");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)v16, (uint64_t)v14);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)v13 + 32))(v13, __p);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13[17] = 0;
    if (v15 < 0)
      operator delete(v14[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    return 0;
  }
  v8 = (xmlDoc *)Memory;
  RootElement = xmlDocGetRootElement(Memory);
  if (RootElement)
  {
    v10 = RootElement;
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)RootElement->name);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a3 + 16))(a3, __p);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    __p[0] = v10;
    bambi::XmlParser::parseNode(a3, (uint64_t *)__p, 0);
  }
  xmlFreeDoc(v8);
  return 1;
}

void sub_1BEFC55C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t bambi::XmlParser::parseXml(bambi::XmlParser *a1, uint64_t a2, uint64_t a3, bambi::XmlParserItem *a4)
{
  const char *v5;

  if (*((char *)a1 + 23) < 0)
  {
    v5 = (const char *)*((_QWORD *)a1 + 1);
    if (v5)
    {
      a1 = *(bambi::XmlParser **)a1;
      return bambi::XmlParser::parseXml(a1, v5, a2, a4);
    }
  }
  else
  {
    v5 = (const char *)*((unsigned __int8 *)a1 + 23);
    if (*((_BYTE *)a1 + 23))
      return bambi::XmlParser::parseXml(a1, v5, a2, a4);
  }
  return 1;
}

void bambi::XmlParserItem::~XmlParserItem(bambi::XmlParserItem *this)
{
  JUMPOUT(0x1C3B87100);
}

void bambi::XmlParserTextItem::~XmlParserTextItem(bambi::XmlParserTextItem *this)
{
  JUMPOUT(0x1C3B87100);
}

void bambi::XmlParserUintItem::~XmlParserUintItem(bambi::XmlParserUintItem *this)
{
  JUMPOUT(0x1C3B87100);
}

void bambi::XmlParserUriItem::~XmlParserUriItem(bambi::XmlParserUriItem *this)
{
  JUMPOUT(0x1C3B87100);
}

uint64_t bambi::XmlParserNamespace::XmlParserNamespace(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string *v5;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v5 = (std::string *)(a1 + 24);
  *(_OWORD *)a1 = 0u;
  std::string::operator=((std::string *)a1, a2);
  std::string::operator=(v5, a3);
  return a1;
}

void sub_1BEFC56EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

std::vector<unsigned int>::iterator std::vector<unsigned int>::insert(std::vector<unsigned int> *this, std::vector<unsigned int>::const_iterator __position, std::vector<unsigned int>::value_type *__x)
{
  unsigned int *i;
  const unsigned int *end;
  std::__compressed_pair<unsigned int *> *p_end_cap;
  unsigned int *v8;
  unsigned int *value;
  std::__wrap_iter<const unsigned int *>::iterator_type v10;
  const unsigned int *v11;
  unsigned int *v12;
  unsigned int v13;
  std::vector<unsigned int>::pointer begin;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unsigned int *v19;
  std::__split_buffer<unsigned int> __v;

  i = (unsigned int *)__position.__i_;
  end = this->__end_;
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  v8 = value;
  if (end >= value)
  {
    begin = this->__begin_;
    v15 = end - this->__begin_ + 1;
    if (v15 >> 62)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v16 = __position.__i_ - begin;
    v17 = (char *)v8 - (char *)begin;
    if (v17 >> 1 > v15)
      v15 = v17 >> 1;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL)
      v18 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v18 = v15;
    __v.__end_cap_.__value_ = (std::allocator<unsigned int> *)p_end_cap;
    if (v18)
      v19 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)p_end_cap, v18);
    else
      v19 = 0;
    __v.__first_ = v19;
    __v.__begin_ = &v19[v16];
    __v.__end_ = __v.__begin_;
    __v.__end_cap_.__value_ = &v19[v18];
    std::__split_buffer<unsigned int>::push_back(&__v, __x);
    i = std::vector<unsigned int>::__swap_out_circular_buffer(this, &__v, i);
    if (__v.__end_ != __v.__begin_)
      __v.__end_ = (std::__split_buffer<unsigned int>::pointer)((char *)__v.__end_
                                                              + (((char *)__v.__begin_ - (char *)__v.__end_ + 3) & 0xFFFFFFFFFFFFFFFCLL));
    if (__v.__first_)
      operator delete(__v.__first_);
  }
  else if (__position.__i_ == end)
  {
    *__position.__i_ = *__x;
    this->__end_ = (std::vector<unsigned int>::pointer)(__position.__i_ + 1);
  }
  else
  {
    v10 = __position.__i_ + 1;
    v11 = end - 1;
    v12 = (unsigned int *)end;
    while (v11 < end)
    {
      v13 = *v11++;
      *v12++ = v13;
    }
    this->__end_ = v12;
    if (end != v10)
      memmove((void *)&end[-(end - v10)], __position.__i_, (char *)end - (char *)v10);
    *i = *__x;
  }
  return (std::vector<unsigned int>::iterator)i;
}

void sub_1BEFC5880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(_QWORD *result, const void *a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BEFC5914(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned int>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 62)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::__split_buffer<unsigned int>::push_back(std::__split_buffer<unsigned int> *this, std::__split_buffer<unsigned int>::value_type *__x)
{
  std::__split_buffer<unsigned int>::pointer end;
  std::__split_buffer<unsigned int>::pointer begin;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int64_t v14;
  unsigned int *v15;
  unint64_t v16;
  unsigned int *v17;
  uint64_t v18;
  unsigned int *v19;
  std::__split_buffer<unsigned int>::pointer v20;
  uint64_t v21;
  uint64_t v22;
  _DWORD *v23;
  int v24;
  std::__split_buffer<unsigned int>::pointer first;

  end = this->__end_;
  if (end == this->__end_cap_.__value_)
  {
    begin = this->__begin_;
    v6 = (char *)begin - (char *)this->__first_;
    if (begin <= this->__first_)
    {
      if (end == this->__first_)
        v16 = 1;
      else
        v16 = ((char *)end - (char *)this->__first_) >> 1;
      v17 = (unsigned int *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)this->__end_cap_.__value_, v16);
      v19 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
      v20 = this->__begin_;
      end = v19;
      v21 = (char *)this->__end_ - (char *)v20;
      if (v21)
      {
        end = (unsigned int *)((char *)v19 + (v21 & 0xFFFFFFFFFFFFFFFCLL));
        v22 = 4 * (v21 >> 2);
        v23 = (unsigned int *)((char *)v17 + (v16 & 0xFFFFFFFFFFFFFFFCLL));
        do
        {
          v24 = *v20++;
          *v23++ = v24;
          v22 -= 4;
        }
        while (v22);
      }
      first = this->__first_;
      this->__first_ = v17;
      this->__begin_ = v19;
      this->__end_ = end;
      this->__end_cap_.__value_ = &v17[v18];
      if (first)
      {
        operator delete(first);
        end = this->__end_;
      }
    }
    else
    {
      v7 = v6 >> 2;
      v8 = v6 >> 2 < -1;
      v9 = (v6 >> 2) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &begin[-v12];
      v14 = (char *)end - (char *)begin;
      if (end != begin)
      {
        memmove(&begin[-v12], begin, (char *)end - (char *)begin);
        end = this->__begin_;
      }
      v15 = &end[v11];
      end = (unsigned int *)((char *)v13 + v14);
      this->__begin_ = v15;
    }
  }
  *end = *__x;
  this->__end_ = end + 1;
}

void SipMaxForwardsHeader::~SipMaxForwardsHeader(void **this)
{
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipMaxForwardsHeader::clone(SipMaxForwardsHeader *this)
{
  uint64_t v2;

  v2 = operator new();
  SipHeader::SipHeader((SipHeader *)v2, this);
  *(_DWORD *)(v2 + 60) = *((_DWORD *)this + 15);
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)v2 = &off_1E78CE2F8;
  return v2;
}

void sub_1BEFC5B00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C401DA35BB1);
  _Unwind_Resume(a1);
}

_QWORD *SDPMediaDirection::key@<X0>(SDPMediaDirection *this@<X0>, _QWORD *a2@<X8>)
{
  return ims::toString<MediaDirection>((unsigned int *)this + 10, a2);
}

void SDPMediaDirection::~SDPMediaDirection(void **this)
{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
  JUMPOUT(0x1C3B87100);
}

void SDPMediaDirection::value(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void ims::analytics::AnalyticsEvent::send(ims::analytics::AnalyticsEvent *this)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  unsigned __int8 v5;
  uint64_t v6;
  _QWORD *v7;
  xpc_object_t object;
  void *__p[2];
  unsigned __int8 v10;
  _OWORD v11[4];
  void *v12[2];
  __int128 v13;
  __int128 v14;
  _OWORD v15[9];
  uint64_t v16;
  xpc_object_t v17;

  v17 = 0;
  (*(void (**)(xpc_object_t *__return_ptr))(*(_QWORD *)this + 16))(&v17);
  v16 = 0;
  v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)v12 = 0u;
  v13 = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"com.apple.Telephony.", 20);
  (*(void (**)(void **__return_ptr, ims::analytics::AnalyticsEvent *))(*(_QWORD *)this + 24))(__p, this);
  if ((v10 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v10 & 0x80u) == 0)
    v4 = v10;
  else
    v4 = (uint64_t)__p[1];
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, v4);
  if ((char)v10 < 0)
    operator delete(__p[0]);
  v5 = atomic_load((unsigned __int8 *)&_MergedGlobals_10);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&_MergedGlobals_10))
  {
    v7 = operator new(0x20uLL);
    v7[1] = 0;
    v7[2] = 0;
    *v7 = &off_1E78C93A0;
    v7[3] = &off_1E78C93F0;
    qword_1ED70EC98 = (uint64_t)(v7 + 3);
    qword_1ED70ECA0 = (uint64_t)v7;
    __cxa_atexit((void (*)(void *))std::shared_ptr<ims::analytics::AnalyticsSender>::~shared_ptr[abi:ne180100], &qword_1ED70EC98, &dword_1BEDF4000);
    __cxa_guard_release(&_MergedGlobals_10);
  }
  v6 = qword_1ED70EC98;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, __p);
  object = v17;
  if (v17)
    xpc_retain(v17);
  else
    object = xpc_null_create();
  (*(void (**)(uint64_t, void **, xpc_object_t *))(*(_QWORD *)v6 + 16))(v6, __p, &object);
  xpc_release(object);
  object = 0;
  if ((char)v10 < 0)
    operator delete(__p[0]);
  *(_QWORD *)&v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(v12[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v15);
  xpc_release(v17);
}

void sub_1BEFC5DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  __cxa_guard_abort(&_MergedGlobals_10);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  xpc_release(*(xpc_object_t *)(v16 - 48));
  _Unwind_Resume(a1);
}

void sub_1BEFC5E50()
{
  JUMPOUT(0x1BEFC5E40);
}

uint64_t std::shared_ptr<ims::analytics::AnalyticsSender>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return a1;
}

void SipSessionExpiresHeader::~SipSessionExpiresHeader(SipSessionExpiresHeader *this)
{
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipParameterHeader *SipSessionExpiresHeader::clone(SipSessionExpiresHeader *this)
{
  SipParameterHeader *v2;

  v2 = (SipParameterHeader *)operator new();
  SipParameterHeader::SipParameterHeader(v2, this);
  *((_DWORD *)v2 + 26) = *((_DWORD *)this + 26);
  *(_QWORD *)v2 = &off_1E78CE3F8;
  return v2;
}

void sub_1BEFC5FA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40C8D300F0);
  _Unwind_Resume(a1);
}

uint64_t NetworkInterface::NetworkInterface(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = &off_1E78CE498;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 32), a2);
  *(_DWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_1BEFC602C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  void **v3;
  va_list va;

  va_start(va, a2);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void NetworkInterface::NetworkInterface(NetworkInterface *this, const NetworkInterface *a2)
{
  char **v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  *(_QWORD *)this = &off_1E78CE498;
  *(_OWORD *)((char *)this + 8) = 0u;
  v4 = (char **)((char *)this + 8);
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
  *((_DWORD *)this + 14) = *((_DWORD *)a2 + 14);
  v5 = *((_QWORD *)a2 + 1);
  v6 = *((_QWORD *)a2 + 2);
  while (v5 != v6)
  {
    (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)v5 + 32))(&v10);
    std::vector<std::shared_ptr<LazuliHeader>>::push_back[abi:ne180100](v4, &v10);
    v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
    if (*((_QWORD *)&v10 + 1))
    {
      v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v5 += 16;
  }
}

void sub_1BEFC6134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  va_list va;

  va_start(va, a4);
  if (*(char *)(v4 + 55) < 0)
    operator delete(*v5);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void NetworkInterface::~NetworkInterface(void **this)
{
  void **v2;

  *this = &off_1E78CE498;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  v2 = this + 1;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v2);
}

{
  NetworkInterface::~NetworkInterface(this);
  JUMPOUT(0x1C3B87100);
}

BOOL NetworkInterface::matchAddress(uint64_t a1, _QWORD *a2, int a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  std::string::basic_string[abi:ne180100]<0>(v12, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"matchAddress (", 14);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": addressTypeMask=", 18);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 136))(*a2);
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", FlavorMask=", 13);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for (addressTypeMask=", 22);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", addressFlavorMask=", 20);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  return ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a2 + 136))(*a2) & a3) != 0
      && ((a4 & 2) != 0 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 112))(*a2) & 1) == 0)
      && ((a4 & 4) != 0 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 160))(*a2) & 1) == 0)
      && ((a4 & 0x10) != 0 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 176))(*a2) & 1) == 0)
      && ((a4 & 0x20) != 0 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 184))(*a2) & 1) == 0)
      && ((a4 & 8) != 0 || ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 168))(*a2) & 1) == 0);
}

void sub_1BEFC6458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL NetworkInterface::allAddresses(unint64_t *a1, unint64_t *a2, int a3, char a4)
{
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[2];

  v5 = a1[1];
  v6 = a1[2];
  if (v5 != v6)
  {
    while (1)
    {
      v9 = *(std::__shared_weak_count **)(v5 + 8);
      v16[0] = *(_QWORD *)v5;
      v16[1] = v9;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      LODWORD(a1) = NetworkInterface::matchAddress((uint64_t)a1, v16, a3, a4);
      v12 = (int)a1;
      if (v9)
      {
        v13 = (unint64_t *)&v9->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
          break;
      }
      if ((_DWORD)a1)
        goto LABEL_10;
LABEL_11:
      v5 += 16;
      if (v5 == v6)
        return *a2 != a2[1];
    }
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v12)
      goto LABEL_11;
LABEL_10:
    a1 = std::vector<std::shared_ptr<IpAddress> const,std::allocator<std::shared_ptr<IpAddress> const>>::push_back[abi:ne180100](a2, (__int128 *)v5);
    goto LABEL_11;
  }
  return *a2 != a2[1];
}

void sub_1BEFC6578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t *std::vector<std::shared_ptr<IpAddress> const,std::allocator<std::shared_ptr<IpAddress> const>>::push_back[abi:ne180100](unint64_t *result, __int128 *a2)
{
  unint64_t *v3;
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  __int128 v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  uint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  unint64_t *v29;

  v3 = result;
  v4 = result[2];
  v5 = (_QWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    v10 = *result;
    v11 = (uint64_t)((uint64_t)v5 - *result) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v13 = v4 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v29 = result + 2;
    if (v14 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v15 = (char *)operator new(16 * v14);
    v16 = &v15[16 * v11];
    v17 = *a2;
    *(_OWORD *)v16 = *a2;
    if (*((_QWORD *)&v17 + 1))
    {
      v18 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v10 = *v3;
      v5 = (_QWORD *)v3[1];
    }
    v9 = v16 + 16;
    if (v5 == (_QWORD *)v10)
    {
      v24 = vdupq_n_s64(v10);
    }
    else
    {
      do
      {
        v20 = *(v5 - 2);
        v5 -= 2;
        *((_QWORD *)v16 - 2) = v20;
        v16 -= 16;
        v21 = v5[1];
        *((_QWORD *)v16 + 1) = v21;
        if (v21)
        {
          v22 = (unint64_t *)(v21 + 8);
          do
            v23 = __ldxr(v22);
          while (__stxr(v23 + 1, v22));
        }
      }
      while (v5 != (_QWORD *)v10);
      v24 = *(int64x2_t *)v3;
    }
    *v3 = (unint64_t)v16;
    v3[1] = (unint64_t)v9;
    v27 = v24;
    v25 = v3[2];
    v3[2] = (unint64_t)&v15[16 * v14];
    v28 = v25;
    v26 = v24.i64[0];
    result = (unint64_t *)std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v26);
  }
  else
  {
    *v5 = *(_QWORD *)a2;
    v6 = *((_QWORD *)a2 + 1);
    v5[1] = v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    v9 = v5 + 2;
  }
  v3[1] = (unint64_t)v9;
  return result;
}

void NetworkInterface::firstAddress(NetworkInterface *this@<X0>, int a2@<W1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BYTE *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  _QWORD v24[2];
  void *__p[2];
  char v26;
  void *v27[2];
  char v28;

  std::string::basic_string[abi:ne180100]<0>(v27, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"firstAddress: remote(addressTypeMask=", 37);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)") for addressFlavorMask=", 24);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"...", 3);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  v10 = (_QWORD *)*((_QWORD *)this + 1);
  v11 = (_QWORD *)*((_QWORD *)this + 2);
  while (v10 != v11)
  {
    v12 = (std::__shared_weak_count *)v10[1];
    v24[0] = *v10;
    v24[1] = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    LODWORD(v9) = NetworkInterface::matchAddress(v9, v24, a2, a3);
    v15 = v9;
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (v15)
    {
      std::string::basic_string[abi:ne180100]<0>(v27, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"firstAddress: found local address ", 34);
      *(_BYTE *)(v19 + 17) = 0;
      v20 = (_BYTE *)(*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v10 + 40))(*v10, v19);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v20[17] = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (v28 < 0)
        operator delete(v27[0]);
      v21 = v10[1];
      *a4 = *v10;
      a4[1] = v21;
      if (v21)
      {
        v22 = (unint64_t *)(v21 + 8);
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      return;
    }
    v10 += 2;
  }
  std::string::basic_string[abi:ne180100]<0>(v27, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v18 = ImsLogger::debug(ims::_logger, (uint64_t)v27, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"firstAddress: failed", 20);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v27[0]);
  *a4 = 0;
  a4[1] = 0;
}

void sub_1BEFC6A24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void NetworkInterface::firstAddress(NetworkInterface *this@<X0>, int a2@<W1>, int **a3@<X2>, _QWORD *a4@<X8>)
{
  int *v5;
  int *v6;
  int v9;

  v5 = *a3;
  v6 = a3[1];
  if (*a3 == v6)
  {
LABEL_4:
    *a4 = 0;
    a4[1] = 0;
  }
  else
  {
    while (1)
    {
      v9 = *v5;
      *a4 = 0;
      a4[1] = 0;
      NetworkInterface::firstAddress(this, a2, v9, a4);
      if (*a4)
        break;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a4);
      if (++v5 == v6)
        goto LABEL_4;
    }
  }
}

ImsOutStream *NetworkInterface::log(NetworkInterface *this, ImsOutStream *a2)
{
  _QWORD *i;
  _QWORD *v5;
  std::string __p;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Interface ", 10);
  *((_BYTE *)a2 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 32));
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (*((_DWORD *)this + 14))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"mtu ", 4);
    *((_BYTE *)a2 + 17) = 0;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
  }
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_QWORD *)*((_QWORD *)this + 1);
  for (i = (_QWORD *)*((_QWORD *)this + 2); v5 != i; *((_BYTE *)a2 + 17) = 0)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  ", 2);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(_QWORD, ImsOutStream *))(*(_QWORD *)*v5 + 40))(*v5, a2);
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 112))(*v5))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" linklocal", 10);
      *((_BYTE *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 168))(*v5))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" deprecated", 11);
      *((_BYTE *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 160))(*v5))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" temporary", 10);
      *((_BYTE *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 176))(*v5))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" detached", 9);
      *((_BYTE *)a2 + 17) = 0;
    }
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*v5 + 184))(*v5))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" not ready", 10);
      *((_BYTE *)a2 + 17) = 0;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": flavor mask = ", 16);
    *((_BYTE *)a2 + 17) = 0;
    v5 += 2;
    std::ostream::operator<<();
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  return a2;
}

void sub_1BEFC6D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

std::string *NetworkInterface::loggableName@<X0>(NetworkInterface *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 32));
}

void SipMultiStringHeader::SipMultiStringHeader(SipMultiStringHeader *this, const SipMultiStringHeader *a2)
{
  _QWORD *v3;

  SipHeader::SipHeader(this, a2);
  *v3 = off_1E78CE4E0;
  std::set<std::string>::set[abi:ne180100](v3 + 8, (uint64_t)a2 + 64);
}

void sub_1BEFC6DCC(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipMultiStringHeader::encodeValue(SipMultiStringHeader *this, ImsOutStream *a2)
{
  char *v2;
  char *v3;
  char *v6;
  char *v7;
  BOOL v8;

  v2 = (char *)*((_QWORD *)this + 8);
  v3 = (char *)this + 72;
  if (v2 != (char *)this + 72)
  {
    do
    {
      if (v2 != *((char **)this + 8))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)",", 1);
        *((_BYTE *)a2 + 17) = 0;
      }
      (*(void (**)(ImsOutStream *, _QWORD *))(*(_QWORD *)a2 + 32))(a2, (_QWORD *)v2 + 4);
      v6 = (char *)*((_QWORD *)v2 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(char **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (char *)*((_QWORD *)v2 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v2;
          v2 = v7;
        }
        while (!v8);
      }
      v2 = v7;
    }
    while (v7 != v3);
  }
  return 1;
}

uint64_t SipMultiStringHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  std::string::size_type v3;
  uint64_t **v4;
  std::string __p;

  v3 = 0;
  v4 = (uint64_t **)(a1 + 64);
  memset(&__p, 0, sizeof(__p));
  while (1)
  {
    v3 = ims::nextToken(a2, v3, &__p, 0x2Cu);
    if (v3 == -1)
      break;
    ims::chomp(&__p, "\r\n\t ", 3);
    std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v4, (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEFC6F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipMultiStringHeader::mergeHeader(SipMultiStringHeader *this, const SipHeader *lpsrc)
{
  void *v3;
  void *v4;

  v4 = v3;
  if (v3)
    SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>((uint64_t *)this, *((void ***)v3 + 8), (void **)v3 + 9);
  return v4 != 0;
}

void SipMessageEncodingMap::SipMessageEncodingMap(SipMessageEncodingMap *this)
{
  char *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  SipProxyAuthorizationHeader *v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  SipRoutableLocalAddressHeader *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  _QWORD *v68;
  uint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  SipSdpBody *v76;
  SipCallWaitingInfoBody *v77;
  _QWORD *v78;
  uint64_t v79;
  SipDialogInfoBody *v80;
  _QWORD *v81;
  SipMultiPartBody *v82;
  _QWORD *v83;
  _QWORD *v84;
  SipLocationDiscoveryBody *v85;
  void *v86[2];
  char v87;
  std::string __p;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_OWORD *)((char *)this + 72) = 0u;
  *((_QWORD *)this + 11) = 0;
  *((_DWORD *)this + 24) = 1065353216;
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 15) = 0;
  *((_BYTE *)this + 132) = 0;
  *(_OWORD *)((char *)this + 136) = 0u;
  v2 = (char *)this + 136;
  *(_OWORD *)((char *)this + 152) = 0u;
  *((_DWORD *)this + 42) = 1065353216;
  *((_QWORD *)this + 22) = 0;
  *((_QWORD *)this + 23) = 0;
  *((_WORD *)this + 64) = 256;
  *((_BYTE *)this + 130) = 0;
  v3 = operator new();
  SipHeader::SipHeader(v3, (const std::string *)"Accept-Contact");
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = 0;
  *(_QWORD *)(v3 + 80) = 0;
  *(_QWORD *)v3 = &off_1E78D1408;
  *(_BYTE *)(v3 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "a");
  SipMessageEncodingMap::addHeaderPrototype(this, v3, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v4 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v4, (const std::string *)"Accept-Encoding");
  v4[10] = 0;
  v4[9] = 0;
  v4[8] = v4 + 9;
  *v4 = &off_1E78D1928;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v4, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = operator new();
  SipHeader::SipHeader(v5, (const std::string *)"Accept");
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = v5 + 72;
  *(_QWORD *)v5 = &off_1E78B9850;
  *(_BYTE *)(v5 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v5, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v6, (const std::string *)"Accept-Language");
  v6[10] = 0;
  v6[9] = 0;
  v6[8] = v6 + 9;
  *v6 = &off_1E78D0A08;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v6, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v7, (const std::string *)"Alert-Info");
  v7[8] = 0;
  v7[9] = 0;
  v7[10] = 0;
  *v7 = &off_1E78EC448;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v7, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = operator new();
  SipHeader::SipHeader(v8, (const std::string *)"Allow-Events");
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 64) = v8 + 72;
  *(_QWORD *)v8 = &off_1E78D1890;
  *(_BYTE *)(v8 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "u");
  SipMessageEncodingMap::addHeaderPrototype(this, v8, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = operator new();
  SipHeader::SipHeader(v9, (const std::string *)"Allow");
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_QWORD *)(v9 + 64) = v9 + 72;
  *(_QWORD *)v9 = &off_1E78E8400;
  *(_BYTE *)(v9 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v9, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v10 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v10, (const std::string *)"Authorization");
  *v10 = &off_1E78CC338;
  v10[8] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v10, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v11, &SipHeader::kHeaderCallId, &__p);
  *(_QWORD *)v11 = off_1E78EA590;
  *(_BYTE *)(v11 + 88) = 1;
  std::string::basic_string[abi:ne180100]<0>(v86, "i");
  SipMessageEncodingMap::addHeaderPrototype(this, v11, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = operator new();
  SipHeader::SipHeader(v12, (const std::string *)"Call-Info");
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v12 + 72) = v12 + 80;
  *(_WORD *)(v12 + 96) = 256;
  *(_QWORD *)v12 = &off_1E78C1FD8;
  *(_QWORD *)(v12 + 112) = 0;
  *(_QWORD *)(v12 + 120) = 0;
  *(_QWORD *)(v12 + 104) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v12, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v13, (const std::string *)"Contact");
  *v13 = off_1E78C8BA8;
  v13[8] = off_1E78C8C70;
  v13[9] = 0;
  v13[10] = 0;
  v13[11] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "m");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v13, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v14 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v14, (const std::string *)"Content-Encoding", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "e");
  SipMessageEncodingMap::addHeaderPrototype(this, v14, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v15 = operator new();
  SipHeader::SipHeader(v15, (const std::string *)"Content-Length");
  *(_QWORD *)v15 = &off_1E78DBA48;
  *(_DWORD *)(v15 + 60) = 0;
  *(_BYTE *)(v15 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "l");
  SipMessageEncodingMap::addHeaderPrototype(this, v15, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v16 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringParameterHeader::SipStringParameterHeader(v16, (const std::string *)"Content-Type", &__p);
  *(_QWORD *)v16 = off_1E78D98C8;
  *(_BYTE *)(v16 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(v86, "c");
  SipMessageEncodingMap::addHeaderPrototype(this, v16, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v17 = operator new();
  SipHeader::SipHeader(v17, &SipHeader::kHeaderCSeq);
  *(_QWORD *)v17 = off_1E78E8DB8;
  *(_QWORD *)(v17 + 60) = 0;
  *(_QWORD *)(v17 + 76) = 0;
  *(_QWORD *)(v17 + 68) = 0;
  *(_DWORD *)(v17 + 84) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v17, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v18 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v18, (const std::string *)"Date", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v18, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringParameterHeader::SipStringParameterHeader(v19, (const std::string *)"Event", &__p);
  *(_QWORD *)v19 = off_1E78D9F28;
  *(_BYTE *)(v19 + 56) = 0;
  *(_BYTE *)(v19 + 97) = 0;
  std::string::basic_string[abi:ne180100]<0>(v86, "o");
  SipMessageEncodingMap::addHeaderPrototype(this, v19, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v20 = operator new();
  SipHeader::SipHeader(v20, (const std::string *)"Expires");
  *(_QWORD *)v20 = &off_1E78DBA48;
  *(_DWORD *)(v20 + 60) = 0;
  *(_BYTE *)(v20 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v20, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v21 = (_QWORD *)operator new();
  SipUriHeader::SipUriHeader((uint64_t)v21, &SipHeader::kHeaderFrom);
  *v21 = &off_1E78EAF98;
  std::string::basic_string[abi:ne180100]<0>(&__p, "f");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v21, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v22 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v22, (const std::string *)"Info-Package", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v22, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v23 = operator new();
  SipHeader::SipHeader(v23, (const std::string *)"Max-Forwards");
  *(_DWORD *)(v23 + 60) = 0;
  *(_BYTE *)(v23 + 56) = 0;
  *(_QWORD *)v23 = &off_1E78CE2F8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v23, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v24 = operator new();
  SipHeader::SipHeader(v24, (const std::string *)"Min-SE");
  *(_QWORD *)(v24 + 88) = 0;
  *(_QWORD *)(v24 + 80) = 0;
  *(_QWORD *)(v24 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v24 + 72) = v24 + 80;
  *(_WORD *)(v24 + 96) = 256;
  *(_DWORD *)(v24 + 104) = 0;
  *(_QWORD *)v24 = &off_1E78E8BD0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v24, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v25, (const std::string *)"MIME-Version", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v25, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v26 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader((uint64_t)v26, (const std::string *)"P-Bambi-Call-ID", &__p);
  *v26 = off_1E78ED100;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v26, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v27 = operator new();
  SipPAccessNetworkInfoHeader::SipPAccessNetworkInfoHeader(v27, (const std::string *)"P-Access-Network-Info");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v27, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v28 = operator new();
  SipHeader::SipHeader(v28, (const std::string *)"P-Asserted-Identity");
  *(_QWORD *)(v28 + 64) = &off_1E78EC610;
  *(_OWORD *)(v28 + 72) = 0u;
  *(_OWORD *)(v28 + 88) = 0u;
  *(_OWORD *)(v28 + 104) = 0u;
  *(_QWORD *)v28 = &off_1E78C5C70;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v28, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = operator new();
  SipHeader::SipHeader(v29, (const std::string *)"P-Associated-URI");
  *(_QWORD *)(v29 + 64) = &off_1E78EC610;
  *(_OWORD *)(v29 + 72) = 0u;
  *(_OWORD *)(v29 + 88) = 0u;
  *(_OWORD *)(v29 + 104) = 0u;
  *(_QWORD *)v29 = &off_1E78E87E0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v29, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v30 = (_QWORD *)operator new();
  SipUriHeader::SipUriHeader((uint64_t)v30, (const std::string *)"P-Called-Party-ID");
  *v30 = &off_1E78D1368;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v30, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v31 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v31, &SipHeader::kHeaderPChargingFunctionAddresses, &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v31, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v32 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v32, (const std::string *)"P-Charging-Vector", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v32, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v33 = operator new();
  SipHeader::SipHeader(v33, (const std::string *)"Path");
  *(_QWORD *)(v33 + 64) = &off_1E78EC610;
  *(_OWORD *)(v33 + 72) = 0u;
  *(_OWORD *)(v33 + 88) = 0u;
  *(_OWORD *)(v33 + 104) = 0u;
  *(_QWORD *)v33 = &off_1E78E54F8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v33, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = operator new();
  SipHeader::SipHeader(v34, (const std::string *)"P-Early-Media");
  *(_QWORD *)(v34 + 72) = 0;
  *(_QWORD *)(v34 + 80) = 0;
  *(_QWORD *)(v34 + 64) = v34 + 72;
  *(_QWORD *)v34 = &off_1E78F0490;
  *(_BYTE *)(v34 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v34, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v35 = operator new();
  SipPAccessNetworkInfoHeader::SipPAccessNetworkInfoHeader(v35, &SipHeader::kHeaderPLastAccessNetworkInfo);
  *(_QWORD *)v35 = off_1E78DD380;
  *(_QWORD *)(v35 + 136) = 0;
  *(_DWORD *)(v35 + 144) = 0;
  *(_OWORD *)(v35 + 152) = 0u;
  *(_OWORD *)(v35 + 168) = 0u;
  *(_OWORD *)(v35 + 184) = 0u;
  *(_QWORD *)(v35 + 216) = 0;
  *(_OWORD *)(v35 + 196) = 0u;
  *(_DWORD *)(v35 + 224) = 0;
  *(_OWORD *)(v35 + 232) = 0u;
  *(_OWORD *)(v35 + 248) = 0u;
  *(_OWORD *)(v35 + 264) = 0u;
  *(_OWORD *)(v35 + 276) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v35, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v36 = operator new();
  SipPAccessNetworkInfoHeader::SipPAccessNetworkInfoHeader(v36, &SipHeader::kHeaderPCellularNetworkInfo);
  *(_QWORD *)v36 = off_1E78C1048;
  *(_QWORD *)(v36 + 136) = 0;
  *(_DWORD *)(v36 + 144) = 0;
  *(_OWORD *)(v36 + 152) = 0u;
  *(_OWORD *)(v36 + 168) = 0u;
  *(_OWORD *)(v36 + 184) = 0u;
  *(_QWORD *)(v36 + 216) = 0;
  *(_OWORD *)(v36 + 196) = 0u;
  *(_DWORD *)(v36 + 224) = 0;
  *(_OWORD *)(v36 + 232) = 0u;
  *(_OWORD *)(v36 + 248) = 0u;
  *(_OWORD *)(v36 + 264) = 0u;
  *(_OWORD *)(v36 + 276) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v36, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v37 = operator new();
  SipHeader::SipHeader(v37, &SipHeader::kHeaderPComNameIdReputation);
  *(_QWORD *)(v37 + 88) = 0;
  *(_QWORD *)(v37 + 80) = 0;
  *(_QWORD *)(v37 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v37 + 72) = v37 + 80;
  *(_WORD *)(v37 + 96) = 256;
  *(_QWORD *)v37 = &off_1E78BD468;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v37, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v38 = operator new();
  SipHeader::SipHeader(v38, (const std::string *)"P-Preferred-Identity");
  *(_QWORD *)(v38 + 64) = &off_1E78EC610;
  *(_OWORD *)(v38 + 72) = 0u;
  *(_OWORD *)(v38 + 88) = 0u;
  *(_OWORD *)(v38 + 104) = 0u;
  *(_QWORD *)v38 = &off_1E78DD468;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v38, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v39 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v39, (const std::string *)"Privacy", &__p);
  *(_QWORD *)v39 = off_1E78EAF18;
  *(_BYTE *)(v39 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v39, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v40 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v40, (const std::string *)"Proxy-Authenticate");
  v40[8] = 0;
  *v40 = &off_1E78BC998;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v40, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v41 = (SipProxyAuthorizationHeader *)operator new();
  SipProxyAuthorizationHeader::SipProxyAuthorizationHeader(v41);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v41, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v42 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v42, (const std::string *)"Proxy-Require");
  v42[10] = 0;
  v42[9] = 0;
  v42[8] = v42 + 9;
  *v42 = &off_1E78C19B8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v42, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v43 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipRAckHeader::SipRAckHeader(v43, 0, 0, &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v43, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v44 = operator new();
  SipHeader::SipHeader(v44, (const std::string *)"Reason");
  *(_QWORD *)(v44 + 64) = 0;
  *(_QWORD *)(v44 + 72) = 0;
  *(_QWORD *)(v44 + 80) = 0;
  *(_QWORD *)v44 = &off_1E78DEF18;
  *(_BYTE *)(v44 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v44, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v45 = operator new();
  SipHeader::SipHeader(v45, &SipHeader::kHeaderRecordRoute);
  *(_QWORD *)(v45 + 64) = &off_1E78EC610;
  *(_OWORD *)(v45 + 72) = 0u;
  *(_OWORD *)(v45 + 88) = 0u;
  *(_OWORD *)(v45 + 104) = 0u;
  *(_QWORD *)v45 = &off_1E78E8A80;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v45, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v46, (const std::string *)"Recv-Info", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v46, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v47 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v47, (const std::string *)"Referred-By", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "b");
  SipMessageEncodingMap::addHeaderPrototype(this, v47, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v48 = (_QWORD *)operator new();
  SipUriHeader::SipUriHeader((uint64_t)v48, (const std::string *)"Refer-To");
  *v48 = &off_1E78EFCF8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "r");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v48, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v49 = (_QWORD *)operator new();
  SipUriHeader::SipUriHeader((uint64_t)v49, (const std::string *)"Referred-By");
  *v49 = &off_1E78C3B80;
  std::string::basic_string[abi:ne180100]<0>(&__p, "r");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v49, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v50 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringParameterHeader::SipStringParameterHeader(v50, (const std::string *)"Replaces", &__p);
  *(_QWORD *)v50 = off_1E78DD2B0;
  *(_DWORD *)(v50 + 128) = 1;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v50, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v51 = operator new();
  SipHeader::SipHeader(v51, &SipHeader::kHeaderRequire);
  *(_QWORD *)(v51 + 72) = 0;
  *(_QWORD *)(v51 + 80) = 0;
  *(_QWORD *)(v51 + 64) = v51 + 72;
  *(_QWORD *)v51 = &off_1E78E2618;
  *(_BYTE *)(v51 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v51, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v52 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipRetryAfterHeader::SipRetryAfterHeader(v52, 0, &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v52, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v53 = operator new();
  SipHeader::SipHeader(v53, &SipHeader::kHeaderRoute);
  *(_QWORD *)(v53 + 64) = &off_1E78EC610;
  *(_OWORD *)(v53 + 72) = 0u;
  *(_OWORD *)(v53 + 88) = 0u;
  *(_OWORD *)(v53 + 104) = 0u;
  *(_QWORD *)v53 = &off_1E78E7FD8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v53, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v54 = (SipRoutableLocalAddressHeader *)operator new();
  SipRoutableLocalAddressHeader::SipRoutableLocalAddressHeader(v54);
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v54, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v55 = operator new();
  SipHeader::SipHeader(v55, &SipHeader::kHeaderRSeq);
  *(_DWORD *)(v55 + 60) = 0;
  *(_BYTE *)(v55 + 56) = 0;
  *(_QWORD *)v55 = &off_1E78E8D38;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v55, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v56 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v56, (const std::string *)"Security-Client");
  v56[8] = 0;
  v56[9] = 0;
  v56[10] = 0;
  *v56 = &off_1E78CB588;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v56, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v57 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v57, (const std::string *)"Security-Server");
  v57[8] = 0;
  v57[9] = 0;
  v57[10] = 0;
  *v57 = &off_1E78E8480;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v57, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v58 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v58, (const std::string *)"Security-Verify");
  v58[8] = 0;
  v58[9] = 0;
  v58[10] = 0;
  *v58 = &off_1E78C4400;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v58, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v59 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v59, (const std::string *)"Server", &__p);
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v59, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v60 = operator new();
  SipHeader::SipHeader(v60, (const std::string *)"Service-Route");
  *(_QWORD *)(v60 + 64) = &off_1E78EC610;
  *(_OWORD *)(v60 + 72) = 0u;
  *(_OWORD *)(v60 + 88) = 0u;
  *(_OWORD *)(v60 + 104) = 0u;
  *(_QWORD *)v60 = &off_1E78C2078;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v60, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v61 = operator new();
  SipHeader::SipHeader(v61, (const std::string *)"Session-Expires");
  *(_QWORD *)(v61 + 88) = 0;
  *(_QWORD *)(v61 + 80) = 0;
  *(_QWORD *)(v61 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v61 + 72) = v61 + 80;
  *(_WORD *)(v61 + 96) = 256;
  *(_DWORD *)(v61 + 104) = 0;
  *(_QWORD *)v61 = &off_1E78CE3F8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "x");
  SipMessageEncodingMap::addHeaderPrototype(this, v61, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v62 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v62, &SipHeader::kHeaderSessionId, &__p);
  *(_QWORD *)v62 = off_1E78D28B8;
  *(_BYTE *)(v62 + 88) = 1;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v62, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v63 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader((uint64_t)v63, (const std::string *)"Subject", &__p);
  *v63 = off_1E78E8E50;
  std::string::basic_string[abi:ne180100]<0>(v86, "s");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v63, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v64 = (_QWORD *)operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringParameterHeader::SipStringParameterHeader((uint64_t)v64, (const std::string *)"Subscription-State", &__p);
  *v64 = off_1E78CE868;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v64, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v65 = operator new();
  SipHeader::SipHeader(v65, (const std::string *)"Supported");
  *(_QWORD *)(v65 + 72) = 0;
  *(_QWORD *)(v65 + 80) = 0;
  *(_QWORD *)(v65 + 64) = v65 + 72;
  *(_QWORD *)v65 = &off_1E78C9B18;
  *(_BYTE *)(v65 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "k");
  SipMessageEncodingMap::addHeaderPrototype(this, v65, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v66 = operator new();
  SipHeader::SipHeader(v66, (const std::string *)"Timestamp");
  *(_QWORD *)v66 = &off_1E78DBA48;
  *(_DWORD *)(v66 + 60) = 0;
  *(_BYTE *)(v66 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v66, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v67 = (_QWORD *)operator new();
  SipUriHeader::SipUriHeader((uint64_t)v67, (const std::string *)SipHeader::kHeaderTo);
  *v67 = &off_1E78DB8B8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "t");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v67, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v68 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v68, (const std::string *)"Unsupported");
  v68[10] = 0;
  v68[9] = 0;
  v68[8] = v68 + 9;
  *v68 = &off_1E78BE5F8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v68, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v69 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v69, (const std::string *)"User-Agent", &__p);
  *(_QWORD *)v69 = off_1E78EAA68;
  *(_BYTE *)(v69 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v69, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v70 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v70, (const std::string *)SipHeader::kHeaderVia);
  *v70 = &off_1E78E2940;
  v70[9] = 0;
  v70[10] = 0;
  v70[8] = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "v");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v70, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v71 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v71, (const std::string *)"Warning");
  v71[8] = 0;
  v71[9] = 0;
  v71[10] = 0;
  *v71 = &off_1E78C1E78;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v71, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v72 = (_QWORD *)operator new();
  SipHeader::SipHeader((uint64_t)v72, (const std::string *)"WWW-Authenticate");
  v72[8] = 0;
  *v72 = &off_1E78ED420;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, (uint64_t)v72, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v73 = operator new();
  SipHeader::SipHeader(v73, (const std::string *)"Min-Expires");
  *(_QWORD *)v73 = &off_1E78DBA48;
  *(_DWORD *)(v73 + 60) = 0;
  *(_BYTE *)(v73 + 56) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v73, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v74 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v74, (const std::string *)"Conversation-ID", &__p);
  *(_QWORD *)v74 = off_1E78BE560;
  *(_BYTE *)(v74 + 88) = 1;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v74, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v75 = operator new();
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  SipStringHeader::SipStringHeader(v75, (const std::string *)"Contribution-ID", &__p);
  *(_QWORD *)v75 = off_1E78EE818;
  *(_BYTE *)(v75 + 88) = 1;
  std::string::basic_string[abi:ne180100]<0>(v86, "");
  SipMessageEncodingMap::addHeaderPrototype(this, v75, (uint64_t)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v76 = (SipSdpBody *)operator new();
  SipSdpBody::SipSdpBody(v76);
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)"application/sdp", (uint64_t)v76);
  v77 = (SipCallWaitingInfoBody *)operator new();
  SipCallWaitingInfoBody::SipCallWaitingInfoBody(v77, 0);
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&SipCallWaitingInfoBody::kContentType, (uint64_t)v77);
  v78 = (_QWORD *)operator new();
  v78[1] = 0;
  v78[2] = 0;
  v78[3] = 0;
  *v78 = off_1E78CE600;
  SipConferenceInfo::SipConferenceInfo((SipConferenceInfo *)(v78 + 4));
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&SipConferenceInfoBody::kContentType, (uint64_t)v78);
  v79 = operator new();
  *(_QWORD *)(v79 + 16) = 0;
  *(_QWORD *)(v79 + 24) = 0;
  *(_QWORD *)v79 = off_1E78CE6A0;
  *(_QWORD *)(v79 + 8) = 0;
  *(_QWORD *)(v79 + 32) = &off_1E78EEE58;
  *(_OWORD *)(v79 + 40) = 0u;
  *(_OWORD *)(v79 + 56) = 0u;
  *(_QWORD *)(v79 + 72) = 0;
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&SipRegistrationInfoBody::kContentType, v79);
  v80 = (SipDialogInfoBody *)operator new();
  SipDialogInfoBody::SipDialogInfoBody(v80);
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&SipDialogInfoBody::kContentType, (uint64_t)v80);
  v81 = (_QWORD *)operator new();
  v81[2] = 0;
  v81[3] = 0;
  *v81 = off_1E78CE578;
  v81[1] = 0;
  v81[4] = &off_1E78E4180;
  v81[5] = 0;
  v81[6] = 0;
  v81[7] = 0;
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&Sip3gppImsInfoBody::kContentType, (uint64_t)v81);
  v82 = (SipMultiPartBody *)operator new();
  SipMultiPartBody::SipMultiPartBody(v82);
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)"multipart/mixed", (uint64_t)v82);
  v83 = (_QWORD *)operator new();
  v83[1] = 0;
  v83[2] = 0;
  v83[3] = 0;
  *v83 = off_1E78BA8A0;
  SipUssdData::SipUssdData((SipUssdData *)(v83 + 4));
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&SipUssdDataBody::kContentType, (uint64_t)v83);
  v84 = (_QWORD *)operator new();
  *v84 = &off_1E78DD708;
  v84[1] = 0;
  v84[2] = 0;
  v84[3] = 0;
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)"application/ussd", (uint64_t)v84);
  v85 = (SipLocationDiscoveryBody *)operator new();
  SipLocationDiscoveryBody::SipLocationDiscoveryBody(v85);
  SipMessageEncodingMap::addBodyPrototype((uint64_t)this, (uint64_t)&SipLocationDiscoveryBody::kContentType, (uint64_t)v85);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderFrom, (uint64_t)&SipHeader::kHeaderFrom);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, SipHeader::kHeaderTo, (uint64_t)SipHeader::kHeaderTo);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderCallId, (uint64_t)&SipHeader::kHeaderCallId);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderSessionId, (uint64_t)&SipHeader::kHeaderSessionId);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderCSeq, (uint64_t)&SipHeader::kHeaderCSeq);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, SipHeader::kHeaderVia, (uint64_t)SipHeader::kHeaderVia);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderRSeq, (uint64_t)&SipHeader::kHeaderRSeq);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderRequire, (uint64_t)&SipHeader::kHeaderRequire);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderRecordRoute, (uint64_t)&SipHeader::kHeaderRecordRoute);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t)v2, (unsigned __int8 *)&SipHeader::kHeaderRoute, (uint64_t)&SipHeader::kHeaderRoute);
}

void sub_1BEFC9600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  _QWORD **v25;
  std::__shared_weak_count *v27;
  void *v28;

  MEMORY[0x1C3B87100](v23, 0x10B3C405772A826);
  v27 = *(std::__shared_weak_count **)(v20 + 184);
  if (v27)
    std::__shared_weak_count::__release_weak(v27);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v22);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy(v21, *v25);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20 + 64);
  v28 = *v24;
  if (*v24)
  {
    *(_QWORD *)(v20 + 48) = v28;
    operator delete(v28);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v20);
  _Unwind_Resume(a1);
}

void SipMessageEncodingMap::addHeaderPrototype(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  std::string __p;
  std::string *p_p;

  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 31) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  else
    __p = *(std::string *)(a2 + 8);
  ims::lowerCase((char *)&__p);
  ims::chomp(&__p, "\r\n\t ", 3);
  p_p = &__p;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)&__p, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 5) = a2;
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (v6)
  {
    std::string::operator=((std::string *)(a2 + 32), (const std::string *)a3);
    p_p = (std::string *)a3;
    *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, (unsigned __int8 *)a3, (uint64_t)&std::piecewise_construct, (__int128 **)&p_p)+ 5) = a2;
  }
  v7 = a1[7];
  v8 = (_QWORD *)a1[6];
  if ((unint64_t)v8 >= v7)
  {
    v10 = a1[5];
    v11 = ((uint64_t)v8 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v12 = v7 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 7), v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v9 = v16 + 8;
    v19 = (char *)a1[5];
    v18 = (char *)a1[6];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)a1[5];
    }
    a1[5] = v16;
    a1[6] = v9;
    a1[7] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v8 = a2;
    v9 = v8 + 1;
  }
  a1[6] = v9;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEFC9EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipMessageEncodingMap::~SipMessageEncodingMap(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  SipMessageEncodingMap::clearHeaderMap((SipMessageEncodingMap *)this);
  SipMessageEncodingMap::clearBodyMap((SipMessageEncodingMap *)this);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)(this + 13), this[14]);
  this[13] = (std::__shared_weak_count *)(this + 14);
  this[14] = 0;
  this[15] = 0;
  v2 = this[23];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 17));
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)(this + 13), this[14]);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)(this + 8));
  v3 = this[5];
  if (v3)
  {
    this[6] = v3;
    operator delete(v3);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void SipMessageEncodingMap::clearHeaderMap(SipMessageEncodingMap *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;

  v3 = *((_QWORD *)this + 5);
  v2 = *((_QWORD *)this + 6);
  if (v2 != v3)
  {
    v4 = 0;
    do
    {
      v5 = *(_QWORD *)(v3 + 8 * v4);
      if (v5)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v3 = *((_QWORD *)this + 5);
        v2 = *((_QWORD *)this + 6);
      }
      ++v4;
    }
    while (v4 < (v2 - v3) >> 3);
  }
  std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::clear((uint64_t)this);
  *((_QWORD *)this + 6) = *((_QWORD *)this + 5);
}

void SipMessageEncodingMap::clearBodyMap(SipMessageEncodingMap *this)
{
  _QWORD *i;
  uint64_t v3;

  for (i = (_QWORD *)*((_QWORD *)this + 10); i; i = (_QWORD *)*i)
  {
    v3 = i[5];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::clear((uint64_t)this + 64);
}

uint64_t SipMessageEncodingMap::headerPrototypeWithName(_QWORD *a1, uint64_t a2)
{
  unsigned __int8 *v3;
  uint64_t v4;
  std::string __p;

  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  ims::lowerCase((char *)&__p);
  ims::chomp(&__p, "\r\n\t ", 3);
  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(a1, (unsigned __int8 *)&__p);
  if (v3)
    v4 = *((_QWORD *)v3 + 5);
  else
    v4 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v4;
}

void sub_1BEFCA09C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipMessageEncodingMap::addBodyPrototype(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v5;
  unint64_t v6;
  int8x8_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned __int8 **v12;
  unsigned __int8 *i;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint8x8_t v19;
  unint64_t v20;
  unint64_t v21;
  char **v22;
  char *v23;
  unint64_t v24;
  char *v25;
  float v26;
  float v27;
  _BOOL8 v28;
  unint64_t v29;
  unint64_t v30;
  int8x8_t prime;
  void *v32;
  void *v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint8x8_t v37;
  unint64_t v38;
  uint8x8_t v39;
  uint64_t v40;
  _QWORD *v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  unint64_t v46;
  uint64_t v47;
  void *v48;

  v5 = (_QWORD *)(a1 + 88);
  v6 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 88, a2);
  v7 = *(int8x8_t *)(a1 + 72);
  if (v7)
  {
    v8 = v6;
    v9 = (uint8x8_t)vcnt_s8(v7);
    v9.i16[0] = vaddlv_u8(v9);
    v10 = v9.u32[0];
    if (v9.u32[0] > 1uLL)
    {
      v11 = v6;
      if (v6 >= *(_QWORD *)&v7)
        v11 = v6 % *(_QWORD *)&v7;
    }
    else
    {
      v11 = (*(_QWORD *)&v7 - 1) & v6;
    }
    v12 = *(unsigned __int8 ***)(*(_QWORD *)(a1 + 64) + 8 * v11);
    if (v12)
    {
      for (i = *v12; i; i = *(unsigned __int8 **)i)
      {
        v14 = *((_QWORD *)i + 1);
        if (v14 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 96, i + 16, (unsigned __int8 *)a2) & 1) != 0)
          {
            v15 = *((_QWORD *)i + 5);
            if (v15)
              (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
            break;
          }
        }
        else
        {
          if (v10 > 1)
          {
            if (v14 >= *(_QWORD *)&v7)
              v14 %= *(_QWORD *)&v7;
          }
          else
          {
            v14 &= *(_QWORD *)&v7 - 1;
          }
          if (v14 != v11)
            break;
        }
      }
    }
  }
  v16 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)v5, a2);
  v17 = v16;
  v18 = *(_QWORD *)(a1 + 72);
  if (!v18)
  {
    v21 = 0;
    goto LABEL_37;
  }
  v19 = (uint8x8_t)vcnt_s8((int8x8_t)v18);
  v19.i16[0] = vaddlv_u8(v19);
  v20 = v19.u32[0];
  if (v19.u32[0] > 1uLL)
  {
    v21 = v16;
    if (v16 >= v18)
      v21 = v16 % v18;
  }
  else
  {
    v21 = (v18 - 1) & v16;
  }
  v22 = *(char ***)(*(_QWORD *)(a1 + 64) + 8 * v21);
  if (!v22 || (v23 = *v22) == 0)
  {
LABEL_37:
    v25 = (char *)operator new(0x30uLL);
    v23 = v25;
    *(_QWORD *)v25 = 0;
    *((_QWORD *)v25 + 1) = v17;
    if (*(char *)(a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)(v25 + 16), *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *((_OWORD *)v25 + 1) = *(_OWORD *)a2;
      *((_QWORD *)v25 + 4) = *(_QWORD *)(a2 + 16);
    }
    *((_QWORD *)v23 + 5) = 0;
    v26 = (float)(unint64_t)(*(_QWORD *)(a1 + 88) + 1);
    v27 = *(float *)(a1 + 96);
    if (v18 && (float)(v27 * (float)v18) >= v26)
    {
LABEL_86:
      v44 = *(_QWORD *)(a1 + 64);
      v45 = *(_QWORD **)(v44 + 8 * v21);
      if (v45)
      {
        *(_QWORD *)v23 = *v45;
        v47 = a3;
      }
      else
      {
        *(_QWORD *)v23 = *(_QWORD *)(a1 + 80);
        *(_QWORD *)(a1 + 80) = v23;
        *(_QWORD *)(v44 + 8 * v21) = a1 + 80;
        v47 = a3;
        if (!*(_QWORD *)v23)
        {
LABEL_95:
          ++*v5;
          goto LABEL_96;
        }
        v46 = *(_QWORD *)(*(_QWORD *)v23 + 8);
        if ((v18 & (v18 - 1)) != 0)
        {
          if (v46 >= v18)
            v46 %= v18;
        }
        else
        {
          v46 &= v18 - 1;
        }
        v45 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v46);
      }
      *v45 = v23;
      goto LABEL_95;
    }
    v28 = 1;
    if (v18 >= 3)
      v28 = (v18 & (v18 - 1)) != 0;
    v29 = v28 | (2 * v18);
    v30 = vcvtps_u32_f32(v26 / v27);
    if (v29 <= v30)
      prime = (int8x8_t)v30;
    else
      prime = (int8x8_t)v29;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v18 = *(_QWORD *)(a1 + 72);
    if (*(_QWORD *)&prime > v18)
      goto LABEL_52;
    if (*(_QWORD *)&prime < v18)
    {
      v38 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 88) / *(float *)(a1 + 96));
      if (v18 < 3 || (v39 = (uint8x8_t)vcnt_s8((int8x8_t)v18), v39.i16[0] = vaddlv_u8(v39), v39.u32[0] > 1uLL))
      {
        v38 = std::__next_prime(v38);
      }
      else
      {
        v40 = 1 << -(char)__clz(v38 - 1);
        if (v38 >= 2)
          v38 = v40;
      }
      if (*(_QWORD *)&prime <= v38)
        prime = (int8x8_t)v38;
      if (*(_QWORD *)&prime >= v18)
      {
        v18 = *(_QWORD *)(a1 + 72);
      }
      else
      {
        if (prime)
        {
LABEL_52:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v32 = operator new(8 * *(_QWORD *)&prime);
          v33 = *(void **)(a1 + 64);
          *(_QWORD *)(a1 + 64) = v32;
          if (v33)
            operator delete(v33);
          v34 = 0;
          *(int8x8_t *)(a1 + 72) = prime;
          do
            *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v34++) = 0;
          while (*(_QWORD *)&prime != v34);
          v35 = *(_QWORD **)(a1 + 80);
          if (v35)
          {
            v36 = v35[1];
            v37 = (uint8x8_t)vcnt_s8(prime);
            v37.i16[0] = vaddlv_u8(v37);
            if (v37.u32[0] > 1uLL)
            {
              if (v36 >= *(_QWORD *)&prime)
                v36 %= *(_QWORD *)&prime;
            }
            else
            {
              v36 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)(a1 + 64) + 8 * v36) = a1 + 80;
            v41 = (_QWORD *)*v35;
            if (*v35)
            {
              do
              {
                v42 = v41[1];
                if (v37.u32[0] > 1uLL)
                {
                  if (v42 >= *(_QWORD *)&prime)
                    v42 %= *(_QWORD *)&prime;
                }
                else
                {
                  v42 &= *(_QWORD *)&prime - 1;
                }
                if (v42 != v36)
                {
                  v43 = *(_QWORD *)(a1 + 64);
                  if (!*(_QWORD *)(v43 + 8 * v42))
                  {
                    *(_QWORD *)(v43 + 8 * v42) = v35;
                    goto LABEL_77;
                  }
                  *v35 = *v41;
                  *v41 = **(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v42);
                  **(_QWORD **)(*(_QWORD *)(a1 + 64) + 8 * v42) = v41;
                  v41 = v35;
                }
                v42 = v36;
LABEL_77:
                v35 = v41;
                v41 = (_QWORD *)*v41;
                v36 = v42;
              }
              while (v41);
            }
          }
          v18 = (unint64_t)prime;
          goto LABEL_81;
        }
        v48 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 64) = 0;
        if (v48)
          operator delete(v48);
        v18 = 0;
        *(_QWORD *)(a1 + 72) = 0;
      }
    }
LABEL_81:
    if ((v18 & (v18 - 1)) != 0)
    {
      if (v17 >= v18)
        v21 = v17 % v18;
      else
        v21 = v17;
    }
    else
    {
      v21 = (v18 - 1) & v17;
    }
    goto LABEL_86;
  }
  while (1)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (v24 == v17)
      break;
    if (v20 > 1)
    {
      if (v24 >= v18)
        v24 %= v18;
    }
    else
    {
      v24 &= v18 - 1;
    }
    if (v24 != v21)
      goto LABEL_37;
LABEL_36:
    v23 = *(char **)v23;
    if (!v23)
      goto LABEL_37;
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 96, (unsigned __int8 *)v23 + 16, (unsigned __int8 *)a2) & 1) == 0)goto LABEL_36;
  v47 = a3;
LABEL_96:
  *((_QWORD *)v23 + 5) = v47;
}

void sub_1BEFCA5D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t SipMessageEncodingMap::createHeader(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *__p[2];
  char v13;
  std::string v14;
  std::string __str;

  memset(&__str, 0, sizeof(__str));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __str = *(std::string *)a2;
  ims::lowerCase((char *)&__str);
  ims::chomp(&__str, "\r\n\t ", 3);
  v6 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)a1, (unsigned __int8 *)&__str);
  if (v6)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v6 + 5) + 32))(*((_QWORD *)v6 + 5));
  }
  else
  {
    if (*(_BYTE *)(a1 + 130))
    {
      std::string::basic_string[abi:ne180100]<0>(&v14, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::info(ims::_logger, (uint64_t)&v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Decoding unknown header ", 24);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a3);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v13 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    v7 = operator new();
    std::string::basic_string[abi:ne180100]<0>(&v14, "");
    SipStringHeader::SipStringHeader(v7, (const std::string *)a2, &v14);
    *(_QWORD *)v7 = off_1E78B8DA8;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  v9 = *(unsigned __int8 *)(a3 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(a3 + 8);
  if (v9 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 72))(v7, a3) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(&v14, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)&v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Unable to decode header: ", 25);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a3);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v7 = 0;
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1BEFCA924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

SipStringBody *SipMessageEncodingMap::createBody(SipMessageEncodingMap *a1, const std::string *a2)
{
  SipStringBody *Body;
  _OWORD v5[3];
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *__p[2];
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v6 = 0u;
  memset(v5, 0, sizeof(v5));
  SipStringParameterHeader::SipStringParameterHeader((uint64_t)v5, (const std::string *)"Content-Type", a2);
  *(_QWORD *)&v5[0] = off_1E78D98C8;
  BYTE8(v6) = 0;
  Body = SipMessageEncodingMap::createBody(a1, (const SipContentTypeHeader *)v5);
  *(_QWORD *)&v5[0] = off_1E78C5CF8;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  *(_QWORD *)&v5[0] = off_1E78E5828;
  *(_QWORD *)&v7 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v7 + 8, (_QWORD *)v8);
  SipHeader::~SipHeader((void **)v5);
  return Body;
}

void sub_1BEFCAA7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  SipContentTypeHeader::~SipContentTypeHeader(&a9);
  _Unwind_Resume(a1);
}

SipStringBody *SipMessageEncodingMap::createBody(SipMessageEncodingMap *this, const SipContentTypeHeader *a2)
{
  unsigned __int8 *v3;
  SipStringBody *v4;

  v3 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 8, (unsigned __int8 *)a2 + 104);
  if (v3)
  {
    v4 = (SipStringBody *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)v3 + 5) + 24))(*((_QWORD *)v3 + 5));
  }
  else
  {
    v4 = (SipStringBody *)operator new();
    SipStringBody::SipStringBody(v4);
  }
  if (((*(uint64_t (**)(SipStringBody *, const SipContentTypeHeader *))(*(_QWORD *)v4 + 16))(v4, a2) & 1) == 0)
  {
    (*(void (**)(SipStringBody *))(*(_QWORD *)v4 + 8))(v4);
    return 0;
  }
  return v4;
}

void sub_1BEFCAB24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C403F48558ALL);
  _Unwind_Resume(a1);
}

void SipContentTypeHeader::~SipContentTypeHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipMessageEncodingMap::initializeResponseFromTemplate(SipMessageEncodingMap *this, SipResponse *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  _BOOL4 isWifi;
  unint64_t *p_shared_owners;
  unint64_t v10;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *((_QWORD *)this + 22);
    if (v7)
    {
      isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v7 + 3136));
      LODWORD(v7) = *(_BYTE *)(v7 + 176) != 0;
    }
    else
    {
      isWifi = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    isWifi = 0;
    LODWORD(v7) = 0;
  }
  SipMessageEncodingMap::initializeResponseFromTemplate(this, a2, isWifi, v7);
  return 1;
}

uint64_t SipMessageEncodingMap::initializeResponseFromTemplate(SipMessageEncodingMap *this, SipResponse *a2, int a3, int a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  int v12;
  char *v13;
  const void **v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  SipHeader *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v28 = 0;
  v29 = 0;
  v30 = 0;
  v26 = 0;
  v27 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (!v8)
  {
    v10 = 0;
    v9 = 0;
    goto LABEL_9;
  }
  v9 = std::__shared_weak_count::lock(v8);
  v27 = v9;
  if (!v9)
  {
    v10 = 0;
    goto LABEL_9;
  }
  v10 = *((_QWORD *)this + 22);
  v26 = v10;
  if (!v10)
  {
LABEL_9:
    v12 = 3;
    v11 = 1;
    goto LABEL_10;
  }
  v11 = 0;
  if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(v10 + 144)) + 456))
    v12 = 1;
  else
    v12 = 2;
LABEL_10:
  v13 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v13)
    v14 = (const void **)(v13 + 64);
  else
    v14 = (const void **)&ims::kEmptyString;
  SipHeaderTemplateMap::matchingHeaderTemplates((uint64_t)this + 104, v14, *((_DWORD *)a2 + 22), a3, a4, v12, 0, &v28);
  v15 = v28;
  v16 = v29;
  while (v15 != v16)
  {
    if ((v11 & 1) == 0)
    {
      v17 = SipStack::prefs((SipStack *)v10);
      ImsPrefs::substituteRuntimeVars(v17, v15, (uint64_t)&v24);
      if (*(char *)(v15 + 23) < 0)
        operator delete(*(void **)v15);
      v18 = v24;
      *(_QWORD *)(v15 + 16) = v25;
      *(_OWORD *)v15 = v18;
    }
    v19 = SipMessageEncodingMap::decodeHeader((uint64_t)this, (std::string *)v15);
    v20 = (SipHeader *)v19;
    if (v19)
    {
      SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)(v19 + 8));
      SipMessage::addHeader(a2, v20, 0);
    }
    v15 += 24;
  }
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v24 = &v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  return 1;
}

void sub_1BEFCAE18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t SipMessageEncodingMap::decodeHeader(uint64_t a1, std::string *this)
{
  std::string::size_type v4;
  char v5;
  BOOL v6;
  std::string::size_type size;
  std::string *v8;
  std::string::size_type v9;
  std::string::size_type v10;
  int v11;
  uint64_t Header;
  std::string v14;
  std::string v15;
  char v16;

  v4 = std::string::find(this, 58, 0);
  if (v4 == -1)
    return 0;
  v5 = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v6 = v5 < 0;
  v8 = (std::string *)this->__r_.__value_.__r.__words[0];
  size = this->__r_.__value_.__l.__size_;
  if (v5 >= 0)
    size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  v9 = v4 + 1;
  if (!v6)
    v8 = this;
  if (size <= v9)
    v10 = v4 + 1;
  else
    v10 = size;
  while (v9 < size)
  {
    v11 = v8->__r_.__value_.__s.__data_[v9++];
    if (v11 != 32)
    {
      v10 = v9 - 1;
      break;
    }
  }
  std::string::basic_string(&v15, this, 0, v4, (std::allocator<char> *)&v14);
  std::string::basic_string(&v14, this, v10, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v16);
  Header = SipMessageEncodingMap::createHeader(a1, (uint64_t)&v15, (uint64_t)&v14);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return Header;
}

void sub_1BEFCAF3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t SipMessageEncodingMap::initializeRequestFromTemplate(SipMessageEncodingMap *this, SipRequest *a2, int a3, int a4)
{
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  char v11;
  int v12;
  const void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  SipHeader *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;

  v27 = 0;
  v28 = 0;
  v29 = 0;
  v25 = 0;
  v26 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v26 = v9;
    if (v9)
    {
      v10 = *((_QWORD *)this + 22);
      v25 = v10;
      if (v10)
      {
        v11 = 0;
        if (*(_BYTE *)(SipUserAgent::config(*(SipUserAgent **)(v10 + 144)) + 456))
          v12 = 1;
        else
          v12 = 2;
        goto LABEL_10;
      }
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  v12 = 3;
  v11 = 1;
LABEL_10:
  v13 = (const void **)(*(uint64_t (**)(SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  SipHeaderTemplateMap::matchingHeaderTemplates((uint64_t)this + 104, v13, 0, a3, a4, v12, 0, &v27);
  v14 = v27;
  v15 = v28;
  while (v14 != v15)
  {
    if ((v11 & 1) == 0)
    {
      v16 = SipStack::prefs((SipStack *)v10);
      ImsPrefs::substituteRuntimeVars(v16, v14, (uint64_t)&v23);
      if (*(char *)(v14 + 23) < 0)
        operator delete(*(void **)v14);
      v17 = v23;
      *(_QWORD *)(v14 + 16) = v24;
      *(_OWORD *)v14 = v17;
    }
    v18 = SipMessageEncodingMap::decodeHeader((uint64_t)this, (std::string *)v14);
    v19 = (SipHeader *)v18;
    if (v18)
    {
      SipMessage::removeHeadersWithName(a2, (unsigned __int8 *)(v18 + 8));
      SipMessage::addHeader(a2, v19, 0);
    }
    v14 += 24;
  }
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)&v23 = &v27;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v23);
  return 1;
}

void sub_1BEFCB118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  a9 = (void **)&a14;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

SipRequest *SipMessageEncodingMap::createRequestFromTemplate(SipMessageEncodingMap *a1, const std::string *a2, int a3, int a4)
{
  SipRequest *v8;

  v8 = (SipRequest *)operator new();
  SipRequest::SipRequest((uint64_t)v8, a2, (uint64_t)a1);
  SipMessageEncodingMap::initializeRequestFromTemplate(a1, v8, a3, a4);
  return v8;
}

void sub_1BEFCB1BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C40979C6A35);
  _Unwind_Resume(a1);
}

_QWORD *SipMessageEncodingMap::copyHeadersFromRequestToResponse(_QWORD *this, const SipRequest *a2, SipResponse *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  unsigned int v12;
  unsigned __int8 *v13;
  SipHeader *v14;

  v4 = *((_QWORD *)a2 + 1);
  v5 = *((_QWORD *)a2 + 2);
  if (v5 != v4)
  {
    v9 = 0;
    v10 = this + 17;
    v11 = (_QWORD *)((char *)a3 + 32);
    v12 = 1;
    do
    {
      if (v9 >= (v5 - v4) >> 3)
        v13 = 0;
      else
        v13 = *(unsigned __int8 **)(v4 + 8 * v9);
      this = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v10, v13 + 8);
      if (this)
      {
        if ((a4 & 1) != 0
          || ((*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 88))(v13) & 1) != 0
          || (this = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(v11, v13 + 8)) == 0|| !this[5])
        {
          v14 = (SipHeader *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v13 + 32))(v13);
          this = SipMessage::addHeader(a3, v14, 0);
        }
      }
      v9 = v12;
      v4 = *((_QWORD *)a2 + 1);
      v5 = *((_QWORD *)a2 + 2);
      ++v12;
    }
    while (v9 < (v5 - v4) >> 3);
  }
  return this;
}

uint64_t SipMessageEncodingMap::initializeFromPrefs(SipMessageEncodingMap *this, const ImsPrefs *a2)
{
  _QWORD *v4;
  uint64_t **v5;
  ImsPrefs *v6;
  void **AdditionalHeadersKey;
  ImsPrefs *v8;
  void **AllowIPv6UnicastAddressKey;
  void *v10;
  uint64_t result;

  v4 = (_QWORD *)((char *)this + 112);
  v5 = (uint64_t **)((char *)this + 104);
  std::__tree<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>>>::destroy((uint64_t)this + 104, *((_QWORD **)this + 14));
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  AdditionalHeadersKey = (void **)ImsPrefs::getAdditionalHeadersKey(v6);
  SipHeaderTemplateMap::initializeFromPref(v5, a2, AdditionalHeadersKey);
  AllowIPv6UnicastAddressKey = (void **)ImsPrefs::getAllowIPv6UnicastAddressKey(v8);
  v10 = ImsPrefs::prefWithKey(a2, AllowIPv6UnicastAddressKey);
  if (v10)
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v10 + 40))(v10);
  else
    result = *((_BYTE *)AllowIPv6UnicastAddressKey + 57) != 0;
  *((_BYTE *)this + 131) = result;
  return result;
}

BOOL SipMessageEncodingMap::useLazuliTypes(SipMessageEncodingMap *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unsigned __int8 *v6;
  int v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 23);
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = *((_QWORD *)this + 22);
    if (v5)
      v6 = (unsigned __int8 *)(v5 + 2657);
    else
      v6 = (unsigned __int8 *)this + 132;
    v7 = *v6;
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v7 = *((unsigned __int8 *)this + 132);
  }
  return v7 != 0;
}

void SipConferenceInfoBody::~SipConferenceInfoBody(void **this)
{
  *this = off_1E78CE600;
  SipConferenceInfo::~SipConferenceInfo((SipConferenceInfo *)(this + 4));
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CE600;
  SipConferenceInfo::~SipConferenceInfo((SipConferenceInfo *)(this + 4));
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

SipConferenceInfoBody *SipConferenceInfoBody::clone(SipConferenceInfoBody *this)
{
  SipConferenceInfoBody *v2;

  v2 = (SipConferenceInfoBody *)operator new();
  SipConferenceInfoBody::SipConferenceInfoBody(v2, this);
  return v2;
}

void sub_1BEFCB4D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C409E0D0F29);
  _Unwind_Resume(a1);
}

uint64_t *SipConferenceInfoBody::contentType(SipConferenceInfoBody *this)
{
  return &SipConferenceInfoBody::kContentType;
}

uint64_t SipConferenceInfoBody::rootItem(SipConferenceInfoBody *this)
{
  return (uint64_t)this + 32;
}

_QWORD *SipXmlBody::generateXml@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

void SipConferenceInfo::~SipConferenceInfo(SipConferenceInfo *this)
{
  *(_QWORD *)this = &off_1E78DF2D0;
  *((_QWORD *)this + 59) = off_1E78DF358;
  if (*((char *)this + 535) < 0)
    operator delete(*((void **)this + 64));
  if (*((char *)this + 511) < 0)
    operator delete(*((void **)this + 61));
  SipConferenceUsers::~SipConferenceUsers((SipConferenceInfo *)((char *)this + 432));
  SipUri::~SipUri((SipConferenceInfo *)((char *)this + 8));
}

{
  SipConferenceInfo::~SipConferenceInfo(this);
  JUMPOUT(0x1C3B87100);
}

void SipRegistrationInfoBody::~SipRegistrationInfoBody(void **this)
{
  *this = off_1E78CE6A0;
  SipRegistrationInfo::~SipRegistrationInfo((SipRegistrationInfo *)(this + 4));
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CE6A0;
  SipRegistrationInfo::~SipRegistrationInfo((SipRegistrationInfo *)(this + 4));
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

SipRegistrationInfoBody *SipRegistrationInfoBody::clone(SipRegistrationInfoBody *this)
{
  SipRegistrationInfoBody *v2;

  v2 = (SipRegistrationInfoBody *)operator new();
  SipRegistrationInfoBody::SipRegistrationInfoBody(v2, this);
  return v2;
}

void sub_1BEFCB66C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40FA8986FCLL);
  _Unwind_Resume(a1);
}

void *SipRegistrationInfoBody::contentType(SipRegistrationInfoBody *this)
{
  return &SipRegistrationInfoBody::kContentType;
}

uint64_t SipRegistrationInfoBody::rootItem(SipRegistrationInfoBody *this)
{
  return (uint64_t)this + 32;
}

void Sip3gppImsInfoBody::~Sip3gppImsInfoBody(void **this)
{
  *this = off_1E78CE578;
  Sip3gppImsInfo::~Sip3gppImsInfo((Sip3gppImsInfo *)(this + 4));
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CE578;
  Sip3gppImsInfo::~Sip3gppImsInfo((Sip3gppImsInfo *)(this + 4));
  *this = off_1E78D24E0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

Sip3gppImsInfoBody *Sip3gppImsInfoBody::clone(Sip3gppImsInfoBody *this)
{
  Sip3gppImsInfoBody *v2;

  v2 = (Sip3gppImsInfoBody *)operator new();
  Sip3gppImsInfoBody::Sip3gppImsInfoBody(v2, this);
  return v2;
}

void sub_1BEFCB790(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40855A9725);
  _Unwind_Resume(a1);
}

void *Sip3gppImsInfoBody::contentType(Sip3gppImsInfoBody *this)
{
  return &Sip3gppImsInfoBody::kContentType;
}

uint64_t Sip3gppImsInfoBody::rootItem(Sip3gppImsInfoBody *this)
{
  return (uint64_t)this + 32;
}

void std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__emplace_unique_key_args<std::string,std::string const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  std::string *v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD *v25;

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v25 = operator new(0x28uLL);
  *v25 = 0;
  v25[1] = v8;
  v16 = (std::string *)(v25 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v25[4] = *(_QWORD *)(a3 + 16);
  }
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v9 || (float)(v18 * (float)v9) < v17)
  {
    v19 = 1;
    if (v9 >= 3)
      v19 = (v9 & (v9 - 1)) != 0;
    v20 = v19 | (2 * v9);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v23)
  {
    *v25 = *v23;
    *v23 = v25;
  }
  else
  {
    *v25 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v25;
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*v25)
    {
      v24 = *(_QWORD *)(*v25 + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v24 >= v9)
          v24 %= v9;
      }
      else
      {
        v24 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v25;
    }
  }
  ++*v6;
}

void sub_1BEFCBA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  uint64_t v10;
  void **v11;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v10, v11);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node(a1, *(void ***)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v9, a4, v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  ++*v7;
  return i;
}

void sub_1BEFCBD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void **__p, uint64_t a13)
{
  if (__p)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&a13, __p);
  _Unwind_Resume(exception_object);
}

void std::__hash_table<std::__hash_value_type<std::string,SipHeader *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipHeader *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipHeader *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipHeader *>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  std::string *v10;
  __int128 *v11;
  __int128 v12;

  v7 = a1 + 16;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  v8 = a4 + 1;
  v9 = operator new(0x30uLL);
  *a4 = v9;
  *v8 = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v9 = 0;
  v9[1] = a2;
  v10 = (std::string *)(v9 + 2);
  v11 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)v11, *((_QWORD *)v11 + 1));
  }
  else
  {
    v12 = *v11;
    v9[4] = *((_QWORD *)v11 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
  }
  v9[5] = 0;
  *((_BYTE *)a4 + 16) = 1;
}

void sub_1BEFCBE08(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t SipUdpTransport::SipUdpTransport(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v9[0] = *a2;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    SipTransport::SipTransport((_QWORD *)a1, v9, a3);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    SipTransport::SipTransport((_QWORD *)a1, v9, a3);
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)a1 = &off_1E78CE740;
  *(_QWORD *)(a1 + 32) = &unk_1E78CE788;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  return a1;
}

void SipUdpTransport::~SipUdpTransport(SipUdpTransport *this)
{
  uint64_t v2;
  _QWORD **v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  void *v16;
  unint64_t *v17;
  unint64_t v18;
  void ***v19;
  void **v20;
  uint64_t *v21;
  void **v22;
  void **v23;
  void **v24;
  BOOL v25;
  uint64_t *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void *__p[2];
  char v33;
  void *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;

  *(_QWORD *)this = &off_1E78CE740;
  *((_QWORD *)this + 4) = &unk_1E78CE788;
  std::string::basic_string[abi:ne180100]<0>(&v34, "sip.tport");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v34, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"closing UDP transport", 21);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v33 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v36) < 0)
    operator delete(v34);
  v3 = (_QWORD **)((char *)this + 56);
  v4 = *((_QWORD *)this + 7);
  if (!v4)
    goto LABEL_42;
  v5 = (uint64_t *)(v4 + 104);
  v6 = *(std::__shared_weak_count **)(v4 + 112);
  if (v6)
  {
    v7 = std::__shared_weak_count::lock(v6);
    if (!v7)
      goto LABEL_15;
    v8 = v7;
    v9 = *v5;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (v11)
    {
      if (!v9)
      {
LABEL_15:
        v12 = *(std::__shared_weak_count **)(v4 + 112);
        *v5 = 0;
        *(_QWORD *)(v4 + 112) = 0;
        if (v12)
          std::__shared_weak_count::__release_weak(v12);
      }
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v8);
      if (!v9)
        goto LABEL_15;
    }
  }
  else
  {
    *v5 = 0;
    *(_QWORD *)(v4 + 112) = 0;
  }
  if (!*((_QWORD *)this + 9))
    goto LABEL_42;
  v13 = (uint64_t)*v3;
  SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::delegateForRemoteAddress(*v3, (uint64_t *)this + 9, &v34);
  if (!v35)
    goto LABEL_30;
  v14 = std::__shared_weak_count::lock(v35);
  if (!v14)
  {
    if (v35)
      std::__shared_weak_count::__release_weak(v35);
    goto LABEL_30;
  }
  v15 = v14;
  v16 = v34;
  v17 = (unint64_t *)&v14->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v35)
    std::__shared_weak_count::__release_weak(v35);
  if (!v16)
  {
LABEL_30:
    v34 = 0;
    v35 = 0;
    v36 = 0;
    IpAddress::asString(*((_QWORD *)this + 9), (uint64_t)&v34, 3);
    v19 = (void ***)(v13 + 80);
    v20 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v13 + 80, &v34);
    v21 = (uint64_t *)v20;
    if ((void **)(v13 + 88) != v20)
    {
      v22 = (void **)v20[1];
      if (v22)
      {
        do
        {
          v23 = v22;
          v22 = (void **)*v22;
        }
        while (v22);
      }
      else
      {
        v24 = v20;
        do
        {
          v23 = (void **)v24[2];
          v25 = *v23 == v24;
          v24 = v23;
        }
        while (!v25);
      }
      if (*v19 == v20)
        *v19 = v23;
      v26 = *(uint64_t **)(v13 + 88);
      --*(_QWORD *)(v13 + 96);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v26, v21);
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(v21 + 4));
      operator delete(v21);
    }
    if (SHIBYTE(v36) < 0)
      operator delete(v34);
  }
LABEL_42:
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 7);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 72);
  v27 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v27)
  {
    v28 = (unint64_t *)&v27->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  *(_QWORD *)this = off_1E78C6EE0;
  v31 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
}

{
  SipUdpTransport::~SipUdpTransport(this);
  JUMPOUT(0x1C3B87100);
}

void sub_1BEFCC1F4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'SipUdpTransport::~SipUdpTransport(SipUdpTransport *this)
{
  SipUdpTransport::~SipUdpTransport((SipUdpTransport *)((char *)this - 32));
}

{
  SipUdpTransport::~SipUdpTransport((SipUdpTransport *)((char *)this - 32));
  JUMPOUT(0x1C3B87100);
}

void SipUdpTransport::initialize(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::__shared_weak_count *v6;
  NSObject *v7;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  NSObject *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  _BOOL4 v34;
  uint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  dispatch_object_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  NSObject *v64;
  const ImsResult *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  dispatch_object_t object;
  std::__shared_weak_count *v79;
  char v80;
  void *__p[2];
  int v82;
  char v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  _QWORD v87[2];
  uint64_t v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  std::__shared_weak_count *v91;
  __int128 v92;

  v7 = a1[5];
  v6 = (std::__shared_weak_count *)a1[6];
  object = v7;
  if (!v6 || (v12 = std::__shared_weak_count::lock(v6), (v79 = v12) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  v14 = operator new(0xA0uLL);
  v15 = v14;
  v14[1] = 0;
  v14[2] = 0;
  *v14 = &off_1E78CE818;
  v16 = v14 + 3;
  v17 = v7 + 4;
  if (!v7)
    v17 = 0;
  __p[0] = v17;
  __p[1] = v13;
  object = 0;
  v79 = 0;
  SipUdpSocketMultiplexer::SipUdpSocketMultiplexer(v14 + 3, (uint64_t *)__p);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  a1[7] = (uint64_t)v16;
  v20 = a1 + 7;
  v21 = (std::__shared_weak_count *)a1[8];
  a1[8] = (uint64_t)v15;
  if (v21)
  {
    v22 = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v79)
  {
    v24 = &v79->__shared_owners_;
    do
      v25 = __ldaxr((unint64_t *)v24);
    while (__stlxr(v25 - 1, (unint64_t *)v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  SipTransport::transportLayer((SipTransport *)a1, __p);
  if (__p[0])
  {
    SipTransport::transportLayer((SipTransport *)a1, &object);
    (*((void (**)(__int128 *__return_ptr))object->isa + 25))(&v92);
    v26 = v92;
    v27 = v79;
    if (v79)
    {
      v28 = &v79->__shared_owners_;
      do
        v29 = __ldaxr((unint64_t *)v28);
      while (__stlxr(v29 - 1, (unint64_t *)v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  else
  {
    v26 = 0;
  }
  v30 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v31 = (unint64_t *)((char *)__p[1] + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v92 = 0uLL;
  SipTransport::transportLayer((SipTransport *)a1, __p);
  if (__p[0])
  {
    SipTransport::transportLayer((SipTransport *)a1, &v90);
    (*(void (**)(dispatch_object_t *__return_ptr))(*(_QWORD *)v90 + 176))(&object);
    v33 = v79;
    v34 = object != 0;
    if (v79)
    {
      v35 = &v79->__shared_owners_;
      do
        v36 = __ldaxr((unint64_t *)v35);
      while (__stlxr(v36 - 1, (unint64_t *)v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v37 = v91;
    if (v91)
    {
      v38 = (unint64_t *)&v91->__shared_owners_;
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
  }
  else
  {
    v34 = 0;
  }
  v40 = (std::__shared_weak_count *)__p[1];
  if (!__p[1])
    goto LABEL_47;
  v41 = (unint64_t *)((char *)__p[1] + 8);
  do
    v42 = __ldaxr(v41);
  while (__stlxr(v42 - 1, v41));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
    if (!v34)
      goto LABEL_77;
  }
  else
  {
LABEL_47:
    if (!v34)
      goto LABEL_77;
  }
  SipTransport::transportLayer((SipTransport *)a1, &v90);
  (*(void (**)(dispatch_object_t *__return_ptr))(*(_QWORD *)v90 + 176))(&object);
  v43 = object;
  v44 = (std::__shared_weak_count *)a1[8];
  v88 = a1[7];
  v89 = v44;
  if (v44)
  {
    v45 = (unint64_t *)&v44->__shared_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
  }
  (*((void (**)(void **__return_ptr, dispatch_object_t, uint64_t *, uint64_t, uint64_t))v43->isa + 14))(__p, v43, &v88, a4, v26);
  v47 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  v92 = v47;
  if (v48)
  {
    v49 = (unint64_t *)&v48->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v52 = (unint64_t *)((char *)__p[1] + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v89;
  if (v89)
  {
    v55 = (unint64_t *)&v89->__shared_owners_;
    do
      v56 = __ldaxr(v55);
    while (__stlxr(v56 - 1, v55));
    if (!v56)
    {
      ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
      std::__shared_weak_count::__release_weak(v54);
    }
  }
  v57 = v79;
  if (v79)
  {
    v58 = &v79->__shared_owners_;
    do
      v59 = __ldaxr((unint64_t *)v58);
    while (__stlxr(v59 - 1, (unint64_t *)v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = v91;
  if (v91)
  {
    v61 = (unint64_t *)&v91->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
LABEL_77:
  *(_QWORD *)(a5 + 64) = 0;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v63 = v92;
  if (!(_QWORD)v92)
  {
    v84 = 0uLL;
    v85 = 0uLL;
    v86 = 0uLL;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v82 = 0x40000000;
    v65 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)__p, "NetworkManager un-available");
    ImsResult::ImsResult((ImsResult *)a5, v65);
    ImsResult::~ImsResult((ImsResult *)__p);
    goto LABEL_87;
  }
  v64 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    object = (dispatch_object_t)sImsDispatchQueue;
LABEL_82:
    dispatch_retain(v64);
    goto LABEL_83;
  }
  v64 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
  sImsDispatchQueue = (uint64_t)v64;
  object = v64;
  if (v64)
    goto LABEL_82;
LABEL_83:
  v87[0] = &off_1E78B7BD8;
  v87[1] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  (*(void (**)(uint64_t, uint64_t, dispatch_object_t *, uint64_t, _QWORD, _QWORD *, void **, uint64_t))(*(_QWORD *)v63 + 16))(v63, a2, &object, a3, 0, v87, __p, a4);
  if (v83 < 0)
    operator delete(__p[0]);
  ims::CFType::~CFType((ims::CFType *)v87);
  if (object)
    dispatch_release(object);
LABEL_87:
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a5 + 8) + 24))(*(_QWORD *)(a5 + 8), *(unsigned int *)(a5 + 16)))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "sip.tport");
    std::string::basic_string[abi:ne180100]<0>(&object, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v66 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&object);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v66 + 8), (uint64_t)"Unable to initialize UDP transport: ", 36);
    *(_BYTE *)(v66 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a5 + 16))(a5, v66);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v66 + 64))(v66, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v66 + 17) = 0;
    if (v80 < 0)
      operator delete(object);
    if (v83 < 0)
      operator delete(__p[0]);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v20);
  }
  else
  {
    v67 = *v20;
    v76 = v63;
    v77 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
    if (*((_QWORD *)&v92 + 1))
    {
      v68 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v67 + 120), &v76);
    v70 = v77;
    if (v77)
    {
      v71 = (unint64_t *)&v77->__shared_owners_;
      do
        v72 = __ldaxr(v71);
      while (__stlxr(v72 - 1, v71));
      if (!v72)
      {
        ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
        std::__shared_weak_count::__release_weak(v70);
      }
    }
  }
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v92 + 1);
  if (*((_QWORD *)&v92 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v92 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1BEFCC9A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t object, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  ImsResult *v31;
  uint64_t v32;

  if (a23 < 0)
    operator delete(__p);
  ImsResult::~ImsResult(v31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 96);
  _Unwind_Resume(a1);
}

void SipUdpTransport::initialize(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  const ImsResult *v7;
  _QWORD v8[2];
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;

  v4 = *a2;
  v6 = *(_QWORD *)(v4 + 56);
  v5 = (uint64_t *)(v4 + 56);
  if (v6)
  {
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 56), v5);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  else
  {
    v10 = 0u;
    v11 = 0u;
    v12 = 0u;
    v8[0] = &off_1E78B7238;
    v8[1] = &_bambiDomain;
    v9 = 1073741825;
    v7 = (const ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)v8, "old transport is not initialized");
    ImsResult::ImsResult((ImsResult *)a3, v7);
    ImsResult::~ImsResult((ImsResult *)v8);
  }
}

void sub_1BEFCCB80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

double SipUdpTransport::setRemoteOutboundAddress@<D0>(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  double result;
  uint64_t v23;
  std::__shared_weak_count *v24;
  __int128 v25;

  if (!a1[7])
  {
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741827;
    return result;
  }
  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 32))(&v25);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 9), &v25);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v25 + 1);
  if (*((_QWORD *)&v25 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v25 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v10 = (std::__shared_weak_count *)a1[6];
  v9 = a1[7];
  if (v10)
  {
    v11 = a1[5];
    p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = std::__shared_weak_count::lock(v10);
    if (v14)
    {
      v15 = v14;
      v16 = v11 + 32;
      if (!v11)
        v16 = 0;
      v17 = (unint64_t *)&v14->__shared_weak_owners_;
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
      v23 = v16;
      v24 = v14;
      std::__shared_weak_count::__release_weak(v10);
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (v20)
        goto LABEL_23;
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      v21 = v15;
    }
    else
    {
      v23 = 0;
      v24 = 0;
      v21 = v10;
    }
    std::__shared_weak_count::__release_weak(v21);
  }
  else
  {
    v23 = 0;
    v24 = 0;
  }
LABEL_23:
  SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::addDelegateForRemoteAddress(v9, &v23, a2);
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BEFCCD48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::addDelegateForRemoteAddress(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  void *__p[2];
  uint64_t v12;
  void **v13;

  __p[0] = 0;
  __p[1] = 0;
  v12 = 0;
  IpAddress::asString(*a3, (uint64_t)__p, 3);
  v13 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a1 + 80), __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v13);
  v7 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v8 = (unint64_t *)(v6 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v10 = (std::__shared_weak_count *)v5[8];
  v5[7] = v7;
  v5[8] = v6;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  if (SHIBYTE(v12) < 0)
    operator delete(__p[0]);
}

void sub_1BEFCCE0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUdpTransport::send(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  v1 = *(_QWORD *)(a1 + 56);
  v2 = *(_QWORD *)(v1 + 120);
  v3 = *(std::__shared_weak_count **)(v1 + 128);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 32))(v2);
  if (v3)
  {
    v6 = (unint64_t *)&v3->__shared_owners_;
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_1BEFCCEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipUdpTransport::processDataFromSocket(_QWORD *a1, void *a2, size_t a3, uint64_t a4)
{
  uint64_t v8;
  std::string::pointer v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14[2];
  void *__p[2];
  char v16;
  void *v17[2];
  char v18;
  void *__dst[2];
  uint64_t v20;
  unsigned __int8 v21;
  std::string::pointer v22;
  std::string v23[2];
  uint64_t v24;
  uint64_t v25;

  v24 = 0;
  v8 = a1[3];
  memset(v23, 0, sizeof(v23));
  v25 = v8;
  v22 = 0;
  v21 = 0;
  __dst[0] = 0;
  __dst[1] = 0;
  v20 = 0;
  std::string::basic_string[abi:ne180100](__dst, a2, a3);
  if ((SipMessageDecoder::decode(v23, (const std::string::value_type *)__dst, &v22, &v21) & 1) != 0)
  {
    v9 = v22;
    if (v22)
    {
      v10 = qword_1EF57C720;
      if (byte_1EF57C72F >= 0)
        v10 = byte_1EF57C72F;
      if (v10)
      {
        v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 24))(a1);
        SipRecorder::recordBlob(v9, (uint64_t)__dst, v11, 0);
        v9 = v22;
      }
      v14[0] = 0;
      v14[1] = 0;
      SipTransport::processIncomingMessage((uint64_t)a1, (uint64_t)v9, (uint64_t)a2, a3, v21, a4, v14);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v17, "sip.tport");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::error(ims::_logger, (uint64_t)v17, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"incomplete message received:", 28);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
      std::string::basic_string[abi:ne180100]<0>(v17, "sip.tport");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)v17, (uint64_t)__p);
      (*(void (**)(_BYTE *, void **))(*(_QWORD *)v13 + 32))(v13, __dst);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v13[17] = 0;
      if (v16 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v17[0]);
    }
  }
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)v23);
}

void sub_1BEFCD118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a23 < 0)
    operator delete(__p);
  if (a29 < 0)
    operator delete(a24);
  SipMessageDecoder::~SipMessageDecoder((SipMessageDecoder *)&a32);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipUdpTransport::processDataFromSocket(uint64_t a1, void *a2, size_t a3, uint64_t a4)
{
  SipUdpTransport::processDataFromSocket((_QWORD *)(a1 - 32), a2, a3, a4);
}

void SipUdpTransport::setServiceClass(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;

  v2 = *(_QWORD *)(a1 + 56);
  if (v2)
  {
    v6 = *(_QWORD *)(v2 + 120);
    v5 = *(std::__shared_weak_count **)(v2 + 128);
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        return;
    }
    else
    {
LABEL_7:
      if (!v6)
        return;
    }
    v10 = *(_QWORD *)(a1 + 56);
    v11 = *(_QWORD *)(v10 + 120);
    v12 = *(std::__shared_weak_count **)(v10 + 128);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 112))(v11, a2);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
}

void sub_1BEFCD290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipUdpTransport::localAddress(SipUdpTransport *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v2 = *((_QWORD *)this + 7);
  if (v2)
  {
    v3 = *(_QWORD *)(v2 + 120);
    v4 = *(std::__shared_weak_count **)(v2 + 128);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void sub_1BEFCD33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

char *SipUdpTransport::name(SipUdpTransport *this)
{
  return &SipTransport::kTransportUDP;
}

void std::__shared_ptr_emplace<SipUdpSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CE818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipUdpSocketMultiplexer>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CE818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipUdpSocketMultiplexer>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SipSocketMultiplexer<ImsUdpSocketInterfaceDelegate>::delegateForRemoteAddress(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void **v5;
  void **v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (!a1[12])
    goto LABEL_9;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  IpAddress::asString(*a2, (uint64_t)__p, 3);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 10), __p);
  v6 = v5;
  if (a1 + 11 != v5)
  {
    v7 = (char *)v5[8];
    *a3 = v5[7];
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 16);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (a1 + 11 == v6)
  {
LABEL_9:
    v10 = a1[14];
    *a3 = a1[13];
    a3[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 16);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

void sub_1BEFCD470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t *std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEFCD604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

void SipHeaderTemplateMap::initializeFromPref(uint64_t **this, const ImsPrefs *a2, void **a3)
{
  const void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  size_t size;
  std::string *v10;
  char *v11;
  std::string::size_type v12;
  _BYTE *v13;
  unint64_t v14;
  uint64_t v16;
  std::__split_buffer<std::string>::pointer end_high;
  std::string::size_type v18;
  std::string::size_type v19;
  unsigned int v20;
  int v21;
  int v22;
  unint64_t v23;
  unsigned __int8 *v24;
  int v25;
  __int128 v26;
  unint64_t v27;
  int v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  unsigned int v33;
  int *v34;
  int v35;
  int v36;
  _DWORD *v38;
  unsigned int v39;
  std::string::size_type v40;
  uint64_t v41;
  int v42;
  int v44;
  int v45;
  uint64_t v46;
  std::string::size_type v47;
  uint64_t i;
  uint64_t **v49;
  std::__split_buffer<std::string>::pointer v50;
  std::string *v51;
  std::string *v52;
  __int128 v53;
  std::__split_buffer<std::string>::pointer first;
  const void *v55;
  void *v56;
  _OWORD *v57;
  __int128 v58;
  void *v59;
  unint64_t v60;
  unint64_t v61;
  unint64_t v62;
  std::string *v63;
  std::string *v64;
  __int128 v65;
  std::string::size_type v66;
  std::string::size_type v67;
  uint64_t v68;
  std::string::size_type *p_size;
  __int128 v70;
  int v71;
  std::string *v72;
  unint64_t v73;
  std::string::pointer data;
  std::__split_buffer<std::string>::pointer v75;
  __int128 v76;
  std::string::size_type v77;
  unint64_t v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  char *v83;
  char *v84;
  std::__split_buffer<std::string>::pointer v85;
  __int128 v86;
  std::string::size_type v87;
  std::string::size_type v88;
  uint64_t v89;
  int v90;
  __int128 v91;
  std::string::size_type v92;
  std::string::size_type v93;
  uint64_t v94;
  std::string v97;
  unint64_t v98;
  uint64_t v99;
  std::string v100;
  void *v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  std::__split_buffer<std::string> __p;
  void *v108[2];
  char v109;
  std::string v110;
  std::string v111;
  std::string __str;

  v104 = 0;
  v105 = 0;
  v106 = 0;
  v101 = 0;
  v102 = 0;
  v103 = 0;
  v4 = ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, a3);
  if (!v4)
    v4 = a3[11];
  if (v4)
  {
    ImsDictPref::keysAndValues((uint64_t)v4, &v104, (char **)&v101);
    v5 = v104;
    if (v105 != v104)
    {
      v6 = 0;
      while (1)
      {
        v99 = 0xFFFFFFFFLL;
        v98 = 0xFFFFFFFFLL;
        memset(&v100, 0, sizeof(v100));
        v7 = v5 + 24 * v6;
        memset(&__p, 0, 24);
        memset(&__str, 0, sizeof(__str));
        if (*(char *)(v7 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(&__str, *(const std::string::value_type **)v7, *(_QWORD *)(v7 + 8));
        }
        else
        {
          v8 = *(_OWORD *)v7;
          __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(v7 + 16);
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = v8;
        }
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        else
          size = __str.__r_.__value_.__l.__size_;
        v94 = v6;
        if (size)
        {
          v10 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__str
              : (std::string *)__str.__r_.__value_.__r.__words[0];
          v11 = (char *)memchr(v10, 91, size);
          if (v11)
          {
            v12 = v11 - (char *)v10;
            if (v11 - (char *)v10 != -1)
            {
              if (size <= v12 + 1)
                goto LABEL_25;
              v13 = memchr(v11 + 1, 93, size - (v12 + 1));
              v14 = v13 - (_BYTE *)v10;
              if (!v13)
                v14 = -1;
              if (v14 == -1 || v14 < v12)
              {
LABEL_25:
                std::string::basic_string[abi:ne180100]<0>(&v111, "prefs");
                std::string::basic_string[abi:ne180100]<0>(&v110, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v16 = ImsLogger::error(ims::_logger, (uint64_t)&v111, (uint64_t)&v110);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"missing end bracket: ", 21);
                *(_BYTE *)(v16 + 17) = 0;
                (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &__str);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v16 + 17) = 0;
                if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v110.__r_.__value_.__l.__data_);
                if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v111.__r_.__value_.__l.__data_);
                goto LABEL_101;
              }
              std::string::basic_string(&v111, &__str, v12 + 1, v14 + ~v12, (std::allocator<char> *)&v110);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              *(_OWORD *)&__p.__first_ = *(_OWORD *)&v111.__r_.__value_.__l.__data_;
              __p.__end_ = (std::__split_buffer<std::string>::pointer)v111.__r_.__value_.__r.__words[2];
              std::string::basic_string(&v111, &__str, 0, v12, (std::allocator<char> *)&v110);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              __str = v111;
            }
          }
        }
        end_high = (std::__split_buffer<std::string>::pointer)HIBYTE(__p.__end_);
        if (SHIBYTE(__p.__end_) < 0)
          end_high = __p.__begin_;
        if (!end_high)
        {
          v20 = 0;
          v22 = -1;
          v21 = -1;
LABEL_95:
          std::string::operator=(&v100, &__str);
          LODWORD(v99) = v21;
          v45 = 1;
          v98 = __PAIR64__(v20, v22);
          goto LABEL_102;
        }
        memset(&v111, 0, sizeof(v111));
        std::string::basic_string[abi:ne180100]<0>(&v110, ", ");
        ims::tokenize((std::string *)&__p, (uint64_t *)&v111, (char *)&v110);
        if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v110.__r_.__value_.__l.__data_);
        v18 = v111.__r_.__value_.__l.__size_;
        v19 = v111.__r_.__value_.__r.__words[0];
        if (v111.__r_.__value_.__r.__words[0] == v111.__r_.__value_.__l.__size_)
        {
          v20 = 0;
          v22 = -1;
          v21 = -1;
LABEL_94:
          v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
          std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
          goto LABEL_95;
        }
        v20 = 0;
        v21 = -1;
        v22 = -1;
        while (1)
        {
          ims::lowerCase((char *)v19);
          ims::chomp((std::string *)v19, "\r\n\t ", 3);
          LODWORD(v23) = *(char *)(v19 + 23);
          if ((v23 & 0x80000000) == 0)
          {
            v24 = (unsigned __int8 *)v19;
            if (!*(_BYTE *)(v19 + 23))
              goto LABEL_85;
            goto LABEL_46;
          }
          if (*(_QWORD *)(v19 + 8))
            break;
LABEL_85:
          v19 += 24;
          if (v19 == v18)
            goto LABEL_94;
        }
        v24 = *(unsigned __int8 **)v19;
LABEL_46:
        v25 = *v24;
        if (v25 == 45)
        {
          std::string::basic_string(&v110, (const std::string *)v19, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v108);
          if (*(char *)(v19 + 23) < 0)
            operator delete(*(void **)v19);
          v26 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
          v27 = v110.__r_.__value_.__r.__words[2];
          *(_QWORD *)(v19 + 16) = *((_QWORD *)&v110.__r_.__value_.__l + 2);
          *(_OWORD *)v19 = v26;
          v23 = HIBYTE(v27);
        }
        v28 = (char)v23;
        v23 = v23;
        if ((v23 & 0x80u) != 0)
          v23 = *(_QWORD *)(v19 + 8);
        switch(v23)
        {
          case 3uLL:
            v29 = *(unsigned __int16 **)v19;
            if (v28 >= 0)
              v29 = (unsigned __int16 *)v19;
            v30 = *v29;
            v31 = *((unsigned __int8 *)v29 + 2);
            if (v30 != 12601 || v31 != 49)
              goto LABEL_83;
            v33 = v22 & 0xFFFFFFF3;
            if (v25 == 45)
              v22 = v33 | 8;
            else
              v22 = v33 | 4;
            goto LABEL_85;
          case 4uLL:
            v38 = *(_DWORD **)v19;
            if (v28 >= 0)
              v38 = (_DWORD *)v19;
            if (*v38 != 1768319351)
              goto LABEL_83;
            v39 = v22 & 0xFFFFFFFC;
            if (v25 == 45)
              v22 = v39 | 2;
            else
              v22 = v39 | 1;
            goto LABEL_85;
          case 7uLL:
            v34 = *(int **)v19;
            if (v28 >= 0)
              v34 = (int *)v19;
            v35 = *v34;
            v36 = *(int *)((char *)v34 + 3);
            if (v35 != 1835627120 || v36 != 2037539181)
              goto LABEL_83;
            if (v25 == 45)
              v21 = -2;
            else
              v21 = -3;
            goto LABEL_85;
          case 9uLL:
            v40 = *(_QWORD *)v19;
            if (v28 >= 0)
              v40 = v19;
            v41 = *(_QWORD *)v40;
            v42 = *(unsigned __int8 *)(v40 + 8);
            if (v41 != 0x7261646E6F636573 || v42 != 121)
              goto LABEL_83;
            if (v25 == 45)
              v21 = -3;
            else
              v21 = -2;
            goto LABEL_85;
          default:
LABEL_83:
            v44 = ims::Services::serviceWithName((_BYTE *)v19);
            if (v44)
            {
              v20 |= v44;
              goto LABEL_85;
            }
            std::string::basic_string[abi:ne180100]<0>(&v110, "prefs");
            std::string::basic_string[abi:ne180100]<0>(v108, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v46 = ImsLogger::error(ims::_logger, (uint64_t)&v110, (uint64_t)v108);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"unrecognized flag '", 19);
            *(_BYTE *)(v46 + 17) = 0;
            (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v46 + 32))(v46, v19);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"' in ", 5);
            *(_BYTE *)(v46 + 17) = 0;
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 32))(v46, v7);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v46 + 17) = 0;
            if (v109 < 0)
              operator delete(v108[0]);
            if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v110.__r_.__value_.__l.__data_);
            v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v111;
            std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v110);
LABEL_101:
            v45 = 0;
LABEL_102:
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__str.__r_.__value_.__l.__data_);
            if (SHIBYTE(__p.__end_) < 0)
            {
              operator delete(__p.__first_);
              if (!v45)
                goto LABEL_170;
LABEL_108:
              memset(&__str, 0, sizeof(__str));
              std::string::basic_string[abi:ne180100]<0>(&__p, ", ");
              ims::tokenize(&v100, (uint64_t *)&__str, (char *)&__p);
              if (SHIBYTE(__p.__end_) < 0)
                operator delete(__p.__first_);
              v47 = __str.__r_.__value_.__l.__size_;
              v93 = __str.__r_.__value_.__l.__size_;
              for (i = __str.__r_.__value_.__r.__words[0]; ; i += 24)
              {
                if (i == v47)
                {
                  __p.__first_ = &__str;
                  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                  goto LABEL_170;
                }
                ims::normalize(i, 1, &v97);
                if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v97.__r_.__value_.__l.__data_);
                v111.__r_.__value_.__r.__words[0] = 0;
                v49 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)this, &v111, (void **)i);
                v50 = (std::__split_buffer<std::string>::pointer)*v49;
                if (!*v49)
                {
                  __p.__end_ = 0;
                  v51 = (std::string *)operator new(0x50uLL);
                  __p.__first_ = v51;
                  __p.__begin_ = (std::__split_buffer<std::string>::pointer)(this + 1);
                  LOBYTE(__p.__end_) = 0;
                  v52 = (std::string *)((char *)v51 + 32);
                  if (*(char *)(i + 23) < 0)
                  {
                    std::string::__init_copy_ctor_external(v52, *(const std::string::value_type **)i, *(_QWORD *)(i + 8));
                    first = __p.__first_;
                  }
                  else
                  {
                    v53 = *(_OWORD *)i;
                    v51[2].__r_.__value_.__r.__words[0] = *(_QWORD *)(i + 16);
                    *(_OWORD *)&v52->__r_.__value_.__l.__data_ = v53;
                    first = v51;
                  }
                  v51[2].__r_.__value_.__l.__size_ = 0;
                  v51[2].__r_.__value_.__r.__words[2] = 0;
                  v51[3].__r_.__value_.__r.__words[0] = 0;
                  LOBYTE(__p.__end_) = 1;
                  std::__tree<unsigned int>::__insert_node_at(this, (uint64_t)v111.__r_.__value_.__l.__data_, v49, (uint64_t *)first);
                  v50 = __p.__first_;
                  __p.__first_ = 0;
                  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SipHeaderTemplateMap::HeaderTemplate>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p, 0);
                }
                memset(&v111, 0, sizeof(v111));
                v55 = (const void *)*((_QWORD *)v101 + v94);
                if (v55)
                {
                  if (v56)
                  {
                    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v56 + 48))(&v110);
                    v57 = (_OWORD *)v111.__r_.__value_.__l.__size_;
                    if (v111.__r_.__value_.__l.__size_ >= v111.__r_.__value_.__r.__words[2])
                    {
                      v60 = 0xAAAAAAAAAAAAAAABLL
                          * ((uint64_t)(v111.__r_.__value_.__l.__size_ - v111.__r_.__value_.__r.__words[0]) >> 3);
                      v61 = v60 + 1;
                      if (v60 + 1 > 0xAAAAAAAAAAAAAAALL)
                        std::vector<std::string>::__throw_length_error[abi:ne180100]();
                      if (0x5555555555555556
                         * ((uint64_t)(v111.__r_.__value_.__r.__words[2] - v111.__r_.__value_.__r.__words[0]) >> 3) > v61)
                        v61 = 0x5555555555555556
                            * ((uint64_t)(v111.__r_.__value_.__r.__words[2] - v111.__r_.__value_.__r.__words[0]) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL
                         * ((uint64_t)(v111.__r_.__value_.__r.__words[2] - v111.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
                        v62 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v62 = v61;
                      __p.__end_cap_.__value_ = (std::allocator<std::string> *)&v111.__r_.__value_.__r.__words[2];
                      if (v62)
                        v63 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v111.__r_.__value_.__r.__words[2], v62);
                      else
                        v63 = 0;
                      v64 = v63 + v60;
                      __p.__first_ = v63;
                      __p.__begin_ = v64;
                      __p.__end_cap_.__value_ = &v63[v62];
                      v65 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
                      v64->__r_.__value_.__r.__words[2] = v110.__r_.__value_.__r.__words[2];
                      *(_OWORD *)&v64->__r_.__value_.__l.__data_ = v65;
                      memset(&v110, 0, sizeof(v110));
                      __p.__end_ = v64 + 1;
                      std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)&v111, &__p);
                      v66 = v111.__r_.__value_.__l.__size_;
                      std::__split_buffer<std::string>::~__split_buffer(&__p);
                      v111.__r_.__value_.__l.__size_ = v66;
                      if (SHIBYTE(v110.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v110.__r_.__value_.__l.__data_);
                    }
                    else
                    {
                      v58 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
                      *(_QWORD *)(v111.__r_.__value_.__l.__size_ + 16) = *((_QWORD *)&v110.__r_.__value_.__l + 2);
                      *v57 = v58;
                      v111.__r_.__value_.__l.__size_ = (std::string::size_type)v57 + 24;
                    }
                  }
                  else
                  {
                    if (v59)
                      ImsArrayPref::stringValues((uint64_t)v59, (std::vector<std::string> *)&v111);
                  }
                }
                v67 = v111.__r_.__value_.__l.__size_;
                v68 = v111.__r_.__value_.__r.__words[0];
                if (v111.__r_.__value_.__r.__words[0] != v111.__r_.__value_.__l.__size_)
                  break;
LABEL_168:
                __p.__first_ = &v111;
                std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
                v47 = v93;
              }
              p_size = &v50[2].__r_.__value_.__l.__size_;
              while (2)
              {
                if (*(char *)(v68 + 23) < 0)
                {
                  if (!*(_QWORD *)(v68 + 8))
                    goto LABEL_167;
                }
                else if (!*(_BYTE *)(v68 + 23))
                {
                  goto LABEL_167;
                }
                ImsPrefs::substituteRuntimeVars((uint64_t)a2, v68, (uint64_t)&__p);
                if (*(char *)(v68 + 23) < 0)
                  operator delete(*(void **)v68);
                v70 = *(_OWORD *)&__p.__first_;
                *(_QWORD *)(v68 + 16) = __p.__end_;
                *(_OWORD *)v68 = v70;
                v71 = v99;
                v72 = (std::string *)v98;
                __p.__first_ = (std::__split_buffer<std::string>::pointer)0xFFFFFFFFLL;
                LODWORD(__p.__begin_) = -1;
                memset(&__p.__end_, 0, 24);
                std::string::operator=((std::string *)&__p.__end_, (const std::string *)v68);
                LODWORD(__p.__begin_) = v71;
                __p.__first_ = v72;
                v73 = v50[2].__r_.__value_.__r.__words[2];
                data = v50[3].__r_.__value_.__l.__data_;
                if (v73 >= (unint64_t)data)
                {
                  v78 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v73 - *p_size) >> 3);
                  v79 = v78 + 1;
                  if (v78 + 1 > 0x666666666666666)
                    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                  v80 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&data[-*p_size] >> 3);
                  if (2 * v80 > v79)
                    v79 = 2 * v80;
                  if (v80 >= 0x333333333333333)
                    v81 = 0x666666666666666;
                  else
                    v81 = v79;
                  if (v81)
                    v82 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipHeaderTemplateMap::HeaderTemplate>>((uint64_t)&v50[3], v81);
                  else
                    v82 = 0;
                  v83 = &v82[40 * v78];
                  v84 = &v82[40 * v81];
                  v85 = __p.__first_;
                  *((_DWORD *)v83 + 2) = __p.__begin_;
                  *(_QWORD *)v83 = v85;
                  v86 = *(_OWORD *)&__p.__end_;
                  *((_QWORD *)v83 + 4) = __p.__end_cap_.__value_;
                  *((_OWORD *)v83 + 1) = v86;
                  memset(&__p.__end_, 0, 24);
                  v77 = (std::string::size_type)(v83 + 40);
                  v87 = v50[2].__r_.__value_.__l.__size_;
                  v88 = v50[2].__r_.__value_.__r.__words[2];
                  if (v88 == v87)
                  {
                    v50[2].__r_.__value_.__l.__size_ = (std::string::size_type)v83;
                    v50[2].__r_.__value_.__r.__words[2] = v77;
                    v50[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
                  }
                  else
                  {
                    do
                    {
                      v89 = *(_QWORD *)(v88 - 40);
                      v88 -= 40;
                      v90 = *(_DWORD *)(v88 + 8);
                      *((_QWORD *)v83 - 5) = v89;
                      v83 -= 40;
                      *((_DWORD *)v83 + 2) = v90;
                      v91 = *(_OWORD *)(v88 + 16);
                      *((_QWORD *)v83 + 4) = *(_QWORD *)(v88 + 32);
                      *((_OWORD *)v83 + 1) = v91;
                      *(_QWORD *)(v88 + 24) = 0;
                      *(_QWORD *)(v88 + 32) = 0;
                      *(_QWORD *)(v88 + 16) = 0;
                    }
                    while (v88 != v87);
                    v88 = v50[2].__r_.__value_.__l.__size_;
                    v92 = v50[2].__r_.__value_.__r.__words[2];
                    v50[2].__r_.__value_.__l.__size_ = (std::string::size_type)v83;
                    v50[2].__r_.__value_.__r.__words[2] = v77;
                    v50[3].__r_.__value_.__r.__words[0] = (std::string::size_type)v84;
                    while (v92 != v88)
                    {
                      if (*(char *)(v92 - 1) < 0)
                        operator delete(*(void **)(v92 - 24));
                      v92 -= 40;
                    }
                  }
                  if (v88)
                    operator delete((void *)v88);
                }
                else
                {
                  v75 = __p.__first_;
                  *(_DWORD *)(v73 + 8) = __p.__begin_;
                  *(_QWORD *)v73 = v75;
                  v76 = *(_OWORD *)&__p.__end_;
                  *(_QWORD *)(v73 + 32) = __p.__end_cap_.__value_;
                  *(_OWORD *)(v73 + 16) = v76;
                  memset(&__p.__end_, 0, 24);
                  v77 = v73 + 40;
                }
                v50[2].__r_.__value_.__r.__words[2] = v77;
                if (SHIBYTE(__p.__end_cap_.__value_) < 0)
                  operator delete(__p.__end_);
LABEL_167:
                v68 += 24;
                if (v68 == v67)
                  goto LABEL_168;
                continue;
              }
            }
            if (v45)
              goto LABEL_108;
LABEL_170:
            if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v100.__r_.__value_.__l.__data_);
            v6 = v94 + 1;
            v5 = v104;
            if (v94 + 1 >= 0xAAAAAAAAAAAAAAABLL * ((v105 - v104) >> 3))
              goto LABEL_173;
            break;
        }
      }
    }
  }
LABEL_173:
  if (v101)
  {
    v102 = v101;
    operator delete(v101);
  }
  __p.__first_ = (std::__split_buffer<std::string>::pointer)&v104;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
}

void sub_1BEFCE1F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;

  if (*(char *)(v50 - 121) < 0)
    operator delete(*(void **)(v50 - 144));
  if (a39 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  if (a28)
  {
    a29 = (uint64_t)a28;
    operator delete(a28);
  }
  a20 = &a31;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

void SipHeaderTemplateMap::matchingHeaderTemplates(uint64_t a1, const void **a2, int a3, int a4, int a5, int a6, int a7, uint64_t *a8)
{
  size_t v15;
  std::string *v16;
  const void *v17;
  int v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  char v23;
  std::vector<std::string>::pointer end;
  std::string::size_type v25;
  std::string *v26;
  std::vector<std::string>::pointer v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  std::string *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  std::string *v36;
  std::string *v37;
  std::string::size_type v38;
  size_t v39;
  std::string *v40;
  const void *v41;
  std::vector<std::string>::pointer v42;
  __int128 v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  std::string *v47;
  std::string *v48;
  __int128 v49;
  std::string *v50;
  std::vector<std::string>::pointer v51;
  __int128 v52;
  unint64_t v53;
  unint64_t v54;
  unint64_t v55;
  std::string *v56;
  std::string *v57;
  __int128 v58;
  std::string *v59;
  std::vector<std::string>::pointer v60;
  __int128 v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t v64;
  std::string *v65;
  std::string *v66;
  __int128 v67;
  std::string *v68;
  std::vector<std::string>::pointer v69;
  std::vector<std::string>::pointer begin;
  void **v71;
  int v72;
  int v73;
  int v74;
  _QWORD *v75;
  void **v76;
  char v77;
  _QWORD *v78;
  _DWORD *v79;
  _DWORD *v80;
  __int128 *v81;
  unint64_t v82;
  uint64_t v83;
  std::string *v84;
  __int128 v85;
  std::string *v86;
  uint64_t v87;
  int v88;
  std::string v89;
  void *__p[2];
  int64_t v91;
  std::vector<std::string> v92;
  int v93;
  std::__split_buffer<std::string> __v;
  _QWORD v95[4];

  v95[2] = *MEMORY[0x1E0C80C00];
  v93 = a3;
  memset(&v92, 0, sizeof(v92));
  if (a3)
  {
    __p[0] = 0;
    __p[1] = 0;
    v91 = 0;
    ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(__p);
    v88 = a4;
    if (*((char *)a2 + 23) >= 0)
      v15 = *((unsigned __int8 *)a2 + 23);
    else
      v15 = (size_t)a2[1];
    memset(&v89, 0, sizeof(v89));
    std::string::basic_string[abi:ne180100]((uint64_t)&v89, v15 + 1);
    v87 = a1;
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v16 = &v89;
    else
      v16 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if (v15)
    {
      if (*((char *)a2 + 23) >= 0)
        v17 = a2;
      else
        v17 = *a2;
      memmove(v16, v17, v15);
    }
    v18 = a5;
    *(_WORD *)((char *)&v16->__r_.__value_.__l.__data_ + v15) = 58;
    if (v91 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (v91 >= 0)
      v20 = HIBYTE(v91);
    else
      v20 = (std::string::size_type)__p[1];
    v21 = std::string::append(&v89, (const std::string::value_type *)v19, v20);
    v22 = (char *)v21->__r_.__value_.__r.__words[0];
    v95[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v95 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    end = v92.__end_;
    if (v92.__end_ >= v92.__end_cap_.__value_)
    {
      v29 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
      v30 = v29 + 1;
      if (v29 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v30)
        v30 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555)
        v31 = 0xAAAAAAAAAAAAAAALL;
      else
        v31 = v30;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
      if (v31)
        v32 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v92.__end_cap_, v31);
      else
        v32 = 0;
      v37 = v32 + v29;
      __v.__first_ = v32;
      __v.__begin_ = v37;
      __v.__end_cap_.__value_ = &v32[v31];
      v38 = v95[0];
      v37->__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
      v37->__r_.__value_.__l.__size_ = v38;
      *(std::string::size_type *)((char *)&v37->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v95 + 7);
      *((_BYTE *)&v37->__r_.__value_.__s + 23) = v23;
      __v.__end_ = v37 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
      v26 = v92.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
    }
    else
    {
      v25 = v95[0];
      v92.__end_->__r_.__value_.__l.__data_ = v22;
      end->__r_.__value_.__l.__size_ = v25;
      *(std::string::size_type *)((char *)&end->__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v95 + 7);
      *((_BYTE *)&end->__r_.__value_.__s + 23) = v23;
      v26 = end + 1;
    }
    v92.__end_ = v26;
    if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v89.__r_.__value_.__l.__data_);
    if (*((char *)a2 + 23) >= 0)
      v39 = *((unsigned __int8 *)a2 + 23);
    else
      v39 = (size_t)a2[1];
    memset(&v89, 0, sizeof(v89));
    std::string::basic_string[abi:ne180100]((uint64_t)&v89, v39 + 2);
    if ((v89.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v40 = &v89;
    else
      v40 = (std::string *)v89.__r_.__value_.__r.__words[0];
    if (v39)
    {
      if (*((char *)a2 + 23) >= 0)
        v41 = a2;
      else
        v41 = *a2;
      memmove(v40, v41, v39);
    }
    strcpy((char *)v40 + v39, ":*");
    v42 = v92.__end_;
    if (v92.__end_ >= v92.__end_cap_.__value_)
    {
      v44 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
      v45 = v44 + 1;
      a4 = v88;
      if (v44 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      a5 = v18;
      if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v45)
        v45 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555)
        v46 = 0xAAAAAAAAAAAAAAALL;
      else
        v46 = v45;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
      a1 = v87;
      if (v46)
        v47 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v92.__end_cap_, v46);
      else
        v47 = 0;
      v48 = v47 + v44;
      __v.__first_ = v47;
      __v.__begin_ = v48;
      __v.__end_cap_.__value_ = &v47[v46];
      v49 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v48->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v48->__r_.__value_.__l.__data_ = v49;
      memset(&v89, 0, sizeof(v89));
      __v.__end_ = v48 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
      v50 = v92.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v92.__end_ = v50;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
    else
    {
      v43 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v92.__end_->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v42->__r_.__value_.__l.__data_ = v43;
      v92.__end_ = v42 + 1;
      a5 = v18;
      a4 = v88;
      a1 = v87;
    }
    std::operator+<char>();
    v51 = v92.__end_;
    if (v92.__end_ >= v92.__end_cap_.__value_)
    {
      v53 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
      v54 = v53 + 1;
      if (v53 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v54)
        v54 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555)
        v55 = 0xAAAAAAAAAAAAAAALL;
      else
        v55 = v54;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
      if (v55)
        v56 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v92.__end_cap_, v55);
      else
        v56 = 0;
      v57 = v56 + v53;
      __v.__first_ = v56;
      __v.__begin_ = v57;
      __v.__end_cap_.__value_ = &v56[v55];
      v58 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v57->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v57->__r_.__value_.__l.__data_ = v58;
      memset(&v89, 0, sizeof(v89));
      __v.__end_ = v57 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
      v59 = v92.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v92.__end_ = v59;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
    else
    {
      v52 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v92.__end_->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v51->__r_.__value_.__l.__data_ = v52;
      v92.__end_ = v51 + 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v89, "*:*");
    v60 = v92.__end_;
    if (v92.__end_ >= v92.__end_cap_.__value_)
    {
      v62 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
      v63 = v62 + 1;
      if (v62 + 1 > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::string>::__throw_length_error[abi:ne180100]();
      if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v63)
        v63 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555)
        v64 = 0xAAAAAAAAAAAAAAALL;
      else
        v64 = v63;
      __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
      if (v64)
        v65 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v92.__end_cap_, v64);
      else
        v65 = 0;
      v66 = v65 + v62;
      __v.__first_ = v65;
      __v.__begin_ = v66;
      __v.__end_cap_.__value_ = &v65[v64];
      v67 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v66->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v66->__r_.__value_.__l.__data_ = v67;
      memset(&v89, 0, sizeof(v89));
      __v.__end_ = v66 + 1;
      std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
      v68 = v92.__end_;
      std::__split_buffer<std::string>::~__split_buffer(&__v);
      v92.__end_ = v68;
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
    }
    else
    {
      v61 = *(_OWORD *)&v89.__r_.__value_.__l.__data_;
      v92.__end_->__r_.__value_.__r.__words[2] = v89.__r_.__value_.__r.__words[2];
      *(_OWORD *)&v60->__r_.__value_.__l.__data_ = v61;
      v92.__end_ = v60 + 1;
    }
    if (SHIBYTE(v91) < 0)
LABEL_94:
      operator delete(__p[0]);
  }
  else
  {
    v92.__end_ = (std::vector<std::string>::pointer)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v92, (__int128 *)a2);
    std::string::basic_string[abi:ne180100]<0>(__p, "*");
    v27 = v92.__end_;
    if (v92.__end_ < v92.__end_cap_.__value_)
    {
      v28 = *(_OWORD *)__p;
      v92.__end_->__r_.__value_.__r.__words[2] = v91;
      *(_OWORD *)&v27->__r_.__value_.__l.__data_ = v28;
      v92.__end_ = v27 + 1;
      goto LABEL_95;
    }
    v33 = 0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_ - (char *)v92.__begin_) >> 3);
    v34 = v33 + 1;
    if (v33 + 1 > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::string>::__throw_length_error[abi:ne180100]();
    if (0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) > v34)
      v34 = 0x5555555555555556 * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3);
    if (0xAAAAAAAAAAAAAAABLL * (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 3) >= 0x555555555555555)
      v35 = 0xAAAAAAAAAAAAAAALL;
    else
      v35 = v34;
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)&v92.__end_cap_;
    if (v35)
      v36 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)&v92.__end_cap_, v35);
    else
      v36 = 0;
    v84 = v36 + v33;
    __v.__first_ = v36;
    __v.__begin_ = v84;
    __v.__end_cap_.__value_ = &v36[v35];
    v85 = *(_OWORD *)__p;
    v84->__r_.__value_.__r.__words[2] = v91;
    *(_OWORD *)&v84->__r_.__value_.__l.__data_ = v85;
    __p[1] = 0;
    v91 = 0;
    __p[0] = 0;
    __v.__end_ = v84 + 1;
    std::vector<std::string>::__swap_out_circular_buffer(&v92, &__v);
    v86 = v92.__end_;
    std::__split_buffer<std::string>::~__split_buffer(&__v);
    v92.__end_ = v86;
    if (SHIBYTE(v91) < 0)
      goto LABEL_94;
  }
LABEL_95:
  begin = v92.__begin_;
  v69 = v92.__end_;
  if (v92.__begin_ != v92.__end_)
  {
    v71 = (void **)(a1 + 8);
    if (a4)
      v72 = 1;
    else
      v72 = 2;
    if (a5)
      v73 = 4;
    else
      v73 = 8;
    v74 = v73 | v72;
    do
    {
      v75 = *v71;
      if (*v71)
      {
        v76 = v71;
        do
        {
          v77 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v75 + 4, (void **)&begin->__r_.__value_.__l.__data_);
          if (v77 >= 0)
            v78 = v75;
          else
            v78 = v75 + 1;
          if (v77 >= 0)
            v76 = (void **)v75;
          v75 = (_QWORD *)*v78;
        }
        while (*v78);
        if (v76 != v71
          && (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(begin, v76 + 4) & 0x80) == 0)
        {
          v79 = v76[7];
          v80 = v76[8];
          while (v79 != v80)
          {
            if ((v74 & ~*v79) == 0 && (v79[1] & ~a7) == 0 && (a6 == 3 || (v79[2] & a6) == a6))
            {
              v81 = (__int128 *)(v79 + 4);
              v82 = a8[1];
              if (v82 >= a8[2])
              {
                v83 = std::vector<std::string>::__push_back_slow_path<std::string const&>(a8, v81);
              }
              else
              {
                std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)a8, v81);
                v83 = v82 + 24;
              }
              a8[1] = v83;
            }
            v79 += 10;
          }
        }
      }
      ++begin;
    }
    while (begin != v69);
  }
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v92;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
}

void sub_1BEFCEBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, int a6, __int16 a7, char a8, char a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char *__pa, uint64_t a19, std::__split_buffer<std::string> *a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  std::__split_buffer<std::string>::~__split_buffer((std::__split_buffer<std::string> *)&a25);
  if (SHIBYTE(a20) < 0)
    operator delete(__pa);
  __pa = &a21;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__pa);
  _Unwind_Resume(a1);
}

void SipHeaderTemplateMap::matchingHeaderTemplate(uint64_t a1@<X0>, const void **a2@<X1>, int a3@<W2>, int a4@<W3>, int a5@<W4>, int a6@<W5>, int a7@<W6>, _QWORD *a8@<X8>)
{
  void *__p[2];
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v11 = 0;
  v12 = 0;
  v13 = 0;
  SipHeaderTemplateMap::matchingHeaderTemplates(a1, a2, a3, a4, a5, a6, a7, &v11);
  std::string::basic_string[abi:ne180100]<0>(__p, ";");
  ims::join<std::__wrap_iter<std::string const*>>(v11, v12, (uint64_t)__p, a8);
  if (v10 < 0)
    operator delete(__p[0]);
  __p[0] = &v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
}

void sub_1BEFCED04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  __p = &a15;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

void SipSubscriptionStateHeader::~SipSubscriptionStateHeader(void **this)
{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C5CF8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringParameterHeader *SipSubscriptionStateHeader::clone(SipSubscriptionStateHeader *this)
{
  SipStringParameterHeader *v2;

  v2 = (SipStringParameterHeader *)operator new();
  SipStringParameterHeader::SipStringParameterHeader(v2, this);
  *(_QWORD *)v2 = off_1E78CE868;
  return v2;
}

void sub_1BEFCEE60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4070BFB248);
  _Unwind_Resume(a1);
}

void IMSSecurityPolicyManager::~IMSSecurityPolicyManager(IMSSecurityPolicyManager *this)
{
  void *v2;

  IMSSecurityPolicyManager::deinitialize(this);
  std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2)
  {
    *((_QWORD *)this + 4) = v2;
    operator delete(v2);
  }
  std::__list_imp<unsigned long long>::clear(this);
}

void IMSSecurityPolicyManager::deinitialize(IMSSecurityPolicyManager *this)
{
  _QWORD *v2;

  if (*((_QWORD *)this + 9))
  {
    *((_QWORD *)this + 4) = *((_QWORD *)this + 3);
    v2 = (_QWORD *)((char *)this + 56);
    std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy((uint64_t)this + 48, *((_QWORD **)this + 7));
    *((_QWORD *)this + 6) = v2;
    *((_QWORD *)this + 8) = 0;
    *v2 = 0;
    std::__list_imp<unsigned long long>::clear(this);
    PolicyDeleteAll(*((_QWORD *)this + 9));
    PolicyApply(*((_QWORD *)this + 9));
    CFRelease(*((CFTypeRef *)this + 9));
    *((_QWORD *)this + 9) = 0;
  }
}

void IMSSecurityPolicyManager::initialize(IMSSecurityPolicyManager *this)
{
  unint64_t v2;
  unint64_t v3;
  IMSSecurityPolicyManager *v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t i;
  uint64_t v10;
  IMSSecurityPolicyManager *v11;
  IMSSecurityPolicyManager *v12;
  _QWORD *v13;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;

  *((_QWORD *)this + 9) = PolicyCreateSession(0, CFSTR("com.apple.ipTelephony.security"), _callback, this);
  v2 = *((_QWORD *)this + 2);
  if (v2 < 0x41)
  {
    if (v2 != 64)
    {
      v5 = operator new(0x18uLL);
      v6 = v5;
      *v5 = 0;
      v5[1] = 0;
      *((_DWORD *)v5 + 4) = 0;
      v7 = v2 - 63;
      if (v2 == 63)
      {
        v8 = 1;
      }
      else
      {
        v8 = 64 - v2;
        v13 = v5;
        do
        {
          v5 = operator new(0x18uLL);
          *v5 = v13;
          v5[1] = 0;
          v13[1] = v5;
          v13 = v5;
          *((_DWORD *)v5 + 4) = 0;
        }
        while (!__CFADD__(v7++, 1));
      }
      v5[1] = this;
      v15 = *(_QWORD *)this;
      *v6 = *(_QWORD *)this;
      *(_QWORD *)(v15 + 8) = v6;
      *(_QWORD *)this = v5;
      *((_QWORD *)this + 2) = v8 + v2;
    }
  }
  else
  {
    if (v2 >= 0x80)
    {
      v4 = (IMSSecurityPolicyManager *)*((_QWORD *)this + 1);
      for (i = 65; i > 1; --i)
        v4 = (IMSSecurityPolicyManager *)*((_QWORD *)v4 + 1);
    }
    else
    {
      v3 = v2 - 64;
      v4 = this;
      do
      {
        v4 = *(IMSSecurityPolicyManager **)v4;
        --v3;
      }
      while (v3);
    }
    if (v4 != this)
    {
      v10 = *(_QWORD *)this;
      v11 = *(IMSSecurityPolicyManager **)v4;
      *((_QWORD *)v11 + 1) = *(_QWORD *)(*(_QWORD *)this + 8);
      **(_QWORD **)(v10 + 8) = v11;
      do
      {
        v12 = (IMSSecurityPolicyManager *)*((_QWORD *)v4 + 1);
        --*((_QWORD *)this + 2);
        operator delete(v4);
        v4 = v12;
      }
      while (v12 != this);
    }
  }
  v16 = *((_QWORD *)this + 1);
  if ((IMSSecurityPolicyManager *)v16 != this)
  {
    v17 = 1000;
    do
    {
      *(_DWORD *)(v16 + 16) = v17;
      v16 = *(_QWORD *)(v16 + 8);
      v17 += 100;
    }
    while ((IMSSecurityPolicyManager *)v16 != this);
  }
  v18 = *((_QWORD *)this + 9);
  if (!v18)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "policy");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Unable to create secure policy session", 38);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
    v18 = *((_QWORD *)this + 9);
  }
  if (!PolicySetSessionPriority(v18, CFSTR("High")))
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "policy");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v20 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Unable to set session priority", 30);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
    IMSSecurityPolicyManager::deinitialize(this);
  }
}

void sub_1BEFCF238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSSecurityPolicyManager::addDropPolicy(uint64_t a1@<X0>, char *a2@<X1>, IpAddress ***a3@<X2>, unsigned int *a4@<X3>, _QWORD *a5@<X8>)
{
  uid_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  int v15;
  unint64_t v16;
  char *v17;
  _DWORD *v18;
  const ImsResult *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  char v29;
  IpAddress **v30;
  uint64_t v31;
  unsigned int v32;
  uid_t v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  _BYTE *v38;
  int v39;
  int v40;
  unint64_t v41;
  char *v42;
  _DWORD *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  char *v51;
  int v52;
  void **v53;
  IpAddress **v55;
  void *v56;
  void *v58;
  void *v59;
  int v60;
  char v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  const void *v65[2];
  void (**v66)(ims::CFMutableDictionary *__hidden);
  uint64_t v67;
  void (**v68)(ims::CFMutableArray *__hidden);
  uint64_t v69;
  void *__p;
  void *value;
  int v72;
  char v73;
  __int128 v74;
  __int128 v75;
  __int128 v76;
  void *v77[2];
  char v78;
  const void *v79[2];
  void (**v80)(ims::CFMutableDictionary *__hidden);
  uint64_t v81;
  void (**v82)(ims::CFMutableArray *__hidden);
  uint64_t v83;

  a5[2] = 0;
  a5[3] = 0;
  v68 = &off_1E78B7BD8;
  v69 = 0;
  v66 = &off_1E78B8138;
  v67 = 0;
  v65[0] = &off_1E78B8138;
  v65[1] = 0;
  a5[7] = 0;
  a5[8] = 0;
  a5[5] = 0;
  a5[6] = 0;
  *a5 = &off_1E78B7238;
  a5[1] = &_bambiDomain;
  a5[4] = 0;
  v82 = &off_1E78B7BD8;
  v83 = 0;
  v80 = &off_1E78B8138;
  v81 = 0;
  v79[0] = &off_1E78B8138;
  v79[1] = 0;
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v79, CFSTR("ConditionType"), CFSTR("BoundInterface"));
  ims::CFString::CFString(&__p, a2, 0x8000100u);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v79, CFSTR("InterfaceName"), value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v82, v79);
  (*((void (**)(const void **, _QWORD, _QWORD))v79[0] + 6))(v79, 0, 0);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v79, CFSTR("ConditionType"), CFSTR("UID"));
  v8 = getuid();
  ims::CFNumber::CFNumber((ims::CFNumber *)&__p, v8);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v79, CFSTR("UID"), value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  v56 = (void *)*MEMORY[0x1E0C9AE50];
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v79, CFSTR("IsNegative"), (const void *)*MEMORY[0x1E0C9AE50]);
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v82, v79);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v80, CFSTR("Result"), CFSTR("Drop"));
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v77, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"adding DROP ALL policy at ", 26);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v78 < 0)
    operator delete(v77[0]);
  if (v73 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v77, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"conditions: ", 12);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableArray *__hidden), uint64_t))v82[2])(&v82, v10);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v11[17] = 0;
  if (v78 < 0)
    operator delete(v77[0]);
  if (v73 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v77, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v77);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"results: ", 9);
  *(_BYTE *)(v12 + 17) = 0;
  v13 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v80[2])(&v80, v12);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v13[17] = 0;
  if (v78 < 0)
    operator delete(v77[0]);
  if (v73 < 0)
    operator delete(__p);
  v14 = PolicyAdd(*(_QWORD *)(a1 + 72), *a4, v83, v81, 0);
  v15 = v14;
  if (v14)
  {
    v16 = *((_QWORD *)a4 + 3);
    v17 = (char *)*((_QWORD *)a4 + 2);
    if ((unint64_t)v17 >= v16)
    {
      v20 = (char *)*((_QWORD *)a4 + 1);
      v21 = (v17 - v20) >> 2;
      if ((unint64_t)(v21 + 1) >> 62)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v22 = v16 - (_QWORD)v20;
      v23 = (uint64_t)(v16 - (_QWORD)v20) >> 1;
      if (v23 <= v21 + 1)
        v23 = v21 + 1;
      if (v22 >= 0x7FFFFFFFFFFFFFFCLL)
        v24 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      if (v24)
      {
        v25 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a4 + 6), v24);
        v20 = (char *)*((_QWORD *)a4 + 1);
        v17 = (char *)*((_QWORD *)a4 + 2);
      }
      else
      {
        v25 = 0;
      }
      v26 = &v25[4 * v21];
      v27 = &v25[4 * v24];
      *(_DWORD *)v26 = v15;
      v18 = v26 + 4;
      while (v17 != v20)
      {
        v28 = *((_DWORD *)v17 - 1);
        v17 -= 4;
        *((_DWORD *)v26 - 1) = v28;
        v26 -= 4;
      }
      *((_QWORD *)a4 + 1) = v26;
      *((_QWORD *)a4 + 2) = v18;
      *((_QWORD *)a4 + 3) = v27;
      if (v20)
        operator delete(v20);
    }
    else
    {
      *(_DWORD *)v17 = v14;
      v18 = v17 + 4;
    }
    *((_QWORD *)a4 + 2) = v18;
    v62 = 0u;
    v63 = 0u;
    v64 = 0u;
    v58 = &off_1E78B7238;
    v59 = &_bambiDomain;
    v60 = 0;
  }
  else
  {
    v74 = 0u;
    v75 = 0u;
    v76 = 0u;
    __p = &off_1E78B7238;
    value = &_bambiDomain;
    v72 = 0x40000000;
    v19 = (const ImsResult *)ImsResult::operator<<<char [26]>((uint64_t)&__p, "Unable to add drop policy");
    ImsResult::ImsResult((ImsResult *)&v58, v19);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  ims::CFType::~CFType((ims::CFType *)v79);
  ims::CFType::~CFType((ims::CFType *)&v80);
  ims::CFType::~CFType((ims::CFType *)&v82);
  ImsResult::operator=((uint64_t)a5, (uint64_t)&v58);
  v29 = (*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a5[1] + 24))(a5[1], *((unsigned int *)a5 + 4));
  ImsResult::~ImsResult((ImsResult *)&v58);
  if ((v29 & 1) == 0)
  {
    v30 = *a3;
    v55 = a3[1];
    if (*a3 != v55)
    {
      LODWORD(v31) = *a4;
      v53 = (void **)(a4 + 2);
      do
      {
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v65, CFSTR("ConditionType"), CFSTR("LocalAddressSubnet"));
        IpAddress::asString(*v30, 0, &__p);
        ims::CFString::CFString(&v58, (char *)&__p, 0x8000100u);
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v65, CFSTR("Address"), v59);
        ims::CFType::~CFType((ims::CFType *)&v58);
        if (v73 < 0)
          operator delete(__p);
        v32 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*v30 + 192))(*v30);
        ims::CFNumber::CFNumber((ims::CFNumber *)&__p, v32);
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v65, CFSTR("SubnetPrefix"), value);
        ims::CFType::~CFType((ims::CFType *)&__p);
        ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v68, v65);
        (*((void (**)(const void **, _QWORD, _QWORD))v65[0] + 6))(v65, 0, 0);
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v65, CFSTR("ConditionType"), CFSTR("UID"));
        v33 = getuid();
        ims::CFNumber::CFNumber((ims::CFNumber *)&__p, v33);
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v65, CFSTR("UID"), value);
        ims::CFType::~CFType((ims::CFType *)&__p);
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v65, CFSTR("IsNegative"), v56);
        ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v68, v65);
        ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v66, CFSTR("Result"), CFSTR("Drop"));
        std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
        std::string::basic_string[abi:ne180100]<0>(&v58, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v34 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"adding DROP ALL policy at ", 26);
        v31 = (v31 + 10);
        *(_BYTE *)(v34 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v34 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v34 + 17) = 0;
        if (v61 < 0)
          operator delete(v58);
        if (v73 < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
        std::string::basic_string[abi:ne180100]<0>(&v58, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v35 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"conditions: ", 12);
        *(_BYTE *)(v35 + 17) = 0;
        v36 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableArray *__hidden), uint64_t))v68[2])(&v68, v35);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v36[17] = 0;
        if (v61 < 0)
          operator delete(v58);
        if (v73 < 0)
          operator delete(__p);
        std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
        std::string::basic_string[abi:ne180100]<0>(&v58, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v37 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v58);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"results: ", 9);
        *(_BYTE *)(v37 + 17) = 0;
        v38 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v66[2])(&v66, v37);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v38[17] = 0;
        if (v61 < 0)
          operator delete(v58);
        if (v73 < 0)
          operator delete(__p);
        v39 = PolicyAdd(*(_QWORD *)(a1 + 72), v31, v69, v67, 0);
        v40 = v39;
        if (v39)
        {
          v42 = (char *)*((_QWORD *)a4 + 2);
          v41 = *((_QWORD *)a4 + 3);
          if ((unint64_t)v42 >= v41)
          {
            v45 = (char *)*v53;
            v46 = (v42 - (_BYTE *)*v53) >> 2;
            v47 = v46 + 1;
            if ((unint64_t)(v46 + 1) >> 62)
              std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
            v48 = v41 - (_QWORD)v45;
            if (v48 >> 1 > v47)
              v47 = v48 >> 1;
            if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL)
              v49 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v49 = v47;
            if (v49)
            {
              v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a4 + 6), v49);
              v45 = (char *)*((_QWORD *)a4 + 1);
              v42 = (char *)*((_QWORD *)a4 + 2);
            }
            else
            {
              v50 = 0;
            }
            v51 = &v50[4 * v46];
            *(_DWORD *)v51 = v40;
            v43 = v51 + 4;
            while (v42 != v45)
            {
              v52 = *((_DWORD *)v42 - 1);
              v42 -= 4;
              *((_DWORD *)v51 - 1) = v52;
              v51 -= 4;
            }
            *((_QWORD *)a4 + 1) = v51;
            *((_QWORD *)a4 + 2) = v43;
            *((_QWORD *)a4 + 3) = &v50[4 * v49];
            if (v45)
              operator delete(v45);
          }
          else
          {
            *(_DWORD *)v42 = v39;
            v43 = v42 + 4;
          }
          *((_QWORD *)a4 + 2) = v43;
        }
        else
        {
          v74 = 0u;
          v75 = 0u;
          v76 = 0u;
          __p = &off_1E78B7238;
          value = &_bambiDomain;
          v72 = 0x40000000;
          v44 = ImsResult::operator<<<char [26]>((uint64_t)&__p, "Unable to add drop policy");
          ImsResult::operator=((uint64_t)a5, v44);
          ImsResult::~ImsResult((ImsResult *)&__p);
        }
        (*((void (**)(const void **, _QWORD, _QWORD))v65[0] + 6))(v65, 0, 0);
        ((void (*)(void (***)(ims::CFMutableArray *__hidden), _QWORD, _QWORD))v68[6])(&v68, 0, 0);
        ((void (*)(void (***)(ims::CFMutableDictionary *__hidden), _QWORD, _QWORD))v66[6])(&v66, 0, 0);
        v30 += 2;
      }
      while (v30 != v55);
    }
  }
  ims::CFType::~CFType((ims::CFType *)v65);
  ims::CFType::~CFType((ims::CFType *)&v66);
  ims::CFType::~CFType((ims::CFType *)&v68);
}

void sub_1BEFCFD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ImsResult *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  ImsResult::~ImsResult((ImsResult *)&__p);
  ims::CFType::~CFType((ims::CFType *)(v40 - 136));
  ims::CFType::~CFType((ims::CFType *)(v40 - 120));
  ims::CFType::~CFType((ims::CFType *)(v40 - 104));
  ImsResult::~ImsResult(a13);
  ims::CFType::~CFType((ims::CFType *)&a29);
  ims::CFType::~CFType((ims::CFType *)&a31);
  ims::CFType::~CFType((ims::CFType *)&a33);
  _Unwind_Resume(a1);
}

void IMSSecurityPolicyManager::removePolicyForInterface(_QWORD *a1, std::string *a2)
{
  void ***v4;
  void **v5;
  void **v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  _DWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  void **v14;
  void **v15;
  void **v16;
  BOOL v17;
  uint64_t *v18;
  std::string __p;
  void *v20[2];
  char v21;
  void *v22[2];
  char v23;

  v4 = (void ***)(a1 + 6);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 6), (void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 7 != v5)
  {
    v6 = v5;
    std::string::basic_string[abi:ne180100]<0>(v22, "policy");
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"removing DROP policy for ", 25);
    *(_BYTE *)(v7 + 17) = 0;
    LoggableString::LoggableString(&__p, a2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v7 + 40))(v7, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v21 < 0)
      operator delete(v20[0]);
    if (v23 < 0)
      operator delete(v22[0]);
    v8 = (unsigned int *)v6[8];
    v9 = (unsigned int *)v6[9];
    while (v8 != v9)
    {
      v10 = *v8++;
      PolicyDelete(a1[9], v10);
    }
    v11 = operator new(0x18uLL);
    v11[4] = *((_DWORD *)v6 + 14);
    v12 = (_QWORD *)a1[1];
    *(_QWORD *)v11 = a1;
    *((_QWORD *)v11 + 1) = v12;
    *v12 = v11;
    v13 = a1[2] + 1;
    a1[1] = v11;
    a1[2] = v13;
    v14 = (void **)v6[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      v16 = v6;
      do
      {
        v15 = (void **)v16[2];
        v17 = *v15 == v16;
        v16 = v15;
      }
      while (!v17);
    }
    if (*v4 == v6)
      *v4 = v15;
    v18 = (uint64_t *)a1[7];
    --a1[8];
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v18, (uint64_t *)v6);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>((uint64_t)(v6 + 4));
    operator delete(v6);
  }
}

void sub_1BEFD0068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void IMSSecurityPolicyManager::addSkipPolicy(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  _BYTE *v14;
  int v15;
  int v16;
  unint64_t v17;
  char *v18;
  _DWORD *v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _BYTE *v33;
  int v34;
  int v35;
  unint64_t v36;
  char *v37;
  _DWORD *v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  void **v51;
  void *__p;
  void *value;
  int v55;
  char v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  const void *v60[2];
  void (**v61)(ims::CFMutableDictionary *__hidden);
  uint64_t v62;
  void (**v63)(ims::CFMutableArray *__hidden);
  uint64_t v64;
  void *v65[2];
  char v66;
  const void *v67[2];
  void (**v68)(ims::CFMutableDictionary *__hidden);
  uint64_t v69;
  void (**v70)(ims::CFMutableArray *__hidden);
  uint64_t v71;

  v5 = 0;
  a3[2] = 0;
  a3[3] = 0;
  a3[7] = 0;
  a3[8] = 0;
  a3[5] = 0;
  a3[6] = 0;
  v51 = (void **)(a1 + 3);
  v50 = (uint64_t)(a1 + 5);
  *a3 = &off_1E78B7238;
  a3[1] = &_bambiDomain;
  v6 = 1;
  a3[4] = 0;
  v63 = &off_1E78B7BD8;
  v64 = 0;
  v61 = &off_1E78B8138;
  v62 = 0;
  v7 = 100;
  v60[0] = &off_1E78B8138;
  v60[1] = 0;
  do
  {
    v8 = v6;
    v9 = *(unsigned __int8 *)(a2 + 23);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    if (v9)
    {
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("ConditionType"), CFSTR("BoundInterface"));
      ims::CFString::CFString(&__p, (char *)a2, 0x8000100u);
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("InterfaceName"), value);
      ims::CFType::~CFType((ims::CFType *)&__p);
    }
    else
    {
      ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("ConditionType"), CFSTR("AllInterfaces"));
    }
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v63, v60);
    (*((void (**)(const void **, _QWORD, _QWORD))v60[0] + 6))(v60, 0, 0);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("ConditionType"), CFSTR("Application"));
    std::string::basic_string[abi:ne180100]<0>(&__p, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
    ims::CFUUID::CFUUID(v65, (char *)&__p);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("ApplicationUUID"), v65[1]);
    ims::CFType::~CFType((ims::CFType *)v65);
    if (v56 < 0)
      operator delete(__p);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v63, v60);
    (*((void (**)(const void **, _QWORD, _QWORD))v60[0] + 6))(v60, 0, 0);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("ConditionType"), CFSTR("RealApplication"));
    ims::CFUUID::CFUUID(&__p, (char *)&kUUIDWhitelist[3 * v5]);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v60, CFSTR("RealApplicationUUID"), value);
    ims::CFType::~CFType((ims::CFType *)&__p);
    ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v63, v60);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v61, CFSTR("Result"), CFSTR("Skip"));
    ims::CFNumber::CFNumber((ims::CFNumber *)&__p, 7400);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v61, CFSTR("SkipOrder"), value);
    ims::CFType::~CFType((ims::CFType *)&__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"adding SKIP policy at ", 22);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v66 < 0)
      operator delete(v65[0]);
    if (v56 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"conditions: ", 12);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableArray *__hidden), uint64_t))v63[2])(&v63, v11);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v12[17] = 0;
    if (v66 < 0)
      operator delete(v65[0]);
    if (v56 < 0)
      operator delete(__p);
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"results: ", 9);
    *(_BYTE *)(v13 + 17) = 0;
    v14 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v61[2])(&v61, v13);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v14[17] = 0;
    if (v66 < 0)
      operator delete(v65[0]);
    if (v56 < 0)
      operator delete(__p);
    v15 = PolicyAdd(a1[9], v7, v64, v62, 0);
    v16 = v15;
    if (v15)
    {
      v18 = (char *)a1[4];
      v17 = a1[5];
      if ((unint64_t)v18 >= v17)
      {
        v21 = (char *)*v51;
        v22 = (v18 - (_BYTE *)*v51) >> 2;
        v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 62)
          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
        v24 = v17 - (_QWORD)v21;
        if (v24 >> 1 > v23)
          v23 = v24 >> 1;
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL)
          v25 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v25 = v23;
        if (v25)
        {
          v26 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(v50, v25);
          v21 = (char *)a1[3];
          v18 = (char *)a1[4];
        }
        else
        {
          v26 = 0;
        }
        v27 = &v26[4 * v22];
        *(_DWORD *)v27 = v16;
        v19 = v27 + 4;
        while (v18 != v21)
        {
          v28 = *((_DWORD *)v18 - 1);
          v18 -= 4;
          *((_DWORD *)v27 - 1) = v28;
          v27 -= 4;
        }
        a1[3] = v27;
        a1[4] = v19;
        a1[5] = &v26[4 * v25];
        if (v21)
          operator delete(v21);
      }
      else
      {
        *(_DWORD *)v18 = v15;
        v19 = v18 + 4;
      }
      a1[4] = v19;
    }
    else
    {
      v57 = 0u;
      v58 = 0u;
      v59 = 0u;
      __p = &off_1E78B7238;
      value = &_bambiDomain;
      v55 = 0x40000000;
      v20 = ImsResult::operator<<<char [26]>((uint64_t)&__p, "unable to add SKIP policy");
      ImsResult::operator=((uint64_t)a3, v20);
      ImsResult::~ImsResult((ImsResult *)&__p);
    }
    (*((void (**)(const void **, _QWORD, _QWORD))v60[0] + 6))(v60, 0, 0);
    ((void (*)(void (***)(ims::CFMutableDictionary *__hidden), _QWORD, _QWORD))v61[6])(&v61, 0, 0);
    ((void (*)(void (***)(ims::CFMutableArray *__hidden), _QWORD, _QWORD))v63[6])(&v63, 0, 0);
    v6 = 0;
    v7 = (v7 + 10);
    v5 = 1;
  }
  while ((v8 & 1) != 0);
  v70 = &off_1E78B7BD8;
  v71 = 0;
  v68 = &off_1E78B8138;
  v69 = 0;
  v67[0] = &off_1E78B8138;
  v67[1] = 0;
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v67, CFSTR("ConditionType"), CFSTR("RemoteAddressSubnet"));
  ims::CFNumber::CFNumber((ims::CFNumber *)&__p, 53);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v67, CFSTR("Port"), value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v70, v67);
  (*((void (**)(const void **, _QWORD, _QWORD))v67[0] + 6))(v67, 0, 0);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v67, CFSTR("ConditionType"), CFSTR("AllInterfaces"));
  ims::CFMutableArray::appendValue((ims::CFMutableArray *)&v70, v67);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v68, CFSTR("Result"), CFSTR("Skip"));
  ims::CFNumber::CFNumber((ims::CFNumber *)&__p, 7400);
  ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v68, CFSTR("SkipOrder"), value);
  ims::CFType::~CFType((ims::CFType *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v29 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"adding SKIP policy at ", 22);
  *(_BYTE *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  if (v66 < 0)
    operator delete(v65[0]);
  if (v56 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v30 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"conditions: ", 12);
  *(_BYTE *)(v30 + 17) = 0;
  v31 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableArray *__hidden), uint64_t))v70[2])(&v70, v30);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v31[17] = 0;
  if (v66 < 0)
    operator delete(v65[0]);
  if (v56 < 0)
    operator delete(__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
  std::string::basic_string[abi:ne180100]<0>(v65, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v32 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"results: ", 9);
  *(_BYTE *)(v32 + 17) = 0;
  v33 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v68[2])(&v68, v32);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v33[17] = 0;
  if (v66 < 0)
    operator delete(v65[0]);
  if (v56 < 0)
    operator delete(__p);
  v34 = PolicyAdd(a1[9], 120, v71, v69, 0);
  v35 = v34;
  if (v34)
  {
    v37 = (char *)a1[4];
    v36 = a1[5];
    if ((unint64_t)v37 >= v36)
    {
      v40 = (char *)*v51;
      v41 = (v37 - (_BYTE *)*v51) >> 2;
      v42 = v41 + 1;
      if ((unint64_t)(v41 + 1) >> 62)
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      v43 = v36 - (_QWORD)v40;
      if (v43 >> 1 > v42)
        v42 = v43 >> 1;
      if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFFCLL)
        v44 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v44 = v42;
      if (v44)
      {
        v45 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>(v50, v44);
        v40 = (char *)a1[3];
        v37 = (char *)a1[4];
      }
      else
      {
        v45 = 0;
      }
      v46 = &v45[4 * v41];
      v47 = &v45[4 * v44];
      *(_DWORD *)v46 = v35;
      v38 = v46 + 4;
      while (v37 != v40)
      {
        v48 = *((_DWORD *)v37 - 1);
        v37 -= 4;
        *((_DWORD *)v46 - 1) = v48;
        v46 -= 4;
      }
      a1[3] = v46;
      a1[4] = v38;
      a1[5] = v47;
      if (v40)
        operator delete(v40);
    }
    else
    {
      *(_DWORD *)v37 = v34;
      v38 = v37 + 4;
    }
    a1[4] = v38;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "policy");
    std::string::basic_string[abi:ne180100]<0>(v65, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v39 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v65);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"unable to add policy for DNS resolution", 39);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (v66 < 0)
      operator delete(v65[0]);
    if (v56 < 0)
      operator delete(__p);
  }
  ims::CFType::~CFType((ims::CFType *)v67);
  ims::CFType::~CFType((ims::CFType *)&v68);
  ims::CFType::~CFType((ims::CFType *)&v70);
  if (!v35)
  {
    v57 = 0u;
    v58 = 0u;
    v59 = 0u;
    __p = &off_1E78B7238;
    value = &_bambiDomain;
    v55 = 0x40000000;
    v49 = ImsResult::operator<<<char [65]>((uint64_t)&__p, "Unable to add SKIP rule for DNS - Proxy resolution will not work");
    ImsResult::operator=((uint64_t)a3, v49);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  ims::CFType::~CFType((ims::CFType *)v60);
  ims::CFType::~CFType((ims::CFType *)&v61);
  ims::CFType::~CFType((ims::CFType *)&v63);
}

void sub_1BEFD0BB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ImsResult *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  uint64_t v37;

  if (a19 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)(v37 - 136));
  ims::CFType::~CFType((ims::CFType *)(v37 - 120));
  ims::CFType::~CFType((ims::CFType *)(v37 - 104));
  ims::CFType::~CFType((ims::CFType *)&a26);
  ims::CFType::~CFType((ims::CFType *)&a28);
  ims::CFType::~CFType((ims::CFType *)&a30);
  ImsResult::~ImsResult(a13);
  _Unwind_Resume(a1);
}

char *IMSSecurityPolicyManager::createDropPolicy(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t **v5;
  void **v6;
  uint64_t *v7;
  void **v8;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  BOOL v23;
  _BYTE *v24;
  std::string v25;
  void *__p[2];
  char v27;
  void *v28[2];
  char v29;

  if (a1[9])
  {
    v3 = *(unsigned __int8 *)(a2 + 23);
    if ((v3 & 0x80u) != 0)
      v3 = *(_QWORD *)(a2 + 8);
    if (v3)
    {
      v5 = (uint64_t **)(a1 + 6);
      v6 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 6), (void **)a2);
      v7 = a1 + 7;
      if (a1 + 7 != v6)
      {
        v8 = v6;
        v9 = (unsigned int *)v6[8];
        v10 = (unsigned int *)v6[9];
        if (v9 != v10)
        {
          do
          {
            v11 = *v9++;
            PolicyDelete(a1[9], v11);
          }
          while (v9 != v10);
          v9 = (unsigned int *)v8[8];
        }
        v8[9] = v9;
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"updating policy for ", 20);
        *(_BYTE *)(v12 + 17) = 0;
        LoggableString::LoggableString(&v25, (const std::string *)a2);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &v25);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_19;
      }
      if (a1[2])
      {
        v15 = *(_DWORD *)(a1[1] + 16);
        v28[0] = (void *)a2;
        *((_DWORD *)std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a2, (__int128 **)v28)+ 14) = v15;
        v16 = (uint64_t *)a1[1];
        v17 = *v16;
        *(_QWORD *)(v17 + 8) = v16[1];
        *(_QWORD *)v16[1] = v17;
        --a1[2];
        operator delete(v16);
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"adding new policy for ", 22);
        *(_BYTE *)(v12 + 17) = 0;
        LoggableString::LoggableString(&v25, (const std::string *)a2);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v12 + 40))(v12, &v25);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_19:
        *(_BYTE *)(v12 + 17) = 0;
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (v27 < 0)
          operator delete(__p[0]);
        if (v29 < 0)
          operator delete(v28[0]);
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v18 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"policy interfaces: ", 19);
        *(_BYTE *)(v18 + 17) = 0;
        if (v27 < 0)
          operator delete(__p[0]);
        if (v29 < 0)
          operator delete(v28[0]);
        v19 = *v5;
        if (*v5 != v7)
        {
          do
          {
            std::string::basic_string[abi:ne180100]<0>(v28, "policy");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v20 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
            LoggableString::LoggableString(&v25, (const std::string *)(v19 + 4));
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 40))(v20, &v25);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"[", 1);
            *(_BYTE *)(v20 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v20 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"] ", 2);
            *(_BYTE *)(v20 + 17) = 0;
            if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v25.__r_.__value_.__l.__data_);
            if (v27 < 0)
              operator delete(__p[0]);
            if (v29 < 0)
              operator delete(v28[0]);
            v21 = (uint64_t *)v19[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (uint64_t *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (uint64_t *)v19[2];
                v23 = *v22 == (_QWORD)v19;
                v19 = v22;
              }
              while (!v23);
            }
            v19 = v22;
          }
          while (v22 != v7);
        }
        std::string::basic_string[abi:ne180100]<0>(v28, "policy");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v24 = (_BYTE *)ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v24[17] = 0;
        if (v27 < 0)
          operator delete(__p[0]);
        if (v29 < 0)
          operator delete(v28[0]);
        v28[0] = (void *)a2;
        return std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v5, (void **)a2, (__int128 **)v28)+ 56;
      }
      std::string::basic_string[abi:ne180100]<0>(v28, "policy");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"All drop policy slots filled", 28);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v28, "policy");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"No network interface name", 25);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v28, "policy");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::debug(ims::_logger, (uint64_t)v28, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Unable to add policy: session does not exist", 44);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v13 + 17) = 0;
  if (v27 < 0)
    operator delete(__p[0]);
  if (v29 < 0)
    operator delete(v28[0]);
  return 0;
}

void sub_1BEFD1388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSSecurityPolicyManager::addPolicyForInterface(IMSSecurityPolicyManager *this@<X0>, NetworkInterface *a2@<X1>, uint64_t a3@<X8>)
{
  char *v6;
  char *DropPolicy;
  unsigned int *v8;
  const ImsResult *v9;
  uint64_t v10;
  const ImsResult *v11;
  IpAddress **v12[3];
  _OWORD v13[5];

  if (!a2)
  {
    memset((char *)&v13[1] + 8, 0, 48);
    *(_QWORD *)&v13[0] = &off_1E78B7238;
    *((_QWORD *)&v13[0] + 1) = &_bambiDomain;
    LODWORD(v13[1]) = 1073741825;
    v9 = (const ImsResult *)ImsResult::operator<<<char [27]>((uint64_t)v13, "no network interface given");
    ImsResult::ImsResult((ImsResult *)a3, v9);
LABEL_7:
    ImsResult::~ImsResult((ImsResult *)v13);
    return;
  }
  v6 = (char *)a2 + 32;
  DropPolicy = IMSSecurityPolicyManager::createDropPolicy(this, (uint64_t)a2 + 32);
  if (!DropPolicy)
  {
    memset((char *)&v13[1] + 8, 0, 48);
    *(_QWORD *)&v13[0] = &off_1E78B7238;
    *((_QWORD *)&v13[0] + 1) = &_bambiDomain;
    LODWORD(v13[1]) = 0x40000000;
    v10 = ImsResult::operator<<<char [34]>((uint64_t)v13, "Unable to create drop policy for ");
    v11 = (const ImsResult *)ImsResult::operator<<<std::string>(v10, (uint64_t)v6);
    ImsResult::ImsResult((ImsResult *)a3, v11);
    goto LABEL_7;
  }
  v8 = (unsigned int *)DropPolicy;
  memset(v12, 0, sizeof(v12));
  NetworkInterface::allAddresses((unint64_t *)a2, (unint64_t *)v12, 3, 9);
  memset(v13, 0, 72);
  IMSSecurityPolicyManager::addDropPolicy((uint64_t)this, v6, v12, v8, v13);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v13[0] + 1) + 24))(*((_QWORD *)&v13[0] + 1), LODWORD(v13[1])))
  {
    ImsResult::ImsResult(a3, (uint64_t)v13);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
  }
  ImsResult::~ImsResult((ImsResult *)v13);
  *(_QWORD *)&v13[0] = v12;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v13);
}

void sub_1BEFD15CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void IMSSecurityPolicyManager::addPolicyForInterface(_QWORD *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int *DropPolicy;
  uint64_t v7;
  const ImsResult *v8;
  _BYTE v9[72];
  IpAddress **v10[3];

  DropPolicy = (unsigned int *)IMSSecurityPolicyManager::createDropPolicy(a1, (uint64_t)a2);
  if (DropPolicy)
  {
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    IMSSecurityPolicyManager::addDropPolicy((uint64_t)a1, a2, v10, DropPolicy, v9);
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)&v9[8] + 24))(*(_QWORD *)&v9[8], *(unsigned int *)&v9[16]))
    {
      ImsResult::ImsResult(a3, (uint64_t)v9);
    }
    else
    {
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    ImsResult::~ImsResult((ImsResult *)v9);
    *(_QWORD *)v9 = v10;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v9);
  }
  else
  {
    memset(&v9[24], 0, 48);
    *(_QWORD *)v9 = &off_1E78B7238;
    *(_QWORD *)&v9[8] = &_bambiDomain;
    *(_DWORD *)&v9[16] = 0x40000000;
    v7 = ImsResult::operator<<<char [34]>((uint64_t)v9, "Unable to create drop policy for ");
    v8 = (const ImsResult *)ImsResult::operator<<<std::string>(v7, (uint64_t)a2);
    ImsResult::ImsResult((ImsResult *)a3, v8);
    ImsResult::~ImsResult((ImsResult *)v9);
  }
}

void sub_1BEFD1740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;

  a9 = (void **)(v9 - 56);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

char *std::__tree<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  char *v5;
  uint64_t **v6;
  char **v7;
  char **v8;
  _QWORD *v10;
  char *v11;
  __int128 *v12;
  char *v13;
  std::string *v14;
  __int128 v15;
  uint64_t *v16;
  _QWORD v18[2];
  uint64_t v19;

  v6 = a1 + 1;
  v5 = (char *)a1[1];
  v7 = (char **)(a1 + 1);
  v8 = (char **)(a1 + 1);
  if (!v5)
    goto LABEL_10;
  v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      v8 = (char **)v5;
      v10 = v5 + 32;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v7 = v8;
      if (!*v8)
        goto LABEL_10;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v10, a2) & 0x80) == 0)
      break;
    v7 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_10;
  }
  v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    v12 = *a3;
    v19 = 0;
    v13 = (char *)operator new(0x58uLL);
    v18[0] = v13;
    v18[1] = v6;
    v14 = (std::string *)(v13 + 32);
    if (*((char *)v12 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v14, *(const std::string::value_type **)v12, *((_QWORD *)v12 + 1));
    }
    else
    {
      v15 = *v12;
      *((_QWORD *)v13 + 6) = *((_QWORD *)v12 + 2);
      *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
    }
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    LOBYTE(v19) = 1;
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v8;
    *v7 = v13;
    v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      v13 = *v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], (uint64_t *)v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    v11 = (char *)v18[0];
    v18[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>>>>::reset[abi:ne180100]((uint64_t)v18);
  }
  return v11;
}

void sub_1BEFD1958(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,IMSSecurityPolicyManager::DropPolicy>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSSecurityPolicyManager::DropPolicy>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void __cxx_global_array_dtor_1()
{
  uint64_t i;

  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(kUUIDWhitelist[i + 5]) < 0)
      operator delete((void *)kUUIDWhitelist[i + 3]);
  }
}

uint64_t _GLOBAL__sub_I_IMSSecurityPolicyManager_cpp()
{
  _QWORD *v0;

  v0 = std::string::basic_string[abi:ne180100]<0>(kUUIDWhitelist, "719A92AD-BF6B-3069-B2A6-2FC4E2161BAF");
  std::string::basic_string[abi:ne180100]<0>(v0 + 3, "5145A6F0-97F2-3FBC-898F-F447240B1B58");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_1, 0, &dword_1BEDF4000);
}

void sub_1BEFD1A44(_Unwind_Exception *exception_object)
{
  if (byte_1ED70E5BF < 0)
    operator delete((void *)kUUIDWhitelist[0]);
  _Unwind_Resume(exception_object);
}

uint64_t LazuliSession::LazuliSession(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string __p;
  std::string v10;

  std::string::basic_string[abi:ne180100]<0>(&v10, "lazuli.session");
  v4 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v4 + 4136), *(_QWORD *)(v4 + 4144));
  else
    __p = *(std::string *)(v4 + 4136);
  ImsLogContainer::ImsLogContainer(a1, &v10, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)a1 = &off_1E78CE8F0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 136));
  *(_QWORD *)(a1 + 280) = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 288) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_QWORD *)(a1 + 320) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_WORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_QWORD *)(a1 + 376) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 384) = a1 + 392;
  *(_BYTE *)(a1 + 409) = 1;
  *(_QWORD *)(a1 + 312) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 624) = 0;
  *(_OWORD *)(a1 + 592) = 0u;
  *(_OWORD *)(a1 + 608) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_QWORD *)(a1 + 640) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 656) = 0u;
  *(_QWORD *)(a1 + 648) = a1 + 656;
  *(_QWORD *)(a1 + 680) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 688) = a1 + 696;
  *(_BYTE *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 672) = 257;
  *(_WORD *)(a1 + 712) = 257;
  *(_BYTE *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 752) = 0u;
  *(_OWORD *)(a1 + 768) = 0u;
  *(_OWORD *)(a1 + 720) = 0u;
  *(_OWORD *)(a1 + 736) = 0u;
  *(_QWORD *)(a1 + 848) = 90;
  *(_DWORD *)(a1 + 856) = 65537;
  *(_QWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 906) = 0u;
  return a1;
}

void sub_1BEFD1C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LazuliSession::~LazuliSession(void **this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *this = &off_1E78CE8F0;
  if (*((char *)this + 951) < 0)
    operator delete(this[116]);
  if (*((char *)this + 911) < 0)
    operator delete(this[111]);
  if (*((char *)this + 887) < 0)
    operator delete(this[108]);
  if (*((char *)this + 839) < 0)
    operator delete(this[102]);
  if (*((char *)this + 815) < 0)
    operator delete(this[99]);
  if (*((char *)this + 791) < 0)
    operator delete(this[96]);
  if (*((char *)this + 767) < 0)
    operator delete(this[93]);
  if (*((char *)this + 743) < 0)
    operator delete(this[90]);
  SipUri::~SipUri((SipUri *)(this + 39));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 37));
  v2 = (std::__shared_weak_count *)this[36];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipTimerContainer::~SipTimerContainer((SipTimerContainer *)(this + 17));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  v3 = (std::__shared_weak_count *)this[14];
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  LazuliSession::~LazuliSession(this);
  JUMPOUT(0x1C3B87100);
}

void LazuliSession::attachSipSession(std::string *this, uint64_t *a2)
{
  uint64_t v4;
  std::string::size_type size;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::string *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  void *__p;
  std::__shared_weak_count *v39;
  char v40;

  if (*a2)
  {
    if (this[12].__r_.__value_.__l.__size_)
      LazuliSession::detachSipSession((LazuliSession *)this);
    v4 = (*(uint64_t (**)(std::string *))(this->__r_.__value_.__r.__words[0] + 64))(this);
    (*(void (**)(std::string *, uint64_t))(this->__r_.__value_.__r.__words[0] + 16))(this, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"attaching SipSession ", 21);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 320))(&__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 40))(v4, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v40 < 0)
      operator delete(__p);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&this[12].__r_.__value_.__l.__size_, a2);
    size = this[12].__r_.__value_.__l.__size_;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v36, &this[4].__r_.__value_.__l.__size_);
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(size + 1136), &v36);
    *(_BYTE *)(size + 1320) = *(_QWORD *)(size + 1136) != 0;
    v6 = v37;
    if (v37)
    {
      p_shared_owners = (unint64_t *)&v37->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = *(_QWORD **)(*a2 + 240);
    v10 = *(std::__shared_weak_count **)(*a2 + 248);
    __p = v9;
    v39 = v10;
    if (v10)
    {
      v11 = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
    v13 = v9[79];
    v14 = v9 + 28;
    if (v13)
      v15 = v13;
    else
      v15 = (uint64_t)v14;
    SipUri::operator=((SipUri *)&this[13], v15);
    if (v10)
    {
      v16 = (unint64_t *)&v10->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v18 = *(_QWORD *)(*a2 + 240);
    v19 = *(std::__shared_weak_count **)(*a2 + 248);
    __p = (void *)v18;
    v39 = v19;
    if (v19)
    {
      v20 = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(v20);
      while (__stxr(v21 + 1, v20));
    }
    std::string::operator=(this + 30, (const std::string *)(v18 + 640));
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v24 = *(_QWORD *)(*a2 + 240);
    v25 = *(std::__shared_weak_count **)(*a2 + 248);
    __p = (void *)v24;
    v39 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    std::string::operator=(this + 32, (const std::string *)(v24 + 1648));
    if (v25)
    {
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    v30 = *(std::string **)(*a2 + 240);
    v31 = *(std::__shared_weak_count **)(*a2 + 248);
    __p = v30;
    v39 = v31;
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    std::string::operator=(this + 33, v30 + 71);
    if (v31)
    {
      v34 = (unint64_t *)&v31->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
  }
}

void sub_1BEFD20BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void LazuliSession::detachSipSession(LazuliSession *this)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  void *__p[2];
  char v14;

  if (*((_QWORD *)this + 37))
  {
    v2 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"detaching SipSession ", 21);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(void **__return_ptr))(**((_QWORD **)this + 37) + 320))(__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v2 + 40))(v2, __p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v3 = (uint64_t *)((char *)this + 296);
    *(_BYTE *)(v2 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    v4 = *v3;
    v11 = 0;
    v12 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v4 + 1136), &v11);
    *(_BYTE *)(v4 + 1320) = *(_QWORD *)(v4 + 1136) != 0;
    v5 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v3, (__int128 *)__p);
    v8 = (std::__shared_weak_count *)__p[1];
    if (__p[1])
    {
      v9 = (unint64_t *)((char *)__p[1] + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BEFD2258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LazuliSession::initializeMobileTerminated(std::string *this, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  IMSClientManager *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v3 = a2[1];
  v21 = *a2;
  v22 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  LazuliSession::attachSipSession(this, &v21);
  v7 = v22;
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  IMSClientManager::instance(v6);
  IPTelephonyManager::getInstance(&v19);
  v10 = *(_QWORD *)(v19 + 200);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, &this[4].__r_.__value_.__l.__size_);
  IMSCallManager::trackMTLazuliSession(v10, (void **)&this[32].__r_.__value_.__l.__data_, &v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEFD239C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void LazuliSession::initializeMobileOriginated(LazuliSession *this@<X0>, const SipUri *a2@<X1>, std::string *a3@<X2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  ImsPrefs *v13;
  void **OriginUsernameKey;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  const SipUri *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  SipDialogManager *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const ImsResult *v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  void *v64[2];
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  std::string __p;
  uint64_t v69;
  std::__shared_weak_count *v70;
  __int128 v71;
  _OWORD v72[4];
  std::string v73[10];
  __int128 v74;
  __int128 v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  _BYTE __str[32];
  __int128 v83;
  __int128 v84;
  uint64_t v85;

  v69 = 0;
  v70 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (!v6)
  {
    v9 = 0;
    goto LABEL_8;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v70 = v9;
  if (!v9 || (v69 = *((_QWORD *)this + 35)) == 0)
  {
LABEL_8:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0x40000000;
    if (!v9)
      return;
    goto LABEL_88;
  }
  std::string::operator=((std::string *)this + 31, a3);
  std::string::operator=((std::string *)this + 32, a3 + 1);
  std::string::operator=((std::string *)this + 33, a3 + 2);
  std::string::operator=((std::string *)this + 34, a3 + 3);
  v10 = *(_OWORD *)&a3[4].__r_.__value_.__l.__data_;
  *((_DWORD *)this + 214) = a3[4].__r_.__value_.__r.__words[2];
  *(_OWORD *)((char *)this + 840) = v10;
  std::string::operator=((std::string *)this + 36, a3 + 5);
  std::string::operator=((std::string *)this + 37, a3 + 6);
  memset(&__p, 0, sizeof(__p));
  v71 = 0uLL;
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v11)
  {
    v11 = std::__shared_weak_count::lock(v11);
    v12 = v11;
    *((_QWORD *)&v71 + 1) = v11;
    if (v11)
    {
      v11 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
      *(_QWORD *)&v71 = v11;
    }
  }
  else
  {
    v12 = 0;
  }
  v13 = (ImsPrefs *)SipStack::prefs((SipStack *)v11);
  OriginUsernameKey = (void **)ImsPrefs::getOriginUsernameKey(v13);
  ImsPrefs::stringValue(v13, OriginUsernameKey);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v79 = 0;
  v77 = 0u;
  v78 = 0u;
  v75 = 0u;
  v76 = 0u;
  v74 = 0u;
  memset(v73, 0, sizeof(v73));
  memset(v72, 0, sizeof(v72));
  v71 = 0u;
  v17 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 36));
  *(_QWORD *)__str = *((_QWORD *)this + 35);
  *(_QWORD *)&__str[8] = v17;
  v18 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*(_QWORD *)__str + 144));
  SipUri::SipUri((SipUri *)&v71, v18);
  v19 = (unint64_t *)&v17->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::string::basic_string[abi:ne180100]<0>(__str, "");
  std::string::operator=(&v73[5], (const std::string *)__str);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  SipUri::asString((uint64_t)&v71, 2, __str);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = *(std::string *)__str;
  SipUri::~SipUri((SipUri *)&v71);
  std::string::basic_string[abi:ne180100]<0>(__str, " ");
  std::string::basic_string[abi:ne180100]<0>(v64, "");
  ims::substituteVar(&__p, (uint64_t)__str, (uint64_t)v64, &v71);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v71;
  __p.__r_.__value_.__r.__words[2] = *(_QWORD *)&v72[0];
  BYTE7(v72[0]) = 0;
  LOBYTE(v71) = 0;
  if (SBYTE7(v65) < 0)
    operator delete(v64[0]);
  if ((__str[23] & 0x80000000) != 0)
    operator delete(*(void **)__str);
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  *(_OWORD *)v64 = 0u;
  v71 = 0uLL;
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v21)
  {
    v21 = std::__shared_weak_count::lock(v21);
    v22 = v21;
    *((_QWORD *)&v71 + 1) = v21;
    if (v21)
    {
      v21 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
      *(_QWORD *)&v71 = v21;
    }
  }
  else
  {
    v22 = 0;
  }
  SipStack::mediaAddress((SipStack *)v21, (uint64_t)v64);
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v62 = 0;
  v63 = 0;
  SipHost::address((SipHost *)v64, &v62);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__str, (_QWORD *)this + 13);
  std::allocate_shared[abi:ne180100]<SDPSession,std::allocator<SDPSession>,std::shared_ptr<LazuliSession>,std::string &,std::shared_ptr<IpAddress> &,ims::TextMediaSessionMode,std::shared_ptr<SipStack> &,void>(&v71, (__int128 *)__str, (__int128 *)&__p, &v62, &v69);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 120, &v71);
  v25 = (std::__shared_weak_count *)*((_QWORD *)&v71 + 1);
  if (*((_QWORD *)&v71 + 1))
  {
    v26 = (unint64_t *)(*((_QWORD *)&v71 + 1) + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v28 = *(std::__shared_weak_count **)&__str[8];
  if (*(_QWORD *)&__str[8])
  {
    v29 = (unint64_t *)(*(_QWORD *)&__str[8] + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  SDPSession::initializeLazuliOffer(*((SDPSession **)this + 15));
  v60 = 0;
  v61 = 0;
  v31 = *(_QWORD *)(v69 + 144);
  v32 = *(SipDialogManager **)(v31 + 176);
  v33 = *(std::__shared_weak_count **)(v31 + 184);
  *(_QWORD *)&v71 = v32;
  *((_QWORD *)&v71 + 1) = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  SipDialogManager::initializeSession(v32, a2, a3, (uint64_t)&v60);
  if (v33)
  {
    v36 = (unint64_t *)&v33->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  if (v60)
  {
    v58 = v60;
    v59 = v61;
    if (v61)
    {
      v38 = (unint64_t *)&v61->__shared_owners_;
      do
        v39 = __ldxr(v38);
      while (__stxr(v39 + 1, v38));
    }
    LazuliSession::attachSipSession((std::string *)this, &v58);
    v40 = v59;
    if (v59)
    {
      v41 = (unint64_t *)&v59->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    *((_BYTE *)this + 920) = 1;
    v85 = 0;
    v83 = 0u;
    v84 = 0u;
    memset(__str, 0, sizeof(__str));
    if (*((_BYTE *)this + 858))
      v43 = "InitialInviteLazuli";
    else
      v43 = "EmptyInvite";
    SipSession::sendLazuliInvite(*((_QWORD *)this + 37), (unsigned __int8 *)v43, (ImsResult *)__str);
    v44 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)&__str[8] + 24))(*(_QWORD *)&__str[8], *(unsigned int *)&__str[16]);
    v45 = *(_QWORD *)this;
    if ((v44 & 1) != 0)
    {
      v46 = (*(uint64_t (**)(LazuliSession *))(v45 + 56))(this);
      (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"Lazuli invite failure: ", 23);
      *(_BYTE *)(v46 + 17) = 0;
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__str + 16))(__str, v46);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v46 + 17) = 0;
      v80[0] = 0;
      v80[1] = 0;
      v81 = 0;
      v72[2] = 0uLL;
      *((_QWORD *)&v71 + 1) = &off_1E78D08F8;
      memset(v72, 0, 26);
      *(_OWORD *)&v73[0].__r_.__value_.__l.__data_ = 0uLL;
      *(_QWORD *)&v72[3] = &off_1E78B82D8;
      *((_QWORD *)&v72[3] + 1) = v73;
      *(_QWORD *)&v71 = &off_1E78BFCE8;
      memset(&v73[1], 0, 216);
      *((_QWORD *)&v75 + 1) = 0;
      *(_QWORD *)&v76 = 0;
      *((_QWORD *)&v74 + 1) = &off_1E78B82D8;
      *(_QWORD *)&v75 = (char *)&v75 + 8;
      v78 = 0uLL;
      *(_QWORD *)&v77 = &off_1E78B82D8;
      *((_QWORD *)&v77 + 1) = &v78;
      LOWORD(v73[0].__r_.__value_.__r.__words[2]) = 257;
      WORD4(v76) = 257;
      LOWORD(v79) = 257;
      LOBYTE(v74) = 0;
      LazuliSession::handleInviteFailure((uint64_t)this, 0, (uint64_t)v80, (uint64_t)&v71);
      SipUri::~SipUri((SipUri *)&v71);
      if (SHIBYTE(v81) < 0)
        operator delete(v80[0]);
    }
    else
    {
      v49 = (*(uint64_t (**)(LazuliSession *))(v45 + 64))(this);
      (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v49);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"starting Lazuli session", 23);
      *(_BYTE *)(v49 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v49 + 17) = 0;
    }
    ImsResult::~ImsResult((ImsResult *)__str);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  else
  {
    v47 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v47);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v47 + 8), (uint64_t)"unable to create SipSession for call to ", 40);
    *(_BYTE *)(v47 + 17) = 0;
    (*(void (**)(const SipUri *, uint64_t))(*(_QWORD *)a2 + 40))(a2, v47);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v47 + 64))(v47, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v47 + 17) = 0;
    memset((char *)v72 + 8, 0, 48);
    *(_QWORD *)&v71 = &off_1E78B7238;
    *((_QWORD *)&v71 + 1) = &_bambiDomain;
    LODWORD(v72[0]) = 0x40000000;
    v48 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)&v71, "unable to create SipSession");
    ImsResult::ImsResult((ImsResult *)a4, v48);
    ImsResult::~ImsResult((ImsResult *)&v71);
  }
  v50 = v61;
  if (v61)
  {
    v51 = (unint64_t *)&v61->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = v63;
  if (v63)
  {
    v54 = (unint64_t *)&v63->__shared_owners_;
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  SipHost::~SipHost(v64);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v70;
  if (v70)
  {
LABEL_88:
    v56 = (unint64_t *)&v9->__shared_owners_;
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEFD2CBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35)
{
  uint64_t v35;

  SipUri::~SipUri((SipUri *)&a35);
  if (*(char *)(v35 - 145) < 0)
    operator delete(*(void **)(v35 - 168));
  ImsResult::~ImsResult((ImsResult *)(v35 - 144));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  SipHost::~SipHost(&a15);
  if (a31 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  _Unwind_Resume(a1);
}

void LazuliSession::handleInviteFailure(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  uint64_t v11;
  xpc_object_t v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  xpc_object_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  uint64_t v19;
  const char *v20;
  const char *v21;
  const char *p_p;
  const char *v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  xpc_object_t v27;
  xpc_object_t v28;
  const char *v29;
  LazuliDelegate *v30;
  xpc_object_t v31;
  const char *v32;
  LazuliDelegate *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  LazuliDelegate *v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  IMSClientManager *v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  xpc_object_t v54;
  _BYTE v55[72];
  char v56;
  void *__p;
  const char *v58;
  char v59;
  xpc_object_t v60;
  xpc_object_t v61;
  xpc_object_t v62;
  xpc_object_t v63;
  xpc_object_t v64;
  const char *v65;
  xpc_object_t v66;
  xpc_object_t v67;
  xpc_object_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t object;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  xpc_object_t v79;
  xpc_object_t v80;
  xpc_object_t v81;
  xpc_object_t v82;
  xpc_object_t v83;
  xpc_object_t v84;
  xpc_object_t v85;
  xpc_object_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  LazuliDelegate *v92;
  std::__shared_weak_count *v93;
  _OWORD v94[4];
  __int128 v95;
  xpc_object_t v96;

  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Handling invite failure statusCode ", 35);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" statusText ", 12);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" remoteUri ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 40))(a4, v8);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v96 = 0;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  v11 = MEMORY[0x1E0C812F8];
  if (v9)
  {
    v96 = v9;
  }
  else
  {
    v10 = xpc_null_create();
    v96 = v10;
    if (!v10)
    {
      v12 = xpc_null_create();
      v10 = 0;
      goto LABEL_8;
    }
  }
  if (MEMORY[0x1C3B87B98](v10) == v11)
  {
    xpc_retain(v10);
    goto LABEL_9;
  }
  v12 = xpc_null_create();
LABEL_8:
  v96 = v12;
LABEL_9:
  xpc_release(v10);
  v95 = 0u;
  memset(v94, 0, sizeof(v94));
  v92 = 0;
  v93 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 32), &v92);
  if (!v92)
    goto LABEL_104;
  if (*(char *)(a1 + 951) < 0)
  {
    if (*(_QWORD *)(a1 + 936))
    {
LABEL_12:
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Failed to create session for Group-Leave trx ", 45);
      v14 = (const char *)(a1 + 928);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a1 + 928);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" conv ", 6);
      *(_BYTE *)(v13 + 17) = 0;
      v15 = (const char *)(a1 + 768);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 32))(v13, a1 + 768);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      v64 = 0;
      v16 = xpc_dictionary_create(0, 0, 0);
      v17 = v16;
      if (v16)
      {
        v64 = v16;
      }
      else
      {
        v17 = xpc_null_create();
        v64 = v17;
        if (!v17)
        {
          v18 = xpc_null_create();
          v17 = 0;
          goto LABEL_59;
        }
      }
      if (MEMORY[0x1C3B87B98](v17) == v11)
      {
        xpc_retain(v17);
LABEL_60:
        xpc_release(v17);
        v90 = xpc_BOOL_create(0);
        if (!v90)
          v90 = xpc_null_create();
        __p = &v64;
        v58 = "kIsSuccess";
        xpc::dict::object_proxy::operator=((uint64_t)&__p, &v90, &v91);
        xpc_release(v91);
        v91 = 0;
        xpc_release(v90);
        v90 = 0;
        if (*(char *)(a1 + 951) < 0)
          v14 = *(const char **)v14;
        v88 = xpc_string_create(v14);
        if (!v88)
          v88 = xpc_null_create();
        __p = &v64;
        v58 = "kTransactionId";
        xpc::dict::object_proxy::operator=((uint64_t)&__p, &v88, &v89);
        xpc_release(v89);
        v89 = 0;
        xpc_release(v88);
        v88 = 0;
        if (*(char *)(a1 + 791) < 0)
          v15 = *(const char **)v15;
        v86 = xpc_string_create(v15);
        if (!v86)
          v86 = xpc_null_create();
        __p = &v64;
        v58 = "kConversationId";
        xpc::dict::object_proxy::operator=((uint64_t)&__p, &v86, &v87);
        xpc_release(v87);
        v87 = 0;
        xpc_release(v86);
        v86 = 0;
        v29 = (const char *)(a1 + 792);
        if (*(char *)(a1 + 815) < 0)
          v29 = *(const char **)v29;
        v84 = xpc_string_create(v29);
        if (!v84)
          v84 = xpc_null_create();
        __p = &v64;
        v58 = "kContributionId";
        xpc::dict::object_proxy::operator=((uint64_t)&__p, &v84, &v85);
        xpc_release(v85);
        v85 = 0;
        xpc_release(v84);
        v30 = v92;
        v83 = v64;
        v84 = 0;
        if (v64)
          xpc_retain(v64);
        else
          v83 = xpc_null_create();
        LazuliDelegate::handleLeaveGroupChat(v30, &v83);
        xpc_release(v83);
        v83 = 0;
        xpc_release(v64);
        goto LABEL_104;
      }
      v18 = xpc_null_create();
LABEL_59:
      v64 = v18;
      goto LABEL_60;
    }
  }
  else if (*(_BYTE *)(a1 + 951))
  {
    goto LABEL_12;
  }
  if (*(char *)(a1 + 887) < 0)
  {
    if (!*(_QWORD *)(a1 + 872))
      goto LABEL_24;
  }
  else if (!*(_BYTE *)(a1 + 887))
  {
LABEL_24:
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Failed to establish lazuli session due to INVITE error for message send trx ", 76);
    *(_BYTE *)(v19 + 17) = 0;
    v20 = (const char *)(a1 + 888);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, a1 + 888);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" conv ", 6);
    *(_BYTE *)(v19 + 17) = 0;
    v21 = (const char *)(a1 + 768);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 32))(v19, a1 + 768);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" remoteUri ", 11);
    *(_BYTE *)(v19 + 17) = 0;
    SipUri::asString(a4, 2, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (v59 < 0)
      operator delete(__p);
    v72 = xpc_BOOL_create(0);
    if (!v72)
      v72 = xpc_null_create();
    __p = &v96;
    v58 = "kIsSuccess";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v72, &object);
    xpc_release(object);
    object = 0;
    xpc_release(v72);
    v72 = 0;
    if (*(char *)(a1 + 911) < 0)
      v20 = *(const char **)v20;
    v70 = xpc_string_create(v20);
    if (!v70)
      v70 = xpc_null_create();
    __p = &v96;
    v58 = "kTransactionId";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v70, &v71);
    xpc_release(v71);
    v71 = 0;
    xpc_release(v70);
    v70 = 0;
    if (*(char *)(a1 + 791) < 0)
      v21 = *(const char **)v21;
    v68 = xpc_string_create(v21);
    if (!v68)
      v68 = xpc_null_create();
    __p = &v96;
    v58 = "kConversationId";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v68, &v69);
    xpc_release(v69);
    v69 = 0;
    xpc_release(v68);
    v68 = 0;
    SipUri::asString(a4, 2, &__p);
    if (v59 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    v66 = xpc_string_create(p_p);
    if (!v66)
      v66 = xpc_null_create();
    v64 = &v96;
    v65 = "kRemoteUri";
    xpc::dict::object_proxy::operator=((uint64_t)&v64, &v66, &v67);
    xpc_release(v67);
    v67 = 0;
    xpc_release(v66);
    v66 = 0;
    if (v59 < 0)
      operator delete(__p);
    if (*(char *)(a3 + 23) < 0)
    {
      if (!*(_QWORD *)(a3 + 8))
        goto LABEL_51;
      v23 = *(const char **)a3;
    }
    else
    {
      v23 = (const char *)a3;
      if (!*(_BYTE *)(a3 + 23))
      {
LABEL_51:
        if (a2)
        {
          v60 = xpc_int64_create(a2);
          if (!v60)
            v60 = xpc_null_create();
          __p = &v96;
          v58 = "kErrorCode";
          xpc::dict::object_proxy::operator=((uint64_t)&__p, &v60, &v61);
          xpc_release(v61);
          v61 = 0;
          xpc_release(v60);
          v60 = 0;
          SipResultDomain::makeResult(a2, a3, (ImsResult *)&__p);
          if (BYTE8(v95))
          {
            ImsResult::operator=((uint64_t)v94, (uint64_t)&__p);
          }
          else
          {
            ImsResult::ImsResult((uint64_t)v94, (uint64_t)&__p);
            BYTE8(v95) = 1;
          }
          ImsResult::~ImsResult((ImsResult *)&__p);
        }
        goto LABEL_104;
      }
    }
    v62 = xpc_string_create(v23);
    if (!v62)
      v62 = xpc_null_create();
    __p = &v96;
    v58 = "kReason";
    xpc::dict::object_proxy::operator=((uint64_t)&__p, &v62, &v63);
    xpc_release(v63);
    v63 = 0;
    xpc_release(v62);
    v62 = 0;
    goto LABEL_51;
  }
  if (*(_BYTE *)(a1 + 921))
    goto LABEL_24;
  v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Failed group creation trx ", 26);
  *(_BYTE *)(v24 + 17) = 0;
  v25 = (const char *)(a1 + 888);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, a1 + 888);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" conv ", 6);
  *(_BYTE *)(v24 + 17) = 0;
  v26 = (const char *)(a1 + 768);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, a1 + 768);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v24 + 17) = 0;
  v64 = 0;
  v27 = xpc_dictionary_create(0, 0, 0);
  v28 = v27;
  if (v27)
  {
    v64 = v27;
  }
  else
  {
    v28 = xpc_null_create();
    v64 = v28;
    if (!v28)
    {
      v31 = xpc_null_create();
      v28 = 0;
      goto LABEL_85;
    }
  }
  if (MEMORY[0x1C3B87B98](v28) != v11)
  {
    v31 = xpc_null_create();
LABEL_85:
    v64 = v31;
    goto LABEL_86;
  }
  xpc_retain(v28);
LABEL_86:
  xpc_release(v28);
  v81 = xpc_BOOL_create(0);
  if (!v81)
    v81 = xpc_null_create();
  __p = &v64;
  v58 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v81, &v82);
  xpc_release(v82);
  v82 = 0;
  xpc_release(v81);
  v81 = 0;
  if (*(char *)(a1 + 911) < 0)
    v25 = *(const char **)v25;
  v79 = xpc_string_create(v25);
  if (!v79)
    v79 = xpc_null_create();
  __p = &v64;
  v58 = "kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v79, &v80);
  xpc_release(v80);
  v80 = 0;
  xpc_release(v79);
  v79 = 0;
  if (*(char *)(a1 + 791) < 0)
    v26 = *(const char **)v26;
  v77 = xpc_string_create(v26);
  if (!v77)
    v77 = xpc_null_create();
  __p = &v64;
  v58 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v77, &v78);
  xpc_release(v78);
  v78 = 0;
  xpc_release(v77);
  v77 = 0;
  v32 = (const char *)(a1 + 792);
  if (*(char *)(a1 + 815) < 0)
    v32 = *(const char **)v32;
  v75 = xpc_string_create(v32);
  if (!v75)
    v75 = xpc_null_create();
  __p = &v64;
  v58 = "kContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v75, &v76);
  xpc_release(v76);
  v76 = 0;
  xpc_release(v75);
  v33 = v92;
  v74 = v64;
  v75 = 0;
  if (v64)
    xpc_retain(v64);
  else
    v74 = xpc_null_create();
  LazuliDelegate::handleGroupChatCreated(v33, &v74);
  xpc_release(v74);
  v74 = 0;
  xpc_release(v64);
LABEL_104:
  v34 = v93;
  if (v93)
  {
    p_shared_owners = (unint64_t *)&v93->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 288));
  v64 = *(xpc_object_t *)(a1 + 280);
  v65 = (const char *)v37;
  v38 = *((_QWORD *)v64 + 18);
  v40 = *(LazuliDelegate **)(v38 + 208);
  v39 = *(std::__shared_weak_count **)(v38 + 216);
  v92 = v40;
  v93 = v39;
  if (v39)
  {
    v41 = (unint64_t *)&v39->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
  v55[0] = 0;
  v56 = 0;
  if (BYTE8(v95))
  {
    ImsResult::ImsResult((ImsResult *)v55, (const ImsResult *)v94);
    v56 = 1;
  }
  v43 = a1 + 768;
  v44 = (IMSClientManager *)SipLazuliManager::terminateMessageSession(v40, v43, &__p, v55);
  if (v56)
    ImsResult::~ImsResult((ImsResult *)v55);
  if (v59 < 0)
    operator delete(__p);
  if (v39)
  {
    v45 = (unint64_t *)&v39->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  v47 = (std::__shared_weak_count *)v65;
  if (v65)
  {
    v48 = (unint64_t *)(v65 + 8);
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  IMSClientManager::instance(v44);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  v50 = (std::__shared_weak_count *)v58;
  v51 = *((_QWORD *)__p + 25);
  if (v58)
  {
    v52 = (unint64_t *)(v58 + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "InternalError");
  v54 = v96;
  if (v96)
    xpc_retain(v96);
  else
    v54 = xpc_null_create();
  IMSCallManager::terminateLazuli(v51, v43, &__p, &v54);
  xpc_release(v54);
  v54 = 0;
  if (v59 < 0)
    operator delete(__p);
  if (BYTE8(v95))
    ImsResult::~ImsResult((ImsResult *)v94);
  xpc_release(v96);
}

void sub_1BEFD3AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,xpc_object_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,xpc_object_t object)
{
  uint64_t v46;

  xpc_release(object);
  xpc_release(a36);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v46 - 176);
  if (*(_BYTE *)(v46 - 88))
    ImsResult::~ImsResult((ImsResult *)(v46 - 160));
  xpc_release(*(xpc_object_t *)(v46 - 72));
  _Unwind_Resume(a1);
}

void SipResultDomain::makeResult(int a1@<W0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  const ImsResult *v4;
  _QWORD v5[2];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;

  v7 = 0u;
  v8 = 0u;
  v9 = 0u;
  v5[0] = &off_1E78B7238;
  v5[1] = &SipResultDomain::_domain;
  v6 = a1;
  v4 = (const ImsResult *)ImsResult::operator<<<std::string>((uint64_t)v5, a2);
  ImsResult::ImsResult(a3, v4);
  ImsResult::~ImsResult((ImsResult *)v5);
}

void sub_1BEFD3D94(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void LazuliSession::endSession(LazuliSession *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  _BYTE v6[72];

  v4 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"End Session ", 12);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 37);
  if (v5)
  {
    SipSession::hangUp(v5, a2, 0, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    LazuliSession::detachSipSession(a1);
  }
}

void LazuliSession::leaveGroup(uint64_t **a1, std::string *__str)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _BYTE v12[72];
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;
  void *v17[2];
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;

  if (a1[37])
  {
    std::string::operator=((std::string *)(a1 + 116), __str);
    v4 = ((uint64_t (*)(uint64_t **))(*a1)[8])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"LeaveGroup trx ", 15);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v4 + 32))(v4, a1 + 116);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" conv ", 6);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v4 + 32))(v4, a1 + 96);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    v25 = 0;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v18 = 0u;
    *(_OWORD *)v17 = 0u;
    std::string::basic_string[abi:ne180100]<0>(v15, "UserTriggered");
    std::string::basic_string[abi:ne180100]<0>(__p, "Call completed");
    BambiCallTerminationReason::BambiCallTerminationReason((uint64_t)v17, (__int128 *)v15, 200, (__int128 *)__p, (__int128 *)&SipReason::kProtocolSip);
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    SipSession::hangUp(a1[37], (uint64_t)v17, 0, (uint64_t)v12);
    ImsResult::~ImsResult((ImsResult *)v12);
    v5 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
    if (*((_QWORD *)&v24 + 1))
    {
      v6 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
    if (*((_QWORD *)&v23 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (SHIBYTE(v22) < 0)
      operator delete(*((void **)&v21 + 1));
    if (SBYTE7(v20) < 0)
      operator delete((void *)v19);
    if (SHIBYTE(v18) < 0)
      operator delete(v17[1]);
  }
  else
  {
    v11 = ((uint64_t (*)(uint64_t **))(*a1)[7])(a1);
    ((void (*)(uint64_t **, uint64_t))(*a1)[2])(a1, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"SipSession not active for LeaveGroup trx ", 41);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 32))(v11, __str);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" conv ", 6);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v11 + 32))(v11, a1 + 96);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
  }
}

void sub_1BEFD4130(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31)
{
  BambiCallTerminationReason::~BambiCallTerminationReason(&a31);
  _Unwind_Resume(a1);
}

void LazuliSession::forceDetachSipSession(LazuliSession *this)
{
  uint64_t v2;

  v2 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Forcefully detaching sip session. Reason: Terminate all lazuli sessions", 71);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (*((_QWORD *)this + 37))
    LazuliSession::detachSipSession(this);
}

void LazuliSession::handleSdpOfferInFork(_QWORD *a1@<X0>, uint64_t *a2@<X1>, xpc_object_t *a3@<X3>, uint64_t a4@<X8>)
{
  SDPSession *v8;
  uint64_t v9;
  int hasStream;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  xpc_object_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  ImsPrefs *v26;
  void **OriginUsernameKey;
  unint64_t *v28;
  unint64_t v29;
  std::string::size_type size;
  std::__shared_weak_count *v31;
  const SipUri *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  SDPMedia *v46;
  xpc_object_t v47;
  xpc_object_t *v48;
  int v49;
  int v50;
  _BOOL4 v52;
  uint64_t v53;
  uint64_t v54;
  xpc_object_t v55;
  xpc_object_t *v56;
  int v57;
  int v58;
  BOOL v60;
  uint64_t v61;
  ImsOutStream *v62;
  unint64_t *v63;
  unint64_t v64;
  int v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  void (**v98)(ImsResult *__hidden);
  uint64_t *v99;
  int v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  _QWORD v104[3];
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;
  uint64_t v114;
  std::__shared_weak_count *v115;
  _BYTE __str[32];
  __int128 v117;
  uint64_t v118;
  void *__p[2];
  char v120;
  xpc_object_t object[2];
  __int128 v122;
  void *v123[2];
  __int128 v124;
  void *v125[2];
  __int128 v126;
  __int128 v127;
  __int128 v128;
  __int128 v129;
  __int128 v130;
  __int128 v131;
  __int128 v132;
  _OWORD v133[13];
  uint64_t v134;
  std::string v135;
  uint64_t v136;
  std::__shared_weak_count *v137;

  v105 = 0u;
  v106 = 0u;
  v107 = 0u;
  v104[0] = &off_1E78B7238;
  v104[1] = &_bambiDomain;
  v104[2] = 0;
  v9 = (uint64_t)(a1 + 15);
  v8 = (SDPSession *)a1[15];
  if (v8)
  {
    hasStream = SDPSession::hasStream(v8);
    if (*((_BYTE *)a1 + 920) || (hasStream & 1) != 0)
    {
      if (hasStream)
      {
        v11 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
        (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v11);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"TODO: Handle re-invite", 22);
        *(_BYTE *)(v11 + 17) = 0;
        v12 = (_BYTE *)(v11 + 17);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v13 = 0x40000000;
        v14 = &_bambiDomain;
LABEL_8:
        *v12 = 0;
        *(_OWORD *)(a4 + 24) = 0u;
        *(_OWORD *)(a4 + 40) = 0u;
        *(_OWORD *)(a4 + 56) = 0u;
        *(_QWORD *)a4 = &off_1E78B7238;
        *(_QWORD *)(a4 + 8) = v14;
        *(_DWORD *)(a4 + 16) = v13;
        goto LABEL_151;
      }
LABEL_7:
      v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Received a new offer/answer, but we don't have any media streams to handle it!", 78);
      *(_BYTE *)(v15 + 17) = 0;
      v12 = (_BYTE *)(v15 + 17);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v13 = 491;
      v14 = &SipResultDomain::_domain;
      goto LABEL_8;
    }
  }
  else if (*((_BYTE *)a1 + 920))
  {
    goto LABEL_7;
  }
  v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"handleSdpOffer: initializing MT lazuli session", 46);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = *a2;
  v18 = (std::__shared_weak_count *)a2[1];
  v97 = v17;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
  }
  v21 = *a3;
  if (v21)
    xpc_retain(v21);
  else
    v21 = xpc_null_create();
  v136 = 0;
  v137 = 0;
  v22 = (std::__shared_weak_count *)a1[36];
  if (v22)
  {
    v23 = std::__shared_weak_count::lock(v22);
    v137 = v23;
    if (v23)
    {
      v136 = a1[35];
      if (v136)
      {
        memset(&v135, 0, sizeof(v135));
        object[0] = 0;
        object[1] = 0;
        v24 = (std::__shared_weak_count *)a1[36];
        if (v24)
        {
          v24 = std::__shared_weak_count::lock(v24);
          v25 = v24;
          object[1] = v24;
          if (v24)
          {
            v24 = (std::__shared_weak_count *)a1[35];
            object[0] = v24;
          }
        }
        else
        {
          v25 = 0;
        }
        v26 = (ImsPrefs *)SipStack::prefs((SipStack *)v24);
        OriginUsernameKey = (void **)ImsPrefs::getOriginUsernameKey(v26);
        ImsPrefs::stringValue(v26, OriginUsernameKey);
        if (v25)
        {
          v28 = (unint64_t *)&v25->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        size = HIBYTE(v135.__r_.__value_.__r.__words[2]);
        if ((v135.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v135.__r_.__value_.__l.__size_;
        if (!size)
        {
          v134 = 0;
          v132 = 0u;
          memset(v133, 0, sizeof(v133));
          v130 = 0u;
          v131 = 0u;
          v128 = 0u;
          v129 = 0u;
          v126 = 0u;
          v127 = 0u;
          v124 = 0u;
          *(_OWORD *)v125 = 0u;
          v122 = 0u;
          *(_OWORD *)v123 = 0u;
          *(_OWORD *)object = 0u;
          v31 = std::__shared_weak_count::lock((std::__shared_weak_count *)a1[36]);
          *(_QWORD *)__str = a1[35];
          *(_QWORD *)&__str[8] = v31;
          v32 = (const SipUri *)SipUserAgent::publicUri(*(SipUserAgent **)(*(_QWORD *)__str + 144));
          SipUri::SipUri((SipUri *)object, v32);
          v33 = (unint64_t *)&v31->__shared_owners_;
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
          std::string::basic_string[abi:ne180100]<0>(__str, "");
          std::string::operator=((std::string *)((char *)v133 + 8), (const std::string *)__str);
          if ((__str[23] & 0x80000000) != 0)
            operator delete(*(void **)__str);
          SipUri::asString((uint64_t)object, 2, __str);
          if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v135.__r_.__value_.__l.__data_);
          v135 = *(std::string *)__str;
          SipUri::~SipUri((SipUri *)object);
        }
        std::string::basic_string[abi:ne180100]<0>(__str, " ");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        ims::substituteVar(&v135, (uint64_t)__str, (uint64_t)__p, object);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        *(_OWORD *)&v135.__r_.__value_.__l.__data_ = *(_OWORD *)object;
        v135.__r_.__value_.__r.__words[2] = v122;
        BYTE7(v122) = 0;
        LOBYTE(object[0]) = 0;
        if (v120 < 0)
          operator delete(__p[0]);
        if ((__str[23] & 0x80000000) != 0)
          operator delete(*(void **)__str);
        v118 = 0;
        v117 = 0u;
        memset(__str, 0, sizeof(__str));
        object[0] = 0;
        object[1] = 0;
        v35 = (std::__shared_weak_count *)a1[36];
        if (v35)
        {
          v35 = std::__shared_weak_count::lock(v35);
          v36 = v35;
          object[1] = v35;
          if (v35)
          {
            v35 = (std::__shared_weak_count *)a1[35];
            object[0] = v35;
          }
        }
        else
        {
          v36 = 0;
        }
        SipStack::mediaAddress((SipStack *)v35, (uint64_t)__str);
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        v114 = 0;
        v115 = 0;
        SipHost::ipAddress((SipHost *)__str, &v114);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, a1 + 13);
        std::allocate_shared[abi:ne180100]<SDPSession,std::allocator<SDPSession>,std::shared_ptr<LazuliSession>,std::string &,std::shared_ptr<IpAddress> &,ims::TextMediaSessionMode,std::shared_ptr<SipStack> &,void>(object, (__int128 *)__p, (__int128 *)&v135, &v114, &v136);
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v9, (__int128 *)object);
        v39 = (std::__shared_weak_count *)object[1];
        if (object[1])
        {
          v40 = (unint64_t *)((char *)object[1] + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v42 = (std::__shared_weak_count *)__p[1];
        if (__p[1])
        {
          v43 = (unint64_t *)((char *)__p[1] + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
          if (!v44)
          {
            ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
            std::__shared_weak_count::__release_weak(v42);
          }
        }
        v45 = *(_QWORD *)v9;
        if (*(_QWORD *)v9)
        {
          if (!v97)
            goto LABEL_118;
          v46 = *(SDPMedia **)(v97 + 416);
          if (*(SDPMedia **)(v97 + 424) != v46)
          {
            SDPMedia::setupState(*(SDPMedia **)(v97 + 416), (std::string *)object);
            v47 = (xpc_object_t)BYTE7(v122);
            if (SBYTE7(v122) < 0)
              v47 = object[1];
            if (v47 == (xpc_object_t)7)
            {
              v48 = (xpc_object_t *)object[0];
              if ((SBYTE7(v122) & 0x80u) == 0)
                v48 = object;
              v49 = *(_DWORD *)v48;
              v50 = *(_DWORD *)((char *)v48 + 3);
              v52 = v49 == 1936941424 && v50 == 1702259059;
            }
            else
            {
              v52 = 0;
            }
            if (SBYTE7(v122) < 0)
              operator delete(object[0]);
            if (v52)
            {
              v54 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
              (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v54);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v54 + 8), (uint64_t)"remote is listening on path ", 28);
              *(_BYTE *)(v54 + 17) = 0;
              SDPMedia::path(v46, (uint64_t)object);
              LazuliRouteSet::toStream((LazuliRouteSet *)object, (ImsOutStream *)v54);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v54 + 64))(v54, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v54 + 17) = 0;
              LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)object);
              v45 = *(_QWORD *)v9;
              *(_BYTE *)(*(_QWORD *)v9 + 146) = 1;
            }
            else
            {
              SDPMedia::setupState(v46, (std::string *)object);
              v55 = (xpc_object_t)BYTE7(v122);
              if (SBYTE7(v122) < 0)
                v55 = object[1];
              if (v55 == (xpc_object_t)6)
              {
                v56 = (xpc_object_t *)object[0];
                if ((SBYTE7(v122) & 0x80u) == 0)
                  v56 = object;
                v57 = *(_DWORD *)v56;
                v58 = *((unsigned __int16 *)v56 + 2);
                v60 = v57 == 1769235297 && v58 == 25974;
              }
              else
              {
                v60 = 0;
              }
              if (SBYTE7(v122) < 0)
                operator delete(object[0]);
              if (v60)
              {
                v61 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
                (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v61);
                v62 = (ImsOutStream *)ImsOutStream::operator<<(v61, "remote expects connection on ");
                SDPMedia::path(v46, (uint64_t)object);
                LazuliRouteSet::toStream((LazuliRouteSet *)object, v62);
                (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *((_BYTE *)v62 + 17) = 0;
                LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)object);
                v45 = *(_QWORD *)v9;
                *(_BYTE *)(*(_QWORD *)v9 + 146) = 0;
              }
              else
              {
                v45 = *(_QWORD *)v9;
              }
            }
          }
          v112 = v97;
          v113 = v18;
          if (v18)
          {
            v63 = (unint64_t *)&v18->__shared_owners_;
            do
              v64 = __ldxr(v63);
            while (__stxr(v64 + 1, v63));
          }
          v110 = 0;
          v111 = 0;
          v65 = SDPSession::handleLazuliOfferAnswer(v45, &v112, &v110, 0);
          v66 = v111;
          if (v111)
          {
            v67 = (unint64_t *)&v111->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
              std::__shared_weak_count::__release_weak(v66);
            }
          }
          v69 = v113;
          if (v113)
          {
            v70 = (unint64_t *)&v113->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
              std::__shared_weak_count::__release_weak(v69);
            }
          }
          if (v65 != 2)
          {
            v108 = 0;
            v109 = 0;
            v77 = (std::__shared_weak_count *)a1[36];
            if (v77 && (v109 = std::__shared_weak_count::lock(v77)) != 0)
            {
              v78 = a1[35];
              v108 = v78;
            }
            else
            {
              v78 = 0;
            }
            std::string::basic_string[abi:ne180100]<0>(__p, "CodecNotSupported");
            SipStack::callTerminationReason(v78, (uint64_t)__p, (BambiCallTerminationReason *)object);
            SipResultDomain::makeResult((SipResultDomain *)object, (uint64_t)&v98);
            v88 = (std::__shared_weak_count *)*((_QWORD *)&v128 + 1);
            if (*((_QWORD *)&v128 + 1))
            {
              v89 = (unint64_t *)(*((_QWORD *)&v128 + 1) + 8);
              do
                v90 = __ldaxr(v89);
              while (__stlxr(v90 - 1, v89));
              if (!v90)
              {
                ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
                std::__shared_weak_count::__release_weak(v88);
              }
            }
            v91 = (std::__shared_weak_count *)*((_QWORD *)&v127 + 1);
            if (*((_QWORD *)&v127 + 1))
            {
              v92 = (unint64_t *)(*((_QWORD *)&v127 + 1) + 8);
              do
                v93 = __ldaxr(v92);
              while (__stlxr(v93 - 1, v92));
              if (!v93)
              {
                ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
                std::__shared_weak_count::__release_weak(v91);
              }
            }
            if (SHIBYTE(v126) < 0)
              operator delete(v125[1]);
            if (SBYTE7(v124) < 0)
              operator delete(v123[0]);
            if (SHIBYTE(v122) < 0)
              operator delete(object[1]);
            if (v120 < 0)
              operator delete(__p[0]);
            v94 = v109;
            if (v109)
            {
              v95 = (unint64_t *)&v109->__shared_owners_;
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 - 1, v95));
              if (!v96)
              {
                ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
                std::__shared_weak_count::__release_weak(v94);
              }
            }
          }
          else
          {
LABEL_118:
            v72 = a1[37];
            v74 = *(_QWORD *)(v72 + 240);
            v73 = *(std::__shared_weak_count **)(v72 + 248);
            if (v73)
            {
              v75 = (unint64_t *)&v73->__shared_owners_;
              do
                v76 = __ldxr(v75);
              while (__stxr(v76 + 1, v75));
            }
            object[0] = v21;
            if (v21)
              xpc_retain(v21);
            else
              object[0] = xpc_null_create();
            SipDialog::setGroupParams(v74, object);
            xpc_release(object[0]);
            object[0] = 0;
            if (v73)
            {
              v79 = (unint64_t *)&v73->__shared_owners_;
              do
                v80 = __ldaxr(v79);
              while (__stlxr(v80 - 1, v79));
              if (!v80)
              {
                ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
                std::__shared_weak_count::__release_weak(v73);
              }
            }
            v103 = 0uLL;
            v98 = &off_1E78B7238;
            v99 = &_bambiDomain;
            v100 = 0;
            v102 = 0uLL;
            v101 = 0uLL;
          }
        }
        else
        {
          v53 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v53);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"Unable to create SDP session", 28);
          *(_BYTE *)(v53 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v53 + 17) = 0;
          v101 = 0u;
          v102 = 0u;
          v103 = 0u;
          v98 = &off_1E78B7238;
          v99 = &SipResultDomain::_domain;
          v100 = 500;
        }
        v81 = v115;
        if (v115)
        {
          v82 = (unint64_t *)&v115->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        SipHost::~SipHost((void **)__str);
        if (SHIBYTE(v135.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v135.__r_.__value_.__l.__data_);
        v23 = v137;
        if (!v137)
          goto LABEL_145;
        goto LABEL_141;
      }
    }
  }
  else
  {
    v23 = 0;
  }
  v101 = 0u;
  v102 = 0u;
  v103 = 0u;
  v98 = &off_1E78B7238;
  v99 = &_bambiDomain;
  v100 = 0x40000000;
  if (v23)
  {
LABEL_141:
    v84 = (unint64_t *)&v23->__shared_owners_;
    do
      v85 = __ldaxr(v84);
    while (__stlxr(v85 - 1, v84));
    if (!v85)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
LABEL_145:
  ImsResult::operator=((uint64_t)v104, (uint64_t)&v98);
  ImsResult::~ImsResult((ImsResult *)&v98);
  xpc_release(v21);
  if (v18)
  {
    v86 = (unint64_t *)&v18->__shared_owners_;
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  ImsResult::ImsResult(a4, (uint64_t)v104);
LABEL_151:
  ImsResult::~ImsResult((ImsResult *)v104);
}

void sub_1BEFD4DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,char a33,uint64_t a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53)
{
  void *v53;
  uint64_t v54;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a35);
  SipHost::~SipHost(&a37);
  if (*(char *)(v54 - 121) < 0)
    operator delete(*(void **)(v54 - 144));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v54 - 112);
  xpc_release(v53);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  ImsResult::~ImsResult((ImsResult *)&a20);
  _Unwind_Resume(a1);
}

void LazuliSession::handleSdpAnswerInFork(_QWORD *a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, void **a4@<X4>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  void *v29;
  uint64_t v30;
  _QWORD *v31;
  const char *v32;
  uint64_t v33;
  _BYTE *v34;
  uint64_t v35;
  SipDialog *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  xpc_object_t object[3];
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  _QWORD v57[2];
  xpc_object_t v58[2];
  xpc_object_t v59;
  xpc_object_t v60;

  v10 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"handle sdp answer", 17);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 24))(*a3) & 1) == 0)
  {
    v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v30);
    v31 = *(_QWORD **)(v30 + 8);
    v32 = "received invalid SDP answer:";
    v33 = 28;
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v31, (uint64_t)v32, v33);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    v34 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, _BYTE *))(*a1 + 16))(a1, v34);
    (*(void (**)(_QWORD, _BYTE *))(*(_QWORD *)*a3 + 16))(*a3, v34);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v34[17] = 0;
    *(_OWORD *)(a5 + 24) = 0u;
    *(_OWORD *)(a5 + 40) = 0u;
    *(_OWORD *)(a5 + 56) = 0u;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &SipResultDomain::_domain;
    *(_DWORD *)(a5 + 16) = 488;
    return;
  }
  v11 = a1[15];
  v12 = (std::__shared_weak_count *)a2[1];
  v55 = *a2;
  v56 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = (std::__shared_weak_count *)a3[1];
  v53 = *a3;
  v54 = v15;
  if (v15)
  {
    v16 = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  v18 = SDPSession::handleLazuliOfferAnswer(v11, &v55, &v53, *(_QWORD *)(*a2 + 144));
  v19 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v22 = v56;
  if (v56)
  {
    v23 = (unint64_t *)&v56->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
      if (v18)
        goto LABEL_18;
      goto LABEL_25;
    }
  }
  if (!v18)
  {
LABEL_25:
    v30 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v30);
    v31 = *(_QWORD **)(v30 + 8);
    v32 = "received rejection answer: ";
    v33 = 27;
    goto LABEL_26;
  }
LABEL_18:
  v25 = (void *)*a3;
  v26 = (std::__shared_weak_count *)a3[1];
  object[1] = v25;
  object[2] = v26;
  if (v26)
  {
    v27 = (unint64_t *)&v26->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  v29 = *a4;
  object[0] = v29;
  if (v29)
    xpc_retain(v29);
  else
    object[0] = xpc_null_create();
  v60 = 0;
  v35 = a1[37];
  v36 = *(SipDialog **)(v35 + 240);
  v37 = *(std::__shared_weak_count **)(v35 + 248);
  if (v37)
  {
    v38 = (unint64_t *)&v37->__shared_owners_;
    do
      v39 = __ldxr(v38);
    while (__stxr(v39 + 1, v38));
    SipDialog::lazuliGroupParams(v36, &v60);
    do
      v40 = __ldaxr(v38);
    while (__stlxr(v40 - 1, v38));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  else
  {
    SipDialog::lazuliGroupParams(v36, &v60);
  }
  v41 = MEMORY[0x1C3B87B98](v60);
  v42 = MEMORY[0x1E0C812F8];
  if (v41 == MEMORY[0x1E0C812F8] && MEMORY[0x1C3B87B98](object[0]) == v42)
  {
    v58[0] = &v60;
    v58[1] = "kTransactionId";
    v57[0] = object;
    v57[1] = "kTransactionId";
    xpc::dict::object_proxy::operator=((uint64_t)v57, (uint64_t)v58, &v59);
    xpc_release(v59);
    v59 = 0;
  }
  v43 = a1[37];
  v45 = *(_QWORD *)(v43 + 240);
  v44 = *(std::__shared_weak_count **)(v43 + 248);
  if (v44)
  {
    v46 = (unint64_t *)&v44->__shared_owners_;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  v58[0] = object[0];
  if (object[0])
    xpc_retain(object[0]);
  else
    v58[0] = xpc_null_create();
  SipDialog::setGroupParams(v45, v58);
  xpc_release(v58[0]);
  v58[0] = 0;
  if (v44)
  {
    v48 = (unint64_t *)&v44->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  *(_QWORD *)(a5 + 56) = 0;
  *(_QWORD *)(a5 + 64) = 0;
  *(_QWORD *)a5 = &off_1E78B7238;
  *(_QWORD *)(a5 + 8) = &_bambiDomain;
  *(_DWORD *)(a5 + 16) = 0;
  *(_QWORD *)(a5 + 40) = 0;
  *(_QWORD *)(a5 + 48) = 0;
  *(_QWORD *)(a5 + 24) = 0;
  *(_QWORD *)(a5 + 32) = 0;
  xpc_release(v60);
  xpc_release(object[0]);
  object[0] = 0;
  if (v26)
  {
    v50 = (unint64_t *)&v26->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
}

void sub_1BEFD5414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  uint64_t v15;

  xpc_release(*(xpc_object_t *)(v15 - 56));
  xpc_release(object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t LazuliSession::processEvent(LazuliSession *this, BambiCallEvent *a2)
{
  uint64_t v4;
  int v5;
  IMSClientManager *v6;
  uint64_t v7;
  const char *v8;
  const char *v9;
  xpc_object_t v10;
  xpc_object_t v11;
  uint64_t v12;
  uint64_t result;
  xpc_object_t v14;
  const char *v15;
  LazuliDelegate *v16;
  std::__shared_weak_count *size;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v24;
  IMSClientManager *v25;
  xpc_object_t v26;
  xpc_object_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  _BOOL4 v30;
  uint64_t v31;
  std::string::size_type v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  xpc_object_t v45;
  const char *v46;
  const char *v47;
  LazuliDelegate *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *p_shared_weak_owners;
  unint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  unsigned int v75;
  BOOL v76;
  uint64_t *v77;
  __int128 *v78;
  unsigned int v79;
  __int128 *v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  xpc_object_t v85;
  std::string::size_type v86;
  std::string *v87;
  _BOOL4 v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  std::string *v93;
  unsigned int v94;
  uint64_t v95;
  unint64_t *v96;
  std::string::size_type v97;
  std::string *v98;
  int data_low;
  int v100;
  uint64_t v102[2];
  uint64_t v103;
  std::__shared_weak_count *v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  xpc_object_t v107;
  xpc_object_t v108;
  xpc_object_t v109;
  xpc_object_t v110;
  xpc_object_t v111;
  xpc_object_t v112;
  xpc_object_t v113;
  xpc_object_t v114;
  xpc_object_t v115;
  xpc_object_t v116;
  xpc_object_t v117;
  xpc_object_t v118;
  std::string v119;
  xpc_object_t v120;
  xpc_object_t object;
  std::__shared_weak_count *v122;
  xpc_object_t v123;
  xpc_object_t v124;
  xpc_object_t v125;
  xpc_object_t v126;
  xpc_object_t v127;
  xpc_object_t v128;
  xpc_object_t v129;
  xpc_object_t v130;
  xpc_object_t v131;
  std::string v132;

  v4 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SessionEvent ", 13);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, BambiCallEvent *))(*(_QWORD *)a2 + 24))(&v132, a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 40))(v4, &v132);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v132.__r_.__value_.__l.__data_);
  *((_QWORD *)a2 + 4) = this;
  if (*((char *)this + 951) < 0)
  {
    if (!*((_QWORD *)this + 117))
      goto LABEL_51;
  }
  else if (!*((_BYTE *)this + 951))
  {
    goto LABEL_51;
  }
  v5 = *((_DWORD *)a2 + 2);
  if (v5 == 14)
  {
    v12 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Leave Group BYE sent", 20);
    *(_BYTE *)(v12 + 17) = 0;
    result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    return result;
  }
  if (v5 == 15)
  {
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = 0uLL;
    IMSClientManager::lazuliDelegateForStack((void **)this + 4, &v132);
    if (!v132.__r_.__value_.__r.__words[0])
    {
LABEL_37:
      size = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
      if (v132.__r_.__value_.__l.__size_)
      {
        v18 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
          std::__shared_weak_count::__release_weak(size);
        }
      }
      if (*((char *)this + 951) < 0)
      {
        **((_BYTE **)this + 116) = 0;
        *((_QWORD *)this + 117) = 0;
      }
      else
      {
        *((_BYTE *)this + 928) = 0;
        *((_BYTE *)this + 951) = 0;
      }
      IMSClientManager::instance(v6);
      IPTelephonyManager::getInstance((uint64_t *)&v132);
      v20 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
      v21 = *(_QWORD *)(v132.__r_.__value_.__r.__words[0] + 200);
      if (v132.__r_.__value_.__l.__size_)
      {
        v22 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      IMSCallManager::handleLeaveGroupChat(v21, (void **)this + 99);
      goto LABEL_51;
    }
    v7 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Leave Group trx ", 16);
    v8 = (char *)this + 928;
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 32))(v7, (char *)this + 928);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" conv ", 6);
    *(_BYTE *)(v7 + 17) = 0;
    v9 = (char *)this + 768;
    (*(void (**)(uint64_t, char *))(*(_QWORD *)v7 + 32))(v7, (char *)this + 768);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    object = 0;
    v10 = xpc_dictionary_create(0, 0, 0);
    v11 = v10;
    if (v10)
    {
      object = v10;
    }
    else
    {
      v11 = xpc_null_create();
      object = v11;
      if (!v11)
      {
        v14 = xpc_null_create();
        v11 = 0;
        goto LABEL_18;
      }
    }
    if (MEMORY[0x1C3B87B98](v11) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v11);
LABEL_19:
      xpc_release(v11);
      v130 = xpc_BOOL_create(1);
      if (!v130)
        v130 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v130, &v131);
      xpc_release(v131);
      v131 = 0;
      xpc_release(v130);
      v130 = 0;
      if (*((char *)this + 951) < 0)
        v8 = *(const char **)v8;
      v128 = xpc_string_create(v8);
      if (!v128)
        v128 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v128, &v129);
      xpc_release(v129);
      v129 = 0;
      xpc_release(v128);
      v128 = 0;
      if (*((char *)this + 791) < 0)
        v9 = *(const char **)v9;
      v126 = xpc_string_create(v9);
      if (!v126)
        v126 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v126, &v127);
      xpc_release(v127);
      v127 = 0;
      xpc_release(v126);
      v126 = 0;
      v15 = (char *)this + 792;
      if (*((char *)this + 815) < 0)
        v15 = *(const char **)v15;
      v124 = xpc_string_create(v15);
      if (!v124)
        v124 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v124, &v125);
      xpc_release(v125);
      v125 = 0;
      xpc_release(v124);
      v16 = (LazuliDelegate *)v132.__r_.__value_.__r.__words[0];
      v123 = object;
      v124 = 0;
      if (object)
        xpc_retain(object);
      else
        v123 = xpc_null_create();
      LazuliDelegate::handleLeaveGroupChat(v16, &v123);
      xpc_release(v123);
      v123 = 0;
      xpc_release(object);
      goto LABEL_37;
    }
    v14 = xpc_null_create();
LABEL_18:
    object = v14;
    goto LABEL_19;
  }
LABEL_51:
  v24 = *((_DWORD *)a2 + 2);
  if ((v24 - 14) < 2)
  {
    object = 0;
    v122 = 0;
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
    if (v29 && (v29 = std::__shared_weak_count::lock(v29), (v122 = v29) != 0))
    {
      object = (xpc_object_t)*((_QWORD *)this + 35);
      v30 = v28 != 0;
      if (object && v28)
      {
        if (v28[147])
        {
          v31 = *((_QWORD *)object + 18);
          v32 = *(_QWORD *)(v31 + 248);
          v33 = *(std::__shared_weak_count **)(v31 + 256);
          v132.__r_.__value_.__r.__words[0] = v32;
          v132.__r_.__value_.__l.__size_ = (std::string::size_type)v33;
          if (v33)
          {
            p_shared_owners = (unint64_t *)&v33->__shared_owners_;
            do
              v35 = __ldxr(p_shared_owners);
            while (__stxr(v35 + 1, p_shared_owners));
          }
          (*(void (**)(std::string::size_type, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v32 + 168))(v32, 18, 0, 0);
          if (v33)
          {
            v36 = (unint64_t *)&v33->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v38 = (char *)object;
          SipTransportLayer::removeConnections(*((SipTransportLayer **)object + 20), 0, 1, 1);
          v39 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
          if (v39 && (v40 = std::__shared_weak_count::lock(v39)) != 0)
          {
            v41 = v40;
            v42 = *((_QWORD *)this + 35);
            if (v42)
              v43 = *(_QWORD *)(v42 + 136);
            else
              v43 = 0;
            v70 = (unint64_t *)&v40->__shared_owners_;
            do
              v71 = __ldaxr(v70);
            while (__stlxr(v71 - 1, v70));
            if (!v71)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v41);
            }
          }
          else
          {
            v43 = 0;
          }
          if (v38[4159] < 0)
            std::string::__init_copy_ctor_external(&v132, *((const std::string::value_type **)v38 + 517), *((_QWORD *)v38 + 518));
          else
            v132 = *(std::string *)(v38 + 4136);
          v29 = *(std::__shared_weak_count **)(v43 + 248);
          if (v29)
            v29 = (std::__shared_weak_count *)((uint64_t (*)(std::__shared_weak_count *, std::string *))v29->__vftable[2].__on_zero_shared)(v29, &v132);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v132.__r_.__value_.__l.__data_);
        }
        v30 = 1;
      }
    }
    else
    {
      v30 = v28 != 0;
    }
    if (!*((_BYTE *)this + 921) && v30)
    {
      v72 = *((_DWORD *)v28 + 44);
      v73 = qword_1ED7042F8;
      if (qword_1ED7042F8)
      {
        v74 = &qword_1ED7042F8;
        do
        {
          v75 = *(_DWORD *)(v73 + 32);
          v76 = v75 >= v72;
          if (v75 >= v72)
            v77 = (uint64_t *)v73;
          else
            v77 = (uint64_t *)(v73 + 8);
          if (v76)
            v74 = (uint64_t *)v73;
          v73 = *v77;
        }
        while (*v77);
        v78 = &ims::kEmptyString;
        if (v74 != &qword_1ED7042F8)
        {
          v79 = *((_DWORD *)v74 + 8);
          v80 = (__int128 *)(v74 + 5);
          if (v79 <= v72)
            v78 = v80;
        }
      }
      else
      {
        v78 = &ims::kEmptyString;
      }
      LazuliSession::handleInviteFailure((uint64_t)this, v72, (uint64_t)v78, (uint64_t)(v28 + 184));
LABEL_208:
      v67 = v122;
      if (v122)
      {
        v96 = (unint64_t *)&v122->__shared_owners_;
        do
          v69 = __ldaxr(v96);
        while (__stlxr(v69 - 1, v96));
LABEL_211:
        if (!v69)
        {
          ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
          std::__shared_weak_count::__release_weak(v67);
        }
        goto LABEL_213;
      }
      goto LABEL_213;
    }
    IMSClientManager::instance((IMSClientManager *)v29);
    IPTelephonyManager::getInstance((uint64_t *)&v132);
    v81 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
    v82 = *(_QWORD *)(v132.__r_.__value_.__r.__words[0] + 200);
    if (v132.__r_.__value_.__l.__size_)
    {
      v83 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
      do
        v84 = __ldaxr(v83);
      while (__stlxr(v84 - 1, v83));
      if (!v84)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
    }
    v120 = 0;
    v85 = xpc_null_create();
    v120 = v85;
    if (!v30)
    {
LABEL_204:
      v94 = *((_DWORD *)a2 + 2);
      v95 = eventNames;
      v114 = v85;
      if (v85)
        xpc_retain(v85);
      else
        v114 = xpc_null_create();
      IMSCallManager::terminateLazuli(v82, (uint64_t)this + 768, v95 + 24 * v94, &v114);
      xpc_release(v114);
      v114 = 0;
      xpc_release(v120);
      goto LABEL_208;
    }
    if (v28[87] < 0)
      std::string::__init_copy_ctor_external(&v132, *((const std::string::value_type **)v28 + 8), *((_QWORD *)v28 + 9));
    else
      v132 = *(std::string *)(v28 + 64);
    v86 = HIBYTE(v132.__r_.__value_.__r.__words[2]);
    if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v86 = v132.__r_.__value_.__l.__size_;
    if (v86 != 4)
      goto LABEL_180;
    v87 = (std::string *)v132.__r_.__value_.__r.__words[0];
    if ((v132.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v87 = &v132;
    if (LODWORD(v87->__r_.__value_.__l.__data_) == 1701736263 && *((_DWORD *)v28 + 28) == 410)
    {
      if (v28[111] < 0)
        std::string::__init_copy_ctor_external(&v119, *((const std::string::value_type **)v28 + 11), *((_QWORD *)v28 + 12));
      else
        v119 = *(std::string *)(v28 + 88);
      v97 = HIBYTE(v119.__r_.__value_.__r.__words[2]);
      if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v97 = v119.__r_.__value_.__l.__size_;
      if (v97 == 3)
      {
        v98 = (std::string *)v119.__r_.__value_.__r.__words[0];
        if ((v119.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          v98 = &v119;
        data_low = LOWORD(v98->__r_.__value_.__l.__data_);
        v100 = v98->__r_.__value_.__s.__data_[2];
        v88 = data_low == 18771 && v100 == 80;
      }
      else
      {
        v88 = 0;
      }
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      if ((*((_BYTE *)&v132.__r_.__value_.__s + 23) & 0x80) == 0)
      {
LABEL_182:
        if (v88)
        {
          v89 = xpc_dictionary_create(0, 0, 0);
          if (v89 || (v89 = xpc_null_create()) != 0)
          {
            if (MEMORY[0x1C3B87B98](v89) == MEMORY[0x1E0C812F8])
            {
              xpc_retain(v89);
              v90 = v89;
            }
            else
            {
              v90 = xpc_null_create();
            }
          }
          else
          {
            v90 = xpc_null_create();
            v89 = 0;
          }
          xpc_release(v89);
          v91 = xpc_null_create();
          v92 = v120;
          v120 = v90;
          xpc_release(v92);
          xpc_release(v91);
          v117 = xpc_BOOL_create(1);
          if (!v117)
            v117 = xpc_null_create();
          v132.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
          v132.__r_.__value_.__l.__size_ = (std::string::size_type)"kUserEvictedFromGroup";
          xpc::dict::object_proxy::operator=((uint64_t)&v132, &v117, &v118);
          xpc_release(v118);
          v118 = 0;
          xpc_release(v117);
          v117 = 0;
          memset(&v132, 0, sizeof(v132));
          if (v28[175] < 0)
            std::string::__init_copy_ctor_external(&v132, *((const std::string::value_type **)v28 + 19), *((_QWORD *)v28 + 20));
          else
            v132 = *(std::string *)(v28 + 152);
          if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          {
            if (!v132.__r_.__value_.__l.__size_)
            {
LABEL_202:
              operator delete(v132.__r_.__value_.__l.__data_);
              goto LABEL_203;
            }
            v93 = (std::string *)v132.__r_.__value_.__r.__words[0];
LABEL_199:
            v115 = xpc_string_create((const char *)v93);
            if (!v115)
              v115 = xpc_null_create();
            v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
            v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kReferredBy";
            xpc::dict::object_proxy::operator=((uint64_t)&v119, &v115, &v116);
            xpc_release(v116);
            v116 = 0;
            xpc_release(v115);
            v115 = 0;
            if ((SHIBYTE(v132.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              goto LABEL_203;
            goto LABEL_202;
          }
          if (*((_BYTE *)&v132.__r_.__value_.__s + 23))
          {
            v93 = &v132;
            goto LABEL_199;
          }
        }
LABEL_203:
        v85 = v120;
        goto LABEL_204;
      }
    }
    else
    {
LABEL_180:
      v88 = 0;
      if ((*((_BYTE *)&v132.__r_.__value_.__s + 23) & 0x80) == 0)
        goto LABEL_182;
    }
    operator delete(v132.__r_.__value_.__l.__data_);
    goto LABEL_182;
  }
  if (v24 == 9)
  {
    v44 = (*(uint64_t (**)(LazuliSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(LazuliSession *, uint64_t))(*(_QWORD *)this + 16))(this, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"confirmed session with ", 23);
    *(_BYTE *)(v44 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 39) + 40))((char *)this + 312, v44);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    *((_BYTE *)this + 921) = 1;
  }
  else if (v24 == 30)
  {
    *(_OWORD *)&v132.__r_.__value_.__l.__data_ = 0uLL;
    IMSClientManager::lazuliDelegateForStack((void **)this + 4, &v132);
    if (!v132.__r_.__value_.__r.__words[0])
    {
LABEL_97:
      v49 = (std::__shared_weak_count *)v132.__r_.__value_.__l.__size_;
      if (v132.__r_.__value_.__l.__size_)
      {
        v50 = (unint64_t *)(v132.__r_.__value_.__l.__size_ + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      IMSClientManager::instance(v25);
      IPTelephonyManager::getInstance((uint64_t *)&v119);
      v52 = *(_QWORD *)(v119.__r_.__value_.__r.__words[0] + 168);
      v105 = 0;
      v106 = 0;
      v53 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
      if (v53)
      {
        v106 = std::__shared_weak_count::lock(v53);
        if (v106)
          v105 = *((_QWORD *)this + 35);
      }
      v54 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
      v103 = *((_QWORD *)this + 15);
      v104 = v54;
      if (v54)
      {
        p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
        do
          v56 = __ldxr(p_shared_weak_owners);
        while (__stxr(v56 + 1, p_shared_weak_owners));
      }
      v57 = *((_QWORD *)this + 37);
      v58 = *(std::__shared_weak_count **)(v57 + 248);
      v102[0] = *(_QWORD *)(v57 + 240);
      v102[1] = (uint64_t)v58;
      if (v58)
      {
        v59 = (unint64_t *)&v58->__shared_owners_;
        do
          v60 = __ldxr(v59);
        while (__stxr(v60 + 1, v59));
      }
      v61 = *((_QWORD *)this + 15);
      if (*(char *)(v61 + 1983) < 0)
        std::string::__init_copy_ctor_external(&v132, *(const std::string::value_type **)(v61 + 1960), *(_QWORD *)(v61 + 1968));
      else
        v132 = *(std::string *)(v61 + 1960);
      BambiClient::createMessageSession(v52, (uint64_t)&v105, (uint64_t)this + 768, &v103, v102, &v132);
      if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v132.__r_.__value_.__l.__data_);
      if (v58)
      {
        v62 = (unint64_t *)&v58->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
          std::__shared_weak_count::__release_weak(v58);
        }
      }
      if (v104)
        std::__shared_weak_count::__release_weak(v104);
      v64 = v106;
      if (v106)
      {
        v65 = (unint64_t *)&v106->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v67 = (std::__shared_weak_count *)v119.__r_.__value_.__l.__size_;
      if (!v119.__r_.__value_.__l.__size_)
        goto LABEL_213;
      v68 = (unint64_t *)(v119.__r_.__value_.__l.__size_ + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      goto LABEL_211;
    }
    object = 0;
    v26 = xpc_dictionary_create(0, 0, 0);
    v27 = v26;
    if (v26)
    {
      object = v26;
    }
    else
    {
      v27 = xpc_null_create();
      object = v27;
      if (!v27)
      {
        v45 = xpc_null_create();
        v27 = 0;
        goto LABEL_82;
      }
    }
    if (MEMORY[0x1C3B87B98](v27) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v27);
LABEL_83:
      xpc_release(v27);
      v46 = (char *)this + 768;
      if (*((char *)this + 791) < 0)
        v46 = *(const char **)v46;
      v112 = xpc_string_create(v46);
      if (!v112)
        v112 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v112, &v113);
      xpc_release(v113);
      v113 = 0;
      xpc_release(v112);
      v112 = 0;
      v47 = (char *)this + 792;
      if (*((char *)this + 815) < 0)
        v47 = *(const char **)v47;
      v110 = xpc_string_create(v47);
      if (!v110)
        v110 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v110, &v111);
      xpc_release(v111);
      v111 = 0;
      xpc_release(v110);
      v110 = 0;
      v108 = xpc_string_create("SessionAcknowledged");
      if (!v108)
        v108 = xpc_null_create();
      v119.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v119.__r_.__value_.__l.__size_ = (std::string::size_type)"kEventName";
      xpc::dict::object_proxy::operator=((uint64_t)&v119, &v108, &v109);
      xpc_release(v109);
      v109 = 0;
      xpc_release(v108);
      v48 = (LazuliDelegate *)v132.__r_.__value_.__r.__words[0];
      v107 = object;
      v108 = 0;
      if (object)
        xpc_retain(object);
      else
        v107 = xpc_null_create();
      LazuliDelegate::handleSessionEvent(v48, &v107);
      xpc_release(v107);
      v107 = 0;
      xpc_release(object);
      goto LABEL_97;
    }
    v45 = xpc_null_create();
LABEL_82:
    object = v45;
    goto LABEL_83;
  }
LABEL_213:
  result = *((_QWORD *)this + 114);
  if (result)
    return (*(uint64_t (**)(uint64_t, BambiCallEvent *))(*(_QWORD *)result + 16))(result, a2);
  return result;
}

void sub_1BEFD6320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, xpc_object_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,xpc_object_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,xpc_object_t object,xpc_object_t a32)
{
  uint64_t v32;

  if (*(char *)(v32 - 73) < 0)
    operator delete(*(void **)(v32 - 96));
  xpc_release(object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t LazuliSession::logSession(LazuliSession *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t result;
  std::string __p;
  uint64_t v12;
  std::__shared_weak_count *v13;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"[LazuliSession] uri=", 20);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(char *, ImsOutStream *))(*((_QWORD *)this + 39) + 40))((char *)this + 312, a2);
  if ((*((char *)this + 791) & 0x80000000) == 0)
  {
    if (!*((_BYTE *)this + 791))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (*((_QWORD *)this + 97))
  {
LABEL_3:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" convid=", 8);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 768);
  }
LABEL_4:
  if (*((char *)this + 911) < 0)
  {
    if (!*((_QWORD *)this + 112))
      goto LABEL_7;
    goto LABEL_6;
  }
  if (*((_BYTE *)this + 911))
  {
LABEL_6:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" trx=", 5);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 888);
  }
LABEL_7:
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 36);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v13 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 35);
      v12 = v7;
      if (v7)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" stack=", 7);
        *((_BYTE *)a2 + 17) = 0;
        if (*(char *)(v7 + 4159) < 0)
          std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v7 + 4136), *(_QWORD *)(v7 + 4144));
        else
          __p = *(std::string *)(v7 + 4136);
        (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 32))(a2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void sub_1BEFD672C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SDPSession,std::allocator<SDPSession>,std::shared_ptr<LazuliSession>,std::string &,std::shared_ptr<IpAddress> &,ims::TextMediaSessionMode,std::shared_ptr<SipStack> &,void>(_QWORD *a1, __int128 *a2, __int128 *a3, uint64_t *a4, uint64_t *a5)
{
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD v23[2];
  __int128 v24;

  v10 = operator new(0x7D8uLL);
  v12 = v10;
  v10[1] = 0;
  v10[2] = 0;
  *v10 = &off_1E78CC2D0;
  v13 = v10 + 3;
  v24 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14 = *a5;
  v15 = (std::__shared_weak_count *)a5[1];
  v23[0] = v14;
  v23[1] = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  SDPSession::SDPSession((uint64_t)(v10 + 3), &v24, a3, a4, v11, (uint64_t)v23);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
  if (*((_QWORD *)&v24 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  *a1 = v13;
  a1[1] = v12;
}

void sub_1BEFD687C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::__shared_weak_count *v11;
  void *v13;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::~__shared_weak_count(v11);
  operator delete(v13);
  _Unwind_Resume(a1);
}

uint64_t SoftbankRegistrationPolicy::SoftbankRegistrationPolicy(uint64_t a1, std::__shared_weak_count **a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v7[2];

  *(_QWORD *)(a1 + 104) = &off_1E78B7B60;
  v3 = a2[1];
  v7[0] = *a2;
  v7[1] = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  DefaultRegistrationPolicy::DefaultRegistrationPolicy((uint64_t *)a1, (uint64_t *)&off_1E78CEC58, v7);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *(_QWORD *)a1 = &off_1E78CE9A0;
  *(_QWORD *)(a1 + 104) = &unk_1E78CEC00;
  *(_QWORD *)(a1 + 176) = &unk_1E78CEC48;
  *(_DWORD *)(a1 + 2376) = 0;
  *(_WORD *)(a1 + 2380) = 0;
  return a1;
}

void sub_1BEFD693C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;

  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  _Unwind_Resume(exception_object);
}

void SoftbankRegistrationPolicy::emergencyRegistrationTimeout(SoftbankRegistrationPolicy *this)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  ImsOutStream *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  void (**v9)(ImsResult *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  void (**v17)(ImsResult *__hidden);
  uint64_t *v18;
  int v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  std::__shared_weak_count *v24;

  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  v17 = &off_1E78B7238;
  v18 = &_bambiDomain;
  v19 = 1073741830;
  v2 = *((_QWORD *)this + 54);
  if (v2)
    v3 = v2 == *((_QWORD *)this + 55);
  else
    v3 = 1;
  if (!v3)
    ImsResult::operator=(v2 + 480 * *((_QWORD *)this + 57) + 408, (uint64_t)&v17);
  ImsResult::~ImsResult((ImsResult *)&v17);
  ++*((_DWORD *)this + 594);
  v4 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SoftbankRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"emergency registration timed out for current proxy ", 51);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" of ", 4);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  SipRegistrationPolicy::clearAllThrottling((ims **)this);
  v5 = (ImsOutStream *)(*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SoftbankRegistrationPolicy *, ImsOutStream *))(*(_QWORD *)this + 16))(this, v5);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v5, 2);
  if ((*(unsigned int (**)(SoftbankRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 416))(this, 0))
  {
    if ((*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 328))(this))
      (*(void (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 504))(this);
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (v6)
    {
      v7 = std::__shared_weak_count::lock(v6);
      v18 = (uint64_t *)v7;
      if (v7)
      {
        v8 = v7;
        v9 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 46);
        v17 = v9;
        if (v9)
          (*((void (**)(_QWORD))*v9 + 5))(v9);
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
LABEL_22:
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
    }
  }
  else
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 47);
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      v24 = v13;
      if (v13)
      {
        v8 = v13;
        v14 = *((_QWORD *)this + 46);
        v23 = v14;
        if (v14)
        {
          v20 = 0u;
          v21 = 0u;
          v22 = 0u;
          v17 = &off_1E78B7238;
          v18 = &_bambiDomain;
          v19 = 1073741842;
          v15 = ImsResult::operator<<<char [31]>((uint64_t)&v17, "Emergency registration timeout");
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 88))(v14, v15);
          ImsResult::~ImsResult((ImsResult *)&v17);
        }
        v16 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldaxr(v16);
        while (__stlxr(v11 - 1, v16));
        goto LABEL_22;
      }
    }
  }
}

void sub_1BEFD6BE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SoftbankRegistrationPolicy::isRegistrationRetryAllowed(uint64_t a1, uint64_t a2)
{
  IMSClientManager *v4;
  uint64_t v5;
  _QWORD *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  uint64_t (*v17)(uint64_t);
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  uint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  _BYTE *v34;
  void *__p;
  std::__shared_weak_count *v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;

  v4 = (IMSClientManager *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1);
  if ((_DWORD)v4)
  {
    if (!*(_BYTE *)(a1 + 220) && *(_DWORD *)(a1 + 2376) >= *(_DWORD *)(a1 + 1840))
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5);
      v6 = *(_QWORD **)(v5 + 8);
      v7 = "retry not allowed: already exhausted proxy attempts for reregistration";
      v8 = 70;
      goto LABEL_29;
    }
    if (*(_BYTE *)(a1 + 2381))
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5);
      v6 = *(_QWORD **)(v5 + 8);
      v7 = "retry not allowed: received error response on reregister";
      v8 = 56;
LABEL_29:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, v8);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v10 = 0;
      *(_BYTE *)(v5 + 17) = 0;
      return v10;
    }
    IMSClientManager::instance(v4);
    IPTelephonyManager::getInstance((uint64_t *)&__p);
    v11 = v36;
    v12 = *((_QWORD *)__p + 21);
    if (v36)
    {
      p_shared_owners = (unint64_t *)&v36->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
    v40 = 0;
    v41 = 0;
    v15 = *(std::__shared_weak_count **)(a1 + 376);
    if (v15
      && (v41 = std::__shared_weak_count::lock(v15)) != 0
      && (v16 = *(_QWORD *)(a1 + 368), (v40 = v16) != 0)
      && v12)
    {
      v38 = 0;
      v39 = 0;
      (*(void (**)(void **__return_ptr))(*(_QWORD *)v16 + 136))(&__p);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(_QWORD *)v12 + 192))(&v38, v12, &__p);
      if (v37 < 0)
        operator delete(__p);
      if (v38)
      {
        v17 = *(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64);
        if (*(_BYTE *)(v38 + 2656))
        {
          v18 = v17(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18);
          v19 = (_BYTE *)ImsOutStream::operator<<(v18, "retry not allowed: roaming");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v19[17] = 0;
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v38);
          v10 = 0;
          goto LABEL_35;
        }
        v28 = v17(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v28);
        v29 = ImsOutStream::operator<<(v28, "not roaming: no decision to try to shortcuit the retry");
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v27 = (_BYTE *)(v29 + 17);
      }
      else
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"SipStack is null: no decision to try to shortcuit the retry", 59);
        *(_BYTE *)(v26 + 17) = 0;
        v27 = (_BYTE *)(v26 + 17);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      *v27 = 0;
      v30 = v39;
      if (v39)
      {
        v31 = (unint64_t *)&v39->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
    }
    else
    {
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"delegate or bambi is null: no decision to try to shortcuit the retry", 68);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
    }
    if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 5) == SipRegistrationPolicy::countOfProxiesWithErrors((SipRegistrationPolicy *)a1)
      && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2232) + 16))(*(_QWORD *)(a1 + 2232), a2))
    {
      if (0xEEEEEEEEEEEEEEEFLL * ((uint64_t)(*(_QWORD *)(a1 + 440) - *(_QWORD *)(a1 + 432)) >> 5) != SipRegistrationPolicy::countOfProxiesWithErrors((SipRegistrationPolicy *)a1)
        || *(_DWORD *)(a1 + 2376) >= *(_DWORD *)(a1 + 1840)
        || *(_BYTE *)(a1 + 2380))
      {
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"retry not allowed: by default", 29);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v10 = 0;
        *(_BYTE *)(v22 + 17) = 0;
LABEL_35:
        v23 = v41;
        if (v41)
        {
          v24 = (unint64_t *)&v41->__shared_owners_;
          do
            v25 = __ldaxr(v24);
          while (__stlxr(v25 - 1, v24));
          if (!v25)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
        return v10;
      }
      v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v33);
      v34 = (_BYTE *)ImsOutStream::operator<<(v33, "retry allowed: proxy list exhausted, but retries are allowed");
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v34[17] = 0;
    }
    else
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"retry allowed: proxy list has not been exhausted", 48);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v21 + 17) = 0;
    }
    v10 = 1;
    goto LABEL_35;
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 528))(a1))
    return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 2232) + 16))(*(_QWORD *)(a1 + 2232), a2);
  return 1;
}

void sub_1BEFD7198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t SoftbankRegistrationPolicy::handleProxyChange(uint64_t this)
{
  *(_DWORD *)(this + 2376) = 0;
  *(_BYTE *)(this + 2380) = 0;
  return this;
}

void SoftbankRegistrationPolicy::clearFailureFlags(SoftbankRegistrationPolicy *this)
{
  SipRegistrationPolicy::clearFailureFlags(this);
  *((_DWORD *)this + 594) = 0;
  *((_WORD *)this + 1190) = 0;
}

BOOL SoftbankRegistrationPolicy::useNextProxy(SoftbankRegistrationPolicy *this)
{
  char *v2;

  if (!(*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 528))(this))
  {
    v2 = (char *)this + 220;
    return *v2 != 0;
  }
  if (*((_DWORD *)this + 594) < *((_DWORD *)this + 460))
  {
    v2 = (char *)this + 2380;
    return *v2 != 0;
  }
  return 1;
}

uint64_t SoftbankRegistrationPolicy::handleRegistrationError(SoftbankRegistrationPolicy *this, const SipResponse *a2)
{
  uint64_t v4;
  _BOOL4 v5;
  _BOOL4 v6;
  time_t v7;
  uint64_t v8;
  uint64_t v10;
  void *__p[2];
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;

  v17 = 0;
  v15 = 0u;
  v16 = 0u;
  v13 = 0u;
  v14 = 0u;
  SipResultDomain::makeResult(a2, (uint64_t)&v13);
  if (!(*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 528))(this))
    goto LABEL_8;
  v4 = *((_QWORD *)this + 279);
  if (!v4)
    goto LABEL_8;
  std::string::basic_string[abi:ne180100]<0>(__p, "REGISTER");
  v5 = SipResponseCodeMap::containsResponseCodeForMethod(v4 + 64, __p, v14, 0);
  v6 = v5;
  if (v12 < 0)
  {
    operator delete(__p[0]);
    if (v6)
      goto LABEL_5;
LABEL_8:
    v7 = SipRegistrationPolicy::handleRegistrationError(this, a2);
    goto LABEL_9;
  }
  if (!v5)
    goto LABEL_8;
LABEL_5:
  *((_BYTE *)this + 2380) = 1;
  if (!*((_BYTE *)this + 220))
  {
    v10 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 48))(this);
    (*(void (**)(SoftbankRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Received fatal error on emergency registration retry, attempting to place emergency call immediately", 100);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    *((_BYTE *)this + 2381) = 1;
    v8 = -1;
    goto LABEL_10;
  }
  v7 = SipRegistrationPolicy::handleGeneralError(this, (const ImsResult *)&v13);
LABEL_9:
  v8 = v7;
LABEL_10:
  ImsResult::~ImsResult((ImsResult *)&v13);
  return v8;
}

void sub_1BEFD73B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a16);
  _Unwind_Resume(a1);
}

time_t SoftbankRegistrationPolicy::authChallengeReceived(SoftbankRegistrationPolicy *this)
{
  uint64_t v2;

  if ((*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 528))(this))
  {
    v2 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SoftbankRegistrationPolicy *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Got auth challenge request, restarting emergency registration timeout", 69);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 29, (unsigned __int8 *)&SipRegistrationPolicy::kEmergencyRegistrationTimer))
    {
      SipTimerContainer::cancelTimer((SoftbankRegistrationPolicy *)((char *)this + 224), (std::string *)&SipRegistrationPolicy::kEmergencyRegistrationTimer);
    }
    SipRegistrationPolicy::startEmergencyRegistrationTimer(this);
  }
  return SipRegistrationPolicy::authChallengeReceived(this);
}

uint64_t SoftbankRegistrationPolicy::generalErrorRetryInterval(SoftbankRegistrationPolicy *this)
{
  if (((*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 528))(this) & 1) != 0)
    return 0;
  else
    return DefaultRegistrationPolicy::generalErrorRetryInterval(this);
}

time_t SoftbankRegistrationPolicy::handleGeneralErrorFromOneProxy(SoftbankRegistrationPolicy *this, const ImsResult *a2)
{
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  _BOOL4 v7;
  _BOOL4 v8;
  ImsOutStream *v9;
  int v10;
  void *__p[2];
  char v13;

  if ((*(unsigned int (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 528))(this))
    v4 = *((_QWORD *)a2 + 1) == (_QWORD)&SipResultDomain::_domain;
  else
    v4 = 0;
  if (!v4)
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  if (!*((_BYTE *)this + 220))
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  v5 = *((_QWORD *)this + 279);
  if (!v5)
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  v6 = v5 + 64;
  std::string::basic_string[abi:ne180100]<0>(__p, "REGISTER");
  v7 = SipResponseCodeMap::containsResponseCodeForMethod(v6, __p, *((_DWORD *)a2 + 4), 0);
  v8 = v7;
  if ((v13 & 0x80000000) == 0)
  {
    if (v7)
      goto LABEL_10;
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
  }
  operator delete(__p[0]);
  if (!v8)
    return SipRegistrationPolicy::handleGeneralErrorFromOneProxy(this, a2);
LABEL_10:
  v9 = (ImsOutStream *)(*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SoftbankRegistrationPolicy *, ImsOutStream *))(*(_QWORD *)this + 16))(this, v9);
  SipRegistrationPolicy::printProxyErrors((uint64_t)this, v9, 2);
  if (!(*(unsigned int (**)(SoftbankRegistrationPolicy *, _QWORD))(*(_QWORD *)this + 416))(this, 0))
    return -1;
  v10 = (*(uint64_t (**)(SoftbankRegistrationPolicy *))(*(_QWORD *)this + 328))(this);
  return SipRegistrationPolicy::scheduleRetry(this, a2, 0, v10);
}

void sub_1BEFD7620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SoftbankRegistrationPolicy::~SoftbankRegistrationPolicy(SoftbankRegistrationPolicy *this)
{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1E78CEC58);
}

{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy(this, (uint64_t *)&off_1E78CEC58);
  JUMPOUT(0x1C3B87100);
}

const char *SoftbankRegistrationPolicy::name(SoftbankRegistrationPolicy *this)
{
  return "Softbank";
}

void `non-virtual thunk to'SoftbankRegistrationPolicy::~SoftbankRegistrationPolicy(SoftbankRegistrationPolicy *this)
{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((SoftbankRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78CEC58);
}

{
  DefaultRegistrationPolicy::~DefaultRegistrationPolicy((SoftbankRegistrationPolicy *)((char *)this - 104), (uint64_t *)&off_1E78CEC58);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiUssdSession::BambiUssdSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v13;

  *(_QWORD *)a1 = off_1E78CF298;
  *(_OWORD *)(a1 + 24) = 0u;
  v3 = a1 + 24;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = *a2;
  v5 = a2[1];
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = *(std::__shared_weak_count **)(a1 + 16);
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    if (v8)
      std::__shared_weak_count::__release_weak(v8);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = 0;
  }
  v13 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v3, &v13);
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 48) = 0;
  return a1;
}

void BambiUssdSession::~BambiUssdSession(BambiUssdSession *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E78CF298;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

{
  BambiUssdSession::~BambiUssdSession(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiUssdSession::initialize(_QWORD *a1, const std::string *a2, const std::string *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  uint64_t v8;
  uint64_t v9;
  const SipUri *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::string **v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v26;
  __int128 v27;
  uint64_t v28;
  std::__shared_weak_count *v29;

  a1[5] = a4;
  v28 = 0;
  v29 = 0;
  v5 = (std::__shared_weak_count *)a1[2];
  if (!v5)
    goto LABEL_19;
  v29 = std::__shared_weak_count::lock(v5);
  if (!v29)
    goto LABEL_19;
  v8 = a1[1];
  v28 = v8;
  if (!v8)
    goto LABEL_19;
  v9 = *(_QWORD *)(v8 + 144);
  v10 = *(const SipUri **)(v9 + 176);
  v11 = *(std::__shared_weak_count **)(v9 + 184);
  v26 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  SipDialogManager::initializeUssdSession(v10, a2, (uint64_t *)&v27);
  v14 = (std::string **)(a1 + 3);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 3), &v27);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v27 + 1);
  if (*((_QWORD *)&v27 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v27 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v26)
  {
    v18 = (unint64_t *)&v26->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v20 = *v14;
  if (*v14)
  {
    v20[25].__r_.__value_.__r.__words[2] = (std::string::size_type)a1;
    std::string::operator=(v20 + 26, a3);
    v21 = 1;
  }
  else
  {
LABEL_19:
    v21 = 0;
  }
  v22 = v29;
  if (v29)
  {
    v23 = (unint64_t *)&v29->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v21;
}

void sub_1BEFD795C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t (***BambiUssdSession::handleUssdData(uint64_t a1, uint64_t a2, uint64_t a3))(_QWORD, uint64_t, uint64_t, uint64_t)
{
  uint64_t v6;
  uint64_t (***result)(_QWORD, uint64_t, uint64_t, uint64_t);
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "ussd");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"BambiUssdSession::handleUssdData: ", 34);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  result = *(uint64_t (****)(_QWORD, uint64_t, uint64_t, uint64_t))(a1 + 40);
  if (result)
    return (uint64_t (***)(_QWORD, uint64_t, uint64_t, uint64_t))(**result)(result, a1, a2, a3);
  return result;
}

void sub_1BEFD7A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t BambiUssdSession::handleUssdError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 40);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, a1, a2, a3);
  return result;
}

void BambiUssdSession::handleSessionInvalidated(BambiUssdSession *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = *((_QWORD *)a1 + 5);
  if (v2)
    (*(void (**)(uint64_t, BambiUssdSession *))(*(_QWORD *)v2 + 16))(v2, a1);
  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (v3)
  {
    v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      v5 = v4;
      v6 = *((_QWORD *)a1 + 1);
      if (v6)
        BambiClient::invalidateUssdSession(*(BambiClient **)(v6 + 136), a1);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFD7B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void XcapDocumentBase::setAttribute(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  std::string::size_type size;
  std::string *p_p;
  int data;
  int v8;
  _BOOL4 v10;
  uint64_t v11;
  int v12;
  int *v13;
  int v14;
  int v15;
  std::string __p;

  XcapNs::stripXcapNs(a2, &__p);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size != 6)
  {
    v10 = 0;
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  data = (int)p_p->__r_.__value_.__l.__data_;
  v8 = WORD2(p_p->__r_.__value_.__r.__words[0]);
  v10 = data == 1769235297 && v8 == 25974;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
LABEL_15:
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_16:
  if (v10)
  {
    v11 = *((unsigned __int8 *)a3 + 23);
    v12 = (char)v11;
    if ((v11 & 0x80u) != 0)
      v11 = a3[1];
    if (v11 == 5)
    {
      if (v12 >= 0)
        v13 = (int *)a3;
      else
        v13 = (int *)*a3;
      v14 = *v13;
      v15 = *((unsigned __int8 *)v13 + 4);
      if (v14 == 1936482662 && v15 == 101)
        *(_BYTE *)(a1 + 80) = 0;
    }
  }
}

uint64_t XcapDocumentBase::constructTree@<X0>(XcapDocumentBase *this@<X0>, uint64_t *a2@<X8>)
{
  char *v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *__p[2];
  char v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  _OWORD v18[4];
  void *v19[2];
  __int128 v20;
  __int128 v21;
  _BYTE v22[144];
  uint64_t v23;

  *a2 = 0;
  a2[1] = 0;
  v4 = (char *)this + 8;
  bambi::XmlTreeItem::makeNode((XcapDocumentBase *)((char *)this + 8), a2);
  v23 = 0;
  v21 = 0u;
  memset(v22, 0, sizeof(v22));
  *(_OWORD *)v19 = 0u;
  v20 = 0u;
  memset(v18, 0, sizeof(v18));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v18);
  if (*((_BYTE *)this + 80))
    v5 = "true";
  else
    v5 = "false";
  if (*((_BYTE *)this + 80))
    v6 = 4;
  else
    v6 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v18, (uint64_t)v5, v6);
  v7 = a2[1];
  v16 = *a2;
  v17 = (std::__shared_weak_count *)v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v18 + 8, __p);
  (*(void (**)(char *, uint64_t *, const char *, void **))(*(_QWORD *)v4 + 48))(v4, &v16, "active", __p);
  if (v15 < 0)
    operator delete(__p[0]);
  v10 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  *(_QWORD *)&v18[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v18 + *(_QWORD *)(*(_QWORD *)&v18[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v18[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v20) < 0)
    operator delete(v19[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v22);
}

void sub_1BEFD7E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  uint64_t v18;

  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::ostringstream::~ostringstream((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'XcapDocumentBase::constructTree@<X0>(XcapDocumentBase *this@<X0>, uint64_t *a2@<X8>)
{
  return XcapDocumentBase::constructTree((XcapDocumentBase *)((char *)this - 8), a2);
}

void XcapDocumentBase::getItemForPath(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t XcapDocumentBase::setItemForPath()
{
  return 0;
}

void SipImpuRank::SipImpuRank(SipImpuRank *this)
{
  *((_OWORD *)this + 1) = 0u;
  *((_OWORD *)this + 2) = 0u;
  *(_OWORD *)this = 0u;
  SipImpuRank::resetNormalRanksToDefault(this);
  SipImpuRank::resetEmergencyRanksToDefault(this);
}

void sub_1BEFD7ED0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;
  void *v4;

  v3 = *(void **)(v1 + 24);
  if (v3)
  {
    *(_QWORD *)(v1 + 32) = v3;
    operator delete(v3);
  }
  v4 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void SipImpuRank::resetNormalRanksToDefault(SipImpuRank *this)
{
  int v2;
  _DWORD *v3;
  _QWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  int v13;

  v2 = 0;
  v3 = *(_DWORD **)this;
  *((_QWORD *)this + 1) = *(_QWORD *)this;
  v4 = (_QWORD *)((char *)this + 16);
  do
  {
    if ((unint64_t)v3 >= *v4)
    {
      v6 = *(_DWORD **)this;
      v7 = ((uint64_t)v3 - *(_QWORD *)this) >> 2;
      v8 = v7 + 1;
      if ((unint64_t)(v7 + 1) >> 62)
        std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
      v9 = *v4 - (_QWORD)v6;
      if (v9 >> 1 > v8)
        v8 = v9 >> 1;
      if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFFCLL)
        v10 = 0x3FFFFFFFFFFFFFFFLL;
      else
        v10 = v8;
      if (v10)
      {
        v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)v4, v10);
        v6 = *(_DWORD **)this;
        v3 = (_DWORD *)*((_QWORD *)this + 1);
      }
      else
      {
        v11 = 0;
      }
      v12 = &v11[4 * v7];
      *(_DWORD *)v12 = v2;
      v5 = v12 + 4;
      while (v3 != v6)
      {
        v13 = *--v3;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      *(_QWORD *)this = v12;
      *((_QWORD *)this + 1) = v5;
      *((_QWORD *)this + 2) = &v11[4 * v10];
      if (v6)
        operator delete(v6);
    }
    else
    {
      *v3 = v2;
      v5 = v3 + 1;
    }
    *((_QWORD *)this + 1) = v5;
    ++v2;
    v3 = v5;
  }
  while (v2 != 12);
}

void SipImpuRank::resetEmergencyRanksToDefault(SipImpuRank *this)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  _DWORD *v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _DWORD *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;

  v4 = *((_QWORD *)this + 5);
  v2 = (char *)this + 40;
  v3 = v4;
  v5 = (_DWORD *)*((_QWORD *)v2 - 2);
  *((_QWORD *)v2 - 1) = v5;
  if ((unint64_t)v5 >= v4)
  {
    v7 = v3 - (_QWORD)v5;
    v8 = v7 >> 1;
    if ((unint64_t)(v7 >> 1) <= 1)
      v8 = 1;
    if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL)
      v9 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v9 = v8;
    v10 = std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)v2, v9);
    v11 = (char *)*((_QWORD *)this + 3);
    v12 = (char *)*((_QWORD *)this + 4);
    v14 = &v10[v13];
    *v10 = 10;
    v6 = v10 + 1;
    while (v12 != v11)
    {
      v15 = *((_DWORD *)v12 - 1);
      v12 -= 4;
      *--v10 = v15;
    }
    *((_QWORD *)this + 3) = v10;
    *((_QWORD *)this + 4) = v6;
    *((_QWORD *)this + 5) = v14;
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v5 = 10;
    v6 = v5 + 1;
  }
  *((_QWORD *)this + 4) = v6;
}

BOOL SipImpuRank::_setRanksFromString(uint64_t a1, int **a2, uint64_t a3)
{
  int *v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  _QWORD *v10;
  int v11;
  int v12;
  int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  int *v24;
  int v25;
  int v26;
  uint64_t v28;
  uint64_t v32;
  int v33;
  uint64_t v35;
  uint64_t v37;
  int v38;
  uint64_t v40;
  unint64_t v41;
  int *v42;
  int *v43;
  int *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  int *v50;
  int v51;
  int *v52;
  void *__p[2];
  char v55;
  void *v56[2];
  char v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v3 = *a2;
  a2[1] = *a2;
  v4 = *(unsigned __int8 *)(a3 + 23);
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a3 + 8);
  if (v4)
  {
    v58 = 0;
    v59 = 0;
    v60 = 0;
    ims::tokenize((std::string *)a3, &v58, 0x2Cu);
    v6 = v58;
    v7 = v59;
    if (v58 != v59)
    {
      while (2)
      {
        v8 = *(unsigned __int8 *)(v6 + 23);
        v9 = (char)v8;
        if ((v8 & 0x80u) != 0)
          v8 = *(_QWORD *)(v6 + 8);
        switch(v8)
        {
          case 5:
            if (v9 >= 0)
              v10 = (_QWORD *)v6;
            else
              v10 = *(_QWORD **)v6;
            v11 = *(_DWORD *)v10;
            v12 = *((unsigned __int8 *)v10 + 4);
            if (v11 != 1936877926 || v12 != 116)
              goto LABEL_84;
            v14 = 10;
            goto LABEL_92;
          case 6:
            if (v9 >= 0)
              v19 = v6;
            else
              v19 = *(_QWORD *)v6;
            if (bswap32(*(_DWORD *)v19) != 1936024431 || bswap32(*(unsigned __int16 *)(v19 + 4)) >> 16 != 28260)
              goto LABEL_84;
            v14 = 9;
            goto LABEL_92;
          case 7:
            if (v9 >= 0)
              v24 = (int *)v6;
            else
              v24 = *(int **)v6;
            v25 = *v24;
            v26 = *(int *)((char *)v24 + 3);
            if (v25 != 980182388 || v26 != 1313099066)
              goto LABEL_84;
            v14 = 3;
            goto LABEL_92;
          case 9:
            if (v9 >= 0)
              v28 = v6;
            else
              v28 = *(_QWORD *)v6;
            if (*(_QWORD *)v28 == 0x7067334049534D49 && *(_BYTE *)(v28 + 8) == 112)
            {
              v14 = 2;
              goto LABEL_92;
            }
            if (*(_QWORD *)v28 == 0x6568746F3A6C6574 && *(_BYTE *)(v28 + 8) == 114)
            {
              v14 = 4;
              goto LABEL_92;
            }
            if (*(_QWORD *)v28 == 0x6568746F404E444DLL && *(_BYTE *)(v28 + 8) == 114)
            {
              v14 = 5;
              goto LABEL_92;
            }
            v32 = *(_QWORD *)v28;
            v33 = *(unsigned __int8 *)(v28 + 8);
            if (v32 == 0x6568746F3A706973 && v33 == 114)
            {
              v14 = 8;
              goto LABEL_92;
            }
            goto LABEL_84;
          case 10:
            if (v9 >= 0)
              v35 = v6;
            else
              v35 = *(_QWORD *)v6;
            if (*(_QWORD *)v35 == 0x616D6F64404E444DLL && *(_WORD *)(v35 + 8) == 28265)
            {
              v14 = 0;
            }
            else
            {
              v37 = *(_QWORD *)v35;
              v38 = *(unsigned __int16 *)(v35 + 8);
              if (v37 != 0x68746F4049534D49 || v38 != 29285)
              {
LABEL_84:
                std::string::basic_string[abi:ne180100]<0>(v56, "ims.util");
                std::string::basic_string[abi:ne180100]<0>(__p, "");
                pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
                v40 = ImsLogger::error(ims::_logger, (uint64_t)v56, (uint64_t)__p);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"skipping unrecognized IMPU type: ", 33);
                *(_BYTE *)(v40 + 17) = 0;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 32))(v40, v6);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v40 + 17) = 0;
                if (v55 < 0)
                  operator delete(__p[0]);
                if (v57 < 0)
                  operator delete(v56[0]);
                goto LABEL_109;
              }
              v14 = 6;
            }
LABEL_92:
            v42 = a2[1];
            v41 = (unint64_t)a2[2];
            if ((unint64_t)v42 >= v41)
            {
              v44 = *a2;
              v45 = v42 - *a2;
              v46 = v45 + 1;
              if ((unint64_t)(v45 + 1) >> 62)
                std::vector<ImpuType>::__throw_length_error[abi:ne180100]();
              v47 = v41 - (_QWORD)v44;
              if (v47 >> 1 > v46)
                v46 = v47 >> 1;
              if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL)
                v48 = 0x3FFFFFFFFFFFFFFFLL;
              else
                v48 = v46;
              if (v48)
              {
                v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<ImpuType>>((uint64_t)(a2 + 2), v48);
                v44 = *a2;
                v42 = a2[1];
              }
              else
              {
                v49 = 0;
              }
              v50 = (int *)&v49[4 * v45];
              *v50 = v14;
              v43 = v50 + 1;
              while (v42 != v44)
              {
                v51 = *--v42;
                *--v50 = v51;
              }
              *a2 = v50;
              a2[1] = v43;
              a2[2] = (int *)&v49[4 * v48];
              if (v44)
                operator delete(v44);
            }
            else
            {
              *v42 = v14;
              v43 = v42 + 1;
            }
            a2[1] = v43;
LABEL_109:
            v6 += 24;
            if (v6 == v7)
              break;
            continue;
          case 11:
            if (v9 >= 0)
              v15 = (uint64_t *)v6;
            else
              v15 = *(uint64_t **)v6;
            v16 = *v15;
            v17 = *(uint64_t *)((char *)v15 + 3);
            if (v16 != 0x6D6F644049534D49 || v17 != 0x6E69616D6F644049)
              goto LABEL_84;
            v14 = 1;
            goto LABEL_92;
          case 16:
            if (v9 >= 0)
              v20 = (uint64_t *)v6;
            else
              v20 = *(uint64_t **)v6;
            v22 = *v20;
            v21 = v20[1];
            if (v22 != 0x6568746F3A706973 || v21 != 0x6E69616D6F644072)
              goto LABEL_84;
            v14 = 7;
            goto LABEL_92;
          default:
            goto LABEL_84;
        }
        break;
      }
    }
    v56[0] = &v58;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)v56);
    v52 = *a2;
    v3 = a2[1];
  }
  else
  {
    v52 = v3;
  }
  return v52 != v3;
}

void sub_1BEFD8598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  __p = &a22;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t mdnMatch(std::string *a1, std::string *a2)
{
  std::string *v3;
  uint64_t v4;
  std::string::size_type size;
  std::string::size_type v6;
  int v7;
  std::string *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  uint64_t result;

  v3 = a1;
  ims::chomp(a1, "+", 1);
  ims::chomp(a2, "+", 1);
  v4 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  if ((v4 & 0x80u) == 0)
    size = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  else
    size = v3->__r_.__value_.__l.__size_;
  v6 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  v7 = (char)v6;
  if ((v6 & 0x80u) != 0)
    v6 = a2->__r_.__value_.__l.__size_;
  if (size != v6)
    return 0;
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = (std::string *)a2->__r_.__value_.__r.__words[0];
  if ((v4 & 0x80) != 0)
    return memcmp(v3->__r_.__value_.__l.__data_, v8, v3->__r_.__value_.__l.__size_) == 0;
  if (!*((_BYTE *)&v3->__r_.__value_.__s + 23))
    return 1;
  v9 = v4 - 1;
  do
  {
    v11 = v3->__r_.__value_.__s.__data_[0];
    v3 = (std::string *)((char *)v3 + 1);
    v10 = v11;
    v13 = v8->__r_.__value_.__s.__data_[0];
    v8 = (std::string *)((char *)v8 + 1);
    v12 = v13;
    v15 = v9-- != 0;
    result = v10 == v12;
  }
  while (v10 == v12 && v15);
  return result;
}

void SipImpuRank::preferredImpu(_QWORD *a1@<X1>, uint64_t *a2@<X2>, unsigned __int8 *a3@<X3>, unsigned __int8 *a4@<X4>, uint64_t a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v7;
  unint64_t v9;
  unsigned int v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  const char *v18;
  std::string::size_type size;
  int v20;
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  int v24;
  unsigned __int8 *v25;
  const void **v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  unsigned __int8 *v32;
  uint64_t v33;
  size_t v34;
  uint64_t v35;
  int v36;
  unsigned __int8 *v37;
  const void **v38;
  int64_t v39;
  size_t v40;
  uint64_t v41;
  int v42;
  unsigned __int8 *v43;
  const void **v44;
  uint64_t v45;
  const void **v46;
  void **v47;
  int64_t v48;
  const void **v49;
  char *v50;
  char *v51;
  const void **__s;
  char *v53;
  int __c;
  std::string *v59;
  unsigned int v60;
  void *__p[2];
  void *v62;
  size_t __n;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  void (**v68)(SipParameterMap *__hidden);
  uint64_t *v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  _QWORD v73[4];
  __int128 v74;
  _QWORD v75[4];
  __int128 v76;
  __int128 v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  void (**v84)(SipParameterMap *__hidden);
  _QWORD *v85;
  _QWORD v86[5];
  uint64_t v87;
  __int128 v88;
  std::string v89;
  std::string v90;
  void **v91;
  int64_t v92;
  uint64_t v93;

  v7 = *a2;
  if (*a2 != a2[1])
  {
    v9 = 0;
    a6->__r_.__value_.__r.__words[0] = 0;
    a6->__r_.__value_.__l.__size_ = 0;
    v59 = a6;
    a6->__r_.__value_.__r.__words[2] = 0;
    v60 = 11;
    while (1)
    {
      v88 = 0u;
      v86[2] = 257;
      v83 = 0u;
      v71 = 0u;
      v65 = 0;
      v66 = 0;
      v67 = 0;
      __n = 0;
      v64 = 0;
      v62 = 0;
      v70 = 0;
      *(_QWORD *)&v71 = 0;
      v68 = &off_1E78B82D8;
      v69 = &v70;
      __p[0] = &off_1E78BFCE8;
      __p[1] = &off_1E78D08F8;
      v72 = 0u;
      memset(v73, 0, sizeof(v73));
      v74 = 0u;
      memset(v75, 0, sizeof(v75));
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v79 = 0u;
      v80 = 0u;
      v81 = 0u;
      v82 = 0u;
      *(_QWORD *)&v83 = 0;
      v86[0] = 0;
      v86[1] = 0;
      v84 = &off_1E78B82D8;
      v85 = v86;
      v87 = 0;
      *(_QWORD *)&v88 = 0;
      v86[3] = &off_1E78B82D8;
      v86[4] = &v87;
      WORD4(v71) = 257;
      WORD4(v88) = 257;
      if ((SipUri::fromString((uint64_t)__p, (std::string *)(v7 + 24 * v9)) & 1) == 0)
      {
        SipUri::~SipUri((SipUri *)__p);
        v10 = 11;
        goto LABEL_35;
      }
      v91 = 0;
      v92 = 0;
      v93 = 0;
      std::string::basic_string[abi:ne180100]<0>(&v91, "3gppnetwork.org");
      if (SipUri::isTelUri((SipUri *)__p))
      {
        if (SHIBYTE(v75[3]) < 0)
          std::string::__init_copy_ctor_external(&v90, (const std::string::value_type *)v75[1], v75[2]);
        else
          v90 = *(std::string *)&v75[1];
        if (*(char *)(a5 + 23) < 0)
          std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
        else
          v89 = *(std::string *)a5;
        v11 = mdnMatch(&v90, &v89);
        if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v89.__r_.__value_.__l.__data_);
        if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v90.__r_.__value_.__l.__data_);
        if (v11)
          v10 = 3;
        else
          v10 = 4;
        goto LABEL_23;
      }
      if (!SipUri::isSipUri((SipUri *)__p))
      {
        v10 = 11;
        goto LABEL_23;
      }
      if (SHIBYTE(v73[3]) < 0)
        std::string::__init_copy_ctor_external(&v90, (const std::string::value_type *)v73[1], v73[2]);
      else
        v90 = *(std::string *)&v73[1];
      if (*(char *)(a5 + 23) < 0)
        std::string::__init_copy_ctor_external(&v89, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
      else
        v89 = *(std::string *)a5;
      v20 = mdnMatch(&v90, &v89);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v89.__r_.__value_.__l.__data_);
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v90.__r_.__value_.__l.__data_);
        if (v20)
        {
LABEL_59:
          v21 = HIBYTE(v64);
          if (v64 >= 0)
            v22 = HIBYTE(v64);
          else
            v22 = __n;
          v23 = a3[23];
          v24 = (char)v23;
          if ((v23 & 0x80u) != 0)
            v23 = *((_QWORD *)a3 + 1);
          if (v22 != v23)
            goto LABEL_91;
          if (v24 >= 0)
            v25 = a3;
          else
            v25 = *(unsigned __int8 **)a3;
          if (v64 < 0)
          {
            if (memcmp(v62, v25, __n))
              goto LABEL_91;
          }
          else if (HIBYTE(v64))
          {
            v26 = (const void **)&v62;
            while (*(unsigned __int8 *)v26 == *v25)
            {
              v26 = (const void **)((char *)v26 + 1);
              ++v25;
              if (!--v21)
                goto LABEL_92;
            }
LABEL_91:
            v10 = 5;
            goto LABEL_23;
          }
LABEL_92:
          v10 = 0;
          goto LABEL_23;
        }
      }
      else if (v20)
      {
        goto LABEL_59;
      }
      v27 = HIBYTE(v73[3]);
      if (v73[3] >= 0)
        v28 = HIBYTE(v73[3]);
      else
        v28 = v73[2];
      v29 = a4[23];
      v30 = (char)v29;
      if ((v29 & 0x80u) != 0)
        v29 = *((_QWORD *)a4 + 1);
      if (v28 == v29)
      {
        if (v30 >= 0)
          v31 = a4;
        else
          v31 = *(unsigned __int8 **)a4;
        if ((v73[3] & 0x8000000000000000) != 0)
        {
          if (!memcmp((const void *)v73[1], v31, v73[2]))
          {
LABEL_109:
            v39 = __n;
            if (v64 >= 0)
              v40 = HIBYTE(v64);
            else
              v40 = __n;
            v41 = a3[23];
            v42 = (char)v41;
            if ((v41 & 0x80u) != 0)
              v41 = *((_QWORD *)a3 + 1);
            if (v40 != v41)
              goto LABEL_124;
            if (v42 >= 0)
              v43 = a3;
            else
              v43 = *(unsigned __int8 **)a3;
            if (v64 < 0)
            {
              __s = (const void **)v62;
              if (!memcmp(v62, v43, __n))
              {
                v10 = 1;
                goto LABEL_23;
              }
            }
            else
            {
              if (!HIBYTE(v64))
              {
                v10 = 1;
                goto LABEL_23;
              }
              v44 = (const void **)&v62;
              v45 = HIBYTE(v64);
              while (*(unsigned __int8 *)v44 == *v43)
              {
                v44 = (const void **)((char *)v44 + 1);
                ++v43;
                v10 = 1;
                if (!--v45)
                  goto LABEL_23;
              }
LABEL_124:
              if (v64 >= 0)
                v46 = (const void **)&v62;
              else
                v46 = (const void **)v62;
              __s = v46;
              v39 = v40;
            }
            if (v93 >= 0)
              v47 = (void **)&v91;
            else
              v47 = v91;
            if (v93 >= 0)
              v48 = HIBYTE(v93);
            else
              v48 = v92;
            if (v48)
            {
              if (v39 >= v48)
              {
                v49 = __s;
                v53 = (char *)__s + v39;
                __c = *(char *)v47;
                do
                {
                  if (v39 - v48 == -1)
                    break;
                  v50 = (char *)memchr(v49, __c, v39 - v48 + 1);
                  if (!v50)
                    break;
                  v51 = v50;
                  if (!memcmp(v50, v47, v48))
                  {
                    if (v51 == v53 || v51 - (char *)__s == -1)
                      break;
                    goto LABEL_151;
                  }
                  v49 = (const void **)(v51 + 1);
                  v39 = v53 - (v51 + 1);
                }
                while (v39 >= v48);
              }
              v10 = 6;
            }
            else
            {
LABEL_151:
              v10 = 2;
            }
            goto LABEL_23;
          }
        }
        else
        {
          if (!HIBYTE(v73[3]))
            goto LABEL_109;
          v32 = (unsigned __int8 *)&v73[1];
          while (*v32 == *v31)
          {
            ++v32;
            ++v31;
            if (!--v27)
              goto LABEL_109;
          }
        }
      }
      v33 = HIBYTE(v64);
      if (v64 >= 0)
        v34 = HIBYTE(v64);
      else
        v34 = __n;
      v35 = a3[23];
      v36 = (char)v35;
      if ((v35 & 0x80u) != 0)
        v35 = *((_QWORD *)a3 + 1);
      if (v34 != v35)
        goto LABEL_138;
      if (v36 >= 0)
        v37 = a3;
      else
        v37 = *(unsigned __int8 **)a3;
      if (v64 < 0)
      {
        if (memcmp(v62, v37, __n))
          goto LABEL_138;
      }
      else if (HIBYTE(v64))
      {
        v38 = (const void **)&v62;
        while (*(unsigned __int8 *)v38 == *v37)
        {
          v38 = (const void **)((char *)v38 + 1);
          ++v37;
          if (!--v33)
            goto LABEL_139;
        }
LABEL_138:
        v10 = 8;
        goto LABEL_23;
      }
LABEL_139:
      v10 = 7;
LABEL_23:
      if (SHIBYTE(v93) < 0)
        operator delete(v91);
      SipUri::~SipUri((SipUri *)__p);
      if (v10 != 11)
      {
        v12 = a1[1] - *a1;
        if (v12)
        {
          v13 = 0;
          v14 = 0;
          v15 = v12 >> 2;
          do
          {
            v16 = *(_DWORD *)(*a1 + 4 * v13);
            if (v16 == v10)
              goto LABEL_36;
            if (v9 == 1)
            {
              if (v16 == 9)
                goto LABEL_36;
            }
            else if (!v9 && v16 == 10)
            {
              goto LABEL_36;
            }
            v13 = ++v14;
          }
          while (v15 > v14);
        }
      }
LABEL_35:
      v14 = 11;
LABEL_36:
      std::string::basic_string[abi:ne180100]<0>(__p, "ims.util");
      std::string::basic_string[abi:ne180100]<0>(&v91, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v91);
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v17 + 32))(v17, *a2 + 24 * v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" (", 2);
      *(_BYTE *)(v17 + 17) = 0;
      v18 = "undefined";
      if (v10 <= 0xA)
        v18 = off_1E78CF330[v10];
      LoggableString::LoggableString((LoggableString *)&v90, v18);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v17 + 40))(v17, &v90);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)") has rank ", 11);
      *(_BYTE *)(v17 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v90.__r_.__value_.__l.__data_);
      if (SHIBYTE(v93) < 0)
        operator delete(v91);
      if (SHIBYTE(v62) < 0)
        operator delete(__p[0]);
      size = HIBYTE(v59->__r_.__value_.__r.__words[2]);
      if ((size & 0x80u) != 0)
        size = v59->__r_.__value_.__l.__size_;
      if (!size || v14 < v60)
      {
        std::string::operator=(v59, (const std::string *)(*a2 + 24 * v9));
        v60 = v14;
      }
      ++v9;
      v7 = *a2;
      if (v9 >= 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3))
        return;
    }
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
}

void sub_1BEFD8ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  uint64_t v27;

  if (*(char *)(v27 - 121) < 0)
    operator delete(*(void **)(v27 - 144));
  if (*(char *)(v27 - 97) < 0)
    operator delete(*(void **)(v27 - 120));
  SipUri::~SipUri((SipUri *)&__p);
  if (*(char *)(a20 + 23) < 0)
    operator delete(*(void **)a20);
  _Unwind_Resume(a1);
}

void SipImpuRank::logRanks(uint64_t a1, uint64_t a2, uint64_t *a3, int a4)
{
  uint64_t v6;
  unint64_t v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  void *__p[2];
  char v15;

  v6 = *a3;
  if (a3[1] != *a3)
  {
    v8 = 0;
    while (!v8)
    {
      if (a4)
        goto LABEL_7;
LABEL_10:
      v12 = *(int *)(v6 + 4 * v8);
      v13 = "undefined";
      if (v12 <= 0xA)
        v13 = off_1E78CF330[v12];
      LoggableString::LoggableString((LoggableString *)__p, v13);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a2 + 40))(a2, __p);
      if (v15 < 0)
        operator delete(__p[0]);
      ++v8;
      v6 = *a3;
      if (v8 >= (a3[1] - *a3) >> 2)
        goto LABEL_15;
    }
    if (a4)
    {
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(a2 + 17) = 0;
LABEL_7:
      std::ostream::operator<<();
      *(_BYTE *)(a2 + 17) = 0;
      v9 = *(_QWORD **)(a2 + 8);
      v10 = ": ";
      v11 = 2;
    }
    else
    {
      v9 = *(_QWORD **)(a2 + 8);
      v10 = ",";
      v11 = 1;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    *(_BYTE *)(a2 + 17) = 0;
    v6 = *a3;
    goto LABEL_10;
  }
LABEL_15:
  if ((a4 & 1) != 0)
  {
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(a2 + 17) = 0;
  }
}

void sub_1BEFD9108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

char *std::vector<std::shared_ptr<IpAddress>>::__init_with_size[abi:ne180100]<std::shared_ptr<IpAddress>*,std::shared_ptr<IpAddress>*>(char *result, _QWORD *a2, _QWORD *a3, unint64_t a4)
{
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::shared_ptr<BambiConferenceParticipant>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      *v7 = *a2;
      v8 = a2[1];
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v7 += 2;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BEFD91B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__move_range(std::vector<std::string> *this, std::vector<std::string>::pointer __from_s, std::vector<std::string>::pointer __from_e, std::vector<std::string>::pointer __to)
{
  std::vector<std::string>::pointer end;
  char *v7;
  std::vector<std::string>::pointer v8;
  unint64_t v9;
  __int128 v10;
  char v11;

  end = this->__end_;
  v7 = (char *)__from_s + (char *)end - (char *)__to;
  v8 = end;
  if (v7 < (char *)__from_e)
  {
    v9 = (unint64_t)v7;
    v8 = this->__end_;
    do
    {
      v10 = *(_OWORD *)v9;
      v8->__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 16);
      *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
      ++v8;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = 0;
      v9 += 24;
    }
    while (v9 < (unint64_t)__from_e);
  }
  this->__end_ = v8;
  std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>((uint64_t)&v11, (uint64_t)__from_s, (uint64_t)v7, (uint64_t)end);
}

std::vector<std::string>::pointer std::vector<std::string>::__swap_out_circular_buffer(std::vector<std::string> *this, std::__split_buffer<std::string> *__v, std::vector<std::string>::pointer __p)
{
  std::string *begin;
  std::__compressed_pair<std::string *> *p_end_cap;
  std::string *v8;
  std::string *v9;
  std::string *end;
  std::string *value;

  begin = __v->__begin_;
  p_end_cap = &this->__end_cap_;
  std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>,std::reverse_iterator<std::string*>>((uint64_t)&this->__end_cap_, (uint64_t)__p, (uint64_t)__p, (uint64_t)this->__begin_, (uint64_t)this->__begin_, (uint64_t)begin, (uint64_t)begin);
  __v->__begin_ = v8;
  __v->__end_ = (std::__split_buffer<std::string>::pointer)std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (__int128 *)__p, (__int128 *)this->__end_, (uint64_t)__v->__end_);
  v9 = this->__begin_;
  this->__begin_ = __v->__begin_;
  __v->__begin_ = v9;
  end = this->__end_;
  this->__end_ = __v->__end_;
  __v->__end_ = end;
  value = this->__end_cap_.__value_;
  this->__end_cap_.__value_ = __v->__end_cap_.__value_;
  __v->__end_cap_.__value_ = value;
  __v->__first_ = __v->__begin_;
  return begin;
}

uint64_t std::__move_backward_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<std::string *,std::string *,std::string *>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  __int128 v8;

  if (a3 != a2)
  {
    v6 = a3;
    do
    {
      v7 = a4 - 24;
      if (*(char *)(a4 - 1) < 0)
        operator delete(*(void **)v7);
      v8 = *(_OWORD *)(v6 - 24);
      *(_QWORD *)(v7 + 16) = *(_QWORD *)(v6 - 8);
      *(_OWORD *)v7 = v8;
      *(_BYTE *)(v6 - 1) = 0;
      *(_BYTE *)(v6 - 24) = 0;
      a4 = v7;
      v6 -= 24;
    }
    while (v6 != a2);
  }
  return a3;
}

uint64_t std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  uint64_t v4;
  __int128 v5;
  _QWORD v7[4];
  uint64_t v8;
  uint64_t v9;

  v4 = a4;
  v9 = a4;
  v8 = a4;
  v7[0] = a1;
  v7[1] = &v8;
  v7[2] = &v9;
  if (a2 != a3)
  {
    do
    {
      v5 = *a2;
      *(_QWORD *)(v4 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v4 = v5;
      v4 += 24;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    while (a2 != a3);
    v9 = v4;
  }
  v7[3] = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v7);
  return v4;
}

void XcapCallerIDManager::fetchOIP(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[5];
  _OWORD v6[2];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v6);
  XcapNodeSelector::appendNode((uint64_t **)v6, (const std::string *)&XcapDocumentOIP::kName, (unsigned __int8 *)&XcapNs::kNsSs);
  v4 = operator new();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19XcapCallerIDManager8fetchOIPEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v5[3] = &unk_1E78CF3B0;
  v5[4] = a2;
  XcapRequest::XcapRequest(v4, 3, (XcapRequest *)v6, v5);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v4);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v6);
}

void sub_1BEFD94B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3B87100](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager8fetchOIPEU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v6;
  bambi::XmlParserItem *v7;
  uint64_t v8;
  _BYTE v9[72];
  _OWORD v10[5];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  XcapDocumentOIP::XcapDocumentOIP((XcapDocumentOIP *)v10);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v9, (const ImsResult *)a2);
  (*(void (**)(uint64_t, _BYTE *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v10 + 1);
}

void sub_1BEFD9598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  bambi::XmlTreeItem::~XmlTreeItem((void **)va1);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::setOIP(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t **v6;
  uint64_t v7;
  _QWORD v8[5];
  std::string v9;
  std::string __p;
  _OWORD v11[5];
  uint64_t v12;
  _BYTE v13[32];
  uint64_t v14;

  v14 = 0;
  memset(v13, 0, sizeof(v13));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v13);
  XcapNodeSelector::appendNode(v6, (const std::string *)&XcapDocumentOIP::kName, (unsigned __int8 *)&XcapNs::kNsSs);
  v12 = 0;
  memset(v11, 0, sizeof(v11));
  XcapDocumentOIP::XcapDocumentOIP((XcapDocumentOIP *)v11);
  LOBYTE(v12) = a2;
  memset(&__p, 0, sizeof(__p));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v11 + 8), 1, 0, &__p);
  v7 = operator new();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v9 = __p;
  v8[0] = MEMORY[0x1E0C809B0];
  v8[1] = 0x40000000;
  v8[2] = ___ZN19XcapCallerIDManager6setOIPEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v8[3] = &unk_1E78CF3D8;
  v8[4] = a3;
  XcapRequest::XcapRequest(v7, 3, (XcapRequest *)v13, &v9, v8);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v7);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v11 + 1);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v13);
}

void sub_1BEFD973C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void **v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x1C3B87100](v27, 0x10B2C409DA9FE99);
  if (a26 < 0)
    operator delete(__p);
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager6setOIPEbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const ImsResult *a2)
{
  uint64_t v2;
  _BYTE v3[72];

  v2 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BEFD97FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::fetchOIR(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD v5[5];
  _OWORD v6[2];
  uint64_t v7;

  v7 = 0;
  memset(v6, 0, sizeof(v6));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v6);
  XcapNodeSelector::appendNode((uint64_t **)v6, (const std::string *)&XcapDocumentOIR::kName, (unsigned __int8 *)&XcapNs::kNsSs);
  v4 = operator new();
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN19XcapCallerIDManager8fetchOIREU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v5[3] = &unk_1E78CF400;
  v5[4] = a2;
  XcapRequest::XcapRequest(v4, 4, (XcapRequest *)v6, v5);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v4);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v6);
}

void sub_1BEFD98E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3B87100](v7, 0x10B2C409DA9FE99);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)va);
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager8fetchOIREU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, uint64_t a2, bambi::XmlParser *a3)
{
  uint64_t v6;
  bambi::XmlParserItem *v7;
  uint64_t v8;
  _BYTE v9[72];
  _OWORD v10[5];
  uint64_t v11;

  v11 = 0;
  memset(v10, 0, sizeof(v10));
  XcapDocumentOIR::XcapDocumentOIR((XcapDocumentOIR *)v10);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)) & 1) == 0)bambi::XmlParser::parseXml(a3, (uint64_t)v10, v6, v7);
  v8 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v9, (const ImsResult *)a2);
  (*(void (**)(uint64_t, _BYTE *, _OWORD *))(v8 + 16))(v8, v9, v10);
  ImsResult::~ImsResult((ImsResult *)v9);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v10 + 1);
}

void sub_1BEFD99C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  bambi::XmlTreeItem::~XmlTreeItem((void **)va1);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::setOIR(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t **v8;
  uint64_t v9;
  _QWORD v10[5];
  std::string v11;
  std::string __p;
  _OWORD v13[5];
  uint64_t v14;
  _BYTE v15[32];
  uint64_t v16;

  v16 = 0;
  memset(v15, 0, sizeof(v15));
  XcapNodeSelector::XcapNodeSelector((XcapNodeSelector *)v15);
  XcapNodeSelector::appendNode(v8, (const std::string *)&XcapDocumentOIR::kName, (unsigned __int8 *)&XcapNs::kNsSs);
  v14 = 0;
  memset(v13, 0, sizeof(v13));
  XcapDocumentOIR::XcapDocumentOIR((XcapDocumentOIR *)v13);
  LOBYTE(v14) = a2;
  BYTE1(v14) = a3;
  memset(&__p, 0, sizeof(__p));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v13 + 8), 1, 0, &__p);
  v9 = operator new();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v11 = __p;
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 0x40000000;
  v10[2] = ___ZN19XcapCallerIDManager6setOIREbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke;
  v10[3] = &unk_1E78CF428;
  v10[4] = a4;
  XcapRequest::XcapRequest(v9, 4, (XcapRequest *)v15, &v11, v10);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  (***(void (****)(_QWORD, uint64_t))(a1 + 368))(*(_QWORD *)(a1 + 368), v9);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  bambi::XmlTreeItem::~XmlTreeItem((void **)v13 + 1);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)v15);
}

void sub_1BEFD9B74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  void **v26;
  uint64_t v27;
  uint64_t v28;

  MEMORY[0x1C3B87100](v27, 0x10B2C409DA9FE99);
  if (a26 < 0)
    operator delete(__p);
  bambi::XmlTreeItem::~XmlTreeItem(v26);
  XcapNodeSelector::~XcapNodeSelector((XcapNodeSelector *)(v28 - 96));
  _Unwind_Resume(a1);
}

void ___ZN19XcapCallerIDManager6setOIREbbU13block_pointerFv9ImsResultPK16XcapDocumentBaseE_block_invoke(uint64_t a1, const ImsResult *a2)
{
  uint64_t v2;
  _BYTE v3[72];

  v2 = *(_QWORD *)(a1 + 32);
  ImsResult::ImsResult((ImsResult *)v3, a2);
  (*(void (**)(uint64_t, _BYTE *, _QWORD))(v2 + 16))(v2, v3, 0);
  ImsResult::~ImsResult((ImsResult *)v3);
}

void sub_1BEFD9C34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapCallerIDManager::~XcapCallerIDManager(void **this)
{
  *this = &off_1E78C1018;
  XcapConfig::~XcapConfig(this + 1);
}

{
  *this = &off_1E78C1018;
  XcapConfig::~XcapConfig(this + 1);
  JUMPOUT(0x1C3B87100);
}

void SipSecurityAssociationPair::~SipSecurityAssociationPair(SipSecurityAssociationPair *this)
{
  *(_QWORD *)this = &off_1E78CF470;
  if (*((_DWORD *)this + 2) && !*((_BYTE *)this + 81))
    (*(void (**)(_QWORD))(**((_QWORD **)this + 6) + 40))(*((_QWORD *)this + 6));
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 2);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 4);
  *((_QWORD *)this + 1) = 0;
  if (*((char *)this + 79) < 0)
  {
    **((_BYTE **)this + 7) = 0;
    *((_QWORD *)this + 8) = 0;
    if (*((char *)this + 79) < 0)
      operator delete(*((void **)this + 7));
  }
  else
  {
    *((_BYTE *)this + 56) = 0;
    *((_BYTE *)this + 79) = 0;
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 16);
}

{
  SipSecurityAssociationPair::~SipSecurityAssociationPair(this);
  JUMPOUT(0x1C3B87100);
}

void SipSecurityAssociationPair::setLocalAddress(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 32))(&v6);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 16, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void SipSecurityAssociationPair::setRemoteAddress(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 32))(&v6);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 32, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

double SipSecurityAssociationPair::createTemporary@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  int v9;
  char *v10;
  double result;

  if (*(_BYTE *)(a1 + 81))
  {
    if (*(_BYTE *)(a1 + 80))
      v9 = 64236;
    else
      v9 = 52911;
    *(_DWORD *)(a1 + 8) = v9;
    if (*(char *)(a1 + 79) < 0)
    {
      *(_QWORD *)(a1 + 64) = 4;
      v10 = *(char **)(a1 + 56);
    }
    else
    {
      v10 = (char *)(a1 + 56);
      *(_BYTE *)(a1 + 79) = 4;
    }
    strcpy(v10, "fake");
    result = 0.0;
    *(_OWORD *)(a7 + 24) = 0u;
    *(_OWORD *)(a7 + 40) = 0u;
    *(_OWORD *)(a7 + 56) = 0u;
    *(_QWORD *)a7 = &off_1E78B7238;
    *(_QWORD *)(a7 + 8) = &_bambiDomain;
    *(_DWORD *)(a7 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(a7 + 64) = 0;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 48)
                                                                                                  + 24))(*(_QWORD *)(a1 + 48), a2, a3, a4, a1 + 8, a1 + 56, a5, a6);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a7 + 8) + 24))(*(_QWORD *)(a7 + 8), *(unsigned int *)(a7 + 16)) & 1) == 0)
    {
      SipSecurityAssociationPair::setLocalAddress(a1, a2);
      SipSecurityAssociationPair::setRemoteAddress(a1, a3);
    }
  }
  return result;
}

void sub_1BEFD9FA0(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void SipSecurityAssociationPair::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const ImsResult *v5;
  const ImsResult *v9;
  const ImsResult *v10;
  void (**v11)(ImsResult *__hidden);
  uint64_t *v12;
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;

  if (*(_BYTE *)(a1 + 81))
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v11 = &off_1E78B7238;
    v12 = &_bambiDomain;
    v13 = 1073741826;
    v5 = (const ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)&v11, "update called on a fake SA pair");
    ImsResult::ImsResult((ImsResult *)a4, v5);
LABEL_3:
    ImsResult::~ImsResult((ImsResult *)&v11);
    return;
  }
  if (!*(_DWORD *)(a1 + 8))
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v11 = &off_1E78B7238;
    v12 = &_bambiDomain;
    v13 = 1073741826;
    v9 = (const ImsResult *)ImsResult::operator<<<char [42]>((uint64_t)&v11, "update called on an uninitialized SA pair");
    ImsResult::ImsResult((ImsResult *)a4, v9);
    goto LABEL_3;
  }
  if (!*(_DWORD *)(a1 + 12))
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v11 = &off_1E78B7238;
    v12 = &_bambiDomain;
    v13 = 1073741826;
    v10 = (const ImsResult *)ImsResult::operator<<<char [43]>((uint64_t)&v11, "update called without setting outbound SPI");
    ImsResult::ImsResult((ImsResult *)a4, v10);
    goto LABEL_3;
  }
  *(_QWORD *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 48) + 32))(*(_QWORD *)(a1 + 48));
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a4 + 8) + 24))(*(_QWORD *)(a4 + 8), *(unsigned int *)(a4 + 16)) & 1) == 0)
  {
    SipSecurityAssociationPair::setLocalAddress(a1, a2);
    SipSecurityAssociationPair::setRemoteAddress(a1, a3);
  }
}

void sub_1BEFDA158(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void SipSecurityAssociationPair::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SAPair (Fix This)");
}

uint64_t SipPrackHandler::SipPrackHandler(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.prack");
  ImsLogContainer::ImsLogContainer(a1, &__p, (const std::string *)(*a2 + 32));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 104) = &unk_1E78CF528;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_1E78CF4B8;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 128));
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_DWORD *)(a1 + 336) = 1065353216;
  *(_QWORD *)(a1 + 344) = a1 + 344;
  *(_QWORD *)(a1 + 352) = a1 + 344;
  *(_QWORD *)(a1 + 360) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(std::__shared_weak_count **)(a1 + 280);
    *(_QWORD *)(a1 + 272) = v6;
    *(_QWORD *)(a1 + 280) = v7;
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 272) = v6;
    *(_QWORD *)(a1 + 280) = 0;
  }
  v11 = *a3;
  v12 = a3[1];
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = *(std::__shared_weak_count **)(a1 + 296);
  *(_QWORD *)(a1 + 288) = v11;
  *(_QWORD *)(a1 + 296) = v12;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)(a1 + 232) = a1 + 104;
  v18 = *a2;
  std::string::operator=((std::string *)(a1 + 176), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(v18 + 32));
  *(_BYTE *)(a1 + 368) = 0;
  return a1;
}

void sub_1BEFDA31C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  std::__shared_weak_count *v17;

  v17 = *(std::__shared_weak_count **)(v15 + 120);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  ImsLogContainer::~ImsLogContainer((void **)v15);
  _Unwind_Resume(a1);
}

void SipPrackHandler::~SipPrackHandler(SipPrackHandler *this)
{
  char *v2;
  _QWORD *i;
  _QWORD *v4;
  _QWORD *j;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = &off_1E78CF4B8;
  *((_QWORD *)this + 13) = &unk_1E78CF528;
  v2 = (char *)this + 304;
  for (i = (_QWORD *)*((_QWORD *)this + 40); i; i = (_QWORD *)*i)
  {
    v4 = (_QWORD *)i[3];
    if (v4)
    {
      if (*v4)
        (*(void (**)(_QWORD))(*(_QWORD *)*v4 + 8))(*v4);
      MEMORY[0x1C3B87100](v4, 0x1020C403A5D3213);
    }
  }
  for (j = (_QWORD *)*((_QWORD *)this + 44); j != (_QWORD *)((char *)this + 344); j = (_QWORD *)j[1])
  {
    v6 = j[2];
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 43);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 43);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 288);
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  SipTimerContainer::~SipTimerContainer((SipPrackHandler *)((char *)this + 128));
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  SipPrackHandler::~SipPrackHandler(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipPrackHandler::~SipPrackHandler(SipPrackHandler *this)
{
  SipPrackHandler::~SipPrackHandler((SipPrackHandler *)((char *)this - 104));
}

{
  SipPrackHandler::~SipPrackHandler((SipPrackHandler *)((char *)this - 104));
  JUMPOUT(0x1C3B87100);
}

void SipPrackHandler::loggableName(SipPrackHandler *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v4;
  std::string __p;
  std::string v6;
  void *v7;
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v9, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)"PrackHandler", 12);
  BYTE1(v10) = 0;
  if (*((_QWORD *)this + 36))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)" ", 1);
    BYTE1(v10) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)&v6, (const std::string *)(*((_QWORD *)this + 36) + 320));
    (*(void (**)(__int128 *, std::string *))(v9 + 56))(&v9, &v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)" ", 1);
    BYTE1(v10) = 0;
    v4 = (const std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*((_QWORD *)this + 36) + 288) + 112))(*(_QWORD *)(*((_QWORD *)this + 36) + 288));
    LoggableString::LoggableString(&__p, v4);
    (*(void (**)(__int128 *, std::string *))(v9 + 40))(&v9, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)" ", 1);
    BYTE1(v10) = 0;
    SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*((_QWORD *)this + 36) + 288));
    std::ostream::operator<<();
    BYTE1(v10) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v8 < 0)
      operator delete(v7);
    if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v6.__r_.__value_.__l.__data_);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v10 + 1) + 8, &v6);
  LoggableString::LoggableString(a2, &v6);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  *(_QWORD *)&v9 = &off_1E78D7A10;
  if ((_BYTE)v10)
  {
    if (*((_QWORD *)&v9 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 8))(*((_QWORD *)&v9 + 1));
  }
}

void sub_1BEFDA6AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  *(_QWORD *)(v21 - 64) = &off_1E78D7A10;
  if (*(_BYTE *)(v21 - 48))
  {
    v23 = *(_QWORD *)(v21 - 56);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipPrackHandler::loggableName(SipPrackHandler *this@<X0>, std::string *a2@<X8>)
{
  SipPrackHandler::loggableName((SipPrackHandler *)((char *)this - 104), a2);
}

void SipPrackHandler::handlePrack(SipPrackHandler *a1, uint64_t a2, _QWORD *a3, SipDialogFork **a4, uint64_t *a5)
{
  unsigned int *v10;
  unsigned int *v11;
  _QWORD *v12;
  uint64_t *v13;
  _QWORD *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  SipOfferAnswer *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  ImsResult *v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  int8x8_t v41;
  uint64_t v42;
  unint64_t v43;
  uint8x8_t v44;
  uint64_t *v45;
  uint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t *v50;
  unint64_t v51;
  std::string v52;
  _QWORD v53[5];
  _QWORD v54[9];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  uint64_t v59;
  uint64_t v60[2];
  std::string __p;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  void *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  char v72;
  char v73;

  v10 = (unsigned int *)SipMessage::header<SipRAckHeader>(a2);
  if (!v10)
  {
    v33 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"PRACK request missing RAck header", 33);
    *(_BYTE *)(v33 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    v34 = (_QWORD *)*a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Missing RAck header");
    SipServerTransaction::sendResponse(v34, 400, &__p);
    v32 = (ImsResult *)&v73;
LABEL_33:
    ImsResult::~ImsResult(v32);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    return;
  }
  v11 = v10;
  v12 = (_QWORD *)((char *)a1 + 304);
  v13 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>((_QWORD *)a1 + 38, v10[15]);
  if (!v13 || (v14 = (_QWORD *)v13[3]) == 0)
  {
    v30 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"no provisional response found with RSeq ", 40);
    *(_BYTE *)(v30 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    v31 = (_QWORD *)*a3;
    std::string::basic_string[abi:ne180100]<0>(&__p, "Invalid RSeq");
    SipServerTransaction::sendResponse(v31, 400, &__p);
    v32 = (ImsResult *)&v72;
    goto LABEL_33;
  }
  v70 = 0;
  v71 = 0;
  v15 = (std::__shared_weak_count *)*((_QWORD *)a1 + 35);
  if (!v15)
  {
    v16 = 0;
    goto LABEL_36;
  }
  v16 = std::__shared_weak_count::lock(v15);
  v71 = v16;
  if (!v16 || (v17 = *((_QWORD *)a1 + 34), (v70 = v17) == 0))
  {
LABEL_36:
    v35 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"Unknown session. Can't handle Prack", 35);
    *(_BYTE *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v35 + 17) = 0;
    if (!v16)
      return;
    goto LABEL_85;
  }
  v66 = 0u;
  v65 = 0u;
  v18 = *(_QWORD *)(v17 + 240);
  if (v18)
  {
    v18 = *(_QWORD *)(v18 + 208);
    if (v18)
      v18 = *(_QWORD *)(v18 + 136);
  }
  v62 = 0uLL;
  v63 = 0uLL;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  LODWORD(v65) = 1065353216;
  *(_QWORD *)&v66 = v18 + 288;
  v64 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78E40E8;
  v68 = 0;
  v69 = 0;
  v67 = 0;
  DWORD2(v66) = 200;
  if (*a5)
  {
    v19 = (std::__shared_weak_count *)a5[1];
    v60[0] = *a5;
    v60[1] = (uint64_t)v19;
    if (v19)
    {
      p_shared_owners = (unint64_t *)&v19->__shared_owners_;
      do
        v21 = __ldxr(p_shared_owners);
      while (__stxr(v21 + 1, p_shared_owners));
    }
    SipMessage::setSdp((uint64_t)&__p, v60);
    if (v19)
    {
      v22 = (unint64_t *)&v19->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
        std::__shared_weak_count::__release_weak(v19);
      }
    }
    v59 = 0;
    v57 = 0u;
    v58 = 0u;
    v55 = 0u;
    v56 = 0u;
    v24 = (SipOfferAnswer *)*((_QWORD *)*a4 + 82);
    v25 = (std::__shared_weak_count *)*((_QWORD *)*a4 + 83);
    v52.__r_.__value_.__r.__words[0] = (std::string::size_type)v24;
    v52.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    SipOfferAnswer::updateWithOutgoingMessage(v24, (uint64_t)&__p, (std::string *)(*a3 + 320), (uint64_t)&v55);
    if (v25)
    {
      v28 = (unint64_t *)&v25->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v55 + 1) + 24))(*((_QWORD *)&v55 + 1), v56))
    {
      if (*((_QWORD *)&v65 + 1))
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 8))(*((_QWORD *)&v65 + 1));
        *((_QWORD *)&v65 + 1) = 0;
      }
      SipResponse::setStatusFromImsResult((SipResponse *)&__p, (const ImsResult *)&v55);
      (*(void (**)(_QWORD *__return_ptr, _QWORD, std::string *, uint64_t))(*(_QWORD *)*a3 + 168))(v54, *a3, &__p, 1);
      ImsResult::~ImsResult((ImsResult *)v54);
      ImsResult::~ImsResult((ImsResult *)&v55);
      goto LABEL_82;
    }
    SipPreconditions::addPreconditionsToOutgoingResponse(v70 + 1400, (uint64_t)*a4 + 152, a2, (SipMessage *)&__p);
    ImsResult::~ImsResult((ImsResult *)&v55);
  }
  (*(void (**)(_QWORD *__return_ptr, _QWORD, std::string *, uint64_t))(*(_QWORD *)*a3 + 168))(v53, *a3, &__p, 1);
  ImsResult::~ImsResult((ImsResult *)v53);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v36 = ims::_logger;
  v37 = ImsLogger::facilityWithName(ims::_logger, (std::string *)((char *)a1 + 8), 0);
  v38 = v36 + 96;
  if (v37)
    v38 = v37;
  if (*(int *)(v38 + 80) >= 7)
  {
    v55 = 0uLL;
    *(_QWORD *)&v56 = 0;
    (*(void (**)(unsigned int *, __int128 *))(*(_QWORD *)v11 + 40))(v11, &v55);
    v39 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"Received PRACK for response ", 28);
    *(_BYTE *)(v39 + 17) = 0;
    LoggableString::LoggableString(&v52, (const std::string *)&v55);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v39 + 40))(v39, &v52);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v52.__r_.__value_.__l.__data_);
    if (SBYTE7(v56) < 0)
      operator delete((void *)v55);
  }
  SipPrackHandler::timerIdForRseq((SipPrackHandler *)&v55);
  SipTimerContainer::cancelTimer((SipPrackHandler *)((char *)a1 + 128), (std::string *)&v55);
  if (SBYTE7(v56) < 0)
    operator delete((void *)v55);
  if (*v14)
    (*(void (**)(_QWORD))(*(_QWORD *)*v14 + 8))(*v14);
  MEMORY[0x1C3B87100](v14, 0x1020C403A5D3213);
  v40 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>((_QWORD *)a1 + 38, v11[15]);
  if (v40)
  {
    v41 = *(int8x8_t *)((char *)a1 + 312);
    v42 = *v40;
    v43 = v40[1];
    v44 = (uint8x8_t)vcnt_s8(v41);
    v44.i16[0] = vaddlv_u8(v44);
    if (v44.u32[0] > 1uLL)
    {
      if (v43 >= *(_QWORD *)&v41)
        v43 %= *(_QWORD *)&v41;
    }
    else
    {
      v43 &= *(_QWORD *)&v41 - 1;
    }
    v45 = *(uint64_t **)(*v12 + 8 * v43);
    do
    {
      v46 = v45;
      v45 = (uint64_t *)*v45;
    }
    while (v45 != v40);
    if (v46 == (uint64_t *)((char *)a1 + 320))
      goto LABEL_68;
    v47 = v46[1];
    if (v44.u32[0] > 1uLL)
    {
      if (v47 >= *(_QWORD *)&v41)
        v47 %= *(_QWORD *)&v41;
    }
    else
    {
      v47 &= *(_QWORD *)&v41 - 1;
    }
    if (v47 != v43)
    {
LABEL_68:
      if (v42)
      {
        v48 = *(_QWORD *)(v42 + 8);
        if (v44.u32[0] > 1uLL)
        {
          v49 = *(_QWORD *)(v42 + 8);
          if (v48 >= *(_QWORD *)&v41)
            v49 = v48 % *(_QWORD *)&v41;
        }
        else
        {
          v49 = v48 & (*(_QWORD *)&v41 - 1);
        }
        if (v49 == v43)
          goto LABEL_72;
      }
      *(_QWORD *)(*v12 + 8 * v43) = 0;
      v42 = *v40;
    }
    if (!v42)
    {
LABEL_78:
      *v46 = v42;
      *v40 = 0;
      --*((_QWORD *)a1 + 41);
      operator delete(v40);
      goto LABEL_79;
    }
    v48 = *(_QWORD *)(v42 + 8);
LABEL_72:
    if (v44.u32[0] > 1uLL)
    {
      if (v48 >= *(_QWORD *)&v41)
        v48 %= *(_QWORD *)&v41;
    }
    else
    {
      v48 &= *(_QWORD *)&v41 - 1;
    }
    if (v48 != v43)
    {
      *(_QWORD *)(*v12 + 8 * v48) = v46;
      v42 = *v40;
    }
    goto LABEL_78;
  }
LABEL_79:
  if ((SipPrackHandler::hasOutstandingSdp(a1) & 1) == 0)
    SipDialogFork::outstandingResponseSdpPracked(*a4);
  SipPrackHandler::sendNextQueuedResponse(a1);
LABEL_82:
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78E40E8;
  if (SHIBYTE(v69) < 0)
    operator delete(v67);
  SipMessage::~SipMessage((SipMessage *)&__p);
  v16 = v71;
  if (v71)
  {
LABEL_85:
    v50 = (unint64_t *)&v16->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
}

void sub_1BEFDAE80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (a39 < 0)
    operator delete(__p);
  SipResponse::~SipResponse(&a48);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v53 - 256);
  _Unwind_Resume(a1);
}

uint64_t SipPrackHandler::timerIdForRseq(SipPrackHandler *this)
{
  _OWORD v3[4];
  void *__p[2];
  __int128 v5;
  __int128 v6;
  _OWORD v7[9];
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  memset(v7, 0, sizeof(v7));
  *(_OWORD *)__p = 0u;
  v5 = 0u;
  memset(v3, 0, sizeof(v3));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v3, (uint64_t)"rseq ", 5);
  std::ostream::operator<<();
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v3 + 8, this);
  *(_QWORD *)&v3[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v3 + *(_QWORD *)(*(_QWORD *)&v3[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v3[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v5) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v7);
}

void sub_1BEFDB01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipPrackHandler::hasOutstandingSdp(SipPrackHandler *this)
{
  uint64_t **v2;
  char *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t i;
  char *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;

  v2 = (uint64_t **)*((_QWORD *)this + 40);
  if (v2)
  {
    while (1)
    {
      v3 = SipMessage::body<SipSdpBody>(*v2[3]);
      if (v3)
      {
        v5 = *((_QWORD *)v3 + 1);
        v4 = (std::__shared_weak_count *)*((_QWORD *)v3 + 2);
        if (v4)
        {
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v7 = __ldxr(p_shared_owners);
          while (__stxr(v7 + 1, p_shared_owners));
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        if (v5)
          return 1;
      }
      v2 = (uint64_t **)*v2;
      if (!v2)
        goto LABEL_11;
    }
  }
  else
  {
LABEL_11:
    v9 = (char *)this + 344;
    for (i = *((_QWORD *)this + 44); (char *)i != v9; i = *(_QWORD *)(i + 8))
    {
      v11 = SipMessage::body<SipSdpBody>(*(_QWORD *)(i + 16));
      if (v11)
      {
        v13 = *((_QWORD *)v11 + 1);
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 + 2);
        if (v12)
        {
          v14 = (unint64_t *)&v12->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          do
            v16 = __ldaxr(v14);
          while (__stlxr(v16 - 1, v14));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        if (v13)
          return 1;
      }
    }
    return 0;
  }
}

SipPrackHandler *SipPrackHandler::sendNextQueuedResponse(SipPrackHandler *this)
{
  uint64_t v1;
  SipPrackHandler *v2;
  uint64_t *v3;
  const SipResponse *v4;
  uint64_t v5;
  uint64_t v6;

  v1 = *((_QWORD *)this + 45);
  if (v1)
  {
    v2 = this;
    v3 = (uint64_t *)*((_QWORD *)this + 44);
    v4 = (const SipResponse *)v3[2];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = v3[1];
    *(_QWORD *)v3[1] = v5;
    *((_QWORD *)v2 + 45) = v1 - 1;
    operator delete(v3);
    v6 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)v2 + 64))(v2);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"sending queued ", 15);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" response", 9);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    SipPrackHandler::sendResponse(v2, v4);
    return (SipPrackHandler *)(*(uint64_t (**)(const SipResponse *))(*(_QWORD *)v4 + 8))(v4);
  }
  return this;
}

uint64_t SipPrackHandler::sendResponse(SipPrackHandler *this, const SipResponse *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  int v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  _DWORD *v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  void **v34;
  _QWORD *v35;
  unint64_t v36;
  float v37;
  float v38;
  _BOOL8 v39;
  unint64_t v40;
  unint64_t v41;
  int8x8_t prime;
  void *v43;
  void *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t v47;
  uint8x8_t v48;
  unint64_t v49;
  uint8x8_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  void *v59;
  unint64_t *p_shared_weak_owners;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  void **v65;
  void **p_p;
  uint64_t v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  void *v72;
  uint64_t v73[2];
  uint64_t v74;
  std::__shared_weak_count *v75;
  void *v76[2];
  char v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  void *__p;
  std::__shared_weak_count *v81;
  unsigned int v82;
  char v83;
  void **v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  v4 = SipPrackHandler::responseRequiresPrack(this, *(const SipRequest **)(*((_QWORD *)this + 36) + 288), a2);
  v5 = (*(uint64_t (**)(const SipResponse *))(*(_QWORD *)a2 + 32))(a2);
  if (v4)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "100rel");
    SipMessage::addRequiredOption((SipMessage *)v5, &__p);
    if (v83 < 0)
      operator delete(__p);
    v6 = *(_DWORD *)(*((_QWORD *)this + 36) + 568);
    *((_DWORD *)SipMessage::header<SipRSeqHeader>((SipMessage *)v5, 1) + 15) = v6;
  }
  v74 = 0;
  v75 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v7 && (v75 = std::__shared_weak_count::lock(v7)) != 0 && (v8 = *((_QWORD *)this + 34), (v74 = v8) != 0))
  {
    v9 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    v73[0] = *((_QWORD *)this + 36);
    v73[1] = (uint64_t)v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    SipSession::sendQueuedResponseInTransaction(v8, v5, v73, (uint64_t)&__p);
    v12 = ((uint64_t (*)(std::__shared_weak_count *, _QWORD))v81->__get_deleter)(v81, v82);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (!v9)
      goto LABEL_15;
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (!v12)
      {
LABEL_16:
        if (!v4)
        {
          if (v5)
            (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
          if ((*((_DWORD *)a2 + 22) - 200) >= 0xFFFFFF9C)
            SipPrackHandler::sendNextQueuedResponse(this);
          goto LABEL_138;
        }
        ++*(_DWORD *)(*((_QWORD *)this + 36) + 568);
        v78 = 0;
        v79 = 0;
        v15 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
        if (v15
          && (v79 = std::__shared_weak_count::lock(v15)) != 0
          && (v16 = (std::__shared_weak_count *)*((_QWORD *)this + 34), (v78 = v16) != 0))
        {
          SipSessionInterface::stack(v16, &__p);
          v17 = SipUserAgent::config(*((SipUserAgent **)__p + 18));
          v18 = SipTimers::timerValue((SipTimers *)(v17 + 512), (const SipTimer *)&SipTimers::kTimerT1, 0);
          v19 = v81;
          if (v81)
          {
            v20 = (unint64_t *)&v81->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
        else
        {
          v18 = 400;
        }
        v27 = operator new();
        *(_QWORD *)v27 = v5;
        *(_DWORD *)(v27 + 8) = v18;
        v28 = SipMessage::header<SipRSeqHeader>(v5);
        if (v28)
          v29 = v28[15];
        else
          v29 = 0;
        v30 = v29;
        v31 = *((_QWORD *)this + 39);
        if (v31)
        {
          v32 = (uint8x8_t)vcnt_s8((int8x8_t)v31);
          v32.i16[0] = vaddlv_u8(v32);
          if (v32.u32[0] > 1uLL)
          {
            v33 = v29;
            if (v31 <= v29)
              v33 = v29 % v31;
          }
          else
          {
            v33 = ((_DWORD)v31 - 1) & v29;
          }
          v34 = *(void ***)(*((_QWORD *)this + 38) + 8 * v33);
          if (v34)
          {
            v35 = *v34;
            if (*v34)
            {
              do
              {
                v36 = v35[1];
                if (v36 == v29)
                {
                  if (*((_DWORD *)v35 + 4) == v29)
                    goto LABEL_117;
                }
                else
                {
                  if (v32.u32[0] > 1uLL)
                  {
                    if (v36 >= v31)
                      v36 %= v31;
                  }
                  else
                  {
                    v36 &= v31 - 1;
                  }
                  if (v36 != v33)
                    break;
                }
                v35 = (_QWORD *)*v35;
              }
              while (v35);
            }
          }
        }
        else
        {
          v33 = 0;
        }
        v35 = operator new(0x20uLL);
        *v35 = 0;
        v35[1] = v29;
        *((_DWORD *)v35 + 4) = v29;
        v35[3] = 0;
        v37 = (float)(unint64_t)(*((_QWORD *)this + 41) + 1);
        v38 = *((float *)this + 84);
        if (v31 && (float)(v38 * (float)v31) >= v37)
        {
          v30 = v33;
          goto LABEL_107;
        }
        v39 = 1;
        if (v31 >= 3)
          v39 = (v31 & (v31 - 1)) != 0;
        v40 = v39 | (2 * v31);
        v41 = vcvtps_u32_f32(v37 / v38);
        if (v40 <= v41)
          prime = (int8x8_t)v41;
        else
          prime = (int8x8_t)v40;
        if (*(_QWORD *)&prime == 1)
        {
          prime = (int8x8_t)2;
        }
        else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
        {
          prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
          v31 = *((_QWORD *)this + 39);
        }
        if (*(_QWORD *)&prime <= v31)
        {
          if (*(_QWORD *)&prime >= v31)
            goto LABEL_103;
          v49 = vcvtps_u32_f32((float)*((unint64_t *)this + 41) / *((float *)this + 84));
          if (v31 < 3 || (v50 = (uint8x8_t)vcnt_s8((int8x8_t)v31), v50.i16[0] = vaddlv_u8(v50), v50.u32[0] > 1uLL))
          {
            v49 = std::__next_prime(v49);
          }
          else
          {
            v51 = 1 << -(char)__clz(v49 - 1);
            if (v49 >= 2)
              v49 = v51;
          }
          if (*(_QWORD *)&prime <= v49)
            prime = (int8x8_t)v49;
          if (*(_QWORD *)&prime >= v31)
          {
            v31 = *((_QWORD *)this + 39);
            goto LABEL_103;
          }
          if (!*(_QWORD *)&prime)
          {
            v72 = (void *)*((_QWORD *)this + 38);
            *((_QWORD *)this + 38) = 0;
            if (v72)
              operator delete(v72);
            v31 = 0;
            *((_QWORD *)this + 39) = 0;
            goto LABEL_103;
          }
        }
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v43 = operator new(8 * *(_QWORD *)&prime);
        v44 = (void *)*((_QWORD *)this + 38);
        *((_QWORD *)this + 38) = v43;
        if (v44)
          operator delete(v44);
        v45 = 0;
        *((int8x8_t *)this + 39) = prime;
        do
          *(_QWORD *)(*((_QWORD *)this + 38) + 8 * v45++) = 0;
        while (*(_QWORD *)&prime != v45);
        v46 = (_QWORD *)*((_QWORD *)this + 40);
        if (v46)
        {
          v47 = v46[1];
          v48 = (uint8x8_t)vcnt_s8(prime);
          v48.i16[0] = vaddlv_u8(v48);
          if (v48.u32[0] > 1uLL)
          {
            if (v47 >= *(_QWORD *)&prime)
              v47 %= *(_QWORD *)&prime;
          }
          else
          {
            v47 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(*((_QWORD *)this + 38) + 8 * v47) = (char *)this + 320;
          v52 = (_QWORD *)*v46;
          if (*v46)
          {
            do
            {
              v53 = v52[1];
              if (v48.u32[0] > 1uLL)
              {
                if (v53 >= *(_QWORD *)&prime)
                  v53 %= *(_QWORD *)&prime;
              }
              else
              {
                v53 &= *(_QWORD *)&prime - 1;
              }
              if (v53 != v47)
              {
                v54 = *((_QWORD *)this + 38);
                if (!*(_QWORD *)(v54 + 8 * v53))
                {
                  *(_QWORD *)(v54 + 8 * v53) = v46;
                  goto LABEL_99;
                }
                *v46 = *v52;
                *v52 = **(_QWORD **)(*((_QWORD *)this + 38) + 8 * v53);
                **(_QWORD **)(*((_QWORD *)this + 38) + 8 * v53) = v52;
                v52 = v46;
              }
              v53 = v47;
LABEL_99:
              v46 = v52;
              v52 = (_QWORD *)*v52;
              v47 = v53;
            }
            while (v52);
          }
        }
        v31 = (unint64_t)prime;
LABEL_103:
        if ((v31 & (v31 - 1)) != 0)
        {
          if (v31 <= v30)
            v30 %= v31;
        }
        else
        {
          v30 = ((_DWORD)v31 - 1) & v30;
        }
LABEL_107:
        v55 = *((_QWORD *)this + 38);
        v56 = *(_QWORD **)(v55 + 8 * v30);
        if (v56)
        {
          *v35 = *v56;
        }
        else
        {
          *v35 = *((_QWORD *)this + 40);
          *((_QWORD *)this + 40) = v35;
          *(_QWORD *)(v55 + 8 * v30) = (char *)this + 320;
          if (!*v35)
          {
LABEL_116:
            ++*((_QWORD *)this + 41);
LABEL_117:
            v35[3] = v27;
            v59 = (void *)*((_QWORD *)this + 14);
            v58 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
            if (v58)
            {
              p_shared_weak_owners = (unint64_t *)&v58->__shared_weak_owners_;
              do
                v61 = __ldxr(p_shared_weak_owners);
              while (__stxr(v61 + 1, p_shared_weak_owners));
              do
                v62 = __ldxr(p_shared_weak_owners);
              while (__stxr(v62 + 1, p_shared_weak_owners));
            }
            SipMessage::header<SipRSeqHeader>(v5);
            SipPrackHandler::timerIdForRseq((SipPrackHandler *)v76);
            if (v58)
            {
              v63 = (unint64_t *)&v58->__shared_weak_owners_;
              do
                v64 = __ldxr(v63);
              while (__stxr(v64 + 1, v63));
            }
            v84 = 0;
            v65 = (void **)operator new(0x20uLL);
            *v65 = &off_1E78CF5B0;
            v65[1] = this;
            v65[2] = v59;
            v65[3] = v58;
            v84 = v65;
            SipTimerContainer::startTimer((_QWORD *)this + 16, (uint64_t)v76, (uint64_t)&__p, *(_DWORD *)(v27 + 8), 0);
            p_p = v84;
            if (v84 == &__p)
            {
              v67 = 4;
              p_p = &__p;
            }
            else
            {
              if (!v84)
              {
LABEL_129:
                if (v77 < 0)
                  operator delete(v76[0]);
                v68 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 64))(this);
                (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v68);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v68 + 8), (uint64_t)"added ", 6);
                *(_BYTE *)(v68 + 17) = 0;
                std::ostream::operator<<();
                *(_BYTE *)(v68 + 17) = 0;
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v68 + 8), (uint64_t)" response with rseq ", 20);
                *(_BYTE *)(v68 + 17) = 0;
                SipMessage::header<SipRSeqHeader>(v5);
                std::ostream::operator<<();
                *(_BYTE *)(v68 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v68 + 17) = 0;
                if (v58)
                {
                  std::__shared_weak_count::__release_weak(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
                v69 = v79;
                if (v79)
                {
                  v70 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v71 = __ldaxr(v70);
                  while (__stlxr(v71 - 1, v70));
                  if (!v71)
                  {
                    ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
                    std::__shared_weak_count::__release_weak(v69);
                  }
                }
LABEL_138:
                v5 = 1;
                goto LABEL_28;
              }
              v67 = 5;
            }
            (*((void (**)(void))*p_p + v67))();
            goto LABEL_129;
          }
          v57 = *(_QWORD *)(*v35 + 8);
          if ((v31 & (v31 - 1)) != 0)
          {
            if (v57 >= v31)
              v57 %= v31;
          }
          else
          {
            v57 &= v31 - 1;
          }
          v56 = (_QWORD *)(*((_QWORD *)this + 38) + 8 * v57);
        }
        *v56 = v35;
        goto LABEL_116;
      }
    }
    else
    {
LABEL_15:
      if (!v12)
        goto LABEL_16;
    }
  }
  else
  {
    v22 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Unknown session. Can't send Response from PrackHandler", 54);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
  }
  if (v5)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    v5 = 0;
  }
LABEL_28:
  v23 = v75;
  if (v75)
  {
    v24 = (unint64_t *)&v75->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return v5;
}

void sub_1BEFDBB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t SipPrackHandler::responseRequiresPrack(SipPrackHandler *this, const SipRequest *a2, const SipResponse *a3)
{
  int v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  SipUserAgent *v12;
  _BOOL4 v13;
  uint64_t v14;
  _BOOL4 v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  void *__p[2];
  char v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v6 = *((_DWORD *)a3 + 22);
  v21 = 0;
  v22 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v7)
  {
    v8 = 0;
LABEL_8:
    v13 = 0;
    goto LABEL_11;
  }
  v8 = std::__shared_weak_count::lock(v7);
  v22 = v8;
  if (!v8)
    goto LABEL_8;
  v9 = *((_QWORD *)this + 34);
  v21 = v9;
  if (!v9)
    goto LABEL_8;
  v10 = *(_QWORD *)(v9 + 240);
  if (v10 && (v11 = *(_QWORD *)(v10 + 208)) != 0)
    v12 = *(SipUserAgent **)(v11 + 136);
  else
    v12 = 0;
  v13 = *(_BYTE *)(SipUserAgent::config(v12) + 40) != 0;
LABEL_11:
  if ((*((_DWORD *)a3 + 22) - 101) > 0x62)
  {
    v14 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "100rel");
    if (SipMessage::requiresOption((uint64_t)a2, __p))
    {
      v14 = 1;
    }
    else
    {
      v15 = (v6 - 180) < 0xA && v13;
      if (*((_QWORD *)a3 + 9))
        v14 = 1;
      else
        v14 = v15;
    }
    if (v20 < 0)
      operator delete(__p[0]);
  }
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return v14;
}

void sub_1BEFDBD50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t SipPrackHandler::queueResponse(SipPrackHandler *this, const SipResponse *a2)
{
  uint64_t v2;
  unsigned int v5;
  uint64_t v6;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  int v10;
  std::__shared_weak_count *size;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  std::__shared_weak_count *v22;
  std::string v23;
  std::string __p;

  if (*((_BYTE *)this + 368))
    return 0;
  if (!*((_QWORD *)this + 41))
  {
    v6 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"no outstanding responses. Sending ", 34);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(_QWORD *)a2 + 48))(&v23, a2);
    LoggableString::LoggableString(&__p, &v23);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" immediately.", 13);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  v5 = *((_DWORD *)a2 + 22);
  if (v5 >= 0x12C)
  {
    v6 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Sending error response ", 23);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(_QWORD *)a2 + 48))(&v23, a2);
    LoggableString::LoggableString(&__p, &v23);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" immediately.", 13);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_7:
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    return SipPrackHandler::sendResponse(this, a2);
  }
  if (v5 - 200 <= 0x63 && (SipPrackHandler::hasOutstandingSdp(this) & 1) == 0)
  {
    v6 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"no outstanding SDP. Sending ", 28);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(_QWORD *)a2 + 48))(&v23, a2);
    LoggableString::LoggableString(&__p, &v23);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" immediately.", 13);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_7;
  }
  v22 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (!v8)
    goto LABEL_26;
  v22 = std::__shared_weak_count::lock(v8);
  if (!v22)
    goto LABEL_26;
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
  if (!v9)
    goto LABEL_26;
  SipSessionInterface::stack(v9, &__p);
  v10 = *(unsigned __int8 *)(SipUserAgent::config(*(SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144)) + 41);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v12 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (!v10
    && (*((_DWORD *)a2 + 22) - 100) <= 0x63
    && (SipPrackHandler::responseRequiresPrack(this, *(const SipRequest **)(*((_QWORD *)this + 36) + 288), a2) & 1) == 0)
  {
    v20 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v20);
    (*(void (**)(std::string *__return_ptr, const SipResponse *))(*(_QWORD *)a2 + 48))(&v23, a2);
    LoggableString::LoggableString(&__p, &v23);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 40))(v20, &__p);
    v21 = (_BYTE *)ImsOutStream::operator<<(v20, "is not reliable. Sending immediately.");
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v21[17] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
    v2 = SipPrackHandler::sendResponse(this, a2);
  }
  else
  {
LABEL_26:
    v14 = (*(uint64_t (**)(SipPrackHandler *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPrackHandler *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"queuing ", 8);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" response: ", 11);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" outstanding reliable responses", 31);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    v15 = (*(uint64_t (**)(const SipResponse *))(*(_QWORD *)a2 + 32))(a2);
    v16 = operator new(0x18uLL);
    v16[1] = (char *)this + 344;
    v16[2] = v15;
    v17 = *((_QWORD *)this + 43);
    *v16 = v17;
    *(_QWORD *)(v17 + 8) = v16;
    *((_QWORD *)this + 43) = v16;
    ++*((_QWORD *)this + 45);
    v2 = 1;
  }
  if (v22)
  {
    p_shared_owners = (unint64_t *)&v22->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  return v2;
}

void sub_1BEFDC2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipPrackHandler::handleTimer(uint64_t a1, std::string *this)
{
  unsigned int v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  std::string *v17;
  _QWORD v18[9];
  _BYTE v19[24];
  _BYTE *v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  if (std::string::compare(this, 0, 5uLL, "rseq "))
    goto LABEL_2;
  if ((SHIBYTE(this->__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v17 = this;
    if (HIBYTE(this->__r_.__value_.__r.__words[2]) >= 6u)
      goto LABEL_25;
LABEL_2:
    v4 = 0;
    goto LABEL_3;
  }
  if (this->__r_.__value_.__l.__size_ < 6)
    goto LABEL_2;
  v17 = (std::string *)this->__r_.__value_.__r.__words[0];
LABEL_25:
  v4 = strtoul(&v17->__r_.__value_.__s.__data_[5], 0, 10);
LABEL_3:
  v6 = *(_QWORD *)(a1 + 112);
  v5 = *(std::__shared_weak_count **)(a1 + 120);
  if (v5)
  {
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>((_QWORD *)(a1 + 304), v4);
  if (v10)
  {
    v11 = v10[3];
    if (v11)
    {
      (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 288) + 168))(v18, *(_QWORD *)(a1 + 288), *(_QWORD *)v11, 0);
      ImsResult::~ImsResult((ImsResult *)v18);
      *(_DWORD *)(v11 + 8) *= 2;
      if (v5)
      {
        v12 = (unint64_t *)&v5->__shared_weak_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v20 = 0;
      v14 = operator new(0x20uLL);
      *v14 = &off_1E78CF630;
      v14[1] = a1;
      v14[2] = v6;
      v14[3] = v5;
      v20 = v14;
      SipTimerContainer::startTimer((_QWORD *)(a1 + 128), (uint64_t)this, (uint64_t)v19, *(_DWORD *)(v11 + 8), 0);
      v15 = v20;
      if (v20 == v19)
      {
        v16 = 4;
        v15 = v19;
      }
      else
      {
        if (!v20)
          goto LABEL_20;
        v16 = 5;
      }
      (*(void (**)(void))(*v15 + 8 * v16))();
    }
  }
LABEL_20:
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEFDC50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char *a21)
{
  std::__shared_weak_count *v21;
  char *v22;
  char *v24;
  uint64_t v25;

  v24 = a21;
  if (a21 == v22)
  {
    v25 = 4;
    v24 = &a18;
  }
  else
  {
    if (!a21)
      goto LABEL_6;
    v25 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
LABEL_6:
  if (v21)
  {
    std::__shared_weak_count::__release_weak(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

void SipPrackHandler::logPrefix(SipPrackHandler *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 80))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEFDC5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,SipSentResponse *>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,SipSentResponse *>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,SipSentResponse *>>>::find<unsigned int>(_QWORD *a1, unsigned int a2)
{
  unint64_t v2;
  uint8x8_t v3;
  unint64_t v4;
  uint64_t **v5;
  uint64_t *result;
  unint64_t v7;

  v2 = a1[1];
  if (!v2)
    return 0;
  v3 = (uint8x8_t)vcnt_s8((int8x8_t)v2);
  v3.i16[0] = vaddlv_u8(v3);
  if (v3.u32[0] > 1uLL)
  {
    v4 = a2;
    if (v2 <= a2)
      v4 = a2 % v2;
  }
  else
  {
    v4 = ((_DWORD)v2 - 1) & a2;
  }
  v5 = *(uint64_t ***)(*a1 + 8 * v4);
  if (!v5)
    return 0;
  for (result = *v5; result; result = (uint64_t *)*result)
  {
    v7 = result[1];
    if (v7 == a2)
    {
      if (*((_DWORD *)result + 4) == a2)
        return result;
    }
    else
    {
      if (v3.u32[0] > 1uLL)
      {
        if (v7 >= v2)
          v7 %= v2;
      }
      else
      {
        v7 &= v2 - 1;
      }
      if (v7 != v4)
        return 0;
    }
  }
  return result;
}

_QWORD *std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CF5B0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CF5B0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CF5B0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CF5B0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFDC898(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipPrackHandler::addSentResponse(SipResponse *)::$_0,std::allocator<SipPrackHandler::addSentResponse(SipResponse *)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78CF630;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78CF630;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78CF630;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78CF630;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFDCB00(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipPrackHandler::handleTimer(std::string const&)::$_0,std::allocator<SipPrackHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

void ims::toString<BambiCallParticipant::ParticipantState>(int *a1@<X0>, std::string *a2@<X8>)
{
  char *v2;

  if (*a1 < 12)
  {
    v2 = (char *)&stateNames + 24 * *a1;
    if (v2[23] < 0)
    {
      std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v2;
      a2->__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(a2, "Unknown");
  }
}

uint64_t BambiCallParticipant::BambiCallParticipant(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string __p;

  *(_QWORD *)a1 = off_1E78CF918;
  *(_QWORD *)(a1 + 8) = off_1E78EF010;
  *(_QWORD *)(a1 + 16) = &off_1E78B7B60;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call.participant");
  ImsLogContainer::ImsLogContainer(a1 + 24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_1E78CF6B0;
  *(_QWORD *)(a1 + 8) = &unk_1E78CF730;
  *(_QWORD *)(a1 + 16) = &unk_1E78CF868;
  *(_QWORD *)(a1 + 24) = &unk_1E78CF898;
  *(_QWORD *)(a1 + 144) = *a2;
  v6 = a2[1];
  *(_QWORD *)(a1 + 152) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v16 = 0;
  v17 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "Participant");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)(a1 + 160), &v16, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = *a3;
  v12 = a3[1];
  *(_QWORD *)(a1 + 224) = v12;
  if (v12)
  {
    v13 = (unint64_t *)(v12 + 16);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_QWORD *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 0;
  return a1;
}

void sub_1BEFDCD48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;
  void **v18;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  v20 = *(std::__shared_weak_count **)(v17 + 152);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  v21 = *(std::__shared_weak_count **)(v17 + 136);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  ImsLogContainer::~ImsLogContainer(v18);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::initialize(BambiCallParticipant *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v19 = 0;
  v20 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2)
  {
    v20 = std::__shared_weak_count::lock(v2);
    if (v20)
    {
      v3 = *((_QWORD *)this + 18);
      v19 = v3;
      if (v3)
      {
        *((_QWORD *)this + 26) = *(_QWORD *)(v3 + 400);
        *(_QWORD *)(v3 + 400) = (char *)this + 8;
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v17, (_QWORD *)this + 16);
        std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v3 + 1472), &v17);
        v4 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v6 = __ldaxr(p_shared_owners);
          while (__stlxr(v6 - 1, p_shared_owners));
          if (!v6)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
        v15 = v19;
        v16 = v20;
        if (v20)
        {
          v7 = (unint64_t *)&v20->__shared_owners_;
          do
            v8 = __ldxr(v7);
          while (__stxr(v8 + 1, v7));
        }
        SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 160, &v15);
        v9 = v16;
        if (v16)
        {
          v10 = (unint64_t *)&v16->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
      }
    }
  }
  v12 = v20;
  if (v20)
  {
    v13 = (unint64_t *)&v20->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEFDCEF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::~BambiCallParticipant(BambiCallParticipant *this)
{
  char *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  *(_QWORD *)this = &off_1E78CF6B0;
  *((_QWORD *)this + 1) = &unk_1E78CF730;
  *((_QWORD *)this + 2) = &unk_1E78CF868;
  *((_QWORD *)this + 3) = &unk_1E78CF898;
  v2 = (char *)this + 24;
  v3 = ImsLogContainer::debugStream((BambiCallParticipant *)((char *)this + 24));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"~BambiCallParticipant", 21);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (*((_QWORD *)this + 29))
    *((_QWORD *)this + 29) = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = *((_QWORD *)this + 18);
      if (v6)
      {
        v19 = 0;
        v20 = 0;
        std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v6 + 1472), &v19);
        v7 = v20;
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v9 = __ldaxr(p_shared_owners);
          while (__stlxr(v9 - 1, p_shared_owners));
          if (!v9)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        *(_QWORD *)(v6 + 400) = *((_QWORD *)this + 26);
        v10 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
        *((_QWORD *)this + 18) = 0;
        *((_QWORD *)this + 19) = 0;
        if (v10)
          std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v21 = 0;
  v22 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 160, &v21);
  v11 = v22;
  if (v22)
  {
    v12 = (unint64_t *)&v22->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v5)
  {
    v14 = (unint64_t *)&v5->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
  if (v16)
    std::__shared_weak_count::__release_weak(v16);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)this + 160);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  *((_QWORD *)this + 3) = off_1E78CFE68;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
}

{
  BambiCallParticipant::~BambiCallParticipant(this);
  JUMPOUT(0x1C3B87100);
}

void sub_1BEFDD12C(void *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'BambiCallParticipant::~BambiCallParticipant(BambiCallParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 8));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 16));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 24));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void BambiCallParticipant::setState(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *size;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  std::string __p;
  std::string v21;
  int v22;
  int v23;

  v23 = a2;
  v3 = *(unsigned int *)(a1 + 240);
  if ((_DWORD)v3 != (_DWORD)a2)
  {
    v22 = *(_DWORD *)(a1 + 240);
    v8 = a1 + 24;
    v7 = *(_QWORD *)(a1 + 24);
    *(_DWORD *)(a1 + 240) = a2;
    v9 = (*(uint64_t (**)(uint64_t))(v7 + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 16))(v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"state change from ", 18);
    *(_BYTE *)(v9 + 17) = 0;
    ims::toString<BambiCallParticipant::ParticipantState>(&v22, &v21);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v9 + 17) = 0;
    ims::toString<BambiCallParticipant::ParticipantState>(&v23, &__p);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = 0uLL;
    v10 = *(std::__shared_weak_count **)(a1 + 224);
    if (v10)
    {
      v21.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v10);
      if (v21.__r_.__value_.__l.__size_)
      {
        v11 = *(_QWORD *)(a1 + 216);
        v21.__r_.__value_.__r.__words[0] = v11;
        if (a3)
        {
          if (v11)
          {
            std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v18, (_QWORD *)(a1 + 128));
            (*(void (**)(std::string::size_type, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, &v18, v3, a2);
            v12 = v19;
            if (v19)
            {
              p_shared_owners = (unint64_t *)&v19->__shared_owners_;
              do
                v14 = __ldaxr(p_shared_owners);
              while (__stlxr(v14 - 1, p_shared_owners));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
          }
        }
      }
    }
    size = (std::__shared_weak_count *)v21.__r_.__value_.__l.__size_;
    if (v21.__r_.__value_.__l.__size_)
    {
      v16 = (unint64_t *)(v21.__r_.__value_.__l.__size_ + 8);
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
}

void sub_1BEFDD3EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::prepare(BambiCallParticipant *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  BambiCall *v8;
  int v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v15;
  _QWORD v16[9];

  memset(&v16[2], 0, 56);
  v16[0] = &off_1E78B7238;
  v16[1] = &_bambiDomain;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v5)
  {
    v7 = 0;
    goto LABEL_7;
  }
  v7 = std::__shared_weak_count::lock(v5);
  if (!v7 || (v8 = (BambiCall *)*((_QWORD *)this + 18)) == 0)
  {
LABEL_7:
    v11 = *((_QWORD *)this + 3);
    v10 = (char *)this + 24;
    v12 = (*(uint64_t (**)(char *))(v11 + 56))(v10);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"Can not start un-initialized participant ", 41);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    if (!v7)
      goto LABEL_21;
    goto LABEL_17;
  }
  if (*((_DWORD *)this + 60) == 6)
  {
    v9 = 1073741826;
  }
  else
  {
    if ((*((_DWORD *)v8 + 110) & 0xFFFFFFFE) == 2 || a2 == 0)
    {
      BambiCallParticipant::setState((uint64_t)this, 2, 1);
    }
    else
    {
      BambiCallParticipant::setState((uint64_t)this, 1, 1);
      BambiCall::performLocalHold(v8);
    }
    v9 = 0;
  }
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v9;
LABEL_17:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_21:
  ImsResult::~ImsResult((ImsResult *)v16);
}

void sub_1BEFDD60C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  _Unwind_Resume(a1);
}

void BambiCallParticipant::refer(uint64_t a1@<X0>, uint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  uint64_t v38[2];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  _BYTE v46[72];
  uint64_t v47;
  std::__shared_weak_count *v48;
  void (**v49)(ImsResult *__hidden);
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;

  v51 = 0;
  v52 = 0;
  v56 = 0;
  v57 = 0;
  v54 = 0;
  v55 = 0;
  v49 = &off_1E78B7238;
  v50 = &_bambiDomain;
  v53 = 0;
  v47 = 0;
  v48 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  if (!v6)
  {
    v10 = 0;
    goto LABEL_25;
  }
  v9 = std::__shared_weak_count::lock(v6);
  v10 = v9;
  v48 = v9;
  if (!v9 || (v11 = *(_QWORD *)(a1 + 144), v47 = v11, (v12 = *a2) == 0) || !v11)
  {
LABEL_25:
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 1073741825;
    if (!v10)
      goto LABEL_30;
    goto LABEL_26;
  }
  v13 = *(_DWORD *)(a1 + 240);
  if (v13 != 2)
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    if (v13 <= 2)
      v28 = 1073741826;
    else
      v28 = 0;
    *(_DWORD *)(a4 + 16) = v28;
LABEL_26:
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
    goto LABEL_30;
  }
  if (a3)
  {
    v14 = a2[1];
    v44 = *a2;
    v45 = (std::__shared_weak_count *)v14;
    if (v14)
    {
      v15 = (unint64_t *)(v14 + 8);
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v41, (_QWORD *)(a1 + 128));
    v17 = (std::__shared_weak_count *)v42;
    v43[0] = v41;
    v43[1] = v42;
    v41 = 0;
    v42 = 0;
    BambiCall::refer(v11, (uint64_t)&v44, (const std::string *)"INVITE", v43, (SipEventPackage **)(a1 + 232), (uint64_t)v46);
    ImsResult::operator=((uint64_t)&v49, (uint64_t)v46);
    ImsResult::~ImsResult((ImsResult *)v46);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    v20 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v21 = (unint64_t *)(v42 + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v45;
    if (v45)
    {
      v24 = (unint64_t *)&v45->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      goto LABEL_50;
    }
  }
  else
  {
    v39 = v11;
    v40 = v9;
    v29 = (unint64_t *)&v9->__shared_owners_;
    do
      v30 = __ldxr(v29);
    while (__stxr(v30 + 1, v29));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v41, (_QWORD *)(a1 + 128));
    v31 = (std::__shared_weak_count *)v42;
    v38[0] = v41;
    v38[1] = v42;
    v41 = 0;
    v42 = 0;
    BambiCall::refer(v12, (uint64_t)&v39, (const std::string *)"INVITE", v38, (SipEventPackage **)(a1 + 232), (uint64_t)v46);
    ImsResult::operator=((uint64_t)&v49, (uint64_t)v46);
    ImsResult::~ImsResult((ImsResult *)v46);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 - 1, v32));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
    }
    v34 = (std::__shared_weak_count *)v42;
    if (v42)
    {
      v35 = (unint64_t *)(v42 + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    v23 = v40;
    if (v40)
    {
      v37 = (unint64_t *)&v40->__shared_owners_;
      do
        v25 = __ldaxr(v37);
      while (__stlxr(v25 - 1, v37));
LABEL_50:
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v50 + 24))(v50, v51) & 1) == 0)
    BambiCallParticipant::setState(a1, 3, 1);
  ImsResult::ImsResult(a4, (uint64_t)&v49);
  v10 = v48;
  if (v48)
    goto LABEL_26;
LABEL_30:
  ImsResult::~ImsResult((ImsResult *)&v49);
}

void sub_1BEFDD9A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  uint64_t v28;

  ImsResult::~ImsResult((ImsResult *)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  ImsResult::~ImsResult((ImsResult *)(v28 - 152));
  _Unwind_Resume(a1);
}

void BambiCallParticipant::handleEvent(BambiCallParticipant *this, BambiCallEvent *lpsrc)
{
  int v3;
  void *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  const void *v9;
  _QWORD *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  _BOOL4 v28;
  unint64_t v29;
  uint64_t v30;
  void (*v31)(void);
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  std::__shared_weak_count *v50;
  const void *v51;
  std::__shared_weak_count *v52;

  v3 = *((_DWORD *)lpsrc + 2);
  if ((v3 - 14) < 2)
  {
    if (*((int *)this + 60) <= 5)
    {
      (*(void (**)(BambiCallParticipant *, void *))(*(_QWORD *)this + 72))(this, v4);
      v5 = 10;
LABEL_32:
      BambiCallParticipant::setState((uint64_t)this, v5, 1);
      goto LABEL_33;
    }
    v6 = (std::__shared_weak_count *)*((_QWORD *)this + 28);
    if (!v6 || (v7 = std::__shared_weak_count::lock(v6), (v52 = v7) == 0))
    {
      v5 = 7;
      goto LABEL_32;
    }
    v8 = v7;
    v9 = (const void *)*((_QWORD *)this + 27);
    v51 = v9;
    if (!v9)
    {
      v32 = 0;
      goto LABEL_61;
    }
    if (!v10)
    {
      v32 = 0;
      v49 = 0;
      v50 = 0;
LABEL_55:
      v40 = v50;
      if (v50)
      {
        p_shared_owners = (unint64_t *)&v50->__shared_owners_;
        do
          v42 = __ldaxr(p_shared_owners);
        while (__stlxr(v42 - 1, p_shared_owners));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      v8 = v52;
      if (!v52)
      {
LABEL_65:
        BambiCallParticipant::setState((uint64_t)this, 7, 1);
        if (v32)
        {
          v31 = *(void (**)(void))(*(_QWORD *)v32 + 16);
LABEL_35:
          v31();
          return;
        }
LABEL_33:
        v30 = *((_QWORD *)this + 26);
        if (!v30)
          return;
        v31 = *(void (**)(void))(*(_QWORD *)v30 + 16);
        goto LABEL_35;
      }
LABEL_61:
      v43 = (unint64_t *)&v8->__shared_owners_;
      do
        v44 = __ldaxr(v43);
      while (__stlxr(v44 - 1, v43));
      if (!v44)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
      goto LABEL_65;
    }
    v11 = v10;
    v49 = v10;
    v50 = v8;
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v47, (_QWORD *)this + 16);
    v14 = v47;
    if (!v47)
      goto LABEL_22;
    v15 = (uint64_t *)v11[52];
    if ((uint64_t *)v11[53] == v15)
      std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
    v17 = *v15;
    v16 = (std::__shared_weak_count *)v15[1];
    if (v16)
    {
      v18 = (unint64_t *)&v16->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      do
        v20 = __ldaxr(v18);
      while (__stlxr(v20 - 1, v18));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v14 == v17)
    {
      v28 = 1;
    }
    else
    {
LABEL_22:
      v21 = v49;
      std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v45, (_QWORD *)this + 16);
      v22 = v45;
      if (v45)
      {
        v23 = v21[52];
        if ((unint64_t)(v21[53] - v23) <= 0x10)
          std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
        v24 = *(_QWORD *)(v23 + 16);
        v25 = *(std::__shared_weak_count **)(v23 + 24);
        if (v25)
        {
          v26 = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
          v28 = v22 == v24;
          do
            v29 = __ldaxr(v26);
          while (__stlxr(v29 - 1, v26));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
            std::__shared_weak_count::__release_weak(v25);
          }
        }
        else
        {
          v28 = v45 == v24;
        }
      }
      else
      {
        v28 = 0;
      }
      v33 = v46;
      if (v46)
      {
        v34 = (unint64_t *)&v46->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
    }
    v36 = v48;
    if (!v48)
      goto LABEL_51;
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
      if (v28)
        goto LABEL_52;
    }
    else
    {
LABEL_51:
      if (v28)
      {
LABEL_52:
        v39 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"Warning: the following setState(kStateLeaving) may delete this BambiCallParticipant. Save its _oldCallDelegate first.", 117);
        *(_BYTE *)(v39 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v39 + 17) = 0;
        v32 = *((_QWORD *)this + 26);
        goto LABEL_55;
      }
    }
    v32 = 0;
    goto LABEL_55;
  }
  if (v3 == 13 && *((_DWORD *)this + 60) == 1)
    BambiCallParticipant::setState((uint64_t)this, 2, 1);
}

void sub_1BEFDDE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiCallParticipant::handleEvent(BambiCallParticipant *this, BambiCallEvent *a2)
{
  BambiCallParticipant::handleEvent((BambiCallParticipant *)((char *)this - 8), a2);
}

void BambiCallParticipant::handleCallInvalidated(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *v16[2];
  char v17;
  void *__p;
  char v19;

  v4 = a1 + 3;
  v5 = (*(uint64_t (**)(_QWORD *))(a1[3] + 64))(a1 + 3);
  (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Got invalidated callback for participant call ", 46);
  *(_BYTE *)(v5 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v16, (const std::string *)(*a2 + 464));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 56))(v5, v16);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v19 < 0)
    operator delete(__p);
  if (v17 < 0)
    operator delete(v16[0]);
  v6 = a1[26];
  if (v6)
  {
    v7 = (std::__shared_weak_count *)a2[1];
    v14 = *a2;
    v15 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 192))(v6, &v14);
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    a1[26] = 0;
  }
  v13 = (std::__shared_weak_count *)a1[19];
  a1[18] = 0;
  a1[19] = 0;
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
}

void sub_1BEFDDFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiCallParticipant::handleCallInvalidated(uint64_t a1, _QWORD *a2)
{
  BambiCallParticipant::handleCallInvalidated((_QWORD *)(a1 - 8), a2);
}

void BambiCallParticipant::handleReferSubscriptionSuccess(BambiCallParticipant *this)
{
  if (*((_DWORD *)this + 60) == 3)
    BambiCallParticipant::setState((uint64_t)this, 4, 1);
}

void BambiCallParticipant::handleReferFailed(BambiCallParticipant *this)
{
  BambiCallParticipant::setState((uint64_t)this, 10, 1);
}

void BambiCallParticipant::handleReferNotification(BambiCallParticipant *this, const SipMessage *lpsrc)
{
  _DWORD *v3;
  unsigned int v4;
  uint64_t v5;

  if (v3 && (*((_DWORD *)this + 60) - 3) <= 1)
  {
    v4 = v3[22];
    if (v4 - 200 >= 0x64)
    {
      if (v4 < 0x12C)
        return;
      v5 = 10;
    }
    else
    {
      v5 = 6;
    }
    BambiCallParticipant::setState((uint64_t)this, v5, 1);
  }
}

void BambiCallParticipant::handleReferSubscriptionTerminated(BambiCallParticipant *this)
{
  char *v2;
  uint64_t v3;

  if (*((_DWORD *)this + 60) == 3)
  {
    v2 = (char *)this + 24;
    v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 56))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"REFER subscription terminated before transfer could complete", 60);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    BambiCallParticipant::setState((uint64_t)this, 10, 1);
  }
}

_QWORD *BambiCallParticipant::logPrefix(BambiCallParticipant *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *result;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 18);
      if (v7)
        (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v7 + 72))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Participant: ", 13);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void sub_1BEFDE1F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'BambiCallParticipant::logPrefix(BambiCallParticipant *this, ImsOutStream *a2)
{
  return BambiCallParticipant::logPrefix((BambiCallParticipant *)((char *)this - 24), a2);
}

void __cxx_global_array_dtor_2()
{
  uint64_t v0;

  v0 = 0x108u;
  do
  {
    if (stateNames[v0 - 1] < 0)
      operator delete(*(void **)&stateNames[v0 - 24]);
    v0 -= 24;
  }
  while (v0);
}

uint64_t _GLOBAL__sub_I_BambiCallParticipant_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(stateNames, "Unknown");
  std::string::basic_string[abi:ne180100]<0>(&stateNames[24], "WaitingForHold");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704140, "WaitingToJoin");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704158, "SentJoinRequest");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704170, "JoinRequestAck");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704188, "InitialInviteeJoinPending");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7041A0, "Joined");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7041B8, "Leaving");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7041D0, "Left");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED7041E8, "LeftSilently");
  std::string::basic_string[abi:ne180100]<0>(qword_1ED704200, "Error");
  return __cxa_atexit((void (*)(void *))__cxx_global_array_dtor_2, 0, &dword_1BEDF4000);
}

void sub_1BEFDE390(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

uint64_t ImsTcpSocket::ImsTcpSocket(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;

  v7 = ImsSocket::ImsSocket(a1, a4);
  *(_QWORD *)v7 = off_1E78CF9C8;
  *(_QWORD *)(v7 + 88) = 0;
  *(_QWORD *)(v7 + 96) = 0;
  *(_QWORD *)(v7 + 80) = &unk_1E78CFB10;
  *(_QWORD *)(v7 + 112) = v7 + 112;
  *(_QWORD *)(v7 + 120) = v7 + 112;
  *(_QWORD *)(v7 + 128) = 0;
  *(_WORD *)(v7 + 104) = 0;
  *(_BYTE *)(v7 + 136) = 0;
  *(_QWORD *)(v7 + 152) = 0;
  *(_QWORD *)(v7 + 160) = 0;
  *(_QWORD *)(v7 + 144) = 0;
  *(_BYTE *)(v7 + 168) = 0;
  *(_DWORD *)(v7 + 140) = a3;
  v8 = *a2;
  v9 = a2[1];
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 16);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    v12 = *(std::__shared_weak_count **)(a1 + 152);
    *(_QWORD *)(a1 + 144) = v8;
    *(_QWORD *)(a1 + 152) = v9;
    if (v12)
      std::__shared_weak_count::__release_weak(v12);
  }
  else
  {
    *(_QWORD *)(a1 + 144) = v8;
    *(_QWORD *)(a1 + 152) = 0;
  }
  return a1;
}

void ImsTcpSocket::~ImsTcpSocket(ImsTcpSocket *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  *(_QWORD *)this = off_1E78CF9C8;
  *((_QWORD *)this + 10) = &unk_1E78CFB10;
  ImsTcpSocket::close(this);
  std::string::basic_string[abi:ne180100]<0>(v6, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"destroying ImsTcpSocket 0x", 26);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v5 < 0)
    operator delete(__p[0]);
  if (v7 < 0)
    operator delete(v6[0]);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  std::__list_imp<std::vector<unsigned char>>::clear((uint64_t *)this + 14);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 88);
  ImsSocket::~ImsSocket(this);
}

{
  ImsTcpSocket::~ImsTcpSocket(this);
  JUMPOUT(0x1C3B87100);
}

void ImsTcpSocket::close(ImsTcpSocket *this)
{
  _DWORD *v1;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v1 = (_DWORD *)*((_QWORD *)this + 5);
  if (v1 && *v1 != -1)
  {
    v3 = *((_QWORD *)this + 20);
    if (v3)
    {
      dispatch_source_cancel(v3);
      *((_QWORD *)this + 20) = 0;
    }
    v4 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (v4)
      std::__shared_weak_count::__release_weak(v4);
    ImsSocket::close(this);
  }
}

void `non-virtual thunk to'ImsTcpSocket::~ImsTcpSocket(ImsTcpSocket *this)
{
  ImsTcpSocket::~ImsTcpSocket((ImsTcpSocket *)((char *)this - 80));
}

{
  ImsTcpSocket::~ImsTcpSocket((ImsTcpSocket *)((char *)this - 80));
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsTcpSocket::readFromSocket(int a1, std::string *a2)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  std::string::size_type v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  timeval v20;
  fd_set v21;
  fd_set __p;
  std::string::value_type __s[8];
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(__s, "net");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::spam(ims::_logger, (uint64_t)__s, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"ImsTcpSocket : readFromSocket called", 36);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(__p.fds_bits[5]) < 0)
    operator delete(*(void **)__p.fds_bits);
  if (v24 < 0)
    operator delete(*(void **)__s);
  bzero(__s, 0xBB8uLL);
  if (a1 == -1)
  {
LABEL_24:
    std::string::basic_string[abi:ne180100]<0>(&__p, "net");
    std::string::basic_string[abi:ne180100]<0>(&v21, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::spam(ims::_logger, (uint64_t)&__p, (uint64_t)&v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"ImsTcpSocket : readFromSocket : exit", 36);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (SHIBYTE(v21.fds_bits[5]) < 0)
      operator delete(*(void **)v21.fds_bits);
    if (SHIBYTE(__p.fds_bits[5]) < 0)
      operator delete(*(void **)__p.fds_bits);
    return 0;
  }
  else
  {
    v5 = 1 << a1;
    v6 = (unint64_t)a1 >> 5;
    while (1)
    {
      memset(&__p, 0, sizeof(__p));
      memset(&v21, 0, sizeof(v21));
      if (__darwin_check_fd_set_overflow(a1, &__p, 0))
        __p.fds_bits[v6] |= v5;
      if (__darwin_check_fd_set_overflow(a1, &v21, 0))
        v21.fds_bits[v6] |= v5;
      v20.tv_sec = 0;
      *(_QWORD *)&v20.tv_usec = 0;
      if (select(a1 + 1, &__p, 0, &v21, &v20) < 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v12 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"select error: ", 14);
        *(_BYTE *)(v12 + 17) = 0;
        __error();
        std::ostream::operator<<();
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        if (v17 < 0)
          operator delete(v16[0]);
        if (v19 < 0)
          operator delete(v18[0]);
        return *__error();
      }
      if (__darwin_check_fd_set_overflow(a1, &v21, 0) && (v21.fds_bits[v6] & v5) != 0)
        break;
      if (!__darwin_check_fd_set_overflow(a1, &__p, 0) || (__p.fds_bits[v6] & v5) == 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v9 = ImsLogger::spam(ims::_logger, (uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"ImsTcpSocket: No more data to read on socket ", 45);
        *(_BYTE *)(v9 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v9 + 17) = 0;
        if (v17 < 0)
          operator delete(v16[0]);
        if (v19 < 0)
          operator delete(v18[0]);
        goto LABEL_24;
      }
      v7 = read(a1, __s, 0xBB8uLL);
      v8 = v7;
      if (!v7)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v13 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"ImsTcpSocket: Remote end closed connection", 42);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v13 + 17) = 0;
        goto LABEL_41;
      }
      if ((v7 & 0x8000000000000000) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(v18, "net");
        std::string::basic_string[abi:ne180100]<0>(v16, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v14 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"ImsTcpSocket: Error reading from socket: ", 41);
        *(_BYTE *)(v14 + 17) = 0;
        __error();
        std::ostream::operator<<();
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        if (v17 < 0)
          operator delete(v16[0]);
        if (v19 < 0)
          operator delete(v18[0]);
        return *__error();
      }
      std::string::append(a2, __s, v7);
      if (v8 < 0xBB8)
        goto LABEL_24;
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "net");
    std::string::basic_string[abi:ne180100]<0>(v16, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)v18, (uint64_t)v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Error on socket ", 16);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
LABEL_41:
    if (v17 < 0)
      operator delete(v16[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    return 0xFFFFFFFFLL;
  }
}

void sub_1BEFDEC60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ImsTcpSocket::_handleDataAvailable(int **this)
{
  ImsTcpSocket *v1;
  int v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  ImsTcpSocket *v5;
  std::string::size_type size;
  uint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  void (**v16)(ImsTcpSocket *);
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  void *v21[2];
  char v22;
  void *v23[2];
  _OWORD v24[4];
  void *__p[2];
  char v26;
  ImsTcpSocket *v27;
  std::__shared_weak_count *v28;
  std::string v29;

  v1 = (ImsTcpSocket *)this;
  memset(&v29, 0, sizeof(v29));
  v2 = ImsTcpSocket::readFromSocket(*this[5], &v29);
  v27 = 0;
  v28 = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)v1 + 19);
  if (!v3)
  {
    v4 = 0;
    goto LABEL_5;
  }
  v4 = std::__shared_weak_count::lock(v3);
  v28 = v4;
  if (!v4)
  {
LABEL_5:
    v5 = 0;
    goto LABEL_6;
  }
  v5 = (ImsTcpSocket *)*((_QWORD *)v1 + 18);
  v27 = v5;
LABEL_6:
  size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
  if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v29.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_27;
  if ((*((_BYTE *)v1 + 72) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::warn(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"ImsTcpSocket: kDebugDropIncoming set.  Dropping incoming packet.", 64);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (v5)
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::spam(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"ImsTcpSocket: process data, len = ", 34);
      *(_BYTE *)(v7 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v24[0]) < 0)
        operator delete(v23[0]);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v8 = &v29;
      else
        v8 = (std::string *)v29.__r_.__value_.__r.__words[0];
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v9 = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      else
        v9 = v29.__r_.__value_.__l.__size_;
      (*(void (**)(ImsTcpSocket *, std::string *, std::string::size_type, uint64_t))(*(_QWORD *)v5 + 48))(v5, v8, v9, (uint64_t)v1 + 88);
      goto LABEL_27;
    }
    std::string::basic_string[abi:ne180100]<0>(v23, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"ImsTcpSocket: No delegate to handle incoming packet from ", 57);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)v1 + 11) + 40))(*((_QWORD *)v1 + 11), v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)". Discarding packet", 19);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v10 + 17) = 0;
  if (v26 < 0)
    operator delete(__p[0]);
  if ((SBYTE7(v24[0]) & 0x80000000) == 0)
  {
LABEL_27:
    if (!v2)
      goto LABEL_49;
    goto LABEL_28;
  }
  operator delete(v23[0]);
  if (!v2)
    goto LABEL_49;
LABEL_28:
  if (v2 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"ImsTcpSocket: remote end closed connection", 42);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v26 < 0)
      operator delete(__p[0]);
    if (SBYTE7(v24[0]) < 0)
      operator delete(v23[0]);
    *((_BYTE *)v1 + 136) = 1;
    if (v5)
    {
      v12 = 2;
      v1 = v5;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v23, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::error(ims::_logger, (uint64_t)v23, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"ImsTcpSocket: closing myself", 28);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v26 < 0)
        operator delete(__p[0]);
      if (SBYTE7(v24[0]) < 0)
        operator delete(v23[0]);
      v12 = 1;
    }
    (*(void (**)(ImsTcpSocket *))(*(_QWORD *)v1 + 8 * v12))(v1);
LABEL_49:
    if (!v4)
      goto LABEL_64;
    goto LABEL_60;
  }
  *(_OWORD *)v23 = 0u;
  memset(v24, 0, 56);
  v13 = *__error();
  memset((char *)v24 + 8, 0, 48);
  v23[0] = &off_1E78B7238;
  v23[1] = &_posixDomain;
  LODWORD(v24[0]) = v13;
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  std::string::basic_string[abi:ne180100]<0>(v21, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"ImsTcpSocket: error ", 20);
  *(_BYTE *)(v14 + 17) = 0;
  (*((void (**)(void **, uint64_t))v23[0] + 2))(v23, v14);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (v22 < 0)
    operator delete(v21[0]);
  if ((v26 & 0x80000000) == 0)
  {
    if (v5)
      goto LABEL_39;
LABEL_52:
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(v21, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"ImsTcpSocket: no delegate to handle error so closing myself", 59);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v22 < 0)
      operator delete(v21[0]);
    if (v26 < 0)
      operator delete(__p[0]);
    v16 = (void (**)(ImsTcpSocket *))(*(_QWORD *)v1 + 8);
    goto LABEL_57;
  }
  operator delete(__p[0]);
  if (!v5)
    goto LABEL_52;
LABEL_39:
  v15 = *(_QWORD *)v5;
  if (LODWORD(v24[0]) == 54)
  {
    v16 = (void (**)(ImsTcpSocket *))(v15 + 24);
    v1 = v5;
LABEL_57:
    (*v16)(v1);
    goto LABEL_59;
  }
  (*(void (**)(ImsTcpSocket *, void **))(v15 + 40))(v5, v23);
LABEL_59:
  ImsResult::~ImsResult((ImsResult *)v23);
  if (!v4)
    goto LABEL_64;
LABEL_60:
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v20 = __ldaxr(p_shared_owners);
  while (__stlxr(v20 - 1, p_shared_owners));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_64:
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
}

void sub_1BEFDF3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a34 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 88);
  if (*(char *)(v34 - 49) < 0)
    operator delete(*(void **)(v34 - 72));
  _Unwind_Resume(a1);
}

void ImsTcpSocket::setMaxSegmentSize(ImsTcpSocket *this, int a2)
{
  uint64_t v3;
  const ImsResult *v4;
  _QWORD v5[2];
  int v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  int v10;

  v10 = a2;
  if (a2 <= 0)
  {
    v7 = 0uLL;
    v8 = 0uLL;
    v9 = 0uLL;
    v5[0] = &off_1E78B7238;
    v5[1] = &_bambiDomain;
    v6 = 1073741825;
    v3 = ImsResult::operator<<<int>((uint64_t)v5);
    v4 = (const ImsResult *)ImsResult::operator<<<char [20]>(v3, " is not a valid MSS");
    ImsResult::ImsResult(this, v4);
    ImsResult::~ImsResult((ImsResult *)v5);
  }
  else
  {
    *(_OWORD *)((char *)this + 24) = 0uLL;
    *(_OWORD *)((char *)this + 40) = 0uLL;
    *(_OWORD *)((char *)this + 56) = 0uLL;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
  }
}

void sub_1BEFDF534(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void ImsTcpSocket::_sendQueuedData(ImsTcpSocket *this)
{
  int v2;
  uint64_t v3;
  _QWORD *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  char v19;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 56))(&v16);
  v2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v18);
  ImsResult::~ImsResult((ImsResult *)&v16);
  if (v2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "net");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"still waiting on ", 17);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(void **__return_ptr, ImsTcpSocket *))(*(_QWORD *)this + 112))(__p, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" handshake", 10);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    goto LABEL_18;
  }
  if (!*((_QWORD *)this + 16))
  {
    std::string::basic_string[abi:ne180100]<0>(&v16, "net");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Nothing to send", 15);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
LABEL_18:
    if (v15 < 0)
      operator delete(v14[0]);
    if (v19 < 0)
      operator delete(v16);
    return;
  }
  for (i = (_QWORD *)*((_QWORD *)this + 15); i != (_QWORD *)((char *)this + 112); i = (_QWORD *)i[1])
  {
    v5 = i[2];
    v6 = i[3];
    std::string::basic_string[abi:ne180100]<0>(&v16, "net");
    std::string::basic_string[abi:ne180100]<0>(v14, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Sending ", 8);
    v8 = v6 - v5;
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" queued bytes to ", 17);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v7);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v15 < 0)
      operator delete(v14[0]);
    if (v19 < 0)
      operator delete(v16);
    (*(void (**)(void **__return_ptr, ImsTcpSocket *, uint64_t, uint64_t))(*(_QWORD *)this + 48))(&v16, this, v5, v8);
    v9 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v17 + 24))(v17, v18);
    ImsResult::~ImsResult((ImsResult *)&v16);
    if (v9)
    {
      std::string::basic_string[abi:ne180100]<0>(&v16, "net");
      std::string::basic_string[abi:ne180100]<0>(v14, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::error(ims::_logger, (uint64_t)&v16, (uint64_t)v14);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Could not send ", 15);
      *(_BYTE *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" bytes to ", 10);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 11) + 40))(*((_QWORD *)this + 11), v10);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (v15 < 0)
        operator delete(v14[0]);
      if (v19 < 0)
        operator delete(v16);
    }
  }
  std::__list_imp<std::vector<unsigned char>>::clear((uint64_t *)this + 14);
}

void sub_1BEFDF960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, dispatch_queue_t *a5@<X4>, uint64_t a6@<X5>, ImsResult *a7@<X8>, uint64_t a8, char a9, int a10)
{
  const sockaddr *v17;
  int sa_family;
  int *v19;
  int *v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  _QWORD v28[2];
  _BYTE v29[72];
  _BYTE v30[72];
  void *__p[2];
  char v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  void *v38[2];
  char v39;

  v17 = (const sockaddr *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 72))(*a2);
  sa_family = v17->sa_family;
  *(_DWORD *)(a1 + 64) = sa_family;
  v19 = (int *)socket(sa_family, 1, 0);
  if ((v19 & 0x80000000) != 0)
  {
    *((_QWORD *)a7 + 8) = 0;
    *((_OWORD *)a7 + 2) = 0u;
    *((_OWORD *)a7 + 3) = 0u;
    *(_OWORD *)a7 = 0u;
    *((_OWORD *)a7 + 1) = 0u;
    v26 = *__error();
    *(_OWORD *)((char *)a7 + 24) = 0u;
    *(_OWORD *)((char *)a7 + 40) = 0u;
    *(_OWORD *)((char *)a7 + 56) = 0u;
    *(_QWORD *)a7 = &off_1E78B7238;
    *((_QWORD *)a7 + 1) = &_posixDomain;
    *((_DWORD *)a7 + 4) = v26;
    std::string::basic_string[abi:ne180100]<0>(&v33, "net");
    std::string::basic_string[abi:ne180100]<0>(v38, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"ImsTcpSocket: failed to create socket : ", 40);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(ImsResult *, uint64_t))(*(_QWORD *)a7 + 16))(a7, v27);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    if (v39 < 0)
      operator delete(v38[0]);
    if (SBYTE7(v34) < 0)
      operator delete((void *)v33);
  }
  else
  {
    v20 = v19;
    v21 = *(unsigned __int8 *)(a4 + 23);
    if ((v21 & 0x80u) != 0)
      v21 = *(_QWORD *)(a4 + 8);
    if (v21)
    {
      v37 = 0;
      v35 = 0u;
      v36 = 0u;
      v33 = 0u;
      v34 = 0u;
      v22 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 136))(*a2);
      ImsSocket::bindSocketToInterface(v20, v22, a4, (uint64_t)&v33);
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v33 + 1) + 24))(*((_QWORD *)&v33 + 1), v34))
      {
        std::string::basic_string[abi:ne180100]<0>(v38, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v23 = ImsLogger::error(ims::_logger, (uint64_t)v38, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"ImsTcpSocket: Unable to bind socket to interface: ", 50);
        *(_BYTE *)(v23 + 17) = 0;
        (*(void (**)(__int128 *, uint64_t))(v33 + 16))(&v33, v23);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v23 + 17) = 0;
        if (v32 < 0)
          operator delete(__p[0]);
        if (v39 < 0)
          operator delete(v38[0]);
      }
      ImsResult::~ImsResult((ImsResult *)&v33);
    }
    if (a9)
    {
      ImsSocket::setReusePortOptionForSocket((ImsSocket *)v20, (uint64_t)v30);
      ImsResult::~ImsResult((ImsResult *)v30);
    }
    LODWORD(__p[0]) = 0;
    setsockopt((int)v20, 0xFFFF, 4352, __p, 4u);
    if (bind((int)v20, v17, v17->sa_len))
    {
      *((_QWORD *)a7 + 8) = 0;
      *((_OWORD *)a7 + 2) = 0u;
      *((_OWORD *)a7 + 3) = 0u;
      *(_OWORD *)a7 = 0u;
      *((_OWORD *)a7 + 1) = 0u;
      v24 = *__error();
      *(_OWORD *)((char *)a7 + 24) = 0u;
      *(_OWORD *)((char *)a7 + 40) = 0u;
      *(_OWORD *)((char *)a7 + 56) = 0u;
      *(_QWORD *)a7 = &off_1E78B7238;
      *((_QWORD *)a7 + 1) = &_posixDomain;
      *((_DWORD *)a7 + 4) = v24;
      std::string::basic_string[abi:ne180100]<0>(&v33, "net");
      std::string::basic_string[abi:ne180100]<0>(v38, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::error(ims::_logger, (uint64_t)&v33, (uint64_t)v38);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"ImsTcpSocket: couldn't bind TCP socket to ", 42);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(ImsResult *, uint64_t))(*(_QWORD *)a7 + 16))(a7, v25);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (v39 < 0)
        operator delete(v38[0]);
      if (SBYTE7(v34) < 0)
        operator delete((void *)v33);
      close((int)v20);
    }
    else
    {
      ImsSocket::setNoTimeWaitForSocket((ImsSocket *)v20, (uint64_t)v29);
      ImsResult::~ImsResult((ImsResult *)v29);
      v28[0] = &off_1E78B7BD8;
      v28[1] = 0;
      ImsTcpSocket::initializeSocket(a1, (ImsSocket *)v20, a3, a5, a6, a7, a10);
      ims::CFType::~CFType((ims::CFType *)v28);
    }
  }
}

void sub_1BEFDFE4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (*(char *)(v35 - 81) < 0)
    operator delete(*(void **)(v35 - 104));
  ImsResult::~ImsResult((ImsResult *)(v35 - 176));
  _Unwind_Resume(a1);
}

void ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, _QWORD *a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, ImsResult *a6@<X8>, int a7)
{
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const sockaddr *v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  NSObject *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  NSObject *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const ImsResult *v30;
  uint64_t v31;
  const ImsResult *v32;
  uint64_t v33;
  const ImsResult *v34;
  ims::result *v35;
  int v36;
  _QWORD *v37;
  uint64_t v38;
  _BYTE v39[72];
  _QWORD v40[5];
  _QWORD handler[6];
  std::__shared_weak_count *v42;
  void *__p[2];
  int v44;
  char v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _BYTE v49[72];
  __int128 v50;
  int v51;
  char v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  void *v56[2];
  char v57;

  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 88))(*a3) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD))(*(_QWORD *)*a3 + 56))(*a3))
    {
      ImsSocket::setNoSigpipeOptionForSocket(a2, (uint64_t)v49);
      ImsResult::~ImsResult((ImsResult *)v49);
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a3 + 32))(&v50);
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 88, &v50);
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v50 + 1);
      if (*((_QWORD *)&v50 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v50 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v16 = (const sockaddr *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 72))(*a3);
      fcntl((int)a2, 4, 4);
      if ((ImsSocket::_createSocketWithDispatch(a1, (int)a2, a4, a5, 0) & 1) != 0)
      {
        if (connect((int)a2, v16, v16->sa_len) && *__error() != 36)
        {
          *((_QWORD *)a6 + 8) = 0;
          *((_OWORD *)a6 + 2) = 0u;
          *((_OWORD *)a6 + 3) = 0u;
          *(_OWORD *)a6 = 0u;
          *((_OWORD *)a6 + 1) = 0u;
          v53 = 0u;
          v54 = 0u;
          v55 = 0u;
          *(_QWORD *)&v50 = &off_1E78B7238;
          *((_QWORD *)&v50 + 1) = &_bambiDomain;
          v51 = 1073741840;
          v35 = (ims::result *)ImsResult::operator<<<char [21]>((uint64_t)&v50, "Socket connect error");
          v36 = *__error();
          v46 = 0u;
          v47 = 0u;
          v48 = 0u;
          __p[0] = &off_1E78B7238;
          __p[1] = &_posixDomain;
          v44 = v36;
          ims::result::resultWithCause(v35, (const ImsResult *)__p, (uint64_t)a6);
          ImsResult::~ImsResult((ImsResult *)__p);
          ImsResult::~ImsResult((ImsResult *)&v50);
          std::string::basic_string[abi:ne180100]<0>(v37, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v38 = ImsLogger::error(ims::_logger, (uint64_t)&v50, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"ImsTcpSocket: Couldn't connect socket to ", 41);
          *(_BYTE *)(v38 + 17) = 0;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, v38);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)": ", 2);
          *(_BYTE *)(v38 + 17) = 0;
          (*(void (**)(ImsResult *, uint64_t))(*(_QWORD *)a6 + 16))(a6, v38);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v38 + 17) = 0;
          if (v45 < 0)
            operator delete(__p[0]);
          if (v52 < 0)
            operator delete((void *)v50);
          close((int)a2);
        }
        else
        {
          v18 = *(_QWORD *)(a1 + 8);
          v17 = *(std::__shared_weak_count **)(a1 + 16);
          if (v17)
          {
            p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
            do
              v20 = __ldxr(p_shared_weak_owners);
            while (__stxr(v20 + 1, p_shared_weak_owners));
          }
          v21 = dispatch_source_create(MEMORY[0x1E0C80DF0], (int)a2, 0, *a4);
          *(_QWORD *)(a1 + 160) = v21;
          v22 = MEMORY[0x1E0C809B0];
          handler[0] = MEMORY[0x1E0C809B0];
          handler[1] = 1174405120;
          handler[2] = ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke;
          handler[3] = &__block_descriptor_tmp_40_0;
          handler[4] = a1;
          handler[5] = v18;
          v42 = v17;
          if (v17)
          {
            v23 = (unint64_t *)&v17->__shared_weak_owners_;
            do
              v24 = __ldxr(v23);
            while (__stxr(v24 + 1, v23));
          }
          dispatch_source_set_event_handler(v21, handler);
          v25 = *(NSObject **)(a1 + 160);
          v40[0] = v22;
          v40[1] = 0x40000000;
          v40[2] = ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke_41;
          v40[3] = &__block_descriptor_tmp_43;
          v40[4] = v25;
          dispatch_source_set_cancel_handler(v25, v40);
          ImsSocket::attachDispatchSource((ImsSocket *)a1, *a4, (uint64_t)v39);
          ImsResult::~ImsResult((ImsResult *)v39);
          dispatch_resume(*(dispatch_object_t *)(a1 + 160));
          if (*(_QWORD *)(a1 + 24))
          {
            std::string::basic_string[abi:ne180100]<0>(&v50, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v50, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Initialized TCP connection ", 27);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v26);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" -> ", 4);
            *(_BYTE *)(v26 + 17) = 0;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), v26);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v26 + 17) = 0;
            if (v45 < 0)
              operator delete(__p[0]);
            if (v52 < 0)
              operator delete((void *)v50);
          }
          if (a7 && (*(_BYTE *)(a1 + 168) || (*(unsigned int (**)(uint64_t))(*(_QWORD *)a1 + 120))(a1)))
          {
            std::string::basic_string[abi:ne180100]<0>(&v50, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v27 = ImsLogger::debug(ims::_logger, (uint64_t)&v50, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Initializing TCP-KeepAlive on ", 30);
            *(_BYTE *)(v27 + 17) = 0;
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(v56, a1);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 32))(v27, v56);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v27 + 17) = 0;
            if (v57 < 0)
              operator delete(v56[0]);
            if (v45 < 0)
              operator delete(__p[0]);
            if (v52 < 0)
              operator delete((void *)v50);
            std::string::basic_string[abi:ne180100]<0>(&v50, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v28 = ImsLogger::debug(ims::_logger, (uint64_t)&v50, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"TCP Keepalive not supported", 27);
            *(_BYTE *)(v28 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v28 + 17) = 0;
            if (v45 < 0)
              operator delete(__p[0]);
            if (v52 < 0)
              operator delete((void *)v50);
          }
          *(_OWORD *)((char *)a6 + 24) = 0u;
          *(_OWORD *)((char *)a6 + 40) = 0u;
          *(_OWORD *)((char *)a6 + 56) = 0u;
          *(_QWORD *)a6 = &off_1E78B7238;
          *((_QWORD *)a6 + 1) = &_bambiDomain;
          *((_DWORD *)a6 + 4) = 0;
          if (v42)
            std::__shared_weak_count::__release_weak(v42);
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v50, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v33 = ImsLogger::error(ims::_logger, (uint64_t)&v50, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"ImsTcpSocket: Unable to create CFSocket for TCP connection", 58);
        *(_BYTE *)(v33 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v33 + 17) = 0;
        if (v45 < 0)
          operator delete(__p[0]);
        if (v52 < 0)
          operator delete((void *)v50);
        close((int)a2);
        v53 = 0u;
        v54 = 0u;
        v55 = 0u;
        *(_QWORD *)&v50 = &off_1E78B7238;
        *((_QWORD *)&v50 + 1) = &_bambiDomain;
        v51 = 0x40000000;
        v34 = (const ImsResult *)ImsResult::operator<<<char [26]>((uint64_t)&v50, "Unable to create CFSocket");
        ImsResult::ImsResult(a6, v34);
        ImsResult::~ImsResult((ImsResult *)&v50);
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_QWORD *)&v50 = &off_1E78B7238;
    *((_QWORD *)&v50 + 1) = &_bambiDomain;
    v51 = 1073741825;
    v31 = ImsResult::operator<<<char [38]>((uint64_t)&v50, "no port specified for remote address ");
    v32 = (const ImsResult *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v31, a3);
    ims::result::log((uint64_t)__p, (uint64_t)v32);
    ImsResult::ImsResult(a6, v32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    v53 = 0u;
    v54 = 0u;
    v55 = 0u;
    *(_QWORD *)&v50 = &off_1E78B7238;
    *((_QWORD *)&v50 + 1) = &_bambiDomain;
    v51 = 1073741825;
    v29 = ImsResult::operator<<<char [24]>((uint64_t)&v50, "invalid remote address ");
    v30 = (const ImsResult *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v29, a3);
    ims::result::log((uint64_t)__p, (uint64_t)v30);
    ImsResult::ImsResult(a6, v30);
  }
  ImsResult::~ImsResult((ImsResult *)&v50);
  if (v45 < 0)
    operator delete(__p[0]);
}

void sub_1BEFE0774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  ImsResult *v36;

  ImsResult::~ImsResult(v36);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, dispatch_queue_t *a5@<X4>, uint64_t a6@<X5>, ImsResult *a7@<X8>, uint64_t a8, char a9, int a10)
{
  ImsTcpSocket::initializeSocket(a1 - 80, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  _BYTE *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  char v22;
  _QWORD v23[3];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  socklen_t v27[2];

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        *(_QWORD *)v27 = 0;
        getsockopt(**(_DWORD **)(v3 + 40), 0xFFFF, 4103, &v27[1], v27);
        v24 = 0u;
        v25 = 0u;
        v26 = 0u;
        v23[0] = &off_1E78B7238;
        v23[1] = &_posixDomain;
        v23[2] = v27[1];
        if ((*(unsigned int (**)(void))(_posixDomain + 24))())
        {
          std::string::basic_string[abi:ne180100]<0>(v19, "net");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v6 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)v19, (uint64_t)__p);
          (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v3 + 112))(v21, v3);
          (*(void (**)(_BYTE *, void **))(*(_QWORD *)v6 + 32))(v6, v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v6 + 1), (uint64_t)"ImsTcpSocket: could not connect to ", 35);
          v6[17] = 0;
          (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v3 + 88) + 40))(*(_QWORD *)(v3 + 88), v6);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v6 + 1), (uint64_t)": ", 2);
          v6[17] = 0;
          (*(void (**)(ImsResult *, ImsOutStream *))(v23[0] + 16))((ImsResult *)v23, (ImsOutStream *)v6);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v6[17] = 0;
          if (v22 < 0)
            operator delete(v21[0]);
          if (v18 < 0)
            operator delete(__p[0]);
          if (v20 < 0)
            operator delete(v19[0]);
          *(_BYTE *)(v3 + 104) = 0;
          std::__list_imp<std::vector<unsigned char>>::clear((uint64_t *)(v3 + 112));
          v7 = *(std::__shared_weak_count **)(v3 + 152);
          if (v7)
          {
            v8 = std::__shared_weak_count::lock(v7);
            v19[1] = v8;
            if (v8)
            {
              v9 = v8;
              v10 = *(void **)(v3 + 144);
              v19[0] = v10;
              if (v10)
                (*(void (**)(void *, _QWORD *))(*(_QWORD *)v10 + 32))(v10, v23);
              p_shared_owners = (unint64_t *)&v9->__shared_owners_;
              do
                v12 = __ldaxr(p_shared_owners);
              while (__stlxr(v12 - 1, p_shared_owners));
              if (!v12)
              {
                ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
                std::__shared_weak_count::__release_weak(v9);
              }
            }
          }
        }
        else
        {
          *(_BYTE *)(v3 + 104) = 1;
          if (*(int *)(v3 + 140) >= 1)
          {
            std::string::basic_string[abi:ne180100]<0>(v19, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v13 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v3 + 104))(v21, v3);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 32))(v13, v21);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)": setting MSS for outgoing TCP socket to ", 41);
            *(_BYTE *)(v13 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v13 + 17) = 0;
            if (v22 < 0)
              operator delete(v21[0]);
            if (v18 < 0)
              operator delete(__p[0]);
            if (v20 < 0)
              operator delete(v19[0]);
            ImsSocket::socketDescriptor((ImsSocket *)v3);
            ImsTcpSocket::setMaxSegmentSize((ImsTcpSocket *)v19, *(_DWORD *)(v3 + 140));
            ImsResult::~ImsResult((ImsResult *)v19);
          }
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v21, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v14 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v21);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Socket just connected, sending queued up data", 45);
          *(_BYTE *)(v14 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v14 + 17) = 0;
          if (v22 < 0)
            operator delete(v21[0]);
          if (v18 < 0)
            operator delete(__p[0]);
          ImsTcpSocket::_sendQueuedData((ImsTcpSocket *)v3);
          if (*(_BYTE *)(v3 + 105))
          {
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v3 + 88))(__p, v3);
            ImsResult::~ImsResult((ImsResult *)__p);
          }
          dispatch_source_cancel(*(dispatch_source_t *)(v3 + 160));
          *(_QWORD *)(v3 + 160) = 0;
        }
        ImsResult::~ImsResult((ImsResult *)v23);
      }
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFE0D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  ImsResult::~ImsResult((ImsResult *)(v29 - 128));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void ___ZN12ImsTcpSocket16initializeSocketEiRKNSt3__110shared_ptrI9IpAddressEERKN3ims8DispatchERKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEbNS6_14CFMutableArrayESH_i_block_invoke_41(uint64_t a1)
{
  uint64_t v2;
  void *__p[2];
  char v4;
  void *v5[2];
  char v6;

  std::string::basic_string[abi:ne180100]<0>(v5, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v5, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"ImsTcpSocket: finished with connect source.", 43);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
  if (v6 < 0)
    operator delete(v5[0]);
  dispatch_release(*(dispatch_object_t *)(a1 + 32));
}

void sub_1BEFE0EE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'ImsTcpSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, _QWORD *a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, ImsResult *a6@<X8>, int a7)
{
  ImsTcpSocket::initializeSocket(a1 - 80, a2, a3, a4, a5, a6, a7);
}

uint64_t ImsTcpSocket::name@<X0>(ImsTcpSocket *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  void *__p[2];
  char v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v9, 1);
  (*(void (**)(void **__return_ptr, ImsTcpSocket *))(*(_QWORD *)this + 112))(__p, this);
  (*(void (**)(__int128 *, void **))(v9 + 32))(&v9, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)"Socket ", 7);
  BYTE1(v10) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 40))(v4, &v9);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)"??", 2);
    BYTE1(v10) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)" <-> ", 5);
  BYTE1(v10) = 0;
  v5 = *((_QWORD *)this + 11);
  if (v5)
  {
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v5 + 40))(v5, &v9);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v9 + 1), (uint64_t)"??", 2);
    BYTE1(v10) = 0;
  }
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v10 + 1) + 8, a2);
  *(_QWORD *)&v9 = &off_1E78D7A10;
  if ((_BYTE)v10)
  {
    result = *((_QWORD *)&v9 + 1);
    if (*((_QWORD *)&v9 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v9 + 1) + 8))(*((_QWORD *)&v9 + 1));
  }
  return result;
}

void sub_1BEFE1078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::socketReadCallback(ImsTcpSocket *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  NSObject *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    v6 = *((_QWORD *)this + 7);
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  else
  {
    v6 = *((_QWORD *)this + 7);
  }
  v8 = (_QWORD *)operator new();
  *v8 = this;
  v8[1] = v3;
  v8[2] = v2;
  v9 = 0;
  v10 = 0;
  dispatch_async_f(v6, v8, (dispatch_function_t)dispatch::async<ImsTcpSocket::socketReadCallback(void)::$_0>(dispatch_queue_s *,std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100](&v9);
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void ImsTcpSocket::_initializeIncoming(uint64_t a1@<X0>, ImsSocket *a2@<X1>, uint64_t a3@<X2>, dispatch_object_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const ImsResult *v16;
  _BYTE v17[72];
  void *__p[2];
  char v19;
  __int128 v20;
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  void *v26[2];
  char v27;
  _BYTE v28[72];
  _BYTE v29[72];

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a3 + 32))(&v20);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 88, &v20);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
  if (*((_QWORD *)&v20 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  ImsSocket::setNoTimeWaitForSocket(a2, (uint64_t)v29);
  ImsResult::~ImsResult((ImsResult *)v29);
  ImsSocket::setNoSigpipeOptionForSocket(a2, (uint64_t)v28);
  ImsResult::~ImsResult((ImsResult *)v28);
  if ((ImsSocket::_createSocketWithDispatch(a1, (int)a2, a4, a5, 1) & 1) != 0)
  {
    if (*(int *)(a1 + 140) >= 1)
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "net");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v20, (uint64_t)v26);
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)a1 + 104))(__p, a1);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 32))(v14, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)": setting MSS for incoming TCP socket to ", 41);
      *(_BYTE *)(v14 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v14 + 17) = 0;
      if (v19 < 0)
        operator delete(__p[0]);
      if (v27 < 0)
        operator delete(v26[0]);
      if (v22 < 0)
        operator delete((void *)v20);
      ImsTcpSocket::setMaxSegmentSize((ImsTcpSocket *)v17, *(_DWORD *)(a1 + 140));
      ImsResult::~ImsResult((ImsResult *)v17);
    }
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_QWORD *)(a1 + 24))
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "net");
      std::string::basic_string[abi:ne180100]<0>(v26, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)&v20, (uint64_t)v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Initialized TCP connection ", 27);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" <- ", 4);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 88) + 40))(*(_QWORD *)(a1 + 88), v15);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v27 < 0)
        operator delete(v26[0]);
      if (v22 < 0)
        operator delete((void *)v20);
    }
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_QWORD *)a6 = &off_1E78B7238;
    *(_QWORD *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 0;
  }
  else
  {
    close((int)a2);
    std::string::basic_string[abi:ne180100]<0>(v26, "net");
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    *(_QWORD *)&v20 = &off_1E78B7238;
    *((_QWORD *)&v20 + 1) = &_bambiDomain;
    v21 = 0x40000000;
    v16 = (const ImsResult *)ImsResult::operator<<<char [45]>((uint64_t)&v20, "Unable to create CFSocket for TCP connection");
    ims::result::log((uint64_t)v26, (uint64_t)v16);
    ImsResult::ImsResult((ImsResult *)a6, v16);
    ImsResult::~ImsResult((ImsResult *)&v20);
    if (v27 < 0)
      operator delete(v26[0]);
  }
}

void sub_1BEFE151C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a29 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::send(ImsTcpSocket *this@<X0>, const unsigned __int8 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  _DWORD *v5;
  const ImsResult *v9;
  void *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  void *__p;
  void *__dst;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;

  v5 = (_DWORD *)*((_QWORD *)this + 5);
  if (!v5 || *v5 == -1)
  {
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    __p = &off_1E78B7238;
    __dst = &_bambiDomain;
    LODWORD(v16) = 1073741827;
    v9 = (const ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)&__p, "send: socket not initialized");
    ImsResult::ImsResult((ImsResult *)a4, v9);
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  else if (((*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 80))(this) & 1) != 0)
  {
    (*(void (**)(ImsTcpSocket *, const unsigned __int8 *, char *))(*(_QWORD *)this + 48))(this, a2, a3);
  }
  else
  {
    __p = 0;
    __dst = 0;
    v16 = 0;
    if (a3)
    {
      std::vector<unsigned char>::__vallocate[abi:ne180100](&__p, (size_t)a3);
      v10 = __dst;
      memmove(__dst, a2, (size_t)a3);
      v11 = (uint64_t)&a3[(_QWORD)v10];
      __dst = &a3[(_QWORD)v10];
      a3 = (char *)__p;
    }
    else
    {
      v11 = 0;
    }
    v12 = operator new(0x28uLL);
    v12[4] = 0;
    *(_OWORD *)v12 = 0u;
    *((_OWORD *)v12 + 1) = 0u;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v12 + 2, a3, v11, v11 - (_QWORD)a3);
    v13 = *((_QWORD *)this + 14);
    *v12 = v13;
    v12[1] = (char *)this + 112;
    *(_QWORD *)(v13 + 8) = v12;
    *((_QWORD *)this + 14) = v12;
    ++*((_QWORD *)this + 16);
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    if (__p)
    {
      __dst = __p;
      operator delete(__p);
    }
  }
}

void sub_1BEFE173C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::_writeToSocket(ImsTcpSocket *this@<X0>, const unsigned __int8 *a2@<X1>, size_t a3@<X2>, uint64_t a4@<X8>)
{
  ssize_t v6;
  ims::result *v7;
  int v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const ImsResult *v14;
  _QWORD v15[2];
  int v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  void *__p[2];
  int v21;
  char v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  _QWORD v26[2];
  int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  _QWORD v31[2];
  char v32;
  ssize_t v33;
  size_t v34;

  v34 = a3;
  v6 = send(**((_DWORD **)this + 5), a2, a3, 0);
  v33 = v6;
  if (v6 == -1)
  {
    std::string::basic_string[abi:ne180100]<0>(v31, "net");
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v21 = 1073741840;
    v7 = (ims::result *)ImsResult::operator<<<char [33]>((uint64_t)__p, "ImsTcpSocket: Socket write error");
    v8 = *__error();
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v15[0] = &off_1E78B7238;
    v15[1] = &_posixDomain;
    v16 = v8;
    ims::result::resultWithCause(v7, (const ImsResult *)v15, (uint64_t)v26);
    ims::result::log((uint64_t)v31, (uint64_t)v26, a4);
    ImsResult::~ImsResult((ImsResult *)v26);
    ImsResult::~ImsResult((ImsResult *)v15);
    ImsResult::~ImsResult((ImsResult *)__p);
    if ((v32 & 0x80000000) == 0)
      return;
    v9 = (void *)v31[0];
    goto LABEL_8;
  }
  if (v6 == a3)
  {
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "net");
  v28 = 0u;
  v29 = 0u;
  v30 = 0u;
  v26[0] = &off_1E78B7238;
  v26[1] = &_bambiDomain;
  v27 = 0x40000000;
  v10 = ImsResult::operator<<<char [25]>((uint64_t)v26, "ImsTcpSocket: only sent ");
  v11 = ImsResult::operator<<<long>(v10);
  v12 = ImsResult::operator<<<char [5]>(v11, " of ");
  v13 = ImsResult::operator<<<unsigned long>(v12);
  v14 = (const ImsResult *)ImsResult::operator<<<char [7]>(v13, " bytes");
  ims::result::log((uint64_t)__p, (uint64_t)v14);
  ImsResult::ImsResult((ImsResult *)a4, v14);
  ImsResult::~ImsResult((ImsResult *)v26);
  if (v22 < 0)
  {
    v9 = __p[0];
LABEL_8:
    operator delete(v9);
  }
}

void sub_1BEFE1984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  ImsResult::~ImsResult((ImsResult *)&a27);
  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult((ImsResult *)&a18);
  if (*(char *)(v27 - 65) < 0)
    operator delete(*(void **)(v27 - 88));
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<long>(uint64_t a1)
{
  ImsStringOutStream *v2;

  v2 = *(ImsStringOutStream **)(a1 + 24);
  if (!v2)
  {
    v2 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v2, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v2;
  }
  std::ostream::operator<<();
  *((_BYTE *)v2 + 17) = 0;
  return a1;
}

void sub_1BEFE1A58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [5]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEFE1AFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsTcpSocket::send(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v3 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v3 = v2;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)a1 + 64))(a1, a2, v3);
}

double ImsTcpSocket::shutdown@<D0>(ImsTcpSocket *this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v3;
  uint64_t v5;
  int v6;
  double result;
  uint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  v3 = (_DWORD *)*((_QWORD *)this + 5);
  if (!v3 || *v3 == -1)
  {
    result = 0.0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    v6 = 1073741827;
    goto LABEL_11;
  }
  if (((*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 80))(this) & 1) != 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"shutting down socket", 20);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    if (shutdown(**((_DWORD **)this + 5), 1))
    {
      v6 = *__error();
      result = 0.0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_QWORD *)a2 = &off_1E78B7238;
      *(_QWORD *)(a2 + 8) = &_posixDomain;
LABEL_11:
      *(_DWORD *)(a2 + 16) = v6;
      return result;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Socket not  yet connected. Queue up shutdown", 44);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    *((_BYTE *)this + 105) = 1;
  }
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

void sub_1BEFE1D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsTcpSocket::reset(ImsTcpSocket *this)
{
  int *v1;
  int v3;
  NSObject *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;

  v1 = (int *)*((_QWORD *)this + 5);
  if (v1)
  {
    v3 = *v1;
    if (*v1 != -1)
    {
      v6 = 1;
      setsockopt(v3, 0xFFFF, 128, &v6, 8u);
      v4 = *((_QWORD *)this + 20);
      if (v4)
      {
        dispatch_source_cancel(v4);
        *((_QWORD *)this + 20) = 0;
      }
      v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
      *((_QWORD *)this + 18) = 0;
      *((_QWORD *)this + 19) = 0;
      if (v5)
        std::__shared_weak_count::__release_weak(v5);
      ImsSocket::close(this);
    }
  }
}

uint64_t ImsTcpSocket::sendOverSocket(ImsTcpSocket *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(ImsTcpSocket *, const unsigned __int8 *))(*(_QWORD *)this + 64))(this, a2);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::sendOverSocket(ImsTcpSocket *this, const unsigned __int8 *a2)
{
  return (*(uint64_t (**)(char *, const unsigned __int8 *))(*((_QWORD *)this - 10) + 64))((char *)this - 80, a2);
}

uint64_t ImsTcpSocket::sendOverSocket(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::sendOverSocket(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 - 80) + 72))(a1 - 80);
}

uint64_t ImsTcpSocket::isSocketConnected(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 80))(this);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::isSocketConnected(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 80))((char *)this - 80);
}

uint64_t ImsTcpSocket::didRemoteEndClose(ImsTcpSocket *this)
{
  return *((unsigned __int8 *)this + 136);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::didRemoteEndClose(ImsTcpSocket *this)
{
  return *((unsigned __int8 *)this + 56);
}

uint64_t ImsTcpSocket::shutdownSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 88))(this);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::shutdownSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 88))((char *)this - 80);
}

uint64_t ImsTcpSocket::closeSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 8))(this);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::closeSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 8))((char *)this - 80);
}

uint64_t ImsTcpSocket::resetSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 96))(this);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::resetSocket(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 96))((char *)this - 80);
}

uint64_t ImsTcpSocket::socketName(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 104))(this);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::socketName(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 104))((char *)this - 80);
}

uint64_t ImsTcpSocket::socketProtocol(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(ImsTcpSocket *))(*(_QWORD *)this + 112))(this);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::socketProtocol(ImsTcpSocket *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 112))((char *)this - 80);
}

uint64_t ImsTcpSocket::remoteEndAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 96);
  *a2 = *(_QWORD *)(this + 88);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t `non-virtual thunk to'ImsTcpSocket::remoteEndAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 16);
  *a2 = *(_QWORD *)(this + 8);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

void ImsTcpSocket::initializeIncomingSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, uint64_t a3@<X2>, dispatch_object_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  const void *v13;
  _QWORD v14[2];

  v13 = *(const void **)(a6 + 8);
  v14[1] = v13;
  if (v13)
    CFRetain(v13);
  v14[0] = &off_1E78B7BD8;
  ImsTcpSocket::_initializeIncoming(a1, a2, a3, a4, a5, a7);
  ims::CFType::~CFType((ims::CFType *)v14);
}

void sub_1BEFE1FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ImsTcpSocket::initializeIncomingSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, uint64_t a3@<X2>, dispatch_object_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X6>, uint64_t a7@<X8>)
{
  ImsTcpSocket::initializeIncomingSocket(a1 - 80, a2, a3, a4, a5, a6, a7);
}

double `non-virtual thunk to'ImsTcpSocket::isPortReuseAllowed@<D0>(ImsTcpSocket *this@<X0>, uint64_t a2@<X8>)
{
  return ImsSocket::allowPortReuse((ImsTcpSocket *)((char *)this - 80), a2);
}

BOOL ImsTcpSocket::socketInterfaceInitialized(ImsTcpSocket *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 5);
  return v1 && *v1 != -1;
}

BOOL `non-virtual thunk to'ImsTcpSocket::socketInterfaceInitialized(ImsTcpSocket *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this - 5);
  return v1 && *v1 != -1;
}

uint64_t ImsTcpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t `non-virtual thunk to'ImsTcpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this - 48);
  *a2 = *(_QWORD *)(this - 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *ImsTcpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), a2);
}

_QWORD *`non-virtual thunk to'ImsTcpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 - 56), a2);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::socketInterfaceDescriptor(ImsTcpSocket *this)
{
  return ImsSocket::socketDescriptor((ImsTcpSocket *)((char *)this - 80));
}

uint64_t ImsTcpSocket::socketDebugMask(ImsTcpSocket *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::socketDebugMask(ImsTcpSocket *this)
{
  return *((unsigned int *)this - 2);
}

uint64_t ImsTcpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t `non-virtual thunk to'ImsTcpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this - 8) = a2;
  return this;
}

void ImsTcpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 152);
  *(_QWORD *)(a1 + 144) = v3;
  *(_QWORD *)(a1 + 152) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void `non-virtual thunk to'ImsTcpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 64) = v3;
  *(_QWORD *)(a1 + 72) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void `non-virtual thunk to'ImsTcpSocket::setDscpClass(uint64_t a1, int a2)
{
  ImsSocket::setDscpClass(a1 - 80, a2);
}

void ImsTcpSocket::_handshakeDone(uint64_t a1@<X8>)
{
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
}

uint64_t ImsTcpSocket::isConnected(ImsTcpSocket *this)
{
  return *((unsigned __int8 *)this + 104);
}

_QWORD *ImsTcpSocket::protocol@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TCP");
}

uint64_t ImsTcpSocket::isTls(ImsTcpSocket *this)
{
  return 0;
}

void ImsTcpSocket::resetSocketDelegate(ImsTcpSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  *((_QWORD *)this + 18) = 0;
  *((_QWORD *)this + 19) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t ImsTcpSocket::setForcedTcpKeepAlive(uint64_t this, char a2)
{
  *(_BYTE *)(this + 168) = a2;
  return this;
}

void `non-virtual thunk to'ImsTcpSocket::resetSocketDelegate(ImsTcpSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t `non-virtual thunk to'ImsTcpSocket::setForcedTcpKeepAlive(uint64_t this, char a2)
{
  *(_BYTE *)(this + 88) = a2;
  return this;
}

void std::__list_imp<std::vector<unsigned char>>::clear(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v3 = *a1;
    v2 = (uint64_t *)a1[1];
    v4 = *v2;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v3 + 8) = v4;
    a1[2] = 0;
    while (v2 != a1)
    {
      v5 = (uint64_t *)v2[1];
      std::__list_imp<std::vector<unsigned char>>::__delete_node[abi:ne180100]<>((int)a1, v2);
      v2 = v5;
    }
  }
}

void std::__list_imp<std::vector<unsigned char>>::__delete_node[abi:ne180100]<>(int a1, _QWORD *__p)
{
  void *v3;

  v3 = (void *)__p[2];
  if (v3)
  {
    __p[3] = v3;
    operator delete(v3);
  }
  operator delete(__p);
}

uint64_t *std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
    MEMORY[0x1C3B87100](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::async<ImsTcpSocket::socketReadCallback(void)::$_0>(dispatch_queue_s *,std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v9;

  v9 = a1;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = *a1;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[1])
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_1BEFE2338(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsLogContainer::ImsLogContainer(uint64_t a1, const std::string *a2)
{
  _QWORD *v4;
  std::string *v5;

  *(_QWORD *)a1 = off_1E78CFE68;
  v4 = (_QWORD *)(a1 + 32);
  v5 = (std::string *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "default");
  std::string::basic_string[abi:ne180100]<0>(v4, (char *)&str_1_22);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::operator=(v5, a2);
  return a1;
}

void sub_1BEFE23F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::ImsLogContainer(uint64_t a1, const std::string *a2, const std::string *a3)
{
  std::string *v6;
  std::string *v7;

  *(_QWORD *)a1 = off_1E78CFE68;
  v6 = (std::string *)(a1 + 32);
  v7 = (std::string *)(a1 + 8);
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)(a1 + 8), "default");
  std::string::basic_string[abi:ne180100]<0>(v6, (char *)&str_1_22);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::operator=(v7, a2);
  std::string::operator=(v6, a3);
  return a1;
}

void sub_1BEFE24C0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

ImsResult *ImsLogContainer::logResult(ImsLogContainer *this, ImsResult *a2)
{
  _BYTE *v4;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a2 + 1) + 24))(*((_QWORD *)a2 + 1), *((unsigned int *)a2 + 4)))
  {
    v4 = (_BYTE *)(*(uint64_t (**)(ImsLogContainer *))(*(_QWORD *)this + 56))(this);
    (*(void (**)(ImsLogContainer *, _BYTE *))(*(_QWORD *)this + 16))(this, v4);
    (*(void (**)(ImsResult *, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v4);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v4[17] = 0;
  }
  return a2;
}

uint64_t ImsLogContainer::logResult@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v6;

  if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 24))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a2 + 16)))
  {
    v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v6);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v6);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
  }
  return ImsResult::ImsResult(a3, a2);
}

uint64_t ImsLogContainer::infoStream(ImsLogContainer *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
    {
LABEL_3:
      v2 = *((_QWORD *)this + 7);
      if (!v2)
      {
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v2 = ImsLogger::info(ims::_logger, (uint64_t)this + 8, (uint64_t)this + 32);
        *((_QWORD *)this + 7) = v2;
      }
      return v2;
    }
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::info(ims::_logger, (uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BEFE270C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::noticeStream(ImsLogContainer *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
    {
LABEL_3:
      v2 = *((_QWORD *)this + 8);
      if (!v2)
      {
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v2 = ImsLogger::notice(ims::_logger, (uint64_t)this + 8, (uint64_t)this + 32);
        *((_QWORD *)this + 8) = v2;
      }
      return v2;
    }
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::notice(ims::_logger, (uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BEFE2800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::warnStream(ImsLogContainer *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
    {
LABEL_3:
      v2 = *((_QWORD *)this + 9);
      if (!v2)
      {
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v2 = ImsLogger::warn(ims::_logger, (uint64_t)this + 8, (uint64_t)this + 32);
        *((_QWORD *)this + 9) = v2;
      }
      return v2;
    }
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::warn(ims::_logger, (uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BEFE28F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::errorStream(ImsLogContainer *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
    {
LABEL_3:
      v2 = *((_QWORD *)this + 10);
      if (!v2)
      {
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v2 = ImsLogger::error(ims::_logger, (uint64_t)this + 8, (uint64_t)this + 32);
        *((_QWORD *)this + 10) = v2;
      }
      return v2;
    }
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::error(ims::_logger, (uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BEFE29E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::spamStream(ImsLogContainer *this)
{
  uint64_t v2;
  void *__p[2];
  char v5;

  if (*((char *)this + 55) < 0)
  {
    if (*((_QWORD *)this + 5))
    {
LABEL_3:
      v2 = *((_QWORD *)this + 12);
      if (!v2)
      {
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v2 = ImsLogger::spam(ims::_logger, (uint64_t)this + 8, (uint64_t)this + 32);
        *((_QWORD *)this + 12) = v2;
      }
      return v2;
    }
  }
  else if (*((_BYTE *)this + 55))
  {
    goto LABEL_3;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::spam(ims::_logger, (uint64_t)this + 8, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
  return v2;
}

void sub_1BEFE2ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsLogContainer::facility(ImsLogContainer *this)
{
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  return ImsLogger::facilityWithName(ims::_logger, (std::string *)((char *)this + 8), 1);
}

uint64_t ImsLogContainerWrapper::infoStream(ImsLogContainerWrapper *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::noticeStream(ImsLogContainerWrapper *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::warnStream(ImsLogContainerWrapper *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::errorStream(ImsLogContainerWrapper *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 56))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::debugStream(ImsLogContainerWrapper *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 64))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::spamStream(ImsLogContainerWrapper *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((_QWORD *)this + 1);
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 72))(v1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  return v2;
}

uint64_t ImsLogContainerWrapper::facility(ImsLogContainerWrapper *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1));
}

void ImsLogWriter::write(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  std::string __p;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x4002000000;
  v5[3] = __Block_byref_object_copy__3;
  v5[4] = __Block_byref_object_dispose__3;
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  v3 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v3 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v3;
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN12ImsLogWriter5writeERKN3ctu10LogMessageE_block_invoke;
  v4[3] = &unk_1E78CFC80;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

__n128 __Block_byref_object_copy__3(uint64_t a1, uint64_t a2)
{
  __n128 result;

  result = *(__n128 *)(a2 + 40);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__3(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t ___ZN12ImsLogWriter5writeERKN3ctu10LogMessageE_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _BYTE *v4;
  uint64_t result;

  v2 = *(_QWORD **)(a1 + 40);
  v3 = v2[1];
  v4 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(v3 + 64))(++v2);
  (*(void (**)(_QWORD *, _BYTE *))(*v2 + 16))(v2, v4);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v4 + 32))(v4, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  result = (*(uint64_t (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v4[17] = 0;
  return result;
}

void ImsDebugLogWriter::write(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  _QWORD v4[6];
  _QWORD v5[5];
  std::string __p;

  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x4002000000;
  v5[3] = __Block_byref_object_copy__3;
  v5[4] = __Block_byref_object_dispose__3;
  memset(&__p, 0, sizeof(__p));
  if (*(char *)(a2 + 71) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  else
    __p = *(std::string *)(a2 + 48);
  v3 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v3 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v3;
  }
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN17ImsDebugLogWriter5writeERKN3ctu10LogMessageE_block_invoke;
  v4[3] = &unk_1E78CFCA8;
  v4[4] = v5;
  v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void ___ZN17ImsDebugLogWriter5writeERKN3ctu10LogMessageE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  _BYTE *v3;
  void *__p[2];
  char v5;

  v2 = *(_QWORD *)(a1 + 40);
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_22);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = (_BYTE *)ImsLogger::debug(ims::_logger, v2 + 8, (uint64_t)__p);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)v3 + 32))(v3, *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8) + 40);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v3[17] = 0;
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_1BEFE305C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsLogWriter::~ImsLogWriter(ImsLogWriter *this)
{
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'ImsLogWriter::~ImsLogWriter(ImsLogWriter *this)
{
  JUMPOUT(0x1C3B87100);
}

void ImsDebugLogWriter::~ImsDebugLogWriter(void **this)
{
  *this = off_1E78CFDE8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78CFDE8;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipPreconditions::ForkStatus::ForkStatus(uint64_t a1, uint64_t a2, std::string *__str)
{
  *(_QWORD *)a1 = off_1E78CFEC8;
  *(_QWORD *)(a1 + 8) = a2;
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 28) = 0u;
  *(_OWORD *)(a1 + 44) = 0u;
  *(_DWORD *)(a1 + 60) = 0;
  *(_QWORD *)(a1 + 64) = 1;
  *(_QWORD *)(a1 + 16) = a2;
  std::string::operator=((std::string *)(a1 + 40), __str);
  return a1;
}

void sub_1BEFE324C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

BOOL SipPreconditions::ForkStatus::setSatisfied(uint64_t a1, int a2, int a3, int a4)
{
  _BOOL4 v5;
  _BYTE *v6;
  _QWORD *v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  void *v12[2];
  char v13;
  void *__p;
  char v15;

  if (*(_DWORD *)(a1 + 28) != 5 || !*(_BYTE *)(a1 + 36))
    goto LABEL_5;
  if (*(_BYTE *)(a1 + 37))
  {
    if (*(_DWORD *)(a1 + 32) == 3)
    {
LABEL_5:
      v5 = 1;
      goto LABEL_6;
    }
    v5 = *(_DWORD *)(a1 + 64) != 3;
  }
  else
  {
    v5 = 0;
  }
LABEL_6:
  if (a4)
    *(_BYTE *)(a1 + 37) = 1;
  if (a2)
    *(_DWORD *)(a1 + 64) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  if (v5)
  {
    v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v6);
    v7 = (_QWORD *)*((_QWORD *)v6 + 1);
    v8 = "remote preconditions have already been satisfied";
    v9 = 48;
LABEL_21:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)v8, v9);
    v6[17] = 0;
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6[17] = 0;
    return !v5;
  }
  if (*(char *)(a1 + 63) < 0)
    v10 = *(_QWORD *)(a1 + 48);
  else
    v10 = *(unsigned __int8 *)(a1 + 63);
  v6 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v6);
  v7 = (_QWORD *)*((_QWORD *)v6 + 1);
  if (!v10)
  {
    v8 = "remote preconditions have been satisfied";
    v9 = 40;
    goto LABEL_21;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)"remote preconditions have been satisfied in fork ", 49);
  v6[17] = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v12, (const std::string *)(a1 + 40));
  (*(void (**)(_BYTE *, void **))(*(_QWORD *)v6 + 56))(v6, v12);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v6[17] = 0;
  if (v15 < 0)
    operator delete(__p);
  if (v13 < 0)
    operator delete(v12[0]);
  return !v5;
}

void sub_1BEFE3420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::AccessNetwork::~AccessNetwork(&a9);
  _Unwind_Resume(a1);
}

void SipPreconditions::ForkStatus::setPreconditionsEnabled(SipPreconditions::ForkStatus *this, int a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  void *__p;
  char v10;

  v4 = (*(uint64_t (**)(SipPreconditions::ForkStatus *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipPreconditions::ForkStatus *, uint64_t))(*(_QWORD *)this + 16))(this, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Preconditions ", 14);
  *(_BYTE *)(v4 + 17) = 0;
  if (a2)
    v5 = "enabled";
  else
    v5 = "disabled";
  if (a2)
    v6 = 7;
  else
    v6 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v5, v6);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" in fork ", 9);
  *(_BYTE *)(v4 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v7, (const std::string *)((char *)this + 40));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 56))(v4, v7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v10 < 0)
    operator delete(__p);
  if (v8 < 0)
    operator delete(v7[0]);
  *((_BYTE *)this + 36) = a2;
}

void sub_1BEFE3548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::AccessNetwork::~AccessNetwork(&a9);
  _Unwind_Resume(a1);
}

void SipPreconditions::ForkStatus::setNeedToSendUpdate(SipPreconditions::ForkStatus *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9[2];
  char v10;
  void *__p;
  char v12;

  if (*((unsigned __int8 *)this + 38) != a2)
  {
    *((_BYTE *)this + 38) = a2;
    if (*((char *)this + 63) < 0)
      v4 = *((_QWORD *)this + 6);
    else
      v4 = *((unsigned __int8 *)this + 63);
    v5 = (*(uint64_t (**)(SipPreconditions::ForkStatus *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPreconditions::ForkStatus *, uint64_t))(*(_QWORD *)this + 16))(this, v5);
    if (a2)
      v6 = "set";
    else
      v6 = "cleared";
    if (a2)
      v7 = 3;
    else
      v7 = 7;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
    *(_BYTE *)(v5 + 17) = 0;
    v8 = *(_QWORD **)(v5 + 8);
    if (v4)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" needToSendUpdate flag in fork ", 31);
      *(_BYTE *)(v5 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v9, (const std::string *)((char *)this + 40));
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 56))(v5, v9);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v12 < 0)
        operator delete(__p);
      if (v10 < 0)
        operator delete(v9[0]);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" needToSendUpdate flag in unknown fork", 38);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
    }
  }
}

void sub_1BEFE36B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  ims::AccessNetwork::~AccessNetwork(&a9);
  _Unwind_Resume(a1);
}

void SipPreconditions::~SipPreconditions(SipPreconditions *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E78CFF28;
  v2 = (_QWORD *)((char *)this + 64);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 9) = 0;
  *v2 = 0;
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_1E78CFF28;
  v2 = (_QWORD *)((char *)this + 64);
  std::__tree<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>,ReasonCompare,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<BambiCallTerminationReason>>>>::destroy((uint64_t)this + 56, *((_QWORD **)this + 8));
  *((_QWORD *)this + 7) = v2;
  *((_QWORD *)this + 9) = 0;
  *v2 = 0;
  JUMPOUT(0x1C3B87100);
}

_QWORD *SipPreconditions::logPrefix(SipPreconditions *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Preconditions: ", 15);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void **SipPreconditions::forkStatusWithTag@<X0>(__int128 *a1@<X0>, std::string *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t **v8;
  void **result;
  char *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  __int128 *v14;

  v8 = (uint64_t **)a1 + 7;
  result = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1 + 56, (void **)&a2->__r_.__value_.__l.__data_);
  if (a1 + 4 == (__int128 *)result)
  {
    *a4 = 0;
    a4[1] = 0;
    if (a3)
    {
      v14 = a1;
      std::allocate_shared[abi:ne180100]<SipPreconditions::ForkStatus,std::allocator<SipPreconditions::ForkStatus>,SipPreconditions*,std::string const&,void>((uint64_t *)&v14, a2, a4);
      v14 = (__int128 *)a2;
      v13 = std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v8, (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, &v14);
      return (void **)std::shared_ptr<IpAddress>::operator=[abi:ne180100](v13 + 7, a4);
    }
  }
  else
  {
    *a4 = (uint64_t)result[7];
    v10 = (char *)result[8];
    a4[1] = (uint64_t)v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
  return result;
}

void sub_1BEFE3868(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipPreconditions::initializeMobileOriginated(unsigned int *a1, _OWORD *a2)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  void *__p[2];
  char v7;

  *((_BYTE *)a1 + 93) = 1;
  v3 = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)(a1 + 6) = *a2;
  *(_OWORD *)((char *)a1 + 33) = v3;
  *((_BYTE *)a1 + 92) = 0;
  a1[22] = 5;
  v4 = a1[6];
  if ((v4 - 3) < 2)
  {
    v4 = 3;
LABEL_4:
    a1[21] = v4;
    goto LABEL_6;
  }
  if (v4 == 2)
    goto LABEL_4;
  a1[22] = 1;
  a1[20] = 1;
LABEL_6:
  v5 = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(unsigned int *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Local desired precondition strength is ", 39);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1BEFE3990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::initializeMobileTerminated(SipPreconditions *this, _OWORD *a2, SipRequest *a3)
{
  __int128 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  SipUriHeader *v9;
  __int128 *v10;
  uint64_t v11;
  SipUriHeader *v12;
  __int128 *v13;

  v5 = *(_OWORD *)((char *)a2 + 9);
  *(_OWORD *)((char *)this + 24) = *a2;
  *(_OWORD *)((char *)this + 33) = v5;
  *((_BYTE *)this + 92) = 0;
  *((_DWORD *)this + 22) = 5;
  v6 = *((_DWORD *)this + 6);
  if ((v6 - 3) < 2)
  {
    v6 = 3;
LABEL_4:
    *((_DWORD *)this + 21) = v6;
    goto LABEL_6;
  }
  if (v6 == 2)
    goto LABEL_4;
  v7 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Preconditions NOT supported by network", 38);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  *((_DWORD *)this + 22) = 1;
  *((_DWORD *)this + 20) = 1;
LABEL_6:
  v8 = SipPreconditions::internalInitializeMT(this, a3);
  if ((_DWORD)v8)
  {
    v9 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a3);
    if (v9)
      v10 = SipUriHeader::tag(v9);
    else
      v10 = &ims::kEmptyString;
    if (SipPreconditions::preconditionsEnabled((uint64_t)this, (void **)v10))
    {
      *((_BYTE *)this + 92) = 0;
    }
    else
    {
      *((_BYTE *)this + 92) = 1;
      v11 = *((_QWORD *)this + 2);
      v12 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a3);
      if (v12)
        v13 = SipUriHeader::tag(v12);
      else
        v13 = &ims::kEmptyString;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 24))(v11, v13);
    }
  }
  return v8;
}

uint64_t SipPreconditions::internalInitializeMT(SipPreconditions *this, const SipRequest *a2)
{
  SipUriHeader *v4;
  __int128 *v5;
  char *v6;
  std::__shared_weak_count *v7;
  SDPModel *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  _DWORD *v18;
  int v19;
  _DWORD *v20;
  int v22;
  SipPreconditions::ForkStatus *v23;
  _BOOL4 v24;
  _BOOL4 v25;
  SipPreconditions::ForkStatus *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  int v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v39;
  void *__p;
  _DWORD *v41;
  uint64_t v42;
  SDPModel *v43;
  std::__shared_weak_count *v44;
  SipPreconditions::ForkStatus *v45;
  std::__shared_weak_count *v46;

  v4 = (SipUriHeader *)SipMessage::header<SipFromHeader>((uint64_t)a2);
  if (v4)
    v5 = SipUriHeader::tag(v4);
  else
    v5 = &ims::kEmptyString;
  v45 = 0;
  v46 = 0;
  SipPreconditions::forkStatusWithTag((__int128 *)this, (std::string *)v5, 1, (uint64_t *)&v45);
  v6 = SipMessage::body<SipSdpBody>((uint64_t)a2);
  if (v6)
  {
    v8 = (SDPModel *)*((_QWORD *)v6 + 1);
    v7 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
    v43 = v8;
    v44 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    v43 = 0;
    v44 = 0;
  }
  SipPreconditions::ForkStatus::setPreconditionsEnabled(v45, 0);
  if (!v8)
  {
    v13 = 0;
    *((_DWORD *)v45 + 16) = *((_DWORD *)this + 7);
    goto LABEL_36;
  }
  if (SDPModel::containsPreconditions((uint64_t)v8, 1, 3))
  {
    *((_DWORD *)v45 + 16) = 3;
    v11 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Remote side requests mandatory preconditions", 44);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (_BYTE *)(v11 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    if (!SDPModel::containsPreconditions((uint64_t)v8, 1, 2))
      goto LABEL_17;
    *((_DWORD *)v45 + 16) = 2;
    v14 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Remote side requests optional preconditions", 43);
    *(_BYTE *)(v14 + 17) = 0;
    v12 = (_BYTE *)(v14 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *v12 = 0;
LABEL_17:
  if (SDPModel::containsPreconditions((uint64_t)v8, 2, 3))
  {
    v15 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Remote side desires our use of mandatory preconditions", 54);
    *(_BYTE *)(v15 + 17) = 0;
    v16 = (_BYTE *)(v15 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13 = 3;
LABEL_21:
    *v16 = 0;
    goto LABEL_23;
  }
  if (SDPModel::containsPreconditions((uint64_t)v8, 2, 2))
  {
    v17 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Remote side desires our use of optional preconditions", 53);
    *(_BYTE *)(v17 + 17) = 0;
    v16 = (_BYTE *)(v17 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13 = 2;
    goto LABEL_21;
  }
  v13 = 0;
LABEL_23:
  __p = 0;
  v41 = 0;
  v42 = 0;
  SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&__p, 1);
  SDPModel::transactionPreconditionTable(v8, (SDPPreconditionTable *)&__p);
  v18 = __p;
  if (__p == v41)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    v20 = __p;
    do
    {
      if (v20[2] != 1 || *(_BYTE *)v20 == 0)
        v22 = 0;
      else
        v22 = v20[3];
      v19 |= v22;
      v20 += 5;
    }
    while (v20 != v41);
  }
  v23 = v45;
  *((_DWORD *)v45 + 8) = v19;
  *((_BYTE *)v23 + 37) = 1;
  if (v18)
  {
    v41 = v18;
    operator delete(v18);
  }
LABEL_36:
  std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
  v24 = SipMessage::supportsOption((uint64_t)a2, &__p);
  v25 = v24;
  if ((SHIBYTE(v42) & 0x80000000) == 0)
  {
    if (v24)
      goto LABEL_38;
LABEL_45:
    v29 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v29);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"incoming INVITE doesn't support preconditions.", 46);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    v28 = 1;
    *((_DWORD *)v45 + 7) = 1;
    if (!v7)
      goto LABEL_65;
    goto LABEL_61;
  }
  operator delete(__p);
  if (!v25)
    goto LABEL_45;
LABEL_38:
  v26 = v45;
  *((_DWORD *)v45 + 7) = 5;
  if (v13 != 3)
  {
    if (*((_DWORD *)this + 21) != 3 && *((_DWORD *)v26 + 16) != 3)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
      v30 = SipMessage::requiresOption((uint64_t)a2, &__p);
      if (SHIBYTE(v42) < 0)
        operator delete(__p);
      if (!v30)
      {
        v39 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v39);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"neither side requires preconditions, so let's skip them", 55);
        *(_BYTE *)(v39 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v39 + 17) = 0;
        goto LABEL_60;
      }
      v26 = v45;
    }
LABEL_53:
    SipPreconditions::ForkStatus::setPreconditionsEnabled(v26, 1);
    v31 = *((_DWORD *)this + 22);
    if (v31 != 1)
    {
      v31 = *((_DWORD *)this + 21);
      if ((v13 & 2) != 0 && v31 <= v13)
      {
        v31 = *((_DWORD *)this + 20);
        if (v31 >= v13)
          v31 = v13;
      }
    }
    *((_DWORD *)v45 + 17) = v31;
    v32 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Local preconditions are ", 24);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 32))(v32, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    if (SHIBYTE(v42) < 0)
      operator delete(__p);
LABEL_60:
    v28 = 1;
    if (!v7)
      goto LABEL_65;
    goto LABEL_61;
  }
  if (*((_DWORD *)this + 20) == 3)
    goto LABEL_53;
  v27 = (*(uint64_t (**)(SipPreconditions *))(*(_QWORD *)this + 48))(this);
  (*(void (**)(SipPreconditions *, uint64_t))(*(_QWORD *)this + 16))(this, v27);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Remote side requests mandatory preconditions, but we only support ", 66);
  *(_BYTE *)(v27 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v27 + 32))(v27, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v27 + 17) = 0;
  if (SHIBYTE(v42) < 0)
    operator delete(__p);
  v28 = 0;
  if (v7)
  {
LABEL_61:
    v33 = (unint64_t *)&v7->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
LABEL_65:
  v35 = v46;
  if (v46)
  {
    v36 = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v28;
}

void sub_1BEFE41AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

BOOL SipPreconditions::preconditionsEnabled(uint64_t a1, void **a2)
{
  void **v3;
  _DWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t *v10;
  unint64_t v11;

  if (*(_DWORD *)(a1 + 88) == 1)
    return 0;
  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v3)
    return 0;
  v4 = v3[7];
  v5 = (std::__shared_weak_count *)v3[8];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4 && v4[7] == 5)
  {
    v8 = *((unsigned __int8 *)v4 + 36) != 0;
    if (!v5)
      return v8;
  }
  else
  {
    v8 = 0;
    if (!v5)
      return v8;
  }
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return v8;
}

void SipPreconditions::initializeNewFork(uint64_t a1, std::string *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *__p[2];
  char v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v9 = 0;
  v10 = 0;
  SipPreconditions::forkStatusWithTag((__int128 *)a1, a2, 1, &v9);
  *(_DWORD *)(v9 + 68) = *(_DWORD *)(a1 + 84);
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Local preconditions are ", 24);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  v4 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEFE43F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void SipPreconditions::updateFromIncomingMessage(uint64_t a1, std::string *a2, uint64_t a3)
{
  char *v6;
  SDPModel *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _BOOL4 v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  int v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  char *v22;
  int v23;
  int v24;
  int v25;
  char *v26;
  int v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  BOOL v32;
  int *j;
  uint64_t v34;
  char *v35;
  int v36;
  int v38;
  uint64_t v39;
  uint64_t v40;
  SipPreconditions::ForkStatus *v41;
  SipPreconditions::ForkStatus *v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  SipPreconditions::ForkStatus *v46;
  int v47;
  uint64_t i;
  int v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  char *v56;
  uint64_t v57;
  void *v58[2];
  char v59;
  void *__p;
  char v61;
  SDPModel *v62;
  std::__shared_weak_count *v63;
  SipPreconditions::ForkStatus *v64;
  std::__shared_weak_count *v65;

  v64 = 0;
  v65 = 0;
  SipPreconditions::forkStatusWithTag((__int128 *)a1, a2, 1, (uint64_t *)&v64);
  v6 = SipMessage::body<SipSdpBody>(a3);
  if (!v6)
  {
    v8 = 0;
    v62 = 0;
    v63 = 0;
LABEL_10:
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"ignoring message with no incoming SDP", 37);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    goto LABEL_113;
  }
  v7 = (SDPModel *)*((_QWORD *)v6 + 1);
  v8 = (std::__shared_weak_count *)*((_QWORD *)v6 + 2);
  v62 = v7;
  v63 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  if (!v7)
    goto LABEL_10;
  if (v64)
  {
    v11 = *((_DWORD *)v64 + 7) == 5 && *((_BYTE *)v64 + 36) != 0;
    SipPreconditions::ForkStatus::setPreconditionsEnabled(v64, 0);
    v55 = 0;
    v56 = 0;
    v57 = 0;
    SDPPreconditionTable::SDPPreconditionTable((SDPPreconditionTable *)&v55, 1);
    if ((SDPModel::transactionPreconditionTable(v7, (SDPPreconditionTable *)&v55) & 1) == 0)
    {
      v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"no precondition table in incoming message", 41);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      *((_BYTE *)v64 + 37) = 1;
LABEL_110:
      if (v55)
      {
        v56 = (char *)v55;
        operator delete(v55);
      }
      v8 = v63;
      goto LABEL_113;
    }
    v14 = (char *)v55;
    if (v55 == v56)
    {
LABEL_24:
      *((_BYTE *)v64 + 24) = 0;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"remote side didn't ask for confirmation when our preconditions are satisfied", 76);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (!*(_BYTE *)(a1 + 34))
      {
        v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"but we're going to tell them anyway", 35);
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v18 + 17) = 0;
      }
    }
    else
    {
      v15 = *((unsigned __int8 *)v64 + 24);
      while (!v14[1] || *((_DWORD *)v14 + 2) != 2)
      {
        v14 += 20;
        if (v14 == v56)
          goto LABEL_24;
      }
      *((_BYTE *)v64 + 24) = 1;
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"remote side asked for confirmation when our preconditions are satisfied", 71);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      if (!v15)
      {
        v35 = (char *)v55;
        if (v55 == v56)
          goto LABEL_125;
        v36 = 0;
        do
        {
          if (*((_DWORD *)v35 + 2) != 2 || *v35 == 0)
            v38 = 0;
          else
            v38 = *((_DWORD *)v35 + 3);
          v36 |= v38;
          v35 += 20;
        }
        while (v35 != v56);
        if (!v36)
        {
LABEL_125:
          v39 = *(_QWORD *)(a1 + 16);
          if (v39)
          {
            if ((*(unsigned int (**)(uint64_t, std::string *))(*(_QWORD *)v39 + 32))(v39, a2))
              SipPreconditions::ForkStatus::setNeedToSendUpdate(v64, 1);
          }
        }
      }
    }
    v21 = (char *)v55;
    if (v55 == v56)
    {
      v24 = 0;
      v23 = 0;
      v25 = 0;
    }
    else
    {
      v22 = (char *)v55;
      while (*((_DWORD *)v22 + 2) != 1)
      {
        v22 += 20;
        if (v22 == v56)
        {
          v23 = 0;
          goto LABEL_35;
        }
      }
      v23 = *((_DWORD *)v22 + 4);
LABEL_35:
      v25 = 0;
      v26 = (char *)v55;
      do
      {
        if (*((_DWORD *)v26 + 2) != 1 || *v26 == 0)
          v28 = 0;
        else
          v28 = *((_DWORD *)v26 + 3);
        v25 |= v28;
        v26 += 20;
      }
      while (v26 != v56);
      do
      {
        if (*((_DWORD *)v21 + 2) == 2)
        {
          v24 = *((_DWORD *)v21 + 4);
          goto LABEL_48;
        }
        v21 += 20;
      }
      while (v21 != v56);
      v24 = 0;
LABEL_48:
      if (v23 == 3)
      {
        v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"remote side has mandatory preconditions", 39);
        *(_BYTE *)(v29 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v29 + 17) = 0;
        v23 = 3;
      }
    }
    if (*((_DWORD *)v64 + 17) == 3)
    {
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"we previously offered mandatory local preconditions", 51);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(v58, "precondition");
    v31 = SipMessage::supportsOption(a3, v58);
    v32 = v31;
    if (v59 < 0)
    {
      operator delete(v58[0]);
      if (v32)
      {
LABEL_81:
        v41 = v64;
        *((_DWORD *)v64 + 7) = 5;
        if (v24 == 3 || *((_DWORD *)v41 + 17) == 3 || v23 == 3)
          goto LABEL_82;
        std::string::basic_string[abi:ne180100]<0>(v58, "precondition");
        v43 = SipMessage::requiresOption(a3, v58);
        if (v59 < 0)
          operator delete(v58[0]);
        if (v43)
        {
LABEL_82:
          if ((v23 & 0xFFFFFFFE) == 2)
          {
            if (v11)
            {
              v42 = v64;
            }
            else
            {
              v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v45);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v45 + 8), (uint64_t)"Preconditions now enabled for fork ", 35);
              *(_BYTE *)(v45 + 17) = 0;
              ObfuscatedString::ObfuscatedString((uint64_t)v58, (const std::string *)((char *)v64 + 40));
              (*(void (**)(uint64_t, void **))(*(_QWORD *)v45 + 56))(v45, v58);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v45 + 64))(v45, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v45 + 17) = 0;
              if (v61 < 0)
                operator delete(__p);
              if (v59 < 0)
                operator delete(v58[0]);
              v42 = v64;
              *((_BYTE *)v64 + 39) = 0;
            }
            SipPreconditions::ForkStatus::setPreconditionsEnabled(v42, 1);
          }
          v46 = v64;
          *((_DWORD *)v64 + 16) = v23;
          v47 = *(_DWORD *)(a1 + 88);
          if (v47 != 1)
          {
            v47 = *(_DWORD *)(a1 + 84);
            if ((v24 & 0xFFFFFFFE) == 2 && v47 <= v24)
            {
              v47 = *(_DWORD *)(a1 + 80);
              if (v47 >= v24)
                v47 = v24;
            }
          }
          *((_DWORD *)v46 + 17) = v47;
          for (i = *((_QWORD *)v7 + 52); ; i += 200)
          {
            if (i == *((_QWORD *)v7 + 53))
              goto LABEL_109;
            if (*(_DWORD *)(i + 12) == 2)
              break;
          }
          v49 = SDPPreconditionTable::rowsAreSatisfied((_QWORD *)(i + 160), 1);
          v46 = v64;
          if (!v49)
          {
LABEL_109:
            *((_BYTE *)v46 + 37) = 1;
            *((_DWORD *)v46 + 8) = v25;
            goto LABEL_110;
          }
          if (SipPreconditions::ForkStatus::setSatisfied((uint64_t)v64, v23, v25, 1))
            goto LABEL_66;
          goto LABEL_110;
        }
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"neither side requires preconditions, so let's skip them", 55);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v44 + 17) = 0;
        goto LABEL_66;
      }
    }
    else if (v31)
    {
      goto LABEL_81;
    }
    if (*(_BYTE *)(a1 + 47))
    {
      for (j = (int *)v55; j != (int *)v56; j += 5)
      {
        if (j[4] >= 1)
        {
          v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v40);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v40 + 8), (uint64_t)"Supported header is not present, but we will ignore this carrier non-compliance issue.", 86);
          *(_BYTE *)(v40 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v40 + 64))(v40, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v40 + 17) = 0;
          goto LABEL_81;
        }
      }
    }
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v34);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)"remote fork ", 12);
    *(_BYTE *)(v34 + 17) = 0;
    ObfuscatedString::ObfuscatedString((uint64_t)v58, a2);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v34 + 56))(v34, v58);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v34 + 8), (uint64_t)" doesn't support preconditions.", 31);
    *(_BYTE *)(v34 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v34 + 64))(v34, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v34 + 17) = 0;
    if (v61 < 0)
      operator delete(__p);
    if (v59 < 0)
      operator delete(v58[0]);
    *((_DWORD *)v64 + 7) = 1;
LABEL_66:
    SipPreconditions::checkPreconditionStatus(a1, (uint64_t)a2);
    goto LABEL_110;
  }
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"no fork for tag ", 16);
  *(_BYTE *)(v13 + 17) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v58, a2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v13 + 56))(v13, v58);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v61 < 0)
    operator delete(__p);
  if (v59 < 0)
    operator delete(v58[0]);
LABEL_113:
  if (v8)
  {
    v50 = (unint64_t *)&v8->__shared_owners_;
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v52 = v65;
  if (v65)
  {
    v53 = (unint64_t *)&v65->__shared_owners_;
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1BEFE4DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  if (__p)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void SipPreconditions::checkPreconditionStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t *i;
  uint64_t v15;
  uint64_t v16;
  void *v17;
  std::__shared_weak_count *v18;
  char v19;
  void *__p;
  char v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;

  if (!*(_BYTE *)(a1 + 92))
  {
    if ((SipPreconditions::localPreconditionsSatisfied(a1, (void **)a2) & 1) != 0)
    {
      v22 = 0;
      v23 = 0;
      v24 = 0;
      v4 = *(unsigned __int8 *)(a2 + 23);
      if ((v4 & 0x80u) != 0)
        v4 = *(_QWORD *)(a2 + 8);
      if (v4)
      {
        v17 = 0;
        v18 = 0;
        SipPreconditions::forkStatusWithTag((__int128 *)a1, (std::string *)a2, 0, (uint64_t *)&v17);
        if (v17)
          std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100]((uint64_t)&v22, (uint64_t)v17, (uint64_t)v18);
        v5 = v18;
        if (v18)
        {
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
      }
      else
      {
        v9 = *(_QWORD **)(a1 + 56);
        if (v9 != (_QWORD *)(a1 + 64))
        {
          do
          {
            std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100]((uint64_t)&v22, v9[7], v9[8]);
            v10 = (_QWORD *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v9[2];
                v12 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != (_QWORD *)(a1 + 64));
        }
      }
      v13 = v22;
      for (i = v23; v13 != i; v13 += 2)
      {
        v15 = *v13;
        if (!*(_BYTE *)(*v13 + 39))
        {
          if (*(_DWORD *)(v15 + 28) == 5
            && *(_BYTE *)(v15 + 36)
            && (!*(_BYTE *)(v15 + 37) || *(_DWORD *)(v15 + 32) != 3 && *(_DWORD *)(v15 + 64) == 3))
          {
            v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"still waiting for remote preconditions in fork ", 47);
            *(_BYTE *)(v16 + 17) = 0;
            ObfuscatedString::ObfuscatedString((uint64_t)&v17, (const std::string *)a2);
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v16 + 56))(v16, &v17);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v16 + 17) = 0;
            if (v21 < 0)
              operator delete(__p);
            if (v19 < 0)
              operator delete(v17);
          }
          else
          {
            *(_BYTE *)(v15 + 39) = 1;
            (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), v15 + 40);
          }
        }
      }
      v17 = &v22;
      std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v17);
    }
    else
    {
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"still waiting for local preconditions", 37);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
    }
  }
}

void sub_1BEFE512C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  a10 = (void **)&a16;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

BOOL SipPreconditions::wantsPreconditionsRequiredHeader(uint64_t a1, void **a2, uint64_t a3)
{
  void **v5;
  _DWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  int v11;
  int *v12;
  char *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  _BOOL8 v18;
  unsigned __int8 *v19;
  uint64_t v20;
  uint64_t v21;
  const char *v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v39;

  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v5)
  {
    v7 = 0;
    v39 = 0;
LABEL_12:
    v12 = (int *)(a1 + 84);
LABEL_13:
    v11 = *v12;
    goto LABEL_14;
  }
  v6 = v5[7];
  v7 = (std::__shared_weak_count *)v5[8];
  v39 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (!v6)
    goto LABEL_12;
  v10 = v6[7];
  if (v10 == 5)
  {
    if (*((_BYTE *)v6 + 36))
    {
      v11 = v6[17];
      if (v6[16] != 3 || !*(_BYTE *)(a1 + 48))
        goto LABEL_14;
LABEL_35:
      v18 = 1;
      goto LABEL_61;
    }
    v12 = v6 + 17;
    goto LABEL_13;
  }
  if (v10 == 4)
    goto LABEL_35;
  v11 = v6[17];
LABEL_14:
  if (*(_BYTE *)(a1 + 35))
  {
    v13 = SipMessage::body<SipSdpBody>(a3);
    if (!v13)
    {
      v18 = 0;
LABEL_60:
      v7 = v39;
      goto LABEL_61;
    }
    v14 = *((_QWORD *)v13 + 1);
    v15 = (std::__shared_weak_count *)*((_QWORD *)v13 + 2);
    if (v15)
    {
      v16 = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = 0;
    if (!v14 || v11 != 3)
    {
LABEL_55:
      if (v15)
      {
        v34 = (unint64_t *)&v15->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      goto LABEL_60;
    }
    if (*(_BYTE *)(a1 + 48))
    {
      v19 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
      v20 = v19[23];
      if ((v20 & 0x80u) == 0)
        v21 = v19[23];
      else
        v21 = *((_QWORD *)v19 + 1);
      if (v21 == 6)
      {
        if ((v20 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v19, "UPDATE", *((_QWORD *)v19 + 1)))
            goto LABEL_53;
        }
        else
        {
          if (!v19[23])
            goto LABEL_53;
          v22 = "UPDATE";
          v18 = 1;
          while (*v19 == *(unsigned __int8 *)v22)
          {
            ++v19;
            ++v22;
            if (!--v20)
              goto LABEL_55;
          }
        }
      }
      v23 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
      v24 = v23[23];
      if ((v24 & 0x80u) == 0)
        v25 = v23[23];
      else
        v25 = *((_QWORD *)v23 + 1);
      if (v25 == 5)
      {
        if ((v24 & 0x80) != 0)
        {
          v18 = memcmp(*(const void **)v23, "PRACK", *((_QWORD *)v23 + 1)) == 0;
          goto LABEL_55;
        }
        if (v23[23])
        {
          v26 = v24 - 1;
          v27 = "PRACK";
          do
          {
            v29 = *v23++;
            v28 = v29;
            v31 = *(unsigned __int8 *)v27++;
            v30 = v31;
            v33 = v26-- != 0;
            v18 = v28 == v30;
          }
          while (v28 == v30 && v33);
          goto LABEL_55;
        }
LABEL_53:
        v18 = 1;
        goto LABEL_55;
      }
    }
    v18 = 0;
    goto LABEL_55;
  }
  v18 = 0;
LABEL_61:
  if (v7)
  {
    v36 = (unint64_t *)&v7->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return v18;
}

void sub_1BEFE5410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::addPreconditionsToOutgoingRequest(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v8;
  SipPreconditions::ForkStatus *v9;
  SipPreconditions::ForkStatus *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  SipPreconditions::ForkStatus *v23[2];
  void *__p;
  SipPreconditions::ForkStatus *v25;
  char v26;
  void *v27;
  std::__shared_weak_count *v28;

  v27 = 0;
  v28 = 0;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    SipPreconditions::forkStatusWithTag((__int128 *)a1, (std::string *)a2, 1, (uint64_t *)&__p);
    v10 = (SipPreconditions::ForkStatus *)__p;
    v9 = v25;
    v27 = __p;
    v28 = (std::__shared_weak_count *)v25;
    if (__p && (*((_DWORD *)__p + 7) != 5 || !*((_BYTE *)__p + 36)))
    {
      a3 = 1;
      goto LABEL_38;
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  if (!a3)
    goto LABEL_38;
  if (*(_BYTE *)(a1 + 32))
  {
    v11 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
    v12 = v11[23];
    if ((v12 & 0x80u) == 0)
      v13 = v11[23];
    else
      v13 = *((_QWORD *)v11 + 1);
    if (v13 == 6)
    {
      if ((v12 & 0x80) == 0)
      {
        if (v11[23])
        {
          v14 = "INVITE";
          while (*v11 == *(unsigned __int8 *)v14)
          {
            ++v11;
            ++v14;
            if (!--v12)
              goto LABEL_27;
          }
          goto LABEL_30;
        }
        goto LABEL_27;
      }
      if (!memcmp(*(const void **)v11, "INVITE", *((_QWORD *)v11 + 1)))
      {
LABEL_27:
        std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
        SipMessage::addSupportedOption((SipMessage *)a3, &__p);
LABEL_28:
        if (v26 < 0)
          operator delete(__p);
      }
    }
  }
  else
  {
    if (a4)
      goto LABEL_27;
    if (SipPreconditions::wantsPreconditionsRequiredHeader(a1, (void **)a2, a3))
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "precondition");
      SipMessage::addRequiredOption((SipMessage *)a3, &__p);
      goto LABEL_28;
    }
    if (*(_DWORD *)(a1 + 88) != 1)
      goto LABEL_27;
  }
LABEL_30:
  v23[0] = v10;
  v23[1] = v9;
  if (v9)
  {
    v15 = (unint64_t *)((char *)v9 + 8);
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  a3 = SipPreconditions::addPreconditionsToOutgoingMessage(a1, v23, a3);
  if (v9)
  {
    v17 = (unint64_t *)((char *)v9 + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      (*(void (**)(SipPreconditions::ForkStatus *))(*(_QWORD *)v9 + 16))(v9);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v9);
    }
  }
LABEL_38:
  v19 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  return a3;
}

void sub_1BEFE56A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::addPreconditionsToOutgoingMessage(uint64_t a1, SipPreconditions::ForkStatus **a2, uint64_t a3)
{
  SipPreconditions::ForkStatus *v6;
  uint64_t v7;
  uint64_t v8;
  char *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  SDPMedia *v15;
  SDPMedia *v16;
  SipPreconditions::ForkStatus *v17;
  int v18;
  int *v19;
  uint64_t v20;
  int v21;
  SipPreconditions::ForkStatus *v22;
  int v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::string v27;
  std::string __p;
  uint64_t v29;
  std::__shared_weak_count *v30;

  v6 = *a2;
  if (*a2 && (*((_DWORD *)v6 + 7) != 5 || !*((_BYTE *)v6 + 36))
    || *(_DWORD *)(a1 + 80) == 1
    || *(_DWORD *)(a1 + 88) == 1)
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"need to add preconditions, but preconditions are disabled", 57);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    return 1;
  }
  v10 = SipMessage::body<SipSdpBody>(a3);
  if (v10)
  {
    v12 = *((_QWORD *)v10 + 1);
    v11 = (std::__shared_weak_count *)*((_QWORD *)v10 + 2);
    v29 = v12;
    v30 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    if (v12)
    {
      v15 = *(SDPMedia **)(v12 + 416);
      v16 = *(SDPMedia **)(v12 + 424);
      while (v15 != v16)
      {
        SDPMedia::removePreconditions(v15);
        v15 = (SDPMedia *)((char *)v15 + 200);
      }
      v17 = *a2;
      if (*a2)
      {
        if (*((_DWORD *)v17 + 7) == 5
          && *((_BYTE *)v17 + 36)
          && !(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), (uint64_t)v17 + 40))
        {
          v18 = 0;
        }
        else
        {
          v18 = 3;
        }
        if (*a2)
        {
          v19 = (int *)((char *)*a2 + 68);
LABEL_28:
          SDPModel::setPrecondition(v12, 1, *v19, 3, v18, 0);
          v21 = *(_DWORD *)(a1 + 28);
          v22 = *a2;
          if (*a2)
          {
            v23 = *((_DWORD *)v22 + 8);
            if (*(_BYTE *)(a1 + 33))
              v21 = *((_DWORD *)v22 + 16);
          }
          else
          {
            v23 = 0;
          }
          SDPModel::setPrecondition(v12, 2, v21, 3, v23, *(_BYTE *)(a1 + 93) == 0);
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v24);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"added preconditions to outgoing ", 32);
          *(_BYTE *)(v24 + 17) = 0;
          (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)a3 + 48))(&v27, a3);
          LoggableString::LoggableString(&__p, &v27);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v24 + 40))(v24, &__p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v24 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v27.__r_.__value_.__l.__data_);
          goto LABEL_36;
        }
      }
      else
      {
        v18 = 0;
      }
      v19 = (int *)(a1 + 84);
      goto LABEL_28;
    }
  }
  else
  {
    v11 = 0;
    v29 = 0;
    v30 = 0;
  }
  if (*(_DWORD *)(a1 + 84) != 3)
  {
LABEL_36:
    if (*a2)
      SipPreconditions::ForkStatus::setNeedToSendUpdate(*a2, 0);
    v8 = 1;
    goto LABEL_39;
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"need to add preconditions, but there's no SDP", 45);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v8 = 0;
  *(_BYTE *)(v20 + 17) = 0;
LABEL_39:
  if (v11)
  {
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return v8;
}

void sub_1BEFE5A4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::addPreconditionsToOutgoingResponse(uint64_t a1, uint64_t a2, uint64_t a3, SipMessage *a4)
{
  uint64_t v5;
  unsigned __int8 *v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  const char *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  SipPreconditions::ForkStatus *v30[2];
  void *__p[2];
  char v32;
  uint64_t v33;
  SipPreconditions::ForkStatus *v34;

  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
  {
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"addPreconditionsToOutgoingResponse called with empty remote tag", 63);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v14 = 0;
    *(_BYTE *)(v13 + 17) = 0;
    return v14;
  }
  v33 = 0;
  v34 = 0;
  SipPreconditions::forkStatusWithTag((__int128 *)a1, (std::string *)a2, 0, &v33);
  if (v33)
  {
    if (*(_DWORD *)(v33 + 28) == 5 && *(_BYTE *)(v33 + 36))
    {
      if (!*(_BYTE *)(a1 + 32))
      {
        if (*(_DWORD *)(v33 + 68) != 3)
        {
          v21 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
          v22 = v21[23];
          if ((v22 & 0x80u) == 0)
            v23 = v21[23];
          else
            v23 = *((_QWORD *)v21 + 1);
          if (v23 != 6)
            goto LABEL_46;
          if ((v22 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v21, "INVITE", *((_QWORD *)v21 + 1)))
              goto LABEL_46;
          }
          else if (v21[23])
          {
            v24 = "INVITE";
            while (*v21 == *(unsigned __int8 *)v24)
            {
              ++v21;
              ++v24;
              if (!--v22)
                goto LABEL_45;
            }
            goto LABEL_46;
          }
LABEL_45:
          if (!SipPreconditions::wantsPreconditionsRequiredHeader(a1, (void **)a2, a3))
            goto LABEL_46;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
        SipMessage::addRequiredOption(a4, __p);
        if (v32 < 0)
          operator delete(__p[0]);
        goto LABEL_46;
      }
      v9 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 112))(a3);
      v10 = v9[23];
      if ((v10 & 0x80u) == 0)
        v11 = v9[23];
      else
        v11 = *((_QWORD *)v9 + 1);
      if (v11 == 6)
      {
        if ((v10 & 0x80) == 0)
        {
          if (v9[23])
          {
            v12 = "INVITE";
            while (*v9 == *(unsigned __int8 *)v12)
            {
              ++v9;
              ++v12;
              if (!--v10)
                goto LABEL_41;
            }
            goto LABEL_49;
          }
LABEL_41:
          if (SipPreconditions::wantsPreconditionsRequiredHeader(a1, (void **)a2, a3))
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
            SipMessage::addRequiredOption(a4, __p);
            goto LABEL_47;
          }
LABEL_46:
          std::string::basic_string[abi:ne180100]<0>(__p, "precondition");
          SipMessage::addSupportedOption(a4, __p);
LABEL_47:
          if (v32 < 0)
            operator delete(__p[0]);
          goto LABEL_49;
        }
        if (!memcmp(*(const void **)v9, "INVITE", *((_QWORD *)v9 + 1)))
          goto LABEL_41;
      }
LABEL_49:
      v25 = (std::__shared_weak_count *)v34;
      v30[0] = (SipPreconditions::ForkStatus *)v33;
      v30[1] = v34;
      if (v34)
      {
        v26 = (unint64_t *)((char *)v34 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
      }
      v14 = SipPreconditions::addPreconditionsToOutgoingMessage(a1, v30, (uint64_t)a4);
      if (v25)
      {
        p_shared_owners = (unint64_t *)&v25->__shared_owners_;
        do
          v29 = __ldaxr(p_shared_owners);
        while (__stlxr(v29 - 1, p_shared_owners));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
          std::__shared_weak_count::__release_weak(v25);
        }
      }
      goto LABEL_21;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"addPreconditionsToOutgoingResponse called when preconditions are disabled", 73);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    v14 = 1;
  }
  else
  {
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"addPreconditionsToOutgoingResponse called with invalid remote tag ", 66);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v14 = 0;
    *(_BYTE *)(v16 + 17) = 0;
  }
LABEL_21:
  v17 = (std::__shared_weak_count *)v34;
  if (v34)
  {
    v18 = (unint64_t *)((char *)v34 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  return v14;
}

void sub_1BEFE5EC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (a17 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::localPreconditionsSatisfied(uint64_t a1, void **a2)
{
  void **v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  if (!*(_QWORD *)(a1 + 16))
    return 1;
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v4)
    return 1;
  v5 = v4[7];
  v6 = (std::__shared_weak_count *)v4[8];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (v5 && v5[17] == 3 && v5[7] == 5 && *((_BYTE *)v5 + 36))
    v9 = (*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2);
  else
    v9 = 1;
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v9;
}

void sub_1BEFE6010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipPreconditions::handleLocalQoSEstablished(_QWORD **a1, void **a2)
{
  _QWORD *v3;
  _QWORD *v5;
  SipPreconditions::ForkStatus *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t v15;

  v3 = a1[2];
  if (v3 && ((*(uint64_t (**)(_QWORD *))(*v3 + 32))(v3) & 1) == 0)
  {
    if (SipPreconditions::localPreconditionsSatisfied((uint64_t)a1, a2))
    {
      v5 = a1[7];
      if (v5 != a1 + 8)
      {
        do
        {
          v6 = (SipPreconditions::ForkStatus *)v5[7];
          v7 = (std::__shared_weak_count *)v5[8];
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldxr(p_shared_owners);
            while (__stxr(v9 + 1, p_shared_owners));
          }
          if (*((_BYTE *)v6 + 24))
            SipPreconditions::ForkStatus::setNeedToSendUpdate(v6, 1);
          if (v7)
          {
            v10 = (unint64_t *)&v7->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v12 = (_QWORD *)v5[1];
          if (v12)
          {
            do
            {
              v13 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              v13 = (_QWORD *)v5[2];
              v14 = *v13 == (_QWORD)v5;
              v5 = v13;
            }
            while (!v14);
          }
          v5 = v13;
        }
        while (v13 != a1 + 8);
      }
      v15 = ((uint64_t (*)(_QWORD **))(*a1)[8])(a1);
      ((void (*)(_QWORD **, uint64_t))(*a1)[2])(a1, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"local preconditions have been satisfied", 39);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(_QWORD *, void **))(*a1[2] + 16))(a1[2], a2);
      SipPreconditions::checkPreconditionStatus((uint64_t)a1, (uint64_t)a2);
    }
    else
    {
      SipPreconditions::handleLocalPreconditionsSatisfied((uint64_t)a1, a2);
    }
  }
}

void sub_1BEFE61E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipPreconditions::handleLocalPreconditionsSatisfied(uint64_t a1, void **a2)
{
  uint64_t v4;
  _QWORD *v5;
  SipPreconditions::ForkStatus *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;

  if ((SipPreconditions::localPreconditionsSatisfied(a1, a2) & 1) == 0)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"local preconditions have been satisfied", 39);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), a2);
    v5 = *(_QWORD **)(a1 + 56);
    if (v5 != (_QWORD *)(a1 + 64))
    {
      do
      {
        v6 = (SipPreconditions::ForkStatus *)v5[7];
        v7 = (std::__shared_weak_count *)v5[8];
        if (v7)
        {
          p_shared_owners = (unint64_t *)&v7->__shared_owners_;
          do
            v9 = __ldxr(p_shared_owners);
          while (__stxr(v9 + 1, p_shared_owners));
        }
        SipPreconditions::ForkStatus::setNeedToSendUpdate(v6, 1);
        if (v7)
        {
          v10 = (unint64_t *)&v7->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        v12 = (_QWORD *)v5[1];
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = (_QWORD *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (_QWORD *)v5[2];
            v14 = *v13 == (_QWORD)v5;
            v5 = v13;
          }
          while (!v14);
        }
        v5 = v13;
      }
      while (v13 != (_QWORD *)(a1 + 64));
    }
    SipPreconditions::checkPreconditionStatus(a1, (uint64_t)a2);
  }
}

void sub_1BEFE6368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::vector<std::shared_ptr<SipPreconditions::ForkStatus>>::push_back[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  __int128 v21;
  uint64_t v22;

  v7 = *(_QWORD **)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 16);
  if ((unint64_t)v7 >= v6)
  {
    v11 = *(_QWORD **)a1;
    v12 = ((uint64_t)v7 - *(_QWORD *)a1) >> 4;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v14 = v6 - (_QWORD)v11;
    if (v14 >> 3 > v13)
      v13 = v14 >> 3;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
      v15 = 0xFFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15 >> 60)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v16 = (char *)operator new(16 * v15);
    v17 = &v16[16 * v12];
    *(_QWORD *)v17 = a2;
    *((_QWORD *)v17 + 1) = a3;
    if (a3)
    {
      v18 = (unint64_t *)(a3 + 8);
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
      v11 = *(_QWORD **)a1;
      v7 = *(_QWORD **)(a1 + 8);
    }
    if (v7 == v11)
    {
      v10 = v17 + 16;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
    }
    else
    {
      v20 = &v16[16 * v12];
      do
      {
        v21 = *((_OWORD *)v7 - 1);
        v7 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v7 = 0;
        v7[1] = 0;
      }
      while (v7 != v11);
      v11 = *(_QWORD **)a1;
      v22 = *(_QWORD *)(a1 + 8);
      v10 = v17 + 16;
      *(_QWORD *)a1 = v20;
      *(_QWORD *)(a1 + 8) = v17 + 16;
      *(_QWORD *)(a1 + 16) = &v16[16 * v15];
      while ((_QWORD *)v22 != v11)
      {
        v22 -= 16;
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
      }
    }
    if (v11)
      operator delete(v11);
  }
  else
  {
    *v7 = a2;
    v7[1] = a3;
    if (a3)
    {
      v8 = (unint64_t *)(a3 + 8);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
    v10 = v7 + 2;
  }
  *(_QWORD *)(a1 + 8) = v10;
}

BOOL SipPreconditions::needToSendUpdateInFork(uint64_t a1, void **a2)
{
  void **v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  if (!SipPreconditions::preconditionsEnabled(a1, a2))
  {
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"needToSendUpdateInFork: preconditions aren't enabled", 52);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9 = 0;
    *(_BYTE *)(v10 + 17) = 0;
    return v9;
  }
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 56, a2);
  if ((void **)(a1 + 64) == v4)
  {
    v6 = 0;
  }
  else
  {
    v5 = v4[7];
    v6 = (std::__shared_weak_count *)v4[8];
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v5)
    {
      if (*((_DWORD *)v5 + 7) == 5 && *((_BYTE *)v5 + 36) && *((_BYTE *)v5 + 38))
      {
        if (*((_BYTE *)v5 + 24))
        {
          v9 = 1;
          if (!v6)
            return v9;
        }
        else
        {
          v9 = *(unsigned __int8 *)(v5[2] + 34) == 0;
          if (!v6)
            return v9;
        }
      }
      else
      {
        v9 = 0;
        if (!v6)
          return v9;
      }
      goto LABEL_18;
    }
  }
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"needToSendUpdateInFork: no remote status", 40);
  *(_BYTE *)(v11 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v9 = 0;
  *(_BYTE *)(v11 + 17) = 0;
  if (!v6)
    return v9;
LABEL_18:
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldaxr(v12);
  while (__stlxr(v13 - 1, v12));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v9;
}

void sub_1BEFE6694(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipPreconditions::setNeedToSendUpdateInFork(__int128 *a1, std::string *a2, int a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  SipPreconditions::ForkStatus *v7;
  std::__shared_weak_count *v8;

  SipPreconditions::forkStatusWithTag(a1, a2, 1, (uint64_t *)&v7);
  SipPreconditions::ForkStatus::setNeedToSendUpdate(v7, a3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEFE671C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::printInfo(SipPreconditions *this, ImsOutStream *a2)
{
  _QWORD *v3;
  char *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  _QWORD *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  char *v20;
  BOOL v21;
  uint64_t result;
  void *v23[2];
  char v24;
  void *__p;
  char v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE v29[32];
  std::__shared_weak_count *v30;

  v3 = (_QWORD *)*((_QWORD *)this + 7);
  v4 = (char *)this + 64;
  if (v3 != (_QWORD *)((char *)this + 64))
  {
    while (1)
    {
      v30 = 0;
      memset(v29, 0, sizeof(v29));
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v29, (const std::string::value_type *)v3[4], v3[5]);
      }
      else
      {
        *(_OWORD *)v29 = *((_OWORD *)v3 + 2);
        *(_QWORD *)&v29[16] = v3[6];
      }
      v6 = v3[7];
      v5 = (std::__shared_weak_count *)v3[8];
      *(_QWORD *)&v29[24] = v6;
      v30 = v5;
      if (!v5)
        break;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
      v6 = *(_QWORD *)&v29[24];
      v9 = v30;
      v27 = *(_QWORD *)&v29[24];
      v28 = v30;
      if (!v30)
        goto LABEL_14;
      v10 = (unint64_t *)&v30->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      v12 = 0;
      if (!v6)
        goto LABEL_29;
LABEL_15:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Fork ", 5);
      *((_BYTE *)a2 + 17) = 0;
      ObfuscatedString::ObfuscatedString((uint64_t)v23, (const std::string *)(v6 + 40));
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 56))(a2, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      if (v26 < 0)
        operator delete(__p);
      if (v24 < 0)
        operator delete(v23[0]);
      if (*(_DWORD *)(v6 + 28) == 5 && *(_BYTE *)(v6 + 36))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"local ", 6);
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, v23);
        if (v24 < 0)
          operator delete(v23[0]);
        if (!*(_DWORD *)(v6 + 32))
          goto LABEL_29;
        v13 = (_QWORD *)*((_QWORD *)a2 + 1);
        if (*(_BYTE *)(v6 + 37))
        {
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"remote ", 7);
          *((_BYTE *)a2 + 17) = 0;
          (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, v23);
          if (v24 < 0)
            operator delete(v23[0]);
          goto LABEL_29;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"(no remote sdp)", 15);
      }
      else
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"none", 4);
      }
      *((_BYTE *)a2 + 17) = 0;
LABEL_29:
      if ((v12 & 1) == 0)
      {
        v14 = (unint64_t *)&v9->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v16 = v30;
      if (v30)
      {
        v17 = (unint64_t *)&v30->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      if ((v29[23] & 0x80000000) != 0)
        operator delete(*(void **)v29);
      v19 = (char *)v3[1];
      if (v19)
      {
        do
        {
          v20 = v19;
          v19 = *(char **)v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          v20 = (char *)v3[2];
          v21 = *(_QWORD *)v20 == (_QWORD)v3;
          v3 = v20;
        }
        while (!v21);
      }
      v3 = v20;
      if (v20 == v4)
        goto LABEL_49;
    }
    v9 = 0;
    v27 = v6;
    v28 = 0;
LABEL_14:
    v12 = 1;
    if (!v6)
      goto LABEL_29;
    goto LABEL_15;
  }
LABEL_49:
  result = (*(uint64_t (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void sub_1BEFE6A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::pair<std::string const,std::shared_ptr<MessageSession>>::~pair((uint64_t)&a20);
  _Unwind_Resume(a1);
}

BOOL SipPreconditions::remotePreconditionsSatisfiedInFork(void **a1, void **a2)
{
  void **v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 7), a2);
  if (a1 + 8 == v4)
  {
    v6 = 0;
LABEL_12:
    v10 = (*((uint64_t (**)(void **))*a1 + 7))(a1);
    (*((void (**)(void **, uint64_t))*a1 + 2))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"unknown remote tag ", 19);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9 = 0;
    *(_BYTE *)(v10 + 17) = 0;
    goto LABEL_13;
  }
  v5 = v4[7];
  v6 = (std::__shared_weak_count *)v4[8];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
    goto LABEL_12;
  if (*((_DWORD *)v5 + 7) == 5 && v5[36])
  {
    if (!v5[37])
    {
      v9 = 0;
      goto LABEL_13;
    }
    if (*((_DWORD *)v5 + 8) != 3)
    {
      v9 = *((_DWORD *)v5 + 16) != 3;
      goto LABEL_13;
    }
  }
  v9 = 1;
LABEL_13:
  if (v6)
  {
    v11 = (unint64_t *)&v6->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v9;
}

void sub_1BEFE6C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::preconditionsSatisfiedInFork(void **a1, void **a2)
{
  uint64_t result;

  if (!SipPreconditions::preconditionsEnabled((uint64_t)a1, a2))
    return 1;
  result = SipPreconditions::localPreconditionsSatisfied((uint64_t)a1, a2);
  if ((_DWORD)result)
    return SipPreconditions::remotePreconditionsSatisfiedInFork(a1, a2);
  return result;
}

uint64_t SipPreconditions::preconditionsSatisfiedInAnyFork(SipPreconditions *this)
{
  SipPreconditions *v1;
  uint64_t v2;
  SipPreconditions *v3;
  SipPreconditions *v4;
  BOOL v5;

  v1 = (SipPreconditions *)*((_QWORD *)this + 7);
  if (v1 == (SipPreconditions *)((char *)this + 64))
    return 0;
  while (1)
  {
    v2 = *((_QWORD *)v1 + 7);
    if (v2)
    {
      if (*(_DWORD *)(v2 + 28) != 5
        || !*(_BYTE *)(v2 + 36)
        || *(_BYTE *)(v2 + 37) && (*(_DWORD *)(v2 + 32) == 3 || *(_DWORD *)(v2 + 64) != 3))
      {
        break;
      }
    }
    v3 = (SipPreconditions *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(SipPreconditions **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (SipPreconditions *)*((_QWORD *)v1 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v1;
        v1 = v4;
      }
      while (!v5);
    }
    v1 = v4;
    if (v4 == (SipPreconditions *)((char *)this + 64))
      return 0;
  }
  return SipPreconditions::localPreconditionsSatisfied((uint64_t)this, (void **)v1 + 4);
}

BOOL SipPreconditions::preconditionsActiveInFork(void **a1, void **a2)
{
  void **v4;
  _DWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BOOL8 v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;

  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 7), a2);
  if (a1 + 8 == v4)
  {
    v6 = 0;
    goto LABEL_10;
  }
  v5 = v4[7];
  v6 = (std::__shared_weak_count *)v4[8];
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  if (!v5)
  {
LABEL_10:
    v10 = (*((uint64_t (**)(void **))*a1 + 7))(a1);
    (*((void (**)(void **, uint64_t))*a1 + 2))(a1, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"unknown remote tag ", 19);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v9 = 0;
    *(_BYTE *)(v10 + 17) = 0;
    if (!v6)
      return v9;
    goto LABEL_13;
  }
  if (v5[7] == 5)
  {
    v9 = *((unsigned __int8 *)v5 + 36) != 0;
    if (!v6)
      return v9;
  }
  else
  {
    v9 = 0;
    if (!v6)
      return v9;
  }
LABEL_13:
  v11 = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  return v9;
}

void sub_1BEFE6E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::preconditionsActiveInAnyFork(SipPreconditions *this)
{
  SipPreconditions *v1;
  uint64_t v2;
  SipPreconditions *v3;
  SipPreconditions *v4;
  BOOL v5;

  v1 = (SipPreconditions *)*((_QWORD *)this + 7);
  if (v1 == (SipPreconditions *)((char *)this + 64))
    return 0;
  while (1)
  {
    v2 = *((_QWORD *)v1 + 7);
    if (*(_DWORD *)(v2 + 28) == 5)
    {
      if (*(_BYTE *)(v2 + 36))
        break;
    }
    v3 = (SipPreconditions *)*((_QWORD *)v1 + 1);
    if (v3)
    {
      do
      {
        v4 = v3;
        v3 = *(SipPreconditions **)v3;
      }
      while (v3);
    }
    else
    {
      do
      {
        v4 = (SipPreconditions *)*((_QWORD *)v1 + 2);
        v5 = *(_QWORD *)v4 == (_QWORD)v1;
        v1 = v4;
      }
      while (!v5);
    }
    v1 = v4;
    if (v4 == (SipPreconditions *)((char *)this + 64))
      return 0;
  }
  return 1;
}

void SipPreconditions::setRemotePreconditionsSatisfiedInFork(__int128 *a1, std::string *a2, int a3)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *__p[2];
  char v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  SipPreconditions::forkStatusWithTag(a1, a2, 0, &v10);
  if (v10)
  {
    if (SipPreconditions::ForkStatus::setSatisfied(v10, 0, 3, a3))
    {
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_52);
      SipPreconditions::checkPreconditionStatus((uint64_t)a1, (uint64_t)__p);
      if (v9 < 0)
        operator delete(__p[0]);
    }
  }
  v5 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEFE6F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t SipPreconditions::supportLevelFromString(uint64_t a1)
{
  const char *v2;
  int v3;
  void *v4;
  void **v5;
  int v6;
  int v7;
  const char *v8;
  int v9;
  void *v10;
  void **v11;
  int v12;
  int v13;
  const char *v14;
  char v15;
  void **v16;
  const char *v17;
  char v18;
  void **v19;
  const char *v20;
  int v21;
  void *v22;
  const char *v23;
  _BOOL4 v24;
  _QWORD v26[2];
  char v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;

  std::string::basic_string[abi:ne180100]<0>(v30, "Required");
  if (*(char *)(a1 + 23) >= 0)
    v2 = (const char *)a1;
  else
    v2 = *(const char **)a1;
  v3 = v31;
  v4 = v30[0];
  if (v31 >= 0)
    v5 = v30;
  else
    v5 = (void **)v30[0];
  v6 = strcasecmp(v2, (const char *)v5);
  v7 = v6;
  if ((v3 & 0x80000000) == 0)
  {
    if (v6)
      goto LABEL_9;
    return 4;
  }
  operator delete(v4);
  if (!v7)
    return 4;
LABEL_9:
  std::string::basic_string[abi:ne180100]<0>(v30, "SupportedOptional");
  if (*(char *)(a1 + 23) >= 0)
    v8 = (const char *)a1;
  else
    v8 = *(const char **)a1;
  v9 = v31;
  v10 = v30[0];
  if (v31 >= 0)
    v11 = v30;
  else
    v11 = (void **)v30[0];
  v12 = strcasecmp(v8, (const char *)v11);
  v13 = v12;
  if ((v9 & 0x80000000) == 0)
  {
    if (v12)
      goto LABEL_17;
    return 2;
  }
  operator delete(v10);
  if (!v13)
    return 2;
LABEL_17:
  std::string::basic_string[abi:ne180100]<0>(v30, "SupportedMandatory");
  if (*(char *)(a1 + 23) >= 0)
    v14 = (const char *)a1;
  else
    v14 = *(const char **)a1;
  v15 = v31;
  if (v31 >= 0)
    v16 = v30;
  else
    v16 = (void **)v30[0];
  if (strcasecmp(v14, (const char *)v16))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SupportedButMandatory");
    if (*(char *)(a1 + 23) >= 0)
      v17 = (const char *)a1;
    else
      v17 = *(const char **)a1;
    v18 = v29;
    if (v29 >= 0)
      v19 = __p;
    else
      v19 = (void **)__p[0];
    if (!strcasecmp(v17, (const char *)v19))
    {
      v24 = 1;
      if (v18 < 0)
LABEL_40:
        operator delete(__p[0]);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "Supported");
      if (*(char *)(a1 + 23) >= 0)
        v20 = (const char *)a1;
      else
        v20 = *(const char **)a1;
      v21 = v27;
      v22 = (void *)v26[0];
      if (v27 >= 0)
        v23 = (const char *)v26;
      else
        v23 = (const char *)v26[0];
      v24 = strcasecmp(v20, v23) == 0;
      if (v21 < 0)
        operator delete(v22);
      if (v29 < 0)
        goto LABEL_40;
    }
    if ((v31 & 0x80) == 0)
      goto LABEL_43;
    goto LABEL_42;
  }
  v24 = 1;
  if (v15 < 0)
LABEL_42:
    operator delete(v30[0]);
LABEL_43:
  if (v24)
    return 3;
  else
    return 1;
}

void sub_1BEFE71A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(exception_object);
}

uint64_t SipPreconditions::strengthFromString(unsigned int *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  unsigned int *v4;
  BOOL v5;
  unsigned int v6;
  unsigned int *v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v11;
  unsigned int *v12;

  v2 = *((unsigned __int8 *)a1 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *((_QWORD *)a1 + 1);
  if (v2 == 4)
  {
    if (v3 >= 0)
      v7 = a1;
    else
      v7 = *(unsigned int **)a1;
    v8 = bswap32(*v7);
    v9 = v8 >= 0x6E6F6E65;
    v10 = v8 > 0x6E6F6E65;
    v11 = !v9;
    if (v10 == v11)
      return 1;
    else
      return a2;
  }
  else
  {
    if (v2 == 8)
    {
      if (v3 >= 0)
        v12 = a1;
      else
        v12 = *(unsigned int **)a1;
      v5 = *(_QWORD *)v12 == 0x6C616E6F6974706FLL;
      v6 = 2;
    }
    else
    {
      if (v2 != 9)
        return a2;
      if (v3 >= 0)
        v4 = a1;
      else
        v4 = *(unsigned int **)a1;
      v5 = (*(_QWORD *)v4 ^ 0x726F7461646E616DLL | *((unsigned __int8 *)v4 + 8) ^ 0x79) == 0;
      v6 = 3;
    }
    if (v5)
      return v6;
    else
      return a2;
  }
}

void SipPreconditions::ForkStatus::~ForkStatus(void **this)
{
  *this = off_1E78CFEC8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
}

{
  *this = off_1E78CFEC8;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::allocate_shared[abi:ne180100]<SipPreconditions::ForkStatus,std::allocator<SipPreconditions::ForkStatus>,SipPreconditions*,std::string const&,void>@<X0>(uint64_t *a1@<X1>, std::string *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;
  _QWORD *result;

  v6 = operator new(0x60uLL);
  result = std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::__shared_ptr_emplace[abi:ne180100]<SipPreconditions*,std::string const&,std::allocator<SipPreconditions::ForkStatus>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1BEFE7380(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::__shared_ptr_emplace[abi:ne180100]<SipPreconditions*,std::string const&,std::allocator<SipPreconditions::ForkStatus>,0>(_QWORD *a1, uint64_t *a2, std::string *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78CFFD8;
  SipPreconditions::ForkStatus::ForkStatus((uint64_t)(a1 + 3), *a2, a3);
  return a1;
}

void sub_1BEFE73CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CFFD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78CFFD8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipPreconditions::ForkStatus>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v10[3];
  uint64_t v11;

  v11 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v11, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    memset(v10, 0, sizeof(v10));
    std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v10);
    std::__tree<unsigned int>::__insert_node_at(a1, v11, v8, v10[0]);
    v7 = v10[0];
    v10[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100]((uint64_t)v10, 0);
  }
  return v7;
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  std::string *v7;
  __int128 *v8;
  __int128 v9;

  v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((_BYTE *)a3 + 16) = 0;
  v7 = (std::string *)(v6 + 4);
  v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
  }
  else
  {
    v9 = *v8;
    v6[6] = *((_QWORD *)v8 + 2);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEFE7564(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::shared_ptr<SipPreconditions::ForkStatus>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)v2 + 32);
    operator delete(v2);
  }
}

uint64_t BambiUnlistedEmergencyCall::BambiUnlistedEmergencyCall(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v5 = (std::__shared_weak_count *)a2[1];
  v20 = *a2;
  v21 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a3[1];
  v18 = *a3;
  v19 = (std::__shared_weak_count *)v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  BambiCall::BambiCall(a1, (uint64_t *)off_1E78D0168, &v20, &v18, a4);
  v11 = v19;
  if (v19)
  {
    v12 = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v21;
  if (v21)
  {
    v15 = (unint64_t *)&v21->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)a1 = &off_1E78D0048;
  *(_QWORD *)(a1 + 72) = &unk_1E78D00E8;
  *(_QWORD *)(a1 + 1816) = &unk_1E78D0148;
  *(_BYTE *)(a1 + 1824) = 0;
  *(_OWORD *)(a1 + 1832) = 0u;
  *(_OWORD *)(a1 + 1848) = 0u;
  *(_QWORD *)(a1 + 1864) = 0x40A7700000000000;
  *(_OWORD *)(a1 + 1984) = 0u;
  *(_OWORD *)(a1 + 1872) = 0u;
  *(_OWORD *)(a1 + 1888) = 0u;
  *(_OWORD *)(a1 + 1904) = 0u;
  *(_OWORD *)(a1 + 1920) = 0u;
  *(_OWORD *)(a1 + 1936) = 0u;
  *(_OWORD *)(a1 + 1952) = 0u;
  *(_OWORD *)(a1 + 1964) = 0u;
  return a1;
}

void sub_1BEFE7718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall(BambiUnlistedEmergencyCall *this)
{
  *(_QWORD *)this = &off_1E78D0048;
  *((_QWORD *)this + 9) = &unk_1E78D00E8;
  *((_QWORD *)this + 227) = &unk_1E78D0148;
  BambiUnlistedEmergencyCall::clearLocation(this);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1984);
  if (*((char *)this + 1975) < 0)
    operator delete(*((void **)this + 244));
  if (*((char *)this + 1951) < 0)
    operator delete(*((void **)this + 241));
  if (*((char *)this + 1927) < 0)
    operator delete(*((void **)this + 238));
  if (*((char *)this + 1903) < 0)
    operator delete(*((void **)this + 235));
  BambiCall::~BambiCall(this, (uint64_t *)off_1E78D0168);
}

{
  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall(this);
  JUMPOUT(0x1C3B87100);
}

void BambiUnlistedEmergencyCall::clearLocation(BambiUnlistedEmergencyCall *this)
{
  _QWORD *v2;
  uint64_t v3;
  void **v4;
  void **v5;
  void **v6;
  void **v7;

  v2 = (_QWORD *)((char *)this + 1984);
  v3 = *((_QWORD *)this + 248);
  if (v3)
    *(_QWORD *)(v3 + 96) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v2);
  *(_OWORD *)((char *)this + 1832) = 0u;
  *(_OWORD *)((char *)this + 1848) = 0u;
  *((_QWORD *)this + 233) = 0x40A7700000000000;
  *((_QWORD *)this + 234) = 0;
  v4 = (void **)((char *)this + 1880);
  if (*((char *)this + 1903) < 0)
    operator delete(*v4);
  v5 = (void **)((char *)this + 1904);
  *v4 = 0;
  *((_QWORD *)this + 236) = 0;
  *((_QWORD *)this + 237) = 0;
  if (*((char *)this + 1927) < 0)
    operator delete(*v5);
  v6 = (void **)((char *)this + 1928);
  *v5 = 0;
  *((_QWORD *)this + 239) = 0;
  *((_QWORD *)this + 240) = 0;
  if (*((char *)this + 1951) < 0)
    operator delete(*v6);
  v7 = (void **)((char *)this + 1952);
  *v6 = 0;
  *((_QWORD *)this + 242) = 0;
  *((_QWORD *)this + 243) = 0;
  if (*((char *)this + 1975) < 0)
    operator delete(*v7);
  *v7 = 0;
  *((_QWORD *)this + 245) = 0;
  *((_QWORD *)this + 246) = 0;
}

void `non-virtual thunk to'BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall(BambiUnlistedEmergencyCall *this)
{
  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 72));
}

{
  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 1816));
}

{
  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

{
  BambiUnlistedEmergencyCall::~BambiUnlistedEmergencyCall((BambiUnlistedEmergencyCall *)((char *)this - 1816));
  JUMPOUT(0x1C3B87100);
}

void BambiUnlistedEmergencyCall::handleLocationUpdate(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  _BYTE v18[32];
  uint64_t v19;
  void *v20[2];
  __int128 v21;
  void *v22[2];
  void *v23[2];
  __int128 v24;
  void *__p[2];
  uint64_t v26;
  _BYTE v27[48];
  void *v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  _BYTE v36[72];
  std::string v37[2];
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  std::string v46[2];
  void *v47;
  char v48;
  void *v49;
  char v50;
  void *v51;
  char v52;
  void *v53;
  char v54;
  void *v55[2];
  char v56;

  v4 = a1 + 72;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleLocationUpdate(", 21);
  *(_BYTE *)(v5 + 17) = 0;
  if (*((double *)a2 + 5) > 0.0)
    v6 = "true";
  else
    v6 = "false";
  std::string::basic_string[abi:ne180100]<0>(v55, v6);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, v55);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)")", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v56 < 0)
    operator delete(v55[0]);
  v7 = *(_DWORD *)(a1 + 1976);
  if (*((double *)a2 + 5) <= 0.0)
  {
    if (v7 == 4)
    {
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 16))(v4, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"We don't have a location to send in UPDATE", 42);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
      return;
    }
    if (v7 != 1)
      return;
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(v4, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Initial location not available ", 31);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    memset(v18, 0, sizeof(v18));
    v19 = 0x40A7700000000000;
    *(_OWORD *)v20 = 0u;
    v21 = 0u;
    *(_OWORD *)v22 = 0u;
    *(_OWORD *)v23 = 0u;
    v24 = 0u;
    *(_OWORD *)__p = 0u;
    v26 = 0;
    BambiCall::setEmergencyLocationInfo(a1, (const std::string *)v18);
    if (SHIBYTE(v26) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v24) < 0)
      operator delete(v23[1]);
    if (SHIBYTE(v23[0]) < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v21) < 0)
      operator delete(v20[1]);
    *(_DWORD *)(a1 + 1976) = 3;
    goto LABEL_29;
  }
  switch(v7)
  {
    case 4:
      v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(v4, v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Update location available ", 26);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)", ", 2);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v27, (const ims::LocationInfo *)a2);
      BambiCall::sendEmergencyLocationUpdate(a1, (const ims::LocationInfo *)v27, (ImsResult *)v36);
      ImsResult::~ImsResult((ImsResult *)v36);
      if (v35 < 0)
        operator delete(v34);
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30);
      if (v29 < 0)
      {
        v14 = v28;
LABEL_48:
        operator delete(v14);
      }
      break;
    case 2:
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(v4, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Updated initial location available ", 35);
      *(_BYTE *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v15 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)", ", 2);
      *(_BYTE *)(v15 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      v16 = *a2;
      v17 = a2[2];
      *(_OWORD *)(a1 + 1848) = a2[1];
      *(_OWORD *)(a1 + 1864) = v17;
      *(_OWORD *)(a1 + 1832) = v16;
      std::string::operator=((std::string *)(a1 + 1880), (const std::string *)a2 + 2);
      std::string::operator=((std::string *)(a1 + 1904), (const std::string *)a2 + 3);
      std::string::operator=((std::string *)(a1 + 1928), (const std::string *)a2 + 4);
      std::string::operator=((std::string *)(a1 + 1952), (const std::string *)a2 + 5);
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v37, (const ims::LocationInfo *)(a1 + 1832));
      BambiCall::setEmergencyLocationInfo(a1, v37);
      if (v45 < 0)
        operator delete(v44);
      if (v43 < 0)
        operator delete(v42);
      if (v41 < 0)
        operator delete(v40);
      if (v39 < 0)
      {
        v14 = v38;
        goto LABEL_48;
      }
      break;
    case 1:
      v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(v4);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(v4, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Initial location available ", 27);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)", ", 2);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      *(_DWORD *)(a1 + 1976) = 2;
      v9 = *a2;
      v10 = a2[2];
      *(_OWORD *)(a1 + 1848) = a2[1];
      *(_OWORD *)(a1 + 1864) = v10;
      *(_OWORD *)(a1 + 1832) = v9;
      std::string::operator=((std::string *)(a1 + 1880), (const std::string *)a2 + 2);
      std::string::operator=((std::string *)(a1 + 1904), (const std::string *)a2 + 3);
      std::string::operator=((std::string *)(a1 + 1928), (const std::string *)a2 + 4);
      std::string::operator=((std::string *)(a1 + 1952), (const std::string *)a2 + 5);
      ims::LocationInfo::LocationInfo((ims::LocationInfo *)v46, (const ims::LocationInfo *)(a1 + 1832));
      BambiCall::setEmergencyLocationInfo(a1, v46);
      if (v54 < 0)
        operator delete(v53);
      if (v52 < 0)
        operator delete(v51);
      if (v50 < 0)
        operator delete(v49);
      if (v48 < 0)
        operator delete(v47);
LABEL_29:
      if (*(_BYTE *)(a1 + 1824))
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 112))(a1);
      return;
    default:
      return;
  }
}

void sub_1BEFE7F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54)
{
  ims::LocationInfo::~LocationInfo(&a54);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiUnlistedEmergencyCall::handleLocationUpdate(uint64_t a1, __int128 *a2)
{
  BambiUnlistedEmergencyCall::handleLocationUpdate(a1 - 1816, a2);
}

void BambiUnlistedEmergencyCall::prepareCall(BambiUnlistedEmergencyCall *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  SipStack *v4;
  int v5;
  ImsPrefs *v6;
  void **SendEmergencyLocationUpdatesKey;
  void *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  void **v17;
  void **v18;
  void **v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  SipStack *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  SipStack *v28;
  std::__shared_weak_count *v29;

  *((_BYTE *)this + 1824) = 0;
  v28 = 0;
  v29 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 45);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_9;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v29 = v3;
  if (!v3)
    goto LABEL_9;
  v4 = (SipStack *)*((_QWORD *)this + 44);
  v28 = v4;
  if (!v4)
    goto LABEL_9;
  v5 = *((_DWORD *)this + 494);
  if ((v5 & 0xFFFFFFFE) == 2)
  {
    v6 = (ImsPrefs *)SipStack::prefs(v4);
    SendEmergencyLocationUpdatesKey = (void **)ImsPrefs::getSendEmergencyLocationUpdatesKey(v6);
    v8 = ImsPrefs::prefWithKey(v6, SendEmergencyLocationUpdatesKey);
    if (v8)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v8 + 40))(v8))
        goto LABEL_36;
    }
    else if (!*((_BYTE *)SendEmergencyLocationUpdatesKey + 57))
    {
LABEL_36:
      BambiCall::prepareCall(this);
LABEL_10:
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
      return;
    }
    if (*((_QWORD *)this + 248))
      *((_DWORD *)this + 494) = 4;
    goto LABEL_36;
  }
  if (v5)
  {
LABEL_9:
    *((_BYTE *)this + 1824) = 1;
    if (!v3)
      return;
    goto LABEL_10;
  }
  BambiUnlistedEmergencyCall::clearLocation(this);
  v26 = 0;
  v27 = 0;
  v11 = (unint64_t *)&v3->__shared_owners_;
  v24 = v4;
  v25 = v3;
  do
    v12 = __ldxr(v11);
  while (__stxr(v12 + 1, v11));
  BambiEmergencyCallHandler::createLocation((uint64_t)&v24, (uint64_t)this + 1816, &v26);
  v13 = v25;
  if (v25)
  {
    v14 = (unint64_t *)&v25->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (v26)
  {
    *((_DWORD *)this + 494) = 1;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 248, &v26);
    *(_OWORD *)((char *)this + 1832) = 0u;
    *(_OWORD *)((char *)this + 1848) = 0u;
    *((_QWORD *)this + 233) = 0x40A7700000000000;
    *((_QWORD *)this + 234) = 0;
    v16 = (void **)((char *)this + 1880);
    if (*((char *)this + 1903) < 0)
      operator delete(*v16);
    v17 = (void **)((char *)this + 1904);
    *v16 = 0;
    *((_QWORD *)this + 236) = 0;
    *((_QWORD *)this + 237) = 0;
    if (*((char *)this + 1927) < 0)
      operator delete(*v17);
    v18 = (void **)((char *)this + 1928);
    *v17 = 0;
    *((_QWORD *)this + 239) = 0;
    *((_QWORD *)this + 240) = 0;
    if (*((char *)this + 1951) < 0)
      operator delete(*v18);
    v19 = (void **)((char *)this + 1952);
    *v18 = 0;
    *((_QWORD *)this + 242) = 0;
    *((_QWORD *)this + 243) = 0;
    if (*((char *)this + 1975) < 0)
      operator delete(*v19);
    *v19 = 0;
    *((_QWORD *)this + 245) = 0;
    *((_QWORD *)this + 246) = 0;
    *((_BYTE *)this + 1824) = 1;
  }
  else
  {
    v20 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Location lookup not required", 28);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    *((_DWORD *)this + 494) = 3;
    BambiCall::prepareCall(this);
  }
  v21 = v27;
  if (v27)
  {
    v22 = (unint64_t *)&v27->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v3 = v29;
  if (v29)
    goto LABEL_10;
}

void sub_1BEFE8234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t BambiUnlistedEmergencyCall::isUnlistedEmergency(BambiUnlistedEmergencyCall *this)
{
  return 1;
}

void SDPMediaLazuliSettings::~SDPMediaLazuliSettings(SDPMediaLazuliSettings *this)
{
  void **v2;

  *(_QWORD *)this = &off_1E78D02F8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 344);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 328);
  v2 = (void **)((char *)this + 304);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  v2 = (void **)((char *)this + 280);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  SDPMediaSettings::~SDPMediaSettings(this);
}

{
  SDPMediaLazuliSettings::~SDPMediaLazuliSettings(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SDPMediaLazuliSettings::SDPMediaLazuliSettings(uint64_t a1, __int128 **a2, __int128 **a3, __int16 a4, __int16 a5, const LazuliRouteSet *a6, const LazuliRouteSet *a7)
{
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0xFF00FF00000000;
  *(_WORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 36) = 0x100000001;
  *(_BYTE *)(a1 + 184) = 0;
  *(_BYTE *)(a1 + 192) = 0;
  *(_BYTE *)(a1 + 272) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 89) = 0u;
  *(_QWORD *)a1 = &off_1E78D02F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 280), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 304), *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  std::allocate_shared[abi:ne180100]<LazuliRouteSet,std::allocator<LazuliRouteSet>,LazuliRouteSet&,void>((_QWORD *)(a1 + 328), a7);
  std::allocate_shared[abi:ne180100]<LazuliRouteSet,std::allocator<LazuliRouteSet>,LazuliRouteSet&,void>((_QWORD *)(a1 + 344), a6);
  *(_WORD *)(a1 + 24) = a4;
  *(_WORD *)(a1 + 26) = a5;
  return a1;
}

void sub_1BEFE8414(_Unwind_Exception *a1, uint64_t a2, ...)
{
  SDPMediaSettings *v2;
  uint64_t v3;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  SDPMediaSettings::~SDPMediaSettings(v2);
  _Unwind_Resume(a1);
}

void SDPMediaLazuliSettings::SDPMediaLazuliSettings(SDPMediaLazuliSettings *this, __int128 **a2)
{
  uint64_t v4;
  __int128 *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 *v8;
  unint64_t *v9;
  unint64_t v10;

  SDPMediaSettings::SDPMediaSettings(this, (const SDPMediaSettings *)a2);
  *(_QWORD *)v4 = &off_1E78D02F8;
  *(_QWORD *)(v4 + 288) = 0;
  *(_QWORD *)(v4 + 296) = 0;
  *(_QWORD *)(v4 + 280) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(v4 + 280), a2[35], a2[36], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[36] - (char *)a2[35]) >> 3));
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 40) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 304), a2[38], a2[39], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[39] - (char *)a2[38]) >> 3));
  v5 = a2[42];
  *((_QWORD *)this + 41) = a2[41];
  *((_QWORD *)this + 42) = v5;
  if (v5)
  {
    v6 = (unint64_t *)v5 + 1;
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = a2[44];
  *((_QWORD *)this + 43) = a2[43];
  *((_QWORD *)this + 44) = v8;
  if (v8)
  {
    v9 = (unint64_t *)v8 + 1;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
}

void sub_1BEFE8530(_Unwind_Exception *a1, uint64_t a2, ...)
{
  SDPMediaSettings *v2;
  va_list va;

  va_start(va, a2);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  SDPMediaSettings::~SDPMediaSettings(v2);
  _Unwind_Resume(a1);
}

BOOL SDPMediaLazuliSettings::valid(SDPMediaLazuliSettings *this)
{
  return *((_WORD *)this + 12)
      && *((_WORD *)this + 13)
      && *((_QWORD *)this + 35) != *((_QWORD *)this + 36)
      && *((_QWORD *)this + 38) != *((_QWORD *)this + 39)
      && *(_QWORD *)(*((_QWORD *)this + 43) + 8) != *(_QWORD *)(*((_QWORD *)this + 43) + 16)
      && *(_QWORD *)(*((_QWORD *)this + 41) + 8) != *(_QWORD *)(*((_QWORD *)this + 41) + 16);
}

uint64_t SDPMediaLazuliSettings::operator!=(uint64_t a1, uint64_t a2)
{
  __int128 *v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  std::string::size_type size;
  unsigned __int8 *v13;
  int v14;
  __int128 *v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  std::string::size_type v23;
  unsigned __int8 *v24;
  int v25;
  uint64_t result;
  std::string v27;
  std::string v28;
  char v29;
  std::string *v30;

  v4 = *(__int128 **)(a1 + 280);
  v5 = *(__int128 **)(a1 + 288);
  v6 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (char *)v4) >> 3);
  if (v6 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3))
  {
    memset(&v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v4, v5, v6);
    memset(&v27, 0, sizeof(v27));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, *(__int128 **)(a2 + 280), *(__int128 **)(a2 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 288) - *(_QWORD *)(a2 + 280)) >> 3));
    v7 = 126
       - 2
       * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 3));
    if (v28.__r_.__value_.__l.__size_ == v28.__r_.__value_.__r.__words[0])
      v8 = 0;
    else
      v8 = v7;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v28.__r_.__value_.__l.__data_, (char *)v28.__r_.__value_.__l.__size_, (uint64_t)&v29, v8, 1);
    v9 = 126
       - 2
       * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
    if (v27.__r_.__value_.__l.__size_ == v27.__r_.__value_.__r.__words[0])
      v10 = 0;
    else
      v10 = v9;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v27.__r_.__value_.__l.__data_, (char *)v27.__r_.__value_.__l.__size_, (uint64_t)&v29, v10, 1);
    size = v28.__r_.__value_.__l.__size_;
    v11 = (unsigned __int8 *)v28.__r_.__value_.__r.__words[0];
    v13 = (unsigned __int8 *)v27.__r_.__value_.__r.__words[0];
    if (v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0] == v27.__r_.__value_.__l.__size_
                                                                           - v27.__r_.__value_.__r.__words[0])
    {
      if (v28.__r_.__value_.__r.__words[0] == v28.__r_.__value_.__l.__size_)
      {
        v14 = 1;
      }
      else
      {
        do
        {
          v14 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v30, v11, v13);
          if (!v14)
            break;
          v11 += 24;
          v13 += 24;
        }
        while (v11 != (unsigned __int8 *)size);
      }
    }
    else
    {
      v14 = 0;
    }
    v30 = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  }
  else
  {
    v14 = 0;
  }
  v15 = *(__int128 **)(a1 + 304);
  v16 = *(__int128 **)(a1 + 312);
  v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)v16 - (char *)v15) >> 3);
  if (v17 == 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3))
  {
    memset(&v28, 0, sizeof(v28));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v28, v15, v16, v17);
    memset(&v27, 0, sizeof(v27));
    std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v27, *(__int128 **)(a2 + 304), *(__int128 **)(a2 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 312) - *(_QWORD *)(a2 + 304)) >> 3));
    v18 = 126
        - 2
        * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0]) >> 3));
    if (v28.__r_.__value_.__l.__size_ == v28.__r_.__value_.__r.__words[0])
      v19 = 0;
    else
      v19 = v18;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v28.__r_.__value_.__l.__data_, (char *)v28.__r_.__value_.__l.__size_, (uint64_t)&v29, v19, 1);
    v20 = 126
        - 2
        * __clz(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27.__r_.__value_.__l.__size_ - v27.__r_.__value_.__r.__words[0]) >> 3));
    if (v27.__r_.__value_.__l.__size_ == v27.__r_.__value_.__r.__words[0])
      v21 = 0;
    else
      v21 = v20;
    std::__introsort<std::_ClassicAlgPolicy,std::__less<void,void> &,std::string *,false>((uint64_t)v27.__r_.__value_.__l.__data_, (char *)v27.__r_.__value_.__l.__size_, (uint64_t)&v29, v21, 1);
    v23 = v28.__r_.__value_.__l.__size_;
    v22 = (unsigned __int8 *)v28.__r_.__value_.__r.__words[0];
    v24 = (unsigned __int8 *)v27.__r_.__value_.__r.__words[0];
    if (v28.__r_.__value_.__l.__size_ - v28.__r_.__value_.__r.__words[0] == v27.__r_.__value_.__l.__size_
                                                                           - v27.__r_.__value_.__r.__words[0])
    {
      if (v28.__r_.__value_.__r.__words[0] == v28.__r_.__value_.__l.__size_)
      {
        v25 = 1;
      }
      else
      {
        do
        {
          v25 = std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)&v30, v22, v24);
          if (!v25)
            break;
          v22 += 24;
          v24 += 24;
        }
        while (v22 != (unsigned __int8 *)v23);
      }
    }
    else
    {
      v25 = 0;
    }
    v30 = &v27;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v30);
    v27.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v27);
  }
  else
  {
    v25 = 0;
  }
  if (*(unsigned __int16 *)(a1 + 24) != *(unsigned __int16 *)(a2 + 24))
    return 1;
  result = 1;
  if ((v14 & v25) == 1 && *(unsigned __int16 *)(a1 + 26) == *(unsigned __int16 *)(a2 + 26))
  {
    if (LazuliRouteSet::operator==(*(_QWORD **)(a1 + 344), *(_QWORD **)(a2 + 344)))
      return LazuliRouteSet::operator==(*(_QWORD **)(a1 + 328), *(_QWORD **)(a2 + 328)) ^ 1;
    return 1;
  }
  return result;
}

void sub_1BEFE88D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<LazuliRouteSet,std::allocator<LazuliRouteSet>,LazuliRouteSet&,void>(_QWORD *a1, const LazuliRouteSet *a2)
{
  _QWORD *v4;
  uint64_t v5;

  v4 = operator new(0x50uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78D0348;
  LazuliRouteSet::LazuliRouteSet((LazuliRouteSet *)(v4 + 3), a2);
  *a1 = v5;
  a1[1] = v4;
}

void sub_1BEFE8964(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliRouteSet>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D0348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliRouteSet>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D0348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliRouteSet>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

BOOL operator==(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  int v13;
  BOOL v15;
  BOOL v16;
  _BOOL8 v17;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = *(unsigned __int8 *)(a2 + 31);
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *(_QWORD *)(a2 + 16);
  if (v3 != v4)
    return 0;
  v8 = *(unsigned __int8 **)(a2 + 8);
  v6 = (unsigned __int8 *)(a2 + 8);
  v7 = v8;
  if (v5 < 0)
    v6 = v7;
  if ((v2 & 0x80) != 0)
    return memcmp(*(const void **)a1, v6, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v9 = v2 - 1;
  do
  {
    v11 = *a1++;
    v10 = v11;
    v13 = *v6++;
    v12 = v13;
    v15 = v9-- != 0;
    v16 = v10 == v12;
    v17 = v10 == v12;
  }
  while (v16 && v15);
  return v17;
}

void SipTimers::SipTimers(SipTimers *this)
{
  *(_QWORD *)this = &off_1E78D0398;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  SipTimers::resetDefaults((char **)this);
}

void sub_1BEFE8AB8(_Unwind_Exception *a1)
{
  uint64_t v1;
  char **v2;

  std::__tree<std::string>::destroy(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t *SipTimers::resetDefaults(char **this)
{
  _QWORD *v1;
  uint64_t **v2;
  uint64_t *result;
  __int128 *v4;

  v1 = this + 2;
  v2 = (uint64_t **)(this + 1);
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  *(v1 - 1) = v1;
  *v1 = 0;
  v1[1] = 0;
  v4 = &xmmword_1ED70CFC0;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&xmmword_1ED70CFC0, (uint64_t)&std::piecewise_construct, &v4)+ 14) = 2000;
  v4 = (__int128 *)&unk_1ED70CFE0;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&unk_1ED70CFE0, (uint64_t)&std::piecewise_construct, &v4)+ 14) = 16000;
  v4 = (__int128 *)&unk_1ED70D000;
  *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&unk_1ED70D000, (uint64_t)&std::piecewise_construct, &v4)+ 14) = 17000;
  v4 = &xmmword_1ED70CEC0;
  result = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v2, (void **)&xmmword_1ED70CEC0, (uint64_t)&std::piecewise_construct, &v4);
  *((_DWORD *)result + 14) = 128000;
  return result;
}

BOOL SipTimers::isValid(SipTimers *this)
{
  unsigned int v2;
  unsigned int v3;
  _BOOL8 result;
  unsigned int v5;

  v2 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT1, 0);
  v3 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT2, 0);
  result = 0;
  if (v2 < v3)
  {
    v5 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT2, 0);
    return v5 < SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT4, 0);
  }
  return result;
}

uint64_t SipTimers::timerValue(SipTimers *this, const SipTimer *a2, int a3)
{
  int v5;
  int v6;
  unsigned int v7;
  unsigned int v8;
  __int128 v10;
  char *v11;
  _QWORD *v12;
  char *v13;
  char v14;
  _QWORD *v15;
  const SipTimer *v16;
  uint64_t v17;
  _BYTE *v18;
  void *__p[2];
  char v20;
  std::string v21;

  v5 = 1;
  while (1)
  {
    while (1)
    {
      v6 = a3;
      if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerA))
        break;
      a3 = 0;
      v5 *= v6;
      a2 = (const SipTimer *)&SipTimers::kTimerT1;
    }
    if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerE))
      break;
    a3 = 0;
    a2 = (const SipTimer *)&SipTimers::kTimerT1;
    if (v6)
      goto LABEL_9;
  }
  if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerG)
    && !ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimer200Retransmit))
  {
    if (*((char *)a2 + 31) < 0)
    {
      std::string::__init_copy_ctor_external(&v21, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    }
    else
    {
      v10 = *(_OWORD *)((char *)a2 + 8);
      v21.__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 3);
      *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
    }
    v11 = (char *)this + 16;
    v12 = (_QWORD *)*((_QWORD *)this + 2);
    if (!v12)
      goto LABEL_25;
    v13 = (char *)this + 16;
    do
    {
      v14 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v12 + 4, (void **)&v21.__r_.__value_.__l.__data_);
      if (v14 >= 0)
        v15 = v12;
      else
        v15 = v12 + 1;
      if (v14 >= 0)
        v13 = (char *)v12;
      v12 = (_QWORD *)*v15;
    }
    while (*v15);
    if (v13 == v11
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v21, (void **)v13 + 4) & 0x80) != 0)
    {
LABEL_25:
      v13 = (char *)this + 16;
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (v11 != v13)
    {
      v8 = *((_DWORD *)v13 + 14);
      return v8 * v5;
    }
    if (ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerB)
      || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerD)
      || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerF)
      || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerH))
    {
      goto LABEL_34;
    }
    if (ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerI))
      goto LABEL_38;
    if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerJ))
    {
      if (ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerK))
      {
LABEL_38:
        v16 = (const SipTimer *)&SipTimers::kTimerT4;
        goto LABEL_39;
      }
      if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerAckReceiveTimeout)
        && !ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerAckRetransmitTimeout))
      {
        if (!ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerRegAwaitAuth))
        {
          if ((ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerInviteResponseTimeout) & 1) == 0)
          {
            if ((ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerEmergencyInviteResponseTimeout) & 1) != 0
              || ImsUuid::operator==((uint64_t)a2, (uint64_t)&SipTimers::kTimerEPSInviteResponseTimeout))
            {
              v16 = (const SipTimer *)&SipTimers::kTimerInviteResponseTimeout;
              goto LABEL_39;
            }
            std::string::basic_string[abi:ne180100]<0>(&v21, "sip.timer");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            v17 = ims::error((uint64_t)&v21, (uint64_t)__p);
            v18 = (_BYTE *)ImsOutStream::operator<<(v17, "unknown SIP timer ");
            (*(void (**)(const SipTimer *, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v18);
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v18[17] = 0;
            if (v20 < 0)
              operator delete(__p[0]);
            if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v21.__r_.__value_.__l.__data_);
          }
          v8 = 0;
          return v8 * v5;
        }
        v16 = (const SipTimer *)&SipTimers::kTimerF;
LABEL_39:
        v8 = SipTimers::timerValue(this, v16, 0);
        return v8 * v5;
      }
    }
LABEL_34:
    v8 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT1, 0) << 6;
    return v8 * v5;
  }
LABEL_9:
  v7 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT1, 0) * v6;
  v8 = SipTimers::timerValue(this, (const SipTimer *)&SipTimers::kTimerT2, 0);
  if (v8 >= v7)
    v8 = v7;
  return v8 * v5;
}

void sub_1BEFE8FC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTimers::setTimersFromPrefs(SipTimers *this, const ImsPrefs *a2)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t **v9;
  std::string *v10;
  void *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  void *v17[2];
  char v18;
  void *__p[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(__p, "Signaling/SipTimers");
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a2 + 208, __p);
  if ((void **)((char *)a2 + 216) == v4)
    v5 = 0;
  else
    v5 = (uint64_t)v4[7];
  if (v20 < 0)
  {
    operator delete(__p[0]);
    if (v5)
      goto LABEL_12;
  }
  else if (v5)
  {
    goto LABEL_12;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
  std::string::basic_string[abi:ne180100]<0>(v17, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"couldn't find prefs section Signaling/SipTimers", 47);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(__p[0]);
LABEL_12:
  v7 = *(_QWORD **)(v5 + 40);
  v8 = *(_QWORD **)(v5 + 48);
  if (v7 != v8)
  {
    v9 = (uint64_t **)((char *)this + 8);
    do
    {
      v10 = (std::string *)(*v7 + 8);
      v11 = ImsPrefsSection::prefWithName(v5, (uint64_t)v10);
      if (v11)
      {
        v12 = (*(uint64_t (**)(void *))(*(_QWORD *)v11 + 56))(v11);
        if (v12 < 1)
        {
          if (v12)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
            std::string::basic_string[abi:ne180100]<0>(v17, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v14 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"ignoring invalid value '", 24);
            *(_BYTE *)(v14 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v14 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"' for timer ", 12);
            *(_BYTE *)(v14 + 17) = 0;
            LoggableString::LoggableString(&v16, v10);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 40))(v14, &v16);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v14 + 17) = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v16.__r_.__value_.__l.__data_);
            if (v18 < 0)
              operator delete(v17[0]);
            if (v20 < 0)
              operator delete(__p[0]);
          }
          else
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
            std::string::basic_string[abi:ne180100]<0>(v17, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v15 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"resetting timer ", 16);
            *(_BYTE *)(v15 + 17) = 0;
            LoggableString::LoggableString(&v16, v10);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, &v16);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" to default", 11);
            *(_BYTE *)(v15 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v15 + 17) = 0;
            if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v16.__r_.__value_.__l.__data_);
            if (v18 < 0)
              operator delete(v17[0]);
            if (v20 < 0)
              operator delete(__p[0]);
            std::__tree<std::string>::__erase_unique<std::string>(v9, (void **)&v10->__r_.__value_.__l.__data_);
          }
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "sip.timer");
          std::string::basic_string[abi:ne180100]<0>(v17, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v13 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v17);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"setting timer ", 14);
          *(_BYTE *)(v13 + 17) = 0;
          LoggableString::LoggableString(&v16, v10);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 40))(v13, &v16);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" to ", 4);
          *(_BYTE *)(v13 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v13 + 17) = 0;
          if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v16.__r_.__value_.__l.__data_);
          if (v18 < 0)
            operator delete(v17[0]);
          if (v20 < 0)
            operator delete(__p[0]);
          __p[0] = v10;
          *((_DWORD *)std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v9, (void **)&v10->__r_.__value_.__l.__data_, (uint64_t)&std::piecewise_construct, (__int128 **)__p)+ 14) = v12;
        }
      }
      ++v7;
    }
    while (v7 != v8);
  }
}

void sub_1BEFE9480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipTimers::log(SipTimers *this, ImsOutStream *a2)
{
  char *v4;
  char *v5;
  char v6;
  char *v7;
  char *v8;
  BOOL v9;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  std::string v15;
  std::string __p;
  __int128 v17;
  __int128 v18;
  uint64_t v19;

  std::string::basic_string[abi:ne180100]<0>(v13, "=");
  std::string::basic_string[abi:ne180100]<0>(v11, ", ");
  v19 = 0;
  v17 = 0u;
  v18 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v17, 1);
  v4 = (char *)*((_QWORD *)this + 1);
  v5 = (char *)this + 16;
  if (v4 != v5)
  {
    v6 = 1;
    do
    {
      if ((v6 & 1) == 0)
        (*(void (**)(__int128 *, void **))(v17 + 32))(&v17, v11);
      (*(void (**)(__int128 *, _QWORD *))(v17 + 32))(&v17, (_QWORD *)v4 + 4);
      (*(void (**)(__int128 *, void **))(v17 + 32))(&v17, v13);
      std::ostream::operator<<();
      BYTE1(v18) = 0;
      v7 = (char *)*((_QWORD *)v4 + 1);
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = *(char **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (char *)*((_QWORD *)v4 + 2);
          v9 = *(_QWORD *)v8 == (_QWORD)v4;
          v4 = v8;
        }
        while (!v9);
      }
      v6 = 0;
      v4 = v8;
    }
    while (v8 != v5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v18 + 1) + 8, &v15);
  *(_QWORD *)&v17 = &off_1E78D7A10;
  if ((_BYTE)v18 && *((_QWORD *)&v17 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v17 + 1) + 8))(*((_QWORD *)&v17 + 1));
  LoggableString::LoggableString(&__p, &v15);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (v12 < 0)
    operator delete(v11[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return a2;
}

void sub_1BEFE96A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a14 < 0)
    operator delete(a9);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

void SipTimers::~SipTimers(char **this)
{
  *this = (char *)&off_1E78D0398;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
}

{
  *this = (char *)&off_1E78D0398;
  std::__tree<std::string>::destroy((uint64_t)(this + 1), this[2]);
  JUMPOUT(0x1C3B87100);
}

void SipTimers::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SipTimers");
}

uint64_t SipTimer::SipTimer(uint64_t a1, const std::string *a2)
{
  *(_QWORD *)a1 = off_1E78C5C28;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  std::string::operator=((std::string *)(a1 + 8), a2);
  return a1;
}

void sub_1BEFE980C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t *std::map<std::string,unsigned int>::map[abi:ne180100](uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  std::map<std::string,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>>(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_1BEFE9864(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__tree<std::string>::destroy(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *std::map<std::string,unsigned int>::insert[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  uint64_t v6;
  void **v7;
  void **v8;
  BOOL v9;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)result;
    v6 = (uint64_t)(result + 1);
    do
    {
      result = std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void **)v4[2];
          v9 = *v8 == v4;
          v4 = v8;
        }
        while (!v9);
      }
      v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_hint_unique_key_args<std::string,std::pair<std::string const,unsigned int> const&>(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;
  void **v10;

  v9 = 0;
  v10 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::set<unsigned int>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::set<unsigned int>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::set<unsigned int>>>>::__find_equal<std::string>(a1, a2, &v10, &v9, a3);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::pair<std::string const,unsigned int> const&>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::pair<std::string const,unsigned int> const&>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    *((_QWORD *)v7 + 6) = *(_QWORD *)(a2 + 16);
  }
  *((_DWORD *)v7 + 14) = *(_DWORD *)(a2 + 24);
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEFE9A20(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,unsigned int>,std::__tree_node<std::__value_type<std::string,unsigned int>,void *> *,long>>(uint64_t *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t **v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t **leaf_high;
  _QWORD *v12;
  BOOL v13;
  uint64_t **v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t *v20;

  v5 = (uint64_t **)result;
  if (result[2])
  {
    v6 = *result;
    v7 = result[1];
    *result = (uint64_t)(result + 1);
    *(_QWORD *)(v7 + 16) = 0;
    result[1] = 0;
    result[2] = 0;
    if (*(_QWORD *)(v6 + 8))
      v8 = *(_QWORD **)(v6 + 8);
    else
      v8 = (_QWORD *)v6;
    v18 = result;
    v19 = v8;
    v20 = v8;
    if (v8)
    {
      v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v8);
      if (a2 != a3)
      {
        v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 4));
          *((_DWORD *)v8 + 14) = *((_DWORD *)v9 + 14);
          v10 = v20;
          v17 = 0;
          leaf_high = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v20 + 4);
          std::__tree<unsigned int>::__insert_node_at(v5, v17, leaf_high, v10);
          v8 = v19;
          v20 = v19;
          if (v19)
            v19 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::_DetachedTreeCache::__detach_next((uint64_t)v19);
          v12 = (_QWORD *)v9[1];
          if (v12)
          {
            do
            {
              a2 = v12;
              v12 = (_QWORD *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              a2 = (_QWORD *)v9[2];
              v13 = *a2 == (_QWORD)v9;
              v9 = a2;
            }
            while (!v13);
          }
          if (!v8)
            break;
          v9 = a2;
        }
        while (a2 != a3);
      }
    }
    result = (uint64_t *)std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)&v18);
  }
  if (a2 != a3)
  {
    do
    {
      v18 = 0;
      v19 = 0;
      v20 = 0;
      std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::pair<std::string const,unsigned int> const&>((uint64_t)v5, (uint64_t)(a2 + 4), &v18);
      v17 = 0;
      v14 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_leaf_high((uint64_t)v5, &v17, v18 + 4);
      result = std::__tree<unsigned int>::__insert_node_at(v5, v17, v14, v18);
      v15 = (_QWORD *)a2[1];
      if (v15)
      {
        do
        {
          v16 = v15;
          v15 = (_QWORD *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          v16 = (_QWORD *)a2[2];
          v13 = *v16 == (_QWORD)a2;
          a2 = v16;
        }
        while (!v13);
      }
      a2 = v16;
    }
    while (v16 != a3);
  }
  return result;
}

void sub_1BEFE9BE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__tree<std::string>::_DetachedTreeCache::~_DetachedTreeCache[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEFE9D30(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t _GLOBAL__sub_I_SipTimer_cpp()
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "T1");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerT1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerT1, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "T2");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerT2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerT2, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "T4");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerT4, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerT4, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "A");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerA, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerA, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "B");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerB, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerB, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "C");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerC, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerC, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "D");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerD, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerD, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "E");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerE, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerE, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "F");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerF, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerF, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "G");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerG, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerG, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "H");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerH, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerH, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "I");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerI, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerI, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "J");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerJ, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerJ, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "K");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerK, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerK, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "200RetransmitTimer");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimer200Retransmit, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimer200Retransmit, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AckReceiveTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerAckReceiveTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerAckReceiveTimeout, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "AckRetransmitTimer");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerAckRetransmitTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerAckRetransmitTimeout, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "RegAwaitAuthTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerRegAwaitAuth, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerRegAwaitAuth, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "InviteResponseTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerInviteResponseTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerInviteResponseTimeout, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EPSInviteResponseTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerEPSInviteResponseTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerEPSInviteResponseTimeout, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&__p, "EmergencyInviteResponseTimeout");
  SipTimer::SipTimer((uint64_t)&SipTimers::kTimerEmergencyInviteResponseTimeout, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return __cxa_atexit((void (*)(void *))SipTimer::~SipTimer, &SipTimers::kTimerEmergencyInviteResponseTimeout, &dword_1BEDF4000);
}

void sub_1BEFEA3A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipAckReceiveHandler::SipAckReceiveHandler(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *size;
  unint64_t *v15;
  unint64_t v16;
  std::string __p;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v8 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.session");
  ImsLogContainer::ImsLogContainer(v8, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_1E78D03E0;
  *(_QWORD *)(a1 + 8) = &unk_1E78D0420;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 160));
  v10 = *(std::__shared_weak_count **)a2;
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(std::__shared_weak_count **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v10;
  *(_QWORD *)(a1 + 136) = v9;
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 144), a3);
  *(_QWORD *)(a1 + 312) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 32))(a4);
  *(_QWORD *)(a1 + 264) = a1;
  SipSessionInterface::stack(*(std::__shared_weak_count **)a2, &__p);
  *(_QWORD *)(a1 + 296) = SipUserAgent::config(*(SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144)) + 512;
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v15 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_DWORD *)(a1 + 304) = 1;
  return a1;
}

void sub_1BEFEA57C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;
  SipTimerContainer *v18;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTimerContainer::~SipTimerContainer(v18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v17);
  v20 = *(std::__shared_weak_count **)(v15 + 136);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  v21 = *(std::__shared_weak_count **)(v15 + 120);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  ImsLogContainer::~ImsLogContainer(v16);
  _Unwind_Resume(a1);
}

void SipAckReceiveHandler::~SipAckReceiveHandler(SipAckReceiveHandler *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;

  *(_QWORD *)this = &off_1E78D03E0;
  *((_QWORD *)this + 1) = &unk_1E78D0420;
  v2 = *((_QWORD *)this + 39);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipTimerContainer::cancelAllTimers((SipAckReceiveHandler *)((char *)this + 160));
  SipTimerContainer::~SipTimerContainer((SipAckReceiveHandler *)((char *)this + 160));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  SipAckReceiveHandler::~SipAckReceiveHandler(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipAckReceiveHandler::~SipAckReceiveHandler(SipAckReceiveHandler *this)
{
  SipAckReceiveHandler::~SipAckReceiveHandler((SipAckReceiveHandler *)((char *)this - 8));
}

{
  SipAckReceiveHandler::~SipAckReceiveHandler((SipAckReceiveHandler *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipAckReceiveHandler::loggableName(SipAckReceiveHandler *this@<X0>, std::string *a2@<X8>)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::string::size_type v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::string __p;
  uint64_t v16;
  std::__shared_weak_count *v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;

  v20 = 0;
  v18 = 0u;
  v19 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v18, 1);
  v16 = 0;
  v17 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v4 && (v17 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v5 = *((_QWORD *)this + 16);
    v16 = v5;
  }
  else
  {
    v5 = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v18 + 1), (uint64_t)"AckRetransmitHandler ", 21);
  BYTE1(v19) = 0;
  if (v5)
  {
    v6 = *(_QWORD *)(v5 + 240);
    v7 = *(std::__shared_weak_count **)(v5 + 248);
    __p.__r_.__value_.__r.__words[0] = v6;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)(v6 + 1504) + 16))(v6 + 1504, &v18);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v18 + 1), (uint64_t)"Unknown CallId", 14);
    BYTE1(v19) = 0;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v18 + 1), (uint64_t)" ", 1);
  BYTE1(v19) = 0;
  SipMessage::header<SipCSeqHeader>(*(_QWORD *)(*((_QWORD *)this + 18) + 288));
  std::ostream::operator<<();
  BYTE1(v19) = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v19 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  *(_QWORD *)&v18 = &off_1E78D7A10;
  if ((_BYTE)v19)
  {
    if (*((_QWORD *)&v18 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v18 + 1) + 8))(*((_QWORD *)&v18 + 1));
  }
}

void sub_1BEFEA8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void (**a18)(ImsOutStream *__hidden this), uint64_t a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  a18 = &off_1E78D7A10;
  if (a20)
  {
    if (a19)
      (*(void (**)(uint64_t))(*(_QWORD *)a19 + 8))(a19);
  }
  _Unwind_Resume(a1);
}

void SipAckReceiveHandler::logPrefix(SipAckReceiveHandler *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEFEA9AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipAckReceiveHandler::logPrefix(SipAckReceiveHandler *this, ImsOutStream *a2)
{
  SipAckReceiveHandler::logPrefix((SipAckReceiveHandler *)((char *)this - 8), a2);
}

uint64_t SipAckReceiveHandler::initialize(SipAckReceiveHandler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  _BYTE v28[24];
  _BYTE *v29;
  _BYTE v30[24];
  _BYTE *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  if (!*((_QWORD *)this + 18))
  {
    v11 = (char *)this + 8;
    v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 56))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"no transaction specified", 24);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13 = 0;
    *(_BYTE *)(v12 + 17) = 0;
    return v13;
  }
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_14;
  }
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3 || (v4 = *((_QWORD *)this + 16)) == 0)
  {
LABEL_14:
    v15 = *((_QWORD *)this + 1);
    v14 = (char *)this + 8;
    v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"no session specified", 20);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13 = 0;
    *(_BYTE *)(v16 + 17) = 0;
    if (!v3)
      return v13;
    goto LABEL_33;
  }
  v6 = *((_QWORD *)this + 14);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v5)
  {
    *((_DWORD *)this + 76) = 1;
    if (!*(_BYTE *)(v4 + 256))
      goto LABEL_25;
LABEL_17:
    v17 = operator new(0x20uLL);
    *v17 = &off_1E78D04D8;
    v17[1] = this;
    v17[2] = v6;
    v17[3] = v5;
    v31 = v17;
    SipTimerContainer::startSipTimer((_QWORD *)this + 20, (uint64_t)&SipTimers::kTimer200Retransmit, (uint64_t)v30, *((_DWORD *)this + 76));
    v18 = v31;
    if (v31 == v30)
    {
      v19 = 4;
      v18 = v30;
    }
    else
    {
      if (!v31)
        goto LABEL_22;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
    if (!v5)
      goto LABEL_25;
    goto LABEL_23;
  }
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  *((_DWORD *)this + 76) = 1;
  if (*(_BYTE *)(v4 + 256))
  {
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    goto LABEL_17;
  }
LABEL_23:
  v20 = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v21 = __ldxr(v20);
  while (__stxr(v21 + 1, v20));
LABEL_25:
  v22 = operator new(0x20uLL);
  *v22 = &off_1E78D04D8;
  v22[1] = this;
  v22[2] = v6;
  v22[3] = v5;
  v29 = v22;
  SipTimerContainer::startSipTimer((_QWORD *)this + 20, (uint64_t)&SipTimers::kTimerAckReceiveTimeout, (uint64_t)v28, 0);
  v23 = v29;
  if (v29 == v28)
  {
    v24 = 4;
    v23 = v28;
    goto LABEL_29;
  }
  if (v29)
  {
    v24 = 5;
LABEL_29:
    (*(void (**)(void))(*v23 + 8 * v24))();
  }
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13 = 1;
LABEL_33:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v13;
}

void sub_1BEFEACC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19)
{
  std::__shared_weak_count *v19;
  char *v20;
  char *v22;
  uint64_t v23;

  v22 = a19;
  if (a19 == v20)
  {
    v23 = 4;
    v22 = &a16;
  }
  else
  {
    if (!a19)
      goto LABEL_6;
    v23 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v22 + 8 * v23))();
LABEL_6:
  if (v19)
  {
    std::__shared_weak_count::__release_weak(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void SipAckReceiveHandler::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  void *__p[2];
  char v34;
  _QWORD v35[9];
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  _QWORD v38[9];
  _QWORD v39[9];
  _BYTE v40[8];
  void *v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  if (operator==(a2, (uint64_t)&SipTimers::kTimer200Retransmit))
  {
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 144) + 560);
    if (v4 && *(_DWORD *)(v4 + 88) == *(_DWORD *)(*(_QWORD *)(a1 + 312) + 88))
    {
      v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 64))(a1 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"resending previous 200 response", 31);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 144) + 128))(v39);
      ImsResult::~ImsResult((ImsResult *)v39);
    }
    else
    {
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 64))(a1 + 8);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 8) + 16))(a1 + 8, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"trying to send 200 response", 27);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v18 + 17) = 0;
      v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
      (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 144) + 168))(v38, *(_QWORD *)(a1 + 144), v19, 0);
      ImsResult::~ImsResult((ImsResult *)v38);
      if (v19)
        (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    }
    *(_DWORD *)(a1 + 304) *= 2;
    v20 = *(_QWORD *)(a1 + 112);
    v7 = *(std::__shared_weak_count **)(a1 + 120);
    if (v7)
    {
      p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v22 = __ldxr(p_shared_weak_owners);
      while (__stxr(v22 + 1, p_shared_weak_owners));
      do
        v23 = __ldxr(p_shared_weak_owners);
      while (__stxr(v23 + 1, p_shared_weak_owners));
      do
        v24 = __ldxr(p_shared_weak_owners);
      while (__stxr(v24 + 1, p_shared_weak_owners));
    }
    v50 = 0;
    v25 = operator new(0x20uLL);
    *v25 = &off_1E78D0558;
    v25[1] = a1;
    v25[2] = v20;
    v25[3] = v7;
    v50 = v25;
    SipTimerContainer::startSipTimer((_QWORD *)(a1 + 160), (uint64_t)&SipTimers::kTimer200Retransmit, (uint64_t)v49, *(_DWORD *)(a1 + 304));
    v26 = v50;
    if (v50 == v49)
    {
      v27 = 4;
      v26 = v49;
    }
    else
    {
      if (!v50)
        goto LABEL_40;
      v27 = 5;
    }
    (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_40:
    if (v7)
    {
      std::__shared_weak_count::__release_weak(v7);
LABEL_42:
      std::__shared_weak_count::__release_weak(v7);
      return;
    }
    return;
  }
  if (!operator==(a2, (uint64_t)&SipTimers::kTimerAckReceiveTimeout))
    return;
  v36 = 0;
  v37 = 0;
  v6 = *(std::__shared_weak_count **)(a1 + 136);
  if (!v6)
  {
    v7 = 0;
    goto LABEL_44;
  }
  v7 = std::__shared_weak_count::lock(v6);
  v37 = v7;
  if (!v7 || (v8 = *(std::__shared_weak_count **)(a1 + 128), (v36 = v8) == 0))
  {
LABEL_44:
    v29 = *(_QWORD *)(a1 + 8);
    v28 = a1 + 8;
    v30 = (*(uint64_t (**)(uint64_t))(v29 + 56))(v28);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v28 + 16))(v28, v30);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"No session to handle AckReceiveTimeout", 38);
    *(_BYTE *)(v30 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v30 + 17) = 0;
    if (!v7)
      return;
    goto LABEL_45;
  }
  if ((((uint64_t (*)(std::__shared_weak_count *))v8->__vftable[6].__get_deleter)(v8) & 1) == 0)
  {
    v10 = *(_QWORD *)(a1 + 8);
    v9 = a1 + 8;
    v11 = (*(uint64_t (**)(uint64_t))(v10 + 32))(v9);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"no ACK received by timeout.  Terminating session.", 49);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    std::string::basic_string[abi:ne180100]<0>(__p, "NoAckReceived");
    SipSessionInterface::terminationReason(v8, (uint64_t)__p, (BambiCallTerminationReason *)v40);
    ((void (*)(_QWORD *__return_ptr, std::__shared_weak_count *, _BYTE *, _QWORD))v8->__vftable[3].~__shared_weak_count)(v35, v8, v40, 0);
    v12 = v48;
    if (v48)
    {
      p_shared_owners = (unint64_t *)&v48->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = v47;
    if (v47)
    {
      v16 = (unint64_t *)&v47->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (v46 < 0)
      operator delete(v45);
    if (v44 < 0)
      operator delete(v43);
    if (v42 < 0)
      operator delete(v41);
    ImsResult::~ImsResult((ImsResult *)v35);
    if (v34 < 0)
      operator delete(__p[0]);
  }
LABEL_45:
  v31 = (unint64_t *)&v7->__shared_owners_;
  do
    v32 = __ldaxr(v31);
  while (__stlxr(v32 - 1, v31));
  if (!v32)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    goto LABEL_42;
  }
}

void sub_1BEFEB210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  BambiCallTerminationReason::~BambiCallTerminationReason((void **)(v24 - 224));
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t SipAckReceiveHandler::handleAck(SipAckReceiveHandler *this, const SipRequest *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (_QWORD *)((char *)this + 8);
  v3 = (*(uint64_t (**)(char *, const SipRequest *))(*((_QWORD *)this + 1) + 64))((char *)this + 8, a2);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"received ACK, terminating transaction", 37);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  result = v2[17];
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)result + 32))(result, 7);
  return result;
}

_QWORD *std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D04D8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D04D8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D04D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D04D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFEB530(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipAckReceiveHandler::initialize(void)::$_0,std::allocator<SipAckReceiveHandler::initialize(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D0558;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D0558;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D0558;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D0558;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 32))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFEB798(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipAckReceiveHandler::handleTimer(std::string const&)::$_0,std::allocator<SipAckReceiveHandler::handleTimer(std::string const&)::$_0>,void ()(std::string&)>::target_type()
{
}

uint64_t SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::SipSocketMultiplexer(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  *(_QWORD *)a1 = off_1E78D0820;
  v4 = a2[1];
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 8 + *(_QWORD *)(v4 - 48)) = a2[2];
  *(_BYTE *)(a1 + 20) = 1;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_DWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  v5 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = a2[3];
  *(_QWORD *)(a1 + *(_QWORD *)(v5 - 24)) = a2[4];
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  v6 = *a3;
  v7 = a3[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(std::__shared_weak_count **)(a1 + 112);
    *(_QWORD *)(a1 + 104) = v6;
    *(_QWORD *)(a1 + 112) = v7;
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 104) = v6;
    *(_QWORD *)(a1 + 112) = 0;
  }
  return a1;
}

_QWORD *SipListenSocketMultiplexer::SipListenSocketMultiplexer(_QWORD *a1, uint64_t *a2)
{
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  a1[1] = &off_1E78B7B60;
  v3 = (std::__shared_weak_count *)a2[1];
  v7 = *a2;
  v8 = v3;
  if (v3)
  {
    p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
  }
  SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::SipSocketMultiplexer((uint64_t)a1, (uint64_t *)&off_1E78D0678, &v7);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  *a1 = &off_1E78D05E0;
  a1[1] = &unk_1E78D0638;
  a1[15] = 0;
  a1[16] = 0;
  return a1;
}

void sub_1BEFEB970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10)
    std::__shared_weak_count::__release_weak(a10);
  _Unwind_Resume(exception_object);
}

void SipListenSocketMultiplexer::~SipListenSocketMultiplexer(SipListenSocketMultiplexer *this)
{
  SipLockable *v2;
  uint64_t v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;

  *(_QWORD *)this = &off_1E78D05E0;
  *((_QWORD *)this + 1) = &unk_1E78D0638;
  v2 = (SipListenSocketMultiplexer *)((char *)this + 8);
  v4 = (char *)this + 120;
  v3 = *((_QWORD *)this + 15);
  if (v3)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
    v5 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
    *((_QWORD *)this + 15) = 0;
    *((_QWORD *)this + 16) = 0;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v4);
  *(_QWORD *)this = off_1E78D06C8;
  *((_QWORD *)this + 1) = off_1E78D0710;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 14);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*((_QWORD **)this + 11));
  SipLockable::~SipLockable(v2, (uint64_t *)off_1E78D0680);
}

{
  SipListenSocketMultiplexer::~SipListenSocketMultiplexer(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipListenSocketMultiplexer::~SipListenSocketMultiplexer(SipListenSocketMultiplexer *this)
{
  SipListenSocketMultiplexer::~SipListenSocketMultiplexer((SipListenSocketMultiplexer *)((char *)this - 8));
}

{
  SipListenSocketMultiplexer::~SipListenSocketMultiplexer((SipListenSocketMultiplexer *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipListenSocketMultiplexer::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SipListenSocketMultiplexer");
}

void `non-virtual thunk to'SipListenSocketMultiplexer::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "SipListenSocketMultiplexer");
}

void SipListenSocketMultiplexer::handleIncomingConnection(_QWORD *a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p;
  std::__shared_weak_count *v25;
  char v26;
  void *v27;
  std::__shared_weak_count *v28;
  char v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  void *v32;
  std::__shared_weak_count *v33;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 104))(&__p);
  SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::delegateForRemoteAddress(a1, (uint64_t *)&__p, &v27);
  v32 = 0;
  v33 = 0;
  if (v28)
  {
    v33 = std::__shared_weak_count::lock(v28);
    if (v33)
      v32 = v27;
    if (v28)
      std::__shared_weak_count::__release_weak(v28);
  }
  v4 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v32;
  if (v32)
  {
    v8 = (std::__shared_weak_count *)a2[1];
    v30 = *a2;
    v31 = v8;
    if (v8)
    {
      v9 = (unint64_t *)&v8->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v7 + 16))(v7, &v30);
    v11 = v31;
    if (v31)
    {
      v12 = (unint64_t *)&v31->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v27, "transport");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)&v27, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SipListenSocketMultiplexer: no delegate to handle incoming connection from ", 75);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)*a2 + 104))(&v22);
    v15 = (_BYTE *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 40))(v22, v14);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v15[17] = 0;
    v16 = v23;
    if (v23)
    {
      v17 = (unint64_t *)&v23->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    if (v26 < 0)
      operator delete(__p);
    if (v29 < 0)
      operator delete(v27);
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](a2);
  }
  v19 = v33;
  if (v33)
  {
    v20 = (unint64_t *)&v33->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_1BEFEBD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 32);
  _Unwind_Resume(a1);
}

void SipSocketMultiplexer<ImsListenSocketInterfaceDelegate>::delegateForRemoteAddress(_QWORD *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  void **v5;
  void **v6;
  char *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  void *__p[2];
  uint64_t v14;

  if (!a1[12])
    goto LABEL_9;
  __p[0] = 0;
  __p[1] = 0;
  v14 = 0;
  IpAddress::asString(*a2, (uint64_t)__p, 3);
  v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 10), __p);
  v6 = v5;
  if (a1 + 11 != v5)
  {
    v7 = (char *)v5[8];
    *a3 = v5[7];
    a3[1] = v7;
    if (v7)
    {
      v8 = (unint64_t *)(v7 + 16);
      do
        v9 = __ldxr(v8);
      while (__stxr(v9 + 1, v8));
    }
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__p[0]);
  if (a1 + 11 == v6)
  {
LABEL_9:
    v10 = a1[14];
    *a3 = a1[13];
    a3[1] = v10;
    if (v10)
    {
      v11 = (unint64_t *)(v10 + 16);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
    }
  }
}

void sub_1BEFEBE7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ImsListenSocketInterfaceDelegate>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::weak_ptr<ImsUdpSocketInterfaceDelegate>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t SipMD5DigestAlgorithm::computeDigest(uint64_t a1, const void *a2, CC_LONG a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[4];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  _BYTE v15[144];
  uint64_t v16;
  CC_MD5_CTX c;
  unsigned __int8 md[8];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  memset(&c, 0, sizeof(c));
  *(_QWORD *)md = 0;
  v19 = 0;
  CC_MD5_Init(&c);
  CC_MD5_Update(&c, a2, a3);
  CC_MD5_Final(md, &c);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v9) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v9);
  v7 = 0;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v11
                                                                                    + *(_QWORD *)(*(_QWORD *)&v11[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  do
  {
    *(_QWORD *)((char *)&v11[1] + *(_QWORD *)(*(_QWORD *)&v11[0] - 24) + 8) = 2;
    std::ostream::operator<<();
    ++v7;
  }
  while (v7 != 16);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_QWORD *)&v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v15);
  return 1;
}

void sub_1BEFEC0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipMD5DigestAlgorithm::computeHmac(int a1, const void *a2, size_t a3, const void *a4, size_t a5, unint64_t *a6)
{
  void *v11;
  unint64_t v13;

  v11 = (void *)*a6;
  v13 = a6[1] - (_QWORD)v11;
  if (v13 > 0xF)
  {
    if (v13 != 16)
      a6[1] = (unint64_t)v11 + 16;
  }
  else
  {
    std::vector<unsigned char>::__append(a6, 16 - v13);
    v11 = (void *)*a6;
  }
  CCHmac(1u, a2, a3, a4, a5, v11);
  return 1;
}

uint64_t SipSHA1DigestAlgorithm::computeDigest(uint64_t a1, const void *a2, CC_LONG a3, uint64_t a4)
{
  uint64_t v7;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[4];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  _BYTE v15[144];
  uint64_t v16;
  CC_SHA1_CTX c;
  unsigned __int8 md[8];
  uint64_t v19;
  int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  memset(&c, 0, sizeof(c));
  *(_QWORD *)md = 0;
  v19 = 0;
  v20 = 0;
  CC_SHA1_Init(&c);
  CC_SHA1_Update(&c, a2, a3);
  CC_SHA1_Final(md, &c);
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  LOBYTE(v9) = 48;
  std::operator<<[abi:ne180100]<std::char_traits<char>>(v11, (char *)&v9);
  v7 = 0;
  *(_DWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24) + 8) = *(_DWORD *)((_BYTE *)v11
                                                                                    + *(_QWORD *)(*(_QWORD *)&v11[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  do
  {
    *(_QWORD *)((char *)&v11[1] + *(_QWORD *)(*(_QWORD *)&v11[0] - 24) + 8) = 2;
    std::ostream::operator<<();
    ++v7;
  }
  while (v7 != 20);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v9;
  *(_QWORD *)(a4 + 16) = v10;
  *(_QWORD *)&v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v15);
  return 1;
}

void sub_1BEFEC36C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipSHA1DigestAlgorithm::computeHmac(int a1, const void *a2, size_t a3, const void *a4, size_t a5, unint64_t *a6)
{
  void *v11;
  unint64_t v13;

  v11 = (void *)*a6;
  v13 = a6[1] - (_QWORD)v11;
  if (v13 > 0x13)
  {
    if (v13 != 20)
      a6[1] = (unint64_t)v11 + 20;
  }
  else
  {
    std::vector<unsigned char>::__append(a6, 20 - v13);
    v11 = (void *)*a6;
  }
  CCHmac(0, a2, a3, a4, a5, v11);
  return 1;
}

uint64_t SipSHA256DigestAlgorithm::computeHmac(int a1, const void *a2, size_t a3, const void *a4, size_t a5, unint64_t *a6)
{
  void *v11;
  unint64_t v13;

  v11 = (void *)*a6;
  v13 = a6[1] - (_QWORD)v11;
  if (v13 > 0x1F)
  {
    if (v13 != 32)
      a6[1] = (unint64_t)v11 + 32;
  }
  else
  {
    std::vector<unsigned char>::__append(a6, 32 - v13);
    v11 = (void *)*a6;
  }
  CCHmac(2u, a2, a3, a4, a5, v11);
  return 1;
}

void SipDigestAlgorithmManager::SipDigestAlgorithmManager(SipDigestAlgorithmManager *this)
{
  _QWORD *v2;
  unsigned __int8 *v3;

  *(_OWORD *)this = 0u;
  *((_OWORD *)this + 1) = 0u;
  *((_DWORD *)this + 8) = 1065353216;
  v2 = (_QWORD *)operator new();
  *v2 = &off_1E78D0848;
  v3 = SipDigestAlgorithm::kAlgorithmMD5;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipDigestAlgorithm *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t *)this, SipDigestAlgorithm::kAlgorithmMD5, (uint64_t)&std::piecewise_construct, (__int128 **)&v3)+ 5) = v2;
}

void sub_1BEFEC538(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

void SipDigestAlgorithmManager::~SipDigestAlgorithmManager(SipDigestAlgorithmManager *this)
{
  _QWORD *i;
  uint64_t v3;

  for (i = (_QWORD *)*((_QWORD *)this + 2); i; i = (_QWORD *)*i)
  {
    v3 = i[5];
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this);
}

void SipMD5DigestAlgorithm::~SipMD5DigestAlgorithm(SipMD5DigestAlgorithm *this)
{
  JUMPOUT(0x1C3B87100);
}

void *SipMD5DigestAlgorithm::name(SipMD5DigestAlgorithm *this)
{
  return &SipDigestAlgorithm::kAlgorithmMD5;
}

void SipSHA1DigestAlgorithm::~SipSHA1DigestAlgorithm(SipSHA1DigestAlgorithm *this)
{
  JUMPOUT(0x1C3B87100);
}

const char *SipSHA1DigestAlgorithm::name(SipSHA1DigestAlgorithm *this)
{
  return "SHA1";
}

char *std::__hash_table<std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipDigestAlgorithm *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipDigestAlgorithm *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t *a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  void **v14;
  char *v15;
  unint64_t v16;
  __int128 *v17;
  std::string *v18;
  __int128 v19;
  float v20;
  float v21;
  _BOOL8 v22;
  unint64_t v23;
  unint64_t v24;
  int8x8_t prime;
  void *v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  unint64_t v30;
  uint8x8_t v31;
  unint64_t v32;
  uint8x8_t v33;
  uint64_t v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t v39;
  void *v41;

  v7 = a1 + 3;
  v8 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v9 = v8;
  v10 = a1[1];
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(void ***)(*a1 + 8 * v13);
    if (v14)
    {
      v15 = (char *)*v14;
      if (*v14)
      {
        do
        {
          v16 = *((_QWORD *)v15 + 1);
          if (v16 == v9)
          {
            if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), (unsigned __int8 *)v15 + 16, a2) & 1) != 0)return v15;
          }
          else
          {
            if (v12 > 1)
            {
              if (v16 >= v10)
                v16 %= v10;
            }
            else
            {
              v16 &= v10 - 1;
            }
            if (v16 != v13)
              break;
          }
          v15 = *(char **)v15;
        }
        while (v15);
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v17 = *a4;
  v15 = (char *)operator new(0x30uLL);
  *(_QWORD *)v15 = 0;
  *((_QWORD *)v15 + 1) = v9;
  v18 = (std::string *)(v15 + 16);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v18, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v19 = *v17;
    *((_QWORD *)v15 + 4) = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v18->__r_.__value_.__l.__data_ = v19;
  }
  *((_QWORD *)v15 + 5) = 0;
  v20 = (float)(unint64_t)(a1[3] + 1);
  v21 = *((float *)a1 + 8);
  if (!v10 || (float)(v21 * (float)v10) < v20)
  {
    v22 = 1;
    if (v10 >= 3)
      v22 = (v10 & (v10 - 1)) != 0;
    v23 = v22 | (2 * v10);
    v24 = vcvtps_u32_f32(v20 / v21);
    if (v23 <= v24)
      prime = (int8x8_t)v24;
    else
      prime = (int8x8_t)v23;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v10 = a1[1];
    if (*(_QWORD *)&prime > v10)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v10)
    {
      v32 = vcvtps_u32_f32((float)(unint64_t)a1[3] / *((float *)a1 + 8));
      if (v10 < 3 || (v33 = (uint8x8_t)vcnt_s8((int8x8_t)v10), v33.i16[0] = vaddlv_u8(v33), v33.u32[0] > 1uLL))
      {
        v32 = std::__next_prime(v32);
      }
      else
      {
        v34 = 1 << -(char)__clz(v32 - 1);
        if (v32 >= 2)
          v32 = v34;
      }
      if (*(_QWORD *)&prime <= v32)
        prime = (int8x8_t)v32;
      if (*(_QWORD *)&prime >= v10)
      {
        v10 = a1[1];
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v26 = operator new(8 * *(_QWORD *)&prime);
          v27 = (void *)*a1;
          *a1 = (uint64_t)v26;
          if (v27)
            operator delete(v27);
          v28 = 0;
          a1[1] = (uint64_t)prime;
          do
            *(_QWORD *)(*a1 + 8 * v28++) = 0;
          while (*(_QWORD *)&prime != v28);
          v29 = (_QWORD *)a1[2];
          if (v29)
          {
            v30 = v29[1];
            v31 = (uint8x8_t)vcnt_s8(prime);
            v31.i16[0] = vaddlv_u8(v31);
            if (v31.u32[0] > 1uLL)
            {
              if (v30 >= *(_QWORD *)&prime)
                v30 %= *(_QWORD *)&prime;
            }
            else
            {
              v30 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*a1 + 8 * v30) = a1 + 2;
            v35 = (_QWORD *)*v29;
            if (*v29)
            {
              do
              {
                v36 = v35[1];
                if (v31.u32[0] > 1uLL)
                {
                  if (v36 >= *(_QWORD *)&prime)
                    v36 %= *(_QWORD *)&prime;
                }
                else
                {
                  v36 &= *(_QWORD *)&prime - 1;
                }
                if (v36 != v30)
                {
                  if (!*(_QWORD *)(*a1 + 8 * v36))
                  {
                    *(_QWORD *)(*a1 + 8 * v36) = v29;
                    goto LABEL_58;
                  }
                  *v29 = *v35;
                  *v35 = **(_QWORD **)(*a1 + 8 * v36);
                  **(_QWORD **)(*a1 + 8 * v36) = v35;
                  v35 = v29;
                }
                v36 = v30;
LABEL_58:
                v29 = v35;
                v35 = (_QWORD *)*v35;
                v30 = v36;
              }
              while (v35);
            }
          }
          v10 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = (void *)*a1;
        *a1 = 0;
        if (v41)
          operator delete(v41);
        v10 = 0;
        a1[1] = 0;
      }
    }
LABEL_62:
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v37 = *a1;
  v38 = *(_QWORD **)(*a1 + 8 * v13);
  if (v38)
  {
    *(_QWORD *)v15 = *v38;
LABEL_75:
    *v38 = v15;
    goto LABEL_76;
  }
  *(_QWORD *)v15 = a1[2];
  a1[2] = (uint64_t)v15;
  *(_QWORD *)(v37 + 8 * v13) = a1 + 2;
  if (*(_QWORD *)v15)
  {
    v39 = *(_QWORD *)(*(_QWORD *)v15 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v39 >= v10)
        v39 %= v10;
    }
    else
    {
      v39 &= v10 - 1;
    }
    v38 = (_QWORD *)(*a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  ++*v7;
  return v15;
}

void sub_1BEFECA1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,SipDigestAlgorithm *>,void *>>>::operator()[abi:ne180100](char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 39) < 0)
      operator delete(__p[2]);
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t SipHost::SipHost(uint64_t a1, std::string *a2)
{
  *(_QWORD *)a1 = &off_1E78D08F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  SipHost::fromString(a1, a2);
  *(_WORD *)(a1 + 32) = 0;
  return a1;
}

void sub_1BEFECAE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

uint64_t SipHost::fromString(uint64_t a1, std::string *a2)
{
  void **v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *p_p;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string __p;
  uint64_t v13;
  std::__shared_weak_count *v14;
  char v15;

  if (*(char *)(a1 + 31) < 0)
  {
    **(_BYTE **)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_BYTE *)(a1 + 31) = 0;
  }
  *(_WORD *)(a1 + 32) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 40));
  v13 = 0;
  v14 = 0;
  IpAddress::createAddress(a2, (uint64_t)&v13);
  if (v13)
  {
    std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 40), &v13);
    *(_WORD *)(a1 + 32) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 56))(v13);
  }
  else
  {
    v4 = (void **)(a1 + 8);
    v5 = std::string::find(a2, 58, 0);
    if (v5 == -1)
    {
      std::string::operator=((std::string *)(a1 + 8), a2);
    }
    else
    {
      v6 = v5;
      std::string::basic_string(&__p, a2, 0, v5, (std::allocator<char> *)&v15);
      if (*(char *)(a1 + 31) < 0)
        operator delete(*v4);
      *(_OWORD *)v4 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
      std::string::basic_string(&__p, a2, v6 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v15);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_p = &__p;
      else
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      *(_WORD *)(a1 + 32) = strtol((const char *)p_p, 0, 10);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 40));
  }
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  return 1;
}

void sub_1BEFECCA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t SipHost::SipHost(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  __int128 v10;

  *(_QWORD *)a1 = &off_1E78D08F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v4 = a1 + 40;
  *(_QWORD *)(a1 + 48) = 0;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v5 + 32))(&v10);
  else
    v10 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](v4, &v10);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

{
  _QWORD *v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v8;

  *(_QWORD *)a1 = &off_1E78D08F8;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v3 = (_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 48) = 0;
  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 32))(&v8);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v3, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_WORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 56))(*v3);
  return a1;
}

void sub_1BEFECD94(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void sub_1BEFECE7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v3);
  _Unwind_Resume(a1);
}

void SipHost::~SipHost(void **this)
{
  *this = &off_1E78D08F8;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t SipHost::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;

  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  *(_WORD *)(a1 + 32) = *(_WORD *)(a2 + 32);
  v4 = *(_QWORD *)(a2 + 40);
  if (v4)
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v4 + 32))(&v9);
  else
    v9 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 40, &v9);
  v5 = (std::__shared_weak_count *)*((_QWORD *)&v9 + 1);
  if (*((_QWORD *)&v9 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v9 + 1) + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void SipHost::address(SipHost *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v7[72];

  SipHost::resolve(this, 0, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  v4 = *((_QWORD *)this + 6);
  *a2 = *((_QWORD *)this + 5);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

void SipHost::resolve(SipHost *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  const char *v8;
  int v9;
  uint64_t v10;
  const ImsResult *v11;
  addrinfo *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  __int128 v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v27;
  addrinfo *v28;
  __int128 v29;
  int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;

  v6 = (_QWORD *)((char *)this + 40);
  v5 = *((_QWORD *)this + 5);
  if (v5)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v5 + 88))(v5))
    {
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
      return;
    }
    if ((a2 & 1) == 0)
    {
      v31 = 0u;
      v32 = 0u;
      v33 = 0u;
      *(_QWORD *)&v29 = &off_1E78B7238;
      *((_QWORD *)&v29 + 1) = &_bambiDomain;
      v30 = 0x40000000;
      v11 = (const ImsResult *)ImsResult::operator<<<char [19]>((uint64_t)&v29, "address is invalid");
      ImsResult::ImsResult((ImsResult *)a3, v11);
      ImsResult::~ImsResult((ImsResult *)&v29);
      return;
    }
  }
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_QWORD *)(a3 + 32) = 0;
  v8 = (char *)this + 8;
  if (*((char *)this + 31) < 0)
  {
    if (!*((_QWORD *)this + 2))
      goto LABEL_24;
    v28 = 0;
    v8 = *(const char **)v8;
  }
  else
  {
    if (!*((_BYTE *)this + 31))
      goto LABEL_24;
    v28 = 0;
  }
  v9 = getaddrinfo(v8, 0, 0, &v28);
  if (v9)
  {
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    *(_QWORD *)&v29 = &off_1E78B7238;
    *((_QWORD *)&v29 + 1) = &_bambiDomain;
    v30 = 0x40000000;
    v27 = gai_strerror(v9);
    v10 = ImsResult::operator<<<char const*>((uint64_t)&v29, &v27);
    ImsResult::operator=(a3, v10);
    ImsResult::~ImsResult((ImsResult *)&v29);
LABEL_12:
    if (v28)
      freeaddrinfo(v28);
    goto LABEL_24;
  }
  v12 = v28;
  if (v28)
  {
    while (1)
    {
      v29 = 0uLL;
      IpAddress::createAddress((IpAddress *)v12->ai_addr, (uint64_t)&v29);
      if ((_QWORD)v29)
        break;
      v13 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
      if (*((_QWORD *)&v29 + 1))
      {
        v14 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v12 = v12->ai_next;
      if (!v12)
        goto LABEL_12;
    }
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v6, (uint64_t *)&v29);
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 5) + 64))(*((_QWORD *)this + 5), *((unsigned __int16 *)this + 16));
    v24 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v25 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    goto LABEL_12;
  }
LABEL_24:
  if (!*v6)
  {
    v16 = operator new(0x48uLL);
    v16[1] = 0;
    v16[2] = 0;
    *v16 = &off_1E78D0928;
    v16[5] = 0;
    v16[4] = 0;
    v16[3] = &off_1E78EB068;
    *(_QWORD *)((char *)v16 + 52) = 528;
    *(_QWORD *)&v29 = v16 + 3;
    *((_QWORD *)&v29 + 1) = v16;
    std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v29, v16 + 4, (uint64_t)(v16 + 3));
    v17 = v29;
    v29 = 0uLL;
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
    *(_OWORD *)((char *)this + 40) = v17;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v21 = (std::__shared_weak_count *)*((_QWORD *)&v29 + 1);
    if (*((_QWORD *)&v29 + 1))
    {
      v22 = (unint64_t *)(*((_QWORD *)&v29 + 1) + 8);
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
}

void sub_1BEFED304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  ImsResult *v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  ImsResult::~ImsResult(v3);
  _Unwind_Resume(a1);
}

uint64_t SipHost::setAddress(uint64_t a1, _QWORD *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;
  __int128 v8;

  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)*a2 + 32))(&v8);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 40, &v8);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v8 + 1);
  if (*((_QWORD *)&v8 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v8 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 56))(*a2);
  *(_WORD *)(a1 + 32) = result;
  return result;
}

void SipHost::asString(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v6, 1);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 8))(a1, &v6);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v7 + 1) + 8, &v4);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  *(_QWORD *)&v6 = &off_1E78D7A10;
  if ((_BYTE)v7)
  {
    if (*((_QWORD *)&v6 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 8))(*((_QWORD *)&v6 + 1));
  }
}

void sub_1BEFED498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

void SipHost::ipAddress(SipHost *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  _BYTE v7[72];

  SipHost::resolve(this, 0, (uint64_t)v7);
  ImsResult::~ImsResult((ImsResult *)v7);
  v4 = *((_QWORD *)this + 6);
  *a2 = *((_QWORD *)this + 5);
  a2[1] = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
}

ImsOutStream *SipHost::toStream(SipHost *this, ImsOutStream *a2, int a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;

  if (*((char *)this + 31) < 0)
  {
    if (*((_QWORD *)this + 2))
      goto LABEL_3;
  }
  else if (*((_BYTE *)this + 31))
  {
LABEL_3:
    LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 8));
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*((_WORD *)this + 16) && a3)
    {
      v6 = (_QWORD *)*((_QWORD *)a2 + 1);
      __p.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&__p, 1);
      *((_BYTE *)a2 + 17) = 0;
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
    }
    return a2;
  }
  v7 = *((_QWORD *)this + 5);
  if (v7)
  {
    if (a3)
      v8 = 3;
    else
      v8 = 2;
    (*(void (**)(uint64_t, ImsOutStream *, uint64_t))(*(_QWORD *)v7 + 120))(v7, a2, v8);
  }
  return a2;
}

void sub_1BEFED60C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipHost::equals(SipHost *this, const SipHost *a2, uint64_t a3)
{
  int v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t result;

  v3 = a3;
  v6 = *((unsigned __int8 *)this + 31);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 31))
      goto LABEL_3;
LABEL_18:
    result = *((_QWORD *)this + 5);
    if (!result)
      return result;
    if (*((_QWORD *)a2 + 5))
      return (*(uint64_t (**)(uint64_t, char *, uint64_t))(*(_QWORD *)result + 104))(result, (char *)a2 + 40, a3);
    return 0;
  }
  if (!*((_QWORD *)this + 2))
    goto LABEL_18;
LABEL_3:
  if ((v6 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)this + 31);
  else
    v7 = *((_QWORD *)this + 2);
  v8 = *((unsigned __int8 *)a2 + 31);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a2 + 2);
  if (v7 != v8)
    return 0;
  v10 = (const void **)((char *)this + 8);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)a2 + 8;
  else
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if ((v6 & 0x80) != 0)
  {
    LODWORD(v6) = memcmp(*v10, v11, *((_QWORD *)this + 2)) != 0;
  }
  else if (*((_BYTE *)this + 31))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6)
        goto LABEL_23;
    }
    return 0;
  }
LABEL_23:
  result = v6 ^ 1;
  if ((v6 & 1) == 0)
  {
    if (v3)
      return *((unsigned __int16 *)this + 16) == *((unsigned __int16 *)a2 + 16);
  }
  return result;
}

uint64_t SipHost::equalsWithDefaultPort(SipHost *this, const SipHost *a2, unsigned __int16 a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  const void **v10;
  unsigned __int8 *v11;
  uint64_t result;
  int v13;
  int v14;
  BOOL v15;
  unsigned int v16;

  v6 = *((unsigned __int8 *)this + 31);
  if ((*((char *)this + 31) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 31))
      goto LABEL_3;
LABEL_18:
    result = *((_QWORD *)this + 5);
    if (!result)
      return result;
    if (*((_QWORD *)a2 + 5))
      return IpAddress::equalsWithDefaultPort(result, (_QWORD *)a2 + 5, a3);
    return 0;
  }
  if (!*((_QWORD *)this + 2))
    goto LABEL_18;
LABEL_3:
  if ((v6 & 0x80u) == 0)
    v7 = *((unsigned __int8 *)this + 31);
  else
    v7 = *((_QWORD *)this + 2);
  v8 = *((unsigned __int8 *)a2 + 31);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *((_QWORD *)a2 + 2);
  if (v7 != v8)
    return 0;
  v10 = (const void **)((char *)this + 8);
  if (v9 >= 0)
    v11 = (unsigned __int8 *)a2 + 8;
  else
    v11 = (unsigned __int8 *)*((_QWORD *)a2 + 1);
  if ((v6 & 0x80) != 0)
  {
    if (!memcmp(*v10, v11, *((_QWORD *)this + 2)))
      goto LABEL_24;
    return 0;
  }
  if (*((_BYTE *)this + 31))
  {
    while (*(unsigned __int8 *)v10 == *v11)
    {
      v10 = (const void **)((char *)v10 + 1);
      ++v11;
      if (!--v6)
        goto LABEL_24;
    }
    return 0;
  }
LABEL_24:
  v13 = *((unsigned __int16 *)this + 16);
  v14 = *((unsigned __int16 *)a2 + 16);
  if (v13 == v14)
    return 1;
  if (*((_WORD *)this + 16))
    v15 = 0;
  else
    v15 = v14 == a3;
  v16 = v15;
  if (v13 == a3 && v14 == 0)
    return 1;
  else
    return v16;
}

ImsOutStream *SipHost::toStream(SipHost *this, ImsOutStream *a2)
{
  return SipHost::toStream(this, a2, 1);
}

void std::__shared_ptr_emplace<Ip4Address>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D0928;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<Ip4Address>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D0928;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<Ip4Address>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SipMultiPartBody::SipMultiPartBody(SipMultiPartBody *this)
{
  *(_QWORD *)this = &off_1E78D0978;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator((_QWORD *)this + 7, 0, 63);
}

void sub_1BEFED918(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::addPart(SipMultiPartBody *this, SipBodyPart *a2)
{
  char *v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = *((_QWORD *)this + 3);
  v4 = (char *)this + 24;
  v5 = v6;
  v7 = (_QWORD *)*((_QWORD *)v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *((_QWORD *)v4 - 2);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<SipBodyPart *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = a2;
    v8 = v16 + 8;
    v19 = (char *)*((_QWORD *)this + 1);
    v18 = (char *)*((_QWORD *)this + 2);
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    *((_QWORD *)this + 1) = v16;
    *((_QWORD *)this + 2) = v8;
    *((_QWORD *)this + 3) = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = a2;
    v8 = v7 + 1;
  }
  *((_QWORD *)this + 2) = v8;
}

void SipMultiPartBody::~SipMultiPartBody(SipMultiPartBody *this)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = &off_1E78D0978;
  v2 = (uint64_t *)*((_QWORD *)this + 1);
  v3 = (uint64_t *)*((_QWORD *)this + 2);
  while (v2 != v3)
  {
    v4 = *v2;
    if (*v2)
    {
      v5 = *(_QWORD *)(v4 + 24);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      v7 = (void **)v4;
      std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v7);
      MEMORY[0x1C3B87100](v4, 0x20C40DC1BFBCFLL);
    }
    ++v2;
  }
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((_QWORD *)this + 7);
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  v6 = (void *)*((_QWORD *)this + 1);
  if (v6)
  {
    *((_QWORD *)this + 2) = v6;
    operator delete(v6);
  }
}

{
  SipMultiPartBody::~SipMultiPartBody(this);
  JUMPOUT(0x1C3B87100);
}

BOOL SipMultiPartBody::initWithContentTypeHeader(SipMultiPartBody *this, const SipContentTypeHeader *a2)
{
  void **v4;
  const std::string *v5;
  uint64_t v6;
  void *__p[2];
  char v9;

  std::string::basic_string[abi:ne180100]<0>(__p, "boundary");
  v4 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a2 + 72, __p);
  if ((void **)((char *)a2 + 80) == v4)
    v5 = (const std::string *)&ims::kEmptyString;
  else
    v5 = (const std::string *)(v4 + 7);
  std::string::operator=((std::string *)((char *)this + 32), v5);
  if (v9 < 0)
    operator delete(__p[0]);
  ims::removeQuotes((uint64_t)this + 32);
  if (*((char *)this + 55) < 0)
    v6 = *((_QWORD *)this + 5);
  else
    v6 = *((unsigned __int8 *)this + 55);
  return v6 != 0;
}

void sub_1BEFEDB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::fillContentTypeHeader(SipMultiPartBody *this, SipContentTypeHeader *a2)
{
  const std::string *v4;
  uint64_t *v5;
  void *__p[2];
  char v7;
  void **v8;

  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 55))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!*((_QWORD *)this + 5))
LABEL_3:
    SipMultiPartBody::generateBoundary(this);
LABEL_4:
  v4 = (const std::string *)(*(uint64_t (**)(SipMultiPartBody *))(*(_QWORD *)this + 40))(this);
  std::string::operator=((std::string *)((char *)a2 + 104), v4);
  std::string::basic_string[abi:ne180100]<0>(__p, "boundary");
  v8 = __p;
  v5 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)a2 + 9, __p, (uint64_t)&std::piecewise_construct, (__int128 **)&v8);
  std::string::operator=((std::string *)(v5 + 7), (const std::string *)((char *)this + 32));
  if (v7 < 0)
    operator delete(__p[0]);
}

void sub_1BEFEDC74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::generateBoundary(SipMultiPartBody *this)
{
  _QWORD *v2;
  std::string *v3;
  std::string::size_type size;
  void **v5;
  __int128 v6;
  uint64_t v7;
  _OWORD v8[4];
  void *__p[2];
  __int128 v10;
  __int128 v11;
  _BYTE v12[144];
  uint64_t v13;
  std::string v14;

  memset(&v14, 0, sizeof(v14));
  ImsRandomStringGenerator::randomString((SipMultiPartBody *)((char *)this + 56), 20, &v14);
  v13 = 0;
  memset(v12, 0, sizeof(v12));
  v10 = 0u;
  v11 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v8, 0, sizeof(v8));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v8);
  v2 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)"MIME_boundary_", 14);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v3 = &v14;
  else
    v3 = (std::string *)v14.__r_.__value_.__r.__words[0];
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  else
    size = v14.__r_.__value_.__l.__size_;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v2, (uint64_t)v3, size);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v8 + 8, &v6);
  v5 = (void **)((char *)this + 32);
  if (*((char *)this + 55) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v6;
  *((_QWORD *)this + 6) = v7;
  *(_QWORD *)&v8[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v8 + *(_QWORD *)(*(_QWORD *)&v8[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v8[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v10) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v12);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
}

void sub_1BEFEDDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  if (*(char *)(v5 - 41) < 0)
    operator delete(*(void **)(v5 - 64));
  _Unwind_Resume(a1);
}

uint64_t SipMultiPartBody::contentLength(SipMultiPartBody *this)
{
  SipBodyPart **v2;
  SipBodyPart **v3;
  uint64_t v4;
  uint64_t v5;
  SipBodyPart *v6;
  uint64_t v7;
  uint64_t v8;

  if ((*((char *)this + 55) & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 55))
      goto LABEL_4;
    goto LABEL_3;
  }
  if (!*((_QWORD *)this + 5))
LABEL_3:
    SipMultiPartBody::generateBoundary(this);
LABEL_4:
  v2 = (SipBodyPart **)*((_QWORD *)this + 1);
  v3 = (SipBodyPart **)*((_QWORD *)this + 2);
  if (v2 == v3)
  {
    v7 = 8;
  }
  else
  {
    v4 = 0;
    do
    {
      if (*((char *)this + 55) < 0)
        v5 = *((_QWORD *)this + 5);
      else
        v5 = *((unsigned __int8 *)this + 55);
      v6 = *v2++;
      v4 += v5 + SipBodyPart::contentLength(v6) + 6;
    }
    while (v2 != v3);
    v7 = v4 + 8;
  }
  if (*((char *)this + 55) < 0)
    v8 = *((_QWORD *)this + 5);
  else
    v8 = *((unsigned __int8 *)this + 55);
  return v8 + v7;
}

_QWORD *SipMultiPartBody::encode(SipMultiPartBody *this, ImsOutStream *a2, uint64_t a3)
{
  uint64_t v6;
  char *v7;
  SipBodyPart **v8;
  SipBodyPart **v9;
  SipBodyPart *v10;
  _QWORD *result;

  if (*((char *)this + 55) < 0)
    v6 = *((_QWORD *)this + 5);
  else
    v6 = *((unsigned __int8 *)this + 55);
  v7 = (char *)this + 32;
  if (!v6)
    SipMultiPartBody::generateBoundary(this);
  v8 = (SipBodyPart **)*((_QWORD *)this + 1);
  v9 = (SipBodyPart **)*((_QWORD *)this + 2);
  while (v8 != v9)
  {
    v10 = *v8++;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n--", 4);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
    SipBodyPart::encode(v10, a2, a3);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n--", 4);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, v7);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"--\r\n", 4);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t SipMultiPartBody::decode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  std::string::value_type v9;
  uint64_t v10;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  if (a3)
  {
    v6 = a3;
    v8 = a2 + 4;
    while (1)
    {
      v9 = std::istream::get();
      std::string::push_back(&v12, v9);
      if (*(_DWORD *)((char *)v8 + *(_QWORD *)(*a2 - 24)))
        break;
      if (!--v6)
        goto LABEL_5;
    }
    v10 = 0;
  }
  else
  {
LABEL_5:
    v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 88))(a1, &v12, a4);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BEFEE098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipMultiPartBody::decode(uint64_t a1, uint64_t a2, SipMessageEncodingMap *a3)
{
  const void *v6;
  uint64_t v7;
  _BOOL8 v8;
  std::string::size_type v9;
  const std::string::value_type *v10;
  char v11;
  int64_t v12;
  std::string::size_type v13;
  int v14;
  std::string::size_type v15;
  std::string::size_type size;
  std::string *v17;
  char *p_p;
  int64_t v19;
  const std::string::value_type *v20;
  char *v21;
  char *v22;
  int64_t v23;
  int v24;
  int64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  int v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  SipMultiPartBody *v35;
  SipMessageEncodingMap *v36;
  BOOL v37;
  std::string *__str;
  void *v39[2];
  char v40;
  void *v41[2];
  char v42;
  std::string v43;
  void *__p;
  int64_t v45;
  uint64_t v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;

  if ((*(char *)(a1 + 55) & 0x80000000) == 0)
  {
    if (*(_BYTE *)(a1 + 55))
      goto LABEL_3;
LABEL_6:
    std::string::basic_string[abi:ne180100]<0>(&v47, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&v47, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"SipMultiPartBody: no boundary specified in Content-Type header", 62);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v46) < 0)
      operator delete(__p);
    if (SHIBYTE(v49) < 0)
      operator delete(v47);
    return 0;
  }
  if (!*(_QWORD *)(a1 + 40))
    goto LABEL_6;
LABEL_3:
  v47 = 0;
  v48 = 0;
  v49 = 0;
  std::operator+<char>();
  __p = 0;
  v45 = 0;
  v46 = 0;
  std::operator+<char>();
  __str = (std::string *)a2;
  if (*(char *)(a2 + 23) < 0)
    v6 = *(const void **)a2;
  else
    v6 = (const void *)a2;
  v35 = (SipMultiPartBody *)a1;
  v37 = memcmp(v6, &v47, 0) != 0;
  v36 = a3;
  v9 = 0;
  v10 = "--";
  while (1)
  {
    v11 = v37;
    if (v9)
      v11 = 1;
    if ((v11 & 1) != 0)
    {
      v12 = HIBYTE(v46);
      if (v46 < 0)
        v12 = v45;
      v13 = v12 + v9;
    }
    else
    {
      v13 = SHIBYTE(v49) < 0 ? v48 : HIBYTE(v49);
    }
    v14 = std::string::compare(__str, v13, 2uLL, v10);
    v8 = v14 == 0;
    if (!v14)
      break;
    if (std::string::compare(__str, v13, 2uLL, "\r\n"))
    {
      std::string::basic_string[abi:ne180100]<0>(&v43, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(v41, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v33 = ImsLogger::error(ims::_logger, (uint64_t)&v43, (uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"SipMultiPartBody: boundary must be followed by CRLF", 51);
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      goto LABEL_62;
    }
    v15 = v13 + 2;
    size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0)
      v17 = __str;
    else
      v17 = (std::string *)__str->__r_.__value_.__r.__words[0];
    if ((size & 0x80u) != 0)
      size = __str->__r_.__value_.__l.__size_;
    if (v46 >= 0)
      p_p = (char *)&__p;
    else
      p_p = (char *)__p;
    if (v46 >= 0)
      v19 = HIBYTE(v46);
    else
      v19 = v45;
    if (size < v15)
      goto LABEL_61;
    v20 = v10;
    v9 = v15;
    if (v19)
    {
      v21 = (char *)v17 + v15;
      v22 = (char *)v17 + size;
      v23 = size - v15;
      if (v23 >= v19)
      {
        v24 = *p_p;
        do
        {
          v25 = v23 - v19;
          if (v25 == -1)
            break;
          v26 = (char *)memchr(v21, v24, v25 + 1);
          if (!v26)
            break;
          v27 = v26;
          if (!memcmp(v26, p_p, v19))
          {
            if (v27 == v22)
              break;
            v9 = v27 - (char *)v17;
            goto LABEL_46;
          }
          v21 = v27 + 1;
          v23 = v22 - (v27 + 1);
        }
        while (v23 >= v19);
      }
LABEL_61:
      std::string::basic_string[abi:ne180100]<0>(&v43, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(v41, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v33 = ImsLogger::error(ims::_logger, (uint64_t)&v43, (uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"SipMultiPartBody: missing boundary", 34);
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_62:
      *(_BYTE *)(v33 + 17) = 0;
      if (v42 < 0)
        operator delete(v41[0]);
      if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v43.__r_.__value_.__l.__data_);
      v8 = 0;
      break;
    }
LABEL_46:
    if (v9 == -1)
      goto LABEL_61;
    memset(&v43, 0, sizeof(v43));
    std::string::basic_string(&v43, __str, v15, v9 - v15, (std::allocator<char> *)v41);
    v28 = operator new();
    v10 = v20;
    *(_OWORD *)v28 = 0u;
    *(_OWORD *)(v28 + 16) = 0u;
    v29 = SipBodyPart::decode((unint64_t *)v28, &v43, v36);
    v30 = v29;
    if (v29)
    {
      SipMultiPartBody::addPart(v35, (SipBodyPart *)v28);
    }
    else
    {
      v31 = *(_QWORD *)(v28 + 24);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v41[0] = (void *)v28;
      std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)v41);
      MEMORY[0x1C3B87100](v28, 0x20C40DC1BFBCFLL);
      std::string::basic_string[abi:ne180100]<0>(v41, "sip.decode");
      std::string::basic_string[abi:ne180100]<0>(v39, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v32 = ImsLogger::error(ims::_logger, (uint64_t)v41, (uint64_t)v39);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"SipMultiPartBody: part decode failed", 36);
      *(_BYTE *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v32 + 17) = 0;
      if (v40 < 0)
        operator delete(v39[0]);
      if (v42 < 0)
        operator delete(v41[0]);
      v9 = v15;
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v43.__r_.__value_.__l.__data_);
      if ((v30 & 1) == 0)
        break;
    }
    else if ((v30 & 1) == 0)
    {
      break;
    }
  }
  if (SHIBYTE(v46) < 0)
    operator delete(__p);
  if (SHIBYTE(v49) < 0)
    operator delete(v47);
  return v8;
}

void sub_1BEFEE7E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  if (a30 < 0)
    operator delete(__p);
  if (a36 < 0)
    operator delete(a31);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(exception_object);
}

void SipMultiPartBody::encodeContentOnlyToString(uint64_t a1, uint64_t a2)
{
  SipBodyPart **v4;
  SipBodyPart **v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  uint64_t v10;

  v10 = 0;
  v8 = 0u;
  v9 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v8, 1);
  v5 = *(SipBodyPart ***)(a1 + 8);
  v4 = *(SipBodyPart ***)(a1 + 16);
  while (v5 != v4)
    SipBodyPart::encode(*v5++, (ImsOutStream *)&v8, 0);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v9 + 1) + 8, &v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  *(_QWORD *)&v8 = &off_1E78D7A10;
  if ((_BYTE)v9)
  {
    if (*((_QWORD *)&v8 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v8 + 1) + 8))(*((_QWORD *)&v8 + 1));
  }
}

void sub_1BEFEE95C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  if (a15)
  {
    if (a14)
      (*(void (**)(uint64_t))(*(_QWORD *)a14 + 8))(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipMultiPartBody::addPart(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  SipBodyPart::SipBodyPart(v4, a2);
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<SipBodyPart *>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4;
}

void sub_1BEFEEA98(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x20C40DC1BFBCFLL);
  _Unwind_Resume(a1);
}

uint64_t SipMultiPartBody::partWithContentType(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t *v2;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unsigned __int8 *v12;

  v2 = *(uint64_t **)(a1 + 8);
  for (i = *(uint64_t **)(a1 + 16); v2 != i; ++v2)
  {
    v5 = *v2;
    v6 = *(_QWORD *)(*v2 + 24);
    if (v6)
    {
      v7 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
      v8 = v7[23];
      if ((v8 & 0x80u) == 0)
        v9 = v7[23];
      else
        v9 = *((_QWORD *)v7 + 1);
      v10 = a2[23];
      v11 = (char)v10;
      if ((v10 & 0x80u) != 0)
        v10 = *((_QWORD *)a2 + 1);
      if (v9 == v10)
      {
        if (v11 >= 0)
          v12 = a2;
        else
          v12 = *(unsigned __int8 **)a2;
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v7, v12, *((_QWORD *)v7 + 1)))
            return v5;
        }
        else
        {
          if (!v7[23])
            return v5;
          while (*v7 == *v12)
          {
            ++v7;
            ++v12;
            if (!--v8)
              return v5;
          }
        }
      }
    }
  }
  return 0;
}

uint64_t SipMultiPartBody::clone(SipMultiPartBody *this)
{
  uint64_t v2;
  __int128 ***v3;
  __int128 ***v4;
  __int128 **v5;
  SipBodyPart *v6;

  v2 = operator new();
  *(_QWORD *)v2 = &off_1E78D0978;
  *(_OWORD *)(v2 + 8) = 0u;
  *(_OWORD *)(v2 + 24) = 0u;
  *(_OWORD *)(v2 + 40) = 0u;
  ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator((_QWORD *)(v2 + 56), 0, 63);
  v3 = (__int128 ***)*((_QWORD *)this + 1);
  v4 = (__int128 ***)*((_QWORD *)this + 2);
  while (v3 != v4)
  {
    v5 = *v3;
    v6 = (SipBodyPart *)operator new();
    SipBodyPart::SipBodyPart(v6, v5);
    SipMultiPartBody::addPart((SipMultiPartBody *)v2, v6);
    ++v3;
  }
  return v2;
}

void sub_1BEFEEC5C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void *v4;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  v4 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 16) = v4;
    operator delete(v4);
  }
  MEMORY[0x1C3B87100](v1, 0x10B3C401BA7B717);
  _Unwind_Resume(a1);
}

const char *SipMultiPartBody::contentType(SipMultiPartBody *this)
{
  return "multipart/mixed";
}

void std::vector<SipBodyPart *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void SipAcceptLanguageHeader::~SipAcceptLanguageHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipAcceptLanguageHeader::clone(SipAcceptLanguageHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78D0A08;
  return v2;
}

void sub_1BEFEEDC0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

uint64_t XcapSession::XcapSession(uint64_t a1, uint64_t a2, XcapConfig *a3, __int128 *a4)
{
  uint64_t v7;
  const XcapConfig *v8;
  __int128 v9;
  uint64_t v10;
  XcapNafServerInfo *v11;
  const SipAuthResponse *v12;
  XcapBsfServerInfo *v13;
  SipTimerContainer *v14;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  *(_QWORD *)(a1 + 8) = &unk_1E78D0B20;
  v7 = a1 + 8;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E78D0AA0;
  v8 = (const XcapConfig *)(a1 + 40);
  XcapConfig::XcapConfig((XcapConfig *)(a1 + 40), a3);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 400), *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v9 = *a4;
    *(_QWORD *)(a1 + 416) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 400) = v9;
  }
  *(_QWORD *)(a1 + 424) = a2;
  *(_QWORD *)(a1 + 464) = MEMORY[0x1E0C80D38];
  std::string::basic_string[abi:ne180100]<0>(v18, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Creating XcapSession: ", 22);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  *(_QWORD *)(a1 + 32) = ++XcapSession::_generateSessionId(void)const::kSessionId;
  v11 = (XcapNafServerInfo *)operator new();
  v12 = (const SipAuthResponse *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 424) + 48))(*(_QWORD *)(a1 + 424));
  XcapNafServerInfo::XcapNafServerInfo(v11, (XcapSession *)a1, v8, v12, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 440) = v11;
  v13 = (XcapBsfServerInfo *)operator new();
  XcapBsfServerInfo::XcapBsfServerInfo(v13, (XcapSession *)a1, v8, *(_QWORD *)(a1 + 32));
  *(_QWORD *)(a1 + 448) = v13;
  v14 = (SipTimerContainer *)operator new();
  SipTimerContainer::SipTimerContainer(v14);
  *(_QWORD *)(a1 + 456) = v14;
  *((_QWORD *)v14 + 13) = v7;
  return a1;
}

void sub_1BEFEF008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  void **v21;
  std::__shared_weak_count *v23;

  XcapConfig::~XcapConfig(v21);
  v23 = *(std::__shared_weak_count **)(v20 + 24);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void XcapSession::~XcapSession(XcapSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  *(_QWORD *)this = &off_1E78D0AA0;
  *((_QWORD *)this + 1) = &unk_1E78D0B20;
  std::string::basic_string[abi:ne180100]<0>(v9, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Deleting XcapSession: ", 22);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  _Block_release(*((const void **)this + 54));
  v3 = *((_QWORD *)this + 55);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 56);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 57);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  XcapConfig::~XcapConfig((void **)this + 5);
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

{
  XcapSession::~XcapSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'XcapSession::~XcapSession(XcapSession *this)
{
  XcapSession::~XcapSession((XcapSession *)((char *)this - 8));
}

{
  XcapSession::~XcapSession((XcapSession *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

uint64_t XcapSession::fetchDocument(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, __int128 *, uint64_t))(*(_QWORD *)a1 + 104))(a1, 0, a2, &ims::kEmptyString, a3);
}

uint64_t XcapSession::setDocument(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, 1, a2, a3, a4);
}

void XcapSession::_sendRequest(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *aBlock)
{
  uint64_t v9;
  int v10;
  uint64_t v11;
  char v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  char v18;
  uint64_t v19;
  char v20;
  char v21;
  std::__shared_weak_count *v22;
  uint64_t v23;
  unint64_t *p_shared_weak_owners;
  unint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  void *__p[2];
  char v33;
  void *v34;
  uint64_t *v35;
  int v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[24];
  _BYTE *v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 432) = _Block_copy(aBlock);
  v9 = *(_QWORD *)(a1 + 440);
  v10 = *(unsigned __int8 *)(a1 + 172);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v9 + 80))(&v34, v9);
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 440) + 88))(*(_QWORD *)(a1 + 440));
  v12 = (*(uint64_t (**)(uint64_t, BOOL, void **, uint64_t))(*(_QWORD *)v9 + 72))(v9, v10 != 0, &v34, v11);
  v13 = v12;
  if ((v37 & 0x80000000) == 0)
  {
    if ((v12 & 1) != 0)
      goto LABEL_3;
LABEL_16:
    v42 = 0;
    v43 = 0;
    v34 = &off_1E78B7238;
    v35 = &_bambiDomain;
    v36 = 0x40000000;
    v40 = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v34);
    ImsResult::~ImsResult((ImsResult *)&v34);
    return;
  }
  operator delete(v34);
  if ((v13 & 1) == 0)
    goto LABEL_16;
LABEL_3:
  if (a2)
  {
    v14 = *(unsigned __int8 *)(a4 + 23);
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(a4 + 8);
    if (!v14)
    {
      std::string::basic_string[abi:ne180100]<0>(&v34, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::error(ims::_logger, (uint64_t)&v34, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v15 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"PUT request doesn't have a body. Failing request", 48);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v33 < 0)
        operator delete(__p[0]);
      if (v37 < 0)
        operator delete(v34);
      v42 = 0;
      v43 = 0;
      v34 = &off_1E78B7238;
      v35 = &_bambiDomain;
      v36 = 0x40000000;
      v40 = 0;
      v41 = 0;
      v38 = 0;
      v39 = 0;
      XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v34);
      ImsResult::~ImsResult((ImsResult *)&v34);
    }
    v16 = *(_QWORD *)(a1 + 440);
    XcapUrlHelper::createUrl((uint64_t *)(a3 + 16), (uint64_t *)(a3 + 40), &v34);
    v17 = (*(uint64_t (**)(uint64_t, void **, uint64_t))(*(_QWORD *)v16 + 128))(v16, &v34, a4);
    v18 = v17;
    if (v37 < 0)
    {
      operator delete(v34);
      if ((v18 & 1) != 0)
        goto LABEL_25;
    }
    else if ((v17 & 1) != 0)
    {
      goto LABEL_25;
    }
    v42 = 0;
    v43 = 0;
    v34 = &off_1E78B7238;
    v35 = &_bambiDomain;
    v36 = 0x40000000;
    v40 = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v34);
LABEL_24:
    ImsResult::~ImsResult((ImsResult *)&v34);
    goto LABEL_25;
  }
  v19 = *(_QWORD *)(a1 + 440);
  XcapUrlHelper::createUrl((uint64_t *)(a3 + 16), (uint64_t *)(a3 + 40), &v34);
  v20 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v19 + 120))(v19, &v34);
  v21 = v20;
  if (v37 < 0)
  {
    operator delete(v34);
    if ((v21 & 1) != 0)
      goto LABEL_25;
    goto LABEL_21;
  }
  if ((v20 & 1) == 0)
  {
LABEL_21:
    v42 = 0;
    v43 = 0;
    v34 = &off_1E78B7238;
    v35 = &_bambiDomain;
    v36 = 0x40000000;
    v40 = 0;
    v41 = 0;
    v38 = 0;
    v39 = 0;
    XcapSession::operationFailure((XcapSession *)a1, (const ImsResult *)&v34);
    goto LABEL_24;
  }
LABEL_25:
  v23 = *(_QWORD *)(a1 + 16);
  v22 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v22)
  {
    if (!*(_DWORD *)(a1 + 320))
      return;
    v27 = *(_QWORD **)(a1 + 456);
LABEL_35:
    v45 = 0;
    v29 = operator new(0x20uLL);
    *v29 = &off_1E78D0BE8;
    v29[1] = a1;
    v29[2] = v23;
    v29[3] = v22;
    v45 = v29;
    SipTimerContainer::startTimer(v27, (uint64_t)&XcapSession::kRequestTimeoutTimerId, (uint64_t)v44, 1000 * *(_DWORD *)(a1 + 320), 0);
    v30 = v45;
    if (v45 == v44)
    {
      v31 = 4;
      v30 = v44;
    }
    else
    {
      if (!v45)
        goto LABEL_40;
      v31 = 5;
    }
    (*(void (**)(void))(*v30 + 8 * v31))();
LABEL_40:
    if (!v22)
      return;
    goto LABEL_41;
  }
  p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
  do
    v25 = __ldxr(p_shared_weak_owners);
  while (__stxr(v25 + 1, p_shared_weak_owners));
  do
    v26 = __ldxr(p_shared_weak_owners);
  while (__stxr(v26 + 1, p_shared_weak_owners));
  if (*(_DWORD *)(a1 + 320))
  {
    v27 = *(_QWORD **)(a1 + 456);
    do
      v28 = __ldxr(p_shared_weak_owners);
    while (__stxr(v28 + 1, p_shared_weak_owners));
    goto LABEL_35;
  }
LABEL_41:
  std::__shared_weak_count::__release_weak(v22);
  std::__shared_weak_count::__release_weak(v22);
}

void sub_1BEFEF6EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

uint64_t XcapSession::operationFailure(XcapSession *this, const ImsResult *a2)
{
  (*(void (**)(void))(*((_QWORD *)this + 54) + 16))();
  SipTimerContainer::cancelAllTimers(*((SipTimerContainer **)this + 57));
  return (*(uint64_t (**)(_QWORD, XcapSession *))(**((_QWORD **)this + 53) + 56))(*((_QWORD *)this + 53), this);
}

void sub_1BEFEF814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XcapSession::deleteDocument()
{
  uint64_t v0;
  void *__p[2];
  char v2;
  void *v3[2];
  char v4;

  std::string::basic_string[abi:ne180100]<0>(v3, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v0 = ImsLogger::warn(ims::_logger, (uint64_t)v3, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v0 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v0 + 8), (uint64_t)"Not implemented", 15);
  *(_BYTE *)(v0 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v0 + 64))(v0, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v0 + 17) = 0;
  if (v2 < 0)
    operator delete(__p[0]);
  if (v4 < 0)
    operator delete(v3[0]);
}

void sub_1BEFEF908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void XcapSession::setDigestCredentials(XcapSession *this, const SipAuthResponse *lpsrc)
{
  uint64_t v4;
  uint64_t v5;
  void *__p[2];
  int v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15[2];
  char v16;

  {
    v4 = *((_QWORD *)this + 56);
LABEL_5:
    (*(void (**)(uint64_t, const SipAuthResponse *))(*(_QWORD *)v4 + 104))(v4, lpsrc);
    return;
  }
  {
    v4 = *((_QWORD *)this + 55);
    goto LABEL_5;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Non Digest/AKA authentication response is currently unsupported. Terminating session", 84);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v16 < 0)
    operator delete(v15[0]);
  if (v8 < 0)
    operator delete(__p[0]);
  v13 = 0;
  v14 = 0;
  __p[0] = &off_1E78B7238;
  __p[1] = &_bambiDomain;
  v7 = 0x40000000;
  v11 = 0;
  v12 = 0;
  v9 = 0;
  v10 = 0;
  XcapSession::operationFailure(this, (const ImsResult *)__p);
  ImsResult::~ImsResult((ImsResult *)__p);
}

void sub_1BEFEFAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void XcapSession::setGbaNafCredentials(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  int v11;
  char v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19[2];
  uint64_t v20;

  if (*a2 == a2[1])
  {
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v3 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Failed to fetch Ks_Ext_Naf", 26);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    if (v12 < 0)
      operator delete(__p[0]);
    v9 = *(_QWORD *)(a1 + 432);
    v17 = 0;
    v18 = 0;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v11 = 0x40000000;
    v15 = 0;
    v16 = 0;
    v13 = 0;
    v14 = 0;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 16))(v9, __p, v19, v4, v5, v6, v7, v8);
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
    ImsResult::~ImsResult((ImsResult *)__p);
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 424) + 56))(*(_QWORD *)(a1 + 424), a1);
  }
  else
  {
    XcapNafServerInfo::setGbaNafCredentials(*(_QWORD *)(a1 + 440), a2);
  }
}

void sub_1BEFEFC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (*(char *)(v14 - 17) < 0)
    operator delete(*(void **)(v14 - 40));
  ImsResult::~ImsResult((ImsResult *)&__p);
  _Unwind_Resume(a1);
}

void XcapSession::handleTimer(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  NSObject *v11;
  unint64_t v12;
  _QWORD v13[6];
  std::__shared_weak_count *v14;
  std::string __p;
  std::string v16;

  memset(&v16, 0, sizeof(v16));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v16, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v16 = *(std::string *)a2;
  v3 = (std::__shared_weak_count *)a1[3];
  if (!v3 || (v4 = a1[2], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
  do
    v8 = __ldxr(p_shared_weak_owners);
  while (__stxr(v8 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
  }
  v11 = a1[58];
  v13[0] = MEMORY[0x1E0C809B0];
  v13[1] = 1174405120;
  v13[2] = ___ZN11XcapSession11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_23;
  v13[4] = a1;
  v13[5] = v4;
  v14 = v6;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v16.__r_.__value_.__l.__data_, v16.__r_.__value_.__l.__size_);
  else
    __p = v16;
  dispatch_async(v11, v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  std::__shared_weak_count::__release_weak(v6);
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v16.__r_.__value_.__l.__data_);
}

void sub_1BEFEFE44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__shared_weak_count *v24;

  if (a15)
    std::__shared_weak_count::__release_weak(a15);
  std::__shared_weak_count::__release_weak(v24);
  if (a24 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void ___ZN11XcapSession11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  XcapSession *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  unsigned __int8 *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  void *v14[2];
  int v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *__p[2];
  char v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = *(XcapSession **)(a1 + 32);
  v25 = 0;
  v26 = 0;
  v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3)
  {
    v4 = 0;
LABEL_20:
    std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::warn(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Timer [", 7);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 32))(v10, &XcapSession::kRequestTimeoutTimerId);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"] fired but XcapSession object already deleted: no-op.", 54);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_21;
  }
  v4 = std::__shared_weak_count::lock(v3);
  v26 = v4;
  if (!v4)
    goto LABEL_20;
  v25 = *(_QWORD *)(a1 + 40);
  if (!v25)
    goto LABEL_20;
  v5 = *(unsigned __int8 *)(a1 + 79);
  if ((v5 & 0x80u) == 0)
    v6 = *(unsigned __int8 *)(a1 + 79);
  else
    v6 = *(_QWORD *)(a1 + 64);
  v7 = qword_1ED70E6D8;
  if (byte_1ED70E6E7 >= 0)
    v7 = byte_1ED70E6E7;
  if (v6 == v7)
  {
    if (byte_1ED70E6E7 >= 0)
      v8 = &XcapSession::kRequestTimeoutTimerId;
    else
      v8 = (uint64_t *)XcapSession::kRequestTimeoutTimerId;
    if ((v5 & 0x80) == 0)
    {
      if (*(_BYTE *)(a1 + 79))
      {
        v9 = (unsigned __int8 *)(a1 + 56);
        while (*v9 == *(unsigned __int8 *)v8)
        {
          ++v9;
          v8 = (uint64_t *)((char *)v8 + 1);
          if (!--v5)
            goto LABEL_33;
        }
        goto LABEL_32;
      }
LABEL_33:
      std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::warn(ims::_logger, (uint64_t)v14, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Timer fired as XCAP transaction didn't complete in ", 51);
      *(_BYTE *)(v13 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" seconds", 8);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (v24 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v14[0]);
      v21 = 0;
      v22 = 0;
      v14[0] = &off_1E78B7238;
      v14[1] = &_bambiDomain;
      v15 = 0x40000000;
      v19 = 0;
      v20 = 0;
      v17 = 0;
      v18 = 0;
      XcapSession::operationFailure(v2, (const ImsResult *)v14);
      ImsResult::~ImsResult((ImsResult *)v14);
LABEL_26:
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
    if (!memcmp(*(const void **)(a1 + 56), v8, *(_QWORD *)(a1 + 64)))
      goto LABEL_33;
  }
LABEL_32:
  std::string::basic_string[abi:ne180100]<0>(v14, (char *)kXcapLoggingFacility);
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::warn(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Timer fired but invalid timer Id. Expected [", 44);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v10 + 32))(v10, &XcapSession::kRequestTimeoutTimerId);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"], Actual [", 11);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, a1 + 56);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_21:
  *(_BYTE *)(v10 + 17) = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v14[0]);
  if (v4)
    goto LABEL_26;
}

void sub_1BEFF0298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  ImsResult::~ImsResult((ImsResult *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26 - 48);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11XcapSessionEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  v3 = *(_QWORD *)(a2 + 48);
  a1[5] = *(_QWORD *)(a2 + 40);
  a1[6] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 7);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 56);
    a1[9] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
}

void sub_1BEFF0370(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c36_ZTSNSt3__18weak_ptrI11XcapSessionEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void XcapSession::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "XcapSession");
}

void `non-virtual thunk to'XcapSession::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "XcapSession");
}

uint64_t XcapSession::fetchNafHost(XcapSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 80))(*((_QWORD *)this + 55));
}

uint64_t XcapSession::fetchBsfHost(XcapSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 80))(*((_QWORD *)this + 56));
}

uint64_t XcapSession::fetchNafPort(XcapSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 55) + 88))(*((_QWORD *)this + 55));
}

uint64_t XcapSession::fetchBsfPort(XcapSession *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 88))(*((_QWORD *)this + 56));
}

uint64_t XcapSession::operationSuccess(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD v5[2];
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v2 = *(_QWORD *)(a1 + 432);
  v11 = 0;
  v12 = 0;
  v5[0] = &off_1E78B7238;
  v5[1] = &_bambiDomain;
  v6 = 0;
  v9 = 0;
  v10 = 0;
  v7 = 0;
  v8 = 0;
  (*(void (**)(void))(v2 + 16))();
  ImsResult::~ImsResult((ImsResult *)v5);
  SipTimerContainer::cancelAllTimers(*(SipTimerContainer **)(a1 + 456));
  if (*(_BYTE *)(a1 + 328))
  {
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 440) + 96))(*(_QWORD *)(a1 + 440)))
    {
      v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 440) + 112))(*(_QWORD *)(a1 + 440));
      if (v3)
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 424) + 40))(*(_QWORD *)(a1 + 424), v3);
    }
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 424) + 56))(*(_QWORD *)(a1 + 424), a1);
}

void sub_1BEFF04EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void XcapSession::handleNafChallenge(XcapSession *this)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  char v5;
  char v6;
  uint64_t v7;
  char v8;
  char v9;
  uint64_t v10;
  void *__p[2];
  int v12;
  char v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *v20[2];
  char v21;
  __int128 v22;
  _OWORD v23[3];

  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v2 = *((_QWORD *)this + 56);
  v3 = *((unsigned __int8 *)this + 204);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v2 + 80))(__p, v2);
  v4 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 56) + 88))(*((_QWORD *)this + 56));
  v5 = (*(uint64_t (**)(uint64_t, BOOL, void **, uint64_t))(*(_QWORD *)v2 + 72))(v2, v3 != 0, __p, v4);
  v6 = v5;
  if ((v13 & 0x80000000) == 0)
  {
    if ((v5 & 1) != 0)
      goto LABEL_3;
LABEL_7:
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(v20, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v10 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v10 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Failed to initialize BSF Transport", 34);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (v21 < 0)
      operator delete(v20[0]);
    if (v13 < 0)
      operator delete(__p[0]);
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if ((v6 & 1) == 0)
    goto LABEL_7;
LABEL_3:
  v7 = *((_QWORD *)this + 56);
  XcapUrlHelper::createUrl((uint64_t *)v23, (uint64_t *)&v23[1] + 1, __p);
  v8 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v7 + 120))(v7, __p);
  v9 = v8;
  if ((v13 & 0x80000000) == 0)
  {
    if ((v8 & 1) != 0)
      goto LABEL_14;
    goto LABEL_13;
  }
  operator delete(__p[0]);
  if ((v9 & 1) == 0)
  {
LABEL_13:
    v18 = 0;
    v19 = 0;
    __p[0] = &off_1E78B7238;
    __p[1] = &_bambiDomain;
    v12 = 0x40000000;
    v16 = 0;
    v17 = 0;
    v14 = 0;
    v15 = 0;
    XcapSession::operationFailure(this, (const ImsResult *)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
  }
LABEL_14:
  XcapUri::~XcapUri((XcapUri *)&v22);
}

void sub_1BEFF0720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  ImsResult::~ImsResult((ImsResult *)&__p);
  XcapUri::~XcapUri((XcapUri *)&a27);
  _Unwind_Resume(a1);
}

void XcapSession::onBootstrappingProcedureSuccess(XcapBsfServerInfo **this)
{
  _OWORD *Ck;
  _OWORD *Ik;
  uint64_t v4;
  char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  size_t v10;
  XcapBsfServerInfo *v11;
  void *v12;
  uint64_t v13;
  int v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  uint64_t j;
  unsigned int v28;
  uint64_t v29;
  char *v30;
  uint64_t k;
  unsigned int v32;
  char *v33;
  uint64_t m;
  uint64_t v35;
  void *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  void *v48[2];
  char v49;
  void *v50[2];
  char v51;
  unsigned __int16 v52;
  void *v53[2];
  char v54;
  unsigned __int16 v55;
  void *__p;
  _BYTE *v57;
  uint64_t v58;
  unsigned __int16 v59;
  _BYTE *v60;
  _BYTE *v61;
  uint64_t v62;
  _BYTE *v63;
  _BYTE *v64;
  uint64_t v65;
  unsigned __int16 v66;
  std::string v67;
  std::string v68;
  void *v69;
  size_t v70;
  uint64_t v71;

  if (*((_DWORD *)this + 66))
  {
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v36 = 0;
    v37 = 0;
    v38 = 0;
    std::vector<unsigned char>::__append((unint64_t *)&v36, 0x20uLL);
    Ck = XcapBsfServerInfo::fetchCk(this[56]);
    Ik = XcapBsfServerInfo::fetchIk(this[56]);
    if (!Ck || !Ik)
    {
      std::string::basic_string[abi:ne180100]<0>(&v69, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(&v68, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v13 = ImsLogger::error(ims::_logger, (uint64_t)&v69, (uint64_t)&v68);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v13 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"GBA_ME failure. Invalid Ck/Ik", 29);
      *(_BYTE *)(v13 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v13 + 17) = 0;
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v68.__r_.__value_.__l.__data_);
      if (SHIBYTE(v71) < 0)
        operator delete(v69);
      v14 = 0;
LABEL_53:
      if (v36)
      {
        v37 = (uint64_t *)v36;
        operator delete(v36);
      }
      if (v14)
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(&v69, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v16 = ImsLogger::debug(ims::_logger, (uint64_t)&v36, (uint64_t)&v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v16 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"GBA_ME: Ks_Naf = ", 17);
        *(_BYTE *)(v16 + 17) = 0;
        logBytes((uint64_t *)&v45, &v68);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &v68);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v68.__r_.__value_.__l.__data_);
        if (SHIBYTE(v71) < 0)
          operator delete(v69);
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        (*((void (**)(XcapBsfServerInfo **, void **))*this + 10))(this, &v45);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v36, (char *)kXcapLoggingFacility);
        std::string::basic_string[abi:ne180100]<0>(&v69, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v17 = ImsLogger::error(ims::_logger, (uint64_t)&v36, (uint64_t)&v69);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)": ", 2);
        *(_BYTE *)(v17 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"GBA_ME failure. Failed to compute KsNaf", 39);
        *(_BYTE *)(v17 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v17 + 17) = 0;
        if (SHIBYTE(v71) < 0)
          operator delete(v69);
        if (SHIBYTE(v38) < 0)
          operator delete(v36);
        v43 = 0;
        v44 = 0;
        v36 = &off_1E78B7238;
        v37 = &_bambiDomain;
        LODWORD(v38) = 0x40000000;
        v41 = 0;
        v42 = 0;
        v39 = 0;
        v40 = 0;
        XcapSession::operationFailure((XcapSession *)this, (const ImsResult *)&v36);
        ImsResult::~ImsResult((ImsResult *)&v36);
      }
      v12 = v45;
      if (v45)
      {
        v46 = v45;
        goto LABEL_70;
      }
      return;
    }
    *(_OWORD *)v36 = *Ck;
    *((_OWORD *)v36 + 1) = *Ik;
    std::string::basic_string[abi:ne180100]<0>(&v69, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v68, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v69, (uint64_t)&v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"GBA_ME: Key = ", 14);
    *(_BYTE *)(v4 + 17) = 0;
    logBytes((uint64_t *)&v36, &v67);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v67);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    if (SHIBYTE(v71) < 0)
      operator delete(v69);
    v69 = 0;
    v70 = 0;
    v71 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v69, "gba-me");
    if (v71 >= 0)
      v5 = (char *)&v69;
    else
      v5 = (char *)v69;
    if (v71 >= 0)
      v6 = HIBYTE(v71);
    else
      v6 = v70;
    memset(&v68, 0, sizeof(v68));
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v68, v5, &v5[v6], v6);
    v66 = LOWORD(v68.__r_.__value_.__r.__words[1]) - LOWORD(v68.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v67, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v63, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v67, (uint64_t)&v63);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"GBA_ME: P0 = ", 13);
    *(_BYTE *)(v7 + 17) = 0;
    logBytes((uint64_t *)&v68, &v60);
    (*(void (**)(uint64_t, _BYTE **))(*(_QWORD *)v7 + 32))(v7, &v60);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (SHIBYTE(v62) < 0)
      operator delete(v60);
    if (SHIBYTE(v65) < 0)
      operator delete(v63);
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v67.__r_.__value_.__l.__data_);
    memset(&v67, 0, sizeof(v67));
    XcapBsfServerInfo::fetchRand(this[56], &v67);
    v59 = LOWORD(v67.__r_.__value_.__r.__words[1]) - LOWORD(v67.__r_.__value_.__l.__data_);
    std::string::basic_string[abi:ne180100]<0>(&v63, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&v60, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v63, (uint64_t)&v60);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"GBA_ME: P1 = ", 13);
    *(_BYTE *)(v8 + 17) = 0;
    logBytes((uint64_t *)&v67, &__p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    if (SHIBYTE(v62) < 0)
      operator delete(v60);
    if (SHIBYTE(v65) < 0)
      operator delete(v63);
    if (*((char *)this + 95) < 0)
    {
      v9 = (char *)this[9];
      v10 = (size_t)this[10];
    }
    else
    {
      v9 = (char *)(this + 9);
      v10 = *((unsigned __int8 *)this + 95);
    }
    v63 = 0;
    v64 = 0;
    v65 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<char *>,std::__wrap_iter<char *>>((char *)&v63, v9, &v9[v10], v10);
    v15 = v63;
    if ((unint64_t)(v64 - v63) >> 16)
    {
      v14 = 0;
      if (!v63)
      {
LABEL_47:
        if (v67.__r_.__value_.__r.__words[0])
        {
          v67.__r_.__value_.__l.__size_ = v67.__r_.__value_.__r.__words[0];
          operator delete(v67.__r_.__value_.__l.__data_);
        }
        if (v68.__r_.__value_.__r.__words[0])
        {
          v68.__r_.__value_.__l.__size_ = v68.__r_.__value_.__r.__words[0];
          operator delete(v68.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v71) < 0)
          operator delete(v69);
        goto LABEL_53;
      }
LABEL_46:
      v64 = v15;
      operator delete(v15);
      goto LABEL_47;
    }
    v55 = (_WORD)v64 - (_WORD)v63;
    std::string::basic_string[abi:ne180100]<0>(&v60, (char *)kXcapLoggingFacility);
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)&v60, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"GBA_ME: P2 = ", 13);
    *(_BYTE *)(v18 + 17) = 0;
    logBytes((uint64_t *)&v63, v53);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 32))(v18, v53);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v54 < 0)
      operator delete(v53[0]);
    if (SHIBYTE(v58) < 0)
      operator delete(__p);
    if (SHIBYTE(v62) < 0)
      operator delete(v60);
    v60 = 0;
    v61 = 0;
    v62 = 0;
    XcapNafServerInfo::nafId(this[55], (uint64_t)&v60);
    v19 = v60;
    if ((unint64_t)(v61 - v60) >> 16)
    {
      v14 = 0;
      if (!v60)
        goto LABEL_81;
    }
    else
    {
      v52 = (_WORD)v61 - (_WORD)v60;
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v53, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v20 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v53);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v20 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"GBA_ME: P3 = ", 13);
      *(_BYTE *)(v20 + 17) = 0;
      logBytes((uint64_t *)&v60, v50);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v20 + 32))(v20, v50);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      if (v51 < 0)
        operator delete(v50[0]);
      if (v54 < 0)
        operator delete(v53[0]);
      if (SHIBYTE(v58) < 0)
        operator delete(__p);
      __p = 0;
      v57 = 0;
      v58 = 0;
      std::vector<unsigned char>::__append((unint64_t *)&__p, v66 + (unint64_t)v59 + v55 + (unint64_t)v52 + 9);
      *(_BYTE *)__p = 1;
      if (v68.__r_.__value_.__l.__size_ != v68.__r_.__value_.__r.__words[0])
        memmove((char *)__p + 1, v68.__r_.__value_.__l.__data_, v68.__r_.__value_.__l.__size_ - v68.__r_.__value_.__r.__words[0]);
      v21 = v66;
      v22 = (char *)__p + v66 + 1;
      for (i = 1; i != -1; --i)
        *v22++ = *((_BYTE *)&v66 + i);
      v24 = v21 + 3;
      if (v67.__r_.__value_.__l.__size_ != v67.__r_.__value_.__r.__words[0])
        memmove((char *)__p + v24, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_ - v67.__r_.__value_.__r.__words[0]);
      v25 = v24 + v59;
      v26 = (char *)__p + v25;
      for (j = 1; j != -1; --j)
        *v26++ = *((_BYTE *)&v59 + j);
      v28 = v25 + 2;
      if (v64 != v63)
        memmove((char *)__p + v28, v63, v64 - v63);
      v29 = v28 + v55;
      v30 = (char *)__p + v29;
      for (k = 1; k != -1; --k)
        *v30++ = *((_BYTE *)&v55 + k);
      v32 = v29 + 2;
      if (v61 != v60)
        memmove((char *)__p + v32, v60, v61 - v60);
      v33 = (char *)__p + v32 + v52;
      for (m = 1; m != -1; --m)
        *v33++ = *((_BYTE *)&v52 + m);
      std::string::basic_string[abi:ne180100]<0>(v53, (char *)kXcapLoggingFacility);
      std::string::basic_string[abi:ne180100]<0>(v50, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v35 = ImsLogger::debug(ims::_logger, (uint64_t)v53, (uint64_t)v50);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)": ", 2);
      *(_BYTE *)(v35 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"GBA_ME: S = ", 12);
      *(_BYTE *)(v35 + 17) = 0;
      logBytes((uint64_t *)&__p, v48);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v35 + 32))(v35, v48);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v35 + 17) = 0;
      if (v49 < 0)
        operator delete(v48[0]);
      if (v51 < 0)
        operator delete(v50[0]);
      if (v54 < 0)
        operator delete(v53[0]);
      v14 = SipSHA256DigestAlgorithm::computeHmac((int)v53, v36, (char *)v37 - (_BYTE *)v36, __p, v57 - (_BYTE *)__p, (unint64_t *)&v45);
      if (__p)
      {
        v57 = __p;
        operator delete(__p);
      }
      v19 = v60;
      if (!v60)
      {
LABEL_81:
        v15 = v63;
        if (!v63)
          goto LABEL_47;
        goto LABEL_46;
      }
    }
    v61 = v19;
    operator delete(v19);
    goto LABEL_81;
  }
  v11 = this[53];
  XcapNafServerInfo::nafId(this[55], (uint64_t)&v36);
  XcapBsfServerInfo::fetchRand(this[56], &v69);
  XcapBsfServerInfo::fetchBTid(this[56], &v68);
  XcapBsfServerInfo::fetchKeyLifetime(this[56], &v67);
  (*(void (**)(XcapBsfServerInfo *, void **, void **, std::string *, std::string *))(*(_QWORD *)v11 + 32))(v11, &v36, &v69, &v68, &v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v67.__r_.__value_.__l.__data_);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v68.__r_.__value_.__l.__data_);
  if (v69)
  {
    v70 = (size_t)v69;
    operator delete(v69);
  }
  v12 = v36;
  if (v36)
  {
    v37 = (uint64_t *)v36;
LABEL_70:
    operator delete(v12);
  }
}

void sub_1BEFF1390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  uint64_t v50;
  void *v52;
  void *v53;
  void *v54;
  void *v55;

  if (__p)
    operator delete(__p);
  v52 = *(void **)(v50 - 176);
  if (v52)
  {
    *(_QWORD *)(v50 - 168) = v52;
    operator delete(v52);
  }
  v53 = *(void **)(v50 - 152);
  if (v53)
  {
    *(_QWORD *)(v50 - 144) = v53;
    operator delete(v53);
  }
  v54 = *(void **)(v50 - 120);
  if (v54)
  {
    *(_QWORD *)(v50 - 112) = v54;
    operator delete(v54);
  }
  v55 = *(void **)(v50 - 96);
  if (v55)
  {
    *(_QWORD *)(v50 - 88) = v55;
    operator delete(v55);
  }
  if (*(char *)(v50 - 49) < 0)
    operator delete(*(void **)(v50 - 72));
  if (a10)
    operator delete(a10);
  if (a22)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void XcapConfig::XcapConfig(XcapConfig *this, const XcapConfig *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  int v8;
  __int128 v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  std::string *v16;
  __int128 v17;
  int v18;

  *(_DWORD *)this = *(_DWORD *)a2;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 8), *((__int128 **)a2 + 1), *((__int128 **)a2 + 2), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 2) - *((_QWORD *)a2 + 1)) >> 3));
  if (*((char *)a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 32), *((const std::string::value_type **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v4 = *((_OWORD *)a2 + 2);
    *((_QWORD *)this + 6) = *((_QWORD *)a2 + 6);
    *((_OWORD *)this + 2) = v4;
  }
  if (*((char *)a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 56), *((const std::string::value_type **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v5 = *(_OWORD *)((char *)a2 + 56);
    *((_QWORD *)this + 9) = *((_QWORD *)a2 + 9);
    *(_OWORD *)((char *)this + 56) = v5;
  }
  if (*((char *)a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 80), *((const std::string::value_type **)a2 + 10), *((_QWORD *)a2 + 11));
  }
  else
  {
    v6 = *((_OWORD *)a2 + 5);
    *((_QWORD *)this + 12) = *((_QWORD *)a2 + 12);
    *((_OWORD *)this + 5) = v6;
  }
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 104), *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v7 = *(_OWORD *)((char *)a2 + 104);
    *((_QWORD *)this + 15) = *((_QWORD *)a2 + 15);
    *(_OWORD *)((char *)this + 104) = v7;
  }
  v8 = *((_DWORD *)a2 + 32);
  *((_BYTE *)this + 132) = *((_BYTE *)a2 + 132);
  *((_DWORD *)this + 32) = v8;
  if (*((char *)a2 + 159) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 136), *((const std::string::value_type **)a2 + 17), *((_QWORD *)a2 + 18));
  }
  else
  {
    v9 = *(_OWORD *)((char *)a2 + 136);
    *((_QWORD *)this + 19) = *((_QWORD *)a2 + 19);
    *(_OWORD *)((char *)this + 136) = v9;
  }
  v10 = *((_DWORD *)a2 + 40);
  *((_BYTE *)this + 164) = *((_BYTE *)a2 + 164);
  *((_DWORD *)this + 40) = v10;
  if (*((char *)a2 + 191) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)this + 7, *((const std::string::value_type **)a2 + 21), *((_QWORD *)a2 + 22));
  }
  else
  {
    v11 = *(_OWORD *)((char *)a2 + 168);
    *((_QWORD *)this + 23) = *((_QWORD *)a2 + 23);
    *(_OWORD *)((char *)this + 168) = v11;
  }
  *((_BYTE *)this + 192) = *((_BYTE *)a2 + 192);
  if (*((char *)a2 + 223) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 200), *((const std::string::value_type **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v12 = *(_OWORD *)((char *)a2 + 200);
    *((_QWORD *)this + 27) = *((_QWORD *)a2 + 27);
    *(_OWORD *)((char *)this + 200) = v12;
  }
  *((_DWORD *)this + 56) = *((_DWORD *)a2 + 56);
  if (*((char *)a2 + 255) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 232), *((const std::string::value_type **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v13 = *(_OWORD *)((char *)a2 + 232);
    *((_QWORD *)this + 31) = *((_QWORD *)a2 + 31);
    *(_OWORD *)((char *)this + 232) = v13;
  }
  if (*((char *)a2 + 279) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 256), *((const std::string::value_type **)a2 + 32), *((_QWORD *)a2 + 33));
  }
  else
  {
    v14 = *((_OWORD *)a2 + 16);
    *((_QWORD *)this + 34) = *((_QWORD *)a2 + 34);
    *((_OWORD *)this + 16) = v14;
  }
  v15 = *((_QWORD *)a2 + 35);
  *((_BYTE *)this + 288) = *((_BYTE *)a2 + 288);
  *((_QWORD *)this + 35) = v15;
  *((_QWORD *)this + 38) = 0;
  *((_QWORD *)this + 39) = 0;
  *((_QWORD *)this + 37) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)((char *)this + 296), *((__int128 **)a2 + 37), *((__int128 **)a2 + 38), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 38) - *((_QWORD *)a2 + 37)) >> 3));
  *((_BYTE *)this + 320) = *((_BYTE *)a2 + 320);
  v16 = (std::string *)((char *)this + 328);
  if (*((char *)a2 + 351) < 0)
  {
    std::string::__init_copy_ctor_external(v16, *((const std::string::value_type **)a2 + 41), *((_QWORD *)a2 + 42));
  }
  else
  {
    v17 = *(_OWORD *)((char *)a2 + 328);
    *((_QWORD *)this + 43) = *((_QWORD *)a2 + 43);
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = v17;
  }
  v18 = *((_DWORD *)a2 + 88);
  *((_WORD *)this + 178) = *((_WORD *)a2 + 178);
  *((_DWORD *)this + 88) = v18;
}

void sub_1BEFF19D8(_Unwind_Exception *a1, void **a2, void **a3, void **a4, ...)
{
  char *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  if (v4[279] < 0)
    operator delete(*v6);
  if (v4[255] < 0)
    operator delete(*v5);
  if (v4[223] < 0)
    operator delete(*v10);
  if (v4[191] < 0)
    operator delete(*v9);
  if (v4[159] < 0)
    operator delete(*v8);
  if (v4[127] < 0)
    operator delete(*v7);
  if (v4[103] < 0)
    operator delete(*a2);
  if (v4[79] < 0)
    operator delete(*a3);
  if (v4[55] < 0)
    operator delete(*a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78D0BE8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78D0BE8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78D0BE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78D0BE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEFF1CCC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0,std::allocator<XcapSession::_sendRequest(BOOL,XcapUri const&,std::string const&,void({block_pointer})(ImsResult const&,std::string const&))::$_0>,void ()(std::string&)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_XcapSession_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&XcapSession::kRequestTimeoutTimerId, "XcapTimerId_RequestTimeout");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &XcapSession::kRequestTimeoutTimerId, &dword_1BEDF4000);
}

void IBIMediaSessionConfig_s::~IBIMediaSessionConfig_s(IBIMediaSessionConfig_s *this)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (void *)*((_QWORD *)this + 57);
  if (v2)
  {
    *((_QWORD *)this + 58) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 53);
  if (v3)
  {
    *((_QWORD *)this + 54) = v3;
    operator delete(v3);
  }
  v4 = (void *)*((_QWORD *)this + 49);
  if (v4)
  {
    *((_QWORD *)this + 50) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 6);
  if (v5)
  {
    *((_QWORD *)this + 7) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 3) = v6;
    operator delete(v6);
  }
}

uint64_t IBISession::IBISession(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, ImsPrefs *a5, _QWORD *a6, char a7, __int128 *a8, dispatch_object_t *a9)
{
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  void *v26;
  void *v27;
  _QWORD *v28;
  void *v29;
  _QWORD *v30;
  void *v31;
  void *v32;
  ImsPrefs *v33;
  void **RestrictSessionEVSBandwidthKey;
  void *v35;
  char v36;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  _BYTE v44[15];
  __int128 v45;
  uint64_t v46;
  char v47;
  void *v48[2];
  uint64_t v49;
  _BYTE v50[313];
  __int128 v51;
  uint64_t v52;
  char v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 112) = &off_1E78B7B60;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C63A8;
  v13 = (std::__shared_weak_count *)a2[1];
  v42 = *a2;
  v43 = v13;
  if (v13)
  {
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
  }
  v16 = a4[1];
  v40 = *a4;
  v41 = (std::__shared_weak_count *)v16;
  if (v16)
  {
    v17 = (unint64_t *)(v16 + 8);
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  MediaSessionDriver::MediaSessionDriver(a1 + 24, (uint64_t *)&off_1E78D0EC0, &v42, a3, &v40, a5, a8, a9);
  v19 = v41;
  if (v41)
  {
    p_shared_owners = (unint64_t *)&v41->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v43)
    std::__shared_weak_count::__release_weak(v43);
  *(_QWORD *)a1 = &off_1E78D0C70;
  *(_QWORD *)(a1 + 24) = &unk_1E78D0D58;
  *(_QWORD *)(a1 + 112) = &unk_1E78D0E80;
  *(_BYTE *)(a1 + 480) = a7;
  *(_QWORD *)(a1 + 488) = a1 + 488;
  *(_QWORD *)(a1 + 496) = a1 + 488;
  *(_QWORD *)(a1 + 504) = 0;
  IBIMediaSessionConfig_s::IBIMediaSessionConfig_s((IBIMediaSessionConfig_s *)(a1 + 528));
  *(_OWORD *)(a1 + 1024) = 0u;
  *(_QWORD *)(a1 + 1040) = *a6;
  v22 = a6[1];
  *(_QWORD *)(a1 + 1048) = v22;
  if (v22)
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  std::string::basic_string[abi:ne180100]<0>(v44, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v25 = ImsLogger::debug(ims::_logger, (uint64_t)v44, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"IBISession", 10);
  *(_BYTE *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v25 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v25 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (v39 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v45) < 0)
    operator delete(*(void **)v44);
  IBIMediaSessionConfig_s::IBIMediaSessionConfig_s((IBIMediaSessionConfig_s *)v44);
  *(_QWORD *)(a1 + 528) = *(_QWORD *)v44;
  *(_QWORD *)(a1 + 535) = *(_QWORD *)&v44[7];
  v26 = *(void **)(a1 + 544);
  if (v26)
  {
    *(_QWORD *)(a1 + 552) = v26;
    operator delete(v26);
    *(_QWORD *)(a1 + 544) = 0;
    *(_QWORD *)(a1 + 552) = 0;
    *(_QWORD *)(a1 + 560) = 0;
  }
  *(_OWORD *)(a1 + 544) = v45;
  *(_QWORD *)(a1 + 560) = v46;
  v46 = 0;
  v45 = 0uLL;
  *(_BYTE *)(a1 + 568) = v47;
  v27 = *(void **)(a1 + 576);
  if (v27)
  {
    *(_QWORD *)(a1 + 584) = v27;
    operator delete(v27);
    *(_QWORD *)(a1 + 576) = 0;
    *(_QWORD *)(a1 + 584) = 0;
    *(_QWORD *)(a1 + 592) = 0;
  }
  v28 = (_QWORD *)(a1 + 920);
  *(_OWORD *)(a1 + 576) = *(_OWORD *)v48;
  *(_QWORD *)(a1 + 592) = v49;
  v48[1] = 0;
  v49 = 0;
  v48[0] = 0;
  memcpy((void *)(a1 + 600), v50, 0x139uLL);
  v29 = *(void **)(a1 + 920);
  if (v29)
  {
    *(_QWORD *)(a1 + 928) = v29;
    operator delete(v29);
    *v28 = 0;
    *(_QWORD *)(a1 + 928) = 0;
    *(_QWORD *)(a1 + 936) = 0;
  }
  *(_OWORD *)v28 = v51;
  v30 = (_QWORD *)(a1 + 952);
  *(_QWORD *)(a1 + 936) = v52;
  v52 = 0;
  v51 = 0uLL;
  *(_BYTE *)(a1 + 944) = v53;
  v31 = *(void **)(a1 + 952);
  if (v31)
  {
    *(_QWORD *)(a1 + 960) = v31;
    operator delete(v31);
    *v30 = 0;
    *(_QWORD *)(a1 + 960) = 0;
    *(_QWORD *)(a1 + 968) = 0;
  }
  *(_OWORD *)v30 = v54;
  *(_QWORD *)(a1 + 968) = v55;
  v55 = 0;
  v54 = 0uLL;
  *(_BYTE *)(a1 + 976) = v56;
  v32 = *(void **)(a1 + 984);
  if (v32)
  {
    *(_QWORD *)(a1 + 992) = v32;
    operator delete(v32);
    *(_QWORD *)(a1 + 984) = 0;
    *(_QWORD *)(a1 + 992) = 0;
    *(_QWORD *)(a1 + 1000) = 0;
    v32 = (void *)v54;
  }
  *(_QWORD *)(a1 + 984) = v57;
  *(_OWORD *)(a1 + 992) = v58;
  v58 = 0uLL;
  v57 = 0;
  *(_QWORD *)(a1 + 1008) = v59;
  *(_BYTE *)(a1 + 1016) = v60;
  if (v32)
  {
    *((_QWORD *)&v54 + 1) = v32;
    operator delete(v32);
  }
  if ((_QWORD)v51)
  {
    *((_QWORD *)&v51 + 1) = v51;
    operator delete((void *)v51);
  }
  if (v48[0])
  {
    v48[1] = v48[0];
    operator delete(v48[0]);
  }
  v33 = (ImsPrefs *)v45;
  if ((_QWORD)v45)
  {
    *((_QWORD *)&v45 + 1) = v45;
    operator delete((void *)v45);
  }
  *(_BYTE *)(a1 + 481) = 0;
  *(_QWORD *)(a1 + 512) = 0;
  RestrictSessionEVSBandwidthKey = (void **)ImsPrefs::getRestrictSessionEVSBandwidthKey(v33);
  v35 = ImsPrefs::prefWithKey(a5, RestrictSessionEVSBandwidthKey);
  if (v35)
    v36 = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 40))(v35);
  else
    v36 = *((_BYTE *)RestrictSessionEVSBandwidthKey + 57) != 0;
  *(_BYTE *)(a1 + 520) = v36;
  return a1;
}

void sub_1BEFF2294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;
  MediaSessionDriver *v25;
  _QWORD *v26;
  IBIMediaSessionConfig_s *v27;
  std::__shared_weak_count *v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 + 1040);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 + 1024);
  IBIMediaSessionConfig_s::~IBIMediaSessionConfig_s(v27);
  std::__list_imp<unsigned long long>::clear(v26);
  MediaSessionDriver::~MediaSessionDriver(v25, (uint64_t *)&off_1E78D0EC0);
  v29 = *(std::__shared_weak_count **)(v24 + 16);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

void IBISession::~IBISession(IBISession *this)
{
  MediaSessionDriver *v2;
  uint64_t v3;
  void *v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  std::__shared_weak_count *v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  *(_QWORD *)this = &off_1E78D0C70;
  *((_QWORD *)this + 3) = &unk_1E78D0D58;
  v2 = (IBISession *)((char *)this + 24);
  *((_QWORD *)this + 14) = &unk_1E78D0E80;
  std::string::basic_string[abi:ne180100]<0>(v12, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"~IBISession", 11);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 61);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1040);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 1024);
  v4 = (void *)*((_QWORD *)this + 123);
  if (v4)
  {
    *((_QWORD *)this + 124) = v4;
    operator delete(v4);
  }
  v5 = (void *)*((_QWORD *)this + 119);
  if (v5)
  {
    *((_QWORD *)this + 120) = v5;
    operator delete(v5);
  }
  v6 = (void *)*((_QWORD *)this + 115);
  if (v6)
  {
    *((_QWORD *)this + 116) = v6;
    operator delete(v6);
  }
  v7 = (void *)*((_QWORD *)this + 72);
  if (v7)
  {
    *((_QWORD *)this + 73) = v7;
    operator delete(v7);
  }
  v8 = (void *)*((_QWORD *)this + 68);
  if (v8)
  {
    *((_QWORD *)this + 69) = v8;
    operator delete(v8);
  }
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 61);
  MediaSessionDriver::~MediaSessionDriver(v2, (uint64_t *)&off_1E78D0EC0);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
}

{
  IBISession::~IBISession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'IBISession::~IBISession(IBISession *this)
{
  IBISession::~IBISession((IBISession *)((char *)this - 24));
}

{
  IBISession::~IBISession((IBISession *)((char *)this - 112));
}

{
  IBISession::~IBISession((IBISession *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  IBISession::~IBISession((IBISession *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

void IBISession::initialize(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  void *v21;
  _BYTE *v22;
  void **p_p;
  uint64_t v24;
  std::__shared_weak_count *v25;
  void *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  void (***v41)(void *, void **, uint64_t);
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  _BYTE *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  void (***v57)(void *, void **, uint64_t);
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  ImsPrefs *v65;
  void **UseRTPDetectionAutoStartKey;
  void *v67;
  _BOOL4 v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  void (***v81)(void *, void **, uint64_t);
  unint64_t *v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  _BYTE *v91;
  std::__shared_weak_count *v92;
  void (***v93)(void *, void **, uint64_t);
  char *v94;
  uint64_t v95;
  _BYTE *v96;
  uint64_t v97;
  _BYTE *v98;
  unint64_t *v99;
  unint64_t *v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  _BYTE v104[72];
  _QWORD v105[5];
  uint64_t v106[2];
  void *v107[2];
  void *v108;
  std::__shared_weak_count *v109;
  void *v110[2];
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *__p;
  std::__shared_weak_count *v114;
  unsigned int v115;
  char v116;
  _BYTE *v117;
  std::__shared_weak_count *v118;
  void *v119;
  std::__shared_weak_count *v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  void *v123;
  std::__shared_weak_count *v124;
  uint64_t v125;
  std::__shared_weak_count *v126;
  void *v127[2];
  char v128;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v127, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v12 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
  if (!a1)
    __cxa_bad_typeid();
  v13 = v12;
  v14 = *(_QWORD **)(v12 + 8);
  v15 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"initialize", 10);
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v13 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v13 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if (v128 < 0)
    operator delete(v127[0]);
  if (v116 < 0)
    operator delete(__p);
  *(_BYTE *)(a1 + 516) = a3;
  if (!*(_QWORD *)(a1 + 1024))
  {
    RTPSharedPointerBase::getShared<IBISession>(&__p, a1);
    v26 = __p;
    v25 = v114;
    v27 = operator new(0x28uLL);
    v28 = v27;
    v27[1] = 0;
    v27[2] = 0;
    *v27 = &off_1E78D12A8;
    v29 = v27 + 3;
    if (v25)
    {
      p_shared_weak_owners = (unint64_t *)&v25->__shared_weak_owners_;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
      v27[3] = v26;
      v27[4] = v25;
      do
        v32 = __ldxr(p_shared_weak_owners);
      while (__stxr(v32 + 1, p_shared_weak_owners));
      std::__shared_weak_count::__release_weak(v25);
    }
    else
    {
      v27[3] = v26;
      v27[4] = 0;
    }
    *(_QWORD *)(a1 + 1024) = v29;
    v33 = *(std::__shared_weak_count **)(a1 + 1032);
    *(_QWORD *)(a1 + 1032) = v28;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v35 = __ldaxr(p_shared_owners);
      while (__stlxr(v35 - 1, p_shared_owners));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v36 = v114;
    if (v114)
    {
      v37 = (unint64_t *)&v114->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (!v38)
      {
        ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
        std::__shared_weak_count::__release_weak(v36);
      }
    }
  }
  v125 = 0;
  v126 = 0;
  v16 = (std::__shared_weak_count *)a7[1];
  if (v16 && (v126 = std::__shared_weak_count::lock(v16)) != 0 && (v125 = *a7, (v17 = v125) != 0))
  {
    if (*(_BYTE *)(v125 + 584))
    {
      *(_DWORD *)(a1 + 248) = a6;
      v121 = 0;
      v122 = 0;
      RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), *(unsigned __int16 *)(v17 + 176), &v121);
      if (!v121)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v127, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v55 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"Missing RTP transport", 21);
        *(_BYTE *)(v55 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v55 + 17) = 0;
        if (v128 < 0)
          operator delete(v127[0]);
        if (v116 < 0)
          operator delete(__p);
        __p = 0;
        v114 = 0;
        v56 = *(std::__shared_weak_count **)(a1 + 40);
        if (v56)
        {
          v114 = std::__shared_weak_count::lock(v56);
          if (v114)
          {
            v57 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
            __p = v57;
            if (v57)
            {
              RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v119);
              (**v57)(v57, &v119, 9);
              v58 = v120;
              if (v120)
              {
                v59 = (unint64_t *)&v120->__shared_owners_;
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                  std::__shared_weak_count::__release_weak(v58);
                }
              }
            }
          }
        }
        v61 = v114;
        if (!v114)
          goto LABEL_159;
        v62 = (unint64_t *)&v114->__shared_owners_;
        do
          v63 = __ldaxr(v62);
        while (__stlxr(v63 - 1, v62));
        goto LABEL_157;
      }
      v117 = 0;
      v118 = 0;
      __p = 0;
      v114 = 0;
      v18 = *(std::__shared_weak_count **)(a1 + 40);
      if (v18
        && (v19 = std::__shared_weak_count::lock(v18), (v114 = v19) != 0)
        && (v20 = v19, v21 = *(void **)(a1 + 32), (__p = v21) != 0)
      {
        v117 = v22;
        v118 = v20;
        p_p = &__p;
      }
      else
      {
        p_p = (void **)&v117;
      }
      *p_p = 0;
      p_p[1] = 0;
      v48 = v114;
      if (v114)
      {
        v49 = (unint64_t *)&v114->__shared_owners_;
        do
          v50 = __ldaxr(v49);
        while (__stlxr(v50 - 1, v49));
        if (!v50)
        {
          ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
          std::__shared_weak_count::__release_weak(v48);
        }
      }
      v51 = v117;
      if (!v117)
      {
        std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v127, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v64 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v64 + 8), (uint64_t)"Delegate is not a MediaSessionStateMachine", 42);
        *(_BYTE *)(v64 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v64 + 64))(v64, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v64 + 17) = 0;
        if (v128 < 0)
          operator delete(v127[0]);
        if (v116 < 0)
          operator delete(__p);
        goto LABEL_154;
      }
      if (!a3)
      {
LABEL_104:
        v111 = v125;
        v112 = v126;
        if (v126)
        {
          v74 = (unint64_t *)&v126->__shared_weak_owners_;
          do
            v75 = __ldxr(v74);
          while (__stxr(v75 + 1, v74));
        }
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)a1 + 200))(&__p, a1, &v111);
        v76 = ((uint64_t (*)(std::__shared_weak_count *, _QWORD))v114->__get_deleter)(v114, v115);
        ImsResult::~ImsResult((ImsResult *)&__p);
        if (v112)
          std::__shared_weak_count::__release_weak(v112);
        if (v76)
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v127, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v77 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)"Failed to generated session config", 34);
          *(_BYTE *)(v77 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v77 + 17) = 0;
          if (v128 < 0)
            operator delete(v127[0]);
          if (v116 < 0)
            operator delete(__p);
          v78 = *(std::__shared_weak_count **)(a1 + 40);
          if (v78)
          {
            v79 = std::__shared_weak_count::lock(v78);
            v114 = v79;
            if (v79)
            {
              v80 = v79;
              v81 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
              __p = v81;
              if (v81)
              {
                RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, v110);
                (**v81)(v81, v110, 9);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v110);
              }
              v82 = (unint64_t *)&v80->__shared_owners_;
              do
                v83 = __ldaxr(v82);
              while (__stlxr(v83 - 1, v82));
              if (!v83)
              {
                ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
                std::__shared_weak_count::__release_weak(v80);
              }
            }
          }
        }
        else
        {
          *(_BYTE *)(a1 + 542) = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(*(_QWORD *)*a2 + 200))(*a2, *(_QWORD *)(a1 + 544), *(_QWORD *)(a1 + 552) - *(_QWORD *)(a1 + 544));
          std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(v127, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v84 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"Generated session config", 24);
          *(_BYTE *)(v84 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v84 + 17) = 0;
          if (v128 < 0)
            operator delete(v127[0]);
          if (v116 < 0)
            operator delete(__p);
          v85 = *(_QWORD *)(a1 + 1040);
          RTPSharedPointerBase::getShared<IBISession>(&v108, a1);
          std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v85 + 120), (uint64_t *)&v108);
          v86 = v109;
          if (v109)
          {
            v87 = (unint64_t *)&v109->__shared_owners_;
            do
              v88 = __ldaxr(v87);
            while (__stlxr(v88 - 1, v87));
            if (!v88)
            {
              ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
              std::__shared_weak_count::__release_weak(v86);
            }
          }
          IBISessionHelper::sendCreateMediaRequest(*(IBISessionHelper **)(a1 + 1024), (uint64_t)&__p);
          v89 = ((uint64_t (*)(std::__shared_weak_count *, _QWORD))v114->__get_deleter)(v114, v115);
          ImsResult::~ImsResult((ImsResult *)&__p);
          if (v89)
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
            std::string::basic_string[abi:ne180100]<0>(v127, "");
            v90 = ims::error((uint64_t)&__p, (uint64_t)v127);
            v91 = (_BYTE *)ImsOutStream::operator<<(v90, "Failed to send CreateMedia request");
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v91 + 64))(v91, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v91[17] = 0;
            if (v128 < 0)
              operator delete(v127[0]);
            if (v116 < 0)
              operator delete(__p);
            __p = 0;
            v114 = 0;
            v92 = *(std::__shared_weak_count **)(a1 + 40);
            if (v92)
            {
              v114 = std::__shared_weak_count::lock(v92);
              if (v114)
              {
                v93 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
                __p = v93;
                if (v93)
                {
                  RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, v107);
                  (**v93)(v93, v107, 9);
                  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v107);
                }
              }
            }
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
          }
          else
          {
            RTPSharedPointerBase::getShared<IBISession>(&__p, a1);
            v94 = (char *)__p + 24;
            if (!__p)
              v94 = 0;
            v106[0] = (uint64_t)v94;
            v106[1] = (uint64_t)v114;
            __p = 0;
            v114 = 0;
            v105[0] = MEMORY[0x1E0C809B0];
            v105[1] = 0x40000000;
            v105[2] = ___ZN10IBISession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke;
            v105[3] = &__block_descriptor_tmp_24;
            v105[4] = a1;
            MediaSessionDriver::startTimerForRequest(a1 + 24, 74565, v106, v105);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v106);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
            ++IBISession::_count;
            std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
            std::string::basic_string[abi:ne180100]<0>(v127, "");
            v95 = ims::debug((uint64_t)&__p, (uint64_t)v127);
            v96 = (_BYTE *)ImsOutStream::operator<<(v95, "Number of sessions = ");
            std::ostream::operator<<();
            v96[17] = 0;
            (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v96 + 64))(v96, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            v96[17] = 0;
            if (v128 < 0)
              operator delete(v127[0]);
            if (v116 < 0)
              operator delete(__p);
            if (!IBISession::_activeAudio && !*(_BYTE *)(a1 + 516))
            {
              std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
              std::string::basic_string[abi:ne180100]<0>(v127, "");
              v97 = ims::debug((uint64_t)&__p, (uint64_t)v127);
              v98 = (_BYTE *)ImsOutStream::operator<<(v97, "Setup audio device for MT call");
              (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v98 + 64))(v98, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v98[17] = 0;
              if (v128 < 0)
                operator delete(v127[0]);
              if (v116 < 0)
                operator delete(__p);
              IBIRTPStackController::sendAudioCallEvent(*(_QWORD **)(a1 + 1040), 2, (uint64_t)v104);
              ImsResult::~ImsResult((ImsResult *)v104);
            }
          }
        }
LABEL_154:
        v61 = v118;
        if (!v118)
        {
LABEL_159:
          v45 = v122;
          if (!v122)
            goto LABEL_164;
          v100 = (unint64_t *)&v122->__shared_owners_;
          do
            v47 = __ldaxr(v100);
          while (__stlxr(v47 - 1, v100));
          goto LABEL_162;
        }
        v99 = (unint64_t *)&v118->__shared_owners_;
        do
          v63 = __ldaxr(v99);
        while (__stlxr(v63 - 1, v99));
LABEL_157:
        if (!v63)
        {
          ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
          std::__shared_weak_count::__release_weak(v61);
        }
        goto LABEL_159;
      }
      v52 = v125;
      __p = 0;
      v114 = 0;
      v53 = *(std::__shared_weak_count **)(v125 + 128);
      if (v53)
      {
        v53 = std::__shared_weak_count::lock(v53);
        v54 = v53;
        v114 = v53;
        if (v53)
        {
          v53 = *(std::__shared_weak_count **)(v52 + 120);
          __p = v53;
        }
      }
      else
      {
        v54 = 0;
      }
      v65 = (ImsPrefs *)SipStack::prefs((SipStack *)v53);
      UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v65);
      v67 = ImsPrefs::prefWithKey(v65, UseRTPDetectionAutoStartKey);
      if (v67)
      {
        if (!(*(unsigned int (**)(void *))(*(_QWORD *)v67 + 40))(v67))
        {
LABEL_88:
          v68 = 0;
          goto LABEL_91;
        }
      }
      else if (!*((_BYTE *)UseRTPDetectionAutoStartKey + 57))
      {
        goto LABEL_88;
      }
      v68 = v51[316] == 0;
LABEL_91:
      if (v54)
      {
        v69 = (unint64_t *)&v54->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      if (v68)
      {
        __p = 0;
        v114 = 0;
        RTPTransportManager::getTransport(*(RTPTransportManager **)(a1 + 48), (unsigned __int16)(*(_WORD *)(v17 + 176) + 1), (uint64_t *)&__p);
        (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v121 + 88))(v121, 0);
        if (__p)
          (*(void (**)(void *, _QWORD))(*(_QWORD *)__p + 88))(__p, 0);
        v71 = v114;
        if (v114)
        {
          v72 = (unint64_t *)&v114->__shared_owners_;
          do
            v73 = __ldaxr(v72);
          while (__stlxr(v73 - 1, v72));
          if (!v73)
          {
            ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
            std::__shared_weak_count::__release_weak(v71);
          }
        }
      }
      goto LABEL_104;
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v127, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v39 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"SDPSession doesn't contain audio settings", 41);
    *(_BYTE *)(v39 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v39 + 17) = 0;
    if (v128 < 0)
      operator delete(v127[0]);
    if (v116 < 0)
      operator delete(__p);
    __p = 0;
    v114 = 0;
    v40 = *(std::__shared_weak_count **)(a1 + 40);
    if (v40)
    {
      v114 = std::__shared_weak_count::lock(v40);
      if (v114)
      {
        v41 = *(void (****)(void *, void **, uint64_t))(a1 + 32);
        __p = v41;
        if (v41)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v123);
          (**v41)(v41, &v123, 9);
          v42 = v124;
          if (v124)
          {
            v43 = (unint64_t *)&v124->__shared_owners_;
            do
              v44 = __ldaxr(v43);
            while (__stlxr(v44 - 1, v43));
            if (!v44)
            {
              ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
              std::__shared_weak_count::__release_weak(v42);
            }
          }
        }
      }
    }
    v45 = v114;
    if (v114)
    {
      v46 = (unint64_t *)&v114->__shared_owners_;
      do
        v47 = __ldaxr(v46);
      while (__stlxr(v47 - 1, v46));
LABEL_162:
      if (!v47)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v127, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v127);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"sdpSession is null", 18);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (v128 < 0)
      operator delete(v127[0]);
    if (v116 < 0)
      operator delete(__p);
  }
LABEL_164:
  v101 = v126;
  if (v126)
  {
    v102 = (unint64_t *)&v126->__shared_owners_;
    do
      v103 = __ldaxr(v102);
    while (__stlxr(v103 - 1, v102));
    if (!v103)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
}

void sub_1BEFF33D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  uint64_t v39;

  if (a39 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 192);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 160);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v39 - 128);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10IBISession10initializeERKNSt3__110shared_ptrI9IpAddressEEbRKNS0_12basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEESD_14MediaDirectionNS0_8weak_ptrI10SDPSessionEE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74565);
}

void `non-virtual thunk to'IBISession::initialize(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, int a6, uint64_t *a7)
{
  IBISession::initialize(a1 - 24, a2, a3, a4, a5, a6, a7);
}

void IBISession::generateSessionConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  BOOL v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  ImsPrefs *v28;
  void **EnableIncomingDTMFKey;
  void *v30;
  char v31;
  unint64_t *v32;
  unint64_t v33;
  __int16 v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _OWORD *v41;
  std::string::size_type size;
  std::string *v43;
  int data_low;
  int v45;
  _BOOL4 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string::size_type v51;
  std::string *v52;
  int data;
  int v54;
  _BOOL4 v56;
  std::string::size_type v57;
  std::string *v58;
  int v59;
  int v60;
  BOOL v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  ImsPrefs *v66;
  void **PacketizationTimeKey;
  void *v68;
  int v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;
  ImsPrefs *v75;
  void **MaxPacketizationTimeKey;
  void *v77;
  int v78;
  unint64_t *v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  std::string *v84;
  std::string::value_type *v85;
  std::string::value_type v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned __int16 *v91;
  int v92;
  int v93;
  uint64_t v95;
  int v96;
  _DWORD *v97;
  unsigned int v98;
  unint64_t v99;
  double v100;
  unsigned int v101;
  unsigned int v102;
  double v103;
  uint64_t v104;
  __int16 v105;
  uint64_t v106;
  int v107;
  __int16 v108;
  _WORD *v109;
  __int16 v110;
  __int16 v111;
  int v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  std::__shared_weak_count *v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  ImsPrefs *v123;
  void **EnableDTXKey;
  void *v125;
  int v126;
  unint64_t *v127;
  unint64_t v128;
  uint64_t v129;
  int v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  int v134;
  __int16 v135;
  __int16 v136;
  __int16 v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  uint64_t v149;
  ImsPrefs *v150;
  void **v151;
  void *v152;
  int v153;
  unint64_t *v154;
  unint64_t v155;
  uint64_t v156;
  char v157;
  _BYTE *v158;
  int v159;
  int v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  unint64_t v166;
  __int16 v167;
  __int16 v168;
  __int16 v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  __int16 v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  __int16 v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  std::__shared_weak_count *v185;
  std::__shared_weak_count *v186;
  uint64_t v187;
  uint64_t v188;
  char v189;
  __int16 v190;
  ImsPrefs *v191;
  void **v192;
  void *v193;
  int v194;
  unint64_t *v195;
  unint64_t v196;
  int v197;
  __int16 v198;
  __int16 v199;
  uint64_t v200;
  uint64_t v201;
  char v202;
  uint64_t v203;
  std::__shared_weak_count *v204;
  std::__shared_weak_count *v205;
  ImsPrefs *v206;
  void **v207;
  void *v208;
  int v209;
  unint64_t *v210;
  unint64_t v211;
  uint64_t v212;
  uint64_t v213;
  char v214;
  _BYTE *v215;
  int v216;
  int v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  __int16 v222;
  int v223;
  __int16 v224;
  int v225;
  char v226;
  __int16 v227;
  char v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  int v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  unsigned int v238;
  void *v239[2];
  char v240;
  uint64_t v241;
  std::__shared_weak_count *v242;
  void *__p;
  std::__shared_weak_count *v244;
  char v245;
  std::string v246;
  uint64_t v247;
  std::__shared_weak_count *v248;

  v247 = 0;
  v248 = 0;
  v5 = (std::__shared_weak_count *)a2[1];
  if (!v5)
  {
    v7 = 0;
    goto LABEL_22;
  }
  v7 = std::__shared_weak_count::lock(v5);
  v248 = v7;
  if (!v7 || (v247 = *a2, (v8 = v247) == 0))
  {
LABEL_22:
    std::string::basic_string[abi:ne180100]<0>(&v246, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v23 = ImsLogger::error(ims::_logger, (uint64_t)&v246, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"SDPSession expired in IBISession::generateSessionConfiguration", 62);
    *(_BYTE *)(v23 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v23 + 17) = 0;
    if (v245 < 0)
      operator delete(__p);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    if (v7)
      goto LABEL_62;
    return;
  }
  v9 = v247 + 152;
  v10 = *(unsigned __int8 *)(v247 + 584);
  if (*(_BYTE *)(v247 + 584))
    v11 = v247 + 152;
  else
    v11 = 0;
  v12 = *(unsigned __int8 *)(v247 + 1024);
  v241 = 0;
  v242 = 0;
  if (!v10)
  {
    std::string::basic_string[abi:ne180100]<0>(&v246, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::error(ims::_logger, (uint64_t)&v246, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Insufficient information to generate session configuration", 58);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_49:
    *(_BYTE *)(v24 + 17) = 0;
    if (v245 < 0)
      operator delete(__p);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    v35 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 296);
    if (v35)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v35 + 120), 25);
LABEL_55:
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
    goto LABEL_56;
  }
  v13 = *(_QWORD *)(v247 + 160);
  v14 = *(std::__shared_weak_count **)(v247 + 168);
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  v241 = v13;
  v242 = v14;
  v17 = *(_WORD *)(v247 + 182) != 255 && v13 == 0;
  if (v17)
  {
    std::string::basic_string[abi:ne180100]<0>(&v246, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v25 = ImsLogger::error(ims::_logger, (uint64_t)&v246, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"Remote connection information not found", 39);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_30;
  }
  v18 = *(std::__shared_weak_count **)(v247 + 128);
  if (v18 && (v19 = std::__shared_weak_count::lock(v18)) != 0)
  {
    v20 = v19;
    *(_DWORD *)(a1 + 528) = *(_DWORD *)(*(_QWORD *)(v247 + 120) + 4076);
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 528) = MEMORY[0xFEC];
  }
  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = 0uLL;
  v26 = *(std::__shared_weak_count **)(v247 + 128);
  if (v26)
  {
    v26 = std::__shared_weak_count::lock(v26);
    v27 = v26;
    v246.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
    if (v26)
    {
      v26 = *(std::__shared_weak_count **)(v247 + 120);
      v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v26;
    }
  }
  else
  {
    v27 = 0;
  }
  v28 = (ImsPrefs *)SipStack::prefs((SipStack *)v26);
  EnableIncomingDTMFKey = (void **)ImsPrefs::getEnableIncomingDTMFKey(v28);
  v30 = ImsPrefs::prefWithKey(v28, EnableIncomingDTMFKey);
  if (v30)
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 40))(v30);
  else
    v31 = *((_BYTE *)EnableIncomingDTMFKey + 57) != 0;
  *(_BYTE *)(a1 + 1016) = v31;
  if (v27)
  {
    v32 = (unint64_t *)&v27->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v34 = *(_WORD *)(v8 + 178);
  *(_WORD *)(a1 + 600) = v34;
  *(_WORD *)(a1 + 876) = v34 + 1;
  if (*(_WORD *)(v8 + 180) == 255)
  {
    std::string::basic_string[abi:ne180100]<0>(&v246, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v24 = ImsLogger::error(ims::_logger, (uint64_t)&v246, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"No compatible media pair available", 34);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_49;
  }
  v41 = (_OWORD *)(v8 + 432);
  if (*(char *)(v8 + 455) < 0)
  {
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v8 + 432), *(_QWORD *)(v8 + 440));
  }
  else
  {
    *(_OWORD *)&v246.__r_.__value_.__l.__data_ = *v41;
    v246.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 448);
  }
  size = HIBYTE(v246.__r_.__value_.__r.__words[2]);
  if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v246.__r_.__value_.__l.__size_;
  if (size == 3)
  {
    v43 = (std::string *)v246.__r_.__value_.__r.__words[0];
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v43 = &v246;
    data_low = LOWORD(v43->__r_.__value_.__l.__data_);
    v45 = v43->__r_.__value_.__s.__data_[2];
    v47 = data_low == 19777 && v45 == 82;
  }
  else
  {
    v47 = 0;
  }
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  if (v47)
  {
    if (!v12)
    {
      v235 = 0;
      v236 = 0;
      v227 = 0;
      v233 = 1;
      v49 = v8 + 152;
      v50 = v8 + 152;
      v9 = 0;
      goto LABEL_140;
    }
    v227 = 0;
    if (*(_WORD *)(v8 + 622) == 255)
      v48 = 0;
    else
      v48 = v8 + 592;
    v235 = v48;
    v236 = 0;
    v49 = v8 + 152;
    v50 = v8 + 152;
    if (*(_WORD *)(v8 + 898) == 255)
      v9 = 0;
    else
      v9 = v8 + 592;
    goto LABEL_139;
  }
  if (*(char *)(v8 + 455) < 0)
  {
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v8 + 432), *(_QWORD *)(v8 + 440));
  }
  else
  {
    *(_OWORD *)&v246.__r_.__value_.__l.__data_ = *v41;
    v246.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 448);
  }
  v51 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
  if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v51 = v246.__r_.__value_.__l.__size_;
  if (v51 == 6)
  {
    v52 = (std::string *)v246.__r_.__value_.__r.__words[0];
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v52 = &v246;
    data = (int)v52->__r_.__value_.__l.__data_;
    v54 = WORD2(v52->__r_.__value_.__r.__words[0]);
    v56 = data == 760368449 && v54 == 16983;
  }
  else
  {
    v56 = 0;
  }
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
  if (!v56)
  {
    if (*(char *)(v8 + 455) < 0)
    {
      std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v8 + 432), *(_QWORD *)(v8 + 440));
    }
    else
    {
      *(_OWORD *)&v246.__r_.__value_.__l.__data_ = *v41;
      v246.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 448);
    }
    v57 = HIBYTE(v246.__r_.__value_.__r.__words[2]);
    if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v57 = v246.__r_.__value_.__l.__size_;
    if (v57 == 3)
    {
      v58 = (std::string *)v246.__r_.__value_.__r.__words[0];
      if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v58 = &v246;
      v59 = LOWORD(v58->__r_.__value_.__l.__data_);
      v60 = v58->__r_.__value_.__s.__data_[2];
      v62 = v59 == 22085 && v60 == 83;
    }
    else
    {
      v62 = 0;
    }
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    if (v62)
    {
      v49 = 0;
      v235 = 0;
      v236 = v8 + 152;
      v50 = 0;
      v227 = 0;
LABEL_139:
      v233 = 1;
      goto LABEL_140;
    }
    std::string::basic_string[abi:ne180100]<0>(&v246, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    v104 = ims::error((uint64_t)&v246, (uint64_t)&__p);
    v25 = ImsOutStream::operator<<(v104, "Unsupported encoding name given");
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_30:
    *(_BYTE *)(v25 + 17) = 0;
    if (v245 < 0)
      operator delete(__p);
    if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v246.__r_.__value_.__l.__data_);
    goto LABEL_55;
  }
  if (v12)
  {
    v236 = 0;
    v233 = 0;
    if (*(_WORD *)(v8 + 622) == 255)
      v49 = 0;
    else
      v49 = v8 + 592;
    if (*(_WORD *)(v8 + 898) == 255)
      v50 = 0;
    else
      v50 = v8 + 592;
  }
  else
  {
    v49 = 0;
    v236 = 0;
    v50 = 0;
    v233 = 0;
  }
  v227 = 1;
  v235 = v8 + 152;
LABEL_140:
  if (v241)
    *(_BYTE *)(a1 + 568) = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v241 + 200))(v241, *(_QWORD *)(a1 + 576), *(_QWORD *)(a1 + 584) - *(_QWORD *)(a1 + 576));
  v231 = v50;
  *(_DWORD *)(a1 + 532) = *(_DWORD *)(a1 + 248);
  v63 = v247;
  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = 0uLL;
  v64 = *(std::__shared_weak_count **)(v247 + 128);
  if (v64)
  {
    v64 = std::__shared_weak_count::lock(v64);
    v65 = v64;
    v246.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
    if (v64)
    {
      v64 = *(std::__shared_weak_count **)(v63 + 120);
      v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v64;
    }
  }
  else
  {
    v65 = 0;
  }
  v66 = (ImsPrefs *)SipStack::prefs((SipStack *)v64);
  PacketizationTimeKey = (void **)ImsPrefs::getPacketizationTimeKey(v66);
  v68 = ImsPrefs::prefWithKey(v66, PacketizationTimeKey);
  if (v68)
    LOWORD(v69) = (*(uint64_t (**)(void *))(*(_QWORD *)v68 + 56))(v68);
  else
    v69 = *((_DWORD *)PacketizationTimeKey + 15);
  *(_WORD *)(a1 + 536) = v69;
  if (v65)
  {
    v70 = (unint64_t *)&v65->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v72 = v247;
  *(_OWORD *)&v246.__r_.__value_.__l.__data_ = 0uLL;
  v73 = *(std::__shared_weak_count **)(v247 + 128);
  if (v73)
  {
    v73 = std::__shared_weak_count::lock(v73);
    v74 = v73;
    v246.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
    if (v73)
    {
      v73 = *(std::__shared_weak_count **)(v72 + 120);
      v246.__r_.__value_.__r.__words[0] = (std::string::size_type)v73;
    }
  }
  else
  {
    v74 = 0;
  }
  v75 = (ImsPrefs *)SipStack::prefs((SipStack *)v73);
  MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v75);
  v77 = ImsPrefs::prefWithKey(v75, MaxPacketizationTimeKey);
  if (v77)
    LOWORD(v78) = (*(uint64_t (**)(void *))(*(_QWORD *)v77 + 56))(v77);
  else
    v78 = *((_DWORD *)MaxPacketizationTimeKey + 15);
  *(_WORD *)(a1 + 538) = v78;
  if (v74)
  {
    v79 = (unint64_t *)&v74->__shared_owners_;
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  memset(&v246, 0, sizeof(v246));
  if (*(char *)(v8 + 247) < 0)
    std::string::__init_copy_ctor_external(&v246, *(const std::string::value_type **)(v8 + 224), *(_QWORD *)(v8 + 232));
  else
    v246 = *(std::string *)(v8 + 224);
  LOBYTE(v81) = *((_BYTE *)&v246.__r_.__value_.__s + 23);
  v82 = SHIBYTE(v246.__r_.__value_.__r.__words[2]);
  if ((v246.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    LOBYTE(v81) = v246.__r_.__value_.__s.__data_[8];
  *(_BYTE *)(a1 + 616) = v81;
  v81 = v81;
  if ((_BYTE)v81)
  {
    v83 = v82 < 0;
    v84 = &v246;
    if (v83)
      v84 = (std::string *)v246.__r_.__value_.__r.__words[0];
    v85 = (std::string::value_type *)(a1 + 617);
    do
    {
      v86 = v84->__r_.__value_.__s.__data_[0];
      v84 = (std::string *)((char *)v84 + 1);
      *v85++ = v86;
      --v81;
    }
    while (v81);
  }
  v87 = *(_DWORD *)(a1 + 248);
  v88 = *(unsigned __int8 *)(a1 + 463);
  if (v87 != 2)
  {
    v89 = *(_QWORD *)(a1 + 448);
LABEL_191:
    v96 = (char)v88;
    if ((v88 & 0x80u) != 0)
      v88 = v89;
    if (v88 != 4)
      goto LABEL_197;
    v97 = (_DWORD *)(a1 + 440);
    if (v96 < 0)
      v97 = *(_DWORD **)(a1 + 440);
    if (*v97 == 1346589778)
    {
      *(_DWORD *)(a1 + 604) = -1;
      v101 = *(unsigned __int16 *)(a1 + 438);
      *(_DWORD *)(a1 + 608) = v101;
      v102 = *(unsigned __int16 *)(a1 + 436);
      if (v101 < v102)
        *(_DWORD *)(a1 + 608) = v102;
      v103 = (double)*(unint64_t *)(a1 + 1008);
      *(_DWORD *)(a1 + 892) = (unint64_t)(v103 * 37.5);
      v99 = (unint64_t)(v103 * 12.5);
    }
    else
    {
LABEL_197:
      v98 = *(unsigned __int16 *)(a1 + 436);
      *(_DWORD *)(a1 + 604) = v98;
      if (*(unsigned __int16 *)(a1 + 438) > v98)
        v98 = *(unsigned __int16 *)(a1 + 438);
      *(_DWORD *)(a1 + 608) = v98;
      if (v87 == 1 && (LODWORD(v99) = *(_DWORD *)(a1 + 424), !(_DWORD)v99))
      {
        *(_DWORD *)(a1 + 892) = 0;
      }
      else
      {
        v100 = (double)*(unint64_t *)(a1 + 1008);
        *(_DWORD *)(a1 + 892) = (unint64_t)(v100 * 37.5);
        v99 = (unint64_t)(v100 * 12.5);
      }
    }
    *(_DWORD *)(a1 + 888) = v99;
    v17 = v87 == 1;
    v95 = 428;
    if (v17)
      v95 = 424;
    goto LABEL_209;
  }
  v89 = *(_QWORD *)(a1 + 448);
  if ((v88 & 0x80u) == 0)
    v90 = *(unsigned __int8 *)(a1 + 463);
  else
    v90 = *(_QWORD *)(a1 + 448);
  if (v90 != 3)
    goto LABEL_191;
  v91 = (v88 & 0x80u) == 0 ? (unsigned __int16 *)(a1 + 440) : *(unsigned __int16 **)(a1 + 440);
  v92 = *v91;
  v93 = *((unsigned __int8 *)v91 + 2);
  if (v92 != 21586 || v93 != 80)
    goto LABEL_191;
  *(_DWORD *)(a1 + 604) = *(unsigned __int16 *)(a1 + 436);
  *(_DWORD *)(a1 + 608) = -1;
  *(_QWORD *)(a1 + 888) = 0;
  v95 = 428;
LABEL_209:
  *(_DWORD *)(a1 + 880) = *(_DWORD *)(a1 + v95);
  v105 = *(_WORD *)(v11 + 24);
  *(_WORD *)(a1 + 602) = v105;
  *(_WORD *)(a1 + 874) = v105 + 1;
  v229 = v49;
  v230 = v11;
  if (v49)
  {
    v106 = *(_QWORD *)(a1 + 920);
    *(_DWORD *)v106 = 3;
    *(_BYTE *)(v106 + 40) = *(_BYTE *)(v49 + 28);
    *(_BYTE *)(v106 + 41) = *(_BYTE *)(v49 + 30);
    *(_DWORD *)(v106 + 44) = *(unsigned __int16 *)(v49 + 308);
    v107 = *(unsigned __int8 *)(v49 + 328);
    v108 = *(_WORD *)(v49 + 330);
    v109 = (_WORD *)v49;
    v110 = *(_WORD *)(v49 + 332);
    v111 = v109[167];
    v237 = (unsigned __int16)v109[168];
    v224 = v109[169];
    v112 = (unsigned __int16)v109[170];
    if (v233)
    {
      v113 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 296);
      if (v113)
      {
        v114 = *(_QWORD *)(v113 + 120);
        *(_WORD *)(v114 + 488) = v227;
        *(_WORD *)(v114 + 490) = v108;
      }
    }
    *(_DWORD *)(v106 + 20) = v107 == 0;
    *(_WORD *)(v106 + 28) = v111;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v115 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v115 + 8), (uint64_t)"codec[codecsIndex] max_redundancy_duration : ", 45);
    *(_BYTE *)(v115 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v115 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v115 + 64))(v115, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v115 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    *(_WORD *)(*(_QWORD *)(a1 + 920) + 26) = 2 * v110;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v116 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v116 + 8), (uint64_t)"codec[codecsIndex] mode_set = ", 30);
    *(_BYTE *)(v116 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v116 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v116 + 64))(v116, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v116 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    *(_BYTE *)(*(_QWORD *)(a1 + 920) + 36) = v108;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v117 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v117 + 8), (uint64_t)"codec[codecsIndex] start_mode_ul = ", 35);
    *(_BYTE *)(v117 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v117 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v117 + 64))(v117, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v117 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    v118 = *(_QWORD *)(a1 + 920);
    *(_DWORD *)(v118 + 4) = v237;
    *(_DWORD *)(v118 + 8) = v112;
    *(_BYTE *)(v118 + 24) = v224;
    v119 = v247;
    __p = 0;
    v244 = 0;
    v120 = *(std::__shared_weak_count **)(v247 + 128);
    if (v120)
    {
      v120 = std::__shared_weak_count::lock(v120);
      v121 = v120;
      v244 = v120;
      if (v120)
      {
        v120 = *(std::__shared_weak_count **)(v119 + 120);
        __p = v120;
      }
    }
    else
    {
      v121 = 0;
    }
    v123 = (ImsPrefs *)SipStack::prefs((SipStack *)v120);
    EnableDTXKey = (void **)ImsPrefs::getEnableDTXKey(v123);
    v125 = ImsPrefs::prefWithKey(v123, EnableDTXKey);
    if (v125)
      v126 = (*(uint64_t (**)(void *))(*(_QWORD *)v125 + 40))(v125);
    else
      v126 = *((_BYTE *)EnableDTXKey + 57) != 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 920) + 32) = v126;
    if (v121)
    {
      v127 = (unint64_t *)&v121->__shared_owners_;
      do
        v128 = __ldaxr(v127);
      while (__stlxr(v128 - 1, v127));
      if (!v128)
      {
        ((void (*)(std::__shared_weak_count *))v121->__on_zero_shared)(v121);
        std::__shared_weak_count::__release_weak(v121);
      }
    }
    v129 = *(_QWORD *)(a1 + 920);
    v130 = *(unsigned __int8 *)(v129 + 40);
    v131 = *(unsigned __int8 *)(v129 + 41);
    if (v130 == 255)
    {
      *(_BYTE *)(v129 + 40) = v131;
      LOBYTE(v130) = v131;
    }
    if (v131 == 255)
      *(_BYTE *)(v129 + 41) = v130;
    v238 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    v122 = ims::debug((uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v122 + 8), (uint64_t)"NB codec not present in SDP Media format", 40);
    *(_BYTE *)(v122 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v122 + 64))(v122, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v122 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    v238 = 0;
  }
  if (v235)
  {
    v132 = *(_QWORD *)(a1 + 920);
    v133 = v132 + 48 * v238;
    *(_DWORD *)v133 = 4;
    *(_BYTE *)(v133 + 40) = *(_BYTE *)(v235 + 28);
    *(_BYTE *)(v133 + 41) = *(_BYTE *)(v235 + 30);
    *(_DWORD *)(v133 + 44) = *(unsigned __int16 *)(v235 + 308);
    v134 = *(unsigned __int8 *)(v235 + 328);
    v135 = *(_WORD *)(v235 + 330);
    v136 = *(_WORD *)(v235 + 332);
    v137 = *(_WORD *)(v235 + 334);
    v225 = *(unsigned __int16 *)(v235 + 336);
    v222 = *(_WORD *)(v235 + 338);
    v221 = *(unsigned __int16 *)(v235 + 340);
    if ((v233 & 1) == 0)
    {
      v138 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 296);
      if (v138)
      {
        v139 = *(_QWORD *)(v138 + 120);
        *(_WORD *)(v139 + 488) = v227;
        *(_WORD *)(v139 + 490) = v135;
      }
    }
    v140 = v132 + 48 * v238;
    *(_DWORD *)(v140 + 20) = v134 == 0;
    *(_WORD *)(v140 + 28) = v137;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v141 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v141 + 8), (uint64_t)"codec[codecsIndex] max_redundancy_duration : ", 45);
    *(_BYTE *)(v141 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v141 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v141 + 64))(v141, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v141 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    *(_WORD *)(*(_QWORD *)(a1 + 920) + 48 * v238 + 26) = 2 * v136;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v142 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v142 + 8), (uint64_t)"codec[codecsIndex] mode_set = ", 30);
    *(_BYTE *)(v142 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v142 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v142 + 64))(v142, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v142 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    *(_BYTE *)(*(_QWORD *)(a1 + 920) + 48 * v238 + 36) = v135;
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v143 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v143 + 8), (uint64_t)"codec[codecsIndex] start_mode_ul = ", 35);
    *(_BYTE *)(v143 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v143 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v143 + 64))(v143, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v143 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    v144 = *(_QWORD *)(a1 + 920) + 48 * v238;
    *(_DWORD *)(v144 + 4) = v225;
    *(_DWORD *)(v144 + 8) = v221;
    *(_BYTE *)(v144 + 24) = v222;
    v145 = v247;
    __p = 0;
    v244 = 0;
    v146 = *(std::__shared_weak_count **)(v247 + 128);
    if (v146)
    {
      v146 = std::__shared_weak_count::lock(v146);
      v147 = v146;
      v244 = v146;
      if (v146)
      {
        v146 = *(std::__shared_weak_count **)(v145 + 120);
        __p = v146;
      }
    }
    else
    {
      v147 = 0;
    }
    v150 = (ImsPrefs *)SipStack::prefs((SipStack *)v146);
    v151 = (void **)ImsPrefs::getEnableDTXKey(v150);
    v152 = ImsPrefs::prefWithKey(v150, v151);
    if (v152)
      v153 = (*(uint64_t (**)(void *))(*(_QWORD *)v152 + 40))(v152);
    else
      v153 = *((_BYTE *)v151 + 57) != 0;
    *(_DWORD *)(*(_QWORD *)(a1 + 920) + 48 * v238 + 32) = v153;
    if (v147)
    {
      v154 = (unint64_t *)&v147->__shared_owners_;
      do
        v155 = __ldaxr(v154);
      while (__stlxr(v155 - 1, v154));
      if (!v155)
      {
        ((void (*)(std::__shared_weak_count *))v147->__on_zero_shared)(v147);
        std::__shared_weak_count::__release_weak(v147);
      }
    }
    v156 = *(_QWORD *)(a1 + 920) + 48 * v238;
    v159 = *(unsigned __int8 *)(v156 + 40);
    v158 = (_BYTE *)(v156 + 40);
    v157 = v159;
    v160 = v158[1];
    if (v159 == 255)
    {
      *v158 = v160;
      v157 = v160;
    }
    v149 = v231;
    if (v160 == 255)
      v158[1] = v157;
    ++v238;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    v148 = ims::debug((uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v148 + 8), (uint64_t)"WB codec not present in SDP Media format", 40);
    *(_BYTE *)(v148 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v148 + 64))(v148, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v148 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    v149 = v231;
    if (v245 < 0)
      operator delete(__p);
  }
  if (v149)
  {
    v161 = *(_QWORD *)(a1 + 920) + 48 * v238;
    *(_DWORD *)v161 = 5;
    *(_BYTE *)(v161 + 40) = *(_BYTE *)(v149 + 304);
    *(_BYTE *)(v161 + 41) = *(_BYTE *)(v149 + 306);
    *(_DWORD *)(v161 + 44) = *(unsigned __int16 *)(v149 + 310);
    ++v238;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    v162 = ims::debug((uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v162 + 8), (uint64_t)"DTMF codec for NB not present in SDP Media format", 49);
    *(_BYTE *)(v162 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v162 + 64))(v162, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v162 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
  }
  if (v9)
  {
    v163 = *(_QWORD *)(a1 + 920) + 48 * v238;
    *(_DWORD *)v163 = 5;
    *(_BYTE *)(v163 + 40) = *(_BYTE *)(v9 + 304);
    *(_BYTE *)(v163 + 41) = *(_BYTE *)(v9 + 306);
    *(_DWORD *)(v163 + 44) = *(unsigned __int16 *)(v9 + 310);
    ++v238;
    v164 = v236;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    v164 = v236;
    v165 = ims::debug((uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v165 + 8), (uint64_t)"DTMF codec for WB not present in SDP Media format", 49);
    *(_BYTE *)(v165 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v165 + 64))(v165, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v165 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
  }
  if (v164)
  {
    v166 = *(_QWORD *)(v164 + 360);
    v167 = *(_WORD *)(v164 + 368);
    v168 = *(_WORD *)(v164 + 370);
    v169 = *(_WORD *)(v164 + 374);
    v170 = *(unsigned __int8 *)(v164 + 376);
    v226 = *(_BYTE *)(v164 + 380);
    v228 = *(_BYTE *)(v164 + 379);
    v223 = *(_DWORD *)(v164 + 388);
    v171 = *(int *)(v164 + 392);
    v172 = *(int *)(v164 + 396);
    v234 = *(unsigned __int8 *)(v164 + 400);
    v232 = *(unsigned __int16 *)(v164 + 416);
    v173 = *(_WORD *)(v164 + 418);
    v174 = *(unsigned __int16 *)(v164 + 420);
    v175 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 296);
    if (v175)
    {
      v176 = *(_QWORD *)(v175 + 120);
      if ((int)v171 < 3)
        v177 = 4;
      else
        v177 = 5;
      *(_WORD *)(v176 + 488) = v177;
      *(_WORD *)(v176 + 490) = v168;
    }
    v178 = *(_QWORD *)(a1 + 952);
    if (v170)
    {
      *(_BYTE *)v178 = 2;
      *(_DWORD *)(v178 + 44) = 1;
      *(_WORD *)(v178 + 52) = v169;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v239, "");
      v179 = ims::debug((uint64_t)&__p, (uint64_t)v239);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v179 + 8), (uint64_t)"codec[codecsIndex] max_redundancy_duration : ", 45);
      *(_BYTE *)(v179 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v179 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v179 + 64))(v179, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v179 + 17) = 0;
      if (v240 < 0)
        operator delete(v239[0]);
      if (v245 < 0)
        operator delete(__p);
      *(_WORD *)(*(_QWORD *)(a1 + 952) + 50) = 2 * v167;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v239, "");
      v180 = v230;
      v181 = ims::debug((uint64_t)&__p, (uint64_t)v239);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v181 + 8), (uint64_t)"codec[codecsIndex] mode_set = ", 30);
      *(_BYTE *)(v181 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v181 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v181 + 64))(v181, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v181 + 17) = 0;
      if (v240 < 0)
        operator delete(v239[0]);
      if (v245 < 0)
        operator delete(__p);
      *(_BYTE *)(*(_QWORD *)(a1 + 952) + 60) = v168;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v239, "");
      v182 = ims::debug((uint64_t)&__p, (uint64_t)v239);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v182 + 8), (uint64_t)"codec[codecsIndex] start_mode_ul = ", 35);
      *(_BYTE *)(v182 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v182 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v182 + 64))(v182, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v182 + 17) = 0;
      if (v240 < 0)
        operator delete(v239[0]);
      if (v245 < 0)
        operator delete(__p);
      v183 = *(_QWORD *)(a1 + 952);
      *(_DWORD *)(v183 + 28) = v232;
      *(_DWORD *)(v183 + 32) = v174;
      *(_BYTE *)(v183 + 48) = v173;
      v184 = v247;
      __p = 0;
      v244 = 0;
      v185 = *(std::__shared_weak_count **)(v247 + 128);
      if (v185)
      {
        v185 = std::__shared_weak_count::lock(v185);
        v186 = v185;
        v244 = v185;
        v164 = v236;
        v187 = v229;
        if (v185)
        {
          v185 = *(std::__shared_weak_count **)(v184 + 120);
          __p = v185;
        }
      }
      else
      {
        v186 = 0;
        v164 = v236;
        v187 = v229;
      }
      v191 = (ImsPrefs *)SipStack::prefs((SipStack *)v185);
      v192 = (void **)ImsPrefs::getEnableDTXKey(v191);
      v193 = ImsPrefs::prefWithKey(v191, v192);
      if (v193)
        v194 = (*(uint64_t (**)(void *))(*(_QWORD *)v193 + 40))(v193);
      else
        v194 = *((_BYTE *)v192 + 57) != 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 952) + 56) = v194;
      if (v186)
      {
        v195 = (unint64_t *)&v186->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (!v196)
        {
          ((void (*)(std::__shared_weak_count *))v186->__on_zero_shared)(v186);
          std::__shared_weak_count::__release_weak(v186);
        }
      }
      v197 = 1;
    }
    else
    {
      *(_BYTE *)v178 = 3;
      *(_WORD *)(v178 + 50) = 1023;
      *(_WORD *)(v178 + 4) = v166 >> 9;
      if (*(_BYTE *)(a1 + 520))
      {
        v187 = v229;
        v180 = v230;
        v164 = v236;
        if (v171 > 5)
          v190 = 15;
        else
          v190 = word_1BF2A41A2[v171];
        if (v172 > 5)
          v199 = 15;
        else
          v199 = word_1BF2A41A2[v172];
        v198 = v199 & v190;
      }
      else
      {
        v187 = v229;
        v180 = v230;
        v164 = v236;
        if (v171 > 5)
          v198 = 15;
        else
          v198 = word_1BF2A41A2[v171];
      }
      *(_WORD *)(v178 + 10) = v198;
      std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v239, "");
      v200 = ims::debug((uint64_t)&__p, (uint64_t)v239);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)"bw= ", 4);
      *(_BYTE *)(v200 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v200 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)", ", 2);
      *(_BYTE *)(v200 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)"tx= ", 4);
      *(_BYTE *)(v200 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v200 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)", ", 2);
      *(_BYTE *)(v200 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v200 + 8), (uint64_t)"rx= ", 4);
      *(_BYTE *)(v200 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v200 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v200 + 64))(v200, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v200 + 17) = 0;
      if (v240 < 0)
        operator delete(v239[0]);
      if (v245 < 0)
        operator delete(__p);
      v201 = *(_QWORD *)(a1 + 952);
      *(_BYTE *)(v201 + 16) = v226;
      v202 = v228;
      if (!v223)
        v202 = -1;
      *(_BYTE *)(v201 + 19) = v202;
      v203 = v247;
      __p = 0;
      v244 = 0;
      v204 = *(std::__shared_weak_count **)(v247 + 128);
      if (v204)
      {
        v204 = std::__shared_weak_count::lock(v204);
        v205 = v204;
        v244 = v204;
        if (v204)
        {
          v204 = *(std::__shared_weak_count **)(v203 + 120);
          __p = v204;
        }
      }
      else
      {
        v205 = 0;
      }
      v206 = (ImsPrefs *)SipStack::prefs((SipStack *)v204);
      v207 = (void **)ImsPrefs::getEnableDTXKey(v206);
      v208 = ImsPrefs::prefWithKey(v206, v207);
      if (v208)
        v209 = (*(uint64_t (**)(void *))(*(_QWORD *)v208 + 40))(v208);
      else
        v209 = *((_BYTE *)v207 + 57) != 0;
      *(_DWORD *)(*(_QWORD *)(a1 + 952) + 20) = v209;
      if (v205)
      {
        v210 = (unint64_t *)&v205->__shared_owners_;
        do
          v211 = __ldaxr(v210);
        while (__stlxr(v211 - 1, v210));
        if (!v211)
        {
          ((void (*)(std::__shared_weak_count *))v205->__on_zero_shared)(v205);
          std::__shared_weak_count::__release_weak(v205);
        }
      }
      v197 = 0;
    }
    v212 = *(_QWORD *)(a1 + 952);
    *(_DWORD *)(v212 + 64) = v197;
    *(_DWORD *)(v212 + 68) = v234;
    *(_BYTE *)(v212 + 72) = *(_BYTE *)(v164 + 28);
    *(_BYTE *)(v212 + 73) = *(_BYTE *)(v164 + 30);
    *(_DWORD *)(v212 + 76) = *(unsigned __int16 *)(v164 + 308);
    v213 = *(_QWORD *)(a1 + 920) + 48 * v238;
    v216 = *(unsigned __int8 *)(v213 + 40);
    v215 = (_BYTE *)(v213 + 40);
    v214 = v216;
    v217 = v215[1];
    if (v216 == 255)
    {
      *v215 = v217;
      v214 = v217;
    }
    if (v217 == 255)
      v215[1] = v214;
    v189 = 1;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v239, "");
    v187 = v229;
    v180 = v11;
    v188 = ims::debug((uint64_t)&__p, (uint64_t)v239);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v188 + 8), (uint64_t)"EVS codec not present in SDP media format", 41);
    *(_BYTE *)(v188 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v188 + 64))(v188, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v188 + 17) = 0;
    if (v240 < 0)
      operator delete(v239[0]);
    if (v245 < 0)
      operator delete(__p);
    v189 = 0;
  }
  v218 = *(unsigned __int16 *)(v180 + 306);
  if (v218 != 255)
    *(_BYTE *)(a1 + 541) = v218;
  *(_BYTE *)(a1 + 540) = *(_BYTE *)(v8 + 182);
  *(_BYTE *)(a1 + 612) = 1;
  *(_BYTE *)(a1 + 912) = v238;
  *(_BYTE *)(a1 + 944) = v189;
  if (v164)
  {
    v219 = *(_QWORD *)(v180 + 408);
  }
  else if (v187 | v235)
  {
    v219 = *(_QWORD *)(v180 + 352);
  }
  else
  {
    v219 = *(_QWORD *)(v180 + 48);
  }
  *(_QWORD *)(a1 + 1008) = v219;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v239, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v220 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v239);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v220 + 8), (uint64_t)"Saving AS Bandwidth from SDP Media format : ", 44);
  *(_BYTE *)(v220 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v220 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v220 + 64))(v220, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v220 + 17) = 0;
  if (v240 < 0)
    operator delete(v239[0]);
  if (v245 < 0)
    operator delete(__p);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  if (SHIBYTE(v246.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v246.__r_.__value_.__l.__data_);
LABEL_56:
  v36 = v242;
  if (v242)
  {
    v37 = (unint64_t *)&v242->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v7 = v248;
  if (v248)
  {
LABEL_62:
    v39 = (unint64_t *)&v7->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BEFF5390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v32 - 104);
  _Unwind_Resume(a1);
}

void IBISession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  *(_QWORD *)(a3 + 64) = 0;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  v4 = (std::__shared_weak_count *)a2[1];
  v12 = *a2;
  v13 = v4;
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 200))(a1, &v12);
  if (v13)
    std::__shared_weak_count::__release_weak(v13);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a3 + 8) + 24))(*(_QWORD *)(a3 + 8), *(unsigned int *)(a3 + 16)) & 1) == 0)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Generated configuration successfully", 36);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
    if (v11 < 0)
      operator delete(v10[0]);
  }
}

void sub_1BEFF5680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  ImsResult *v20;

  if (a20 < 0)
    operator delete(__p);
  ImsResult::~ImsResult(v20);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'IBISession::setConfiguration(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  IBISession::setConfiguration(a1 - 24, a2, a3);
}

uint64_t IBISession::configure(IBISession *this)
{
  (*(void (**)(IBISession *, uint64_t))(*(_QWORD *)this + 72))(this, 1);
  return 1;
}

uint64_t `non-virtual thunk to'IBISession::configure(IBISession *this)
{
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this - 3) + 72))((char *)this - 24, 1);
  return 1;
}

void IBISession::internalConfigure(IBISession *this, char a2)
{
  uint64_t v4;
  char *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[5];
  char *v13;
  std::__shared_weak_count *v14;
  _BYTE v15[72];
  void *v16[2];
  char v17;
  char *v18;
  std::__shared_weak_count *v19;
  char v20;

  std::string::basic_string[abi:ne180100]<0>(&v18, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v18, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Sending Configuration request", 29);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (v20 < 0)
    operator delete(v18);
  *((_BYTE *)this + 512) = a2;
  IBISessionHelper::sendConfigureRequest(*((IBISessionHelper **)this + 128), (uint64_t)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  RTPSharedPointerBase::getShared<IBISession>((void **)&v18, (uint64_t)this);
  v5 = v18 + 24;
  if (!v18)
    v5 = 0;
  v13 = v5;
  v14 = v19;
  v18 = 0;
  v19 = 0;
  v12[0] = MEMORY[0x1E0C809B0];
  v12[1] = 0x40000000;
  v12[2] = ___ZN10IBISession17internalConfigureEb_block_invoke;
  v12[3] = &__block_descriptor_tmp_48_0;
  v12[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)this + 24, 74566, (uint64_t *)&v13, v12);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v19;
  if (v19)
  {
    v10 = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEFF58F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 - 56);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10IBISession17internalConfigureEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74566);
}

void IBISession::configureMediaLinkMonitor(IBISession *this)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v1 = ImsLogger::debug(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v1 + 8), (uint64_t)"configureLinkMonitor is a No-Op for IBI session", 47);
  *(_BYTE *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v1 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1BEFF5A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'IBISession::configureMediaLinkMonitor(IBISession *this)
{
  IBISession::configureMediaLinkMonitor(this);
}

void IBISession::configureRemoteRTCP(IBISession *this, int a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  if (a2)
  {
    if (*((_BYTE *)this + 472))
    {
      v3 = 1;
      goto LABEL_9;
    }
    std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"RTCP reports are not allowed.", 29);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  v3 = 0;
LABEL_9:
  if (*((unsigned __int8 *)this + 519) == v3)
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"RTCP reports are already", 24);
    *(_BYTE *)(v5 + 17) = 0;
    if (v3)
      v6 = "Enabled";
    else
      v6 = "Disabled";
    if (v3)
      v7 = 7;
    else
      v7 = 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)v6, v7);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
  }
  else
  {
    *((_BYTE *)this + 519) = v3;
    std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"RTCP reports: ", 14);
    *(_BYTE *)(v8 + 17) = 0;
    if (v3)
      v9 = "Enabled";
    else
      v9 = "Disabled";
    if (v3)
      v10 = 7;
    else
      v10 = 8;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)v9, v10);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v12 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    if (*((_BYTE *)this + 514))
      (*(void (**)(IBISession *, _QWORD))(*(_QWORD *)this + 72))(this, 0);
  }
}

void sub_1BEFF5D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'IBISession::configureRemoteRTCP(IBISession *this, int a2)
{
  IBISession::configureRemoteRTCP((IBISession *)((char *)this - 24), a2);
}

uint64_t IBISession::terminate(IBISessionHelper **this)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[5];
  char *v12;
  std::__shared_weak_count *v13;
  _BYTE v14[72];
  void *v15[2];
  char v16;
  char *v17;
  std::__shared_weak_count *v18;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v17, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Sending TerminateMedia request", 30);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v16 < 0)
    operator delete(v15[0]);
  if (v19 < 0)
    operator delete(v17);
  IBISessionHelper::sendTerminateRequest(this[128], (uint64_t)v14);
  ImsResult::~ImsResult((ImsResult *)v14);
  std::__list_imp<unsigned long long>::clear(this + 61);
  RTPSharedPointerBase::getShared<IBISession>((void **)&v17, (uint64_t)this);
  v3 = v17 + 24;
  if (!v17)
    v3 = 0;
  v12 = v3;
  v13 = v18;
  v17 = 0;
  v18 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZN10IBISession9terminateEb_block_invoke;
  v11[3] = &__block_descriptor_tmp_56;
  v11[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)(this + 3), 74569, (uint64_t *)&v12, v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  return 1;
}

void sub_1BEFF5F18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 - 40);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10IBISession9terminateEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74569);
}

uint64_t `non-virtual thunk to'IBISession::terminate(IBISessionHelper **this)
{
  IBISession::terminate(this - 3);
  return 1;
}

uint64_t IBISession::start(IBISessionHelper **this)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[5];
  char *v12;
  std::__shared_weak_count *v13;
  _BYTE v14[72];
  void *v15[2];
  char v16;
  char *v17;
  std::__shared_weak_count *v18;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v17, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Sending StartMedia request", 26);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v16 < 0)
    operator delete(v15[0]);
  if (v19 < 0)
    operator delete(v17);
  IBISessionHelper::sendStartRequest(this[128], (uint64_t)v14);
  ImsResult::~ImsResult((ImsResult *)v14);
  RTPSharedPointerBase::getShared<IBISession>((void **)&v17, (uint64_t)this);
  v3 = v17 + 24;
  if (!v17)
    v3 = 0;
  v12 = v3;
  v13 = v18;
  v17 = 0;
  v18 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZN10IBISession5startEb_block_invoke;
  v11[3] = &__block_descriptor_tmp_58_0;
  v11[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)(this + 3), 74567, (uint64_t *)&v12, v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *((_WORD *)this + 257) = 257;
  return 1;
}

void sub_1BEFF6160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 - 40);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10IBISession5startEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74567);
}

uint64_t `non-virtual thunk to'IBISession::start(IBISessionHelper **this)
{
  IBISession::start(this - 3);
  return 1;
}

uint64_t IBISession::stop(IBISessionHelper **this)
{
  uint64_t v2;
  char *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD v11[5];
  char *v12;
  std::__shared_weak_count *v13;
  _BYTE v14[72];
  void *v15[2];
  char v16;
  char *v17;
  std::__shared_weak_count *v18;
  char v19;

  std::string::basic_string[abi:ne180100]<0>(&v17, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v15, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v17, (uint64_t)v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Sending StopMedia request", 25);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v16 < 0)
    operator delete(v15[0]);
  if (v19 < 0)
    operator delete(v17);
  IBISessionHelper::sendStopRequest(this[128], (uint64_t)v14);
  ImsResult::~ImsResult((ImsResult *)v14);
  std::__list_imp<unsigned long long>::clear(this + 61);
  RTPSharedPointerBase::getShared<IBISession>((void **)&v17, (uint64_t)this);
  v3 = v17 + 24;
  if (!v17)
    v3 = 0;
  v12 = v3;
  v13 = v18;
  v17 = 0;
  v18 = 0;
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 0x40000000;
  v11[2] = ___ZN10IBISession4stopEb_block_invoke;
  v11[3] = &__block_descriptor_tmp_60_0;
  v11[4] = this;
  MediaSessionDriver::startTimerForRequest((uint64_t)(this + 3), 74568, (uint64_t *)&v12, v11);
  v4 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v7 = v18;
  if (v18)
  {
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (!*((_BYTE *)this + 513))
    *((_BYTE *)this + 514) = 0;
  *((_BYTE *)this + 515) = 0;
  return 1;
}

void sub_1BEFF63B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  va_list va;

  va_start(va, a6);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6 - 40);
  _Unwind_Resume(a1);
}

uint64_t ___ZN10IBISession4stopEb_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74568);
}

uint64_t `non-virtual thunk to'IBISession::stop(IBISessionHelper **this)
{
  IBISession::stop(this - 3);
  return 1;
}

uint64_t IBISession::setDirection(uint64_t a1, unsigned int *a2)
{
  unsigned int *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int16 *v29;
  int v30;
  int v31;
  BOOL v32;
  unint64_t v33;
  int v34;
  _DWORD *v35;
  unsigned int v36;
  double v37;
  unsigned int v38;
  unsigned int v39;
  double v40;
  uint64_t v41;
  void *v43[2];
  char v44;
  void *v45;
  std::__shared_weak_count *v46;
  void *v47;
  std::__shared_weak_count *v48;
  void *__p[2];
  char v50;
  void *v51[2];
  char v52;
  void *v53;
  std::__shared_weak_count *v54;
  char v55;

  if (*(_BYTE *)(a1 + 514))
  {
    v4 = (unsigned int *)(a1 + 248);
    if (*(_DWORD *)(a1 + 248) == *a2)
    {
      std::string::basic_string[abi:ne180100]<0>(&v53, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v51, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v53, (uint64_t)v51);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"No change to current direction (", 32);
      *(_BYTE *)(v5 + 17) = 0;
      ims::toString<MediaDirection>(a2, __p);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 32))(v5, __p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      if (v50 < 0)
        operator delete(__p[0]);
      if (v52 < 0)
        operator delete(v51[0]);
      if (v55 < 0)
        operator delete(v53);
      v53 = 0;
      v54 = 0;
      v6 = *(std::__shared_weak_count **)(a1 + 40);
      if (v6)
      {
        v54 = std::__shared_weak_count::lock(v6);
        if (v54)
        {
          v7 = *(void **)(a1 + 32);
          v53 = v7;
          if (v7)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v45);
            (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v7 + 24))(v7, &v45, 0);
            v8 = v46;
            if (v46)
            {
              p_shared_owners = (unint64_t *)&v46->__shared_owners_;
              do
                v10 = __ldaxr(p_shared_owners);
              while (__stlxr(v10 - 1, p_shared_owners));
              if (!v10)
              {
                ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
                std::__shared_weak_count::__release_weak(v8);
              }
            }
          }
        }
      }
      v11 = v54;
      if (v54)
      {
        v12 = (unint64_t *)&v54->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        goto LABEL_38;
      }
      return 1;
    }
    std::string::basic_string[abi:ne180100]<0>(&v53, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v51, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v21 = ImsLogger::debug(ims::_logger, (uint64_t)&v53, (uint64_t)v51);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Updating direction from ", 24);
    *(_BYTE *)(v21 + 17) = 0;
    ims::toString<MediaDirection>((unsigned int *)(a1 + 248), __p);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 32))(v21, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v21 + 17) = 0;
    ims::toString<MediaDirection>(a2, v43);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v21 + 32))(v21, v43);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    if (v44 < 0)
      operator delete(v43[0]);
    if (v50 < 0)
      operator delete(__p[0]);
    if (v52 < 0)
      operator delete(v51[0]);
    if (v55 < 0)
      operator delete(v53);
    v22 = *a2;
    *v4 = *a2;
    v23 = *a2;
    if (*a2 == 1)
    {
      v25 = 0;
    }
    else
    {
      if (v23 == 3)
      {
        std::string::basic_string[abi:ne180100]<0>(&v53, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(v51, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v24 = ImsLogger::warn(ims::_logger, (uint64_t)&v53, (uint64_t)v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"We don't support send only, defaulting to inactive", 50);
        *(_BYTE *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v24 + 17) = 0;
        if (v52 < 0)
          operator delete(v51[0]);
        if (v55 < 0)
          operator delete(v53);
        v22 = 4;
        *v4 = 4;
      }
      v23 = 0;
      v25 = 1;
    }
    *(_BYTE *)(a1 + 513) = v25;
    v26 = *(unsigned __int8 *)(a1 + 463);
    if (v22 == 2)
    {
      v27 = *(_QWORD *)(a1 + 448);
      if ((v26 & 0x80u) == 0)
        v28 = *(unsigned __int8 *)(a1 + 463);
      else
        v28 = *(_QWORD *)(a1 + 448);
      if (v28 == 3)
      {
        v29 = (v26 & 0x80u) == 0 ? (unsigned __int16 *)(a1 + 440) : *(unsigned __int16 **)(a1 + 440);
        v30 = *v29;
        v31 = *((unsigned __int8 *)v29 + 2);
        v32 = v30 == 21586 && v31 == 80;
        if (v32)
        {
          LODWORD(v33) = 0;
          *(_DWORD *)(a1 + 604) = *(unsigned __int16 *)(a1 + 436);
          *(_DWORD *)(a1 + 608) = -1;
          goto LABEL_83;
        }
      }
    }
    else
    {
      v27 = *(_QWORD *)(a1 + 448);
    }
    v34 = (char)v26;
    if ((v26 & 0x80u) != 0)
      v26 = v27;
    if (v26 == 4)
    {
      v35 = (_DWORD *)(a1 + 440);
      if (v34 < 0)
        v35 = *(_DWORD **)(a1 + 440);
      if (*v35 == 1346589778)
      {
        *(_DWORD *)(a1 + 604) = -1;
        v38 = *(unsigned __int16 *)(a1 + 438);
        *(_DWORD *)(a1 + 608) = v38;
        v39 = *(unsigned __int16 *)(a1 + 436);
        if (v38 < v39)
          *(_DWORD *)(a1 + 608) = v39;
        v40 = (double)*(unint64_t *)(a1 + 1008);
        *(_DWORD *)(a1 + 892) = (unint64_t)(v40 * 37.5);
        v33 = (unint64_t)(v40 * 12.5);
        goto LABEL_87;
      }
    }
    v36 = *(unsigned __int16 *)(a1 + 436);
    *(_DWORD *)(a1 + 604) = v36;
    if (*(unsigned __int16 *)(a1 + 438) > v36)
      v36 = *(unsigned __int16 *)(a1 + 438);
    *(_DWORD *)(a1 + 608) = v36;
    if (!v23 || (LODWORD(v33) = *(_DWORD *)(a1 + 424), (_DWORD)v33))
    {
      v37 = (double)*(unint64_t *)(a1 + 1008);
      *(_DWORD *)(a1 + 892) = (unint64_t)(v37 * 37.5);
      v33 = (unint64_t)(v37 * 12.5);
LABEL_87:
      *(_DWORD *)(a1 + 888) = v33;
      v32 = v23 == 0;
      v41 = 428;
      if (!v32)
        v41 = 424;
      *(_DWORD *)(a1 + 880) = *(_DWORD *)(a1 + v41);
      *(_DWORD *)(a1 + 532) = v22;
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 72))(a1, 0);
      return 1;
    }
LABEL_83:
    *(_DWORD *)(a1 + 892) = 0;
    goto LABEL_87;
  }
  std::string::basic_string[abi:ne180100]<0>(&v53, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(v51, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v53, (uint64_t)v51);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Setting initial direction to ", 29);
  *(_BYTE *)(v14 + 17) = 0;
  ims::toString<MediaDirection>(a2, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v14 + 32))(v14, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (v50 < 0)
    operator delete(__p[0]);
  if (v52 < 0)
    operator delete(v51[0]);
  if (v55 < 0)
    operator delete(v53);
  *(_DWORD *)(a1 + 248) = *a2;
  v53 = 0;
  v54 = 0;
  v15 = *(std::__shared_weak_count **)(a1 + 40);
  if (v15)
  {
    v54 = std::__shared_weak_count::lock(v15);
    if (v54)
    {
      v16 = *(void **)(a1 + 32);
      v53 = v16;
      if (v16)
      {
        RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v47);
        (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v16 + 32))(v16, &v47, 0);
        v17 = v48;
        if (v48)
        {
          v18 = (unint64_t *)&v48->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
  v11 = v54;
  if (v54)
  {
    v20 = (unint64_t *)&v54->__shared_owners_;
    do
      v13 = __ldaxr(v20);
    while (__stlxr(v13 - 1, v20));
LABEL_38:
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  return 1;
}

void sub_1BEFF6B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 72);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'IBISession::setDirection(uint64_t a1, unsigned int *a2)
{
  IBISession::setDirection(a1 - 24, a2);
  return 1;
}

double IBISession::startSendingDTMF@<D0>(IBISession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  double result;
  _BYTE v10[72];
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(v13, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"startSendingDTMF: queuing up digit ", 35);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  v7 = operator new(0x18uLL);
  v7[16] = a2;
  v8 = *((_QWORD *)this + 61);
  *(_QWORD *)v7 = v8;
  *((_QWORD *)v7 + 1) = (char *)this + 488;
  *(_QWORD *)(v8 + 8) = v7;
  *((_QWORD *)this + 61) = v7;
  ++*((_QWORD *)this + 63);
  if (!*((_BYTE *)this + 481))
  {
    IBISession::startDTMFDigit((IBISession *)v10, (uint64_t)this);
    ImsResult::~ImsResult((ImsResult *)v10);
  }
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

void sub_1BEFF6D44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void IBISession::startDTMFDigit(IBISession *this, uint64_t a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[5];
  char *v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  char *v21;
  std::__shared_weak_count *v22;
  char v23;

  if (*(_QWORD *)(a2 + 504))
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Sending DTMF digit : ", 21);
    *(_BYTE *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v21);
    *((_QWORD *)this + 8) = 0;
    *((_OWORD *)this + 2) = 0u;
    *((_OWORD *)this + 3) = 0u;
    *(_OWORD *)this = 0u;
    *((_OWORD *)this + 1) = 0u;
    IBISessionHelper::sendStartDTMFDigitRequest(*(IBISessionHelper **)(a2 + 1024), *(unsigned __int8 *)(*(_QWORD *)(a2 + 496) + 16), (uint64_t)this);
    v5 = *(uint64_t **)(a2 + 496);
    v6 = *v5;
    *(_QWORD *)(v6 + 8) = v5[1];
    *(_QWORD *)v5[1] = v6;
    --*(_QWORD *)(a2 + 504);
    operator delete(v5);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), *((unsigned int *)this + 4)) & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(&v21, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::error(ims::_logger, (uint64_t)&v21, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to send digit", 20);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v20 < 0)
        operator delete(__p[0]);
      if (v23 < 0)
        operator delete(v21);
      std::__list_imp<unsigned long long>::clear((_QWORD *)(a2 + 488));
    }
    else
    {
      RTPSharedPointerBase::getShared<IBISession>((void **)&v21, a2);
      v9 = v21 + 24;
      if (!v21)
        v9 = 0;
      v17 = v9;
      v18 = v22;
      v21 = 0;
      v22 = 0;
      v16[0] = MEMORY[0x1E0C809B0];
      v16[1] = 0x40000000;
      v16[2] = ___ZN10IBISession14startDTMFDigitEv_block_invoke;
      v16[3] = &__block_descriptor_tmp_70;
      v16[4] = a2;
      MediaSessionDriver::startTimerForRequest(a2 + 24, 74570, (uint64_t *)&v17, v16);
      v10 = v18;
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
          std::__shared_weak_count::__release_weak(v10);
        }
      }
      v13 = v22;
      if (v22)
      {
        v14 = (unint64_t *)&v22->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *(_BYTE *)(a2 + 481) = 1;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"DTMF queue is empty, nothing to send", 36);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v21);
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
  }
}

void sub_1BEFF7120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  ImsResult *v22;
  uint64_t v23;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 56);
  ImsResult::~ImsResult(v22);
  _Unwind_Resume(a1);
}

double `non-virtual thunk to'IBISession::startSendingDTMF@<D0>(IBISession *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  return IBISession::startSendingDTMF((IBISession *)((char *)this - 24), a2, a3);
}

uint64_t ___ZN10IBISession14startDTMFDigitEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74570);
}

double IBISession::stopSendingDTMF@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stopSendingDTMF is a No-Op", 26);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 0;
  return result;
}

void sub_1BEFF72C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN10IBISession13stopDTMFDigitEv_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 168))(*(_QWORD *)(a1 + 32), 74571);
}

double IBISession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 *v4;
  unsigned __int8 *v5;
  unsigned int v7;
  double result;
  _QWORD v9[9];

  v4 = *a2;
  v5 = a2[1];
  if (*a2 != v5)
  {
    do
    {
      v7 = *v4++;
      (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 128))(v9, a1, v7);
      ImsResult::~ImsResult((ImsResult *)v9);
    }
    while (v4 != v5);
  }
  result = 0.0;
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 40) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  return result;
}

double `non-virtual thunk to'IBISession::sendDTMFDigits@<D0>(uint64_t a1@<X0>, unsigned __int8 **a2@<X1>, uint64_t a3@<X8>)
{
  return IBISession::sendDTMFDigits(a1 - 24, a2, a3);
}

void IBISession::handleMediaError(IBISession *this, int a2, int a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  std::__shared_weak_count *v13;
  void *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  void *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  void *v27;
  std::__shared_weak_count *v28;
  void *v29;
  std::__shared_weak_count *v30;
  void *v31[2];
  char v32;
  void *__p[2];
  char v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;

  std::string::basic_string[abi:ne180100]<0>(&v35, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v35, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Media timeout for session(", 26);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)") : ", 4);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"RTP: ", 5);
  *(_BYTE *)(v6 + 17) = 0;
  if (a2)
    v7 = "true";
  else
    v7 = "false";
  if (a2)
    v8 = 4;
  else
    v8 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", RTCP: ", 8);
  *(_BYTE *)(v6 + 17) = 0;
  if (a3)
    v9 = "true";
  else
    v9 = "false";
  if (a3)
    v10 = 4;
  else
    v10 = 5;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v9, v10);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v34 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v35);
  std::string::basic_string[abi:ne180100]<0>(&v35, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v11 = ImsLogger::debug(ims::_logger, (uint64_t)&v35, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Session direction is ", 21);
  *(_BYTE *)(v11 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 62, v31);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, v31);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(__p[0]);
  if (v37 < 0)
    operator delete(v35);
  v12 = *((_DWORD *)this + 62);
  if (v12 == 1 && a2)
  {
    v35 = 0;
    v36 = 0;
    v13 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (v13)
    {
      v36 = std::__shared_weak_count::lock(v13);
      if (v36)
      {
        v14 = (void *)*((_QWORD *)this + 4);
        v35 = v14;
        if (v14)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v29);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v14 + 40))(v14, &v29, 5);
          v15 = v30;
          if (v30)
          {
            p_shared_owners = (unint64_t *)&v30->__shared_owners_;
            do
              v17 = __ldaxr(p_shared_owners);
            while (__stlxr(v17 - 1, p_shared_owners));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
        }
      }
    }
    v18 = v36;
    if (v36)
    {
      v19 = (unint64_t *)&v36->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
LABEL_50:
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (v12 != 1 && a3)
  {
    v35 = 0;
    v36 = 0;
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (v21)
    {
      v36 = std::__shared_weak_count::lock(v21);
      if (v36)
      {
        v22 = (void *)*((_QWORD *)this + 4);
        v35 = v22;
        if (v22)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v27);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v22 + 40))(v22, &v27, 6);
          v23 = v28;
          if (v28)
          {
            v24 = (unint64_t *)&v28->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
              std::__shared_weak_count::__release_weak(v23);
            }
          }
        }
      }
    }
    v18 = v36;
    if (v36)
    {
      v26 = (unint64_t *)&v36->__shared_owners_;
      do
        v20 = __ldaxr(v26);
      while (__stlxr(v20 - 1, v26));
      goto LABEL_50;
    }
  }
}

void sub_1BEFF7774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void IBISession::handleStartMediaResponse(uint64_t **this, int a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  void *v26;
  std::__shared_weak_count *v27;
  void *v28;
  std::__shared_weak_count *v29;
  void *__p[2];
  char v31;
  void *v32;
  std::__shared_weak_count *v33;
  char v34;

  MediaSessionDriver::cancelTimerForRequest(this + 3, 74567);
  if (a2 || *((_DWORD *)this + 119) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v16 = ImsLogger::error(ims::_logger, (uint64_t)&v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Failed to start media session : ", 32);
    *(_BYTE *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
      operator delete(v32);
    v17 = this[7][37];
    if (v17)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v17 + 120), 7);
    v32 = 0;
    v33 = 0;
    v18 = (std::__shared_weak_count *)this[5];
    if (v18)
    {
      v33 = std::__shared_weak_count::lock(v18);
      if (v33)
      {
        v19 = this[4];
        v32 = v19;
        if (v19)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v26);
          (*(void (**)(uint64_t *, void **, uint64_t))(*v19 + 24))(v19, &v26, 9);
          v20 = v27;
          if (v27)
          {
            p_shared_owners = (unint64_t *)&v27->__shared_owners_;
            do
              v22 = __ldaxr(p_shared_owners);
            while (__stlxr(v22 - 1, p_shared_owners));
            if (!v22)
            {
              ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
              std::__shared_weak_count::__release_weak(v20);
            }
          }
        }
      }
    }
    v23 = v33;
    if (v33)
    {
      v24 = (unint64_t *)&v33->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v32, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v32, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Media session started successfully, session id : ", 49);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v31 < 0)
      operator delete(__p[0]);
    if (v34 < 0)
      operator delete(v32);
    v32 = 0;
    v33 = 0;
    v7 = (std::__shared_weak_count *)this[5];
    if (v7)
    {
      v33 = std::__shared_weak_count::lock(v7);
      if (v33)
      {
        v8 = this[4];
        v32 = v8;
        if (v8)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v28);
          (*(void (**)(uint64_t *, void **, _QWORD))(*v8 + 24))(v8, &v28, 0);
          v9 = v29;
          if (v29)
          {
            v10 = (unint64_t *)&v29->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
    }
    v12 = v33;
    if (v33)
    {
      v13 = (unint64_t *)&v33->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (*((_DWORD *)this + 62) == 4 && *((_BYTE *)this + 515))
    {
      std::string::basic_string[abi:ne180100]<0>(&v32, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v15 = ImsLogger::debug(ims::_logger, (uint64_t)&v32, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Direction is inactive, a held call getting handed over. De-activate media", 73);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
      if (v31 < 0)
        operator delete(__p[0]);
      if (v34 < 0)
        operator delete(v32);
      *((_BYTE *)this + 517) = 1;
      ((void (*)(uint64_t **, _QWORD))(*this)[5])(this, 0);
    }
  }
}

void sub_1BEFF7C08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void IBISession::handleStopMediaResponse(uint64_t **this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  std::__shared_weak_count *v35;
  uint64_t *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  std::__shared_weak_count *v40;
  void *v41;
  std::__shared_weak_count *v42;
  void *v43[2];
  void *v44;
  std::__shared_weak_count *v45;
  void *__p[2];
  char v47;
  uint64_t *v48;
  std::__shared_weak_count *v49;
  char v50;

  MediaSessionDriver::cancelTimerForRequest(this + 3, 74568);
  if (a2 || *((_DWORD *)this + 119) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v48, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::error(ims::_logger, (uint64_t)&v48, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to stop media session : ", 31);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v47 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v48);
    v8 = this[7][37];
    if (*((_BYTE *)this + 513))
    {
      if (v8)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v8 + 120), 9);
      v48 = 0;
      v49 = 0;
      v9 = (std::__shared_weak_count *)this[5];
      if (v9)
      {
        v49 = std::__shared_weak_count::lock(v9);
        if (v49)
        {
          v10 = this[4];
          v48 = v10;
          if (v10)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v41);
            (*(void (**)(uint64_t *, void **, uint64_t))(*v10 + 24))(v10, &v41, 9);
            v11 = v42;
            if (v42)
            {
              p_shared_owners = (unint64_t *)&v42->__shared_owners_;
              do
                v13 = __ldaxr(p_shared_owners);
              while (__stlxr(v13 - 1, p_shared_owners));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
          }
        }
      }
      v14 = v49;
      if (!v49)
        goto LABEL_29;
      v15 = (unint64_t *)&v49->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      goto LABEL_27;
    }
    if (v8)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v8 + 120), 8);
    v48 = 0;
    v49 = 0;
    v17 = (std::__shared_weak_count *)this[5];
    if (v17)
    {
      v49 = std::__shared_weak_count::lock(v17);
      if (v49)
      {
        v18 = this[4];
        v48 = v18;
        if (v18)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v39);
          (*(void (**)(uint64_t *, void **, uint64_t))(*v18 + 32))(v18, &v39, 9);
          v19 = v40;
          if (v40)
          {
            v20 = (unint64_t *)&v40->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
    }
    v22 = v49;
    if (v49)
    {
      v23 = (unint64_t *)&v49->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        v25 = v22;
LABEL_46:
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
  else
  {
    if (*((_BYTE *)this + 517))
    {
      std::string::basic_string[abi:ne180100]<0>(&v48, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v48, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Held session handover complete. Media stopped, but not reporting it to state machine. Session ID : ", 99);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
      if (v47 < 0)
        operator delete(__p[0]);
      if (v50 < 0)
        operator delete(v48);
      *((_BYTE *)this + 517) = 0;
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v48, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v48, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Media session stopped successfully, session id : ", 49);
    *(_BYTE *)(v26 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v26 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (v47 < 0)
      operator delete(__p[0]);
    if (v50 < 0)
      operator delete(v48);
    if (*((_BYTE *)this + 513))
    {
      v48 = 0;
      v49 = 0;
      v27 = (std::__shared_weak_count *)this[5];
      if (v27)
      {
        v49 = std::__shared_weak_count::lock(v27);
        if (v49)
        {
          v28 = this[4];
          v48 = v28;
          if (v28)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v44);
            (*(void (**)(uint64_t *, void **, _QWORD))(*v28 + 24))(v28, &v44, 0);
            v29 = v45;
            if (v45)
            {
              v30 = (unint64_t *)&v45->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
                std::__shared_weak_count::__release_weak(v29);
              }
            }
          }
        }
      }
      v14 = v49;
      if (!v49)
        goto LABEL_29;
      v32 = (unint64_t *)&v49->__shared_owners_;
      do
        v16 = __ldaxr(v32);
      while (__stlxr(v16 - 1, v32));
LABEL_27:
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
LABEL_29:
      *((_BYTE *)this + 513) = 0;
      return;
    }
    v33 = (std::__shared_weak_count *)this[5];
    if (v33)
    {
      v34 = std::__shared_weak_count::lock(v33);
      v49 = v34;
      if (v34)
      {
        v35 = v34;
        v36 = this[4];
        v48 = v36;
        if (v36)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, v43);
          (*(void (**)(uint64_t *, void **, _QWORD))(*v36 + 32))(v36, v43, 0);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v43);
        }
        v37 = (unint64_t *)&v35->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
          v25 = v35;
          goto LABEL_46;
        }
      }
    }
  }
}

void sub_1BEFF81C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 56);
  _Unwind_Resume(a1);
}

void IBISession::handleTerminateMediaSessionResponse(IBISession *this, int a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  void *v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  void *v29;
  std::__shared_weak_count *v30;
  char v31;

  MediaSessionDriver::cancelTimerForRequest((uint64_t **)this + 3, 74569);
  if (a2 || *((_DWORD *)this + 119) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::error(ims::_logger, (uint64_t)&v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Failed to terminate media session : ", 36);
    *(_BYTE *)(v15 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v28 < 0)
      operator delete(__p[0]);
    if (v31 < 0)
      operator delete(v29);
    v16 = *(_QWORD *)(*((_QWORD *)this + 7) + 296);
    if (v16)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v16 + 120), 5);
    v29 = 0;
    v30 = 0;
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (v17)
    {
      v30 = std::__shared_weak_count::lock(v17);
      if (v30)
      {
        v18 = (void *)*((_QWORD *)this + 4);
        v29 = v18;
        if (v18)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v23);
          (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v18 + 8))(v18, &v23, 9);
          v19 = v24;
          if (v24)
          {
            p_shared_owners = (unint64_t *)&v24->__shared_owners_;
            do
              v21 = __ldaxr(p_shared_owners);
            while (__stlxr(v21 - 1, p_shared_owners));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
              std::__shared_weak_count::__release_weak(v19);
            }
          }
        }
      }
    }
    v12 = v30;
    if (v30)
    {
      v22 = (unint64_t *)&v30->__shared_owners_;
      do
        v14 = __ldaxr(v22);
      while (__stlxr(v14 - 1, v22));
LABEL_36:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v29, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Media session terminated successfully, session id : ", 52);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v28 < 0)
      operator delete(__p[0]);
    if (v31 < 0)
      operator delete(v29);
    v29 = 0;
    v30 = 0;
    v7 = (std::__shared_weak_count *)*((_QWORD *)this + 5);
    if (v7)
    {
      v30 = std::__shared_weak_count::lock(v7);
      if (v30)
      {
        v8 = (void *)*((_QWORD *)this + 4);
        v29 = v8;
        if (v8)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v25);
          (*(void (**)(void *, void **, _QWORD))(*(_QWORD *)v8 + 8))(v8, &v25, 0);
          v9 = v26;
          if (v26)
          {
            v10 = (unint64_t *)&v26->__shared_owners_;
            do
              v11 = __ldaxr(v10);
            while (__stlxr(v11 - 1, v10));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
        }
      }
    }
    v12 = v30;
    if (v30)
    {
      v13 = (unint64_t *)&v30->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      goto LABEL_36;
    }
  }
  IBIRTPStackController::removeSession(*((IBIRTPStackController **)this + 130), *((_DWORD *)this + 119));
  IBISession::cleanup(this, 0);
}

void sub_1BEFF8590(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void IBISession::cleanup(IBISession *this, int a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BYTE v8[72];
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;

  if (*((_BYTE *)this + 518))
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Session already cleaned up.", 27);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
    return;
  }
  *((_BYTE *)this + 518) = 1;
  std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Cancelling all timers and clearing dtmf queue.", 46);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
  {
    operator delete(v11[0]);
    if (!a2)
      goto LABEL_11;
    goto LABEL_10;
  }
  if (a2)
LABEL_10:
    (*(void (**)(IBISession *, _QWORD))(*(_QWORD *)this + 24))(this, 0);
LABEL_11:
  MediaSessionDriver::cancelAllTimers((void ***)this + 3);
  std::__list_imp<unsigned long long>::clear((_QWORD *)this + 61);
  if (!IBISession::_count)
    goto LABEL_28;
  --IBISession::_count;
  std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Session cleaned up. Number of sessions = ", 41);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v10 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v11[0]);
  if (!IBISession::_count)
  {
LABEL_28:
    if (IBISession::_activeAudio || !*((_BYTE *)this + 516))
    {
      std::string::basic_string[abi:ne180100]<0>(v11, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Send CallEnd event to Audio device", 34);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v10 < 0)
        operator delete(__p[0]);
      if (v12 < 0)
        operator delete(v11[0]);
      IBIRTPStackController::sendAudioCallEvent(*((_QWORD **)this + 130), 1, (uint64_t)v8);
      ImsResult::~ImsResult((ImsResult *)v8);
      IBISession::_activeAudio = 0;
    }
  }
}

void sub_1BEFF8948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void IBISession::handleStartDTMFCodeResponse(IBISession *this, int a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  dispatch_time_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD block[6];
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;
  void *v23;
  std::__shared_weak_count *v24;
  char v25;

  MediaSessionDriver::cancelTimerForRequest((uint64_t **)this + 3, 74570);
  if (a2 || *((_DWORD *)this + 119) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Failed to start DTMF digit send : ", 34);
    *(_BYTE *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v23);
    v18 = *(_QWORD *)(*((_QWORD *)this + 7) + 296);
    if (v18)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 15);
    std::__list_imp<unsigned long long>::clear((_QWORD *)this + 61);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Started sending DTMF digit, session id : ", 41);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v23);
    RTPSharedPointerBase::getShared<IBISession>(&v23, (uint64_t)this);
    v8 = v23;
    v7 = v24;
    if (v24)
    {
      p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v13 = dispatch_time(0, 1000000 * *((unsigned __int8 *)this + 465));
    v14 = *((_QWORD *)this + 9);
    if (v14)
      dispatch_retain(*((dispatch_object_t *)this + 9));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN10IBISession27handleStartDTMFCodeResponseEjj_block_invoke;
    block[3] = &__block_descriptor_tmp_91_0;
    block[4] = this;
    block[5] = v8;
    v20 = v7;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    dispatch_after(v13, v14, block);
    if (v14)
      dispatch_release(v14);
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1BEFF8C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(exception_object);
}

void ___ZN10IBISession27handleStartDTMFCodeResponseEjj_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  void *__p[2];
  uint64_t (*v25)(uint64_t);
  void *v26;
  uint64_t v27;
  char *v28;
  std::__shared_weak_count *v29;
  void *v30;
  std::__shared_weak_count *v31;
  char v32;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v23 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(&v30, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v30);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"stopDTMFDigit", 13);
        *(_BYTE *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v6 + 17) = 0;
        if (v32 < 0)
          operator delete(v30);
        if (SHIBYTE(v25) < 0)
          operator delete(__p[0]);
        v17 = 0u;
        v18 = 0u;
        v19 = 0u;
        v20 = 0u;
        v21 = 0;
        IBISessionHelper::sendStopDTMFDigitRequest(*(IBISessionHelper **)(v3 + 1024), (uint64_t)&v17);
        if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v17 + 1) + 24))(*((_QWORD *)&v17 + 1), v18) & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(&v30, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v30);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Failed to send digit", 20);
          *(_BYTE *)(v7 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v7 + 17) = 0;
          if (v32 < 0)
            operator delete(v30);
          if (SHIBYTE(v25) < 0)
            operator delete(__p[0]);
          std::__list_imp<unsigned long long>::clear((_QWORD *)(v3 + 488));
        }
        else
        {
          RTPSharedPointerBase::getShared<IBISession>((void **)&v28, v3);
          v8 = v28 + 24;
          if (!v28)
            v8 = 0;
          v30 = v8;
          v31 = v29;
          v28 = 0;
          v29 = 0;
          __p[0] = (void *)MEMORY[0x1E0C809B0];
          __p[1] = (void *)0x40000000;
          v25 = ___ZN10IBISession13stopDTMFDigitEv_block_invoke;
          v26 = &__block_descriptor_tmp_74_0;
          v27 = v3;
          MediaSessionDriver::startTimerForRequest(v3 + 24, 74571, (uint64_t *)&v30, __p);
          v9 = v31;
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v11 = __ldaxr(p_shared_owners);
            while (__stlxr(v11 - 1, p_shared_owners));
            if (!v11)
            {
              ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
              std::__shared_weak_count::__release_weak(v9);
            }
          }
          v12 = v29;
          if (v29)
          {
            v13 = (unint64_t *)&v29->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
        }
        ImsResult::~ImsResult((ImsResult *)&v17);
      }
      v15 = (unint64_t *)&v5->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFF8F98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26 - 56);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26 - 72);
  ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10IBISessionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 48) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_40c35_ZTSNSt3__18weak_ptrI10IBISessionEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void IBISession::handleStopDTMFCodeResponse(IBISession *this, int a2, int a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  void *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  dispatch_time_t v13;
  NSObject *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD block[6];
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;
  void *v23;
  std::__shared_weak_count *v24;
  char v25;

  MediaSessionDriver::cancelTimerForRequest((uint64_t **)this + 3, 74571);
  if (a2 || *((_DWORD *)this + 119) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Failed to stop DTMF digit : ", 28);
    *(_BYTE *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v23);
    v18 = *(_QWORD *)(*((_QWORD *)this + 7) + 296);
    if (v18)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 16);
    std::__list_imp<unsigned long long>::clear((_QWORD *)this + 61);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v23, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Stopped sending DTMF digit, session id : ", 41);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v23);
    RTPSharedPointerBase::getShared<IBISession>(&v23, (uint64_t)this);
    v8 = v23;
    v7 = v24;
    if (v24)
    {
      p_shared_weak_owners = (unint64_t *)&v24->__shared_weak_owners_;
      do
        v10 = __ldxr(p_shared_weak_owners);
      while (__stxr(v10 + 1, p_shared_weak_owners));
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    v13 = dispatch_time(0, 1000000 * *((unsigned int *)this + 117));
    v14 = *((_QWORD *)this + 9);
    if (v14)
      dispatch_retain(*((dispatch_object_t *)this + 9));
    block[0] = MEMORY[0x1E0C809B0];
    block[1] = 1174405120;
    block[2] = ___ZN10IBISession26handleStopDTMFCodeResponseEjj_block_invoke;
    block[3] = &__block_descriptor_tmp_94_0;
    block[4] = this;
    block[5] = v8;
    v20 = v7;
    if (v7)
    {
      v15 = (unint64_t *)&v7->__shared_weak_owners_;
      do
        v16 = __ldxr(v15);
      while (__stxr(v16 + 1, v15));
    }
    dispatch_after(v13, v14, block);
    if (v14)
      dispatch_release(v14);
    if (v20)
      std::__shared_weak_count::__release_weak(v20);
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
}

void sub_1BEFF9354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(exception_object);
}

void ___ZN10IBISession26handleStopDTMFCodeResponseEjj_block_invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE v8[72];
  std::__shared_weak_count *v10;

  v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    v3 = a1[4];
    v4 = std::__shared_weak_count::lock(v2);
    v10 = v4;
    if (v4)
    {
      v5 = v4;
      if (a1[5])
      {
        *(_BYTE *)(v3 + 481) = 0;
        IBISession::startDTMFDigit((IBISession *)v8, v3);
        ImsResult::~ImsResult((ImsResult *)v8);
      }
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEFF942C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void IBISession::handleCreateAudioMediaSessionResponse(uint64_t **this, int a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  void (***v9)(void *, void **, uint64_t);
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  ImsResult *v18;
  _BYTE *v19;
  __int16 v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t *v31;
  std::__shared_weak_count *v32;
  uint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  void *v38;
  std::__shared_weak_count *v39;
  void *v40;
  std::__shared_weak_count *v41;
  void *v42;
  std::__shared_weak_count *v43;
  void *v44;
  std::__shared_weak_count *v45;
  _BYTE v46[72];
  _BYTE v47[72];
  void *v48[2];
  char v49;
  uint64_t *v50;
  std::__shared_weak_count *v51;
  char v52;

  MediaSessionDriver::cancelTimerForRequest(this + 3, 74565);
  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v48, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)&v50, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Failed to create media session : ", 33);
    *(_BYTE *)(v6 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v49 < 0)
      operator delete(v48[0]);
    if (v52 < 0)
      operator delete(v50);
    v7 = this[7][37];
    if (v7)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v7 + 120), 4);
    IBISession::cleanup((IBISession *)this, 0);
    v50 = 0;
    v51 = 0;
    v8 = (std::__shared_weak_count *)this[5];
    if (v8)
    {
      v51 = std::__shared_weak_count::lock(v8);
      if (v51)
      {
        v9 = (void (***)(void *, void **, uint64_t))this[4];
        v50 = (uint64_t *)v9;
        if (v9)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v38);
          (**v9)(v9, &v38, 8);
          v10 = v39;
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
              std::__shared_weak_count::__release_weak(v10);
            }
          }
        }
      }
    }
    v13 = v51;
    if (v51)
    {
      v14 = (unint64_t *)&v51->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
LABEL_66:
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v50, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(v48, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v16 = ImsLogger::debug(ims::_logger, (uint64_t)&v50, (uint64_t)v48);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"Created media session successfully, session id : ", 49);
    *(_BYTE *)(v16 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v49 < 0)
      operator delete(v48[0]);
    if (v52 < 0)
      operator delete(v50);
    *((_DWORD *)this + 119) = a3;
    if (!IBISession::_activeAudio)
    {
      std::string::basic_string[abi:ne180100]<0>(&v50, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::debug(ims::_logger, (uint64_t)&v50, (uint64_t)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Send event to Audio device", 26);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v49 < 0)
        operator delete(v48[0]);
      if (v52 < 0)
        operator delete(v50);
      if (*((_BYTE *)this + 516))
      {
        v18 = (ImsResult *)v47;
        v19 = v47;
        v20 = 0;
      }
      else
      {
        v18 = (ImsResult *)v46;
        v19 = v46;
        v20 = 3;
      }
      IBIRTPStackController::sendAudioCallEvent(this[130], v20, (uint64_t)v19);
      ImsResult::~ImsResult(v18);
      IBISession::_activeAudio = 1;
      a3 = *((_DWORD *)this + 119);
    }
    v21 = (uint64_t)this[130];
    RTPSharedPointerBase::getShared<IBISession>(&v44, (uint64_t)this);
    IBIRTPStackController::addSession(v21, a3, (uint64_t *)&v44);
    v22 = v45;
    if (v45)
    {
      v23 = (unint64_t *)&v45->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    if (*((_BYTE *)this + 568))
    {
      std::string::basic_string[abi:ne180100]<0>(&v50, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v25 = ImsLogger::debug(ims::_logger, (uint64_t)&v50, (uint64_t)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"We have both local and remote SDP, send MediaConfigured", 55);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      if (v49 < 0)
        operator delete(v48[0]);
      if (v52 < 0)
        operator delete(v50);
      v50 = 0;
      v51 = 0;
      v26 = (std::__shared_weak_count *)this[5];
      if (v26)
      {
        v51 = std::__shared_weak_count::lock(v26);
        if (v51)
        {
          v27 = this[4];
          v50 = v27;
          if (v27)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v42);
            (*(void (**)(uint64_t *, void **, _QWORD))(*v27 + 16))(v27, &v42, 0);
            v28 = v43;
            if (v43)
            {
              v29 = (unint64_t *)&v43->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
          }
        }
      }
      v13 = v51;
      if (v51)
      {
        v31 = (unint64_t *)&v51->__shared_owners_;
        do
          v15 = __ldaxr(v31);
        while (__stlxr(v15 - 1, v31));
        goto LABEL_66;
      }
    }
    else
    {
      v50 = 0;
      v51 = 0;
      v32 = (std::__shared_weak_count *)this[5];
      if (v32)
      {
        v51 = std::__shared_weak_count::lock(v32);
        if (v51)
        {
          v33 = this[4];
          v50 = v33;
          if (v33)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v40);
            (*(void (**)(uint64_t *, void **, _QWORD))*v33)(v33, &v40, 0);
            v34 = v41;
            if (v41)
            {
              v35 = (unint64_t *)&v41->__shared_owners_;
              do
                v36 = __ldaxr(v35);
              while (__stlxr(v36 - 1, v35));
              if (!v36)
              {
                ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
                std::__shared_weak_count::__release_weak(v34);
              }
            }
          }
        }
      }
      v13 = v51;
      if (v51)
      {
        v37 = (unint64_t *)&v51->__shared_owners_;
        do
          v15 = __ldaxr(v37);
        while (__stlxr(v15 - 1, v37));
        goto LABEL_66;
      }
    }
  }
}

void sub_1BEFF99E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3 - 72);
  _Unwind_Resume(a1);
}

void IBISession::handleConfigureAudioMediaSessionResponse(uint64_t **this, int a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t *v40;
  unint64_t *v41;
  uint64_t v42;
  _BYTE *v43;
  void *v44;
  std::__shared_weak_count *v45;
  void *v46[2];
  void *v47[2];
  void *v48;
  std::__shared_weak_count *v49;
  void *__p[2];
  char v51;
  uint64_t *v52;
  std::__shared_weak_count *v53;
  char v54;

  std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleConfigureAudioMediaSessionResponse [_mediaSessionId=", 58);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" sessionId=", 11);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v51 < 0)
    operator delete(__p[0]);
  if (v54 < 0)
    operator delete(v52);
  MediaSessionDriver::cancelTimerForRequest(this + 3, 74566);
  if (a2 || *((_DWORD *)this + 119) != a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::error(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Failed to configure media session : ", 36);
    *(_BYTE *)(v17 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (v54 < 0)
      operator delete(v52);
    v18 = this[7][37];
    if (v18)
      AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v18 + 120), 6);
    v52 = 0;
    v53 = 0;
    v19 = (std::__shared_weak_count *)this[5];
    if (v19)
    {
      v53 = std::__shared_weak_count::lock(v19);
      if (v53)
      {
        v20 = this[4];
        v52 = v20;
        if (v20)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v44);
          (*(void (**)(uint64_t *, void **, uint64_t))(*v20 + 16))(v20, &v44, 9);
          v21 = v45;
          if (v45)
          {
            p_shared_owners = (unint64_t *)&v45->__shared_owners_;
            do
              v23 = __ldaxr(p_shared_owners);
            while (__stlxr(v23 - 1, p_shared_owners));
            if (!v23)
            {
              ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
              std::__shared_weak_count::__release_weak(v21);
            }
          }
        }
      }
    }
    v14 = v53;
    if (v53)
    {
      v24 = (unint64_t *)&v53->__shared_owners_;
      do
        v16 = __ldaxr(v24);
      while (__stlxr(v16 - 1, v24));
      goto LABEL_45;
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Session id : ", 13);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v51 < 0)
      operator delete(__p[0]);
    if (v54 < 0)
      operator delete(v52);
    if (*((_BYTE *)this + 512))
    {
      *((_BYTE *)this + 512) = 0;
      std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" Configured media session successfully, inform delegate", 55);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v51 < 0)
        operator delete(__p[0]);
      if (v54 < 0)
        operator delete(v52);
      v52 = 0;
      v53 = 0;
      v9 = (std::__shared_weak_count *)this[5];
      if (v9)
      {
        v53 = std::__shared_weak_count::lock(v9);
        if (v53)
        {
          v10 = this[4];
          v52 = v10;
          if (v10)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, &v48);
            (*(void (**)(uint64_t *, void **, _QWORD))(*v10 + 16))(v10, &v48, 0);
            v11 = v49;
            if (v49)
            {
              v12 = (unint64_t *)&v49->__shared_owners_;
              do
                v13 = __ldaxr(v12);
              while (__stlxr(v13 - 1, v12));
              if (!v13)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
          }
        }
      }
      v14 = v53;
      if (v53)
      {
        v15 = (unint64_t *)&v53->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
LABEL_45:
        if (v16)
          return;
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        v25 = v14;
        goto LABEL_47;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v26 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)" Configured Media", 17);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v26 + 17) = 0;
      if (v51 < 0)
        operator delete(__p[0]);
      if (v54 < 0)
        operator delete(v52);
      if (*((_DWORD *)this + 62) == 4)
      {
        if (*((_BYTE *)this + 515))
        {
          std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v27 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" for Local hold, now de-activate media", 38);
          *(_BYTE *)(v27 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v27 + 17) = 0;
          if (v51 < 0)
            operator delete(__p[0]);
          if (v54 < 0)
            operator delete(v52);
          ((void (*)(uint64_t **, _QWORD))(*this)[5])(this, 0);
        }
        std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v28 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"Inform delegate", 15);
        *(_BYTE *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v28 + 17) = 0;
        if (v51 < 0)
          operator delete(__p[0]);
        if (v54 < 0)
          operator delete(v52);
        v29 = (std::__shared_weak_count *)this[5];
        if (!v29)
          return;
        v30 = std::__shared_weak_count::lock(v29);
        v53 = v30;
        if (!v30)
          return;
        v31 = v30;
        v32 = this[4];
        v52 = v32;
        if (v32)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, v47);
          (*(void (**)(uint64_t *, void **, _QWORD))(*v32 + 16))(v32, v47, 0);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v47);
        }
        v33 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
      }
      else
      {
        if (*((_BYTE *)this + 513))
        {
          std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v35 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" for remote hold, ", 18);
          *(_BYTE *)(v35 + 17) = 0;
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v36 = ims::debug((uint64_t)&v52, (uint64_t)__p);
          ImsOutStream::operator<<(v36, " for call resume, ");
        }
        if (v51 < 0)
          operator delete(__p[0]);
        if (v54 < 0)
          operator delete(v52);
        if (!*((_BYTE *)this + 515))
        {
          std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
          std::string::basic_string[abi:ne180100]<0>(__p, "");
          v42 = ims::debug((uint64_t)&v52, (uint64_t)__p);
          v43 = (_BYTE *)ImsOutStream::operator<<(v42, "now activate media");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v43 + 64))(v43, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v43[17] = 0;
          if (v51 < 0)
            operator delete(__p[0]);
          if (v54 < 0)
            operator delete(v52);
          ((void (*)(uint64_t **, _QWORD))(*this)[4])(this, 0);
          return;
        }
        std::string::basic_string[abi:ne180100]<0>(&v52, "ibi.session");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v37 = ImsLogger::debug(ims::_logger, (uint64_t)&v52, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"media is already active", 23);
        *(_BYTE *)(v37 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v37 + 17) = 0;
        if (v51 < 0)
          operator delete(__p[0]);
        if (v54 < 0)
          operator delete(v52);
        v38 = (std::__shared_weak_count *)this[5];
        if (!v38)
          return;
        v39 = std::__shared_weak_count::lock(v38);
        v53 = v39;
        if (!v39)
          return;
        v31 = v39;
        v40 = this[4];
        v52 = v40;
        if (v40)
        {
          RTPSharedPointerBase::getShared<MediaSessionInterface>((uint64_t)this, v46);
          (*(void (**)(uint64_t *, void **, _QWORD))(*v40 + 24))(v40, v46, 0);
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v46);
        }
        v41 = (unint64_t *)&v31->__shared_owners_;
        do
          v34 = __ldaxr(v41);
        while (__stlxr(v34 - 1, v41));
      }
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        v25 = v31;
LABEL_47:
        std::__shared_weak_count::__release_weak(v25);
      }
    }
  }
}

void sub_1BEFFA440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 72);
  _Unwind_Resume(a1);
}

void IBISession::handleRequestTimeout(uint64_t a1, int a2)
{
  uint64_t v4;
  int v5;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  void *v30;
  std::__shared_weak_count *v31;
  void *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  void *__p[2];
  char v37;
  void *v38;
  std::__shared_weak_count *v39;
  char v40;

  std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.session");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Request (", 9);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = a2 - 74565;
  if ((a2 - 74565) > 6)
  {
    v6 = "Error";
    v7 = 5;
  }
  else
  {
    v6 = off_1E78D1320[v5];
    v7 = qword_1BF2A41B0[v5];
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v6, v7);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)") timed out waiting for response from BB", 40);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v37 < 0)
    operator delete(__p[0]);
  if (v40 < 0)
    operator delete(v38);
  IBISession::cleanup((IBISession *)a1, 0);
  switch(a2)
  {
    case 74565:
      v18 = *(_QWORD *)(a1 + 1040);
      v34 = 0;
      v35 = 0;
      std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v18 + 120), &v34);
      v19 = v35;
      if (v35)
      {
        p_shared_owners = (unint64_t *)&v35->__shared_owners_;
        do
          v21 = __ldaxr(p_shared_owners);
        while (__stlxr(v21 - 1, p_shared_owners));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_9;
    case 74566:
    case 74567:
    case 74570:
    case 74571:
LABEL_9:
      std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Treat it as catastrophic error and end session.", 47);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v37 < 0)
        operator delete(__p[0]);
      if (v40 < 0)
        operator delete(v38);
      v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 296);
      if (v9)
        AnalyticsLogger::logRTPError(*(AnalyticsLogger **)(v9 + 120), 23);
      v38 = 0;
      v39 = 0;
      v10 = *(std::__shared_weak_count **)(a1 + 40);
      if (v10)
      {
        v39 = std::__shared_weak_count::lock(v10);
        if (v39)
        {
          v11 = *(void **)(a1 + 32);
          v38 = v11;
          if (v11)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v32);
            (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v11 + 40))(v11, &v32, 9);
            v12 = v33;
            if (v33)
            {
              v13 = (unint64_t *)&v33->__shared_owners_;
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 - 1, v13));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
          }
        }
      }
      v15 = v39;
      if (!v39)
        return;
      v16 = (unint64_t *)&v39->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      break;
    case 74568:
      std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v22 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Call terminate to clean out baseband session.", 45);
      *(_BYTE *)(v22 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v22 + 17) = 0;
      if (v37 < 0)
        operator delete(__p[0]);
      if (v40 < 0)
        operator delete(v38);
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, 0);
      return;
    case 74569:
      std::string::basic_string[abi:ne180100]<0>(&v38, "ibi.session");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v23 = ImsLogger::debug(ims::_logger, (uint64_t)&v38, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Terminate session and ignore the timeout.", 41);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v23 + 17) = 0;
      if (v37 < 0)
        operator delete(__p[0]);
      if (v40 < 0)
        operator delete(v38);
      IBIRTPStackController::removeSession(*(IBIRTPStackController **)(a1 + 1040), *(_DWORD *)(a1 + 476));
      IBISession::cleanup((IBISession *)a1, 0);
      v38 = 0;
      v39 = 0;
      v24 = *(std::__shared_weak_count **)(a1 + 40);
      if (v24)
      {
        v39 = std::__shared_weak_count::lock(v24);
        if (v39)
        {
          v25 = *(void **)(a1 + 32);
          v38 = v25;
          if (v25)
          {
            RTPSharedPointerBase::getShared<MediaSessionInterface>(a1, &v30);
            (*(void (**)(void *, void **, uint64_t))(*(_QWORD *)v25 + 8))(v25, &v30, 9);
            v26 = v31;
            if (v31)
            {
              v27 = (unint64_t *)&v31->__shared_owners_;
              do
                v28 = __ldaxr(v27);
              while (__stlxr(v28 - 1, v27));
              if (!v28)
              {
                ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
                std::__shared_weak_count::__release_weak(v26);
              }
            }
          }
        }
      }
      v15 = v39;
      if (!v39)
        return;
      v29 = (unint64_t *)&v39->__shared_owners_;
      do
        v17 = __ldaxr(v29);
      while (__stlxr(v17 - 1, v29));
      break;
    default:
      return;
  }
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
}

void sub_1BEFFAA3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 56);
  _Unwind_Resume(a1);
}

uint64_t IBISession::toTimerIdString@<X0>(int a1@<W1>, _QWORD *a2@<X8>)
{
  char *v4;
  uint64_t result;
  void *__p;
  char v7;
  int v8;

  v8 = a1;
  switch(a1)
  {
    case 74565:
      v4 = "SESSION_INITIALIZE";
      goto LABEL_12;
    case 74566:
      v4 = "SESSION_CONFIGURE";
      goto LABEL_12;
    case 74567:
      v4 = "SESSION_START";
      goto LABEL_12;
    case 74568:
      v4 = "SESSION_STOP";
      goto LABEL_12;
    case 74569:
      v4 = "SESSION_UNINITIALIZE";
      goto LABEL_12;
    case 74570:
      v4 = "SESSION_START_DTMF";
      goto LABEL_12;
    case 74571:
      v4 = "SESSION_STOP_DTMF";
LABEL_12:
      result = (uint64_t)std::string::basic_string[abi:ne180100]<0>(a2, v4);
      break;
    default:
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&__p);
      if (v7 < 0)
        operator delete(__p);
      result = ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(a2);
      break;
  }
  return result;
}

uint64_t IBISession::active(IBISession *this)
{
  return *((unsigned __int8 *)this + 514);
}

uint64_t IBISession::mediaType(IBISession *this)
{
  return 2;
}

BOOL IBISession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

void IBISession::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "IBISession");
}

uint64_t IBISession::paused(IBISession *this)
{
  return *((unsigned __int8 *)this + 513);
}

uint64_t `non-virtual thunk to'IBISession::active(IBISession *this)
{
  return *((unsigned __int8 *)this + 490);
}

uint64_t `non-virtual thunk to'IBISession::paused(IBISession *this)
{
  return *((unsigned __int8 *)this + 489);
}

uint64_t `non-virtual thunk to'IBISession::mediaType(IBISession *this)
{
  return 2;
}

BOOL `non-virtual thunk to'IBISession::mediaSupportEnabled(uint64_t a1, int a2)
{
  return a2 == 2;
}

void `non-virtual thunk to'IBISession::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "IBISession");
}

{
  LoggableString::LoggableString(a1, "IBISession");
}

void IBIMediaSessionConfig_s::IBIMediaSessionConfig_s(IBIMediaSessionConfig_s *this)
{
  _OWORD *v2;
  _OWORD *v3;
  _OWORD *v4;

  std::vector<unsigned char>::vector((_QWORD *)this + 2, 0x10uLL);
  std::vector<unsigned char>::vector((_QWORD *)this + 6, 0x10uLL);
  *((_QWORD *)this + 49) = 0;
  *((_QWORD *)this + 50) = 0;
  *((_QWORD *)this + 51) = 0;
  v2 = operator new(0xC0uLL);
  *((_QWORD *)this + 50) = v2 + 12;
  *((_QWORD *)this + 51) = v2 + 12;
  *v2 = 0u;
  v2[1] = 0u;
  v2[2] = 0u;
  v2[3] = 0u;
  v2[4] = 0u;
  v2[5] = 0u;
  v2[6] = 0u;
  v2[7] = 0u;
  v2[8] = 0u;
  v2[9] = 0u;
  v2[10] = 0u;
  v2[11] = 0u;
  *((_QWORD *)this + 49) = v2;
  *((_QWORD *)this + 54) = 0;
  *((_QWORD *)this + 55) = 0;
  *((_QWORD *)this + 53) = 0;
  v3 = operator new(0xA0uLL);
  *((_QWORD *)this + 54) = v3 + 10;
  *((_QWORD *)this + 55) = v3 + 10;
  *v3 = 0u;
  v3[1] = 0u;
  v3[2] = 0u;
  v3[3] = 0u;
  v3[4] = 0u;
  v3[5] = 0u;
  v3[6] = 0u;
  v3[7] = 0u;
  v3[8] = 0u;
  v3[9] = 0u;
  *((_QWORD *)this + 53) = v3;
  *((_QWORD *)this + 58) = 0;
  *((_QWORD *)this + 59) = 0;
  *((_QWORD *)this + 57) = 0;
  v4 = operator new(0x20uLL);
  *((_QWORD *)this + 58) = v4 + 2;
  *((_QWORD *)this + 59) = v4 + 2;
  *v4 = 0u;
  v4[1] = 0u;
  *((_QWORD *)this + 57) = v4;
  *((_BYTE *)this + 488) = 0;
  *(_QWORD *)this = 0x100000000;
  *((_BYTE *)this + 40) = 0;
  *((_DWORD *)this + 2) = 0;
  *(_DWORD *)((char *)this + 11) = 0;
  *((_QWORD *)this + 9) = 0;
  *(_QWORD *)((char *)this + 77) = 0;
  *((_BYTE *)this + 384) = 0;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
  *(_OWORD *)((char *)this + 152) = 0u;
  *(_OWORD *)((char *)this + 168) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 88) = 0u;
  *(_OWORD *)((char *)this + 264) = 0u;
  *(_OWORD *)((char *)this + 280) = 0u;
  *(_OWORD *)((char *)this + 296) = 0u;
  *(_OWORD *)((char *)this + 312) = 0u;
  *(_OWORD *)((char *)this + 328) = 0u;
  *(_OWORD *)((char *)this + 344) = 0u;
  *(_OWORD *)((char *)this + 360) = 0u;
  *(_QWORD *)((char *)this + 374) = 0;
}

void sub_1BEFFAD78(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  void **v3;
  void *v4;
  void *v5;
  void *v7;
  void *v8;
  void *v9;

  v5 = v4;
  v1[54] = v5;
  operator delete(v5);
  v7 = (void *)v1[49];
  if (v7)
  {
    v1[50] = v7;
    operator delete(v7);
  }
  v8 = *v3;
  if (*v3)
  {
    v1[7] = v8;
    operator delete(v8);
  }
  v9 = *v2;
  if (*v2)
  {
    v1[3] = v9;
    operator delete(v9);
  }
  _Unwind_Resume(a1);
}

char *std::vector<IBIImsMEAudioEVSCodec>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0x333333333333334)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IBIImsMEAudioEVSCodec>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<IBIImsMEAudioEVSCodec>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(80 * a2);
}

void RTPSharedPointerBase::getShared<IBISession>(void **p_lpsrc, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void std::__shared_ptr_emplace<IBISessionHelper>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D12A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBISessionHelper>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D12A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<IBISessionHelper>::__on_zero_shared(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void SipPCalledPartyIdHeader::~SipPCalledPartyIdHeader(SipPCalledPartyIdHeader *this)
{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipPCalledPartyIdHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipPCalledPartyIdHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipUriHeader *SipPCalledPartyIdHeader::clone(SipPCalledPartyIdHeader *this)
{
  SipUriHeader *v2;

  v2 = (SipUriHeader *)operator new();
  SipUriHeader::SipUriHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78D1368;
  return v2;
}

void sub_1BEFFB070(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipAcceptContactValue::SipAcceptContactValue(SipAcceptContactValue *this, BambiServices *a2, const SipParameterMap *a3)
{
  *(_QWORD *)this = &off_1E78B82D8;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 1) = (char *)this + 16;
  *((_QWORD *)this + 3) = 0;
  *((_WORD *)this + 16) = 256;
  BambiServices::addServiceParameters(a2, (uint64_t)this, a3);
  SipParameterMap::addParameters((std::string *)this, a3);
}

void sub_1BEFFB100(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)v1 = v3;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v2, *(_QWORD **)(v1 + 16));
  _Unwind_Resume(a1);
}

void SipAcceptContactHeader::addValueWithServiceMaskAndParams(SipAcceptContactHeader *this, BambiServices *a2, const SipParameterMap *a3)
{
  SipAcceptContactValue *v6;
  SipAcceptContactValue *v7;

  v6 = (SipAcceptContactValue *)operator new();
  SipAcceptContactValue::SipAcceptContactValue(v6, a2, a3);
  v7 = v6;
  SipVectorHeader<SipAcceptContactValue *>::addItem(this, &v7);
}

void sub_1BEFFB188(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A0C40297E69CFLL);
  _Unwind_Resume(a1);
}

void SipVectorHeader<SipAcceptContactValue *>::addItem(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v6 = a1[10];
  v4 = (uint64_t)(a1 + 10);
  v5 = v6;
  v7 = *(_QWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    v9 = (void **)(v4 - 16);
    v10 = *(_QWORD *)(v4 - 16);
    v11 = ((uint64_t)v7 - v10) >> 3;
    if ((unint64_t)(v11 + 1) >> 61)
      std::vector<SipAcceptContactValue *>::__throw_length_error[abi:ne180100]();
    v12 = v5 - v10;
    v13 = v12 >> 2;
    if (v12 >> 2 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v4, v14);
    else
      v15 = 0;
    v16 = &v15[8 * v11];
    v17 = &v15[8 * v14];
    *(_QWORD *)v16 = *a2;
    v8 = v16 + 8;
    v19 = (char *)a1[8];
    v18 = (char *)a1[9];
    if (v18 != v19)
    {
      do
      {
        v20 = *((_QWORD *)v18 - 1);
        v18 -= 8;
        *((_QWORD *)v16 - 1) = v20;
        v16 -= 8;
      }
      while (v18 != v19);
      v18 = (char *)*v9;
    }
    a1[8] = v16;
    a1[9] = v8;
    a1[10] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *v7 = *a2;
    v8 = v7 + 1;
  }
  a1[9] = v8;
}

void SipAcceptContactHeader::~SipAcceptContactHeader(SipAcceptContactHeader *this)
{
  SipPointerVectorHeader<SipAcceptContactValue>::~SipPointerVectorHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipAcceptContactHeader::clone(uint64_t **this)
{
  uint64_t v2;
  char **v3;
  uint64_t *v4;
  uint64_t *v5;
  int64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  uint64_t *v22;
  char *v23;
  char *v24;
  uint64_t v25;

  v2 = operator new();
  SipHeader::SipHeader((SipHeader *)v2, (const SipHeader *)this);
  *(_QWORD *)(v2 + 64) = 0;
  v3 = (char **)(v2 + 64);
  *(_QWORD *)v2 = off_1E78D1538;
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)(v2 + 80) = 0;
  v5 = this[8];
  v4 = this[9];
  v6 = (char *)v4 - (char *)v5;
  if (v4 == v5)
  {
    *(_QWORD *)v2 = off_1E78D14A0;
    *(_QWORD *)(v2 + 72) = 0;
  }
  else
  {
    if (v6 < 0)
      std::vector<SipAcceptContactValue *>::__throw_length_error[abi:ne180100]();
    v7 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v2 + 80, v6 >> 3);
    *(_QWORD *)(v2 + 64) = v7;
    *(_QWORD *)(v2 + 72) = v7;
    *(_QWORD *)(v2 + 80) = &v7[8 * v8];
    memmove(v7, v5, v6);
    v9 = *(_QWORD *)(v2 + 64);
    v10 = this[8];
    v11 = this[9];
    *(_QWORD *)v2 = off_1E78D14A0;
    for (*(_QWORD *)(v2 + 72) = v9; v10 != v11; ++v10)
    {
      v12 = *v10;
      v13 = operator new();
      *(_QWORD *)v13 = &off_1E78B82D8;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(v13 + 8), *(void ***)(v12 + 8), (void **)(v12 + 16));
      *(_BYTE *)(v13 + 33) = 1;
      *(_BYTE *)(v13 + 32) = *(_BYTE *)(v12 + 32);
      v15 = *(uint64_t **)(v2 + 72);
      v14 = *(_QWORD *)(v2 + 80);
      if ((unint64_t)v15 >= v14)
      {
        v17 = ((char *)v15 - *v3) >> 3;
        if ((unint64_t)(v17 + 1) >> 61)
          std::vector<SipAcceptContactValue *>::__throw_length_error[abi:ne180100]();
        v18 = v14 - (_QWORD)*v3;
        v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1))
          v19 = v17 + 1;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
          v20 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v20 = v19;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>(v2 + 80, v20);
        else
          v21 = 0;
        v22 = (uint64_t *)&v21[8 * v17];
        *v22 = v13;
        v16 = v22 + 1;
        v24 = *(char **)(v2 + 64);
        v23 = *(char **)(v2 + 72);
        if (v23 != v24)
        {
          do
          {
            v25 = *((_QWORD *)v23 - 1);
            v23 -= 8;
            *--v22 = v25;
          }
          while (v23 != v24);
          v23 = *v3;
        }
        *(_QWORD *)(v2 + 64) = v22;
        *(_QWORD *)(v2 + 72) = v16;
        *(_QWORD *)(v2 + 80) = &v21[8 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *v15 = v13;
        v16 = v15 + 1;
      }
      *(_QWORD *)(v2 + 72) = v16;
    }
  }
  *(_QWORD *)v2 = &off_1E78D1408;
  *(_BYTE *)(v2 + 56) = 0;
  return v2;
}

void sub_1BEFFB4CC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipAcceptContactValue *>::encodeValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v9;

  v2 = a1[8];
  if (a1[9] != v2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(a2 + 8);
        v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(_BYTE *)(a2 + 17) = 0;
        v2 = a1[8];
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipAcceptContactValue *>::setValueFromString(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  while (1)
  {
    v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1)
      break;
    v6 = 0;
    if (((*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0)
      break;
    SipVectorHeader<SipAcceptContactValue *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v4 == -1;
}

void sub_1BEFFB698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipAcceptContactValue *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipAcceptContactValue *>::allowsMerging()
{
  return 1;
}

BOOL SipPointerVectorHeader<SipAcceptContactValue>::mergeHeader(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  v4 = v3;
  if (v3 && v3[9] != v3[8])
  {
    v5 = 0;
    do
    {
      v6 = operator new();
      v7 = *(_QWORD *)(v4[8] + 8 * v5);
      *(_QWORD *)v6 = &off_1E78B82D8;
      std::map<std::string,std::string>::map[abi:ne180100]<std::__map_const_iterator<std::__tree_const_iterator<std::__value_type<std::string,std::string>,std::__tree_node<std::__value_type<std::string,std::string>,void *> *,long>>>((uint64_t *)(v6 + 8), *(void ***)(v7 + 8), (void **)(v7 + 16));
      *(_BYTE *)(v6 + 33) = 1;
      *(_BYTE *)(v6 + 32) = *(_BYTE *)(v7 + 32);
      v9 = v6;
      SipVectorHeader<SipAcceptContactValue *>::addItem(a1, &v9);
      ++v5;
    }
    while (v5 < (uint64_t)(v4[9] - v4[8]) >> 3);
  }
  return v4 != 0;
}

void sub_1BEFFB7B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A0C40297E69CFLL);
  _Unwind_Resume(a1);
}

ImsOutStream *SipPointerVectorHeader<SipAcceptContactValue>::itemToStream(uint64_t a1, SipParameterMap **a2, uint64_t a3)
{
  SipParameterMap *v4;

  v4 = *a2;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(a3 + 8), (uint64_t)"*", 1);
  *(_BYTE *)(a3 + 17) = 0;
  return SipParameterMap::toStream(v4, (ImsOutStream *)a3, 0, 0, 0, 0);
}

uint64_t SipPointerVectorHeader<SipAcceptContactValue>::itemFromString(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  _BYTE *v6;
  std::string::size_type v7;
  _QWORD *v9;

  v5 = operator new();
  *(_QWORD *)v5 = &off_1E78B82D8;
  *(_QWORD *)(v5 + 16) = 0;
  *(_QWORD *)(v5 + 8) = v5 + 16;
  *(_QWORD *)(v5 + 24) = 0;
  *(_WORD *)(v5 + 32) = 256;
  if (*(char *)(a2 + 23) < 0)
  {
    if (!*(_QWORD *)(a2 + 8))
    {
LABEL_10:
      v9 = 0;
      goto LABEL_11;
    }
    v6 = *(_BYTE **)a2;
  }
  else
  {
    v6 = (_BYTE *)a2;
    if (!*(_BYTE *)(a2 + 23))
      goto LABEL_10;
  }
  if (*v6 != 42)
    goto LABEL_10;
  v7 = std::string::find((const std::string *)a2, 59, 0);
  if (v7 == -1 || (SipParameterMap::fromString(v5, (std::string *)a2, v7 + 1, 0) & 1) != 0)
  {
    *a3 = v5;
    return 1;
  }
  v9 = *(_QWORD **)(v5 + 16);
LABEL_11:
  *(_QWORD *)v5 = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v5 + 8, v9);
  MEMORY[0x1C3B87100](v5, 0x10A0C40297E69CFLL);
  return 0;
}

unint64_t SipVectorHeader<SipAcceptContactValue *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

BOOL SipVectorHeader<SipAcceptContactValue *>::mergeHeader(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;

  v4 = v3;
  if (v3)
  {
    v5 = (_QWORD *)v3[8];
    v6 = (_QWORD *)v3[9];
    while (v5 != v6)
      SipVectorHeader<SipAcceptContactValue *>::addItem(a1, v5++);
  }
  return v4 != 0;
}

void SipVectorHeader<SipAcceptContactValue *>::~SipVectorHeader(SipHeader *this)
{
  void *v2;

  *(_QWORD *)this = off_1E78D1538;
  v2 = (void *)*((_QWORD *)this + 8);
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

void std::vector<SipAcceptContactValue *>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void SipPointerVectorHeader<SipAcceptContactValue>::~SipPointerVectorHeader(SipHeader *this)
{
  _QWORD *v2;
  _QWORD *v3;
  char *v4;
  unint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = off_1E78D14A0;
  v4 = (char *)this + 64;
  v2 = (_QWORD *)*((_QWORD *)this + 8);
  v3 = (_QWORD *)*((_QWORD *)v4 + 1);
  if (v3 == v2)
  {
    v2 = v3;
  }
  else
  {
    v5 = 0;
    do
    {
      v6 = v2[v5];
      if (v6)
      {
        *(_QWORD *)v6 = &off_1E78B82D8;
        std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v6 + 8, *(_QWORD **)(v6 + 16));
        MEMORY[0x1C3B87100](v6, 0x10A0C40297E69CFLL);
        v2 = (_QWORD *)*((_QWORD *)this + 8);
        v3 = (_QWORD *)*((_QWORD *)this + 9);
      }
      ++v5;
    }
    while (v5 < v3 - v2);
  }
  *(_QWORD *)this = off_1E78D1538;
  if (v2)
  {
    *((_QWORD *)this + 9) = v2;
    operator delete(v2);
  }
  SipHeader::~SipHeader((void **)this);
}

uint64_t ImsTlsSocket::ImsTlsSocket(uint64_t a1, uint64_t *a2, int a3, int a4)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11[2];

  v5 = (std::__shared_weak_count *)a2[1];
  v11[0] = *a2;
  v11[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ImsTcpSocket::ImsTcpSocket(a1, v11, a3, a4);
  if (v5)
  {
    v8 = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  *(_QWORD *)a1 = off_1E78D15D0;
  *(_QWORD *)(a1 + 80) = &unk_1E78D1730;
  *(_QWORD *)(a1 + 176) = &unk_1E78D1810;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return a1;
}

void sub_1BEFFBB84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ImsTlsSocket::~ImsTlsSocket(ImsTlsSocket *this)
{
  void *v2;

  *(_QWORD *)this = off_1E78D15D0;
  *((_QWORD *)this + 10) = &unk_1E78D1730;
  *((_QWORD *)this + 22) = &unk_1E78D1810;
  ImsTlsSocket::close(this);
  v2 = (void *)*((_QWORD *)this + 23);
  if (v2)
  {
    *((_QWORD *)this + 24) = v2;
    operator delete(v2);
  }
  ImsTcpSocket::~ImsTcpSocket(this);
}

{
  ImsTlsSocket::~ImsTlsSocket(this);
  JUMPOUT(0x1C3B87100);
}

void ImsTlsSocket::close(ImsTlsSocket *this)
{
  uint64_t v2;
  uint64_t v3;

  *((_QWORD *)this + 24) = *((_QWORD *)this + 23);
  v2 = *((_QWORD *)this + 26);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
    v3 = *((_QWORD *)this + 26);
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    *((_QWORD *)this + 26) = 0;
  }
  ImsTcpSocket::close(this);
}

void `non-virtual thunk to'ImsTlsSocket::~ImsTlsSocket(ImsTlsSocket *this)
{
  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 80));
}

{
  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 176));
}

{
  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 80));
  JUMPOUT(0x1C3B87100);
}

{
  ImsTlsSocket::~ImsTlsSocket((ImsTlsSocket *)((char *)this - 176));
  JUMPOUT(0x1C3B87100);
}

void ImsTlsSocket::_handleDataAvailable(ImsTlsSocket *this)
{
  std::__shared_weak_count *v2;
  std::string::size_type size;
  uint64_t v4;
  std::string::size_type v5;
  std::string *v6;
  std::string *v7;
  unint64_t *v8;
  std::string::value_type *v9;
  std::string::value_type v10;
  unint64_t v11;
  std::string::value_type *v12;
  unint64_t v13;
  std::string::value_type *v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  char *v18;
  char *v19;
  std::string::value_type *v20;
  std::string::value_type *v21;
  std::string::value_type v22;
  char v23;
  uint64_t v24;
  int v25;
  void *v28;
  uint64_t *v29;
  uint64_t v30;
  void **v31;
  void *v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  _QWORD *v46;
  int v47;
  void *v48[2];
  char v49;
  void *v50[2];
  _BYTE v51[56];
  void *__p[2];
  char v53;
  uint64_t *v54;
  std::__shared_weak_count *v55;
  std::string v56;

  memset(&v56, 0, sizeof(v56));
  v47 = ImsTcpSocket::readFromSocket(**((_DWORD **)this + 5), &v56);
  v54 = 0;
  v55 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v2)
  {
    v55 = std::__shared_weak_count::lock(v2);
    if (v55)
      v54 = (uint64_t *)*((_QWORD *)this + 18);
  }
  size = HIBYTE(v56.__r_.__value_.__r.__words[2]);
  if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v56.__r_.__value_.__l.__size_;
  if (size)
  {
    std::string::basic_string[abi:ne180100]<0>(v50, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::spam(ims::_logger, (uint64_t)v50, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"ImsTlsSocket : _handleDataAvailable: read ", 42);
    *(_BYTE *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"bytes", 5);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v53 < 0)
      operator delete(__p[0]);
    if ((v51[7] & 0x80000000) != 0)
      operator delete(v50[0]);
    v5 = HIBYTE(v56.__r_.__value_.__r.__words[2]);
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v56;
    else
      v6 = (std::string *)v56.__r_.__value_.__r.__words[0];
    if ((v56.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v5 = v56.__r_.__value_.__l.__size_;
    if (v5)
    {
      v7 = (std::string *)((char *)v6 + v5);
      v8 = (unint64_t *)((char *)this + 184);
      v9 = (std::string::value_type *)*((_QWORD *)this + 24);
      do
      {
        v10 = v6->__r_.__value_.__s.__data_[0];
        v11 = *((_QWORD *)this + 25);
        if ((unint64_t)v9 >= v11)
        {
          v13 = *v8;
          v14 = &v9[-*v8];
          v15 = (unint64_t)(v14 + 1);
          if ((uint64_t)(v14 + 1) < 0)
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          v16 = v11 - v13;
          if (2 * v16 > v15)
            v15 = 2 * v16;
          if (v16 >= 0x3FFFFFFFFFFFFFFFLL)
            v17 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v17 = v15;
          if (v17)
            v18 = (char *)operator new(v17);
          else
            v18 = 0;
          v19 = &v14[(_QWORD)v18];
          v20 = &v14[(_QWORD)v18];
          *v20 = v10;
          v12 = v20 + 1;
          if (v9 != (std::string::value_type *)v13)
          {
            v21 = &v9[~v13];
            do
            {
              v22 = *--v9;
              (v21--)[(_QWORD)v18] = v22;
            }
            while (v9 != (std::string::value_type *)v13);
            v9 = (std::string::value_type *)*v8;
            v19 = v18;
          }
          *((_QWORD *)this + 23) = v19;
          *((_QWORD *)this + 24) = v12;
          *((_QWORD *)this + 25) = &v18[v17];
          if (v9)
            operator delete(v9);
        }
        else
        {
          *v9 = v10;
          v12 = v9 + 1;
        }
        *((_QWORD *)this + 24) = v12;
        v6 = (std::string *)((char *)v6 + 1);
        v9 = v12;
      }
      while (v6 != v7);
    }
    ImsTlsSocket::_handshakeDone(this, (uint64_t)v50);
    v23 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v50[1] + 24))(v50[1], *(unsigned int *)v51);
    ImsResult::~ImsResult((ImsResult *)v50);
    if ((v23 & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v24 = ImsLogger::debug(ims::_logger, (uint64_t)v50, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Waiting on SSL handshake", 24);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      if (v53 < 0)
        operator delete(__p[0]);
      if ((v51[7] & 0x80000000) != 0)
        operator delete(v50[0]);
      goto LABEL_110;
    }
    v46 = (_QWORD *)((char *)this + 88);
    while (*((_QWORD *)this + 23) != *((_QWORD *)this + 24))
    {
      v50[0] = 0;
      v50[1] = 0;
      *(_QWORD *)v51 = 0;
      v25 = (*(uint64_t (**)(_QWORD, void **))(**((_QWORD **)this + 26) + 128))(*((_QWORD *)this + 26), v50);
      if (v25 != -9805 && v25 != 0 && v25 != -9803)
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v48, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v33 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"ImsTlsSocket: Failed to read App data from transport. Error: ", 61);
        *(_BYTE *)(v33 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v33 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v33 + 17) = 0;
        if (v49 < 0)
          operator delete(v48[0]);
        if (v53 < 0)
          operator delete(__p[0]);
        v34 = 0;
        goto LABEL_79;
      }
      v28 = (void *)v51[7];
      if (v51[7] < 0)
        v28 = v50[1];
      if (v28)
      {
        if ((*((_BYTE *)this + 72) & 1) != 0)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v48, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v35 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"ImsTlsSocket: kDebugDropIncoming set.  Dropping incoming packet.", 64);
          *(_BYTE *)(v35 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v35 + 17) = 0;
LABEL_74:
          if (v49 < 0)
            operator delete(v48[0]);
          if (v53 < 0)
            operator delete(__p[0]);
          goto LABEL_78;
        }
        v29 = v54;
        if (!v54)
        {
          std::string::basic_string[abi:ne180100]<0>(__p, "net");
          std::string::basic_string[abi:ne180100]<0>(v48, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v36 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v48);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"ImsTlsSocket: No delegate to handle incoming packet from ", 57);
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v46 + 40))(*v46, v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)". Discarding packet", 19);
          *(_BYTE *)(v36 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v36 + 17) = 0;
          goto LABEL_74;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v48, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v30 = ImsLogger::spam(ims::_logger, (uint64_t)__p, (uint64_t)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"ImsTlsSocket : process data, len = ", 35);
        *(_BYTE *)(v30 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v30 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v30 + 17) = 0;
        if (v49 < 0)
          operator delete(v48[0]);
        if (v53 < 0)
          operator delete(__p[0]);
        if (v51[7] >= 0)
          v31 = v50;
        else
          v31 = (void **)v50[0];
        if (v51[7] >= 0)
          v32 = (void *)v51[7];
        else
          v32 = v50[1];
        (*(void (**)(uint64_t *, void **, void *, _QWORD *))(*v29 + 48))(v29, v31, v32, v46);
      }
LABEL_78:
      v34 = 1;
LABEL_79:
      if ((v51[7] & 0x80000000) != 0)
      {
        operator delete(v50[0]);
        if ((v34 & 1) == 0)
          break;
      }
      else if ((v34 & 1) == 0)
      {
        break;
      }
    }
  }
  if (v47)
  {
    if (v47 == -1)
    {
      std::string::basic_string[abi:ne180100]<0>(v50, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v37 = ImsLogger::error(ims::_logger, (uint64_t)v50, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"ImsTlsSocket: remote end closed connection", 42);
      *(_BYTE *)(v37 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v37 + 17) = 0;
      if (v53 < 0)
        operator delete(__p[0]);
      if ((v51[7] & 0x80000000) != 0)
        operator delete(v50[0]);
      *((_BYTE *)this + 136) = 1;
      if (v54)
      {
        (*(void (**)(uint64_t *))(*v54 + 16))(v54);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v50, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v41 = ImsLogger::debug(ims::_logger, (uint64_t)v50, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"ImsTlsSocket: no delegate to handle, closing myself", 51);
        *(_BYTE *)(v41 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v41 + 17) = 0;
        if (v53 < 0)
          operator delete(__p[0]);
        if ((v51[7] & 0x80000000) != 0)
          operator delete(v50[0]);
        ImsTlsSocket::close(this);
      }
    }
    else
    {
      *(_OWORD *)v50 = 0u;
      memset(v51, 0, sizeof(v51));
      v38 = *__error();
      memset(&v51[8], 0, 48);
      v50[0] = &off_1E78B7238;
      v50[1] = &_posixDomain;
      *(_DWORD *)v51 = v38;
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      std::string::basic_string[abi:ne180100]<0>(v48, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v39 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v48);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v39 + 8), (uint64_t)"ImsTlsSocket: handle error ", 27);
      *(_BYTE *)(v39 + 17) = 0;
      (*((void (**)(void **, uint64_t))v50[0] + 2))(v50, v39);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v39 + 64))(v39, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v39 + 17) = 0;
      if (v49 < 0)
        operator delete(v48[0]);
      if (v53 < 0)
        operator delete(__p[0]);
      if (v54)
      {
        v40 = *v54;
        if (*(_DWORD *)v51 == 54)
          (*(void (**)(void))(v40 + 24))();
        else
          (*(void (**)(void))(v40 + 40))();
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(__p, "net");
        std::string::basic_string[abi:ne180100]<0>(v48, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v42 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v48);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"ImsTlsSocket: no delegate to handle error, closing myself", 57);
        *(_BYTE *)(v42 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v42 + 17) = 0;
        if (v49 < 0)
          operator delete(v48[0]);
        if (v53 < 0)
          operator delete(__p[0]);
        ImsTlsSocket::close(this);
      }
      ImsResult::~ImsResult((ImsResult *)v50);
    }
  }
LABEL_110:
  v43 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v56.__r_.__value_.__l.__data_);
}

void sub_1BEFFC708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a35 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 128);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  _Unwind_Resume(a1);
}

void ImsTlsSocket::_handshakeDone(ImsTlsSocket *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 104))(*((_QWORD *)this + 26)) & 1) != 0)
  {
LABEL_2:
    std::string::basic_string[abi:ne180100]<0>(v10, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"SSL/TLS handshake done", 22);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
    if (v11 < 0)
      operator delete(v10[0]);
    v5 = 0;
    goto LABEL_13;
  }
  if (!(*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 26) + 112))(*((_QWORD *)this + 26)))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Negotiated Cipher :", 19);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 120))(*((_QWORD *)this + 26));
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
    if (v11 < 0)
      operator delete(v10[0]);
    goto LABEL_2;
  }
  std::string::basic_string[abi:ne180100]<0>(v10, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Continue SSL/TLS handshake", 26);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  v5 = 0x40000000;
LABEL_13:
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = v5;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
}

void sub_1BEFFCAB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsTlsSocket::initializeSocket(uint64_t a1@<X0>, IpAddress **a2@<X1>, IpAddress **a3@<X2>, uint64_t a4@<X3>, dispatch_queue_t *a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, int a12)
{
  void **v18;
  std::string::size_type v19;
  std::string *v20;
  __int128 v21;
  std::string *p_p;
  std::string::size_type size;
  void (***v24)(ImsSSLContext *__hidden);
  void (**v25)(ImsSSLContext *__hidden);
  const void *v26;
  int v27;
  uint64_t v28;
  const void *v29;
  _QWORD v33[2];
  _QWORD v34[2];
  void *v35[2];
  unsigned __int8 v36;
  std::string v37;
  std::string __p;
  std::string v39;

  memset(&v39, 0, sizeof(v39));
  if (*a2)
  {
    IpAddress::asString(*a2, 3, &__p);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    v39 = __p;
  }
  if (*a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "<--");
    IpAddress::asString(*a3, 3, v35);
    if ((v36 & 0x80u) == 0)
      v18 = v35;
    else
      v18 = (void **)v35[0];
    if ((v36 & 0x80u) == 0)
      v19 = v36;
    else
      v19 = (std::string::size_type)v35[1];
    v20 = std::string::append(&v37, (const std::string::value_type *)v18, v19);
    v21 = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v20->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
    v20->__r_.__value_.__l.__size_ = 0;
    v20->__r_.__value_.__r.__words[2] = 0;
    v20->__r_.__value_.__r.__words[0] = 0;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      size = __p.__r_.__value_.__l.__size_;
    std::string::append(&v39, (const std::string::value_type *)p_p, size);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((char)v36 < 0)
      operator delete(v35[0]);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
  }
  v24 = (void (***)(ImsSSLContext *__hidden))operator new();
  ImsSSLContextBase::ImsSSLContextBase(v24, a1 + 176, (__int128 *)&v39);
  v25 = &off_1E78C0CF8;
  *v24 = &off_1E78C0CF8;
  v24[17] = 0;
  *(_QWORD *)(a1 + 208) = v24;
  v26 = *(const void **)(a8 + 8);
  v34[0] = off_1E78EAB00;
  v34[1] = v26;
  if (v26)
  {
    CFRetain(v26);
    v25 = *v24;
  }
  v34[0] = &off_1E78B7BD8;
  v27 = ((uint64_t (*)(void (***)(ImsSSLContext *__hidden), _QWORD, _QWORD *, uint64_t))v25[10])(v24, a7, v34, a10);
  ims::CFType::~CFType((ims::CFType *)v34);
  if (v27)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "net");
    std::string::basic_string[abi:ne180100]<0>(&v37, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v28 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)&v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"ImsTlsSocket: Unable to initialize ssl context", 46);
    *(_BYTE *)(v28 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v28 + 17) = 0;
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    *(_QWORD *)(a9 + 56) = 0;
    *(_QWORD *)(a9 + 64) = 0;
    *(_QWORD *)a9 = &off_1E78B7238;
    *(_QWORD *)(a9 + 8) = &_bambiDomain;
    *(_DWORD *)(a9 + 16) = 0x40000000;
    *(_QWORD *)(a9 + 40) = 0;
    *(_QWORD *)(a9 + 48) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 32) = 0;
  }
  else
  {
    v29 = *(const void **)(a8 + 8);
    v33[0] = off_1E78EAB00;
    v33[1] = v29;
    if (v29)
      CFRetain(v29);
    v33[0] = &off_1E78B7BD8;
    ImsTcpSocket::initializeSocket(a1, a2, a3, a4, a5, a6, (ImsResult *)a9, a10, a11, a12);
    ims::CFType::~CFType((ims::CFType *)v33);
  }
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
}

void sub_1BEFFCE20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  ims::CFType::~CFType((ims::CFType *)&a15);
  if (*(char *)(v36 - 89) < 0)
    operator delete(*(void **)(v36 - 112));
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ImsTlsSocket::initializeSocket(uint64_t a1@<X0>, IpAddress **a2@<X1>, IpAddress **a3@<X2>, uint64_t a4@<X3>, dispatch_queue_t *a5@<X4>, uint64_t a6@<X5>, unsigned int a7@<W6>, uint64_t a8@<X7>, uint64_t a9@<X8>, uint64_t a10, char a11, int a12)
{
  ImsTlsSocket::initializeSocket(a1 - 80, a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12);
}

void ImsTlsSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, IpAddress **a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  const void *v18;
  void **v19;
  std::string::size_type v20;
  std::string *v21;
  __int128 v22;
  void **v23;
  std::string::size_type v24;
  void (***v25)(ImsSSLContext *__hidden);
  void (**v26)(ImsSSLContext *__hidden);
  const void *v27;
  int v28;
  uint64_t v29;
  _QWORD v31[2];
  _QWORD v32[2];
  void *v33[2];
  unsigned __int8 v34;
  std::string v35;
  void *__p[2];
  int64_t v37;
  std::string v38;

  if (*(_QWORD *)(a1 + 208))
    goto LABEL_2;
  memset(&v38, 0, sizeof(v38));
  if (*a3)
  {
    std::string::basic_string[abi:ne180100]<0>(&v35, "auto<--");
    IpAddress::asString(*a3, 3, v33);
    if ((v34 & 0x80u) == 0)
      v19 = v33;
    else
      v19 = (void **)v33[0];
    if ((v34 & 0x80u) == 0)
      v20 = v34;
    else
      v20 = (std::string::size_type)v33[1];
    v21 = std::string::append(&v35, (const std::string::value_type *)v19, v20);
    v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
    v37 = v21->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = v22;
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (v37 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if (v37 >= 0)
      v24 = HIBYTE(v37);
    else
      v24 = (std::string::size_type)__p[1];
    std::string::append(&v38, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    if ((char)v34 < 0)
      operator delete(v33[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
  }
  v25 = (void (***)(ImsSSLContext *__hidden))operator new();
  ImsSSLContextBase::ImsSSLContextBase(v25, a1 + 176, (__int128 *)&v38);
  v26 = &off_1E78C0CF8;
  *v25 = &off_1E78C0CF8;
  v25[17] = 0;
  *(_QWORD *)(a1 + 208) = v25;
  v27 = *(const void **)(a7 + 8);
  v32[0] = off_1E78EAB00;
  v32[1] = v27;
  if (v27)
  {
    CFRetain(v27);
    v26 = *v25;
  }
  v32[0] = &off_1E78B7BD8;
  v28 = ((uint64_t (*)(void (***)(ImsSSLContext *__hidden), uint64_t, _QWORD *, uint64_t))v26[10])(v25, a6, v32, a8);
  ims::CFType::~CFType((ims::CFType *)v32);
  if (v28)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    std::string::basic_string[abi:ne180100]<0>(&v35, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v29 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"ImsTlsSocket: Unable to initialize ssl context", 46);
    *(_BYTE *)(v29 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v29 + 17) = 0;
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37) < 0)
      operator delete(__p[0]);
    *(_QWORD *)(a9 + 56) = 0;
    *(_QWORD *)(a9 + 64) = 0;
    *(_QWORD *)a9 = &off_1E78B7238;
    *(_QWORD *)(a9 + 8) = &_bambiDomain;
    *(_DWORD *)(a9 + 16) = 0x40000000;
    *(_QWORD *)(a9 + 40) = 0;
    *(_QWORD *)(a9 + 48) = 0;
    *(_QWORD *)(a9 + 24) = 0;
    *(_QWORD *)(a9 + 32) = 0;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
  if (!v28)
  {
LABEL_2:
    v18 = *(const void **)(a7 + 8);
    v31[1] = v18;
    if (v18)
      CFRetain(v18);
    v31[0] = &off_1E78B7BD8;
    ImsTcpSocket::initializeSocket(a1, a2, a3, a4, a5, (ImsResult *)a9, a10);
    ims::CFType::~CFType((ims::CFType *)v31);
  }
}

void sub_1BEFFD204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  if (a32 < 0)
    operator delete(__p);
  if (*(char *)(v32 - 81) < 0)
    operator delete(*(void **)(v32 - 104));
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'ImsTlsSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, IpAddress **a3@<X2>, dispatch_queue_t *a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, int a10)
{
  ImsTlsSocket::initializeSocket(a1 - 80, a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

double ImsTlsSocket::_writeToSocket@<D0>(ImsTlsSocket *this@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const ImsResult *v9;
  double result;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  void *v16[2];
  char v17;
  uint64_t v18;

  v18 = a3;
  if ((*(unsigned int (**)(_QWORD, const unsigned __int8 *, uint64_t *))(**((_QWORD **)this + 26) + 144))(*((_QWORD *)this + 26), a2, &v18))
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    v13 = 0u;
    v14 = 0u;
    v15 = 0u;
    v11[0] = &off_1E78B7238;
    v11[1] = &_bambiDomain;
    v12 = 0x40000000;
    v6 = ImsResult::operator<<<char [30]>((uint64_t)v11, "ImsTlsSocket: Could not send ");
    v7 = ImsResult::operator<<<unsigned long>(v6);
    v8 = ImsResult::operator<<<char [11]>(v7, " bytes to ");
    v9 = (const ImsResult *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v8, (_QWORD *)this + 11);
    ims::result::log((uint64_t)v16, (uint64_t)v9);
    ImsResult::ImsResult((ImsResult *)a4, v9);
    ImsResult::~ImsResult((ImsResult *)v11);
    if (v17 < 0)
      operator delete(v16[0]);
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a4 + 24) = 0u;
    *(_OWORD *)(a4 + 40) = 0u;
    *(_OWORD *)(a4 + 56) = 0u;
    *(_QWORD *)a4 = &off_1E78B7238;
    *(_QWORD *)(a4 + 8) = &_bambiDomain;
    *(_DWORD *)(a4 + 16) = 0;
  }
  return result;
}

void sub_1BEFFD3F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  if (*(char *)(v2 - 25) < 0)
    operator delete(*(void **)(v2 - 48));
  _Unwind_Resume(a1);
}

double ImsTlsSocket::shutdown@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  double result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  std::string::basic_string[abi:ne180100]<0>(v7, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsTlsSocket: Shutdown not supported on a tls socket", 52);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  result = 0.0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_QWORD *)a1 = &off_1E78B7238;
  *(_QWORD *)(a1 + 8) = &_bambiDomain;
  *(_DWORD *)(a1 + 16) = 1073741834;
  return result;
}

void sub_1BEFFD50C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ImsTlsSocket::reset(ImsTlsSocket *this)
{
  uint64_t v1;
  void *__p[2];
  char v3;
  void *v4[2];
  char v5;

  std::string::basic_string[abi:ne180100]<0>(v4, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v1 = ImsLogger::debug(ims::_logger, (uint64_t)v4, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v1 + 8), (uint64_t)"ImsTlsSocket: Reset not supported on a tls socket", 49);
  *(_BYTE *)(v1 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v1 + 64))(v1, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v1 + 17) = 0;
  if (v3 < 0)
    operator delete(__p[0]);
  if (v5 < 0)
    operator delete(v4[0]);
}

void sub_1BEFFD600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsTlsSocket::readDataFromStream(ImsTlsSocket *this, void *a2, unint64_t *a3)
{
  size_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v13;
  void *__p[2];
  char v15;
  void *v16[2];
  char v17;

  if (*((_QWORD *)this + 24) - *((_QWORD *)this + 23) >= *a3)
    v6 = *a3;
  else
    v6 = *((_QWORD *)this + 24) - *((_QWORD *)this + 23);
  std::string::basic_string[abi:ne180100]<0>(v16, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"readDataFromStream : expected: ", 31);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)", Available : ", 14);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete(v16[0]);
  if (v6)
  {
    memcpy(a2, *((const void **)this + 23), v6);
    v9 = *((_QWORD *)this + 23);
    v8 = *((_QWORD *)this + 24);
    v10 = v8 - (v9 + v6);
    if (v8 != v9 + v6)
      memmove(*((void **)this + 23), (const void *)(v9 + v6), v8 - (v9 + v6));
    *((_QWORD *)this + 24) = v9 + v10;
  }
  if (*a3 == v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::spam(ims::_logger, (uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"ImsTlsSocket : readDataFromStream errSecSuccess", 47);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    return 0;
  }
  else
  {
    *a3 = v6;
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::spam(ims::_logger, (uint64_t)v16, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"ImsTlsSocket : readDataFromStream errSSLWouldBlock ", 51);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v17 < 0)
      operator delete(v16[0]);
    return 4294957493;
  }
}

void sub_1BEFFD8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'ImsTlsSocket::readDataFromStream(ImsTlsSocket *this, void *a2, unint64_t *a3)
{
  return ImsTlsSocket::readDataFromStream((ImsTlsSocket *)((char *)this - 176), a2, a3);
}

uint64_t ImsTlsSocket::writeDataToStream(ImsTlsSocket *this, const void *a2, unint64_t *a3)
{
  uint64_t v6;
  ssize_t v7;
  uint64_t v8;
  uint64_t v9;
  void *__p[2];
  char v12;
  void *v13[2];
  char v14;

  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"writeDataToStream : expected: ", 30);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  v7 = send(**((_DWORD **)this + 5), a2, *a3, 0);
  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"expected : ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" Sent data : ", 13);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v7 < 1)
    return 4294957496;
  std::string::basic_string[abi:ne180100]<0>(v13, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"writeDataToStream : success: ", 29);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  return 0;
}

void sub_1BEFFDBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t `non-virtual thunk to'ImsTlsSocket::writeDataToStream(ImsTlsSocket *this, const void *a2, unint64_t *a3)
{
  return ImsTlsSocket::writeDataToStream((ImsTlsSocket *)((char *)this - 176), a2, a3);
}

uint64_t ImsTlsSocket::isConnected(ImsTlsSocket *this)
{
  if (*((_BYTE *)this + 104))
    return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 26) + 104))(*((_QWORD *)this + 26));
  else
    return 0;
}

void `non-virtual thunk to'ImsTlsSocket::onConnected(ImsTlsSocket *this)
{
  ImsTcpSocket::_sendQueuedData((ImsTlsSocket *)((char *)this - 176));
}

_QWORD *ImsTlsSocket::protocol@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "TLS");
}

uint64_t ImsTlsSocket::isTls(ImsTlsSocket *this)
{
  return 1;
}

_QWORD *ImsSSLContextBase::ImsSSLContextBase(_QWORD *a1, uint64_t a2, __int128 *a3)
{
  std::string *v6;
  __int128 v7;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ImsSSL");
  ImsLogContainer::ImsLogContainer((uint64_t)a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *a1 = &off_1E78C0C38;
  a1[13] = a2;
  v6 = (std::string *)(a1 + 14);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v7 = *a3;
    a1[16] = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1BEFFDCFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void SipConferenceInfoBody::SipConferenceInfoBody(SipConferenceInfoBody *this, const SipConferenceInfoBody *a2)
{
  __int128 v4;

  *(_QWORD *)this = off_1E78D24E0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *(_QWORD *)this = off_1E78CE600;
  SipConferenceInfo::SipConferenceInfo((SipConferenceInfoBody *)((char *)this + 32), (const SipConferenceInfoBody *)((char *)a2 + 32));
}

void sub_1BEFFDDA8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)v2 = v3;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

uint64_t _GLOBAL__sub_I_SipConferenceInfoBody_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&SipConferenceInfoBody::kContentType, "application/conference-info+xml");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &SipConferenceInfoBody::kContentType, &dword_1BEDF4000);
}

void SipAllowEventsHeader::~SipAllowEventsHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipAllowEventsHeader::clone(SipAllowEventsHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78D1890;
  *((_BYTE *)v2 + 56) = 0;
  return v2;
}

void sub_1BEFFDEDC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void SipAcceptEncodingHeader::~SipAcceptEncodingHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipAcceptEncodingHeader::clone(SipAcceptEncodingHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78D1928;
  return v2;
}

void sub_1BEFFDFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

_QWORD *SDPConnection::networkTypeLookup(SDPConnection *this)
{
  unsigned __int8 v1;

  {
    ctu::NeverDestroyed<std::array<std::string,2ul>>::NeverDestroyed<char const(&)[1],char const(&)[3]>(SDPConnection::networkTypeLookup(void)::lookup, "", "IN");
  }
  return SDPConnection::networkTypeLookup(void)::lookup;
}

void sub_1BEFFE05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *SDPConnection::addressTypeLookup(SDPConnection *this)
{
  unsigned __int8 v1;

  {
    ctu::NeverDestroyed<std::array<std::string,3ul>>::NeverDestroyed<char const(&)[1],char const(&)[4],char const(&)[4]>(SDPConnection::addressTypeLookup(void)::lookup, "", "IP4", "IP6");
  }
  return SDPConnection::addressTypeLookup(void)::lookup;
}

void sub_1BEFFE0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void SDPConnection::toStream(SDPConnection *this, ImsOutStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  char v7;

  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  v6 = 99;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v6, 1);
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = 61;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v7, 1);
  *((_BYTE *)a2 + 17) = 0;
  SDPConnection::valueToStream(this, a2);
}

void SDPConnection::valueToStream(SDPConnection *this, ImsOutStream *a2)
{
  _QWORD *v4;
  SDPConnection *v5;
  _QWORD *v6;
  std::string __p;
  std::string v8;
  char v9;

  SDPConnection::networkTypeLookup(this);
  LoggableString::LoggableString(&v8, (const std::string *)&SDPConnection::networkTypeLookup(void)::lookup[3 * *((unsigned int *)this + 3)]);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v8);
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  __p.__r_.__value_.__s.__data_[0] = 32;
  v5 = (SDPConnection *)std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&__p, 1);
  *((_BYTE *)a2 + 17) = 0;
  SDPConnection::addressTypeLookup(v5);
  LoggableString::LoggableString(&__p, (const std::string *)&SDPConnection::addressTypeLookup(void)::lookup[3 * *((unsigned int *)this + 4)]);
  (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
  v6 = (_QWORD *)*((_QWORD *)a2 + 1);
  v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BEFFE268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPConnection::valid(const std::string *this)
{
  std::string::size_type size;
  int v3;
  SDPConnection *v4;
  _BOOL8 v5;
  unint64_t v7;
  std::string::size_type v8;
  std::string *p_p;
  int v10;
  std::string __p;
  char v12;

  if (!this->__r_.__value_.__s.__data_[8]
    || !HIDWORD(this->__r_.__value_.__r.__words[1])
    || !LODWORD(this->__r_.__value_.__r.__words[2]))
  {
    return 0;
  }
  if (!this[2].__r_.__value_.__s.__data_[0])
  {
    size = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
    v3 = (char)size;
    if ((size & 0x80u) != 0)
      size = this[1].__r_.__value_.__l.__size_;
    if (size == 2)
    {
      v4 = v3 >= 0 ? (SDPConnection *)&this[1] : (SDPConnection *)this[1].__r_.__value_.__r.__words[0];
      if (*(_WORD *)v4 == 14906)
        return 0;
    }
  }
  if (IpAddress::isAddress((std::string *)&this[1]))
    return 1;
  LODWORD(v7) = this->__r_.__value_.__r.__words[2];
  if ((_DWORD)v7 != 2)
    goto LABEL_27;
  if ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    v7 = HIBYTE(this[1].__r_.__value_.__r.__words[2]);
    if (v7 > 7)
      goto LABEL_19;
LABEL_27:
    v10 = 0;
    goto LABEL_28;
  }
  v7 = this[1].__r_.__value_.__l.__size_;
  if (v7 <= 7)
    goto LABEL_27;
LABEL_19:
  std::string::basic_string(&__p, this + 1, v7 - 8, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v12);
  v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  LOBYTE(v7) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v8 = __p.__r_.__value_.__l.__size_;
  if (v8 != 8)
  {
    v10 = 1;
    goto LABEL_28;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  v10 = 1;
  v5 = 1;
  if (p_p->__r_.__value_.__r.__words[0] != 0x64696C61766E692ELL)
  {
LABEL_28:
    if (this[2].__r_.__value_.__s.__data_[1]
      && ((SHIBYTE(this[1].__r_.__value_.__r.__words[2]) & 0x80000000) == 0 || this[1].__r_.__value_.__l.__size_ <= 0xFF))
    {
      v5 = std::string::find(this + 1, 46, 0) != -1;
      if (!v10)
        return v5;
      LOBYTE(v7) = *((_BYTE *)&__p.__r_.__value_.__s + 23);
    }
    else
    {
      v5 = 0;
      if (!v10)
        return v5;
    }
  }
  if ((v7 & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v5;
}

SDPConnection *SDPConnection::setAddressTypeFromString(SDPConnection *result, unsigned __int8 *a2)
{
  SDPConnection *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;

  v3 = result;
  v4 = 0;
  while (1)
  {
    result = (SDPConnection *)SDPConnection::addressTypeLookup(result);
    v5 = &SDPConnection::addressTypeLookup(void)::lookup[3 * v4];
    v6 = a2[23];
    if ((v6 & 0x80u) == 0)
      v7 = a2[23];
    else
      v7 = *((_QWORD *)a2 + 1);
    v8 = *((unsigned __int8 *)v5 + 23);
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = v5[1];
    if (v7 != v8)
      goto LABEL_18;
    v10 = v9 >= 0 ? (unsigned __int8 *)&SDPConnection::addressTypeLookup(void)::lookup[3 * v4] : (unsigned __int8 *)*v5;
    if ((v6 & 0x80) != 0)
      break;
    if (!a2[23])
      goto LABEL_20;
    v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v6)
        goto LABEL_20;
    }
LABEL_18:
    if (++v4 == 3)
      return result;
  }
  result = (SDPConnection *)memcmp(*(const void **)a2, v10, *((_QWORD *)a2 + 1));
  if ((_DWORD)result)
    goto LABEL_18;
LABEL_20:
  *((_DWORD *)v3 + 4) = v4;
  return result;
}

void SDPConnection::~SDPConnection(void **this)
{
  *this = off_1E78D19C0;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
}

{
  *this = off_1E78D19C0;
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  JUMPOUT(0x1C3B87100);
}

_QWORD *ctu::NeverDestroyed<std::array<std::string,2ul>>::NeverDestroyed<char const(&)[1],char const(&)[3]>(_QWORD *a1, char *a2, char *a3)
{
  _QWORD *v5;

  v5 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v5 + 3, a3);
  return a1;
}

void sub_1BEFFE5D4(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

_QWORD *ctu::NeverDestroyed<std::array<std::string,3ul>>::NeverDestroyed<char const(&)[1],char const(&)[4],char const(&)[4]>(_QWORD *a1, char *a2, char *a3, char *a4)
{
  _QWORD *v7;

  v7 = std::string::basic_string[abi:ne180100]<0>(a1, a2);
  std::string::basic_string[abi:ne180100]<0>(v7 + 3, a3);
  std::string::basic_string[abi:ne180100]<0>(a1 + 6, a4);
  return a1;
}

void sub_1BEFFE644(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  uint64_t v2;

  while (1)
  {
    if (*(char *)(v2 - 1) < 0)
      operator delete(*(void **)(v2 - 24));
    v2 -= 24;
    if (v2 == v1)
      _Unwind_Resume(exception_object);
  }
}

void *ImsPrefs::getAcceptContactParamsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getAcceptContactParamsKey(void)::value, "AcceptContactParams", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getAcceptContactParamsKey(void)::value;
}

void sub_1BEFFE6F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAcceptedSmsContentTypesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[51],BOOL>((uint64_t)&ImsPrefs::getAcceptedSmsContentTypesKey(void)::value, "AcceptedSmsContentTypes", "Signaling", (unsigned __int8 *)&v3 + 1, "application/vnd.3gpp.sms,application/vnd.3gpp2.sms", (char *)&v3);
  }
  return &ImsPrefs::getAcceptedSmsContentTypesKey(void)::value;
}

void sub_1BEFFE794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAccessBarringTypeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, "SSAC");
    std::string::basic_string[abi:ne180100]<0>(v8, "ACB");
    std::string::basic_string[abi:ne180100]<0>(v9, "Both");
    std::string::basic_string[abi:ne180100]<0>(v10, "None");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 4uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getAccessBarringTypeKey(void)::value, "AccessBarringType", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v10[i + 2]) < 0)
        operator delete((void *)v10[i]);
    }
  }
  return &ImsPrefs::getAccessBarringTypeKey(void)::value;
}

void sub_1BEFFE8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  uint64_t v15;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v15 = 0;
  while (1)
  {
    if (*(&a14 + v15 + 95) < 0)
      operator delete(*(void **)(&a14 + v15 + 72));
    v15 -= 24;
    if (v15 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getAccessNetworkRefreshMethodKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)&str_2_16);
    std::string::basic_string[abi:ne180100]<0>(v8, "INVITE");
    std::string::basic_string[abi:ne180100]<0>(v9, "UPDATE");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getAccessNetworkRefreshMethodKey(void)::value, "AccessNetworkRefreshMethod", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  return &ImsPrefs::getAccessNetworkRefreshMethodKey(void)::value;
}

void sub_1BEFFEABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0)
      operator delete(*(void **)(&a15 + v16 + 48));
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(void)::value, "AccessNetworkRefreshDelayMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAccessNetworkRefreshDelayMillisecondsKey(void)::value;
}

void sub_1BEFFEBC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(void)::value, "AccessNetworkRefreshInHeldCalls", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(void)::value;
}

void sub_1BEFFEC64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(void)::value, "AddAccessNetworkInfoToInsecureMessages", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddAccessNetworkInfoToInsecureMessagesKey(void)::value;
}

void sub_1BEFFECFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddConferenceParticipantsToInviteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddConferenceParticipantsToInviteKey(void)::value, "AddConferenceParticipantsToInvite", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddConferenceParticipantsToInviteKey(void)::value;
}

void sub_1BEFFED94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddContentDispositionInPIDFKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddContentDispositionInPIDFKey(void)::value, "AddContentDispositionInPIDF", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAddContentDispositionInPIDFKey(void)::value;
}

void sub_1BEFFEE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAdditionalContactParamsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAdditionalContactParamsKey(void)::value, "AdditionalContactParams", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getAdditionalContactParamsKey(void)::value;
}

void sub_1BEFFEEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddQosOptionsToSocketsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddQosOptionsToSocketsKey(void)::value, "AddQosOptionsToSockets", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAddQosOptionsToSocketsKey(void)::value;
}

void sub_1BEFFEF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAdditionalHeadersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAdditionalHeadersKey(void)::value, "AdditionalHeaders", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getAdditionalHeadersKey(void)::value;
}

void sub_1BEFFF048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAdditionalFeatureTagsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAdditionalFeatureTagsKey(void)::value, "AdditionalFeatureTags", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getAdditionalFeatureTagsKey(void)::value;
}

void sub_1BEFFF108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddGeolocationSupportedHeaderKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddGeolocationSupportedHeaderKey(void)::value, "AddGeolocationSupportedHeader", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddGeolocationSupportedHeaderKey(void)::value;
}

void sub_1BEFFF1AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddRoutableLocalAddressHeaderKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddRoutableLocalAddressHeaderKey(void)::value, "AddRoutableLocalAddressHeader", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddRoutableLocalAddressHeaderKey(void)::value;
}

void sub_1BEFFF244(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddSipInstanceForWifiKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddSipInstanceForWifiKey(void)::value, "AddSipInstanceForWifi", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAddSipInstanceForWifiKey(void)::value;
}

void sub_1BEFFF2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowAnonymousEmergencyCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowAnonymousEmergencyCallsKey(void)::value, "AllowAnonymousEmergencyCalls", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowAnonymousEmergencyCallsKey(void)::value;
}

void sub_1BEFFF384(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowEmergencyRetryForIPSecKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowEmergencyRetryForIPSecKey(void)::value, "AllowEmergencyRetryForIPSec", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowEmergencyRetryForIPSecKey(void)::value;
}

void sub_1BEFFF424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(void)::value, "AllowAnonymousEmergencyCallsWhileRoaming", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowAnonymousEmergencyCallsWhileRoamingKey(void)::value;
}

void sub_1BEFFF4C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowDisabledModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowDisabledModeKey(void)::value, "AllowDisabledMode", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowDisabledModeKey(void)::value;
}

void sub_1BEFFF564(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowEarlyRegistrationRefreshKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowEarlyRegistrationRefreshKey(void)::value, "AllowEarlyRegistrationRefresh", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowEarlyRegistrationRefreshKey(void)::value;
}

void sub_1BEFFF604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowInvalidTimestampInPCNIKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowInvalidTimestampInPCNIKey(void)::value, "AllowInvalidTimestampInPCNI", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowInvalidTimestampInPCNIKey(void)::value;
}

void sub_1BEFFF69C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowPCNIInAirplaneModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowPCNIInAirplaneModeKey(void)::value, "AllowPCNIInAirplaneMode", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowPCNIInAirplaneModeKey(void)::value;
}

void sub_1BEFFF73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowLimitedAccessModeRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowLimitedAccessModeRegistrationKey(void)::value, "AllowLimitedAccessModeRegistration", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowLimitedAccessModeRegistrationKey(void)::value;
}

void sub_1BEFFF7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowMultipleAddressesPerProxyKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowMultipleAddressesPerProxyKey(void)::value, "AllowMultipleAddressesPerProxy", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowMultipleAddressesPerProxyKey(void)::value;
}

void sub_1BEFFF874(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(void)::value, "AllowRemoteHoldForUnconfirmedCalls", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey(void)::value;
}

void sub_1BEFFF90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(void)::value, "AllowIncomingCallsDuringEmergencyCall", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowIncomingCallsDuringEmergencyCallKey(void)::value;
}

void sub_1BEFFF9A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(void)::value, "AllowOutgoingCallsDuringEmergencyCall", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowOutgoingCallsDuringEmergencyCallKey(void)::value;
}

void sub_1BEFFFA3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowPhoneContextInEmergencyUriKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowPhoneContextInEmergencyUriKey(void)::value, "AllowPhoneContextInEmergencyUri", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowPhoneContextInEmergencyUriKey(void)::value;
}

void sub_1BEFFFADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowTelUriInReferToKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowTelUriInReferToKey(void)::value, "AllowTelUriInReferTo", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowTelUriInReferToKey(void)::value;
}

void sub_1BEFFFB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowResponsesOverDifferentTransportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowResponsesOverDifferentTransportKey(void)::value, "AllowResponsesOverDifferentTransport", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowResponsesOverDifferentTransportKey(void)::value;
}

void sub_1BEFFFC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowRegistrationCanceledStateKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowRegistrationCanceledStateKey(void)::value, "AllowRegistrationCanceledState", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowRegistrationCanceledStateKey(void)::value;
}

void sub_1BEFFFCB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[40],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(void)::value, "AllowSimultaneousCallsWhileUnregistered", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowSimultaneousCallsWhileUnregisteredKey(void)::value;
}

void sub_1BEFFFD54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddEmergencyContactParamInInviteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddEmergencyContactParamInInviteKey(void)::value, "AddEmergencyContactParamInInvite", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddEmergencyContactParamInInviteKey(void)::value;
}

void sub_1BEFFFDEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddPrivacyHeaderKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddPrivacyHeaderKey(void)::value, "AlwaysAddPrivacyHeader", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysAddPrivacyHeaderKey(void)::value;
}

void sub_1BEFFFE84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddSipInstanceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddSipInstanceKey(void)::value, "AlwaysAddSipInstance", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysAddSipInstanceKey(void)::value;
}

void sub_1BEFFFF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAcceptMsgFromNonProxyKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAcceptMsgFromNonProxyKey(void)::value, "AcceptMsgFromNonProxy", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAcceptMsgFromNonProxyKey(void)::value;
}

void sub_1BEFFFFB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(void)::value, "AlwaysAddSipInstanceToSubscribeRequest", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(void)::value;
}

void sub_1BF00004C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(void)::value, "RedialOverLteIfEpsFallbackCallFailed", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRedialOverLteIfEpsFallbackCallFailedKey(void)::value;
}

void sub_1BF0000E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddTextServiceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddTextServiceKey(void)::value, "AlwaysAddTextService", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAlwaysAddTextServiceKey(void)::value;
}

void sub_1BF000184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCompressIPv6AddressesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getCompressIPv6AddressesKey(void)::value, "CompressIPv6Addresses", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getCompressIPv6AddressesKey(void)::value;
}

void sub_1BF000224(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysEmergencyRegisterKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysEmergencyRegisterKey(void)::value, "AlwaysEmergencyRegister", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAlwaysEmergencyRegisterKey(void)::value;
}

void sub_1BF0002C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysPrack18xKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysPrack18xKey(void)::value, "AlwaysPrack18x", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysPrack18xKey(void)::value;
}

void sub_1BF00035C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysResetProxyListKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysResetProxyListKey(void)::value, "AlwaysResetProxyList", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysResetProxyListKey(void)::value;
}

void sub_1BF0003F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysSendSessionProgressKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSendSessionProgressKey(void)::value, "AlwaysSendSessionProgress", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysSendSessionProgressKey(void)::value;
}

void sub_1BF00048C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysSendTryingResponseKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSendTryingResponseKey(void)::value, "AlwaysSendTryingResponse", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysSendTryingResponseKey(void)::value;
}

void sub_1BF000524(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysSetPhoneContextKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSetPhoneContextKey(void)::value, "AlwaysSetPhoneContext", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysSetPhoneContextKey(void)::value;
}

void sub_1BF0005BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(void)::value, "AlwaysAddGeolocationForEmergencyCalls", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAlwaysAddGeolocationForEmergencyCallsKey(void)::value;
}

void sub_1BF00065C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[53],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(void)::value, "AllowGeolocationForEmergencyCallsWhileInboundRoaming", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowGeolocationForEmergencyCallsWhileInboundRoamingKey(void)::value;
}

void sub_1BF0006FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[56],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(void)::value, "AlwaysAddGeolocationToInviteForNormalSetupEmergencyCall", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysAddGeolocationToInviteForNormalSetupEmergencyCallKey(void)::value;
}

void sub_1BF000794(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[56],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(void)::value, "AlwaysAddGeolocationToUpdateForNormalSetupEmergencyCall", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysAddGeolocationToUpdateForNormalSetupEmergencyCallKey(void)::value;
}

void sub_1BF00082C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowIncomingUssdSessionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowIncomingUssdSessionsKey(void)::value, "AllowIncomingUssdSessions", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowIncomingUssdSessionsKey(void)::value;
}

void sub_1BF0008C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(void)::value, "AlwaysUnsubscribeFromRegEvents", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey(void)::value;
}

void sub_1BF000964(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAuthResponseTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 15000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getAuthResponseTimeoutMillisecondsKey(void)::value, "AuthResponseTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAuthResponseTimeoutMillisecondsKey(void)::value;
}

void sub_1BF000A04(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCallEndReasonsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getCallEndReasonsKey(void)::value, "CallEndReasons", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getCallEndReasonsKey(void)::value;
}

void sub_1BF000AB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCallSetupPingTimerMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getCallSetupPingTimerMillisecondsKey(void)::value, "CallSetupPingTimerMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getCallSetupPingTimerMillisecondsKey(void)::value;
}

void sub_1BF000B60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(void)::value, "ClearRegistrationCallIdOnDeinitialization", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getClearRegistrationCallIdOnDeinitializationKey(void)::value;
}

void sub_1BF000BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getContactUserKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  unsigned __int8 v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getContactUserKey(void)::value, "ContactUser", "Signaling", &v4, (char *)&str_2_16, &v3);
  }
  return &ImsPrefs::getContactUserKey(void)::value;
}

void sub_1BF000CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(void)::value, "ContinueEmergencyCallOnMediaTimeout", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getContinueEmergencyCallOnMediaTimeoutKey(void)::value;
}

void sub_1BF000D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(void)::value, "EmergencyMediaTimeoutDeferalTimerSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyMediaTimeoutDeferalTimerSecondsKey(void)::value;
}

void sub_1BF000DD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getConvertSessionProgressToRingingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getConvertSessionProgressToRingingKey(void)::value, "ConvertSessionProgressToRinging", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getConvertSessionProgressToRingingKey(void)::value;
}

void sub_1BF000E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCountryOfOriginationFormatKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, "NONE");
    std::string::basic_string[abi:ne180100]<0>(v8, "PIDF");
    std::string::basic_string[abi:ne180100]<0>(v9, "PANI");
    std::string::basic_string[abi:ne180100]<0>(v10, "BOTH");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 4uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getCountryOfOriginationFormatKey(void)::value, "CountryOfOriginationFormat", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v10[i + 2]) < 0)
        operator delete((void *)v10[i]);
    }
  }
  return &ImsPrefs::getCountryOfOriginationFormatKey(void)::value;
}

void sub_1BF000FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  uint64_t v15;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v15 = 0;
  while (1)
  {
    if (*(&a14 + v15 + 95) < 0)
      operator delete(*(void **)(&a14 + v15 + 72));
    v15 -= 24;
    if (v15 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getCSFBOnAccessBarredKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getCSFBOnAccessBarredKey(void)::value, "CSFBOnAccessBarred", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getCSFBOnAccessBarredKey(void)::value;
}

void sub_1BF0010E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(void)::value, "CheckContactHeaderOnRegisterResponse", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getCheckContactHeaderOnRegisterResponseKey(void)::value;
}

void sub_1BF00117C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLocationForShortCodeCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[3];
  _QWORD v10[4];

  v10[3] = *MEMORY[0x1E0C80C00];
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, "NONE");
    std::string::basic_string[abi:ne180100]<0>(v8, "LATLONG");
    std::string::basic_string[abi:ne180100]<0>(v9, "CIVIC");
    std::string::basic_string[abi:ne180100]<0>(v10, "BOTH");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 4uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getLocationForShortCodeCallsKey(void)::value, "LocationForShortCodeCalls", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v10[i + 2]) < 0)
        operator delete((void *)v10[i]);
    }
  }
  return &ImsPrefs::getLocationForShortCodeCallsKey(void)::value;
}

void sub_1BF0012E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, char a14)
{
  uint64_t v15;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  v15 = 0;
  while (1)
  {
    if (*(&a14 + v15 + 95) < 0)
      operator delete(*(void **)(&a14 + v15 + 72));
    v15 -= 24;
    if (v15 == -96)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getDefaultAuthAlgorithmKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDefaultAuthAlgorithmKey(void)::value, "DefaultAuthAlgorithm", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDefaultAuthAlgorithmKey(void)::value;
}

void sub_1BF0013F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDefaultLocalSipPortKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5060;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDefaultLocalSipPortKey(void)::value, "DefaultLocalSipPort", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDefaultLocalSipPortKey(void)::value;
}

void sub_1BF001490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDefaultRemoteSipPortKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5060;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDefaultRemoteSipPortKey(void)::value, "DefaultRemoteSipPort", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDefaultRemoteSipPortKey(void)::value;
}

void sub_1BF001530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(void)::value, "DeferMediaActivationOnSessionConfirmed", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDeferMediaActivationOnSessionConfirmedKey(void)::value;
}

void sub_1BF0015C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDeferIncomingMessagesUntilWakeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferIncomingMessagesUntilWakeKey(void)::value, "DeferIncomingMessagesUntilWake", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDeferIncomingMessagesUntilWakeKey(void)::value;
}

void sub_1BF001668(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDeferReRegOnConnectivityDisableKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferReRegOnConnectivityDisableKey(void)::value, "DeferReRegOnConnectivityDisable", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDeferReRegOnConnectivityDisableKey(void)::value;
}

void sub_1BF001708(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDeferReRegOnSubDisableKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDeferReRegOnSubDisableKey(void)::value, "DeferReRegOnSubDisable", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDeferReRegOnSubDisableKey(void)::value;
}

void sub_1BF0017A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableSignalingReductionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSignalingReductionKey(void)::value, "EnableSignalingReduction", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableSignalingReductionKey(void)::value;
}

void sub_1BF001840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(void)::value, "DeregistrationWaitTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDeregistrationWaitTimeoutMillisecondsKey(void)::value;
}

void sub_1BF0018E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDialogEventPackageSessionDescriptionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDialogEventPackageSessionDescriptionKey(void)::value, "DialogEventPackageSessionDescription", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDialogEventPackageSessionDescriptionKey(void)::value;
}

void sub_1BF001978(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[40],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(void)::value, "DisableAccessNetworkInfoForAckAndCancel", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDisableAccessNetworkInfoForAckAndCancelKey(void)::value;
}

void sub_1BF001A10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDisableRegistrationOnNotifyEventsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1]>((uint64_t)&ImsPrefs::getDisableRegistrationOnNotifyEventsKey(void)::value, "DisableRegistrationOnNotifyEvents", "Signaling", &v3, (char *)&str_2_16);
  }
  return &ImsPrefs::getDisableRegistrationOnNotifyEventsKey(void)::value;
}

void sub_1BF001AAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(void)::value, "DontChangeProxiesDuringActiveCalls", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDontChangeProxiesDuringActiveCallsKey(void)::value;
}

void sub_1BF001B4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(void)::value, "DontThrottleOnRegistrationErrorCodes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDontThrottleOnRegistrationErrorCodesKey(void)::value;
}

void sub_1BF001BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[43],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(void)::value, "DontSendPreconditionsIfCallWaitingDisabled", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey(void)::value;
}

void sub_1BF001C84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropRegistrationOnCSFBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnCSFBKey(void)::value, "DropRegistrationOnCSFB", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDropRegistrationOnCSFBKey(void)::value;
}

void sub_1BF001D24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropRegistrationOnSRVCCKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnSRVCCKey(void)::value, "DropRegistrationOnSRVCC", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDropRegistrationOnSRVCCKey(void)::value;
}

void sub_1BF001DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(void)::value, "DropRegistrationOnAirplaneModeToggle", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDropRegistrationOnAirplaneModeToggleKey(void)::value;
}

void sub_1BF001E54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropRegistrationOnErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnErrorCodesKey(void)::value, "DropRegistrationOnErrorCodes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDropRegistrationOnErrorCodesKey(void)::value;
}

void sub_1BF001EF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropRegistrationOnWaitTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOnWaitTimeoutKey(void)::value, "DropRegistrationOnWaitTimeout", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDropRegistrationOnWaitTimeoutKey(void)::value;
}

void sub_1BF001F8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(void)::value, "DropRegistrationOn305ToAllProxies", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDropRegistrationOn305ToAllProxiesKey(void)::value;
}

void sub_1BF002024(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEarlyMediaNeedsHeaderKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEarlyMediaNeedsHeaderKey(void)::value, "EarlyMediaNeedsHeader", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEarlyMediaNeedsHeaderKey(void)::value;
}

void sub_1BF0020C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEchoRemotePreconditionStrengthKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEchoRemotePreconditionStrengthKey(void)::value, "EchoRemotePreconditionStrength", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEchoRemotePreconditionStrengthKey(void)::value;
}

void sub_1BF002164(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(void)::value, "EmergencyAnonymousAutomaticRedial", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(void)::value;
}

void sub_1BF0021FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(void)::value, "EmergencyCallBackModeExpirationSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyCallBackModeExpirationSecondsKey(void)::value;
}

void sub_1BF002298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 20;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(void)::value, "EmergencyCallSetupTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyCallSetupTimeoutSecondsKey(void)::value;
}

void sub_1BF00233C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(void)::value, "EmergencySessionSetupTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencySessionSetupTimeoutSecondsKey(void)::value;
}

void sub_1BF0023DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(void)::value, "EmergencyErrorResponsesToTriggerCSFB", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(void)::value;
}

void sub_1BF00247C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyImpuRankKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyImpuRankKey(void)::value, "EmergencyImpuRank", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getEmergencyImpuRankKey(void)::value;
}

void sub_1BF00251C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyLocationLookupRequiredKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEmergencyLocationLookupRequiredKey(void)::value, "EmergencyLocationLookupRequired", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyLocationLookupRequiredKey(void)::value;
}

void sub_1BF0025BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 8;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(void)::value, "EmergencyLocationLookupTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyLocationLookupTimeoutSecondsKey(void)::value;
}

void sub_1BF00265C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey(void)::value, "EmergencyLocationUpdateTimeSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyLocationUpdateTimeSecondsKey(void)::value;
}

void sub_1BF002700(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(void)::value, "EmergencyLocationUpdateTimeMinSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyLocationUpdateTimeMinSecondsKey(void)::value;
}

void sub_1BF0027A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(void)::value, "EmergencyLocationUpdateTimeSMSFixed", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyLocationUpdateTimeSMSFixedKey(void)::value;
}

void sub_1BF002840(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSupportsCurrentLocationDiscoveryKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportsCurrentLocationDiscoveryKey(void)::value, "SupportsCurrentLocationDiscovery", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSupportsCurrentLocationDiscoveryKey(void)::value;
}

void sub_1BF0028D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyPreferredIdentityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v5 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v7, "IMSI");
    std::string::basic_string[abi:ne180100]<0>(v8, "IMEI");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 2uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getEmergencyPreferredIdentityKey(void)::value, "EmergencyPreferredIdentity", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0)
        operator delete((void *)v8[i]);
    }
  }
  return &ImsPrefs::getEmergencyPreferredIdentityKey(void)::value;
}

void sub_1BF002A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v26;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v26 = 0;
  while (1)
  {
    if (*(&a25 + v26) < 0)
      operator delete(*(void **)((char *)&a20 + v26));
    v26 -= 24;
    if (v26 == -48)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getEmergencyRegistrationRequestUriKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyRegistrationRequestUriKey(void)::value, "EmergencyRegistrationRequestUri", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getEmergencyRegistrationRequestUriKey(void)::value;
}

void sub_1BF002B10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(void)::value, "EmergencyRegistrationTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyRegistrationTimeoutSecondsKey(void)::value;
}

void sub_1BF002BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyRegistrationRetryResponsesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getEmergencyRegistrationRetryResponsesKey(void)::value, "EmergencyRegistrationRetryResponses", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getEmergencyRegistrationRetryResponsesKey(void)::value;
}

void sub_1BF002C54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyRingbackTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyRingbackTimerSecondsKey(void)::value, "EmergencyRingbackTimerSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyRingbackTimerSecondsKey(void)::value;
}

void sub_1BF002CF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencySMSModeExpirationSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEmergencySMSModeExpirationSecondsKey(void)::value, "EmergencySMSModeExpirationSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEmergencySMSModeExpirationSecondsKey(void)::value;
}

void sub_1BF002D90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddLocationToEmergencySMSKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddLocationToEmergencySMSKey(void)::value, "AddLocationToEmergencySMS", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAddLocationToEmergencySMSKey(void)::value;
}

void sub_1BF002E30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_QWORD *ImsPrefs::getEmergencyURNsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;

  {
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL>(ImsPrefs::getEmergencyURNsKey(void)::value, "EmergencyURNs", "Signaling", &v3);
  }
  return ImsPrefs::getEmergencyURNsKey(void)::value;
}

void sub_1BF002EC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableATCommandModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableATCommandModeKey(void)::value, "EnableATCommandMode", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableATCommandModeKey(void)::value;
}

void sub_1BF002F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableCellularNetworkInfoKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableCellularNetworkInfoKey(void)::value, "EnableCellularNetworkInfo", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableCellularNetworkInfoKey(void)::value;
}

void sub_1BF002FF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableEmergencyRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableEmergencyRegistrationKey(void)::value, "EnableEmergencyRegistration", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableEmergencyRegistrationKey(void)::value;
}

void sub_1BF003098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableForkingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableForkingKey(void)::value, "EnableForking", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableForkingKey(void)::value;
}

void sub_1BF003138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableLastAccessNetworkInfoKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableLastAccessNetworkInfoKey(void)::value, "EnableLastAccessNetworkInfo", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableLastAccessNetworkInfoKey(void)::value;
}

void sub_1BF0031D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableReasonHeaderInByeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableReasonHeaderInByeKey(void)::value, "EnableReasonHeaderInBye", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableReasonHeaderInByeKey(void)::value;
}

void sub_1BF003270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableRportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRportKey(void)::value, "EnableRport", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableRportKey(void)::value;
}

void sub_1BF003310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableSenderNameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSenderNameKey(void)::value, "EnableSenderName", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableSenderNameKey(void)::value;
}

void sub_1BF0033B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableSessionIdKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSessionIdKey(void)::value, "EnableSessionId", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableSessionIdKey(void)::value;
}

void sub_1BF003450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableRegistrationSessionIdKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRegistrationSessionIdKey(void)::value, "EnableRegistrationSessionId", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnableRegistrationSessionIdKey(void)::value;
}

void sub_1BF0034F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEndCallOnAudioBearerRevokedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEndCallOnAudioBearerRevokedKey(void)::value, "EndCallOnAudioBearerRevoked", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEndCallOnAudioBearerRevokedKey(void)::value;
}

void sub_1BF003588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(void)::value, "EnforceMaximumEmergencyExpirationSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEnforceMaximumEmergencyExpirationSecondsKey(void)::value;
}

void sub_1BF003628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEPSFallbackTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getEPSFallbackTimerSecondsKey(void)::value, "EPSFallbackTimerSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getEPSFallbackTimerSecondsKey(void)::value;
}

void sub_1BF0036C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFastEmergencyLocationEnabledKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getFastEmergencyLocationEnabledKey(void)::value, "FastEmergencyLocationEnabled", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getFastEmergencyLocationEnabledKey(void)::value;
}

void sub_1BF003764(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(void)::value, "FastEmergencyLocationTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getFastEmergencyLocationTimeoutSecondsKey(void)::value;
}

void sub_1BF003804(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFatalSmsErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getFatalSmsErrorsKey(void)::value, "FatalSmsErrors", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getFatalSmsErrorsKey(void)::value;
}

void sub_1BF0038A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFatalTransportErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[6],BOOL>((uint64_t)&ImsPrefs::getFatalTransportErrorsKey(void)::value, "FatalTransportErrors", "Signaling", (unsigned __int8 *)&v3 + 1, "49,65", (char *)&v3);
  }
  return &ImsPrefs::getFatalTransportErrorsKey(void)::value;
}

void sub_1BF003944(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFeatureTagsEnabledKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getFeatureTagsEnabledKey(void)::value, "FeatureTagsEnabled", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getFeatureTagsEnabledKey(void)::value;
}

void sub_1BF0039E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getForbiddenRegistrationErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getForbiddenRegistrationErrorCodesKey(void)::value, "ForbiddenRegistrationErrorCodes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getForbiddenRegistrationErrorCodesKey(void)::value;
}

void sub_1BF003A84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getForceResetExistingTransportsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getForceResetExistingTransportsKey(void)::value, "ForceResetExistingTransports", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getForceResetExistingTransportsKey(void)::value;
}

void sub_1BF003B1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getForceTcpKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getForceTcpKey(void)::value, "ForceTcp", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getForceTcpKey(void)::value;
}

void sub_1BF003BB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getForceTlsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getForceTlsKey(void)::value, "ForceTls", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getForceTlsKey(void)::value;
}

void sub_1BF003C4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getForcedFeatureTagsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getForcedFeatureTagsKey(void)::value, "ForcedFeatureTags", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getForcedFeatureTagsKey(void)::value;
}

void sub_1BF003CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFuzzyContactMatchingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getFuzzyContactMatchingKey(void)::value, "FuzzyContactMatching", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getFuzzyContactMatchingKey(void)::value;
}

void sub_1BF003D8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getHonorSimAccessClassBeforeBarringKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getHonorSimAccessClassBeforeBarringKey(void)::value, "HonorSimAccessClassBeforeBarring", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getHonorSimAccessClassBeforeBarringKey(void)::value;
}

void sub_1BF003E24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIPSecSegmentOffsetKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getIPSecSegmentOffsetKey(void)::value, "IPSecSegmentOffset", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIPSecSegmentOffsetKey(void)::value;
}

void sub_1BF003EC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIPSecBringupUseNetworkPathKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIPSecBringupUseNetworkPathKey(void)::value, "IPSecBringupUseNetworkPath", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIPSecBringupUseNetworkPathKey(void)::value;
}

void sub_1BF003F60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(void)::value, "IPSecBringupTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIPSecBringupTimeoutMillisecondsKey(void)::value;
}

void sub_1BF004000(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysUseDefaultTransportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysUseDefaultTransportKey(void)::value, "AlwaysUseDefaultTransport", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysUseDefaultTransportKey(void)::value;
}

void sub_1BF004098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropTrafficOnUnknownTransportsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getDropTrafficOnUnknownTransportsKey(void)::value, "DropTrafficOnUnknownTransports", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDropTrafficOnUnknownTransportsKey(void)::value;
}

void sub_1BF004138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreDuplicateSDPKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreDuplicateSDPKey(void)::value, "IgnoreDuplicateSDP", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIgnoreDuplicateSDPKey(void)::value;
}

void sub_1BF0041D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreErrorsInTerminatedForksKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreErrorsInTerminatedForksKey(void)::value, "IgnoreErrorsInTerminatedForks", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIgnoreErrorsInTerminatedForksKey(void)::value;
}

void sub_1BF004270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(void)::value, "IgnoreNonCompliantSupportedHeaders", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIgnoreNonCompliantSupportedHeadersKey(void)::value;
}

void sub_1BF004310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreSessionRefreshErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreSessionRefreshErrorsKey(void)::value, "IgnoreSessionRefreshErrors", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIgnoreSessionRefreshErrorsKey(void)::value;
}

void sub_1BF0043A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreFromHeaderForSenderNameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreFromHeaderForSenderNameKey(void)::value, "IgnoreFromHeaderForSenderName", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIgnoreFromHeaderForSenderNameKey(void)::value;
}

void sub_1BF004448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreOverridesForWPSCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreOverridesForWPSCallsKey(void)::value, "IgnoreOverridesForWPSCalls", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIgnoreOverridesForWPSCallsKey(void)::value;
}

void sub_1BF0044E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreWPSCallsOverNRKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreWPSCallsOverNRKey(void)::value, "IgnoreWPSCallsOverNR", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIgnoreWPSCallsOverNRKey(void)::value;
}

void sub_1BF004580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(void)::value, "IgnoreNetworkUnreachableErrors", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIgnoreNetworkUnreachableErrorsKey(void)::value;
}

void sub_1BF004618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(void)::value, "IgnoreLimitedServiceInEmergencyMode", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIgnoreLimitedServiceInEmergencyModeKey(void)::value;
}

void sub_1BF0046B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreReregistrationErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getIgnoreReregistrationErrorCodesKey(void)::value, "IgnoreReregistrationErrorCodes", "Signaling", (unsigned __int8 *)&v3 + 1, "408", (char *)&v3);
  }
  return &ImsPrefs::getIgnoreReregistrationErrorCodesKey(void)::value;
}

void sub_1BF004758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreWifiHotspotKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreWifiHotspotKey(void)::value, "IgnoreWifiHotspot", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIgnoreWifiHotspotKey(void)::value;
}

void sub_1BF0047F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreRegNotificationContactExpiresKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreRegNotificationContactExpiresKey(void)::value, "IgnoreRegNotificationContactExpires", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIgnoreRegNotificationContactExpiresKey(void)::value;
}

void sub_1BF004890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getImpuRankKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getImpuRankKey(void)::value, "ImpuRank", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getImpuRankKey(void)::value;
}

void sub_1BF004930(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncomingCallEndReasonsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getIncomingCallEndReasonsKey(void)::value, "IncomingCallEndReasons", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getIncomingCallEndReasonsKey(void)::value;
}

void sub_1BF0049E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncomingPhoneNumberPrefixMapKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  if ((v1 & 1) == 0
  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getIncomingPhoneNumberPrefixMapKey(void)::value, "IncomingPhoneNumberPrefixMap", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getIncomingPhoneNumberPrefixMapKey(void)::value;
}

void sub_1BF004AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(void)::value, "IncompleteRegistrationThrottlingIntervalSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getIncompleteRegistrationThrottlingIntervalSecondsKey(void)::value;
}

void sub_1BF004B50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getInitialRemotePreconditionStrengthKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getInitialRemotePreconditionStrengthKey(void)::value, "InitialRemotePreconditionStrength", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getInitialRemotePreconditionStrengthKey(void)::value;
}

void sub_1BF004BF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[20],BOOL>((uint64_t)&ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(void)::value, "InviteErrorResponsesToTriggerCSFB", "Signaling", (unsigned __int8 *)&v3 + 1, "3XX,403,500,503,504", (char *)&v3);
  }
  return &ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(void)::value;
}

void sub_1BF004C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIR92PreconditionSupportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getIR92PreconditionSupportKey(void)::value, "IR92PreconditionSupport", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIR92PreconditionSupportKey(void)::value;
}

void sub_1BF004D28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getKillCallOnHoldResumeErrorKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getKillCallOnHoldResumeErrorKey(void)::value, "KillCallOnHoldResumeError", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getKillCallOnHoldResumeErrorKey(void)::value;
}

void sub_1BF004DC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getKillForkOnUpdateErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getKillForkOnUpdateErrorsKey(void)::value, "KillForkOnUpdateErrors", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getKillForkOnUpdateErrorsKey(void)::value;
}

void sub_1BF004E68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(void)::value, "KillRegistrationOnHandoverTimeout", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getKillRegistrationOnHandoverTimeoutKey(void)::value;
}

void sub_1BF004F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLegacyImpuRankKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getLegacyImpuRankKey(void)::value, "LegacyImpuRank", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getLegacyImpuRankKey(void)::value;
}

void sub_1BF004FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1800;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[44],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(void)::value, "LimitedConnectivityHysteresisTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getLimitedConnectivityHysteresisTimeoutSecondsKey(void)::value;
}

void sub_1BF005048(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(void)::value, "LimitedConnectivityHysteresisFromRegistration", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getLimitedConnectivityHysteresisFromRegistrationKey(void)::value;
}

void sub_1BF0050E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLocalQoSTimeoutMOSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getLocalQoSTimeoutMOSecondsKey(void)::value, "LocalQoSTimeoutMOSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getLocalQoSTimeoutMOSecondsKey(void)::value;
}

void sub_1BF00517C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLocalQoSTimeoutMTSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getLocalQoSTimeoutMTSecondsKey(void)::value, "LocalQoSTimeoutMTSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getLocalQoSTimeoutMTSecondsKey(void)::value;
}

void sub_1BF005218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaintainTransportForDurationOfSessionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getMaintainTransportForDurationOfSessionKey(void)::value, "MaintainTransportForDurationOfSession", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getMaintainTransportForDurationOfSessionKey(void)::value;
}

void sub_1BF0052B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxAuthRetriesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxAuthRetriesKey(void)::value, "MaxAuthRetries", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxAuthRetriesKey(void)::value;
}

void sub_1BF005350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxFatalRegistrationErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxFatalRegistrationErrorsKey(void)::value, "MaxFatalRegistrationErrors", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxFatalRegistrationErrorsKey(void)::value;
}

void sub_1BF0053F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxForbiddenErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxForbiddenErrorsKey(void)::value, "MaxForbiddenErrors", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxForbiddenErrorsKey(void)::value;
}

void sub_1BF005490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxReRegistrationAttemptsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxReRegistrationAttemptsKey(void)::value, "MaxReRegistrationAttempts", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxReRegistrationAttemptsKey(void)::value;
}

void sub_1BF005530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddLocationInInviteResponsesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getAddLocationInInviteResponsesKey(void)::value, "AddLocationInInviteResponses", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getAddLocationInInviteResponsesKey(void)::value;
}

void sub_1BF0055D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddServicesToUssdSessionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddServicesToUssdSessionsKey(void)::value, "AddServicesToUssdSessions", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAddServicesToUssdSessionsKey(void)::value;
}

void sub_1BF005670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(void)::value, "MaxRegistrationAttemptsPerProxy", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxRegistrationAttemptsPerProxyKey(void)::value;
}

void sub_1BF005710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxTransportErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxTransportErrorsKey(void)::value, "MaxTransportErrors", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxTransportErrorsKey(void)::value;
}

void sub_1BF0057AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxUdpMessageSizeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxUdpMessageSizeKey(void)::value, "MaxUdpMessageSize", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxUdpMessageSizeKey(void)::value;
}

void sub_1BF005848(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMinSessionExpiresSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 90;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMinSessionExpiresSecondsKey(void)::value, "MinSessionExpiresSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMinSessionExpiresSecondsKey(void)::value;
}

void sub_1BF0058E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMethodInPIDFKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,char const(&)[9],BOOL>((uint64_t)&ImsPrefs::getMethodInPIDFKey(void)::value, "MethodInPIDF", "Signaling", (unsigned __int8 *)&v3 + 1, "DBH_HELO", (char *)&v3);
  }
  return &ImsPrefs::getMethodInPIDFKey(void)::value;
}

void sub_1BF005988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNetworkBasedCallWaitingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getNetworkBasedCallWaitingKey(void)::value, "NetworkBasedCallWaiting", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getNetworkBasedCallWaitingKey(void)::value;
}

void sub_1BF005A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableVideoCallWaitingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableVideoCallWaitingKey(void)::value, "EnableVideoCallWaiting", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableVideoCallWaitingKey(void)::value;
}

void sub_1BF005AB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 60;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(void)::value, "NetworkTerminationRetryIntervalSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getNetworkTerminationRetryIntervalSecondsKey(void)::value;
}

void sub_1BF005B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNonPrivateEmergencyPrefixesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getNonPrivateEmergencyPrefixesKey(void)::value, "NonPrivateEmergencyPrefixes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getNonPrivateEmergencyPrefixesKey(void)::value;
}

void sub_1BF005BF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNoFallbackVoiceServiceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getNoFallbackVoiceServiceKey(void)::value, "NoFallbackVoiceService", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getNoFallbackVoiceServiceKey(void)::value;
}

void sub_1BF005C90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNonFatalReInviteResponsesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getNonFatalReInviteResponsesKey(void)::value, "NonFatalReInviteResponses", "Signaling", (unsigned __int8 *)&v3 + 1, "488", (char *)&v3);
  }
  return &ImsPrefs::getNonFatalReInviteResponsesKey(void)::value;
}

void sub_1BF005D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNumberOfSilentRedialAttemptsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getNumberOfSilentRedialAttemptsKey(void)::value, "NumberOfSilentRedialAttempts", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getNumberOfSilentRedialAttemptsKey(void)::value;
}

void sub_1BF005DCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(void)::value, "OnlyUpdatePreconditionsIfConfPresent", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getOnlyUpdatePreconditionsIfConfPresentKey(void)::value;
}

void sub_1BF005E6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getOutgoingDomainKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getOutgoingDomainKey(void)::value, "OutgoingDomain", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getOutgoingDomainKey(void)::value;
}

void sub_1BF005F0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseOutgoingSipUriKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseOutgoingSipUriKey(void)::value, "UseOutgoingSipUri", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseOutgoingSipUriKey(void)::value;
}

void sub_1BF005FA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPdnBringupTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 720;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPdnBringupTimerSecondsKey(void)::value, "PdnBringupTimerSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getPdnBringupTimerSecondsKey(void)::value;
}

void sub_1BF006044(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPerCallQoSIndicationsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getPerCallQoSIndicationsKey(void)::value, "PerCallQoSIndications", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getPerCallQoSIndicationsKey(void)::value;
}

void sub_1BF0060E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllow3DPIDFInMessagesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllow3DPIDFInMessagesKey(void)::value, "Allow3DPIDFInMessages", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllow3DPIDFInMessagesKey(void)::value;
}

void sub_1BF00617C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPIDFGeoPrivShapeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[4];

  v8[3] = *MEMORY[0x1E0C80C00];
  {
    v5 = 1;
    std::string::basic_string[abi:ne180100]<0>(&v7, "Circle");
    std::string::basic_string[abi:ne180100]<0>(v8, "Ellipsoid");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 2uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getPIDFGeoPrivShapeKey(void)::value, "PIDFGeoPrivShape", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -6; i -= 3)
    {
      if (SHIBYTE(v8[i + 2]) < 0)
        operator delete((void *)v8[i]);
    }
  }
  return &ImsPrefs::getPIDFGeoPrivShapeKey(void)::value;
}

void sub_1BF0062B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v26;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a13);
  v26 = 0;
  while (1)
  {
    if (*(&a25 + v26) < 0)
      operator delete(*(void **)((char *)&a20 + v26));
    v26 -= 24;
    if (v26 == -48)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getPIDFConfidenceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 1;
    v3 = 95;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPIDFConfidenceKey(void)::value, "PIDFConfidence", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getPIDFConfidenceKey(void)::value;
}

void sub_1BF0063B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPrackErrorDelayKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPrackErrorDelayKey(void)::value, "PrackErrorDelayMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getPrackErrorDelayKey(void)::value;
}

void sub_1BF006454(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreconditionAllowMTUpdateKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getPreconditionAllowMTUpdateKey(void)::value, "PreconditionAllowMTUpdate", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getPreconditionAllowMTUpdateKey(void)::value;
}

void sub_1BF0064EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(void)::value, "PreconditionUpdateDelayTimerMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getPreconditionUpdateDelayTimerMillisecondsKey(void)::value;
}

void sub_1BF00658C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreconditionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, "None");
    std::string::basic_string[abi:ne180100]<0>(v8, "Supported");
    std::string::basic_string[abi:ne180100]<0>(v9, "Required");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getPreconditionsKey(void)::value, "Preconditions", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  return &ImsPrefs::getPreconditionsKey(void)::value;
}

void sub_1BF0066E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0)
      operator delete(*(void **)(&a15 + v16 + 48));
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getPreferredAuthQopListKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPreferredAuthQopListKey(void)::value, "PreferredAuthQopList", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPreferredAuthQopListKey(void)::value;
}

void sub_1BF0067EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreferredSenderIdentityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPreferredSenderIdentityKey(void)::value, "PreferredSenderIdentity", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPreferredSenderIdentityKey(void)::value;
}

void sub_1BF00688C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreferredSenderNameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPreferredSenderNameKey(void)::value, "PreferredSenderName", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPreferredSenderNameKey(void)::value;
}

void sub_1BF00692C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPrivacyHeaderValueKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[3],BOOL>((uint64_t)&ImsPrefs::getPrivacyHeaderValueKey(void)::value, "PrivacyHeaderValue", "Signaling", (unsigned __int8 *)&v3 + 1, "id", (char *)&v3);
  }
  return &ImsPrefs::getPrivacyHeaderValueKey(void)::value;
}

void sub_1BF0069CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPrivateEmergencyPrefixesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPrivateEmergencyPrefixesKey(void)::value, "PrivateEmergencyPrefixes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPrivateEmergencyPrefixesKey(void)::value;
}

void sub_1BF006A6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getQueueUnreliableProvisionalResponsesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getQueueUnreliableProvisionalResponsesKey(void)::value, "QueueUnreliableProvisionalResponses", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getQueueUnreliableProvisionalResponsesKey(void)::value;
}

void sub_1BF006B0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReRegisterOnErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[11],BOOL>((uint64_t)&ImsPrefs::getReRegisterOnErrorCodesKey(void)::value, "ReRegisterOnErrorCodes", "Signaling", (unsigned __int8 *)&v3 + 1, "INVITE:494", (char *)&v3);
  }
  return &ImsPrefs::getReRegisterOnErrorCodesKey(void)::value;
}

void sub_1BF006BAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(void)::value, "ReRegisterOnInternalRequestTimeout", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(void)::value;
}

void sub_1BF006C44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReRegisterOnCellularHandoverKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReRegisterOnCellularHandoverKey(void)::value, "ReRegisterOnCellularHandover", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getReRegisterOnCellularHandoverKey(void)::value;
}

void sub_1BF006CDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRequireRegistrationOnEPSFallbackKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireRegistrationOnEPSFallbackKey(void)::value, "RequireRegistrationOnEPSFallback", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRequireRegistrationOnEPSFallbackKey(void)::value;
}

void sub_1BF006D74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(void)::value, "ReRegistrationHysteresisTimerMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getReRegistrationHysteresisTimerMillisecondsKey(void)::value;
}

void sub_1BF006E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReSubscribeOnReRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReSubscribeOnReRegistrationKey(void)::value, "ReSubscribeOnReRegistration", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getReSubscribeOnReRegistrationKey(void)::value;
}

void sub_1BF006EA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRefreshRegistrationDuringECBMKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRefreshRegistrationDuringECBMKey(void)::value, "RefreshRegistrationDuringECBM", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRefreshRegistrationDuringECBMKey(void)::value;
}

void sub_1BF006F48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegSubscriptionEnabledKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegSubscriptionEnabledKey(void)::value, "RegSubscriptionEnabled", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegSubscriptionEnabledKey(void)::value;
}

void sub_1BF006FE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegSubscriptionExpirationSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 600000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegSubscriptionExpirationSecondsKey(void)::value, "RegSubscriptionExpirationSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegSubscriptionExpirationSecondsKey(void)::value;
}

void sub_1BF00708C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegisterOnServiceUpdateKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegisterOnServiceUpdateKey(void)::value, "RegisterOnServiceUpdate", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegisterOnServiceUpdateKey(void)::value;
}

void sub_1BF00712C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[57],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(void)::value, "SkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFdd", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSkipReRegisterWhenNetworkTypeChangedOnNrBetweenTddAndFddKey(void)::value;
}

void sub_1BF0071C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationExpirationSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 600000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationExpirationSecondsKey(void)::value, "RegistrationExpirationSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationExpirationSecondsKey(void)::value;
}

void sub_1BF007268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(void)::value, "RegisterSmsWhenAccessBarringZero", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRegisterSmsWhenAccessBarringZeroKey(void)::value;
}

void sub_1BF007300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegisterSmsOnEmergencyPdnKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRegisterSmsOnEmergencyPdnKey(void)::value, "RegisterSmsOnEmergencyPdn", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRegisterSmsOnEmergencyPdnKey(void)::value;
}

void sub_1BF007398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationPolicyKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[8],BOOL>((uint64_t)&ImsPrefs::getRegistrationPolicyKey(void)::value, "RegistrationPolicy", "Signaling", (unsigned __int8 *)&v3 + 1, "default", (char *)&v3);
  }
  return &ImsPrefs::getRegistrationPolicyKey(void)::value;
}

void sub_1BF007438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationRefreshCushionPercentKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRefreshCushionPercentKey(void)::value, "RegistrationRefreshCushionPercent", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationRefreshCushionPercentKey(void)::value;
}

void sub_1BF0074D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationCoalesceCushionPercentKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 50;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationCoalesceCushionPercentKey(void)::value, "RegistrationCoalesceCushionPercent", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationCoalesceCushionPercentKey(void)::value;
}

void sub_1BF007578(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 120;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(void)::value, "RegistrationRetryBaseTimeSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationRetryBaseTimeSecondsKey(void)::value;
}

void sub_1BF007618(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 7200;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(void)::value, "RegistrationRetryMaxTimeSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationRetryMaxTimeSecondsKey(void)::value;
}

void sub_1BF0076B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationRetryIntervalsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,char const(&)[24],BOOL>((uint64_t)&ImsPrefs::getRegistrationRetryIntervalsKey(void)::value, "RegistrationRetryIntervals", "Signaling", (unsigned __int8 *)&v3 + 1, "30,30,60+15,120,480,900", (char *)&v3);
  }
  return &ImsPrefs::getRegistrationRetryIntervalsKey(void)::value;
}

void sub_1BF007758(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationThrottlingCushionPercentKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationThrottlingCushionPercentKey(void)::value, "RegistrationThrottlingCushionPercent", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationThrottlingCushionPercentKey(void)::value;
}

void sub_1BF0077F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(void)::value, "RemoveForkOnTransactionDoesNotExist", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRemoveForkOnTransactionDoesNotExistKey(void)::value;
}

void sub_1BF007890(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReportSipErrorsDuringReRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getReportSipErrorsDuringReRegistrationKey(void)::value, "ReportSipErrorsDuringReRegistration", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getReportSipErrorsDuringReRegistrationKey(void)::value;
}

void sub_1BF007928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(void)::value, "RequireExplicitPortsForEmergencyRoutes", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRequireExplicitPortsForEmergencyRoutesKey(void)::value;
}

void sub_1BF0079C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRequireQoSBeforeRingingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireQoSBeforeRingingKey(void)::value, "RequireQoSBeforeRinging", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRequireQoSBeforeRingingKey(void)::value;
}

void sub_1BF007A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(void)::value, "RequirePreconditionsWhenSdpPresent", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRequirePreconditionsWhenSdpPresentKey(void)::value;
}

void sub_1BF007AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRequirePreconditionsWhenMandatoryKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequirePreconditionsWhenMandatoryKey(void)::value, "RequirePreconditionsWhenMandatory", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRequirePreconditionsWhenMandatoryKey(void)::value;
}

void sub_1BF007B98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getVerstatFeatureCapabilityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, "Disabled");
    std::string::basic_string[abi:ne180100]<0>(v8, "Dynamic");
    std::string::basic_string[abi:ne180100]<0>(v9, "Enabled");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getVerstatFeatureCapabilityKey(void)::value, "VerstatFeatureCapability", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  return &ImsPrefs::getVerstatFeatureCapabilityKey(void)::value;
}

void sub_1BF007CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0)
      operator delete(*(void **)(&a15 + v16 + 48));
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getEnableBrandedCallingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableBrandedCallingKey(void)::value, "EnableBrandedCalling", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableBrandedCallingKey(void)::value;
}

void sub_1BF007DF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSpamHeaderFeatureCapabilityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  if ((v1 & 1) == 0
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, "Disabled");
    std::string::basic_string[abi:ne180100]<0>(v8, "Dynamic");
    std::string::basic_string[abi:ne180100]<0>(v9, "Enabled");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getSpamHeaderFeatureCapabilityKey(void)::value, "SpamHeaderFeatureCapability", "Signaling", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  return &ImsPrefs::getSpamHeaderFeatureCapabilityKey(void)::value;
}

void sub_1BF007F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0)
      operator delete(*(void **)(&a15 + v16 + 48));
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getResetCallIdOnAuthChallengeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetCallIdOnAuthChallengeKey(void)::value, "ResetCallIdOnAuthChallenge", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getResetCallIdOnAuthChallengeKey(void)::value;
}

void sub_1BF008050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResetCallIdOnInitialRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetCallIdOnInitialRegistrationKey(void)::value, "ResetCallIdOnInitialRegistration", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getResetCallIdOnInitialRegistrationKey(void)::value;
}

void sub_1BF0080E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResetConnectionsWhenClosedByPeerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetConnectionsWhenClosedByPeerKey(void)::value, "ResetConnectionsWhenClosedByPeer", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getResetConnectionsWhenClosedByPeerKey(void)::value;
}

void sub_1BF008188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResetSocketWhenNetworkChangeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetSocketWhenNetworkChangeKey(void)::value, "ResetSocketWhenNetworkChange", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getResetSocketWhenNetworkChangeKey(void)::value;
}

void sub_1BF008228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResetDisabledModeOnEventsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[32],BOOL>((uint64_t)&ImsPrefs::getResetDisabledModeOnEventsKey(void)::value, "ResetDisabledModeOnEvents", "Signaling", (unsigned __int8 *)&v3 + 1, "SimInserted,AirplaneModeToggled", (char *)&v3);
  }
  return &ImsPrefs::getResetDisabledModeOnEventsKey(void)::value;
}

void sub_1BF0082C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResetThrottlingOnEventsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[32],BOOL>((uint64_t)&ImsPrefs::getResetThrottlingOnEventsKey(void)::value, "ResetThrottlingOnEvents", "Signaling", (unsigned __int8 *)&v3 + 1, "SimInserted,AirplaneModeToggled", (char *)&v3);
  }
  return &ImsPrefs::getResetThrottlingOnEventsKey(void)::value;
}

void sub_1BF008368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRetryAfterStatusCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getRetryAfterStatusCodesKey(void)::value, "RetryAfterStatusCodes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getRetryAfterStatusCodesKey(void)::value;
}

void sub_1BF008408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreRetryAfterStatusCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getIgnoreRetryAfterStatusCodesKey(void)::value, "IgnoreRetryAfterStatusCodes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getIgnoreRetryAfterStatusCodesKey(void)::value;
}

void sub_1BF0084A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRestartRingbackTimerOn180Key(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRestartRingbackTimerOn180Key(void)::value, "RestartRingbackTimerOn180", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRestartRingbackTimerOn180Key(void)::value;
}

void sub_1BF008540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRingbackTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 45;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRingbackTimerSecondsKey(void)::value, "RingbackTimerSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRingbackTimerSecondsKey(void)::value;
}

void sub_1BF0085E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRingingTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 40;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getRingingTimerSecondsKey(void)::value, "RingingTimerSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getRingingTimerSecondsKey(void)::value;
}

void sub_1BF008680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSecurityAgreementOptionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getSecurityAgreementOptionsKey(void)::value, "SecurityAgreementOptions", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getSecurityAgreementOptionsKey(void)::value;
}

void sub_1BF008720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSecurityAgreementAlgsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[26]>((uint64_t)&ImsPrefs::getSecurityAgreementAlgsKey(void)::value, "SecurityAgreementAlgs", "Signaling", &v3, "hmac-md5-96,hmac-sha-1-96");
  }
  return &ImsPrefs::getSecurityAgreementAlgsKey(void)::value;
}

void sub_1BF0087BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSecurityAgreementEalgsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[13]>((uint64_t)&ImsPrefs::getSecurityAgreementEalgsKey(void)::value, "SecurityAgreementEalgs", "Signaling", &v3, "aes-cbc,null");
  }
  return &ImsPrefs::getSecurityAgreementEalgsKey(void)::value;
}

void sub_1BF008858(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendAcceptContactInInviteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendAcceptContactInInviteKey(void)::value, "SendAcceptContactInInvite", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSendAcceptContactInInviteKey(void)::value;
}

void sub_1BF0088F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendAcceptContactInSmsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendAcceptContactInSmsKey(void)::value, "SendAcceptContactInSms", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSendAcceptContactInSmsKey(void)::value;
}

void sub_1BF008998(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendEmergencyLocationUpdatesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendEmergencyLocationUpdatesKey(void)::value, "SendEmergencyLocationUpdates", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSendEmergencyLocationUpdatesKey(void)::value;
}

void sub_1BF008A38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendInitialInviteAsInactiveKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendInitialInviteAsInactiveKey(void)::value, "SendInitialInviteAsInactive", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendInitialInviteAsInactiveKey(void)::value;
}

void sub_1BF008AD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendResumeInviteAsSendRecvKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendResumeInviteAsSendRecvKey(void)::value, "SendResumeInviteAsSendRecv", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSendResumeInviteAsSendRecvKey(void)::value;
}

void sub_1BF008B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendLocalTimeZoneInformationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendLocalTimeZoneInformationKey(void)::value, "SendLocalTimeZoneInformation", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendLocalTimeZoneInformationKey(void)::value;
}

void sub_1BF008C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendOfferWithInviteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendOfferWithInviteKey(void)::value, "SendOfferWithInvite", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSendOfferWithInviteKey(void)::value;
}

void sub_1BF008CA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(void)::value, "SendPreconditionsInConfirmedSessions", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendPreconditionsInConfirmedSessionsKey(void)::value;
}

void sub_1BF008D40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendPreferredIdentityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreferredIdentityKey(void)::value, "SendPreferredIdentity", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSendPreferredIdentityKey(void)::value;
}

void sub_1BF008DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendPreferredServiceInInviteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreferredServiceInInviteKey(void)::value, "SendPreferredServiceInInvite", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendPreferredServiceInInviteKey(void)::value;
}

void sub_1BF008E78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendReInviteInInactiveSessionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendReInviteInInactiveSessionsKey(void)::value, "SendReInviteInInactiveSessions", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendReInviteInInactiveSessionsKey(void)::value;
}

void sub_1BF008F10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getServiceClassKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getServiceClassKey(void)::value, "ServiceClass", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getServiceClassKey(void)::value;
}

void sub_1BF008FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSessionExpiresSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSessionExpiresSecondsKey(void)::value, "SessionExpiresSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSessionExpiresSecondsKey(void)::value;
}

void sub_1BF00906C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSpamCallRiskLevelsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getSpamCallRiskLevelsKey(void)::value, "SpamCallRiskLevels", "Signaling", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getSpamCallRiskLevelsKey(void)::value;
}

void sub_1BF009120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSpamCallCategoryMappingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  unsigned __int8 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1]>((uint64_t)&ImsPrefs::getSpamCallCategoryMappingKey(void)::value, "SpamCallCategoryMapping", "Signaling", &v3, (char *)&str_2_16);
  }
  return &ImsPrefs::getSpamCallCategoryMappingKey(void)::value;
}

void sub_1BF0091C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(void)::value, "AllowEmergencyRegistrationInLimitedAccessOnWiFi", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getAllowEmergencyRegistrationInLimitedAccessOnWiFiKey(void)::value;
}

void sub_1BF009268(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(void)::value, "SetSessionTimerRefresherInInitialRequest", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSetSessionTimerRefresherInInitialRequestKey(void)::value;
}

void sub_1BF009300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSetCountryWithCampedPANIKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSetCountryWithCampedPANIKey(void)::value, "SetCountryWithCampedPANI", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSetCountryWithCampedPANIKey(void)::value;
}

void sub_1BF009398(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(void)::value, "SRVCCCleanupTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSRVCCCleanupTimeoutSecondsKey(void)::value;
}

void sub_1BF009438(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(void)::value, "StartLocalQosTimerOnSessionProgress", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getStartLocalQosTimerOnSessionProgressKey(void)::value;
}

void sub_1BF0094D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getStrictCallFlowTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getStrictCallFlowTimeoutKey(void)::value, "StrictCallFlowTimeoutInMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getStrictCallFlowTimeoutKey(void)::value;
}

void sub_1BF00956C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getStrictTS24930PreconditionHeadersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getStrictTS24930PreconditionHeadersKey(void)::value, "StrictTS24930PreconditionHeaders", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getStrictTS24930PreconditionHeadersKey(void)::value;
}

void sub_1BF009604(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSubscriptionRetryMaxSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 900;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSubscriptionRetryMaxSecondsKey(void)::value, "SubscriptionRetryMaxSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSubscriptionRetryMaxSecondsKey(void)::value;
}

void sub_1BF0096A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSubscriptionRetryMinSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSubscriptionRetryMinSecondsKey(void)::value, "SubscriptionRetryMinSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSubscriptionRetryMinSecondsKey(void)::value;
}

void sub_1BF009740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[50],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(void)::value, "SubscriptionTerminatedMeansRegistrationTerminated", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSubscriptionTerminatedMeansRegistrationTerminatedKey(void)::value;
}

void sub_1BF0097D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSupportPEarlyMediaHeaderKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportPEarlyMediaHeaderKey(void)::value, "SupportPEarlyMediaHeader", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSupportPEarlyMediaHeaderKey(void)::value;
}

void sub_1BF009878(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(void)::value, "SystemWakeWaitTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getSystemWakeWaitTimeoutMillisecondsKey(void)::value;
}

void sub_1BF009918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTLSKeepAliveIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTLSKeepAliveIntervalSecondsKey(void)::value, "TLSKeepAliveIntervalSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTLSKeepAliveIntervalSecondsKey(void)::value;
}

void sub_1BF0099B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTLSIdlePingIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1800;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTLSIdlePingIntervalSecondsKey(void)::value, "TLSIdlePingIntervalSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTLSIdlePingIntervalSecondsKey(void)::value;
}

void sub_1BF009A58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPCSCFDomainNameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPCSCFDomainNameKey(void)::value, "PCSCFDomainName", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPCSCFDomainNameKey(void)::value;
}

void sub_1BF009AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTCPIdlePingIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTCPIdlePingIntervalSecondsKey(void)::value, "TCPIdlePingIntervalSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTCPIdlePingIntervalSecondsKey(void)::value;
}

void sub_1BF009B94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 120;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(void)::value, "CRLFMinimumPingIntervalSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getCRLFMinimumPingIntervalSecondsKey(void)::value;
}

void sub_1BF009C34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(void)::value, "CRLFIdlePingThresholdCapSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getCRLFIdlePingThresholdCapSecondsKey(void)::value;
}

void sub_1BF009CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(void)::value, "UseCrlfIntervalFromRegistrationKeep", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseCrlfIntervalFromRegistrationKeepKey(void)::value;
}

void sub_1BF009D6C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTcpIdleTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTcpIdleTimeoutSecondsKey(void)::value, "TcpIdleTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTcpIdleTimeoutSecondsKey(void)::value;
}

void sub_1BF009E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTransferWaitForHoldTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransferWaitForHoldTimeoutKey(void)::value, "TransferWaitForHoldTimeout", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTransferWaitForHoldTimeoutKey(void)::value;
}

void sub_1BF009EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTransferWaitForJoinTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransferWaitForJoinTimeoutKey(void)::value, "TransferWaitForJoinTimeout", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTransferWaitForJoinTimeoutKey(void)::value;
}

void sub_1BF009F4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTransferHangupTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransferHangupTimeoutKey(void)::value, "TransferHangupTimeout", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTransferHangupTimeoutKey(void)::value;
}

void sub_1BF009FEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTransferorShouldSendByeRequestKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTransferorShouldSendByeRequestKey(void)::value, "TransferorShouldSendByeRequest", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getTransferorShouldSendByeRequestKey(void)::value;
}

void sub_1BF00A084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getExplicitTransferEnabledKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getExplicitTransferEnabledKey(void)::value, "ExplicitTransferEnabled", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getExplicitTransferEnabledKey(void)::value;
}

void sub_1BF00A124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getHoldTransferTargetSessionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getHoldTransferTargetSessionKey(void)::value, "HoldTransferTargetSession", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getHoldTransferTargetSessionKey(void)::value;
}

void sub_1BF00A1BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTransportInitTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getTransportInitTimeoutSecondsKey(void)::value, "TransportInitTimeoutSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTransportInitTimeoutSecondsKey(void)::value;
}

void sub_1BF00A25C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(void)::value, "TriggerCSFBOnLocalQoSTimeoutMO", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(void)::value;
}

void sub_1BF00A2FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(void)::value, "TriggerCSFBOnLocalQoSTimeoutMT", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey(void)::value;
}

void sub_1BF00A39C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTriggerCSFBOnSDPErrorKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnSDPErrorKey(void)::value, "TriggerCSFBOnSDPError", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getTriggerCSFBOnSDPErrorKey(void)::value;
}

void sub_1BF00A434(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(void)::value, "TriggerCSFBOnWaitForRingingTimeout", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(void)::value;
}

void sub_1BF00A4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(void)::value, "TimeoutRegistrationAllProxyErrorCodes", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getTimeoutRegistrationAllProxyErrorCodesKey(void)::value;
}

void sub_1BF00A574(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseAoRForSmsSenderIdentityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseAoRForSmsSenderIdentityKey(void)::value, "UseAoRForSmsSenderIdentity", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseAoRForSmsSenderIdentityKey(void)::value;
}

void sub_1BF00A60C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseCIDUrlInPIDFKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCIDUrlInPIDFKey(void)::value, "UseCIDUrlInPIDF", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseCIDUrlInPIDFKey(void)::value;
}

void sub_1BF00A6A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseTupleInPIDFKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseTupleInPIDFKey(void)::value, "UseTupleInPIDF", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseTupleInPIDFKey(void)::value;
}

void sub_1BF00A73C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseCampedAccessNetworkInPANIKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCampedAccessNetworkInPANIKey(void)::value, "UseCampedAccessNetworkInPANI", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseCampedAccessNetworkInPANIKey(void)::value;
}

void sub_1BF00A7D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseCompactHeadersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCompactHeadersKey(void)::value, "UseCompactHeaders", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseCompactHeadersKey(void)::value;
}

void sub_1BF00A86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseCorrectAckConstructionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCorrectAckConstructionKey(void)::value, "UseCorrectAckConstruction", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUseCorrectAckConstructionKey(void)::value;
}

void sub_1BF00A90C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseStrictBearerPreconditionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseStrictBearerPreconditionsKey(void)::value, "UseStrictBearerPreconditions", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUseStrictBearerPreconditionsKey(void)::value;
}

void sub_1BF00A9AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(void)::value, "RequireBearerPortMatchForPreconditions", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRequireBearerPortMatchForPreconditionsKey(void)::value;
}

void sub_1BF00AA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseBase64ForMultipartSMSKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseBase64ForMultipartSMSKey(void)::value, "UseBase64ForMultipartSMS", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUseBase64ForMultipartSMSKey(void)::value;
}

void sub_1BF00AAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseCustomSSOAuthKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseCustomSSOAuthKey(void)::value, "UseCustomSSOAuth", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseCustomSSOAuthKey(void)::value;
}

void sub_1BF00AB7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseDialogEventPackageKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseDialogEventPackageKey(void)::value, "UseDialogEventPackage", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseDialogEventPackageKey(void)::value;
}

void sub_1BF00AC14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseDummyImeiCheckDigitKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseDummyImeiCheckDigitKey(void)::value, "UseDummyImeiCheckDigit", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUseDummyImeiCheckDigitKey(void)::value;
}

void sub_1BF00ACB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(void)::value, "UseEphemeralSipSourcePortForTcp", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseEphemeralSipSourcePortForTcpKey(void)::value;
}

void sub_1BF00AD4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseFakeSAsForDeregistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseFakeSAsForDeregistrationKey(void)::value, "UseFakeSAsForDeregistration", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseFakeSAsForDeregistrationKey(void)::value;
}

void sub_1BF00ADE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseIPSecKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseIPSecKey(void)::value, "UseIPSec", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseIPSecKey(void)::value;
}

void sub_1BF00AE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseEphemeralRangeForIPSecKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseEphemeralRangeForIPSecKey(void)::value, "UseEphemeralRangeForIPSec", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUseEphemeralRangeForIPSecKey(void)::value;
}

void sub_1BF00AF1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxIPSecTransportRetriesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getMaxIPSecTransportRetriesKey(void)::value, "MaxIPSecTransportRetries", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getMaxIPSecTransportRetriesKey(void)::value;
}

void sub_1BF00AFBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDefaultIPSecPortKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 42550;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getDefaultIPSecPortKey(void)::value, "DefaultIPSecPort", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getDefaultIPSecPortKey(void)::value;
}

void sub_1BF00B05C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseNextProxyForPcscfRestorationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseNextProxyForPcscfRestorationKey(void)::value, "UseNextProxyForPcscfRestoration", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUseNextProxyForPcscfRestorationKey(void)::value;
}

void sub_1BF00B0FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(void)::value, "UseNormalIdentityForEmergencyCalls", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseNormalIdentityForEmergencyCallsKey(void)::value;
}

void sub_1BF00B194(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(void)::value, "UseNormalIdentityForEmergencyUSIM", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseNormalIdentityForEmergencyUSIMKey(void)::value;
}

void sub_1BF00B22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUsePublicDomainForPhoneContextKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getUsePublicDomainForPhoneContextKey(void)::value, "UsePublicDomainForPhoneContext", "Signaling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUsePublicDomainForPhoneContextKey(void)::value;
}

void sub_1BF00B2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUserAgentHeaderValueKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  unsigned __int8 v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[30],BOOL>((uint64_t)&ImsPrefs::getUserAgentHeaderValueKey(void)::value, "UserAgentHeaderValue", "Signaling", &v4, "${OS}/${OS_VERSION} ${DEVICE}", &v3);
  }
  return &ImsPrefs::getUserAgentHeaderValueKey(void)::value;
}

void sub_1BF00B36C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUssdResponseTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getUssdResponseTimeoutMillisecondsKey(void)::value, "UssdResponseTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getUssdResponseTimeoutMillisecondsKey(void)::value;
}

void sub_1BF00B40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getValidateSipMessageRecipientKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>((uint64_t)&ImsPrefs::getValidateSipMessageRecipientKey(void)::value, "ValidateSipMessageRecipient", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getValidateSipMessageRecipientKey(void)::value;
}

void sub_1BF00B4AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getVirtualInterfaceMtuKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getVirtualInterfaceMtuKey(void)::value, "VirtualInterfaceMtu", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getVirtualInterfaceMtuKey(void)::value;
}

void sub_1BF00B54C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 4000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(void)::value, "WaitForAckBeforeEndingCallTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(void)::value;
}

void sub_1BF00B5EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWaitForByeResponseTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForByeResponseTimeoutKey(void)::value, "WaitForByeResponseTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWaitForByeResponseTimeoutKey(void)::value;
}

void sub_1BF00B68C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWaitForCancelResponseTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 4000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForCancelResponseTimeoutKey(void)::value, "WaitForCancelResponseTimeoutMilliseconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWaitForCancelResponseTimeoutKey(void)::value;
}

void sub_1BF00B72C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWaitForRingingTimerMOSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 20;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForRingingTimerMOSecondsKey(void)::value, "WaitForRingingTimerMOSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWaitForRingingTimerMOSecondsKey(void)::value;
}

void sub_1BF00B7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWaitForRingingTimerMTSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 25;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForRingingTimerMTSecondsKey(void)::value, "WaitForRingingTimerMTSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWaitForRingingTimerMTSecondsKey(void)::value;
}

void sub_1BF00B86C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWaitForRingingTimerWPSSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWaitForRingingTimerWPSSecondsKey(void)::value, "WaitForRingingTimerWPSSeconds", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWaitForRingingTimerWPSSecondsKey(void)::value;
}

void sub_1BF00B908(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getWPSCSFBDelayTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>((uint64_t)&ImsPrefs::getWPSCSFBDelayTimeoutKey(void)::value, "WPSCSFBDelayTimeout", "Signaling", &v4, &v3);
  }
  return &ImsPrefs::getWPSCSFBDelayTimeoutKey(void)::value;
}

void sub_1BF00B9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[45],char const(&)[10],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(void)::value, "ResponseCodesBlockedForSilentRedialNRSANonEm", "Signaling", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(void)::value;
}

void sub_1BF00BA48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerAKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerAKey(void)::value, "A", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerAKey(void)::value;
}

void sub_1BF00BAE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerBKey(void)::value, "B", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerBKey(void)::value;
}

void sub_1BF00BB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerCKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerCKey(void)::value, "C", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerCKey(void)::value;
}

void sub_1BF00BC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerDKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 128000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerDKey(void)::value, "D", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerDKey(void)::value;
}

void sub_1BF00BCC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerEKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerEKey(void)::value, "E", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerEKey(void)::value;
}

void sub_1BF00BD5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerFKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerFKey(void)::value, "F", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerFKey(void)::value;
}

void sub_1BF00BDF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerGKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerGKey(void)::value, "G", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerGKey(void)::value;
}

void sub_1BF00BE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerHKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerHKey(void)::value, "H", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerHKey(void)::value;
}

void sub_1BF00BF30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerIKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerIKey(void)::value, "I", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerIKey(void)::value;
}

void sub_1BF00BFCC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerJKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerJKey(void)::value, "J", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerJKey(void)::value;
}

void sub_1BF00C068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerT1Key(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerT1Key(void)::value, "T1", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerT1Key(void)::value;
}

void sub_1BF00C108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerT2Key(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 16000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerT2Key(void)::value, "T2", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerT2Key(void)::value;
}

void sub_1BF00C1A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSipTimerT4Key(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 17000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSipTimerT4Key(void)::value, "T4", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSipTimerT4Key(void)::value;
}

void sub_1BF00C248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSip200RetransmitTimerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getSip200RetransmitTimerKey(void)::value, "200RetransmitTimer", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getSip200RetransmitTimerKey(void)::value;
}

void sub_1BF00C2E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAckReceiveTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getAckReceiveTimeoutKey(void)::value, "AckReceiveTimeout", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getAckReceiveTimeoutKey(void)::value;
}

void sub_1BF00C380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAckRetransmitTimerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getAckRetransmitTimerKey(void)::value, "AckRetransmitTimer", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getAckRetransmitTimerKey(void)::value;
}

void sub_1BF00C41C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegAwaitAuthTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getRegAwaitAuthTimeoutKey(void)::value, "RegAwaitAuthTimeout", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getRegAwaitAuthTimeoutKey(void)::value;
}

void sub_1BF00C4B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getInviteResponseTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getInviteResponseTimeoutKey(void)::value, "InviteResponseTimeout", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getInviteResponseTimeoutKey(void)::value;
}

void sub_1BF00C558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEPSInviteResponseTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getEPSInviteResponseTimeoutKey(void)::value, "EPSInviteResponseTimeout", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getEPSInviteResponseTimeoutKey(void)::value;
}

void sub_1BF00C5F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEmergencyInviteResponseTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[20],BOOL,int>((uint64_t)&ImsPrefs::getEmergencyInviteResponseTimeoutKey(void)::value, "EmergencyInviteResponseTimeout", "Signaling/SipTimers", &v4, &v3);
  }
  return &ImsPrefs::getEmergencyInviteResponseTimeoutKey(void)::value;
}

void sub_1BF00C690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(void)::value, "AddServicesToContactInConferenceSubscribe", "ConferenceCalling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddServicesToContactInConferenceSubscribeKey(void)::value;
}

void sub_1BF00C728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddSupportedHeaderToAllResponsesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddSupportedHeaderToAllResponsesKey(void)::value, "AddSupportedHeaderToAllResponses", "ConferenceCalling", &v4, &v3);
  }
  return &ImsPrefs::getAddSupportedHeaderToAllResponsesKey(void)::value;
}

void sub_1BF00C7C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(void)::value, "AlwaysSubscribeToConferenceEvents", "ConferenceCalling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysSubscribeToConferenceEventsKey(void)::value;
}

void sub_1BF00C860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,char const(&)[12],BOOL>((uint64_t)&ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(void)::value, "DisableMergeOnInviteErrorResponses", "ConferenceCalling", (unsigned __int8 *)&v3 + 1, "400,404,500", (char *)&v3);
  }
  return &ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(void)::value;
}

void sub_1BF00C900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getConferenceServerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  unsigned __int8 v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[18],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getConferenceServerKey(void)::value, "conferenceServer", "ConferenceCalling", &v4, (char *)&str_2_16, &v3);
  }
  return &ImsPrefs::getConferenceServerKey(void)::value;
}

void sub_1BF00C9A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTreatAllNotificationsAsPartialKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getTreatAllNotificationsAsPartialKey(void)::value, "TreatAllNotificationsAsPartial", "ConferenceCalling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getTreatAllNotificationsAsPartialKey(void)::value;
}

void sub_1BF00CA40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendConferenceSubscribeInNewDialogKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendConferenceSubscribeInNewDialogKey(void)::value, "SendConferenceSubscribeInNewDialog", "ConferenceCalling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendConferenceSubscribeInNewDialogKey(void)::value;
}

void sub_1BF00CAD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendConferenceSubscribeAfterRefersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendConferenceSubscribeAfterRefersKey(void)::value, "SendConferenceSubscribeAfterRefers", "ConferenceCalling", &v4, &v3);
  }
  return &ImsPrefs::getSendConferenceSubscribeAfterRefersKey(void)::value;
}

void sub_1BF00CB78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendReferToPeerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendReferToPeerKey(void)::value, "SendReferToPeer", "ConferenceCalling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendReferToPeerKey(void)::value;
}

void sub_1BF00CC10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSerializeRefersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSerializeRefersKey(void)::value, "SerializeRefers", "ConferenceCalling", &v4, &v3);
  }
  return &ImsPrefs::getSerializeRefersKey(void)::value;
}

void sub_1BF00CCB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSerializeParticipantsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getSerializeParticipantsKey(void)::value, "SerializeParticipants", "ConferenceCalling", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSerializeParticipantsKey(void)::value;
}

void sub_1BF00CD48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseDomainForConferenceServerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[18],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseDomainForConferenceServerKey(void)::value, "UseDomainForConferenceServer", "ConferenceCalling", &v4, &v3);
  }
  return &ImsPrefs::getUseDomainForConferenceServerKey(void)::value;
}

void sub_1BF00CDE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddBWSpecsAtSessionLevelKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddBWSpecsAtSessionLevelKey(void)::value, "AddBWSpecsAtSessionLevel", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddBWSpecsAtSessionLevelKey(void)::value;
}

void sub_1BF00CE80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowHoldMusicKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowHoldMusicKey(void)::value, "AllowHoldMusic", "Media", &v4, &v3);
  }
  return &ImsPrefs::getAllowHoldMusicKey(void)::value;
}

void sub_1BF00CF20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowIPv6UnicastAddressKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowIPv6UnicastAddressKey(void)::value, "AllowIPv6UnicastAddress", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAllowIPv6UnicastAddressKey(void)::value;
}

void sub_1BF00CFB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAlwaysPrintSDPFormatInfoKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getAlwaysPrintSDPFormatInfoKey(void)::value, "AlwaysPrintSDPFormatInfo", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAlwaysPrintSDPFormatInfoKey(void)::value;
}

void sub_1BF00D050(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getBandwidthSpecifierRRValueKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getBandwidthSpecifierRRValueKey(void)::value, "BandwidthSpecifierRRValue", "Media", &v4, &v3);
  }
  return &ImsPrefs::getBandwidthSpecifierRRValueKey(void)::value;
}

void sub_1BF00D0F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getBandwidthSpecifierRSValueKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 300;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getBandwidthSpecifierRSValueKey(void)::value, "BandwidthSpecifierRSValue", "Media", &v4, &v3);
  }
  return &ImsPrefs::getBandwidthSpecifierRSValueKey(void)::value;
}

void sub_1BF00D190(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSuppressBSUntilPreconditionsMetKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSuppressBSUntilPreconditionsMetKey(void)::value, "SuppressBSUntilPreconditionsMet", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSuppressBSUntilPreconditionsMetKey(void)::value;
}

void sub_1BF00D228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDTMFDigitDurationMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getDTMFDigitDurationMillisecondsKey(void)::value, "DTMFDigitDurationMilliseconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getDTMFDigitDurationMillisecondsKey(void)::value;
}

void sub_1BF00D2C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(void)::value, "DTMFInterDigitIntervalMilliseconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getDTMFInterDigitIntervalMillisecondsKey(void)::value;
}

void sub_1BF00D368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDTMFVolumeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[11],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getDTMFVolumeKey(void)::value, "DTMFVolume", "Media", &v4, &v3);
  }
  return &ImsPrefs::getDTMFVolumeKey(void)::value;
}

void sub_1BF00D404(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableBandwidthSpecifiersKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableBandwidthSpecifiersKey(void)::value, "EnableBandwidthSpecifiers", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableBandwidthSpecifiersKey(void)::value;
}

void sub_1BF00D49C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableRemoteRTCPDeactivationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRemoteRTCPDeactivationKey(void)::value, "EnableRemoteRTCPDeactivation", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableRemoteRTCPDeactivationKey(void)::value;
}

void sub_1BF00D534(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableDTXKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[10],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableDTXKey(void)::value, "EnableDTX", "Media", &v4, &v3);
  }
  return &ImsPrefs::getEnableDTXKey(void)::value;
}

void sub_1BF00D5D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableRingbackAudioForTextCallsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRingbackAudioForTextCallsKey(void)::value, "EnableRingbackAudioForTextCalls", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableRingbackAudioForTextCallsKey(void)::value;
}

void sub_1BF00D66C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableRTCPExtendedReportsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRTCPExtendedReportsKey(void)::value, "EnableRTCPExtendedReports", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableRTCPExtendedReportsKey(void)::value;
}

void sub_1BF00D704(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableSDPCandidateAttributeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableSDPCandidateAttributeKey(void)::value, "EnableSDPCandidateAttribute", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableSDPCandidateAttributeKey(void)::value;
}

void sub_1BF00D79C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getHideSessionLevelDirectionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getHideSessionLevelDirectionKey(void)::value, "HideSessionLevelDirection", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getHideSessionLevelDirectionKey(void)::value;
}

void sub_1BF00D834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getHoldHeartbeatIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getHoldHeartbeatIntervalSecondsKey(void)::value, "HoldHeartbeatIntervalSeconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getHoldHeartbeatIntervalSecondsKey(void)::value;
}

void sub_1BF00D8D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getInactivityTimerRTCPSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getInactivityTimerRTCPSecondsKey(void)::value, "InactivityTimerRTCPSeconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getInactivityTimerRTCPSecondsKey(void)::value;
}

void sub_1BF00D974(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getInactivityTimerRTPSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getInactivityTimerRTPSecondsKey(void)::value, "InactivityTimerRTPSeconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getInactivityTimerRTPSecondsKey(void)::value;
}

void sub_1BF00DA14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncludeEVSIOModesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeEVSIOModesKey(void)::value, "IncludeEVSIOModes", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIncludeEVSIOModesKey(void)::value;
}

void sub_1BF00DAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncludeSDPMaxRedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPMaxRedKey(void)::value, "IncludeSDPMaxRed", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIncludeSDPMaxRedKey(void)::value;
}

void sub_1BF00DB44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncludeSDPModeChangeCapabilityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPModeChangeCapabilityKey(void)::value, "IncludeSDPModeChangeCapability", "Media", &v4, &v3);
  }
  return &ImsPrefs::getIncludeSDPModeChangeCapabilityKey(void)::value;
}

void sub_1BF00DBE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncludeSDPModeChangeNeighborKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPModeChangeNeighborKey(void)::value, "IncludeSDPModeChangeNeighbor", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIncludeSDPModeChangeNeighborKey(void)::value;
}

void sub_1BF00DC7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIncludeSDPModeChangePeriodKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getIncludeSDPModeChangePeriodKey(void)::value, "IncludeSDPModeChangePeriod", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIncludeSDPModeChangePeriodKey(void)::value;
}

void sub_1BF00DD14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLocalRTCPReportIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getLocalRTCPReportIntervalSecondsKey(void)::value, "LocalRTCPReportIntervalSeconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getLocalRTCPReportIntervalSecondsKey(void)::value;
}

void sub_1BF00DDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxPacketizationTimeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 240;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getMaxPacketizationTimeKey(void)::value, "MaxPacketizationTime", "Media", &v4, &v3);
  }
  return &ImsPrefs::getMaxPacketizationTimeKey(void)::value;
}

void sub_1BF00DE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxRedundancyKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[14],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getMaxRedundancyKey(void)::value, "MaxRedundancy", "Media", &v4, &v3);
  }
  return &ImsPrefs::getMaxRedundancyKey(void)::value;
}

void sub_1BF00DEF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getModeChangeCapabilityKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getModeChangeCapabilityKey(void)::value, "ModeChangeCapability", "Media", &v4, &v3);
  }
  return &ImsPrefs::getModeChangeCapabilityKey(void)::value;
}

void sub_1BF00DF90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getModeChangeNeighborKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getModeChangeNeighborKey(void)::value, "ModeChangeNeighbor", "Media", &v4, &v3);
  }
  return &ImsPrefs::getModeChangeNeighborKey(void)::value;
}

void sub_1BF00E02C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getModeChangePeriodKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getModeChangePeriodKey(void)::value, "ModeChangePeriod", "Media", &v4, &v3);
  }
  return &ImsPrefs::getModeChangePeriodKey(void)::value;
}

void sub_1BF00E0CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getModeSetAMRNBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getModeSetAMRNBKey(void)::value, "ModeSetAMRNB", "Media", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getModeSetAMRNBKey(void)::value;
}

void sub_1BF00E16C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getModeSetAMRWBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getModeSetAMRWBKey(void)::value, "ModeSetAMRWB", "Media", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getModeSetAMRWBKey(void)::value;
}

void sub_1BF00E20C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSDPTemplateKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getSDPTemplateKey(void)::value, "SDPTemplate", "Media", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getSDPTemplateKey(void)::value;
}

void sub_1BF00E2AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getBindMediaToTransportInterfaceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getBindMediaToTransportInterfaceKey(void)::value, "BindMediaToTransportInterface", "Media", &v4, &v3);
  }
  return &ImsPrefs::getBindMediaToTransportInterfaceKey(void)::value;
}

void sub_1BF00E34C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnforceEarlyMediaDirectionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnforceEarlyMediaDirectionKey(void)::value, "EnforceEarlyMediaDirection", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnforceEarlyMediaDirectionKey(void)::value;
}

void sub_1BF00E3E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(void)::value, "EnforceEarlyMediaInactiveDirection", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnforceEarlyMediaInactiveDirectionKey(void)::value;
}

void sub_1BF00E47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseRemoteMediaOrderKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseRemoteMediaOrderKey(void)::value, "UseRemoteMediaOrder", "Media", &v4, &v3);
  }
  return &ImsPrefs::getUseRemoteMediaOrderKey(void)::value;
}

void sub_1BF00E51C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseRTPDetectionAutoStartKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseRTPDetectionAutoStartKey(void)::value, "UseRTPDetectionAutoStart", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseRTPDetectionAutoStartKey(void)::value;
}

void sub_1BF00E5B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLinkMonitorPreferenceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  uint64_t i;
  __int128 v4;
  char v5;
  void **v6;
  __int128 v7;
  _QWORD v8[3];
  _QWORD v9[4];

  v9[3] = *MEMORY[0x1E0C80C00];
  {
    v5 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v7, (char *)&str_2_16);
    std::string::basic_string[abi:ne180100]<0>(v8, "RTP");
    std::string::basic_string[abi:ne180100]<0>(v9, "RTCP");
    std::vector<std::string>::vector[abi:ne180100]((uint64_t)&v4, &v7, 3uLL);
    ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::vector<std::string>>((uint64_t)&ImsPrefs::getLinkMonitorPreferenceKey(void)::value, "LinkMonitorPreference", "Media", &v5, &v4);
    v6 = (void **)&v4;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v6);
    for (i = 0; i != -9; i -= 3)
    {
      if (SHIBYTE(v9[i + 2]) < 0)
        operator delete((void *)v9[i]);
    }
  }
  return &ImsPrefs::getLinkMonitorPreferenceKey(void)::value;
}

void sub_1BF00E708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, char a15)
{
  uint64_t v16;

  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a14);
  v16 = 0;
  while (1)
  {
    if (*(&a15 + v16 + 71) < 0)
      operator delete(*(void **)(&a15 + v16 + 48));
    v16 -= 24;
    if (v16 == -72)
    {
      _Unwind_Resume(a1);
    }
  }
}

void *ImsPrefs::getEnableIncomingDTMFKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableIncomingDTMFKey(void)::value, "EnableIncomingDTMF", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableIncomingDTMFKey(void)::value;
}

void sub_1BF00E80C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getOriginUsernameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  unsigned __int8 v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getOriginUsernameKey(void)::value, "OriginUsername", "Media", &v4, (char *)&str_2_16, &v3);
  }
  return &ImsPrefs::getOriginUsernameKey(void)::value;
}

void sub_1BF00E8B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPacketAlignmentAMRNBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getPacketAlignmentAMRNBKey(void)::value, "PacketAlignmentAMRNB", "Media", (unsigned __int8 *)&v3 + 1, "all", (char *)&v3);
  }
  return &ImsPrefs::getPacketAlignmentAMRNBKey(void)::value;
}

void sub_1BF00E954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPacketAlignmentAMRWBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getPacketAlignmentAMRWBKey(void)::value, "PacketAlignmentAMRWB", "Media", (unsigned __int8 *)&v3 + 1, "all", (char *)&v3);
  }
  return &ImsPrefs::getPacketAlignmentAMRWBKey(void)::value;
}

void sub_1BF00E9F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPacketizationTimeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 20;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPacketizationTimeKey(void)::value, "PacketizationTime", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPacketizationTimeKey(void)::value;
}

void sub_1BF00EA94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 102;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(void)::value, "PayloadTypeBWEfficientAMRNB", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeBWEfficientAMRNBKey(void)::value;
}

void sub_1BF00EB34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 104;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(void)::value, "PayloadTypeBWEfficientAMRWB", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeBWEfficientAMRWBKey(void)::value;
}

void sub_1BF00EBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeDTMF16KKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 105;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeDTMF16KKey(void)::value, "PayloadTypeDTMF16K", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeDTMF16KKey(void)::value;
}

void sub_1BF00EC74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeDTMF8KKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 100;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeDTMF8KKey(void)::value, "PayloadTypeDTMF8K", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeDTMF8KKey(void)::value;
}

void sub_1BF00ED14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 108;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(void)::value, "PayloadTypeOctetAlignAMRNB", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeOctetAlignAMRNBKey(void)::value;
}

void sub_1BF00EDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 110;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(void)::value, "PayloadTypeOctetAlignAMRWB", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeOctetAlignAMRWBKey(void)::value;
}

void sub_1BF00EE54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeTTYKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 111;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeTTYKey(void)::value, "PayloadTypeTTY", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeTTYKey(void)::value;
}

void sub_1BF00EEF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPayloadTypeTTYRedundancyKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 112;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPayloadTypeTTYRedundancyKey(void)::value, "PayloadTypeTTYRedundancy", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPayloadTypeTTYRedundancyKey(void)::value;
}

void sub_1BF00EF94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreferredAMRNBModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 7;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPreferredAMRNBModeKey(void)::value, "PreferredAMRNBMode", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPreferredAMRNBModeKey(void)::value;
}

void sub_1BF00F034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPreferredAMRWBModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 2;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getPreferredAMRWBModeKey(void)::value, "PreferredAMRWBMode", "Media", &v4, &v3);
  }
  return &ImsPrefs::getPreferredAMRWBModeKey(void)::value;
}

void sub_1BF00F0D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRTCPXRBasebandSupportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getRTCPXRBasebandSupportKey(void)::value, "RTCPXRBasebandSupport", "Media", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getRTCPXRBasebandSupportKey(void)::value;
}

void sub_1BF00F188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRTTBandwidthSpecifierASValueKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 4;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTBandwidthSpecifierASValueKey(void)::value, "RTTBandwidthSpecifierASValue", "Media", &v4, &v3);
  }
  return &ImsPrefs::getRTTBandwidthSpecifierASValueKey(void)::value;
}

void sub_1BF00F234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(void)::value, "RTTBandwidthSpecifierRTCPPercentage", "Media", &v4, &v3);
  }
  return &ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey(void)::value;
}

void sub_1BF00F2D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(void)::value, "RTTUpgradeResponseTimeoutMilliseconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getRTTUpgradeResponseTimeoutMillisecondsKey(void)::value;
}

void sub_1BF00F374(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getStopLocalRingbackToneOn181Key(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getStopLocalRingbackToneOn181Key(void)::value, "StopLocalRingbackToneOn181", "Media", &v4, &v3);
  }
  return &ImsPrefs::getStopLocalRingbackToneOn181Key(void)::value;
}

void sub_1BF00F414(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRTCPIntervalSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTCPIntervalSecondsKey(void)::value, "RTCPIntervalSeconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getRTCPIntervalSecondsKey(void)::value;
}

void sub_1BF00F4B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRTTNegotiationTimerSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 3;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getRTTNegotiationTimerSecondsKey(void)::value, "RTTNegotiationTimerSeconds", "Media", &v4, &v3);
  }
  return &ImsPrefs::getRTTNegotiationTimerSecondsKey(void)::value;
}

void sub_1BF00F550(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSRTPCryptoSuiteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getSRTPCryptoSuiteKey(void)::value, "SRTPCryptoSuite", "Media", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getSRTPCryptoSuiteKey(void)::value;
}

void sub_1BF00F5F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(void)::value, "SRTPEndToAccessEdgeProtection", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(void)::value;
}

void sub_1BF00F688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSRTPUnauthenticatedSRTPKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPUnauthenticatedSRTPKey(void)::value, "SRTPUnauthenticatedSRTP", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSRTPUnauthenticatedSRTPKey(void)::value;
}

void sub_1BF00F720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSRTPUnencryptedSRTCPKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPUnencryptedSRTCPKey(void)::value, "SRTPUnencryptedSRTCP", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSRTPUnencryptedSRTCPKey(void)::value;
}

void sub_1BF00F7B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSRTPUnencryptedSRTPKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSRTPUnencryptedSRTPKey(void)::value, "SRTPUnencryptedSRTP", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSRTPUnencryptedSRTPKey(void)::value;
}

void sub_1BF00F850(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSampleRateTTYKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 1000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[14],char const(&)[6],BOOL,int>((uint64_t)&ImsPrefs::getSampleRateTTYKey(void)::value, "SampleRateTTY", "Media", &v4, &v3);
  }
  return &ImsPrefs::getSampleRateTTYKey(void)::value;
}

void sub_1BF00F8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAudioCodecsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  _QWORD **v3;
  _QWORD *v4[2];
  unsigned __int8 v5;

  {
    v5 = 0;
    v4[0] = 0;
    v4[1] = 0;
    v3 = v4;
    ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,std::map<std::string,std::string>>((uint64_t)&ImsPrefs::getAudioCodecsKey(void)::value, "AudioCodecs", "Media", &v5, &v3);
    std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v3, v4[0]);
  }
  return &ImsPrefs::getAudioCodecsKey(void)::value;
}

void sub_1BF00F9A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAudioCodecListKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getAudioCodecListKey(void)::value, "AudioCodecList", "Media", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getAudioCodecListKey(void)::value;
}

void sub_1BF00FA50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEVSHardBwLimitKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[6],BOOL>((uint64_t)&ImsPrefs::getEVSHardBwLimitKey(void)::value, "EVSHardBwLimit", "Media", (unsigned __int8 *)&v3 + 1, "nb-wb", (char *)&v3);
  }
  return &ImsPrefs::getEVSHardBwLimitKey(void)::value;
}

void sub_1BF00FAF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEVSHardBrLimitKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[9],BOOL>((uint64_t)&ImsPrefs::getEVSHardBrLimitKey(void)::value, "EVSHardBrLimit", "Media", (unsigned __int8 *)&v3 + 1, "5.9-24.4", (char *)&v3);
  }
  return &ImsPrefs::getEVSHardBrLimitKey(void)::value;
}

void sub_1BF00FB90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRestrictSessionEVSBandwidthKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getRestrictSessionEVSBandwidthKey(void)::value, "RestrictSessionEVSBandwidth", "Media", &v4, &v3);
  }
  return &ImsPrefs::getRestrictSessionEVSBandwidthKey(void)::value;
}

void sub_1BF00FC30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getOrderEVSCodecsByCodecIDKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getOrderEVSCodecsByCodecIDKey(void)::value, "OrderEVSCodecsByCodecID", "Media", &v4, &v3);
  }
  return &ImsPrefs::getOrderEVSCodecsByCodecIDKey(void)::value;
}

void sub_1BF00FCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSupportAMRNBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportAMRNBKey(void)::value, "SupportAMRNB", "Media", &v4, &v3);
  }
  return &ImsPrefs::getSupportAMRNBKey(void)::value;
}

void sub_1BF00FD70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSupportAMRWBKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportAMRWBKey(void)::value, "SupportAMRWB", "Media", &v4, &v3);
  }
  return &ImsPrefs::getSupportAMRWBKey(void)::value;
}

void sub_1BF00FE10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSupportPCMAKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportPCMAKey(void)::value, "SupportPCMA", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSupportPCMAKey(void)::value;
}

void sub_1BF00FEA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSupportPCMUKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSupportPCMUKey(void)::value, "SupportPCMU", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSupportPCMUKey(void)::value;
}

void sub_1BF00FF40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseEphemeralRTPPortsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseEphemeralRTPPortsKey(void)::value, "UseEphemeralRTPPorts", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseEphemeralRTPPortsKey(void)::value;
}

void sub_1BF00FFD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(void)::value, "UseRestrictiveDirectionWhenCreatingAnswer", "Media", &v4, &v3);
  }
  return &ImsPrefs::getUseRestrictiveDirectionWhenCreatingAnswerKey(void)::value;
}

void sub_1BF010078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseSDPTemplateForAllInvitesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseSDPTemplateForAllInvitesKey(void)::value, "UseSDPTemplateForAllInvites", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseSDPTemplateForAllInvitesKey(void)::value;
}

void sub_1BF010110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseSDPTemplateForUpdatesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseSDPTemplateForUpdatesKey(void)::value, "UseSDPTemplateForUpdates", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseSDPTemplateForUpdatesKey(void)::value;
}

void sub_1BF0101A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(void)::value, "SuppressOctetAlignAttributeForBECodecs", "Media", &v4, &v3);
  }
  return &ImsPrefs::getSuppressOctetAlignAttributeForBECodecsKey(void)::value;
}

void sub_1BF010248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSelectForkWithActiveEarlyMediaKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSelectForkWithActiveEarlyMediaKey(void)::value, "SelectForkWithActiveEarlyMedia", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSelectForkWithActiveEarlyMediaKey(void)::value;
}

void sub_1BF0102E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(void)::value, "SelectLatestForkWithActiveEarlyMedia", "Media", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSelectLatestForkWithActiveEarlyMediaKey(void)::value;
}

void sub_1BF010378(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableAPOnlyModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[16],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableAPOnlyModeKey(void)::value, "EnableAPOnlyMode", "Media/VoiceOnAP", &v4, &v3);
  }
  return &ImsPrefs::getEnableAPOnlyModeKey(void)::value;
}

void sub_1BF010418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableANBRKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[16],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableANBRKey(void)::value, "EnableANBR", "Media/VoiceOnAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableANBRKey(void)::value;
}

void sub_1BF0104B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableRateAdaptationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[16],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableRateAdaptationKey(void)::value, "EnableRateAdaptation", "Media/VoiceOnAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableRateAdaptationKey(void)::value;
}

void sub_1BF010548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapAuidKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[5],BOOL,char const(&)[22],BOOL>((uint64_t)&ImsPrefs::getXcapAuidKey(void)::value, "Auid", "XCAP", (unsigned __int8 *)&v3 + 1, "simservs.ngn.etsi.org", (char *)&v3);
  }
  return &ImsPrefs::getXcapAuidKey(void)::value;
}

void sub_1BF0105E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapBsfHostKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapBsfHostKey(void)::value, "BsfHost", "XCAP", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getXcapBsfHostKey(void)::value;
}

void sub_1BF010688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapBsfPortKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapBsfPortKey(void)::value, "BsfPort", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapBsfPortKey(void)::value;
}

void sub_1BF010724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapBsfUseSecureTransportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapBsfUseSecureTransportKey(void)::value, "BsfUseSecureTransport", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapBsfUseSecureTransportKey(void)::value;
}

void sub_1BF0107BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapContentTypeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[5],BOOL,char const(&)[34],BOOL>((uint64_t)&ImsPrefs::getXcapContentTypeKey(void)::value, "ContentType", "XCAP", (unsigned __int8 *)&v3 + 1, "application/vnd.etsi.simservs+xml", (char *)&v3);
  }
  return &ImsPrefs::getXcapContentTypeKey(void)::value;
}

void sub_1BF01085C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapDisableOnNetworkErrorKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapDisableOnNetworkErrorKey(void)::value, "DisableOnNetworkError", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapDisableOnNetworkErrorKey(void)::value;
}

void sub_1BF0108FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapFetchAllCDIVRulesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapFetchAllCDIVRulesKey(void)::value, "FetchAllCDIVRules", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapFetchAllCDIVRulesKey(void)::value;
}

void sub_1BF010994(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapForbiddenHttpErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,char const(&)[32],BOOL>((uint64_t)&ImsPrefs::getXcapForbiddenHttpErrorCodesKey(void)::value, "ForbiddenHttpErrorCodes", "XCAP", (unsigned __int8 *)&v3 + 1, "400,403,404,500,501,502,503,504", (char *)&v3);
  }
  return &ImsPrefs::getXcapForbiddenHttpErrorCodesKey(void)::value;
}

void sub_1BF010A34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(void)::value, "ImeiHeaderNameInBsfRequest", "XCAP", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getXcapImeiHeaderNameInBsfRequestKey(void)::value;
}

void sub_1BF010AD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapImpuRankKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapImpuRankKey(void)::value, "ImpuRank", "XCAP", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getXcapImpuRankKey(void)::value;
}

void sub_1BF010B74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapNafHostKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapNafHostKey(void)::value, "NafHost", "XCAP", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getXcapNafHostKey(void)::value;
}

void sub_1BF010C14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapNafPortKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapNafPortKey(void)::value, "NafPort", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapNafPortKey(void)::value;
}

void sub_1BF010CB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapNafUseSecureTransportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapNafUseSecureTransportKey(void)::value, "NafUseSecureTransport", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapNafUseSecureTransportKey(void)::value;
}

void sub_1BF010D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapPreferredGbaModeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[5],BOOL,char const(&)[7],BOOL>((uint64_t)&ImsPrefs::getXcapPreferredGbaModeKey(void)::value, "PreferredGbaMode", "XCAP", (unsigned __int8 *)&v3 + 1, "GBA_ME", (char *)&v3);
  }
  return &ImsPrefs::getXcapPreferredGbaModeKey(void)::value;
}

void sub_1BF010DE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapRequestTimeoutValueKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapRequestTimeoutValueKey(void)::value, "RequestTimeoutValue", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapRequestTimeoutValueKey(void)::value;
}

void sub_1BF010E88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapUnsolicitedRequestDelayKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,int>((uint64_t)&ImsPrefs::getXcapUnsolicitedRequestDelayKey(void)::value, "UnsolicitedRequestDelay", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapUnsolicitedRequestDelayKey(void)::value;
}

void sub_1BF010F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapReuseAuthCredentialsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapReuseAuthCredentialsKey(void)::value, "ReuseAuthCredentials", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapReuseAuthCredentialsKey(void)::value;
}

void sub_1BF010FC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(void)::value, "ServeMultipleCDIVRulesPerRequest", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapServeMultipleCDIVRulesPerRequestKey(void)::value;
}

void sub_1BF011060(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapCFErasureSupportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCFErasureSupportKey(void)::value, "SupportsCFErasure", "XCAP", &v4, &v3);
  }
  return &ImsPrefs::getXcapCFErasureSupportKey(void)::value;
}

void sub_1BF011100(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapCFMediaTagSupportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCFMediaTagSupportKey(void)::value, "SupportCFMediaTag", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapCFMediaTagSupportKey(void)::value;
}

void sub_1BF011198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapCBSupportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCBSupportKey(void)::value, "SupportsCB", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapCBSupportKey(void)::value;
}

void sub_1BF011230(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapCBMediaTagSupportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapCBMediaTagSupportKey(void)::value, "SupportCBMediaTag", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapCBMediaTagSupportKey(void)::value;
}

void sub_1BF0112C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapUtInterfaceTypeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getXcapUtInterfaceTypeKey(void)::value, "UtInterfaceType", "XCAP", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getXcapUtInterfaceTypeKey(void)::value;
}

void sub_1BF011368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapUseSecureTransportKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getXcapUseSecureTransportKey(void)::value, "useSecureTransport", "XCAP", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getXcapUseSecureTransportKey(void)::value;
}

void sub_1BF011400(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getXcapHttpVersionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[4],BOOL>((uint64_t)&ImsPrefs::getXcapHttpVersionKey(void)::value, "XcapHttpVersion", "XCAP", (unsigned __int8 *)&v3 + 1, "1.1", (char *)&v3);
  }
  return &ImsPrefs::getXcapHttpVersionKey(void)::value;
}

void sub_1BF0114A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAllowRTPStackHandoverKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getAllowRTPStackHandoverKey(void)::value, "AllowRTPStackHandover", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getAllowRTPStackHandoverKey(void)::value;
}

void sub_1BF011540(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[40],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(void)::value, "MediaSessionHandoverTimeoutMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getMediaSessionHandoverTimeoutMillisecondsKey(void)::value;
}

void sub_1BF0115E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAutoRingTimerMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 50;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getAutoRingTimerMillisecondsKey(void)::value, "AutoRingTimerMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getAutoRingTimerMillisecondsKey(void)::value;
}

void sub_1BF011680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getClearThrottlingOnSocketErrorsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[30],char const(&)[9],BOOL,char const(&)[9],BOOL>((uint64_t)&ImsPrefs::getClearThrottlingOnSocketErrorsKey(void)::value, "ClearThrottlingOnSocketErrors", "Internal", (unsigned __int8 *)&v3 + 1, "49,60,65", (char *)&v3);
  }
  return &ImsPrefs::getClearThrottlingOnSocketErrorsKey(void)::value;
}

void sub_1BF011720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[45],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(void)::value, "ConferenceParticipantJoinTimeoutMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey(void)::value;
}

void sub_1BF0117C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 15000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(void)::value, "ConferenceWaitForHoldTimeoutMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(void)::value;
}

void sub_1BF011860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 6;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(void)::value, "CSFBDeregisterTimeoutSeconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getCSFBDeregisterTimeoutSecondsKey(void)::value;
}

void sub_1BF011900(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEndConferenceOn405Key(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getEndConferenceOn405Key(void)::value, "EndConferenceOn405", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getEndConferenceOn405Key(void)::value;
}

void sub_1BF0119A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDeviceIMEIKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[11],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDeviceIMEIKey(void)::value, "DeviceIMEI", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDeviceIMEIKey(void)::value;
}

void sub_1BF011A40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDisableDeviceSVNKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getDisableDeviceSVNKey(void)::value, "DisableDeviceSVN", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getDisableDeviceSVNKey(void)::value;
}

void sub_1BF011AE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDisplayNameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDisplayNameKey(void)::value, "DisplayName", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDisplayNameKey(void)::value;
}

void sub_1BF011B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDigestPasswordKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDigestPasswordKey(void)::value, "DigestPassword", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDigestPasswordKey(void)::value;
}

void sub_1BF011C20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDigestUsernameKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDigestUsernameKey(void)::value, "DigestUsername", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDigestUsernameKey(void)::value;
}

void sub_1BF011CC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDomainKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[7],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDomainKey(void)::value, "Domain", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDomainKey(void)::value;
}

void sub_1BF011D60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropIncomingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDropIncomingKey(void)::value, "DropIncoming", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDropIncomingKey(void)::value;
}

void sub_1BF011E00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDropOutgoingKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getDropOutgoingKey(void)::value, "DropOutgoing", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getDropOutgoingKey(void)::value;
}

void sub_1BF011EA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getFatalRegistrationErrorCodesKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getFatalRegistrationErrorCodesKey(void)::value, "FatalRegistrationErrorCodes", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getFatalRegistrationErrorCodesKey(void)::value;
}

void sub_1BF011F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[44],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(void)::value, "EnableBasebandAssertOnInitializationFailure", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getEnableBasebandAssertOnInitializationFailureKey(void)::value;
}

void sub_1BF011FD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getHoldResumeTimerMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 10000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getHoldResumeTimerMillisecondsKey(void)::value, "HoldResumeTimerMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getHoldResumeTimerMillisecondsKey(void)::value;
}

void sub_1BF012078(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getHonorForbiddenRetryAfterKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getHonorForbiddenRetryAfterKey(void)::value, "HonorForbiddenRetryAfter", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getHonorForbiddenRetryAfterKey(void)::value;
}

void sub_1BF012118(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getIgnoreSessionTimerExpirationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getIgnoreSessionTimerExpirationKey(void)::value, "IgnoreSessionTimerExpiration", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getIgnoreSessionTimerExpirationKey(void)::value;
}

void sub_1BF0121B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getInternalDisableSipInstanceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getInternalDisableSipInstanceKey(void)::value, "InternalDisableSipInstance", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getInternalDisableSipInstanceKey(void)::value;
}

void sub_1BF012248(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getImpiKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getImpiKey(void)::value, "Impi", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getImpiKey(void)::value;
}

void sub_1BF0122E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getImpuKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getImpuKey(void)::value, "Impu", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getImpuKey(void)::value;
}

void sub_1BF012388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLoggingParamsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[14],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getLoggingParamsKey(void)::value, "LoggingParams", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getLoggingParamsKey(void)::value;
}

void sub_1BF012428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxCallCountKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 3;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMaxCallCountKey(void)::value, "MaxCallCount", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getMaxCallCountKey(void)::value;
}

void sub_1BF0124C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMaxProxyResolveAttemptsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMaxProxyResolveAttemptsKey(void)::value, "MaxProxyResolveAttempts", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getMaxProxyResolveAttemptsKey(void)::value;
}

void sub_1BF012568(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMediaAddressTypeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getMediaAddressTypeKey(void)::value, "MediaAddressType", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getMediaAddressTypeKey(void)::value;
}

void sub_1BF012608(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMediaInterfaceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getMediaInterfaceKey(void)::value, "MediaInterface", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getMediaInterfaceKey(void)::value;
}

void sub_1BF0126A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMediaInitTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMediaInitTimeoutKey(void)::value, "MediaInitTimeoutMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getMediaInitTimeoutKey(void)::value;
}

void sub_1BF012748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 5000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(void)::value, "MultiCallHoldResumeTimerMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(void)::value;
}

void sub_1BF0127E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNewSubscriptionOnReRegistrationKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getNewSubscriptionOnReRegistrationKey(void)::value, "NewSubscriptionOnReRegistration", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getNewSubscriptionOnReRegistrationKey(void)::value;
}

void sub_1BF012880(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getNetworkInterfaceKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getNetworkInterfaceKey(void)::value, "NetworkInterface", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getNetworkInterfaceKey(void)::value;
}

void sub_1BF012920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getOutgoingUriKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getOutgoingUriKey(void)::value, "OutgoingUri", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getOutgoingUriKey(void)::value;
}

void sub_1BF0129C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPcscfOverrideKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[14],char const(&)[9],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPcscfOverrideKey(void)::value, "PcscfOverride", "Internal", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPcscfOverrideKey(void)::value;
}

void sub_1BF012A60(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRejectSMSWithFakeTimeoutKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getRejectSMSWithFakeTimeoutKey(void)::value, "RejectSMSWithFakeTimeout", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getRejectSMSWithFakeTimeoutKey(void)::value;
}

void sub_1BF012AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getReRegisterOnMobikeHandoverKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getReRegisterOnMobikeHandoverKey(void)::value, "ReRegisterOnMobikeHandover", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getReRegisterOnMobikeHandoverKey(void)::value;
}

void sub_1BF012B90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResponseCodesAllowedForSilentRedialKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[9],BOOL,char const(&)[2],BOOL>((uint64_t)&ImsPrefs::getResponseCodesAllowedForSilentRedialKey(void)::value, "ResponseCodesAllowedForSilentRedial", "Internal", (unsigned __int8 *)&v3 + 1, "*", (char *)&v3);
  }
  return &ImsPrefs::getResponseCodesAllowedForSilentRedialKey(void)::value;
}

void sub_1BF012C30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationExpirationCushionSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 600;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationExpirationCushionSecondsKey(void)::value, "RegistrationExpirationCushionSeconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationExpirationCushionSecondsKey(void)::value;
}

void sub_1BF012CD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 900;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(void)::value, "RegistrationRefreshCushionCapSeconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationRefreshCushionCapSecondsKey(void)::value;
}

void sub_1BF012D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 30;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[40],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(void)::value, "RegistrationThrottlingCushionCapSeconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getRegistrationThrottlingCushionCapSecondsKey(void)::value;
}

void sub_1BF012E10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSessionExpiresCushionKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 5;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getSessionExpiresCushionKey(void)::value, "SessionExpiresCushion", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getSessionExpiresCushionKey(void)::value;
}

void sub_1BF012EB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getShutdownWaitTimeSecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 1;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getShutdownWaitTimeSecondsKey(void)::value, "ShutdownWaitTimeSeconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getShutdownWaitTimeSecondsKey(void)::value;
}

void sub_1BF012F50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  if ((v1 & 1) == 0
  {
    v4 = 0;
    v3 = 2000;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[9],BOOL,int>((uint64_t)&ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(void)::value, "TTYReinviteTimeoutMilliseconds", "Internal", &v4, &v3);
  }
  return &ImsPrefs::getTTYReinviteTimeoutMillisecondsKey(void)::value;
}

void sub_1BF012FF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseAPMediaStackKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[9],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseAPMediaStackKey(void)::value, "UseAPMediaStack", "Internal", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseAPMediaStackKey(void)::value;
}

void sub_1BF013088(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(void)::value, "ResetCallIdOn401WithoutSecurityServer", "Cert", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getResetCallIdOn401WithoutSecurityServerKey(void)::value;
}

void sub_1BF013120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseUacAsRefresherKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseUacAsRefresherKey(void)::value, "UseUacAsRefresher", "Cert", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseUacAsRefresherKey(void)::value;
}

void sub_1BF0131B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(void)::value, "AddPreconditionToSupportedHeaderIfEnabled", "Cert", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getAddPreconditionToSupportedHeaderIfEnabledKey(void)::value;
}

void sub_1BF013250(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[52],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(void)::value, "UseInviteToRefreshSessionIfRemoteDoesNotAllowUpdate", "Cert", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getUseInviteToRefreshSessionIfRemoteDoesNotAllowUpdateKey(void)::value;
}

void sub_1BF0132E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  if ((v1 & 1) == 0
  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[54],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(void)::value, "DoNotRefreshSessionIfNoSessionExpiresHeaderFromRemote", "Cert", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getDoNotRefreshSessionIfNoSessionExpiresHeaderFromRemoteKey(void)::value;
}

void sub_1BF013380(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSendPreconditionsInPrackKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[5],BOOL,BOOL>((uint64_t)&ImsPrefs::getSendPreconditionsInPrackKey(void)::value, "SendPreconditionsInPrack", "Cert", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getSendPreconditionsInPrackKey(void)::value;
}

void sub_1BF013418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getPcscfKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[6],char const(&)[12],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getPcscfKey(void)::value, "pcscf", "IPTelephony", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getPcscfKey(void)::value;
}

void sub_1BF0134B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getBlockSilentRedialOverCSKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  char v3;
  char v4;

  {
    v4 = 1;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getBlockSilentRedialOverCSKey(void)::value, "BlockSilentRedialOverCS", "Voice", &v4, &v3);
  }
  return &ImsPrefs::getBlockSilentRedialOverCSKey(void)::value;
}

void sub_1BF013558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getTTYOverImsSupportedKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,BOOL>((uint64_t)&ImsPrefs::getTTYOverImsSupportedKey(void)::value, "ttyIMSSupported", "Voice", (char *)&v3 + 1, &v3);
  }
  return &ImsPrefs::getTTYOverImsSupportedKey(void)::value;
}

void sub_1BF0135F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCallTransferDialNumberKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[13],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCallTransferDialNumberKey(void)::value, "CallTransferDialNumber", "CallTransfer", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getCallTransferDialNumberKey(void)::value;
}

void sub_1BF013690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCallTransferRequestUriKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[13],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCallTransferRequestUriKey(void)::value, "CallTransferRequestUri", "CallTransfer", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getCallTransferRequestUriKey(void)::value;
}

void sub_1BF013730(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getCallTransferToUriKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[13],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getCallTransferToUriKey(void)::value, "CallTransferToUri", "CallTransfer", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getCallTransferToUriKey(void)::value;
}

void sub_1BF0137D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getSwitchoverSizeKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  int v3;
  char v4;

  {
    v4 = 0;
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[7],BOOL,int>((uint64_t)&ImsPrefs::getSwitchoverSizeKey(void)::value, "SwitchoverSize", "Lazuli", &v4, &v3);
  }
  return &ImsPrefs::getSwitchoverSizeKey(void)::value;
}

void sub_1BF01386C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *ImsPrefs::getLazuliConferenceFactoryKey(ImsPrefs *this)
{
  unsigned __int8 v1;
  __int16 v3;

  {
    v3 = 0;
    ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[7],BOOL,char const(&)[1],BOOL>((uint64_t)&ImsPrefs::getLazuliConferenceFactoryKey(void)::value, "LazuliConferenceFactory", "Lazuli", (unsigned __int8 *)&v3 + 1, (char *)&str_2_16, (char *)&v3);
  }
  return &ImsPrefs::getLazuliConferenceFactoryKey(void)::value;
}

void sub_1BF01390C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0139E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ImsPrefsKeyString::ImsPrefsKeyString(uint64_t a1, const std::string *a2, const std::string *a3, char a4, const std::string *a5, char a6)
{
  uint64_t v9;

  v9 = ImsPrefsKey::ImsPrefsKey(a1, a2, a3, a4);
  *(_QWORD *)v9 = &off_1E78EDA40;
  *(_QWORD *)(v9 + 64) = 0;
  *(_QWORD *)(v9 + 72) = 0;
  *(_QWORD *)(v9 + 80) = 0;
  *(_BYTE *)(v9 + 88) = 0;
  std::string::operator=((std::string *)(v9 + 64), a5);
  *(_BYTE *)(a1 + 88) = a6;
  return a1;
}

void sub_1BF013A8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 87) < 0)
    operator delete(*v2);
  ImsPrefsKey::~ImsPrefsKey((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKey::ImsPrefsKey(uint64_t a1, const std::string *a2, const std::string *a3, char a4)
{
  std::string *v7;

  *(_QWORD *)a1 = &off_1E78EDA80;
  *(_OWORD *)(a1 + 8) = 0u;
  v7 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), a2);
  std::string::operator=(v7, a3);
  *(_BYTE *)(a1 + 56) = a4;
  return a1;
}

void sub_1BF013B24(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void ImsPrefsKey::~ImsPrefsKey(void **this)
{
  *this = &off_1E78EDA80;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[51],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF013C58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF013D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ImsPrefsKeyEnum::ImsPrefsKeyEnum(uint64_t a1, const std::string *a2, const std::string *a3, char a4, std::string **a5)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t **v9;
  std::string *v10;
  std::string *v11;
  std::string *v12;

  v7 = (_QWORD *)ImsPrefsKey::ImsPrefsKey(a1, a2, a3, a4);
  *v7 = &off_1E78EDAC0;
  v7[9] = 0;
  v8 = (uint64_t)(v7 + 9);
  v7[8] = v7 + 9;
  v9 = (uint64_t **)(v7 + 8);
  v7[11] = 0;
  v10 = (std::string *)(v7 + 11);
  v7[10] = 0;
  v7[12] = 0;
  v7[13] = 0;
  v11 = *a5;
  v12 = a5[1];
  if (*a5 != v12)
  {
    do
    {
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>(v9, v8, (void **)&v11->__r_.__value_.__l.__data_, (uint64_t)v11);
      ++v11;
    }
    while (v11 != v12);
    v11 = *a5;
  }
  std::string::operator=(v10, v11);
  return a1;
}

void sub_1BF013E3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v3);
  std::__tree<std::string>::destroy(v2, *(char **)(v1 + 72));
  ImsPrefsKey::~ImsPrefsKey((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF013F20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF013FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0140C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01425C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0147FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0148C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014BF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014F28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF014FF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[40],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0150C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01518C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015324(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0153F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[53],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0154BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[56],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015588(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015654(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01575C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0159F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015AD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015BA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015D50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015F30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF015FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string __p;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, (_DWORD)a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0160DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0161E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[43],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0162C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0163B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[39],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01649C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[33],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016634(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[32],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0168F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

_QWORD *ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL>(_QWORD *a1, char *a2, char *a3, char *a4)
{
  std::string __p;
  std::string v9;

  std::string::basic_string[abi:ne180100]<0>(&v9, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  ImsPrefsKey::ImsPrefsKey((uint64_t)a1, &v9, &__p, *a4);
  a1[9] = 0;
  *a1 = &off_1E78EDB80;
  a1[8] = a1 + 9;
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016C84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF016FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01714C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01723C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[6],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017344(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017428(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0174F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0175C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[31],char const(&)[10],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0176B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0177B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0178D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0179EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[34],char const(&)[10],BOOL,char const(&)[20],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[44],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF017F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01810C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0181D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0182A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018370(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,char const(&)[9],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018904(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0189DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[14],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018BBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[3],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018CC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[11],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[42],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF018FB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[57],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,char const(&)[8],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019174(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[10],BOOL,char const(&)[24],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01927C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[25],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019444(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[28],char const(&)[10],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[26],char const(&)[10],BOOL,char const(&)[32],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[32],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019738(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,char const(&)[26]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string __p;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, (_DWORD)a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[23],char const(&)[10],BOOL,char const(&)[13]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string __p;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, (_DWORD)a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019A30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[13],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019C28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[19],char const(&)[10],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019D30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyArray>::NeverDestroyed<char const(&)[24],char const(&)[10],BOOL,char const(&)[1]>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5)
{
  std::string __p;
  std::string v11;
  std::string v12;

  std::string::basic_string[abi:ne180100]<0>(&v12, a2);
  std::string::basic_string[abi:ne180100]<0>(&v11, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyArray::ImsPrefsKeyArray(a1, &v12, &v11, (_DWORD)a4 != 0, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[48],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019F00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[50],char const(&)[10],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF019FCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A0BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[38],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A1C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A2A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[10],BOOL,char const(&)[30],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[46],char const(&)[10],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[45],char const(&)[10],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A56C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[2],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[3],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A71C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A7E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A8B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01A980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01AA4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01AB18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[20],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01ABE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01ACB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01AD7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[34],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01AE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,char const(&)[12],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01AF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[18],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B124(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B1F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[18],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B5EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[24],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B6B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B784(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B91C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01B9E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[11],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[26],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BC4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[10],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BD18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BEB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01BF7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[14],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C5DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[17],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C798(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[30],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01C984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[35],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CA50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CB1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyEnum>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::vector<std::string>>(uint64_t a1, char *a2, char *a3, char *a4, __int128 *a5)
{
  char v9;
  __int128 v11;
  uint64_t v12;
  std::string __p;
  std::string v14;
  void **v15;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v11 = *a5;
  v12 = *((_QWORD *)a5 + 2);
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_QWORD *)a5 = 0;
  ImsPrefsKeyEnum::ImsPrefsKeyEnum(a1, &v14, &__p, v9, (std::string **)&v11);
  v15 = (void **)&v11;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v15);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  *(_QWORD *)(v24 - 40) = v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 40));
  if (a17 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CCD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CED0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[18],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01CFB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D080(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[25],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[22],char const(&)[6],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[36],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[38],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[6],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyDict>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,std::map<std::string,std::string>>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, _QWORD *a5)
{
  int v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD **v13;
  _QWORD *v14;
  std::string __p;
  std::string v17;

  std::string::basic_string[abi:ne180100]<0>(&v17, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  v9 = *a4;
  v10 = a5 + 1;
  v11 = (_QWORD *)a5[1];
  v13 = (_QWORD **)*a5;
  v14 = v11;
  if (a5[2])
  {
    v11[2] = &v14;
    *a5 = v10;
    *v10 = 0;
    a5[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  ImsPrefsKeyDict::ImsPrefsKeyDict(a1, &v17, &__p, v9 != 0, &v13);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v13, v14);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D86C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, _QWORD *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&a10, a11);
  if (a18 < 0)
    operator delete(__p);
  if (a24 < 0)
    operator delete(a19);
  _Unwind_Resume(a1);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[6],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01D968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[6],BOOL,char const(&)[9],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DA70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[13],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[12],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DC20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DCEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[39],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DDB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[37],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DE84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[16],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01DF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[16],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E01C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[16],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E0E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[5],BOOL,char const(&)[22],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E1D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[8],char const(&)[5],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E3C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E490(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[5],BOOL,char const(&)[34],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[18],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,char const(&)[32],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[27],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E85C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[9],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01E964(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[5],BOOL,char const(&)[7],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01EA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[20],char const(&)[5],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01EB50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[5],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01EC1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[21],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01ECE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[33],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01EDB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[11],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01EE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01EF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F054(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[16],char const(&)[5],BOOL,char const(&)[4],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[40],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F2F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[26],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F3C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[30],char const(&)[9],BOOL,char const(&)[9],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F4B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[45],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[41],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[19],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[11],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F8E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01F9CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[12],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01FABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[15],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01FBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[7],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01FCCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01FDD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01FEDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[44],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF01FFC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[28],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF02008C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[29],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[27],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0202F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[5],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0203E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[14],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0204E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[13],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0205CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[24],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020698(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[17],char const(&)[9],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[37],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF02086C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[32],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[36],char const(&)[9],BOOL,char const(&)[2],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020A28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[22],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020B0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[31],char const(&)[9],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020BD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[9],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[38],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[42],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[52],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020F08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[54],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF020FD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[25],char const(&)[5],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF0210A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[6],char const(&)[12],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF021190(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyBool>::NeverDestroyed<char const(&)[16],char const(&)[6],BOOL,BOOL>(uint64_t a1, char *a2, char *a3, char *a4, _BYTE *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LOBYTE(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB40;
  *(_BYTE *)(a1 + 57) = (_BYTE)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF021274(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[23],char const(&)[13],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF021364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[18],char const(&)[13],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF02146C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyInt>::NeverDestroyed<char const(&)[15],char const(&)[7],BOOL,int>(uint64_t a1, char *a2, char *a3, char *a4, _DWORD *a5)
{
  std::string __p;
  std::string v11;

  std::string::basic_string[abi:ne180100]<0>(&v11, a2);
  std::string::basic_string[abi:ne180100]<0>(&__p, a3);
  LODWORD(a5) = *a5;
  ImsPrefsKey::ImsPrefsKey(a1, &v11, &__p, *a4);
  *(_QWORD *)a1 = &off_1E78EDB00;
  *(_DWORD *)(a1 + 60) = (_DWORD)a5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF021550(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(exception_object);
}

uint64_t ctu::NeverDestroyed<ImsPrefsKeyString>::NeverDestroyed<char const(&)[24],char const(&)[7],BOOL,char const(&)[1],BOOL>(uint64_t a1, char *a2, char *a3, unsigned __int8 *a4, char *a5, char *a6)
{
  std::string __p;
  std::string v13;
  std::string v14;

  std::string::basic_string[abi:ne180100]<0>(&v14, a2);
  std::string::basic_string[abi:ne180100]<0>(&v13, a3);
  LODWORD(a4) = *a4;
  std::string::basic_string[abi:ne180100]<0>(&__p, a5);
  ImsPrefsKeyString::ImsPrefsKeyString(a1, &v14, &v13, (_DWORD)a4 != 0, &__p, *a6);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  return a1;
}

void sub_1BF021640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void IMSClientManager::queue(NSObject **a1@<X8>)
{
  NSObject *v3;

  v3 = sImsDispatchQueue;
  if (sImsDispatchQueue)
  {
    *a1 = sImsDispatchQueue;
  }
  else
  {
    v3 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v3;
    *a1 = v3;
    if (!v3)
      return;
  }
  dispatch_retain(v3);
}

uint64_t ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
}

uint64_t IMSClientRecord::IMSClientRecord(uint64_t a1, const std::string *a2, dispatch_object_t object)
{
  std::string *v5;
  __int128 v6;
  std::string *v7;
  _QWORD *v8;

  *(_QWORD *)a1 = object;
  if (object)
    dispatch_retain(object);
  v5 = (std::string *)(a1 + 8);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v5, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)&a2->__r_.__value_.__l + 2);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (std::string *)operator new();
  v7[1].__r_.__value_.__r.__words[0] = 0;
  v7[1].__r_.__value_.__l.__size_ = 0;
  v7[1].__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E78D8EA0;
  v7->__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78D90F8;
  v7->__r_.__value_.__r.__words[2] = (std::string::size_type)&unk_1E78D9198;
  v7[3].__r_.__value_.__r.__words[0] = 0;
  v7[2].__r_.__value_.__r.__words[2] = (std::string::size_type)&v7[3];
  v7[2].__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E78D9220;
  v7[2].__r_.__value_.__l.__size_ = (std::string::size_type)&unk_1E78D9268;
  v7[3].__r_.__value_.__l.__size_ = 0;
  v7[4].__r_.__value_.__r.__words[0] = 0;
  v7[3].__r_.__value_.__r.__words[2] = (std::string::size_type)&v7[4];
  v7[4].__r_.__value_.__l.__size_ = 0;
  v7[5].__r_.__value_.__r.__words[0] = 0;
  v7[4].__r_.__value_.__r.__words[2] = (std::string::size_type)&v7[5];
  v7[5].__r_.__value_.__l.__size_ = 0;
  v7[6].__r_.__value_.__l.__size_ = 0;
  v7[6].__r_.__value_.__r.__words[0] = 0;
  v7[7].__r_.__value_.__r.__words[0] = 0;
  v7[6].__r_.__value_.__r.__words[2] = (std::string::size_type)&v7[7];
  v7[5].__r_.__value_.__r.__words[2] = (std::string::size_type)&v7[6];
  v7[7].__r_.__value_.__l.__size_ = 0;
  std::string::operator=(v7 + 1, a2);
  *(_QWORD *)(a1 + 32) = v7;
  v8 = (_QWORD *)operator new();
  v8[1] = 0;
  *v8 = v8 + 1;
  v8[4] = 0;
  v8[2] = 0;
  v8[3] = v8 + 4;
  v8[7] = 0;
  v8[5] = 0;
  v8[6] = v8 + 7;
  v8[10] = 0;
  v8[8] = 0;
  v8[9] = v8 + 10;
  v8[14] = 0;
  v8[13] = 0;
  v8[11] = 0;
  v8[12] = v8 + 13;
  *(_QWORD *)(a1 + 40) = v8;
  return a1;
}

void sub_1BF0218BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  dispatch_object_t *v10;

  if (*v10)
    dispatch_release(*v10);
  _Unwind_Resume(exception_object);
}

void IMSClientRecord::createLazuliWrapper(IMSClientRecord *this)
{
  char *v1;
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  v1 = (char *)this + 48;
  if (!*((_QWORD *)this + 6))
  {
    v2 = operator new(0x50uLL);
    v2[1] = 0;
    v2[2] = 0;
    *v2 = &off_1E78D1F50;
    v2[5] = 0;
    v2[4] = v2 + 5;
    v2[9] = 0;
    v2[8] = 0;
    v2[6] = 0;
    v2[7] = v2 + 8;
    *((_QWORD *)&v6 + 1) = v2;
    v2[3] = &off_1E78EA040;
    *(_QWORD *)&v6 = v2 + 3;
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)v1, &v6);
    v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
    if (*((_QWORD *)&v6 + 1))
    {
      v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
      do
        v5 = __ldaxr(v4);
      while (__stlxr(v5 - 1, v4));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
}

void IMSClientRecord::~IMSClientRecord(IMSClientRecord *this)
{
  IMSWrapperDelegate *v2;
  uint64_t v3;

  v2 = (IMSWrapperDelegate *)*((_QWORD *)this + 4);
  if (v2)
  {
    IMSWrapperDelegate::~IMSWrapperDelegate(v2);
    MEMORY[0x1C3B87100]();
  }
  v3 = *((_QWORD *)this + 5);
  if (v3)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 8));
    *(_QWORD *)v3 = v3 + 8;
    *(_QWORD *)(v3 + 16) = 0;
    *(_QWORD *)(v3 + 8) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 32));
    *(_QWORD *)(v3 + 24) = v3 + 32;
    *(_QWORD *)(v3 + 40) = 0;
    *(_QWORD *)(v3 + 32) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 56));
    *(_QWORD *)(v3 + 48) = v3 + 56;
    *(_QWORD *)(v3 + 64) = 0;
    *(_QWORD *)(v3 + 56) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 80));
    *(_QWORD *)(v3 + 72) = v3 + 80;
    *(_QWORD *)(v3 + 88) = 0;
    *(_QWORD *)(v3 + 80) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 104));
    *(_QWORD *)(v3 + 96) = v3 + 104;
    *(_QWORD *)(v3 + 112) = 0;
    *(_QWORD *)(v3 + 104) = 0;
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 80));
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 56));
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 32));
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*(_QWORD **)(v3 + 8));
    MEMORY[0x1C3B87100](v3, 0x1020C40D858BDA1);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  if (*(_QWORD *)this)
    dispatch_release(*(dispatch_object_t *)this);
}

void IMSClientRecord::updateQueue(NSObject **this, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    ims::Dispatch::reset(this, object);
    dispatch_release(object);
  }
  else
  {
    ims::Dispatch::reset(this, 0);
  }
}

void IMSClientManager::IMSClientManager(IMSClientManager *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[2];
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *__p[2];
  char v12;
  __int128 *v13[2];
  char v14;

  *(_QWORD *)this = &off_1E78CC4A0;
  pthread_mutex_init((pthread_mutex_t *)((char *)this + 8), 0);
  *((_QWORD *)this + 9) = (char *)this + 72;
  *((_QWORD *)this + 10) = (char *)this + 72;
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 14) = 0;
  *(_QWORD *)this = &off_1E78D1A58;
  *((_QWORD *)this + 13) = (char *)this + 112;
  *((_QWORD *)this + 15) = 0;
  *((_QWORD *)this + 16) = 0;
  std::string::basic_string[abi:ne180100]<0>(v13, "cli.ctor");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v13, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Adding record for emergency", 27);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v12 < 0)
    operator delete(__p[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  v3 = operator new();
  IMSClientRecord::IMSClientRecord(v3, (const std::string *)&IMSClientManager::kEmergencyStack, 0);
  v13[0] = &IMSClientManager::kEmergencyStack;
  std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)this + 13, (void **)&IMSClientManager::kEmergencyStack, (uint64_t)&std::piecewise_construct, v13)[7] = v3;
  v4 = (_QWORD *)operator new();
  v4[4] = 0;
  v4[5] = 0;
  *v4 = off_1E78D1C80;
  v4[1] = &unk_1E78D1DA0;
  v4[2] = &unk_1E78D1E40;
  v4[3] = 0;
  v4[6] = &unk_1E78D1EC8;
  v4[7] = &unk_1E78D1F10;
  *((_QWORD *)this + 12) = v4;
  v5 = operator new();
  *(_QWORD *)v5 = &off_1E78EB3F0;
  pthread_mutex_init((pthread_mutex_t *)(v5 + 8), 0);
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 72) = v5 + 80;
  *((_QWORD *)this + 16) = v5;
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v6[0] = &off_1E78B7238;
  v6[1] = &_bambiDomain;
  v7 = 0;
  ImsResult::~ImsResult((ImsResult *)v6);
}

void sub_1BF021DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  char **v24;
  uint64_t v25;

  MEMORY[0x1C3B87100](v25, 0x10A1C404AE7F42ALL);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(v24[14]);
  ImsBlockQueue::~ImsBlockQueue((ImsBlockQueue *)v24);
  _Unwind_Resume(a1);
}

void IMSClientManager::~IMSClientManager(IMSClientManager **this)
{
  uint64_t v2;
  IMSClientManager *v3;
  uint64_t v4;
  __int128 v5;
  IMSClientManager *v6;
  IMSClientManager *v7;
  BOOL v8;
  IMSClientManager *v9;
  IMSClientManager *v10;
  std::string v11;
  void *v12[2];
  char v13;
  __int128 v14;
  __int128 v15;
  void *__p[2];
  char v17;

  *this = (IMSClientManager *)&off_1E78D1A58;
  ImsBlockQueue::flush((ImsBlockQueue *)this);
  std::string::basic_string[abi:ne180100]<0>(&v14, "cli.dtor");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v14, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Removing ", 9);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" records", 8);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (SBYTE7(v15) < 0)
    operator delete((void *)v14);
  v3 = this[13];
  if (v3 != (IMSClientManager *)(this + 14))
  {
    do
    {
      v14 = 0u;
      v15 = 0u;
      if (*((char *)v3 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v14, *((const std::string::value_type **)v3 + 4), *((_QWORD *)v3 + 5));
      }
      else
      {
        v14 = *((_OWORD *)v3 + 2);
        *(_QWORD *)&v15 = *((_QWORD *)v3 + 6);
      }
      *((_QWORD *)&v15 + 1) = *((_QWORD *)v3 + 7);
      std::string::basic_string[abi:ne180100]<0>(__p, "cli.dtor");
      std::string::basic_string[abi:ne180100]<0>(v12, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v4 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Destroy record for ", 19);
      *(_BYTE *)(v4 + 17) = 0;
      if (*(char *)(*((_QWORD *)&v15 + 1) + 31) < 0)
      {
        std::string::__init_copy_ctor_external(&v11, *(const std::string::value_type **)(*((_QWORD *)&v15 + 1) + 8), *(_QWORD *)(*((_QWORD *)&v15 + 1) + 16));
      }
      else
      {
        v5 = *(_OWORD *)(*((_QWORD *)&v15 + 1) + 8);
        v11.__r_.__value_.__r.__words[2] = *(_QWORD *)(*((_QWORD *)&v15 + 1) + 24);
        *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v5;
      }
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, &v11);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
      if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v11.__r_.__value_.__l.__data_);
      if (v13 < 0)
        operator delete(v12[0]);
      if (v17 < 0)
        operator delete(__p[0]);
      if (*((_QWORD *)&v15 + 1))
      {
        IMSClientRecord::~IMSClientRecord(*((IMSClientRecord **)&v15 + 1));
        MEMORY[0x1C3B87100]();
      }
      if (SBYTE7(v15) < 0)
        operator delete((void *)v14);
      v6 = (IMSClientManager *)*((_QWORD *)v3 + 1);
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = *(IMSClientManager **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (IMSClientManager *)*((_QWORD *)v3 + 2);
          v8 = *(_QWORD *)v7 == (_QWORD)v3;
          v3 = v7;
        }
        while (!v8);
      }
      v3 = v7;
    }
    while (v7 != (IMSClientManager *)(this + 14));
  }
  v9 = this[12];
  if (v9)
    (*(void (**)(IMSClientManager *))(*(_QWORD *)v9 + 8))(v9);
  v10 = this[16];
  if (v10)
    (*(void (**)(IMSClientManager *))(*(_QWORD *)v10 + 8))(v10);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)this[14]);
  ImsBlockQueue::~ImsBlockQueue((ImsBlockQueue *)this);
}

{
  IMSClientManager::~IMSClientManager(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t IMSClientManager::createClient(std::string::size_type a1, NSObject *a2)
{
  IMSClientManager *v4;
  IMSClientManager *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  IMSClientManager *v9;
  IMSClientManager *v10;
  std::string *v11;
  _QWORD v13[4];
  std::string v14;
  void *__p[2];
  char v16;
  pthread_mutex_t *v17;
  std::string v18;

  v17 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v17, (uint64_t)&v18);
  ImsResult::~ImsResult((ImsResult *)&v18);
  v5 = IMSClientManager::instance(v4);
  if (IMSClientManager::getClientForStack((uint64_t)v5, (void **)a1))
  {
    v6 = 0;
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v18, "cli.create");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Creating record for ", 20);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v7 + 32))(v7, a1);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v16 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
    v8 = operator new();
    v9 = (IMSClientManager *)IMSClientRecord::IMSClientRecord(v8, (const std::string *)a1, a2);
    v10 = IMSClientManager::instance(v9);
    v18.__r_.__value_.__r.__words[0] = a1;
    std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v10 + 13, (void **)a1, (uint64_t)&std::piecewise_construct, (__int128 **)&v18)[7] = v8;
    memset(&v18, 0, sizeof(v18));
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v18, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v18 = *(std::string *)a1;
    v13[0] = MEMORY[0x1E0C809B0];
    v13[1] = 1174405120;
    v13[2] = ___ZN16IMSClientManager12createClientERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke;
    v13[3] = &__block_descriptor_tmp_18_1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v14, v18.__r_.__value_.__l.__data_, v18.__r_.__value_.__l.__size_);
    else
      v14 = v18;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v13);
    v6 = operator new();
    *(_QWORD *)v6 = off_1E78D3CF0;
    v11 = (std::string *)(v6 + 8);
    if (*(char *)(a1 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)&v11->__r_.__value_.__l.__data_ = *(_OWORD *)a1;
      *(_QWORD *)(v6 + 24) = *(_QWORD *)(a1 + 16);
    }
    *(_BYTE *)(v6 + 32) = 0;
    *(_QWORD *)v6 = off_1E78D3B50;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 48) = 0;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v14.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  ImsLock::~ImsLock(&v17);
  return v6;
}

void sub_1BF022430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,pthread_mutex_t *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  MEMORY[0x1C3B87100](v32, 0x10B3C40C4680147);
  if (a19 < 0)
    operator delete(__p);
  if (a32 < 0)
    operator delete(a27);
  ImsLock::~ImsLock(&a26);
  _Unwind_Resume(a1);
}

void *IMSClientManager::getClientForStack(uint64_t a1, void **a2)
{
  unsigned __int8 v4;
  uint64_t v5;
  void **v6;
  _QWORD *v7;
  _QWORD *v8;
  void **v9;
  char v10;
  _QWORD *v11;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v4 = atomic_load((unsigned __int8 *)&qword_1ED70ECB0);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED70ECB0))
  {
    _MergedGlobals_11 = *(_QWORD *)(a1 + 120);
    __cxa_guard_release(&qword_1ED70ECB0);
  }
  if (_MergedGlobals_11 != *(_QWORD *)(a1 + 120))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "cli.getrec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Client record count was ", 24);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" and is now ", 12);
    *(_BYTE *)(v5 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v14 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    _MergedGlobals_11 = *(_QWORD *)(a1 + 120);
  }
  v8 = *(_QWORD **)(a1 + 112);
  v6 = (void **)(a1 + 112);
  v7 = v8;
  if (!v8)
    return 0;
  v9 = v6;
  do
  {
    v10 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7 + 4, a2);
    if (v10 >= 0)
      v11 = v7;
    else
      v11 = v7 + 1;
    if (v10 >= 0)
      v9 = (void **)v7;
    v7 = (_QWORD *)*v11;
  }
  while (*v11);
  if (v9 == v6
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v9 + 4) & 0x80) != 0)
  {
    return 0;
  }
  else
  {
    return v9[7];
  }
}

void sub_1BF02268C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void ___ZN16IMSClientManager12createClientERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v11);
  v2 = v12;
  v3 = *(uint64_t **)(v11 + 168);
  if (!v12)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v3)
      return;
  }
  else
  {
LABEL_5:
    if (!v3)
      return;
  }
  BambiClient::createNewStack(v3, (std::string *)(a1 + 32), 0, &v9);
  v6 = v10;
  if (v10)
  {
    v7 = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

ims::EmergencyClient *IMSClientManager::updateEmergencyClient(NSObject *this, dispatch_queue_s *a2)
{
  IMSClientManager *v3;
  IMSClientManager *v4;
  uint64_t *v5;
  ims::EmergencyClient *v6;
  pthread_mutex_t *v8;
  __int128 *v9[9];

  v8 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v8, (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  v4 = IMSClientManager::instance(v3);
  v9[0] = &IMSClientManager::kEmergencyStack;
  v5 = std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)v4 + 13, (void **)&IMSClientManager::kEmergencyStack, (uint64_t)&std::piecewise_construct, v9);
  IMSClientRecord::updateQueue((NSObject **)v5[7], this);
  v6 = (ims::EmergencyClient *)operator new();
  ims::EmergencyClient::EmergencyClient(v6);
  ImsLock::~ImsLock(&v8);
  return v6;
}

void sub_1BF022834(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  MEMORY[0x1C3B87100](v2, 0x1093C40EF66AD57);
  ImsLock::~ImsLock((pthread_mutex_t **)va);
  _Unwind_Resume(a1);
}

void IMSClientManager::removeClient(uint64_t a1)
{
  IMSClientManager *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  IMSClientRecord *v9;
  IMSClientManager *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  uint64_t *v15;
  _QWORD *v16;
  std::string *v17;
  _QWORD *v18;
  uint64_t v19;
  std::string v20;
  void *__p[2];
  char v22;
  pthread_mutex_t *v23;
  void *v24[2];
  char v25;
  _BYTE v26[24];
  _BYTE *v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  v23 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v23, (uint64_t)v24);
  ImsResult::~ImsResult((ImsResult *)v24);
  v3 = (uint64_t)IMSClientManager::instance(v2);
  v4 = v3 + 112;
  v5 = *(_QWORD **)(v3 + 112);
  if (!v5)
    goto LABEL_11;
  v6 = v3 + 112;
  do
  {
    v3 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v5 + 4, (void **)a1);
    if ((v3 & 0x80u) == 0)
      v7 = v5;
    else
      v7 = v5 + 1;
    if ((v3 & 0x80u) == 0)
      v6 = (uint64_t)v5;
    v5 = (_QWORD *)*v7;
  }
  while (*v7);
  if (v6 == v4
    || (v3 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)a1, (void **)(v6 + 32)), (v3 & 0x80) != 0))
  {
LABEL_11:
    v6 = v4;
  }
  if ((IMSClientManager *)((char *)IMSClientManager::instance((IMSClientManager *)v3) + 112) != (IMSClientManager *)v6)
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "cli.rm");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Removing record for ", 20);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v24[0]);
    v9 = *(IMSClientRecord **)(v6 + 56);
    if (v9)
    {
      IMSClientRecord::~IMSClientRecord(v9);
      v9 = (IMSClientRecord *)MEMORY[0x1C3B87100]();
    }
    v10 = IMSClientManager::instance(v9);
    v11 = *(_QWORD **)(v6 + 8);
    if (v11)
    {
      do
      {
        v12 = v11;
        v11 = (_QWORD *)*v11;
      }
      while (v11);
    }
    else
    {
      v13 = (_QWORD *)v6;
      do
      {
        v12 = (_QWORD *)v13[2];
        v14 = *v12 == (_QWORD)v13;
        v13 = v12;
      }
      while (!v14);
    }
    if (*((_QWORD *)v10 + 13) == v6)
      *((_QWORD *)v10 + 13) = v12;
    v15 = (uint64_t *)*((_QWORD *)v10 + 14);
    --*((_QWORD *)v10 + 15);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v15, (uint64_t *)v6);
    if (*(char *)(v6 + 55) < 0)
      operator delete(*(void **)(v6 + 32));
    operator delete((void *)v6);
    if (*(char *)(a1 + 23) < 0)
      std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
    else
      v20 = *(std::string *)a1;
    v27 = 0;
    v16 = operator new(0x20uLL);
    *v16 = off_1E78D1FA0;
    v17 = (std::string *)(v16 + 1);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v17, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)&v20.__r_.__value_.__l.__data_;
      v16[3] = *((_QWORD *)&v20.__r_.__value_.__l + 2);
    }
    v27 = v16;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v26);
    v18 = v27;
    if (v27 == v26)
    {
      v19 = 4;
      v18 = v26;
    }
    else
    {
      if (!v27)
        goto LABEL_40;
      v19 = 5;
    }
    (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_40:
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
  }
  ImsLock::~ImsLock(&v23);
}

void sub_1BF022B4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,pthread_mutex_t *a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  void *v28;

  operator delete(v28);
  if (a14 < 0)
    operator delete(__p);
  ImsLock::~ImsLock(&a22);
  _Unwind_Resume(a1);
}

_QWORD *IMSClientManager::callOnMainQueue(IMSClientManager *a1)
{
  NSObject *v2;
  char v3;
  _QWORD *result;
  uint64_t v5;
  _QWORD block[4];
  _BYTE v7[24];
  _BYTE *v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  IMSClientManager::instance(a1);
  v2 = sImsDispatchQueue;
  if (sImsDispatchQueue
    || (v2 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v2) != 0))
  {
    dispatch_retain(v2);
    v3 = 0;
  }
  else
  {
    v3 = 1;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN16IMSClientManager15callOnMainQueueENSt3__18functionIFvvEEE_block_invoke;
  block[3] = &__block_descriptor_tmp_52;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)a1);
  dispatch_async(v2, block);
  if ((v3 & 1) == 0)
    dispatch_release(v2);
  result = v8;
  if (v8 == v7)
  {
    v5 = 4;
    result = v7;
  }
  else
  {
    if (!v8)
      return result;
    v5 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v5))();
}

void sub_1BF022D14(_Unwind_Exception *exception_object)
{
  NSObject *v1;
  char v2;

  if ((v2 & 1) == 0)
    dispatch_release(v1);
  _Unwind_Resume(exception_object);
}

void IMSClientManager::performBlock(uint64_t a1, __int128 *a2, uint64_t *a3, void *a4)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v4 = (std::__shared_weak_count *)a3[1];
  v10 = *a3;
  v11 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(a1, a2, (uint64_t)&v10, a4);
  v7 = v11;
  if (v11)
  {
    v8 = (unint64_t *)&v11->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF022DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ImsBlockQueue::addBlock<std::shared_ptr<SipLockable>>(uint64_t a1, __int128 *a2, uint64_t a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  NSObject *v15;
  _QWORD block[5];
  uint64_t v17[3];
  void *__p[2];
  char v19;
  pthread_mutex_t *v20;
  void *v21[2];
  char v22;

  v20 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 8), &v20, (uint64_t)v21);
  ImsResult::~ImsResult((ImsResult *)v21);
  std::string::basic_string[abi:ne180100]<0>(v21, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"queuing capturable block ", 25);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 40))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" (", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" block(s) already on queue)", 27);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  v9 = operator new();
  *(_OWORD *)v17 = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  ImsCapturableBlock<std::shared_ptr<SipLockable>>::ImsCapturableBlock(v9, a2, v17, a4);
  v10 = operator new(0x18uLL);
  v10[1] = a1 + 72;
  v10[2] = v9;
  v11 = *(_QWORD *)(a1 + 72);
  *v10 = v11;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(a1 + 72) = v10;
  ++*(_QWORD *)(a1 + 88);
  v12 = (std::__shared_weak_count *)v17[1];
  if (v17[1])
  {
    v13 = (unint64_t *)(v17[1] + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v15 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v15;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN13ImsBlockQueue8addBlockINSt3__110shared_ptrI11SipLockableEEEEvRK14LoggableStringT_U13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_61_2;
  block[4] = a1;
  dispatch_async(v15, block);
  ImsLock::~ImsLock(&v20);
}

void sub_1BF02300C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,pthread_mutex_t *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ImsLock::~ImsLock(&a24);
  _Unwind_Resume(a1);
}

void IMSClientManager::performBlock(uint64_t a1, __int128 *a2, _QWORD *a3, void *a4)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;

  v4 = a3[1];
  *(_QWORD *)&v10 = *a3;
  *((_QWORD *)&v10 + 1) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  ImsBlockQueue::addBlock<std::shared_ptr<MediaSessionInterface>>(a1, a2, &v10, a4);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v10 + 1);
  if (*((_QWORD *)&v10 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v10 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_1BF02310C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ImsBlockQueue::addBlock<std::shared_ptr<MediaSessionInterface>>(uint64_t a1, __int128 *a2, __int128 *a3, void *a4)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  NSObject *v12;
  _QWORD block[5];
  __int128 v14;
  void *__p[2];
  char v16;
  pthread_mutex_t *v17;
  void *v18[2];
  char v19;

  v17 = 0;
  ImsLock::set((pthread_mutex_t *)(a1 + 8), &v17, (uint64_t)v18);
  ImsResult::~ImsResult((ImsResult *)v18);
  std::string::basic_string[abi:ne180100]<0>(v18, "util");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"queuing capturable block ", 25);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v8 + 40))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" (", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" block(s) already on queue)", 27);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v9 = operator new();
  v14 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  ImsBlock::ImsBlock(v9, a2, a4);
  *(_QWORD *)v9 = &off_1E78D2060;
  *(_OWORD *)(v9 + 40) = v14;
  v14 = 0uLL;
  v10 = operator new(0x18uLL);
  v10[1] = a1 + 72;
  v10[2] = v9;
  v11 = *(_QWORD *)(a1 + 72);
  *v10 = v11;
  *(_QWORD *)(v11 + 8) = v10;
  *(_QWORD *)(a1 + 72) = v10;
  ++*(_QWORD *)(a1 + 88);
  v12 = sImsDispatchQueue;
  if (!sImsDispatchQueue)
  {
    v12 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
    sImsDispatchQueue = (uint64_t)v12;
  }
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 0x40000000;
  block[2] = ___ZN13ImsBlockQueue8addBlockINSt3__110shared_ptrI21MediaSessionInterfaceEEEEvRK14LoggableStringT_U13block_pointerFvvE_block_invoke;
  block[3] = &__block_descriptor_tmp_62;
  block[4] = a1;
  dispatch_async(v12, block);
  ImsLock::~ImsLock(&v17);
}

void sub_1BF023348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,pthread_mutex_t *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  ImsLock::~ImsLock(&a24);
  _Unwind_Resume(a1);
}

void IMSClientManager::performBlockOr(uint64_t a1, __int128 *a2, uint64_t *a3, void *a4, const void *a5)
{
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v5 = (std::__shared_weak_count *)a3[1];
  v11 = *a3;
  v12 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  ImsBlockQueue::addBlock(a1, a2, (uint64_t)&v11, a4, a5);
  v8 = v12;
  if (v12)
  {
    v9 = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF023448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *IMSClientManager::flushBlocks(IMSClientManager *this)
{
  uint64_t *v1;
  uint64_t v2;
  unint64_t v3;
  void **v4;
  void *v5;
  void *v6;
  int v7;
  _BOOL4 v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  void *v17[2];
  char v18;
  void *__p[2];
  unsigned __int8 v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;

  v21 = &v21;
  v22 = &v21;
  v23 = 0;
  v1 = (uint64_t *)((char *)this + 72);
  v2 = *((_QWORD *)this + 10);
  if ((IMSClientManager *)v2 != (IMSClientManager *)((char *)this + 72))
  {
    do
    {
      (*(void (**)(void **__return_ptr))(**(_QWORD **)(v2 + 16) + 24))(__p);
      v3 = v20;
      if ((v20 & 0x80u) != 0)
        v3 = (unint64_t)__p[1];
      if (v3 == 17)
      {
        v4 = (void **)__p[0];
        if ((v20 & 0x80u) == 0)
          v4 = __p;
        v5 = *v4;
        v6 = v4[1];
        v7 = *((unsigned __int8 *)v4 + 16);
        v10 = v5 == (void *)0x6C436E4F6C6C6163 && v6 == (void *)0x75657551746E6569 && v7 == 101;
        if (((char)v20 & 0x80000000) == 0)
        {
LABEL_19:
          if (!v10)
            goto LABEL_22;
          goto LABEL_20;
        }
      }
      else
      {
        v10 = 0;
        if (((char)v20 & 0x80000000) == 0)
          goto LABEL_19;
      }
      operator delete(__p[0]);
      if (!v10)
      {
LABEL_22:
        std::string::basic_string[abi:ne180100]<0>(__p, "util");
        std::string::basic_string[abi:ne180100]<0>(v17, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v14 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v17);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"flushing unexecuted block ", 26);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v2 + 16) + 16))(*(_QWORD *)(v2 + 16), v14);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        if (v18 < 0)
          operator delete(v17[0]);
        if ((char)v20 < 0)
          operator delete(__p[0]);
        v15 = *(_QWORD *)(v2 + 16);
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        goto LABEL_28;
      }
LABEL_20:
      v11 = operator new(0x18uLL);
      v12 = *(_QWORD *)(v2 + 16);
      v11[1] = &v21;
      v11[2] = v12;
      v13 = v21;
      *v11 = v21;
      v13[1] = v11;
      v21 = v11;
      ++v23;
LABEL_28:
      v2 = *(_QWORD *)(v2 + 8);
    }
    while ((uint64_t *)v2 != v1);
  }
  if (v1 != (uint64_t *)&v21)
    std::list<ImsBlock *>::__assign_with_sentinel[abi:ne180100]<std::__list_const_iterator<ImsBlock *,void *>,std::__list_const_iterator<ImsBlock *,void *>>(v1, (uint64_t)v22, (uint64_t)&v21);
  return std::__list_imp<unsigned long long>::clear(&v21);
}

void sub_1BF023688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22)
{
  std::__list_imp<unsigned long long>::clear(&a22);
  _Unwind_Resume(a1);
}

void IMSClientManager::updateCallDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  std::string v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  std::string v25;
  dispatch_object_t object;
  std::string __p;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v29, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v28, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)&v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"will update call delegate ", 26);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v10 = *a3;
  v9 = a3[1];
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a4)
    dispatch_retain(a4);
  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  memset(&v28, 0, sizeof(v28));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v28 = *(std::string *)a1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN16IMSClientManager18updateCallDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17CallEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v21[3] = &__block_descriptor_tmp_32_0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v22 = v28;
  v23 = v10;
  v24 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v13 = (unint64_t *)(v9 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v25 = v29;
  object = a4;
  if (a4)
    dispatch_retain(a4);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v21);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (a4)
    dispatch_release(a4);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1BF023A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 + 56);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (v33)
    dispatch_release(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager18updateCallDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17CallEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  _QWORD *ClientForStack;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char **v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::string v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  std::string v41;
  __int128 v42;

  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v41);
  ImsResult::~ImsResult((ImsResult *)&v41);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = IMSClientManager::getClientForStack((uint64_t)v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack)
    return;
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_41:
      v25 = ClientForStack[4];
      v26 = *(NSObject **)(a1 + 96);
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      v35 = *(std::__shared_weak_count **)(a1 + 56);
      v36 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      IMSWrapperDelegate::addCallDelegate(v25, a1 + 72, v26, &v35);
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"holding ", 8);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v7 = ClientForStack[5];
    v9 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v37 = v9;
    v38 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*(char *)(a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    else
      v41 = *(std::string *)(a1 + 72);
    *(_QWORD *)&v42 = v9;
    *((_QWORD *)&v42 + 1) = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v15 = (char **)(v7 + 32);
    v14 = *(char **)(v7 + 32);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char **)v14;
          v17 = v14 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (void **)v14 + 4) & 0x80) == 0)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_26;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)&v41.__r_.__value_.__l.__data_) & 0x80) == 0)break;
        v15 = v16 + 1;
        v14 = v16[1];
        if (!v14)
          goto LABEL_26;
      }
      if (*v15)
        goto LABEL_29;
    }
    else
    {
      v16 = (char **)(v7 + 32);
    }
LABEL_26:
    v18 = (char *)operator new(0x48uLL);
    *(std::string *)(v18 + 32) = v41;
    memset(&v41, 0, sizeof(v41));
    *(_OWORD *)(v18 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = v18;
    v19 = **(_QWORD **)(v7 + 24);
    if (v19)
    {
      *(_QWORD *)(v7 + 24) = v19;
      v18 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 32), (uint64_t *)v18);
    ++*(_QWORD *)(v7 + 40);
LABEL_29:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (v38)
    {
      v23 = &v38->__shared_owners_;
      do
        v24 = __ldaxr((unint64_t *)v23);
      while (__stlxr(v24 - 1, (unint64_t *)v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_41;
  }
  IMSWrapperDelegate::removeCallDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"updated call delegate ", 22);
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v33 + 17) = 0;
  LoggableString::LoggableString(&v34, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v33 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v33 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1BF023FD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17CallEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(NSObject **)(a2 + 96);
  if (v10)
    dispatch_retain(v10);
}

void sub_1BF02412C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17CallEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = a1 + 56;
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void IMSClientManager::updateStackDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  std::string v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  std::string v25;
  dispatch_object_t object;
  std::string __p;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v29, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v28, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)&v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"will update stack delegate ", 27);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v10 = *a3;
  v9 = a3[1];
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a4)
    dispatch_retain(a4);
  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  memset(&v28, 0, sizeof(v28));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v28 = *(std::string *)a1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN16IMSClientManager19updateStackDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims18StackEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v21[3] = &__block_descriptor_tmp_35_1;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v22 = v28;
  v23 = v10;
  v24 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v13 = (unint64_t *)(v9 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v25 = v29;
  object = a4;
  if (a4)
    dispatch_retain(a4);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v21);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (a4)
    dispatch_release(a4);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1BF02451C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 + 56);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (v33)
    dispatch_release(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager19updateStackDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims18StackEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  _QWORD *ClientForStack;
  const void *v5;
  uint64_t v6;
  uint64_t **v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char **v16;
  _QWORD *v17;
  char *v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::string v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  std::string v41;
  __int128 v42;

  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v41);
  ImsResult::~ImsResult((ImsResult *)&v41);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = IMSClientManager::getClientForStack((uint64_t)v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack)
    return;
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_41:
      v25 = ClientForStack[4];
      v26 = *(NSObject **)(a1 + 96);
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      v35 = *(std::__shared_weak_count **)(a1 + 56);
      v36 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      IMSWrapperDelegate::addStackDelegate(v25, a1 + 72, v26, &v35);
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"holding ", 8);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v7 = (uint64_t **)ClientForStack[5];
    v9 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v37 = v9;
    v38 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*(char *)(a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    else
      v41 = *(std::string *)(a1 + 72);
    *(_QWORD *)&v42 = v9;
    *((_QWORD *)&v42 + 1) = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v15 = (char **)(v7 + 1);
    v14 = (char *)v7[1];
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char **)v14;
          v17 = v14 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (void **)v14 + 4) & 0x80) == 0)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_26;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)&v41.__r_.__value_.__l.__data_) & 0x80) == 0)break;
        v15 = v16 + 1;
        v14 = v16[1];
        if (!v14)
          goto LABEL_26;
      }
      if (*v15)
        goto LABEL_29;
    }
    else
    {
      v16 = (char **)(v7 + 1);
    }
LABEL_26:
    v18 = (char *)operator new(0x48uLL);
    *(std::string *)(v18 + 32) = v41;
    memset(&v41, 0, sizeof(v41));
    *(_OWORD *)(v18 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = v18;
    v19 = (uint64_t *)**v7;
    if (v19)
    {
      *v7 = v19;
      v18 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v7[1], (uint64_t *)v18);
    v7[2] = (uint64_t *)((char *)v7[2] + 1);
LABEL_29:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (v38)
    {
      v23 = &v38->__shared_owners_;
      do
        v24 = __ldaxr((unint64_t *)v23);
      while (__stlxr(v24 - 1, (unint64_t *)v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_41;
  }
  IMSWrapperDelegate::removeStackDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"updated stack delegate ", 23);
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v33 + 17) = 0;
  LoggableString::LoggableString(&v34, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v33 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v33 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1BF024AA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c52_ZTSNSt3__110shared_ptrIN3ims18StackEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(NSObject **)(a2 + 96);
  if (v10)
    dispatch_retain(v10);
}

void sub_1BF024C00(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c52_ZTSNSt3__110shared_ptrIN3ims18StackEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = a1 + 56;
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void IMSClientManager::updateManagerDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  std::string v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  std::string v25;
  dispatch_object_t object;
  std::string __p;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v29, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v28, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)&v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"will update manager delegate ", 29);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v10 = *a3;
  v9 = a3[1];
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a4)
    dispatch_retain(a4);
  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  memset(&v28, 0, sizeof(v28));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v28 = *(std::string *)a1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN16IMSClientManager21updateManagerDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims24CallManagerEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v21[3] = &__block_descriptor_tmp_38_0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v22 = v28;
  v23 = v10;
  v24 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v13 = (unint64_t *)(v9 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v25 = v29;
  object = a4;
  if (a4)
    dispatch_retain(a4);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v21);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (a4)
    dispatch_release(a4);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1BF024FF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 + 56);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (v33)
    dispatch_release(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager21updateManagerDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims24CallManagerEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  _QWORD *ClientForStack;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char **v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::string v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  std::string v41;
  __int128 v42;

  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v41);
  ImsResult::~ImsResult((ImsResult *)&v41);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = IMSClientManager::getClientForStack((uint64_t)v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack)
    return;
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_41:
      v25 = ClientForStack[4];
      v26 = *(NSObject **)(a1 + 96);
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      v35 = *(std::__shared_weak_count **)(a1 + 56);
      v36 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      IMSWrapperDelegate::addCallManagerDelegate(v25, a1 + 72, v26, &v35);
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"holding ", 8);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v7 = ClientForStack[5];
    v9 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v37 = v9;
    v38 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*(char *)(a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    else
      v41 = *(std::string *)(a1 + 72);
    *(_QWORD *)&v42 = v9;
    *((_QWORD *)&v42 + 1) = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v15 = (char **)(v7 + 56);
    v14 = *(char **)(v7 + 56);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char **)v14;
          v17 = v14 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (void **)v14 + 4) & 0x80) == 0)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_26;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)&v41.__r_.__value_.__l.__data_) & 0x80) == 0)break;
        v15 = v16 + 1;
        v14 = v16[1];
        if (!v14)
          goto LABEL_26;
      }
      if (*v15)
        goto LABEL_29;
    }
    else
    {
      v16 = (char **)(v7 + 56);
    }
LABEL_26:
    v18 = (char *)operator new(0x48uLL);
    *(std::string *)(v18 + 32) = v41;
    memset(&v41, 0, sizeof(v41));
    *(_OWORD *)(v18 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = v18;
    v19 = **(_QWORD **)(v7 + 48);
    if (v19)
    {
      *(_QWORD *)(v7 + 48) = v19;
      v18 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 56), (uint64_t *)v18);
    ++*(_QWORD *)(v7 + 64);
LABEL_29:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (v38)
    {
      v23 = &v38->__shared_owners_;
      do
        v24 = __ldaxr((unint64_t *)v23);
      while (__stlxr(v24 - 1, (unint64_t *)v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_41;
  }
  IMSWrapperDelegate::removeCallManagerDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"updated manager delegate ", 25);
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v33 + 17) = 0;
  LoggableString::LoggableString(&v34, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v33 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v33 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1BF025578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c58_ZTSNSt3__110shared_ptrIN3ims24CallManagerEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(NSObject **)(a2 + 96);
  if (v10)
    dispatch_retain(v10);
}

void sub_1BF0256D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c58_ZTSNSt3__110shared_ptrIN3ims24CallManagerEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = a1 + 56;
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void IMSClientManager::updateMessageDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  std::string v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  std::string v25;
  dispatch_object_t object;
  std::string __p;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v29, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v28, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)&v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"will update message delegate ", 29);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v10 = *a3;
  v9 = a3[1];
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a4)
    dispatch_retain(a4);
  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  memset(&v28, 0, sizeof(v28));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v28 = *(std::string *)a1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN16IMSClientManager21updateMessageDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims20MessageEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v21[3] = &__block_descriptor_tmp_41;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v22 = v28;
  v23 = v10;
  v24 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v13 = (unint64_t *)(v9 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v25 = v29;
  object = a4;
  if (a4)
    dispatch_retain(a4);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v21);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (a4)
    dispatch_release(a4);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1BF025AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 + 56);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (v33)
    dispatch_release(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager21updateMessageDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims20MessageEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  _QWORD *ClientForStack;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char **v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::string v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  std::string v41;
  __int128 v42;

  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v41);
  ImsResult::~ImsResult((ImsResult *)&v41);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = IMSClientManager::getClientForStack((uint64_t)v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack)
    return;
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_41:
      v25 = ClientForStack[4];
      v26 = *(NSObject **)(a1 + 96);
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      v35 = *(std::__shared_weak_count **)(a1 + 56);
      v36 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      IMSWrapperDelegate::addMessageDelegate(v25, a1 + 72, v26, &v35);
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"holding ", 8);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v7 = ClientForStack[5];
    v9 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v37 = v9;
    v38 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*(char *)(a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    else
      v41 = *(std::string *)(a1 + 72);
    *(_QWORD *)&v42 = v9;
    *((_QWORD *)&v42 + 1) = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v15 = (char **)(v7 + 80);
    v14 = *(char **)(v7 + 80);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char **)v14;
          v17 = v14 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (void **)v14 + 4) & 0x80) == 0)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_26;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)&v41.__r_.__value_.__l.__data_) & 0x80) == 0)break;
        v15 = v16 + 1;
        v14 = v16[1];
        if (!v14)
          goto LABEL_26;
      }
      if (*v15)
        goto LABEL_29;
    }
    else
    {
      v16 = (char **)(v7 + 80);
    }
LABEL_26:
    v18 = (char *)operator new(0x48uLL);
    *(std::string *)(v18 + 32) = v41;
    memset(&v41, 0, sizeof(v41));
    *(_OWORD *)(v18 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = v18;
    v19 = **(_QWORD **)(v7 + 72);
    if (v19)
    {
      *(_QWORD *)(v7 + 72) = v19;
      v18 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 80), (uint64_t *)v18);
    ++*(_QWORD *)(v7 + 88);
LABEL_29:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (v38)
    {
      v23 = &v38->__shared_owners_;
      do
        v24 = __ldaxr((unint64_t *)v23);
      while (__stlxr(v24 - 1, (unint64_t *)v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_41;
  }
  IMSWrapperDelegate::removeMessageDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"updated message delegate ", 25);
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v33 + 17) = 0;
  LoggableString::LoggableString(&v34, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v33 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v33 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1BF02604C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c54_ZTSNSt3__110shared_ptrIN3ims20MessageEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(NSObject **)(a2 + 96);
  if (v10)
    dispatch_retain(v10);
}

void sub_1BF0261A8(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c54_ZTSNSt3__110shared_ptrIN3ims20MessageEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = a1 + 56;
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void IMSClientManager::updateXcapDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v21[4];
  std::string v22;
  std::string::size_type v23;
  std::__shared_weak_count *v24;
  std::string v25;
  dispatch_object_t object;
  std::string __p;
  std::string v28;
  std::string v29;

  std::string::basic_string[abi:ne180100]<0>(&v29, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(&v28, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)&v29, (uint64_t)&v28);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"will update xcap delegate ", 26);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v8 + 17) = 0;
  LoggableString::LoggableString(&__p, (const std::string *)a1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v8 + 40))(v8, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v10 = *a3;
  v9 = a3[1];
  __p.__r_.__value_.__r.__words[0] = v10;
  __p.__r_.__value_.__l.__size_ = v9;
  if (v9)
  {
    v11 = (unint64_t *)(v9 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  if (a4)
    dispatch_retain(a4);
  memset(&v29, 0, sizeof(v29));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v29 = *(std::string *)a2;
  memset(&v28, 0, sizeof(v28));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v28, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v28 = *(std::string *)a1;
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 1174405120;
  v21[2] = ___ZN16IMSClientManager18updateXcapDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17XcapEventDelegateEEEP16dispatch_queue_s_block_invoke;
  v21[3] = &__block_descriptor_tmp_44_0;
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v22, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v22 = v28;
  v23 = v10;
  v24 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v13 = (unint64_t *)(v9 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v25, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v25 = v29;
  object = a4;
  if (a4)
    dispatch_retain(a4);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v21);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v15 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v22.__r_.__value_.__l.__data_);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (a4)
    dispatch_release(a4);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v19 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
}

void sub_1BF026598(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,dispatch_object_t object,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  NSObject *v33;
  uint64_t v34;
  uint64_t v35;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 + 56);
  if (a18 < 0)
    operator delete(__p);
  if (*(char *)(v35 - 89) < 0)
    operator delete(*(void **)(v35 - 112));
  if (*(char *)(v35 - 57) < 0)
    operator delete(*(void **)(v35 - 80));
  if (v33)
    dispatch_release(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager18updateXcapDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims17XcapEventDelegateEEEP16dispatch_queue_s_block_invoke(uint64_t a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  _QWORD *ClientForStack;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  char *v14;
  char **v15;
  char **v16;
  _QWORD *v17;
  char *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  NSObject *v26;
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::string v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  void *__p[2];
  char v40;
  std::string v41;
  __int128 v42;

  __p[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)__p, (uint64_t)&v41);
  ImsResult::~ImsResult((ImsResult *)&v41);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = IMSClientManager::getClientForStack((uint64_t)v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)__p);
  if (!ClientForStack)
    return;
  v5 = *(const void **)(a1 + 56);
  if (v5)
  {
    {
LABEL_41:
      v25 = ClientForStack[4];
      v26 = *(NSObject **)(a1 + 96);
      v27 = *(std::__shared_weak_count **)(a1 + 64);
      v35 = *(std::__shared_weak_count **)(a1 + 56);
      v36 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v29 = __ldxr(p_shared_owners);
        while (__stxr(v29 + 1, p_shared_owners));
      }
      IMSWrapperDelegate::addXcapDelegate(v25, a1 + 72, v26, &v35);
      v30 = v36;
      if (v36)
      {
        v31 = (unint64_t *)&v36->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      goto LABEL_49;
    }
    std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"holding ", 8);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1 + 72);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v40 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    v7 = ClientForStack[5];
    v9 = *(_QWORD *)(a1 + 56);
    v8 = *(std::__shared_weak_count **)(a1 + 64);
    v37 = v9;
    v38 = v8;
    if (v8)
    {
      v10 = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    if (*(char *)(a1 + 95) < 0)
      std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(a1 + 72), *(_QWORD *)(a1 + 80));
    else
      v41 = *(std::string *)(a1 + 72);
    *(_QWORD *)&v42 = v9;
    *((_QWORD *)&v42 + 1) = v8;
    if (v8)
    {
      v12 = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
    }
    v15 = (char **)(v7 + 104);
    v14 = *(char **)(v7 + 104);
    if (v14)
    {
      while (1)
      {
        while (1)
        {
          v16 = (char **)v14;
          v17 = v14 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v41, (void **)v14 + 4) & 0x80) == 0)
            break;
          v14 = *v16;
          v15 = v16;
          if (!*v16)
            goto LABEL_26;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v17, (void **)&v41.__r_.__value_.__l.__data_) & 0x80) == 0)break;
        v15 = v16 + 1;
        v14 = v16[1];
        if (!v14)
          goto LABEL_26;
      }
      if (*v15)
        goto LABEL_29;
    }
    else
    {
      v16 = (char **)(v7 + 104);
    }
LABEL_26:
    v18 = (char *)operator new(0x48uLL);
    *(std::string *)(v18 + 32) = v41;
    memset(&v41, 0, sizeof(v41));
    *(_OWORD *)(v18 + 56) = v42;
    v42 = 0uLL;
    *(_QWORD *)v18 = 0;
    *((_QWORD *)v18 + 1) = 0;
    *((_QWORD *)v18 + 2) = v16;
    *v15 = v18;
    v19 = **(_QWORD **)(v7 + 96);
    if (v19)
    {
      *(_QWORD *)(v7 + 96) = v19;
      v18 = *v15;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v7 + 104), (uint64_t *)v18);
    ++*(_QWORD *)(v7 + 112);
LABEL_29:
    v20 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
    if (*((_QWORD *)&v42 + 1))
    {
      v21 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (v38)
    {
      v23 = &v38->__shared_owners_;
      do
        v24 = __ldaxr((unint64_t *)v23);
      while (__stlxr(v24 - 1, (unint64_t *)v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
        std::__shared_weak_count::__release_weak(v38);
      }
    }
    goto LABEL_41;
  }
  IMSWrapperDelegate::removeXcapDelegate(ClientForStack[4], (void **)(a1 + 72));
LABEL_49:
  std::string::basic_string[abi:ne180100]<0>(&v41, "ims.client");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v33 = ImsLogger::debug(ims::_logger, (uint64_t)&v41, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"updating xcap delegate ", 23);
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, a1 + 72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" for stack ", 11);
  *(_BYTE *)(v33 + 17) = 0;
  LoggableString::LoggableString(&v34, (const std::string *)(a1 + 32));
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 40))(v33, &v34);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)" to ", 4);
  *(_BYTE *)(v33 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v33 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v33 + 17) = 0;
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v34.__r_.__value_.__l.__data_);
  if (v40 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v41.__r_.__value_.__l.__data_);
}

void sub_1BF026B20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17XcapEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  v10 = *(NSObject **)(a2 + 96);
  if (v10)
    dispatch_retain(v10);
}

void sub_1BF026C7C(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c51_ZTSNSt3__110shared_ptrIN3ims17XcapEventDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c19_ZTSN3ims8DispatchE(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = a1 + 56;
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void IMSClientManager::updateLazuliDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD v14[4];
  std::string v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string __p;
  dispatch_object_t object;
  std::string v20;
  std::string v21;

  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v21 = *(std::string *)a2;
  memset(&v20, 0, sizeof(v20));
  if (*(char *)(a1 + 23) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a1, *(_QWORD *)(a1 + 8));
  else
    v20 = *(std::string *)a1;
  v14[0] = MEMORY[0x1E0C809B0];
  v14[1] = 1174405120;
  v14[2] = ___ZN16IMSClientManager20updateLazuliDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims6lazuli12ChatDelegateEEEN8dispatch5queueE_block_invoke;
  v14[3] = &__block_descriptor_tmp_46_0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v15, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v15 = v20;
  v7 = (std::__shared_weak_count *)a3[1];
  v16 = *a3;
  v17 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    __p = v21;
  v10 = *a4;
  object = v10;
  if (v10)
    dispatch_retain(v10);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v14);
  if (object)
    dispatch_release(object);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v17;
  if (v17)
  {
    v12 = (unint64_t *)&v17->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
}

void sub_1BF026ED8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,dispatch_object_t object)
{
  uint64_t v28;
  uint64_t v29;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 + 56);
  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v29 - 73) < 0)
    operator delete(*(void **)(v29 - 96));
  if (*(char *)(v29 - 41) < 0)
    operator delete(*(void **)(v29 - 64));
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager20updateLazuliDelegateERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_NS0_10shared_ptrIN3ims6lazuli12ChatDelegateEEEN8dispatch5queueE_block_invoke(uint64_t a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  IMSClientRecord *ClientForStack;
  uint64_t v5;
  LazuliDelegate *v6;
  NSObject *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  uint64_t v11;
  std::string __p;
  void *v13[2];
  char v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  dispatch_object_t object;
  void *v18[2];
  char v19;

  v13[0] = 0;
  ImsLock::set(&IMSClientManager::_mutex, (pthread_mutex_t **)v13, (uint64_t)v18);
  ImsResult::~ImsResult((ImsResult *)v18);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = (IMSClientRecord *)IMSClientManager::getClientForStack((uint64_t)v3, (void **)(a1 + 32));
  ImsLock::~ImsLock((pthread_mutex_t **)v13);
  if (ClientForStack)
  {
    IMSClientRecord::createLazuliWrapper(ClientForStack);
    v5 = *(_QWORD *)(a1 + 56);
    v6 = (LazuliDelegate *)*((_QWORD *)ClientForStack + 6);
    if (v5)
    {
      v7 = *(NSObject **)(a1 + 96);
      object = v7;
      if (v7)
      {
        dispatch_retain(v7);
        v5 = *(_QWORD *)(a1 + 56);
      }
      v8 = *(std::__shared_weak_count **)(a1 + 64);
      v15 = v5;
      v16 = v8;
      if (v8)
      {
        p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
        do
          v10 = __ldxr(p_shared_weak_owners);
        while (__stxr(v10 + 1, p_shared_weak_owners));
      }
      LazuliDelegate::addLazuliDelegate((uint64_t)v6, a1 + 72, &object, (uint64_t)&v15);
      if (v16)
        std::__shared_weak_count::__release_weak(v16);
      if (object)
        dispatch_release(object);
    }
    else
    {
      LazuliDelegate::removeLazuliDelegate(v6, (void **)(a1 + 72));
    }
    std::string::basic_string[abi:ne180100]<0>(v18, "ims.client");
    std::string::basic_string[abi:ne180100]<0>(v13, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"updating lazuli delegate ", 25);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 32))(v11, a1 + 72);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" for stack ", 11);
    *(_BYTE *)(v11 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)(a1 + 32));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v11 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v14 < 0)
      operator delete(v13[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
}

void sub_1BF027168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,std::__shared_weak_count *a22,dispatch_object_t object,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22)
    std::__shared_weak_count::__release_weak(a22);
  if (object)
    dispatch_release(object);
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c53_ZTSNSt3__110shared_ptrIN3ims6lazuli12ChatDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c21_ZTSN8dispatch5queueE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::string *v8;
  __int128 v9;
  NSObject *v10;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a1 + 64) = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = *(NSObject **)(a2 + 96);
  *(_QWORD *)(a1 + 96) = v10;
  if (v10)
    dispatch_retain(v10);
}

void sub_1BF0272AC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(a1);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c53_ZTSNSt3__110shared_ptrIN3ims6lazuli12ChatDelegateEEE72c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE96c21_ZTSN8dispatch5queueE(uint64_t a1)
{
  uint64_t v2;
  NSObject *v3;

  v2 = a1 + 56;
  v3 = *(NSObject **)(a1 + 96);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void IMSClientManager::clientQueue(void **a1@<X0>, NSObject **a2@<X8>)
{
  IMSClientManager *v4;
  IMSClientManager *v5;
  NSObject **ClientForStack;
  NSObject *v7;
  pthread_mutex_t *v8;
  _BYTE v9[72];

  v8 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v8, (uint64_t)v9);
  ImsResult::~ImsResult((ImsResult *)v9);
  v5 = IMSClientManager::instance(v4);
  ClientForStack = (NSObject **)IMSClientManager::getClientForStack((uint64_t)v5, a1);
  if (ClientForStack)
  {
    v7 = *ClientForStack;
    *a2 = v7;
    if (v7)
      dispatch_retain(v7);
  }
  else
  {
    *a2 = 0;
  }
  ImsLock::~ImsLock(&v8);
}

void sub_1BF0273A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

void IMSClientManager::callOnClientQueue(void **a1, void *a2)
{
  IMSClientManager *v4;
  IMSClientManager *v5;
  NSObject **ClientForStack;
  NSObject *v7;
  NSObject *v8;
  pthread_mutex_t *v9;
  _BYTE v10[72];

  v9 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v9, (uint64_t)v10);
  ImsResult::~ImsResult((ImsResult *)v10);
  v5 = IMSClientManager::instance(v4);
  ClientForStack = (NSObject **)IMSClientManager::getClientForStack((uint64_t)v5, a1);
  if (ClientForStack)
  {
    v7 = *ClientForStack;
    if (!v7
      && ((IMSClientManager::instance(0), (v8 = sImsDispatchQueue) != 0)
       || (v7 = dispatch_queue_create("com.apple.ipTelephony.queue", 0),
           v8 = v7,
           (sImsDispatchQueue = (uint64_t)v7) != 0)))
    {
      dispatch_retain(v8);
      dispatch_async(v8, a2);
      dispatch_release(v8);
    }
    else
    {
      dispatch_async(v7, a2);
    }
  }
  ImsLock::~ImsLock(&v9);
}

void sub_1BF02747C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, pthread_mutex_t *a9)
{
  ImsLock::~ImsLock(&a9);
  _Unwind_Resume(a1);
}

void IMSClientManager::callOnClientQueue(void **a1, uint64_t a2)
{
  uint64_t v4;
  IMSClientManager *v5;
  IMSClientManager *v6;
  NSObject **ClientForStack;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  uint64_t v11;
  IMSClientManager *v12;
  NSObject *v13;
  char v14;
  pthread_mutex_t *v15;
  void *__p;
  uint64_t v17;
  uint64_t (*v18)(uint64_t);
  void *v19;
  uint64_t v20;
  NSObject **v21;
  void *v22[2];
  char v23;

  v15 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v15, (uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&__p);
  std::string::basic_string[abi:ne180100]<0>(&__p, "util");
  std::string::basic_string[abi:ne180100]<0>(v22, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Adding block to client queue for stack ID: ", 43);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, a1);
  v5 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v23 < 0)
    operator delete(v22[0]);
  if (SHIBYTE(v18) < 0)
    operator delete(__p);
  v6 = IMSClientManager::instance(v5);
  ClientForStack = (NSObject **)IMSClientManager::getClientForStack((uint64_t)v6, a1);
  if (ClientForStack)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "util");
    std::string::basic_string[abi:ne180100]<0>(v22, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Adding block to client queue now", 32);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v23 < 0)
      operator delete(v22[0]);
    if (SHIBYTE(v18) < 0)
      operator delete(__p);
    if (*ClientForStack)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "util");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v9 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Adding block to custom dispatch queue", 37);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      if (v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v18) < 0)
        operator delete(__p);
      v10 = *ClientForStack;
      __p = (void *)MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke;
      v19 = &unk_1E78D1A00;
      v20 = a2;
      v21 = ClientForStack;
      dispatch_async(v10, &__p);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "util");
      std::string::basic_string[abi:ne180100]<0>(v22, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v11 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v22);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"Adding block to main dispatch queue", 35);
      *(_BYTE *)(v11 + 17) = 0;
      v12 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (v23 < 0)
        operator delete(v22[0]);
      if (SHIBYTE(v18) < 0)
        operator delete(__p);
      IMSClientManager::instance(v12);
      v13 = sImsDispatchQueue;
      if (sImsDispatchQueue
        || (v13 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v13) != 0))
      {
        dispatch_retain(v13);
        v14 = 0;
      }
      else
      {
        v14 = 1;
      }
      __p = (void *)MEMORY[0x1E0C809B0];
      v17 = 0x40000000;
      v18 = ___ZN15IMSClientRecord17callOnClientQueueEU13block_pointerFvPS_E_block_invoke_2;
      v19 = &unk_1E78D1A28;
      v20 = a2;
      v21 = ClientForStack;
      dispatch_async(v13, &__p);
      if ((v14 & 1) == 0)
        dispatch_release(v13);
    }
  }
  ImsLock::~ImsLock(&v15);
}

void sub_1BF027854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, pthread_mutex_t *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  ImsLock::~ImsLock(&a10);
  _Unwind_Resume(a1);
}

uint64_t IMSClientManager::delegateForStack(void **a1)
{
  IMSClientManager *v2;
  IMSClientManager *v3;
  char *ClientForStack;
  uint64_t *v5;
  uint64_t v6;
  IMSClientManager *v7;
  uint64_t v8;
  void *__p[2];
  char v11;
  pthread_mutex_t *v12;
  void *v13[2];
  char v14;

  v12 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v12, (uint64_t)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
  v3 = IMSClientManager::instance(v2);
  ClientForStack = (char *)IMSClientManager::getClientForStack((uint64_t)v3, a1);
  if (ClientForStack)
  {
    v5 = (uint64_t *)(ClientForStack + 32);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v13, "stack.delegate");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)v13, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"No client record for stack ", 27);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, a1);
    v7 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    if (v14 < 0)
      operator delete(v13[0]);
    v5 = (uint64_t *)((char *)IMSClientManager::instance(v7) + 96);
  }
  v8 = *v5;
  ImsLock::~ImsLock(&v12);
  return v8;
}

void sub_1BF0279E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pthread_mutex_t *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  ImsLock::~ImsLock(&a16);
  _Unwind_Resume(a1);
}

void IMSClientManager::lazuliDelegateForStack(void **a1@<X0>, _QWORD *a2@<X8>)
{
  IMSClientManager *v4;
  IMSClientManager *v5;
  IMSClientRecord *ClientForStack;
  IMSClientRecord *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  pthread_mutex_t *v14;
  void *v15[2];
  char v16;

  v14 = 0;
  ImsLock::set(&IMSClientManager::_mutex, &v14, (uint64_t)v15);
  ImsResult::~ImsResult((ImsResult *)v15);
  v5 = IMSClientManager::instance(v4);
  ClientForStack = (IMSClientRecord *)IMSClientManager::getClientForStack((uint64_t)v5, a1);
  v7 = ClientForStack;
  if (ClientForStack)
  {
    IMSClientRecord::createLazuliWrapper(ClientForStack);
    v8 = *((_QWORD *)v7 + 7);
    *a2 = *((_QWORD *)v7 + 6);
    a2[1] = v8;
    if (v8)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "lazuli.delegate");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::error(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"No client record for stack ", 27);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v11 + 32))(v11, a1);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    *a2 = 0;
    a2[1] = 0;
  }
  ImsLock::~ImsLock(&v14);
}

void sub_1BF027B78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, pthread_mutex_t *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  ImsLock::~ImsLock(&a16);
  _Unwind_Resume(a1);
}

uint64_t ___ZN16IMSClientManager15callOnMainQueueENSt3__18functionIFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v1;

  v1 = *(_QWORD *)(a1 + 56);
  if (!v1)
    std::__throw_bad_function_call[abi:ne180100]();
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

_QWORD *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *result;
  uint64_t v3;

  v1 = (_QWORD *)(a1 + 32);
  result = *(_QWORD **)(a1 + 56);
  if (result == v1)
  {
    v3 = 4;
    result = v1;
  }
  else
  {
    if (!result)
      return result;
    v3 = 5;
  }
  return (_QWORD *)(*(uint64_t (**)(void))(*result + 8 * v3))();
}

void IMSClientManager::callOnDestinationQueue(NSObject *a1, void *a2)
{
  if (a1)
    dispatch_async(a1, a2);
  else
    IMSClientManager::callOnMainQueue((IMSClientManager *)a2);
}

uint64_t IMSClientManager::timerManager(IMSClientManager *this)
{
  return *((_QWORD *)this + 16);
}

BOOL IMSClientManager::isEmergencyStack(unsigned __int8 *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  int v6;
  int v7;
  int v8;
  int v9;
  BOOL v11;
  BOOL v12;
  _BOOL8 v13;

  v1 = a1[23];
  if ((v1 & 0x80u) == 0)
    v2 = a1[23];
  else
    v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)&IMSClientManager::kEmergencyStack + 1);
  if (byte_1ED70C967 >= 0)
    v3 = byte_1ED70C967;
  if (v2 != v3)
    return 0;
  if (byte_1ED70C967 >= 0)
    v4 = &IMSClientManager::kEmergencyStack;
  else
    v4 = (__int128 *)IMSClientManager::kEmergencyStack;
  if ((v1 & 0x80) != 0)
    return memcmp(*(const void **)a1, v4, *((_QWORD *)a1 + 1)) == 0;
  if (!a1[23])
    return 1;
  v5 = v1 - 1;
  do
  {
    v7 = *a1++;
    v6 = v7;
    v9 = *(unsigned __int8 *)v4;
    v4 = (__int128 *)((char *)v4 + 1);
    v8 = v9;
    v11 = v5-- != 0;
    v12 = v6 == v8;
    v13 = v6 == v8;
  }
  while (v12 && v11);
  return v13;
}

void IMSClientManager::setBBServerConnection(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD v7[5];
  std::__shared_weak_count *v8;

  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN16IMSClientManager21setBBServerConnectionENSt3__110shared_ptrI18BBServerConnectionEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_53_0;
  v1 = (std::__shared_weak_count *)a1[1];
  v7[4] = *a1;
  v8 = v1;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldxr(p_shared_owners);
    while (__stxr(v3 + 1, p_shared_owners));
  }
  IMSClientManager::callOnMainQueue((IMSClientManager *)v7);
  v4 = v8;
  if (v8)
  {
    v5 = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF027DA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager21setBBServerConnectionENSt3__110shared_ptrI18BBServerConnectionEE_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v14);
  v2 = v14;
  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 5);
  v12 = *((_QWORD *)a1 + 4);
  v13 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v2 + 352), &v12);
  v6 = v13;
  if (v13)
  {
    v7 = (unint64_t *)&v13->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v15;
  if (v15)
  {
    v10 = (unint64_t *)&v15->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

uint64_t __copy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrI18BBServerConnectionEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c46_ZTSNSt3__110shared_ptrI18BBServerConnectionEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void IMSClientManager::addCallEndInfo(void **a1)
{
  void *v1;
  _QWORD v2[4];
  xpc_object_t object;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 1174405120;
  v2[2] = ___ZN16IMSClientManager14addCallEndInfoEN3xpc4dictE_block_invoke;
  v2[3] = &__block_descriptor_tmp_54;
  v1 = *a1;
  object = v1;
  if (v1)
    xpc_retain(v1);
  else
    object = xpc_null_create();
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
  xpc_release(object);
}

void sub_1BF027F2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
  xpc_release(object);
  _Unwind_Resume(a1);
}

void ___ZN16IMSClientManager14addCallEndInfoEN3xpc4dictE_block_invoke(IMSClientManager *a1)
{
  uint64_t v2;
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  xpc_object_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v8);
  v2 = v8;
  v3 = (xpc_object_t)*((_QWORD *)a1 + 4);
  v7 = v3;
  if (v3)
  {
    xpc_retain(v3);
  }
  else
  {
    v3 = xpc_null_create();
    v7 = v3;
  }
  IPTelephonyManager::addCallEndInfo(v2, &v7);
  xpc_release(v3);
  v7 = 0;
  v4 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF028000(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;

  xpc_release(v11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy(a1, a2[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,0>(uint64_t a1)
{
  std::__shared_weak_count *v2;
  NSObject *v3;

  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(NSObject **)(a1 + 48);
  if (v3)
    dispatch_release(v3);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void IMSWrapperDelegate::~IMSWrapperDelegate(IMSWrapperDelegate *this)
{
  std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy((uint64_t)this + 160, *((_QWORD **)this + 21));
  std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy((uint64_t)this + 136, *((_QWORD **)this + 18));
  std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy((uint64_t)this + 112, *((_QWORD **)this + 15));
  std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy((uint64_t)this + 88, *((_QWORD **)this + 12));
  std::__tree<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::__map_value_compare<std::string,std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,DelegateRecord<std::shared_ptr<ims::XcapEventDelegate>>>>>::destroy((uint64_t)this + 64, *((_QWORD **)this + 9));
  *((_QWORD *)this + 2) = &unk_1E78D2260;
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  IMSWrapperDelegate::~IMSWrapperDelegate(this);
  JUMPOUT(0x1C3B87100);
}

void std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::shared_ptr<ims::StackEventDelegate>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::shared_ptr<MessageSession>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void IMSNullClientDelegate::~IMSNullClientDelegate(IMSNullClientDelegate *this)
{
  *((_QWORD *)this + 2) = &unk_1E78D2260;
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  *((_QWORD *)this + 2) = &unk_1E78D2260;
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
  JUMPOUT(0x1C3B87100);
}

uint64_t IMSNullClientDelegate::handleIncomingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

void `non-virtual thunk to'IMSNullClientDelegate::~IMSNullClientDelegate(IMSNullClientDelegate *this)
{
  *((_QWORD *)this + 1) = &unk_1E78D2260;
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 8));
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 16));
}

{
  *((_QWORD *)this - 4) = &unk_1E78D2260;
  if (*((char *)this - 1) < 0)
    operator delete(*((void **)this - 3));
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 48));
}

{
  *((_QWORD *)this - 5) = &unk_1E78D2260;
  if (*((char *)this - 9) < 0)
    operator delete(*((void **)this - 4));
}

{
  IMSNullClientDelegate::~IMSNullClientDelegate((IMSNullClientDelegate *)((char *)this - 56));
}

void `non-virtual thunk to'IMSNullClientDelegate::~IMSNullClientDelegate(void **this)
{
  *this = &unk_1E78D2260;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t `non-virtual thunk to'IMSNullClientDelegate::handleIncomingEvent(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  if (a2)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  return result;
}

void std::__shared_ptr_emplace<LazuliDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D1F50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliDelegate>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D1F50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliDelegate>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,IMSClientRecord *>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSClientRecord *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSClientRecord *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BF0285B4(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E78D1FA0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E78D1FA0;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v2;
  std::string *v3;

  v2 = operator new(0x20uLL);
  *v2 = off_1E78D1FA0;
  v3 = (std::string *)(v2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v3, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)&v3->__r_.__value_.__l.__data_ = *(_OWORD *)(a1 + 8);
    v2[3] = *(_QWORD *)(a1 + 24);
  }
  return v2;
}

void sub_1BF0286B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  std::string *v2;
  __int128 v3;

  *a2 = off_1E78D1FA0;
  v2 = (std::string *)(a2 + 1);
  if (*(char *)(a1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(a1 + 8);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 24);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 31) < 0)
    operator delete(__p[1]);
  operator delete(__p);
}

void std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::operator()(IMSClientManager *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  void *__p[2];
  char v9;
  void *v10;
  std::__shared_weak_count *v11;
  char v12;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance((uint64_t *)&v10);
  v2 = v11;
  v3 = *((_QWORD *)v10 + 21);
  if (!v11)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    if (!v3)
      return;
  }
  else
  {
LABEL_5:
    if (!v3)
      return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v10, "cli.stk.inv");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v10, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Invalidating stack ", 19);
  v7 = (unsigned __int8 *)a1 + 8;
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v6 + 32))(v6, v7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v12 < 0)
    operator delete(v10);
  BambiClient::invalidateStack(v3, v7);
}

void sub_1BF028890(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<IMSClientManager::removeClient(std::string const&)::$_0,std::allocator<IMSClientManager::removeClient(std::string const&)::$_0>,void ()(void)>::target_type()
{
}

void ___ZN13ImsBlockQueue8addBlockINSt3__110shared_ptrI11SipLockableEEEEvRK14LoggableStringT_U13block_pointerFvvE_block_invoke(uint64_t a1)
{
  ImsBlockQueue::executeBlocks(*(ImsBlockQueue **)(a1 + 32));
}

void ___ZN13ImsBlockQueue8addBlockINSt3__110shared_ptrI21MediaSessionInterfaceEEEEvRK14LoggableStringT_U13block_pointerFvvE_block_invoke(uint64_t a1)
{
  ImsBlockQueue::executeBlocks(*(ImsBlockQueue **)(a1 + 32));
}

void ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::~ImsCapturableBlock(ImsBlock *a1)
{
  *(_QWORD *)a1 = &off_1E78D2060;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 40);
  ImsBlock::~ImsBlock(a1);
}

{
  *(_QWORD *)a1 = &off_1E78D2060;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a1 + 40);
  ImsBlock::~ImsBlock(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t ImsCapturableBlock<std::shared_ptr<MediaSessionInterface>>::perform(uint64_t result)
{
  if (*(_QWORD *)(result + 40))
  {
    result = *(_QWORD *)(result + 32);
    if (result)
      return (*(uint64_t (**)(void))(result + 16))();
  }
  return result;
}

void std::__throw_bad_function_call[abi:ne180100]()
{
  _QWORD *exception;

  exception = __cxa_allocate_exception(8uLL);
}

void std::bad_function_call::~bad_function_call(std::bad_function_call *this)
{
  std::exception::~exception(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t _GLOBAL__sub_I_IMSClientManager_cpp()
{
  void (*v0)(void *);

  pthread_mutex_init(&IMSClientManager::_mutex, 0);
  __cxa_atexit((void (*)(void *))ImsMutex::~ImsMutex, &IMSClientManager::_mutex, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&IMSClientManager::kDefaultStack, "0224B9FE-9648-11E6-AE22-56B6B6499611");
  v0 = (void (*)(void *))MEMORY[0x1E0DE44D0];
  __cxa_atexit(MEMORY[0x1E0DE44D0], &IMSClientManager::kDefaultStack, &dword_1BEDF4000);
  std::string::basic_string[abi:ne180100]<0>(&IMSClientManager::kEmergencyStack, "8928DFB0-9B9E-11E6-9F33-A24FC0D9649C");
  return __cxa_atexit(v0, &IMSClientManager::kEmergencyStack, &dword_1BEDF4000);
}

uint64_t SipRAckHeader::SipRAckHeader(uint64_t a1, int a2, int a3, const std::string *a4)
{
  uint64_t v8;

  v8 = SipHeader::SipHeader(a1, (const std::string *)"RAck");
  *(_QWORD *)v8 = off_1E78D23A8;
  *(_QWORD *)(v8 + 72) = 0;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 0;
  *(_DWORD *)(v8 + 60) = a2;
  *(_DWORD *)(v8 + 64) = a3;
  std::string::operator=((std::string *)(v8 + 72), a4);
  *(_BYTE *)(a1 + 56) = 0;
  return a1;
}

void sub_1BF028B20(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  SipHeader::~SipHeader((void **)v1);
  _Unwind_Resume(a1);
}

uint64_t SipRAckHeader::fromResponse(SipRAckHeader *this, const SipResponse *a2)
{
  _DWORD *v4;
  char *v5;
  BOOL v6;
  uint64_t v7;
  int v8;

  v4 = SipMessage::header<SipRSeqHeader>((uint64_t)a2);
  v5 = (char *)SipMessage::header<SipCSeqHeader>((uint64_t)a2);
  if (v4)
    v6 = v5 == 0;
  else
    v6 = 1;
  v7 = !v6;
  if (!v6)
  {
    v8 = *((_DWORD *)v5 + 15);
    *((_DWORD *)this + 15) = v4[15];
    *((_DWORD *)this + 16) = v8;
    std::string::operator=((std::string *)this + 3, (const std::string *)(v5 + 64));
  }
  return v7;
}

void *SipMessage::header<SipRSeqHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), (unsigned __int8 *)&SipHeader::kHeaderRSeq);
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void *SipMessage::header<SipCSeqHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "CSeq");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

uint64_t SipRAckHeader::encodeValue(SipRAckHeader *this, ImsOutStream *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  char v7;
  char v8;

  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  v4 = (_QWORD *)*((_QWORD *)a2 + 1);
  v7 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v7, 1);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  v5 = (_QWORD *)*((_QWORD *)a2 + 1);
  v8 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v8, 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 72);
  return 1;
}

uint64_t SipRAckHeader::setValueFromString(std::string *a1, const std::string *a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  void *__p[2];
  __int128 v10;
  _OWORD v11[10];

  memset(v11, 0, sizeof(v11));
  *(_OWORD *)__p = 0u;
  v10 = 0u;
  v7 = 0u;
  v8 = 0u;
  v5 = 0u;
  v6 = 0u;
  v4 = 0u;
  std::istringstream::basic_istringstream[abi:ne180100](&v4, a2, 8);
  MEMORY[0x1C3B86E84](&v4, (char *)&a1[2].__r_.__value_.__r.__words[1] + 4);
  MEMORY[0x1C3B86E84](&v4, &a1[2].__r_.__value_.__r.__words[2]);
  a1 += 3;
  std::operator>>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((uint64_t *)&v4, (uint64_t)a1);
  ims::chomp(a1, "\r\n\t ", 3);
  *(_QWORD *)&v4 = *MEMORY[0x1E0DE4F58];
  *(_QWORD *)((char *)&v4 + *(_QWORD *)(v4 - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F58] + 24);
  *(_QWORD *)&v5 = MEMORY[0x1E0DE4FB8] + 16;
  if (SBYTE7(v10) < 0)
    operator delete(__p[0]);
  std::streambuf::~streambuf();
  std::istream::~istream();
  MEMORY[0x1C3B8707C]((char *)v11 + 8);
  return 1;
}

void sub_1BF028DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::istringstream::~istringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipRAckHeader::~SipRAckHeader(void **this)
{
  *this = off_1E78D23A8;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78D23A8;
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipRAckHeader::clone(SipRAckHeader *this)
{
  uint64_t v2;

  v2 = operator new();
  SipHeader::SipHeader((SipHeader *)v2, this);
  *(_QWORD *)(v2 + 72) = 0;
  *(_QWORD *)v2 = off_1E78D23A8;
  *(_QWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_QWORD *)(v2 + 60) = *(_QWORD *)((char *)this + 60);
  std::string::operator=((std::string *)(v2 + 72), (const std::string *)this + 3);
  *(_BYTE *)(v2 + 56) = 0;
  return v2;
}

void sub_1BF028EFC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 95) < 0)
    operator delete(*v2);
  SipHeader::~SipHeader((void **)v1);
  MEMORY[0x1C3B87100](v1, 0x1093C4040100EA9);
  _Unwind_Resume(a1);
}

void SipTimerInfo::~SipTimerInfo(SipTimerInfo **this)
{
  SipTimerInfo *v2;
  uint64_t v3;

  SipTimerInfo::invalidate((SipTimerInfo *)this);
  v2 = this[11];
  if (v2 == (SipTimerInfo *)(this + 8))
  {
    v3 = 4;
    v2 = (SipTimerInfo *)(this + 8);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

SipTimerInfo *SipTimerInfo::invalidate(SipTimerInfo *this)
{
  double v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  double v7;
  tm *v8;
  CFDateRef v9;
  NSObject *v10;
  SipTimerInfo *result;
  uint64_t v12;
  std::string v13;
  std::string __p;

  if (*((_QWORD *)this + 3))
  {
    v2 = *((double *)this + 4);
    v3 = *((_QWORD *)this + 6);
    v4 = v3 + 48;
    v5 = v3 + 72;
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Canceling system wake for timer ", 32);
    *(_BYTE *)(v6 + 17) = 0;
    ims::CFString::asString(*((const __CFString **)this + 3), (const void *)0x8000100, &v13);
    LoggableString::LoggableString(&__p, &v13);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" at ", 4);
    v7 = v2 + -4.0;
    *(_BYTE *)(v6 + 17) = 0;
    ims::formatTimeAndIntervalFromNow((ims *)(uint64_t)(v7 + *MEMORY[0x1E0C9ADF8]), v6, v8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v13.__r_.__value_.__l.__data_);
    v9 = CFDateCreate(0, v7);
    CPCancelWakeAtDateWithIdentifier();
    CFRelease(v9);
    CFRelease(*((CFTypeRef *)this + 3));
    *((_QWORD *)this + 3) = 0;
  }
  v10 = *((_QWORD *)this + 5);
  if (v10)
    dispatch_release(v10);
  result = (SipTimerInfo *)*((_QWORD *)this + 11);
  *((_QWORD *)this + 11) = 0;
  if (result == (SipTimerInfo *)((char *)this + 64))
  {
    v12 = 4;
    result = (SipTimerInfo *)((char *)this + 64);
  }
  else
  {
    if (!result)
      return result;
    v12 = 5;
  }
  return (SipTimerInfo *)(*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v12))();
}

void sub_1BF029150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::fullTimerId@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD v19[4];
  void *__p[2];
  __int128 v21;
  __int128 v22;
  _OWORD v23[9];
  uint64_t v24;
  char v25;

  v24 = 0;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  *(_OWORD *)__p = 0u;
  v21 = 0u;
  memset(v19, 0, sizeof(v19));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v19);
  if (a2)
  {
    v8 = *(_QWORD *)(a1 + 112);
    v7 = a1 + 112;
    v6 = v8;
    v9 = *(char *)(v7 + 23);
    if (v9 >= 0)
      v10 = v7;
    else
      v10 = v6;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = *(_QWORD *)(v7 + 8);
    v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v19, v10, v11);
    v25 = 46;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v25, 1);
    v13 = (_QWORD *)std::ostream::operator<<();
    v25 = 46;
    v14 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)&v25, 1);
    v15 = *(char *)(a2 + 23);
    if (v15 >= 0)
      v16 = a2;
    else
      v16 = *(_QWORD *)a2;
    if (v15 >= 0)
      v17 = *(unsigned __int8 *)(a2 + 23);
    else
      v17 = *(_QWORD *)(a2 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, v16, v17);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v19 + 8, a3);
  *(_QWORD *)&v19[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v19 + *(_QWORD *)(*(_QWORD *)&v19[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v19[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v21) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v23);
}

void sub_1BF0292DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::ostringstream::~ostringstream((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12SipTimerInfo10initializeEP17SipTimerContainerb_block_invoke(IMSClientManager *a1)
{
  IMSClientManager *v2;

  v2 = IMSClientManager::instance(a1);
  return (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)v2 + 16) + 32))(*((_QWORD *)v2 + 16), (uint64_t)a1 + 32);
}

void SipTimerContainer::SipTimerContainer(SipTimerContainer *this)
{
  void **v2;
  void (**v3)(ImsUuid *__hidden);
  std::string __p;
  std::string v5;

  *(_QWORD *)this = &off_1E78D2488;
  *(_OWORD *)((char *)this + 8) = 0u;
  *(_OWORD *)((char *)this + 24) = 0u;
  *((_DWORD *)this + 10) = 1065353216;
  *((_OWORD *)this + 3) = 0u;
  *((_OWORD *)this + 7) = 0u;
  v2 = (void **)((char *)this + 112);
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  *((_OWORD *)this + 8) = 0u;
  ImsUuid::generate((ImsUuid *)&v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v5, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    v5 = __p;
  if (*((char *)this + 135) < 0)
    operator delete(*v2);
  *(std::string *)v2 = v5;
  *((_BYTE *)&v5.__r_.__value_.__s + 23) = 0;
  v5.__r_.__value_.__s.__data_[0] = 0;
  v3 = off_1E78C0288;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BF029414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  uint64_t v16;
  void **v17;
  void **v18;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 135) < 0)
    operator delete(*v18);
  if (*(char *)(v15 + 95) < 0)
    operator delete(*(void **)(v15 + 72));
  if (*(char *)(v15 + 71) < 0)
    operator delete(*v17);
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table(v16);
  _Unwind_Resume(a1);
}

void SipTimerContainer::~SipTimerContainer(SipTimerContainer *this)
{
  *(_QWORD *)this = &off_1E78D2488;
  *((_QWORD *)this + 13) = 0;
  SipTimerContainer::cancelAllTimers(this);
  if (*((char *)this + 135) < 0)
    operator delete(*((void **)this + 14));
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::~__hash_table((uint64_t)this + 8);
}

{
  SipTimerContainer::~SipTimerContainer(this);
  JUMPOUT(0x1C3B87100);
}

void SipTimerContainer::cancelAllTimers(SipTimerContainer *this)
{
  uint64_t *i;
  uint64_t v3;
  IMSClientManager *v4;
  uint64_t v5;
  SipTimerInfo **v6;
  uint64_t v7;
  uint64_t j;
  std::string __p;
  void *v10[2];
  char v11;

  for (i = (uint64_t *)*((_QWORD *)this + 3); i; i = (uint64_t *)*i)
  {
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)this + 48, (uint64_t)this + 72);
    (*(void (**)(void **__return_ptr, SipTimerContainer *))(*(_QWORD *)this + 24))(v10, this);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 40))(v3, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)": canceling timer ", 18);
    *(_BYTE *)(v3 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)(i + 2));
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v3 + 40))(v3, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v11 < 0)
      operator delete(v10[0]);
    dispatch_source_cancel(*(dispatch_source_t *)(i[5] + 40));
    v5 = *((_QWORD *)IMSClientManager::instance(v4) + 16);
    SipTimerContainer::fullTimerId((uint64_t)this, i[5], v10);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 24))(v5, v10);
    if (v11 < 0)
      operator delete(v10[0]);
    v6 = (SipTimerInfo **)i[5];
    if (v6)
    {
      SipTimerInfo::~SipTimerInfo(v6);
      MEMORY[0x1C3B87100]();
    }
  }
  if (*((_QWORD *)this + 4))
  {
    std::__hash_table<std::string,std::hash<std::string>,std::equal_to<std::string>,std::allocator<std::string>>::__deallocate_node((_DWORD)this + 8, *((void ***)this + 3));
    *((_QWORD *)this + 3) = 0;
    v7 = *((_QWORD *)this + 2);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*((_QWORD *)this + 1) + 8 * j) = 0;
    }
    *((_QWORD *)this + 4) = 0;
  }
}

void sub_1BF0296C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::startTimer(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, int a5)
{
  uint64_t v5;
  uint64_t v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  std::string::size_type size;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  std::string *v22;
  std::string::size_type v23;
  _QWORD *v24;
  _QWORD *v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  IMSClientManager *v31;
  dispatch_source_t v32;
  dispatch_time_t v33;
  NSObject *v34;
  uint64_t v35;
  char v36;
  IMSClientManager *v37;
  IMSClientManager *v38;
  double v39;
  CFDateRef v40;
  uint64_t v41;
  tm *v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t v45;
  uint8x8_t v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  void **v51;
  void *i;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  std::string *v56;
  float v57;
  float v58;
  _BOOL8 v59;
  unint64_t v60;
  unint64_t v61;
  int8x8_t prime;
  void *v63;
  void *v64;
  uint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  uint8x8_t v68;
  unint64_t v69;
  uint8x8_t v70;
  uint64_t v71;
  _QWORD *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  std::string v79;
  std::string v80;
  _QWORD v81[3];
  _QWORD *v82;
  std::string handler;
  void *v84;
  std::string v85;
  void *__p[2];
  __int128 v87;
  __int128 v88;
  __int128 v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  _BYTE v93[144];
  uint64_t v94;
  uint64_t v95;

  v95 = *MEMORY[0x1E0C80C00];
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    return 0;
  SipTimerContainer::cancelTimer((SipTimerContainer *)a1, (std::string *)a2);
  v11 = operator new();
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v81, a3);
  *(_QWORD *)v11 = 0;
  *(_QWORD *)(v11 + 8) = 0;
  *(_QWORD *)(v11 + 16) = 0;
  *(_QWORD *)(v11 + 40) = 0;
  v12 = (void **)(v11 + 64);
  *(_QWORD *)(v11 + 88) = 0;
  std::string::operator=((std::string *)v11, (const std::string *)a2);
  *(_QWORD *)(v11 + 56) = 1000000 * a4;
  if (!v82)
  {
    *((_QWORD *)&v87 + 1) = 0;
    v14 = *(void ***)(v11 + 88);
    if (v14 != v12)
    {
      v13 = 0;
LABEL_12:
      *((_QWORD *)&v87 + 1) = v14;
      *(_QWORD *)(v11 + 88) = v13;
      goto LABEL_17;
    }
LABEL_13:
    v14 = __p;
    (*((void (**)(uint64_t, void **))*v12 + 3))(v11 + 64, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 88) + 32))(*(_QWORD *)(v11 + 88));
    *(_QWORD *)(v11 + 88) = *((_QWORD *)&v87 + 1);
    *((_QWORD *)&v87 + 1) = __p;
    v15 = 4;
    goto LABEL_21;
  }
  if (v82 == v81)
  {
    *((_QWORD *)&v87 + 1) = __p;
    (*(void (**)(_QWORD *, void **))(v81[0] + 24))(v81, __p);
    v13 = (void **)*((_QWORD *)&v87 + 1);
  }
  else
  {
    v13 = (void **)(*(uint64_t (**)(void))(*v82 + 16))();
    *((_QWORD *)&v87 + 1) = v13;
  }
  v14 = *(void ***)(v11 + 88);
  if (v13 != __p)
  {
    if (v14 != v12)
      goto LABEL_12;
    goto LABEL_13;
  }
  if (v14 == v12)
  {
    memset(&handler, 0, sizeof(handler));
    (*((void (**)(void **, std::string *))__p[0] + 3))(__p, &handler);
    (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 32))(*((_QWORD *)&v87 + 1));
    *((_QWORD *)&v87 + 1) = 0;
    (*(void (**)(_QWORD, void **))(**(_QWORD **)(v11 + 88) + 24))(*(_QWORD *)(v11 + 88), __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v11 + 88) + 32))(*(_QWORD *)(v11 + 88));
    *(_QWORD *)(v11 + 88) = 0;
    *((_QWORD *)&v87 + 1) = __p;
    (*(void (**)(std::string *, uint64_t))(handler.__r_.__value_.__r.__words[0] + 24))(&handler, v11 + 64);
    (*(void (**)(std::string *))(handler.__r_.__value_.__r.__words[0] + 32))(&handler);
    *(_QWORD *)(v11 + 88) = v12;
    v14 = (void **)*((_QWORD *)&v87 + 1);
  }
  else
  {
    (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, v11 + 64);
    (*(void (**)(_QWORD))(**((_QWORD **)&v87 + 1) + 32))(*((_QWORD *)&v87 + 1));
    v14 = *(void ***)(v11 + 88);
    *((_QWORD *)&v87 + 1) = v14;
    *(_QWORD *)(v11 + 88) = v12;
  }
LABEL_17:
  if (v14 == __p)
  {
    v15 = 4;
    v14 = __p;
  }
  else
  {
    if (!v14)
      goto LABEL_22;
    v15 = 5;
  }
LABEL_21:
  (*((void (**)(void **))*v14 + v15))(v14);
LABEL_22:
  *(double *)(v11 + 32) = (double)a4 / 1000.0 + CFAbsoluteTimeGetCurrent();
  *(_QWORD *)(v11 + 24) = 0;
  v16 = v82;
  if (v82 == v81)
  {
    v17 = 4;
    v16 = v81;
  }
  else
  {
    if (!v82)
      goto LABEL_27;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_27:
  if (a5)
  {
    memset(&v80, 0, sizeof(v80));
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    if (SBYTE7(v87) < 0)
    {
      std::string::__init_copy_ctor_external(&v80, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
      if (SBYTE7(v87) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_OWORD *)&v80.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      v80.__r_.__value_.__r.__words[2] = v87;
    }
    if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v80.__r_.__value_.__r.__words[2]);
    else
      size = v80.__r_.__value_.__l.__size_;
    if (size)
    {
      v94 = 0;
      v92 = 0u;
      memset(v93, 0, sizeof(v93));
      v90 = 0u;
      v91 = 0u;
      v88 = 0u;
      v89 = 0u;
      *(_OWORD *)__p = 0u;
      v87 = 0u;
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
      if (byte_1ED70E607 >= 0)
        v19 = &kWakeTimerIdPrefix;
      else
        v19 = (uint64_t *)kWakeTimerIdPrefix;
      if (byte_1ED70E607 >= 0)
        v20 = byte_1ED70E607;
      else
        v20 = unk_1ED70E5F8;
      v21 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, (uint64_t)v19, v20);
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v22 = &v80;
      else
        v22 = (std::string *)v80.__r_.__value_.__r.__words[0];
      if ((v80.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = HIBYTE(v80.__r_.__value_.__r.__words[2]);
      else
        v23 = v80.__r_.__value_.__l.__size_;
      v24 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)v22, v23);
      v79.__r_.__value_.__s.__data_[0] = 46;
      v25 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v24, (uint64_t)&v79, 1);
      v26 = *(char *)(v11 + 23);
      if (v26 >= 0)
        v27 = v11;
      else
        v27 = *(_QWORD *)v11;
      if (v26 >= 0)
        v28 = *(unsigned __int8 *)(v11 + 23);
      else
        v28 = *(_QWORD *)(v11 + 8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v25, v27, v28);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], &v79);
      if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v29 = &v79;
      else
        v29 = (std::string *)v79.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v11 + 24) = CFStringCreateWithCString(0, (const char *)v29, 0x8000100u);
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      __p[0] = *(void **)MEMORY[0x1E0DE4F60];
      *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
      __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
      if (SHIBYTE(v91) < 0)
        operator delete(*((void **)&v90 + 1));
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8707C](v93);
    }
    else
    {
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v30 = ImsLogger::error(ims::_logger, (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"scheduleSystemWake requires a container name", 44);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
    }
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v80.__r_.__value_.__l.__data_);
      if (!size)
        goto LABEL_91;
    }
    else if (!size)
    {
      goto LABEL_91;
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v87 = 0;
  v31 = (IMSClientManager *)SipTimerContainer::fullTimerId((uint64_t)a1, v11, __p);
  IMSClientManager::instance(v31);
  IMSClientManager::queue((NSObject **)&v80);
  v32 = dispatch_source_create(MEMORY[0x1E0C80DD0], 0, 0, (dispatch_queue_t)v80.__r_.__value_.__l.__data_);
  *(_QWORD *)(v11 + 40) = v32;
  if (v80.__r_.__value_.__r.__words[0])
  {
    dispatch_release((dispatch_object_t)v80.__r_.__value_.__l.__data_);
    v32 = *(dispatch_source_t *)(v11 + 40);
  }
  if (!v32)
  {
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v35 = ImsLogger::error(ims::_logger, (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"unable to create dispatch source timer", 38);
    *(_BYTE *)(v35 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v36 = 0;
    *(_BYTE *)(v35 + 17) = 0;
    goto LABEL_85;
  }
  v33 = dispatch_time(0, *(_QWORD *)(v11 + 56));
  dispatch_source_set_timer(*(dispatch_source_t *)(v11 + 40), v33, 0xFFFFFFFFFFFFFFFFLL, 0x3E8uLL);
  v34 = *(NSObject **)(v11 + 40);
  handler.__r_.__value_.__r.__words[0] = MEMORY[0x1E0C809B0];
  handler.__r_.__value_.__l.__size_ = 1174405120;
  handler.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN12SipTimerInfo10initializeEP17SipTimerContainerb_block_invoke;
  v84 = &__block_descriptor_tmp_26;
  if (SBYTE7(v87) < 0)
  {
    std::string::__init_copy_ctor_external(&v85, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
  }
  else
  {
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    v85.__r_.__value_.__r.__words[2] = v87;
  }
  dispatch_source_set_event_handler(v34, &handler);
  v38 = IMSClientManager::instance(v37);
  (*(void (**)(_QWORD, uint64_t, _QWORD *))(**((_QWORD **)v38 + 16) + 16))(*((_QWORD *)v38 + 16), v11, a1);
  dispatch_resume(*(dispatch_object_t *)(v11 + 40));
  *(_QWORD *)(v11 + 48) = a1;
  if (!*(_QWORD *)(v11 + 24))
    goto LABEL_81;
  v39 = *(double *)(v11 + 32) + -4.0;
  v40 = CFDateCreate(0, v39);
  if (v40)
  {
    CPCancelWakeAtDateWithIdentifier();
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v41 = ImsLogger::debug(ims::_logger, (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"Scheduling system wake for timer ", 33);
    *(_BYTE *)(v41 + 17) = 0;
    ims::CFString::asString(*(const __CFString **)(v11 + 24), (const void *)0x8000100, &v79);
    LoggableString::LoggableString(&v80, &v79);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v41 + 40))(v41, &v80);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" at ", 4);
    *(_BYTE *)(v41 + 17) = 0;
    ims::formatTimeAndIntervalFromNow((ims *)(uint64_t)(v39 + *MEMORY[0x1E0C9ADF8]), v41, v42);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v41 + 17) = 0;
    if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v80.__r_.__value_.__l.__data_);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    CPScheduleWakeAtDateWithIdentifier();
    CFRelease(v40);
LABEL_81:
    v36 = 1;
    goto LABEL_83;
  }
  v36 = 0;
LABEL_83:
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v85.__r_.__value_.__l.__data_);
LABEL_85:
  if ((SBYTE7(v87) & 0x80000000) == 0)
  {
    if ((v36 & 1) != 0)
      goto LABEL_87;
LABEL_91:
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v49 = ImsLogger::error(ims::_logger, (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
    (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v49 + 40))(v49, __p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)": unable to start timer ", 24);
    *(_BYTE *)(v49 + 17) = 0;
    LoggableString::LoggableString(&handler, (const std::string *)a2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v49 + 40))(v49, &handler);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v49 + 17) = 0;
    if (SHIBYTE(handler.__r_.__value_.__r.__words[2]) < 0)
      operator delete(handler.__r_.__value_.__l.__data_);
    if (SBYTE7(v87) < 0)
      operator delete(__p[0]);
    SipTimerInfo::~SipTimerInfo((SipTimerInfo **)v11);
    MEMORY[0x1C3B87100]();
    return 0;
  }
  operator delete(__p[0]);
  if ((v36 & 1) == 0)
    goto LABEL_91;
LABEL_87:
  v43 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 4), a2);
  v44 = v43;
  v45 = a1[2];
  if (v45)
  {
    v46 = (uint8x8_t)vcnt_s8((int8x8_t)v45);
    v46.i16[0] = vaddlv_u8(v46);
    v47 = v46.u32[0];
    if (v46.u32[0] > 1uLL)
    {
      v48 = v43;
      if (v43 >= v45)
        v48 = v43 % v45;
    }
    else
    {
      v48 = (v45 - 1) & v43;
    }
    v51 = *(void ***)(a1[1] + 8 * v48);
    if (v51)
    {
      for (i = *v51; i; i = *(void **)i)
      {
        v53 = *((_QWORD *)i + 1);
        if (v53 == v44)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 5), (unsigned __int8 *)i + 16, (unsigned __int8 *)a2) & 1) != 0)goto LABEL_169;
        }
        else
        {
          if (v47 > 1)
          {
            if (v53 >= v45)
              v53 %= v45;
          }
          else
          {
            v53 &= v45 - 1;
          }
          if (v53 != v48)
            break;
        }
      }
    }
  }
  else
  {
    v48 = 0;
  }
  *(_QWORD *)&v87 = 0;
  v54 = operator new(0x30uLL);
  v55 = a1 + 3;
  __p[0] = v54;
  __p[1] = a1 + 3;
  *v54 = 0;
  v54[1] = v44;
  v56 = (std::string *)(v54 + 2);
  if (*(char *)(a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v56, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)&v56->__r_.__value_.__l.__data_ = *(_OWORD *)a2;
    v54[4] = *(_QWORD *)(a2 + 16);
  }
  v54[5] = 0;
  LOBYTE(v87) = 1;
  v57 = (float)(unint64_t)(a1[4] + 1);
  v58 = *((float *)a1 + 10);
  if (v45 && (float)(v58 * (float)v45) >= v57)
    goto LABEL_160;
  v59 = 1;
  if (v45 >= 3)
    v59 = (v45 & (v45 - 1)) != 0;
  v60 = v59 | (2 * v45);
  v61 = vcvtps_u32_f32(v57 / v58);
  if (v60 <= v61)
    prime = (int8x8_t)v61;
  else
    prime = (int8x8_t)v60;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
  }
  v45 = a1[2];
  if (*(_QWORD *)&prime > v45)
    goto LABEL_126;
  if (*(_QWORD *)&prime < v45)
  {
    v69 = vcvtps_u32_f32((float)(unint64_t)a1[4] / *((float *)a1 + 10));
    if (v45 < 3 || (v70 = (uint8x8_t)vcnt_s8((int8x8_t)v45), v70.i16[0] = vaddlv_u8(v70), v70.u32[0] > 1uLL))
    {
      v69 = std::__next_prime(v69);
    }
    else
    {
      v71 = 1 << -(char)__clz(v69 - 1);
      if (v69 >= 2)
        v69 = v71;
    }
    if (*(_QWORD *)&prime <= v69)
      prime = (int8x8_t)v69;
    if (*(_QWORD *)&prime >= v45)
    {
      v45 = a1[2];
    }
    else
    {
      if (prime)
      {
LABEL_126:
        if (*(_QWORD *)&prime >> 61)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v63 = operator new(8 * *(_QWORD *)&prime);
        v64 = (void *)a1[1];
        a1[1] = v63;
        if (v64)
          operator delete(v64);
        v65 = 0;
        a1[2] = prime;
        do
          *(_QWORD *)(a1[1] + 8 * v65++) = 0;
        while (*(_QWORD *)&prime != v65);
        v66 = (_QWORD *)*v55;
        if (*v55)
        {
          v67 = v66[1];
          v68 = (uint8x8_t)vcnt_s8(prime);
          v68.i16[0] = vaddlv_u8(v68);
          if (v68.u32[0] > 1uLL)
          {
            if (v67 >= *(_QWORD *)&prime)
              v67 %= *(_QWORD *)&prime;
          }
          else
          {
            v67 &= *(_QWORD *)&prime - 1;
          }
          *(_QWORD *)(a1[1] + 8 * v67) = v55;
          v72 = (_QWORD *)*v66;
          if (*v66)
          {
            do
            {
              v73 = v72[1];
              if (v68.u32[0] > 1uLL)
              {
                if (v73 >= *(_QWORD *)&prime)
                  v73 %= *(_QWORD *)&prime;
              }
              else
              {
                v73 &= *(_QWORD *)&prime - 1;
              }
              if (v73 != v67)
              {
                v74 = a1[1];
                if (!*(_QWORD *)(v74 + 8 * v73))
                {
                  *(_QWORD *)(v74 + 8 * v73) = v66;
                  goto LABEL_151;
                }
                *v66 = *v72;
                *v72 = **(_QWORD **)(a1[1] + 8 * v73);
                **(_QWORD **)(a1[1] + 8 * v73) = v72;
                v72 = v66;
              }
              v73 = v67;
LABEL_151:
              v66 = v72;
              v72 = (_QWORD *)*v72;
              v67 = v73;
            }
            while (v72);
          }
        }
        v45 = (unint64_t)prime;
        goto LABEL_155;
      }
      v78 = (void *)a1[1];
      a1[1] = 0;
      if (v78)
        operator delete(v78);
      v45 = 0;
      a1[2] = 0;
    }
  }
LABEL_155:
  if ((v45 & (v45 - 1)) != 0)
  {
    if (v44 >= v45)
      v48 = v44 % v45;
    else
      v48 = v44;
  }
  else
  {
    v48 = (v45 - 1) & v44;
  }
LABEL_160:
  v75 = *(_QWORD **)(a1[1] + 8 * v48);
  if (v75)
  {
    *(_QWORD *)__p[0] = *v75;
    *v75 = __p[0];
  }
  else
  {
    *(_QWORD *)__p[0] = a1[3];
    a1[3] = __p[0];
    *(_QWORD *)(a1[1] + 8 * v48) = v55;
    if (*(_QWORD *)__p[0])
    {
      v76 = *(_QWORD *)(*(_QWORD *)__p[0] + 8);
      if ((v45 & (v45 - 1)) != 0)
      {
        if (v76 >= v45)
          v76 %= v45;
      }
      else
      {
        v76 &= v45 - 1;
      }
      *(void **)(a1[1] + 8 * v76) = __p[0];
    }
  }
  i = __p[0];
  ++a1[4];
LABEL_169:
  *((_QWORD *)i + 5) = v11;
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v77 = ImsLogger::debug(ims::_logger, (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
  (*(void (**)(void **__return_ptr, _QWORD *))(*a1 + 24))(__p, a1);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v77 + 40))(v77, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)": started timer ", 16);
  *(_BYTE *)(v77 + 17) = 0;
  LoggableString::LoggableString(&handler, (const std::string *)a2);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v77 + 40))(v77, &handler);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)" with duration ", 15);
  *(_BYTE *)(v77 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v77 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v77 + 8), (uint64_t)"ms", 2);
  *(_BYTE *)(v77 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v77 + 64))(v77, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v77 + 17) = 0;
  if (SHIBYTE(handler.__r_.__value_.__r.__words[2]) < 0)
    operator delete(handler.__r_.__value_.__l.__data_);
  if (SBYTE7(v87) < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1BF02A570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  uint64_t v48;
  void **v49;

  std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100](v48, v49);
  _Unwind_Resume(a1);
}

unsigned __int8 *SipTimerContainer::cancelTimer(SipTimerContainer *a1, std::string *a2)
{
  unsigned __int8 *result;
  unsigned __int8 *v5;
  uint64_t v6;
  std::string __p;
  void *v8[2];
  char v9;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)a1 + 1, (unsigned __int8 *)a2);
  if (result)
  {
    v5 = result;
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)a1 + 48, (uint64_t)a1 + 72);
    (*(void (**)(void **__return_ptr, SipTimerContainer *))(*(_QWORD *)a1 + 24))(v8, a1);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": canceling timer ", 18);
    *(_BYTE *)(v6 + 17) = 0;
    LoggableString::LoggableString(&__p, a2);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v9 < 0)
      operator delete(v8[0]);
    return (unsigned __int8 *)SipTimerContainer::cancelTimer(a1, *((dispatch_source_t **)v5 + 5));
  }
  return result;
}

void sub_1BF02A860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::cancelTimer(SipTimerContainer *this, dispatch_source_t *a2)
{
  uint64_t v4;
  void *__p[2];
  char v7;

  v4 = *((_QWORD *)IMSClientManager::instance(this) + 16);
  SipTimerContainer::fullTimerId((uint64_t)this, (uint64_t)a2, __p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 24))(v4, __p);
  if (v7 < 0)
    operator delete(__p[0]);
  dispatch_source_cancel(a2[5]);
  std::__hash_table<std::__hash_value_type<std::string,SipTimerInfo *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipTimerInfo *>>>::__erase_unique<std::string>((_QWORD *)this + 1, (unsigned __int8 *)a2);
  SipTimerInfo::~SipTimerInfo((SipTimerInfo **)a2);
  return MEMORY[0x1C3B87100]();
}

void sub_1BF02A934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

unsigned __int8 *SipTimerContainer::timerPastDue(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  uint64_t v3;

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>((_QWORD *)(a1 + 8), a2);
  if (result)
  {
    v3 = *((_QWORD *)result + 5);
    if (v3)
      return (unsigned __int8 *)(*(double *)(v3 + 32) <= CFAbsoluteTimeGetCurrent());
    else
      return 0;
  }
  return result;
}

void SipTimerContainer::timerFired(SipTimerContainer *this, std::string *a2)
{
  uint64_t v4;
  void *v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  std::string __p;
  void *v10[2];
  char v11;
  std::string v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(SipTimerContainer *))(*(_QWORD *)this + 40))(this) & 1) == 0)
  {
    SipTimerContainer::cancelAllTimers(this);
    return;
  }
  if (!a2)
  {
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::error(ims::_logger, (uint64_t)this + 48, (uint64_t)this + 72);
    (*(void (**)(__int128 *__return_ptr, SipTimerContainer *))(*(_QWORD *)this + 24))(&v13, this);
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v4 + 40))(v4, &v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)": timer fired is NULL", 21);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if ((SBYTE7(v14) & 0x80000000) == 0)
      return;
    v5 = (void *)v13;
    goto LABEL_21;
  }
  memset(&v12, 0, sizeof(v12));
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  else
    v12 = *a2;
  v13 = 0u;
  v14 = 0u;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v13, (uint64_t)&a2[2].__r_.__value_.__r.__words[2]);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)this + 48, (uint64_t)this + 72);
  (*(void (**)(void **__return_ptr, SipTimerContainer *))(*(_QWORD *)this + 24))(v10, this);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 40))(v6, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": timer ", 8);
  *(_BYTE *)(v6 + 17) = 0;
  LoggableString::LoggableString(&__p, &v12);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" fired", 6);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v11 < 0)
    operator delete(v10[0]);
  SipTimerContainer::cancelTimer(this, (dispatch_source_t *)a2);
  if (*((_QWORD *)&v14 + 1))
  {
    (*(void (**)(_QWORD, std::string *))(**((_QWORD **)&v14 + 1) + 48))(*((_QWORD *)&v14 + 1), &v12);
    v7 = (__int128 *)*((_QWORD *)&v14 + 1);
    if (*((__int128 **)&v14 + 1) == &v13)
    {
      v8 = 4;
      v7 = &v13;
      goto LABEL_18;
    }
    if (*((_QWORD *)&v14 + 1))
    {
      v8 = 5;
LABEL_18:
      (*(void (**)(void))(*(_QWORD *)v7 + 8 * v8))();
    }
  }
  if ((SHIBYTE(v12.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    return;
  v5 = (void *)v12.__r_.__value_.__r.__words[0];
LABEL_21:
  operator delete(v5);
}

void sub_1BF02AC5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t *a34)
{
  uint64_t *v35;
  uint64_t v36;

  if (a20 < 0)
    operator delete(__p);
  v35 = a34;
  if (a34 == &a28)
  {
    v36 = 4;
    v35 = &a28;
  }
  else
  {
    if (!a34)
      goto LABEL_8;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_8:
  if (a26 < 0)
    operator delete(a21);
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::timersEnabled(SipTimerContainer *this)
{
  uint64_t (***v1)(_QWORD);

  v1 = (uint64_t (***)(_QWORD))*((_QWORD *)this + 12);
  if (v1)
    return (**v1)(v1);
  else
    return 1;
}

void SipTimerContainer::loggableName(SipTimerContainer *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v4;
  std::string __p;
  __int128 v6;
  __int128 v7;
  uint64_t v8;

  v8 = 0;
  v6 = 0u;
  v7 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v6, 1);
  v4 = *((_QWORD *)this + 13);
  if (v4)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v4 + 24))(&__p);
    (*(void (**)(__int128 *, std::string *))(v6 + 40))(&v6, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v6 + 1), (uint64_t)" [", 2);
    BYTE1(v7) = 0;
    (*(void (**)(__int128 *, char *))(v6 + 32))(&v6, (char *)this + 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v6 + 1), (uint64_t)"]", 1);
    BYTE1(v7) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v6 + 1), (uint64_t)"UnknownTimerContainer [", 23);
    BYTE1(v7) = 0;
    (*(void (**)(__int128 *, char *))(v6 + 32))(&v6, (char *)this + 112);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v6 + 1), (uint64_t)"]", 1);
    BYTE1(v7) = 0;
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v7 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v6 = &off_1E78D7A10;
  if ((_BYTE)v7)
  {
    if (*((_QWORD *)&v6 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v6 + 1) + 8))(*((_QWORD *)&v6 + 1));
  }
}

void sub_1BF02AE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

ImsOutStream *SipTimerContainer::log(SipTimerContainer *this, ImsOutStream *a2)
{
  uint64_t *v3;
  double v4;
  uint64_t v5;
  tm *v6;
  std::string __p;

  v3 = (uint64_t *)*((_QWORD *)this + 3);
  if (v3)
  {
    v4 = *MEMORY[0x1E0C9ADF8];
    do
    {
      v5 = v3[5];
      LoggableString::LoggableString(&__p, (const std::string *)(v3 + 2));
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
      *((_BYTE *)a2 + 17) = 0;
      ims::formatTimeAndIntervalFromNow((ims *)(uint64_t)(v4 + *(double *)(v5 + 32)), (uint64_t)a2, v6);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v3 = (uint64_t *)*v3;
    }
    while (v3);
  }
  return a2;
}

void sub_1BF02AFB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipTimerContainer::startSipTimer(_QWORD *a1, uint64_t a2, uint64_t a3, int a4)
{
  SipTimers *v5;
  uint64_t result;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::string __p;
  _BYTE v16[24];
  _BYTE *v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v5 = (SipTimers *)a1[17];
  if (v5)
  {
    result = SipTimers::timerValue(v5, (const SipTimer *)a2, a4);
    if (!(_DWORD)result)
      return result;
    v9 = result;
    if (*(char *)(a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
    else
      __p = *(std::string *)(a2 + 8);
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v16, a3);
    SipTimerContainer::startTimer(a1, (uint64_t)&__p, (uint64_t)v16, v9, 0);
    v13 = v17;
    if (v17 == v16)
    {
      v14 = 4;
      v13 = v16;
    }
    else
    {
      if (!v17)
      {
LABEL_14:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        return 1;
      }
      v14 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v11, v12);
    goto LABEL_14;
  }
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::error(ims::_logger, (uint64_t)(a1 + 6), (uint64_t)(a1 + 9));
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 24))(&__p, a1);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)": startSipTimer: no SIP timer values specified", 46);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 0;
}

void sub_1BF02B18C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18)
{
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a18;
  if (a18 == v18)
  {
    v21 = 4;
    v20 = &a15;
  }
  else
  {
    if (!a18)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *std::__hash_table<std::__hash_value_type<std::string,SipTimerInfo *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipTimerInfo *>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t *result;

  result = (uint64_t *)std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,SipTimerInfo *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipTimerInfo *>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,SipTimerInfo *>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,SipTimerInfo *>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,SipTimerInfo *>>>::erase(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *__p;
  uint64_t v6;

  v2 = *a2;
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1, a2, (uint64_t)&__p);
  v3 = (void **)__p;
  __p = 0;
  if (v3)
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::string,void *>>>::operator()[abi:ne180100]((uint64_t)&v6, v3);
  return v2;
}

uint64_t _GLOBAL__sub_I_SipTimerContainer_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWakeTimerIdPrefix, "com.apple.iptelephony.SystemWake.");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &kWakeTimerIdPrefix, &dword_1BEDF4000);
}

uint64_t SipXmlBody::contentLength(SipXmlBody *this)
{
  int v2;
  void **v4;
  __int128 v5;
  uint64_t v6;

  v2 = *((char *)this + 31);
  if ((v2 & 0x80000000) == 0)
  {
    if (*((_BYTE *)this + 31))
      goto LABEL_3;
LABEL_6:
    v4 = (void **)((char *)this + 8);
    (*(void (**)(__int128 *__return_ptr, SipXmlBody *))(*(_QWORD *)this + 112))(&v5, this);
    if (*((char *)this + 31) < 0)
      operator delete(*v4);
    *(_OWORD *)v4 = v5;
    *((_QWORD *)this + 3) = v6;
    LOBYTE(v2) = *((_BYTE *)this + 31);
    if ((v2 & 0x80) == 0)
      return v2;
    return *((_QWORD *)this + 2);
  }
  if (!*((_QWORD *)this + 2))
    goto LABEL_6;
LABEL_3:
  if ((v2 & 0x80) == 0)
    return v2;
  return *((_QWORD *)this + 2);
}

uint64_t SipXmlBody::encode(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  __int128 v7;
  uint64_t v8;

  if (*(char *)(a1 + 31) < 0)
    v4 = *(_QWORD *)(a1 + 16);
  else
    v4 = *(unsigned __int8 *)(a1 + 31);
  v5 = (void **)(a1 + 8);
  if (!v4)
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)a1 + 112))(&v7, a1);
    if (*(char *)(a1 + 31) < 0)
      operator delete(*v5);
    *(_OWORD *)v5 = v7;
    *(_QWORD *)(a1 + 24) = v8;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 8);
}

uint64_t SipXmlBody::decode(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _QWORD *v8;
  std::string::value_type v9;
  uint64_t v10;
  std::string v12;

  memset(&v12, 0, sizeof(v12));
  if (a3)
  {
    v6 = a3;
    v8 = a2 + 4;
    while (1)
    {
      v9 = std::istream::get();
      std::string::push_back(&v12, v9);
      if (*(_DWORD *)((char *)v8 + *(_QWORD *)(*a2 - 24)))
        break;
      if (!--v6)
        goto LABEL_5;
    }
    v10 = 0;
  }
  else
  {
LABEL_5:
    v10 = (*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 88))(a1, &v12, a4);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  return v10;
}

void sub_1BF02B47C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipXmlBody::decode(uint64_t a1, uint64_t a2)
{
  bambi::XmlParser *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  bambi::XmlParserItem *v8;

  v4 = (bambi::XmlParser *)(a1 + 8);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)a2);
  if (!(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1))
    return 1;
  v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 8);
  if (!v5)
    return 1;
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 104))(a1);
  return bambi::XmlParser::parseXml(v4, v6, v7, v8);
}

const char *SipXmlBody::contentType(SipXmlBody *this)
{
  return "text/xml";
}

uint64_t SipXmlBody::rootItem(SipXmlBody *this)
{
  return 0;
}

void MsrpTransportInterface::~MsrpTransportInterface(MsrpTransportInterface *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78D2580;
  *((_QWORD *)this + 3) = &unk_1E78D25C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 9);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 32);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

uint64_t ImsUdpSocket::ImsUdpSocket(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;

  v5 = ImsSocket::ImsSocket(a1, a3);
  *(_QWORD *)v5 = off_1E78D2678;
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 80) = &unk_1E78D2740;
  *(_BYTE *)(v5 + 104) = 0;
  v6 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    v10 = *(std::__shared_weak_count **)(a1 + 96);
    *(_QWORD *)(a1 + 88) = v6;
    *(_QWORD *)(a1 + 96) = v7;
    if (v10)
      std::__shared_weak_count::__release_weak(v10);
  }
  else
  {
    *(_QWORD *)(a1 + 88) = v6;
    *(_QWORD *)(a1 + 96) = 0;
  }
  return a1;
}

void ImsUdpSocket::socketReadCallback(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  NSObject *v6;
  unint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *((_QWORD *)this + 1);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    v6 = *((_QWORD *)this + 7);
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
  }
  else
  {
    v6 = *((_QWORD *)this + 7);
  }
  v8 = (_QWORD *)operator new();
  *v8 = this;
  v8[1] = v3;
  v8[2] = v2;
  v9 = 0;
  v10 = 0;
  dispatch_async_f(v6, v8, (dispatch_function_t)dispatch::async<ImsUdpSocket::socketReadCallback(void)::$_0>(dispatch_queue_s *,std::unique_ptr<ImsUdpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsUdpSocket::socketReadCallback(void)::$_0>>)::{lambda(void *)#1}::__invoke);
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100](&v9);
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void ImsUdpSocket::_handleDataAvailable(ImsUdpSocket *this)
{
  int v2;
  size_t v3;
  ssize_t v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27;
  void *v28;
  uint64_t v29;
  size_t v30;
  __int128 v31;
  sockaddr v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v31 = 0uLL;
  v38 = 0u;
  v39 = 0u;
  v36 = 0u;
  v37 = 0u;
  v34 = 0u;
  v35 = 0u;
  v33 = 0u;
  v32 = (sockaddr)0;
  v30 = 0x8000000000;
  ioctl(**((_DWORD **)this + 5), 0x4004667FuLL, &v30);
  v2 = v30;
  if ((int)v30 >= 0x100000)
    v2 = 0x100000;
  if (v2 <= 256)
    v3 = 256;
  else
    v3 = v2;
  LODWORD(v30) = v3;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  std::vector<unsigned char>::vector(&v27, v3);
  v4 = recvfrom(**((_DWORD **)this + 5), v27, (int)v30, 128, &v32, (socklen_t *)&v30 + 1);
  if (v4 >= 1)
  {
    IpAddress::createAddress((IpAddress *)&v32, (uint64_t)v25);
    v5 = *(_OWORD *)v25;
    v25[0] = 0;
    v25[1] = 0;
    v6 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
    v31 = v5;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    v9 = (std::__shared_weak_count *)v25[1];
    if (v25[1])
    {
      v10 = (unint64_t *)((char *)v25[1] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    if ((*((_BYTE *)this + 72) & 1) != 0)
    {
      std::string::basic_string[abi:ne180100]<0>(v25, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v16 = ImsLogger::warn(ims::_logger, (uint64_t)v25, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"ImsUdpSocket: kDebugDropIncoming set.  Dropping incoming packet.", 64);
      *(_BYTE *)(v16 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v16 + 17) = 0;
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
    }
    else
    {
      v12 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
      if (v12)
      {
        v13 = std::__shared_weak_count::lock(v12);
        if (v13)
        {
          v14 = *((_QWORD *)this + 11);
          if (v14)
          {
            std::string::basic_string[abi:ne180100]<0>(v25, "net");
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
            v15 = ImsLogger::spam(ims::_logger, (uint64_t)v25, (uint64_t)__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"ImsUdpSocket: handle incoming packet from ", 42);
            *(_BYTE *)(v15 + 17) = 0;
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v15);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)", len = ", 8);
            *(_BYTE *)(v15 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v15 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v15 + 17) = 0;
            if (v24 < 0)
              operator delete(__p[0]);
            if (v26 < 0)
              operator delete(v25[0]);
            (*(void (**)(uint64_t, void *, ssize_t, __int128 *))(*(_QWORD *)v14 + 24))(v14, v27, v4, &v31);
LABEL_36:
            v18 = (unint64_t *)&v13->__shared_owners_;
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 - 1, v18));
            if (!v19)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
            goto LABEL_40;
          }
        }
      }
      else
      {
        v13 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(v25, "net");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v17 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"ImsUdpSocket: No delegate to handle incoming packet from ", 57);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v31 + 40))(v31, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)". Discarding packet", 19);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      if (v24 < 0)
        operator delete(__p[0]);
      if (v26 < 0)
        operator delete(v25[0]);
      if (v13)
        goto LABEL_36;
    }
  }
LABEL_40:
  if (v27)
  {
    v28 = v27;
    operator delete(v27);
  }
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v31 + 1);
  if (*((_QWORD *)&v31 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v31 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BF02BB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [9]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BF02BCC4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsUdpSocket::initialize(uint64_t a1, _QWORD *a2, ImsSocket *this, dispatch_object_t *a4, uint64_t a5)
{
  _DWORD *v10;
  uint64_t result;
  const ImsResult *v12;
  _BYTE *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  _BYTE v22[72];

  v10 = (_DWORD *)a2[5];
  if (v10 && *v10 != -1)
    (*(void (**)(_QWORD *))(*a2 + 8))(a2);
  ImsSocket::setNoSigpipeOptionForSocket(this, (uint64_t)v22);
  ImsResult::~ImsResult((ImsResult *)v22);
  result = ImsSocket::_createSocketWithDispatch((uint64_t)a2, (int)this, a4, a5, 1);
  if ((result & 1) != 0)
  {
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_QWORD *)a1 = &off_1E78B7238;
    *(_QWORD *)(a1 + 8) = &_bambiDomain;
    *(_DWORD *)(a1 + 16) = 0;
  }
  else
  {
    *(_QWORD *)(a1 + 64) = 0;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)a1 = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    v19 = 0u;
    v20 = 0u;
    v21 = 0u;
    v16[0] = &off_1E78B7238;
    v16[1] = &_bambiDomain;
    v17 = 0x40000000;
    v12 = (const ImsResult *)ImsResult::operator<<<char [52]>((uint64_t)v16, "ImsUdpSocket::initialize: unable to create CFSocket");
    ImsResult::ImsResult((ImsResult *)a1, v12);
    ImsResult::~ImsResult((ImsResult *)v16);
    std::string::basic_string[abi:ne180100]<0>(v16, "net");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)v16, (uint64_t)__p);
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a1 + 16))(a1, v13);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v13[17] = 0;
    if (v15 < 0)
      operator delete(__p[0]);
    if (v18 < 0)
      operator delete(v16[0]);
    return close((int)this);
  }
  return result;
}

void sub_1BF02BEAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  ImsResult *v21;

  ImsResult::~ImsResult(v21);
  _Unwind_Resume(a1);
}

void ImsUdpSocket::send(uint64_t a1, uint64_t a2, const void *a3, size_t a4, uint64_t *a5)
{
  _DWORD *v7;
  const sockaddr *v11;
  ssize_t v12;
  const ImsResult *v13;
  const ImsResult *v14;
  const ImsResult *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const ImsResult *v22;
  void *__p[2];
  char v24;
  void *v25;
  uint64_t *v26;
  int v27;
  char v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  size_t v32;

  v32 = a4;
  v7 = *(_DWORD **)(a2 + 40);
  if (!v7 || *v7 == -1)
  {
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 1073741827;
    v13 = (const ImsResult *)ImsResult::operator<<<char [41]>((uint64_t)&v25, "socket not initialized, can not send to ");
    ImsResult::operator<<<IpAddress>((uint64_t)v13, *a5);
    ImsResult::ImsResult((ImsResult *)a1, v13);
    ImsResult::~ImsResult((ImsResult *)&v25);
    return;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*a5 + 88))(*a5) & 1) != 0)
  {
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)*a5 + 56))(*a5))
    {
      v11 = (const sockaddr *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)*a5 + 72))(*a5);
      if ((*(_BYTE *)(a2 + 72) & 2) != 0)
      {
        std::string::basic_string[abi:ne180100]<0>(&v25, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v16 = ImsLogger::warn(ims::_logger, (uint64_t)&v25, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"ImsUdpSocket: kDebugDropOutgoing set.  Dropping outgoing packet.", 64);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        if (v24 < 0)
          operator delete(__p[0]);
        if (v28 < 0)
          operator delete(v25);
        v12 = a4;
      }
      else
      {
        v12 = sendto(**(_DWORD **)(a2 + 40), a3, a4, 0, v11, v11->sa_len);
      }
      if (v12 == -1)
      {
        v17 = *__error();
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_QWORD *)a1 = &off_1E78B7238;
        *(_QWORD *)(a1 + 8) = &_posixDomain;
        *(_DWORD *)(a1 + 16) = v17;
        return;
      }
      if (v12 == a4)
      {
        *(_OWORD *)(a1 + 24) = 0u;
        *(_OWORD *)(a1 + 40) = 0u;
        *(_OWORD *)(a1 + 56) = 0u;
        *(_QWORD *)a1 = &off_1E78B7238;
        *(_QWORD *)(a1 + 8) = &_bambiDomain;
        *(_DWORD *)(a1 + 16) = 0;
        return;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v25 = &off_1E78B7238;
      v26 = &_bambiDomain;
      v27 = 0x40000000;
      v18 = ImsResult::operator<<<char [25]>((uint64_t)&v25, "ImsUdpSocket: only sent ");
      v19 = ImsResult::operator<<<long>(v18);
      v20 = ImsResult::operator<<<char [5]>(v19, " of ");
      v21 = ImsResult::operator<<<unsigned long>(v20);
      v22 = (const ImsResult *)ImsResult::operator<<<char [11]>(v21, " bytes to ");
      ImsResult::operator<<<IpAddress>((uint64_t)v22, *a5);
      ims::result::log((uint64_t)__p, (uint64_t)v22);
      ImsResult::ImsResult((ImsResult *)a1, v22);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "net");
      v29 = 0u;
      v30 = 0u;
      v31 = 0u;
      v25 = &off_1E78B7238;
      v26 = &_bambiDomain;
      v27 = 1073741825;
      v15 = (const ImsResult *)ImsResult::operator<<<char [37]>((uint64_t)&v25, "no port specified for remote address");
      ims::result::log((uint64_t)__p, (uint64_t)v15);
      ImsResult::ImsResult((ImsResult *)a1, v15);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "net");
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v25 = &off_1E78B7238;
    v26 = &_bambiDomain;
    v27 = 1073741825;
    v14 = (const ImsResult *)ImsResult::operator<<<char [17]>((uint64_t)&v25, "invalid address ");
    ImsResult::operator<<<IpAddress>((uint64_t)v14, *a5);
    ims::result::log((uint64_t)__p, (uint64_t)v14);
    ImsResult::ImsResult((ImsResult *)a1, v14);
  }
  ImsResult::~ImsResult((ImsResult *)&v25);
  if (v24 < 0)
    operator delete(__p[0]);
}

void sub_1BF02C2D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t ImsResult::operator<<<IpAddress>(uint64_t a1, uint64_t a2)
{
  ImsStringOutStream *v4;

  v4 = *(ImsStringOutStream **)(a1 + 24);
  if (!v4)
  {
    v4 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  (*(void (**)(uint64_t, ImsStringOutStream *))(*(_QWORD *)a2 + 40))(a2, v4);
  return a1;
}

void sub_1BF02C3B4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void ImsUdpSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  const void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  const sockaddr *v18;
  int sa_family;
  int *v20;
  int *v21;
  uint64_t v22;
  char v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  ims::result *v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD v34[2];
  void *v35[2];
  int v36;
  char v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  void *__p[2];
  char v42;
  void *v43[2];
  _BYTE v44[56];
  _DWORD v45[2];
  uint64_t v46;
  std::__shared_weak_count *v47;

  v13 = *(const void **)(a5 + 8);
  v34[1] = v13;
  if (v13)
    CFRetain(v13);
  v34[0] = &off_1E78B7BD8;
  v15 = *a2;
  v14 = (std::__shared_weak_count *)a2[1];
  v46 = *a2;
  v47 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = (const sockaddr *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 72))(v15);
  sa_family = v18->sa_family;
  *(_DWORD *)(a1 + 64) = sa_family;
  v20 = (int *)socket(sa_family, 2, 0);
  v21 = v20;
  v45[1] = (_DWORD)v20;
  if ((v20 & 0x80000000) != 0)
  {
    *(_QWORD *)(a7 + 64) = 0;
    *(_OWORD *)(a7 + 32) = 0u;
    *(_OWORD *)(a7 + 48) = 0u;
    *(_OWORD *)a7 = 0u;
    *(_OWORD *)(a7 + 16) = 0u;
    v25 = *__error();
    *(_OWORD *)(a7 + 24) = 0u;
    *(_OWORD *)(a7 + 40) = 0u;
    *(_OWORD *)(a7 + 56) = 0u;
    *(_QWORD *)a7 = &off_1E78B7238;
    *(_QWORD *)(a7 + 8) = &_posixDomain;
    *(_DWORD *)(a7 + 16) = v25;
    std::string::basic_string[abi:ne180100]<0>(v43, "net");
    std::string::basic_string[abi:ne180100]<0>(v35, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v26 = ImsLogger::error(ims::_logger, (uint64_t)v43, (uint64_t)v35);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"ImsUdpSocket: failed to create socket : ", 40);
    *(_BYTE *)(v26 + 17) = 0;
    ImsResult::log((ImsResult *)a7, (ImsOutStream *)v26);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (v37 < 0)
      operator delete(v35[0]);
    if ((v44[7] & 0x80000000) != 0)
      operator delete(v43[0]);
  }
  else
  {
    v45[0] = 0;
    setsockopt((int)v20, 0xFFFF, 4352, v45, 4u);
    v22 = *(unsigned __int8 *)(a6 + 23);
    if ((v22 & 0x80u) != 0)
      v22 = *(_QWORD *)(a6 + 8);
    if (v22)
    {
      *(_OWORD *)v43 = 0u;
      memset(v44, 0, sizeof(v44));
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 136))(v15);
      ImsSocket::bindSocketToInterface(v21, v23, a6, (uint64_t)v43);
      if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)v43[1] + 24))(v43[1], *(unsigned int *)v44))
      {
        std::string::basic_string[abi:ne180100]<0>(v35, "net");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v24 = ImsLogger::error(ims::_logger, (uint64_t)v35, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"ImsUdpSocket: Unable to bind socket (", 37);
        *(_BYTE *)(v24 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v24 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)") to interface: ", 16);
        *(_BYTE *)(v24 + 17) = 0;
        (*((void (**)(void **, uint64_t))v43[0] + 2))(v43, v24);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v24 + 17) = 0;
        if (v42 < 0)
          operator delete(__p[0]);
        if (v37 < 0)
          operator delete(v35[0]);
      }
      ImsResult::~ImsResult((ImsResult *)v43);
    }
    if (bind((int)v21, v18, v18->sa_len) < 0)
    {
      *(_QWORD *)v44 = 0;
      v27 = *__error();
      memset(&v44[8], 0, 48);
      v43[0] = &off_1E78B7238;
      v43[1] = &_posixDomain;
      *(_DWORD *)v44 = v27;
      close((int)v21);
      v38 = 0u;
      v39 = 0u;
      v40 = 0u;
      v35[0] = &off_1E78B7238;
      v35[1] = &_bambiDomain;
      v36 = 0x40000000;
      v28 = ImsResult::operator<<<char [9]>((uint64_t)v35, "socket (");
      v29 = ImsResult::operator<<<int>(v28);
      v30 = ImsResult::operator<<<char [28]>(v29, ") init failed for address: ");
      v31 = (ims::result *)ImsResult::operator<<<std::shared_ptr<IpAddress>>(v30, a2);
      ims::result::resultWithCause(v31, (const ImsResult *)v43, a7);
      ImsResult::~ImsResult((ImsResult *)v35);
      ImsResult::~ImsResult((ImsResult *)v43);
    }
    else
    {
      v43[0] = &off_1E78B7BD8;
      v43[1] = 0;
      ImsUdpSocket::initialize(a7, (_QWORD *)a1, (ImsSocket *)v21, a3, a4);
      ims::CFType::~CFType((ims::CFType *)v43);
    }
  }
  if (v14)
  {
    v32 = (unint64_t *)&v14->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  ims::CFType::~CFType((ims::CFType *)v34);
}

void sub_1BF02C820(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a16 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 112);
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ImsUdpSocket::initializeSocket(uint64_t a1@<X0>, uint64_t *a2@<X1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X7>, uint64_t a7@<X8>)
{
  ImsUdpSocket::initializeSocket(a1 - 80, a2, a3, a4, a5, a6, a7);
}

void ImsUdpSocket::initializeSocket(ImsSocket *this@<X1>, _QWORD *a2@<X0>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  const void *v11;
  _QWORD v12[2];

  v11 = *(const void **)(a5 + 8);
  v12[1] = v11;
  if (v11)
    CFRetain(v11);
  v12[0] = &off_1E78B7BD8;
  ImsUdpSocket::initialize(a6, a2, this, a3, a4);
  ims::CFType::~CFType((ims::CFType *)v12);
}

void sub_1BF02C97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'ImsUdpSocket::initializeSocket(uint64_t a1@<X0>, ImsSocket *a2@<X1>, dispatch_object_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  ImsUdpSocket::initializeSocket(a2, (_QWORD *)(a1 - 80), a3, a4, a5, a6);
}

void ImsUdpSocket::sendOverSocket(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ImsUdpSocket::send(a5, a1, a2, a3, a4);
}

void `non-virtual thunk to'ImsUdpSocket::sendOverSocket(uint64_t a1@<X0>, const void *a2@<X1>, size_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  ImsUdpSocket::send(a5, a1 - 80, a2, a3, a4);
}

uint64_t ImsUdpSocket::closeSocket(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(ImsUdpSocket *))(*(_QWORD *)this + 8))(this);
}

uint64_t `non-virtual thunk to'ImsUdpSocket::closeSocket(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 10) + 8))((char *)this - 80);
}

double `non-virtual thunk to'ImsUdpSocket::isPortReuseAllowed@<D0>(ImsUdpSocket *this@<X0>, uint64_t a2@<X8>)
{
  return ImsSocket::allowPortReuse((ImsUdpSocket *)((char *)this - 80), a2);
}

BOOL ImsUdpSocket::socketInterfaceInitialized(ImsUdpSocket *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this + 5);
  return v1 && *v1 != -1;
}

BOOL `non-virtual thunk to'ImsUdpSocket::socketInterfaceInitialized(ImsUdpSocket *this)
{
  _DWORD *v1;

  v1 = (_DWORD *)*((_QWORD *)this - 5);
  return v1 && *v1 != -1;
}

uint64_t ImsUdpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this + 32);
  *a2 = *(_QWORD *)(this + 24);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

uint64_t `non-virtual thunk to'ImsUdpSocket::socketLocalAddress@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(this - 48);
  *a2 = *(_QWORD *)(this - 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return this;
}

_QWORD *ImsUdpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 24), a2);
}

_QWORD *`non-virtual thunk to'ImsUdpSocket::setSocketLocalAddress(uint64_t a1, uint64_t *a2)
{
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 - 56), a2);
}

uint64_t `non-virtual thunk to'ImsUdpSocket::socketInterfaceDescriptor(ImsUdpSocket *this)
{
  return ImsSocket::socketDescriptor((ImsUdpSocket *)((char *)this - 80));
}

void ImsUdpSocket::attachDispatchSourceToSocket(ImsUdpSocket *this, NSObject *a2)
{
  uint64_t *v3;
  int v4;
  _QWORD v6[2];
  int v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _BYTE v11[8];
  uint64_t *v12;
  int v13;

  ImsSocket::attachDispatchSource(this, a2, (uint64_t)v11);
  v8 = 0u;
  v9 = 0u;
  v10 = 0u;
  v6[0] = &off_1E78B7238;
  v6[1] = &_bambiDomain;
  v7 = 0;
  v3 = v12;
  v4 = v13;
  ImsResult::~ImsResult((ImsResult *)v6);
  ImsResult::~ImsResult((ImsResult *)v11);
  if (v3 == &_bambiDomain && v4 == 0)
    (*(void (**)(ImsUdpSocket *, uint64_t))(*(_QWORD *)this + 136))(this, 1);
}

void `non-virtual thunk to'ImsUdpSocket::attachDispatchSourceToSocket(ImsUdpSocket *this, NSObject *a2)
{
  ImsUdpSocket::attachDispatchSourceToSocket((ImsUdpSocket *)((char *)this - 80), a2);
}

void ImsUdpSocket::detachDispatchSourceFromSocket(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  NSObject *v5;
  void *v6;
  uint64_t v7;
  NSObject *v8;
  _QWORD handler[6];
  void *aBlock;

  v4 = a1[5];
  if (v4 && (v5 = *(NSObject **)(v4 + 136)) != 0)
  {
    handler[0] = MEMORY[0x1E0C809B0];
    handler[1] = 1174405120;
    handler[2] = ___ZN12ImsUdpSocket30detachDispatchSourceFromSocketEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke;
    handler[3] = &__block_descriptor_tmp_27;
    handler[4] = a1;
    handler[5] = v5;
    v6 = *(void **)a2;
    if (*(_QWORD *)a2)
      v6 = _Block_copy(v6);
    aBlock = v6;
    dispatch_source_set_cancel_handler(v5, handler);
    v7 = a1[5];
    if (v7)
    {
      v8 = *(NSObject **)(v7 + 136);
      if (v8)
      {
        dispatch_source_cancel(v8);
        *(_QWORD *)(a1[5] + 136) = 0;
      }
    }
    if (aBlock)
      _Block_release(aBlock);
  }
  else
  {
    (*(void (**)(_QWORD *, _QWORD))(*a1 + 136))(a1, 0);
    if (*(_QWORD *)a2)
      (*(void (**)(void))(*(_QWORD *)a2 + 16))();
  }
}

uint64_t ___ZN12ImsUdpSocket30detachDispatchSourceFromSocketEN8dispatch5blockIU13block_pointerFvvEEE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  v2 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v7, "net");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"ImsUdpSocket: detached from source", 34);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  dispatch_release(*(dispatch_object_t *)(a1 + 40));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 136))(v2, 0);
  result = *(_QWORD *)(a1 + 48);
  if (result)
    return (*(uint64_t (**)(void))(result + 16))();
  return result;
}

void sub_1BF02CD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1, uint64_t a2)
{
  void *result;

  result = *(void **)(a2 + 48);
  if (result)
    result = _Block_copy(result);
  *(_QWORD *)(a1 + 48) = result;
  return result;
}

void __destroy_helper_block_e8_48c43_ZTSN8dispatch5blockIU13block_pointerFvvEEE(uint64_t a1)
{
  const void *v1;

  v1 = *(const void **)(a1 + 48);
  if (v1)
    _Block_release(v1);
}

void `non-virtual thunk to'ImsUdpSocket::detachDispatchSourceFromSocket(uint64_t a1, uint64_t a2)
{
  ImsUdpSocket::detachDispatchSourceFromSocket((_QWORD *)(a1 - 80), a2);
}

uint64_t ImsUdpSocket::setIsAttachedToDispatchSource(uint64_t this, char a2)
{
  *(_BYTE *)(this + 104) = a2;
  return this;
}

uint64_t ImsUdpSocket::isAttachedToDispatchSource(ImsUdpSocket *this)
{
  return *((unsigned __int8 *)this + 104);
}

uint64_t `non-virtual thunk to'ImsUdpSocket::isAttachedToDispatchSource(ImsUdpSocket *this)
{
  return *((unsigned __int8 *)this + 24);
}

uint64_t ImsUdpSocket::socketDebugMask(ImsUdpSocket *this)
{
  return *((unsigned int *)this + 18);
}

uint64_t `non-virtual thunk to'ImsUdpSocket::socketDebugMask(ImsUdpSocket *this)
{
  return *((unsigned int *)this - 2);
}

uint64_t ImsUdpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this + 72) = a2;
  return this;
}

uint64_t `non-virtual thunk to'ImsUdpSocket::setSocketDebugMask(uint64_t this, int a2)
{
  *(_DWORD *)(this - 8) = a2;
  return this;
}

void ImsUdpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 96);
  *(_QWORD *)(a1 + 88) = v3;
  *(_QWORD *)(a1 + 96) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void `non-virtual thunk to'ImsUdpSocket::setSocketDelegate(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;

  v3 = *a2;
  v2 = a2[1];
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v2;
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

void `non-virtual thunk to'ImsUdpSocket::setDscpClass(uint64_t a1, int a2)
{
  ImsSocket::setDscpClass(a1 - 80, a2);
}

void ImsUdpSocket::~ImsUdpSocket(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E78D2678;
  *((_QWORD *)this + 10) = &unk_1E78D2740;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  ImsSocket::~ImsSocket(this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = off_1E78D2678;
  *((_QWORD *)this + 10) = &unk_1E78D2740;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  ImsSocket::~ImsSocket(this);
  JUMPOUT(0x1C3B87100);
}

void ImsUdpSocket::resetSocketDelegate(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  *((_QWORD *)this + 11) = 0;
  *((_QWORD *)this + 12) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void `non-virtual thunk to'ImsUdpSocket::~ImsUdpSocket(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;
  ImsSocket *v3;

  *(_QWORD *)this = &unk_1E78D2740;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *((_QWORD *)this - 10) = off_1E78D2678;
  v3 = (ImsUdpSocket *)((char *)this - 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  ImsSocket::~ImsSocket(v3);
}

{
  std::__shared_weak_count *v2;
  ImsSocket *v3;

  *(_QWORD *)this = &unk_1E78D2740;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *((_QWORD *)this - 10) = off_1E78D2678;
  v3 = (ImsUdpSocket *)((char *)this - 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  ImsSocket::~ImsSocket(v3);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'ImsUdpSocket::resetSocketDelegate(ImsUdpSocket *this)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t *dispatch::async<ImsUdpSocket::socketReadCallback(void)::$_0>(dispatch_queue_s *,std::unique_ptr<ImsUdpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsUdpSocket::socketReadCallback(void)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _QWORD *v9;

  v9 = a1;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    v3 = *a1;
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (a1[1])
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_1BF02D0A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  va_list va;

  va_start(va, a2);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::unique_ptr<ImsTcpSocket::socketReadCallback(void)::$_0,std::default_delete<ImsTcpSocket::socketReadCallback(void)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t SDPMediaSetup::SDPMediaSetup(uint64_t a1, __int128 *a2)
{
  std::string *v4;
  __int128 v5;
  void *__p[2];
  uint64_t v8;

  std::string::basic_string[abi:ne180100]<0>(__p, "setup");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v8) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v8) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v8;
  }
  *(_QWORD *)a1 = &off_1E78D2860;
  v4 = (std::string *)(a1 + 40);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v5 = *a2;
    *(_QWORD *)(a1 + 56) = *((_QWORD *)a2 + 2);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1BF02D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;

  *(_QWORD *)v15 = v17;
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaSetup::SDPMediaSetup(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string __p;

  if (*(char *)(a2 + 39) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  else
    __p = *(std::string *)(a2 + 16);
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    *(std::string *)(a1 + 16) = __p;
  }
  *(_QWORD *)a1 = &off_1E78D2860;
  v4 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_1BF02D2C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;
  void **v15;
  uint64_t v16;

  *(_QWORD *)v14 = v16;
  if (*(char *)(v14 + 39) < 0)
    operator delete(*v15);
  _Unwind_Resume(exception_object);
}

void SDPMediaSetup::~SDPMediaSetup(void **this)
{
  *this = &off_1E78D2860;
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  *this = off_1E78ED0A8;
  if (*((char *)this + 39) < 0)
    operator delete(this[2]);
}

{
  SDPMediaSetup::~SDPMediaSetup(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *SDPMediaSetup::key@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "setup");
}

void SDPMediaSetup::value(SDPMediaSetup *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 63) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 5), *((_QWORD *)this + 6));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 40);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 7);
  }
}

void SipSessionIdHeader::~SipSessionIdHeader(void **this)
{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78B8320;
  if (*((char *)this + 87) < 0)
    operator delete(this[8]);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipStringHeader *SipSessionIdHeader::clone(SipSessionIdHeader *this)
{
  SipStringHeader *v2;

  v2 = (SipStringHeader *)operator new();
  SipStringHeader::SipStringHeader(v2, this);
  *(_QWORD *)v2 = off_1E78D28B8;
  *((_BYTE *)v2 + 88) = 1;
  return v2;
}

void sub_1BF02D49C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40EE8ABE80);
  _Unwind_Resume(a1);
}

void BambiAirplaneMode::set(BambiAirplaneMode *this, int a2)
{
  int v4;
  int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  BambiClient *v9;
  char *v10;
  char *v11;
  SipStack *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  void *__p[2];
  char v19;
  void *v20[2];
  char v21;

  v4 = *(_DWORD *)this;
  if (a2)
    v5 = 1;
  else
    v5 = 2;
  *(_DWORD *)this = v5;
  std::string::basic_string[abi:ne180100]<0>(v20, "bambi.apm");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Airplane mode is ", 17);
  *(_BYTE *)(v6 + 17) = 0;
  if (a2)
    v7 = "Enabled";
  else
    v7 = "Disabled";
  if (a2)
    v8 = 7;
  else
    v8 = 8;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (v21 < 0)
    operator delete(v20[0]);
  v9 = (BambiClient *)*((_QWORD *)this + 1);
  if (v9 && v4 && v4 != *(_DWORD *)this)
  {
    BambiClient::sipStacks(v9, (uint64_t)v20);
    v10 = (char *)v20[0];
    v11 = (char *)v20[1];
    while (v10 != v11)
    {
      v12 = *(SipStack **)v10;
      v13 = (std::__shared_weak_count *)*((_QWORD *)v10 + 1);
      __p[0] = *(void **)v10;
      __p[1] = v13;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
      }
      SipStack::handleDeviceEvents(v12, 2);
      if (v13)
      {
        v16 = (unint64_t *)&v13->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      v10 += 16;
    }
    __p[0] = v20;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  }
}

void sub_1BF02D670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

__CFHTTPMessage *HttpResponse::serialize(HttpResponse *this)
{
  const __CFAllocator *v2;
  CFIndex v3;
  uint64_t v4;
  const __CFString *v5;
  int v6;
  CFStringRef *v7;
  const __CFString *v8;
  __CFHTTPMessage *Response;
  uint64_t v11;
  const __CFString *v12;

  v11 = 0;
  v12 = 0;
  ims::CFString::CFString(&v11, (char *)this + 88, 0x8000100u);
  v2 = (const __CFAllocator *)*MEMORY[0x1E0C9AE00];
  v3 = *((_QWORD *)this + 10);
  if (*((char *)this + 111) < 0)
    v4 = *((_QWORD *)this + 12);
  else
    v4 = *((unsigned __int8 *)this + 111);
  v5 = v12;
  v6 = std::string::compare((const std::string *)((char *)this + 32), "1.0");
  v7 = (CFStringRef *)MEMORY[0x1E0C930E0];
  if (v6)
    v7 = (CFStringRef *)MEMORY[0x1E0C930E8];
  if (v4)
    v8 = v5;
  else
    v8 = 0;
  Response = CFHTTPMessageCreateResponse(v2, v3, v8, *v7);
  HttpMessage::serialize(this, Response);
  ims::CFType::~CFType((ims::CFType *)&v11);
  return Response;
}

void sub_1BF02D794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

uint64_t HttpResponse::deserialize(HttpResponse *this, CFHTTPMessageRef response)
{
  *((_QWORD *)this + 10) = CFHTTPMessageGetResponseStatusCode(response);
  return HttpMessage::deserialize(this, response);
}

uint64_t HttpResponse::clone(HttpResponse *this)
{
  uint64_t v2;
  void **v3;
  std::string v5;

  v2 = operator new();
  HttpMessage::HttpMessage((HttpMessage *)v2, this);
  *(_QWORD *)(v2 + 88) = 0;
  v3 = (void **)(v2 + 88);
  *(_QWORD *)v2 = off_1E78D2950;
  *(_QWORD *)(v2 + 96) = 0;
  *(_QWORD *)(v2 + 104) = 0;
  *(_QWORD *)(v2 + 80) = *((_QWORD *)this + 10);
  if (*((char *)this + 111) < 0)
  {
    std::string::__init_copy_ctor_external(&v5, *((const std::string::value_type **)this + 11), *((_QWORD *)this + 12));
    if (*(char *)(v2 + 111) < 0)
      operator delete(*v3);
  }
  else
  {
    v5 = *(std::string *)((char *)this + 88);
  }
  *(_OWORD *)v3 = *(_OWORD *)&v5.__r_.__value_.__l.__data_;
  *(_QWORD *)(v2 + 104) = *((_QWORD *)&v5.__r_.__value_.__l + 2);
  return v2;
}

void sub_1BF02D8EC(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 111) < 0)
    operator delete(*v2);
  HttpMessage::~HttpMessage((void **)v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40D5370DC4);
  _Unwind_Resume(a1);
}

uint64_t HttpResponse::isRequest(HttpResponse *this)
{
  return 0;
}

void ims::ClientHandle::~ClientHandle(void **this)
{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void ims::ClientHandle::addStackDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  std::string::size_type v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v4 = a3[1];
  v5 = a1 + 8;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  IMSClientManager::updateStackDelegate(v5, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF02DA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::addDefaultCallDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  std::string::size_type v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v4 = a3[1];
  v5 = a1 + 8;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  IMSClientManager::updateCallDelegate(v5, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF02DB18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::addCallManagerDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  std::string::size_type v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v4 = a3[1];
  v5 = a1 + 8;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  IMSClientManager::updateManagerDelegate(v5, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF02DBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::addMessageDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  std::string::size_type v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v4 = a3[1];
  v5 = a1 + 8;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  IMSClientManager::updateMessageDelegate(v5, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF02DC48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::addXcapDelegate(uint64_t a1, uint64_t a2, std::string::size_type *a3, NSObject *a4)
{
  std::string::size_type v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;

  v4 = a3[1];
  v5 = a1 + 8;
  v11 = *a3;
  v12 = (std::__shared_weak_count *)v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  IMSClientManager::updateXcapDelegate(v5, a2, &v11, a4);
  v8 = v12;
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_1BF02DCE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::addLazuliDelegate(uint64_t a1, uint64_t a2, uint64_t *a3, NSObject **a4)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  NSObject *v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  dispatch_object_t object;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v5 = a3[1];
  v6 = a1 + 8;
  v14 = *a3;
  v15 = (std::__shared_weak_count *)v5;
  if (v5)
  {
    v7 = (unint64_t *)(v5 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a4;
  object = v9;
  if (v9)
    dispatch_retain(v9);
  IMSClientManager::updateLazuliDelegate(v6, a2, &v14, &object);
  if (object)
    dispatch_release(object);
  v10 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BF02DDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::removeStackDelegate(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  IMSClientManager::updateStackDelegate(a1 + 8, a2, &v5, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02DE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::removeMessageDelegate(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  IMSClientManager::updateMessageDelegate(a1 + 8, a2, &v5, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02DEB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::removeCallManagerDelegate(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  IMSClientManager::updateManagerDelegate(a1 + 8, a2, &v5, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02DF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::removeDefaultCallDelegate(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  IMSClientManager::updateCallDelegate(a1 + 8, a2, &v5, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02DFB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::removeXcapDelegate(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::string::size_type v5;
  std::__shared_weak_count *v6;

  v5 = 0;
  v6 = 0;
  IMSClientManager::updateXcapDelegate(a1 + 8, a2, &v5, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02E030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::removeLazuliDelegate(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  dispatch_object_t object;
  uint64_t v6;
  std::__shared_weak_count *v7;

  v6 = 0;
  v7 = 0;
  object = 0;
  IMSClientManager::updateLazuliDelegate(a1 + 8, a2, &v6, &object);
  if (object)
    dispatch_release(object);
  v2 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02E0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, char a11)
{
  if (object)
    dispatch_release(object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::setStackDelegate(ims::ClientHandle *this, ims::StackEventDelegate *a2)
{
  const std::string::value_type *v4;
  char *v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "delegate.stack.");
  v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
  v5 = (char *)this + 8;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::string::append(&v19, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = (std::__shared_weak_count_vtbl *)operator new();
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E78D3660;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  v17 = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3700;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v12;
  v18 = v13;
  IMSClientManager::updateStackDelegate((uint64_t)v5, (uint64_t)__p, (std::string::size_type *)&v17, 0);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF02E220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::setDefaultCallDelegate(uint64_t a1, void (__cdecl *a2)(std::__shared_weak_count *__hidden this))
{
  const std::string::value_type *v4;
  uint64_t v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "delegate.call.");
  v6 = *(const std::string::value_type **)(a1 + 8);
  v5 = a1 + 8;
  v4 = v6;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  v10 = std::string::append(&v19, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = (std::__shared_weak_count_vtbl *)operator new();
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E78D3778;
  v12->~__shared_weak_count_0 = a2;
  v17 = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3878;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v12;
  v18 = v13;
  IMSClientManager::updateCallDelegate(v5, (uint64_t)__p, (std::string::size_type *)&v17, 0);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF02E3BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::setCallManagerDelegate(ims::ClientHandle *this, ims::CallManagerEventDelegate *a2)
{
  const std::string::value_type *v4;
  char *v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "delegate.callManager.");
  v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
  v5 = (char *)this + 8;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::string::append(&v19, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = (std::__shared_weak_count_vtbl *)operator new();
  v12->__on_zero_shared = 0;
  v12->__get_deleter = 0;
  v12->__on_zero_shared_weak = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))off_1E78D38F0;
  v12->~__shared_weak_count_0 = 0;
  v17 = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3978;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v12;
  v18 = v13;
  IMSClientManager::updateManagerDelegate((uint64_t)v5, (uint64_t)__p, (std::string::size_type *)&v17, 0);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF02E560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::setMessageDelegate(ims::ClientHandle *this, ims::MessageEventDelegate *a2)
{
  const std::string::value_type *v4;
  char *v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "delegate.message.");
  v6 = (const std::string::value_type *)*((_QWORD *)this + 1);
  v5 = (char *)this + 8;
  v4 = v6;
  v7 = v5[23];
  if (v7 >= 0)
    v8 = v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = v5[23];
  else
    v9 = *((_QWORD *)v5 + 1);
  v10 = std::string::append(&v19, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = (std::__shared_weak_count_vtbl *)operator new();
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E78D39F0;
  v12->~__shared_weak_count_0 = (void (__cdecl *)(std::__shared_weak_count *__hidden))a2;
  v17 = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3A38;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v12;
  v18 = v13;
  IMSClientManager::updateMessageDelegate((uint64_t)v5, (uint64_t)__p, (std::string::size_type *)&v17, 0);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF02E6FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

void ims::ClientHandle::setXcapDelegate(uint64_t a1, void (__cdecl *a2)(std::__shared_weak_count *__hidden this))
{
  const std::string::value_type *v4;
  uint64_t v5;
  const std::string::value_type *v6;
  int v7;
  const std::string::value_type *v8;
  std::string::size_type v9;
  std::string *v10;
  __int128 v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count_vtbl *v17;
  std::__shared_weak_count *v18;
  std::string v19;
  void *__p[2];
  std::string::size_type v21;

  std::string::basic_string[abi:ne180100]<0>(&v19, "delegate.xcap.");
  v6 = *(const std::string::value_type **)(a1 + 8);
  v5 = a1 + 8;
  v4 = v6;
  v7 = *(char *)(v5 + 23);
  if (v7 >= 0)
    v8 = (const std::string::value_type *)v5;
  else
    v8 = v4;
  if (v7 >= 0)
    v9 = *(unsigned __int8 *)(v5 + 23);
  else
    v9 = *(_QWORD *)(v5 + 8);
  v10 = std::string::append(&v19, v8, v9);
  v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v21 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = (std::__shared_weak_count_vtbl *)operator new();
  v12->~__shared_weak_count = (void (__cdecl *)(std::__shared_weak_count *__hidden))&off_1E78D3AB0;
  v12->~__shared_weak_count_0 = a2;
  v17 = v12;
  v13 = (std::__shared_weak_count *)operator new();
  v13->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78D3AD8;
  v13->__shared_owners_ = 0;
  v13->__shared_weak_owners_ = 0;
  v13[1].__vftable = v12;
  v18 = v13;
  IMSClientManager::updateXcapDelegate(v5, (uint64_t)__p, (std::string::size_type *)&v17, 0);
  v14 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v16 = __ldaxr(p_shared_owners);
    while (__stlxr(v16 - 1, p_shared_owners));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v19.__r_.__value_.__l.__data_);
}

void sub_1BF02E898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a23 < 0)
    operator delete(__p);
  if (a17 < 0)
    operator delete(a12);
  _Unwind_Resume(a1);
}

uint64_t ims::Client::initialize(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 256))(a1, a1 + 8, a2);
}

void ims::Client::initialize()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  CFTypeRef v6;
  const void *v7;
  const void *v8;
  void *v9;
  _QWORD v10[4];
  std::string v11;
  std::string v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16[4];
  _QWORD v17[2];
  _QWORD v18[4];
  std::string v19;
  std::string v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24[4];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[4];
  std::string v28;
  std::string v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  std::string v33[4];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[2];
  void (**v37)(ims::CFDictionary *__hidden);
  CFTypeRef v38;
  _QWORD v39[4];
  std::string v40;
  std::string __p;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  std::string v45[4];
  _QWORD v46[2];
  _QWORD v47[2];
  void (**v48)(ims::CFDictionary *__hidden);
  CFTypeRef cf;
  std::string v50;
  std::string v51;
  __int128 v52;
  uint64_t v53;
  _BYTE v54[592];
  std::string v55[2];
  std::string v56[2];
  __int16 v57;
  _BYTE v58[11];

  v0 = MEMORY[0x1E0C80A78]();
  v2 = v1;
  v4 = v3;
  v5 = v0;
  bzero(&v52, 0x2E0uLL);
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)v54);
  memset(v56, 0, sizeof(v56));
  memset(v55, 0, sizeof(v55));
  v57 = 257;
  *(_DWORD *)&v58[4] = 0;
  *(_WORD *)&v58[8] = 256;
  v58[10] = 1;
  memset(&v51, 0, sizeof(v51));
  if (*(char *)(v5 + 31) < 0)
    std::string::__init_copy_ctor_external(&v51, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
  else
    v51 = *(std::string *)(v5 + 8);
  memset(&v50, 0, sizeof(v50));
  if (*(char *)(v4 + 23) < 0)
    std::string::__init_copy_ctor_external(&v50, *(const std::string::value_type **)v4, *(_QWORD *)(v4 + 8));
  else
    v50 = *(std::string *)v4;
  ims::NetworkConfig::operator=((uint64_t)v54, v2 + 24);
  std::string::operator=(v55, (const std::string *)(v2 + 616));
  std::string::operator=(&v55[1], (const std::string *)(v2 + 640));
  std::string::operator=(v56, (const std::string *)(v2 + 664));
  std::string::operator=(&v56[1], (const std::string *)(v2 + 688));
  v57 = *(_WORD *)(v2 + 712);
  *(_DWORD *)&v58[4] = *(_DWORD *)(v2 + 724);
  v58[8] = *(_BYTE *)(v2 + 728);
  *(_WORD *)&v58[9] = *(_WORD *)(v2 + 729);
  v6 = *(CFTypeRef *)v2;
  if (*(_QWORD *)v2)
  {
    cf = *(CFTypeRef *)v2;
    CFRetain(v6);
    v48 = &off_1E78EAC60;
    v39[0] = MEMORY[0x1E0C809B0];
    v39[1] = 1174405120;
    v39[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke;
    v39[3] = &__block_descriptor_tmp_28;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v40, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    else
      v40 = v51;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&__p, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    else
      __p = v50;
    v42 = v52;
    v43 = v53;
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v44, (const ims::NetworkConfig *)v54);
    ims::DeviceConfig::DeviceConfig(v45, (__int128 *)v55);
    *(_DWORD *)((char *)v46 + 7) = *(_DWORD *)&v58[7];
    v46[0] = *(_QWORD *)v58;
    v47[0] = off_1E78EAB00;
    v47[1] = cf;
    if (cf)
      CFRetain(cf);
    v47[0] = &off_1E78EAC60;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v39);
    ims::CFType::~CFType((ims::CFType *)v47);
    ims::StackConfig::~StackConfig((void **)&v42);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v40.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_59;
    v9 = (void *)v40.__r_.__value_.__r.__words[0];
LABEL_24:
    operator delete(v9);
LABEL_59:
    ims::CFType::~CFType((ims::CFType *)&v48);
    goto LABEL_60;
  }
  v7 = *(const void **)(v2 + 8);
  if (v7)
  {
    cf = *(CFTypeRef *)(v2 + 8);
    CFRetain(v7);
    v48 = &off_1E78EAC60;
    v8 = *(const void **)(v2 + 16);
    if (v8)
    {
      v38 = *(CFTypeRef *)(v2 + 16);
      CFRetain(v8);
      v37 = &off_1E78EAC60;
      v27[0] = MEMORY[0x1E0C809B0];
      v27[1] = 1174405120;
      v27[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_6;
      v27[3] = &__block_descriptor_tmp_7_1;
      if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v28, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
      else
        v28 = v51;
      if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v29, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
      else
        v29 = v50;
      v30 = v52;
      v31 = v53;
      ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v32, (const ims::NetworkConfig *)v54);
      ims::DeviceConfig::DeviceConfig(v33, (__int128 *)v55);
      *(_DWORD *)((char *)v34 + 7) = *(_DWORD *)&v58[7];
      v34[0] = *(_QWORD *)v58;
      v35[0] = off_1E78EAB00;
      v35[1] = cf;
      if (cf)
        CFRetain(cf);
      v35[0] = &off_1E78EAC60;
      v36[0] = off_1E78EAB00;
      v36[1] = v38;
      if (v38)
        CFRetain(v38);
      v36[0] = &off_1E78EAC60;
      IMSClientManager::callOnMainQueue((IMSClientManager *)v27);
      ims::CFType::~CFType((ims::CFType *)v36);
      ims::CFType::~CFType((ims::CFType *)v35);
      ims::StackConfig::~StackConfig((void **)&v30);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
      ims::CFType::~CFType((ims::CFType *)&v37);
      goto LABEL_59;
    }
    v18[0] = MEMORY[0x1E0C809B0];
    v18[1] = 1174405120;
    v18[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_8;
    v18[3] = &__block_descriptor_tmp_9_1;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v19, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
    else
      v19 = v51;
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v20, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
    else
      v20 = v50;
    v21 = v52;
    v22 = v53;
    ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v23, (const ims::NetworkConfig *)v54);
    ims::DeviceConfig::DeviceConfig(v24, (__int128 *)v55);
    *(_DWORD *)((char *)v25 + 7) = *(_DWORD *)&v58[7];
    v25[0] = *(_QWORD *)v58;
    v26[0] = off_1E78EAB00;
    v26[1] = cf;
    if (cf)
      CFRetain(cf);
    v26[0] = &off_1E78EAC60;
    IMSClientManager::callOnMainQueue((IMSClientManager *)v18);
    ims::CFType::~CFType((ims::CFType *)v26);
    ims::StackConfig::~StackConfig((void **)&v21);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_59;
    v9 = (void *)v19.__r_.__value_.__r.__words[0];
    goto LABEL_24;
  }
  v10[0] = MEMORY[0x1E0C809B0];
  v10[1] = 1174405120;
  v10[2] = ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_10;
  v10[3] = &__block_descriptor_tmp_11_1;
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v11, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v11 = v51;
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v50.__r_.__value_.__l.__data_, v50.__r_.__value_.__l.__size_);
  else
    v12 = v50;
  v13 = v52;
  v14 = v53;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)&v15, (const ims::NetworkConfig *)v54);
  ims::DeviceConfig::DeviceConfig(v16, (__int128 *)v55);
  *(_DWORD *)((char *)v17 + 7) = *(_DWORD *)&v58[7];
  v17[0] = *(_QWORD *)v58;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v10);
  ims::StackConfig::~StackConfig((void **)&v13);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
LABEL_60:
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  ims::StackConfig::~StackConfig((void **)&v52);
}

void sub_1BF02F010(_Unwind_Exception *a1)
{
  if (SLOBYTE(STACK[0x367]) < 0)
    operator delete((void *)STACK[0x350]);
  ims::CFType::~CFType((ims::CFType *)&STACK[0xD10]);
  if (SLOBYTE(STACK[0xD37]) < 0)
    operator delete((void *)STACK[0xD20]);
  if (SLOBYTE(STACK[0xD57]) < 0)
    operator delete((void *)STACK[0xD40]);
  ims::StackConfig::~StackConfig((void **)&STACK[0xD60]);
  _Unwind_Resume(a1);
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::initializeFromSIM(v5, a1 + 32, (std::string *)(a1 + 56), a1 + 80, *(void **)(a1 + 824));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02F2E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  CFTypeRef result;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 104), (const ims::NetworkConfig *)(a2 + 104));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 696), (__int128 *)(a2 + 696));
  v7 = *(_QWORD *)(a2 + 800);
  *(_DWORD *)(a1 + 807) = *(_DWORD *)(a2 + 807);
  *(_QWORD *)(a1 + 800) = v7;
  *(_QWORD *)(a1 + 816) = off_1E78EAB00;
  result = *(CFTypeRef *)(a2 + 824);
  *(_QWORD *)(a1 + 824) = result;
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 816) = &off_1E78EAC60;
  return result;
}

void sub_1BF02F3F8(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 80);
  ims::CFType::~CFType((ims::CFType *)(a1 + 816));
  ims::StackConfig::~StackConfig(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_6(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::initializeFromSIM(v5, a1 + 32, (std::string *)(a1 + 56), a1 + 80, *(void **)(a1 + 824), *(void **)(a1 + 840));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02F540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

CFTypeRef __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE832c24_ZTSN3ims12CFDictionaryE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  const void *v8;
  CFTypeRef result;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 104), (const ims::NetworkConfig *)(a2 + 104));
  ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 696), (__int128 *)(a2 + 696));
  v7 = *(_QWORD *)(a2 + 800);
  *(_DWORD *)(a1 + 807) = *(_DWORD *)(a2 + 807);
  *(_QWORD *)(a1 + 800) = v7;
  *(_QWORD *)(a1 + 816) = off_1E78EAB00;
  v8 = *(const void **)(a2 + 824);
  *(_QWORD *)(a1 + 824) = v8;
  if (v8)
    CFRetain(v8);
  *(_QWORD *)(a1 + 816) = &off_1E78EAC60;
  *(_QWORD *)(a1 + 832) = off_1E78EAB00;
  result = *(CFTypeRef *)(a2 + 840);
  *(_QWORD *)(a1 + 840) = result;
  if (result)
    result = CFRetain(result);
  *(_QWORD *)(a1 + 832) = &off_1E78EAC60;
  return result;
}

void sub_1BF02F66C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE816c24_ZTSN3ims12CFDictionaryE832c24_ZTSN3ims12CFDictionaryE(uint64_t a1)
{
  void **v2;
  ims::CFType *v3;

  v2 = (void **)(a1 + 80);
  v3 = (ims::CFType *)(a1 + 816);
  ims::CFType::~CFType((ims::CFType *)(a1 + 832));
  ims::CFType::~CFType(v3);
  ims::StackConfig::~StackConfig(v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::initializeFromSIM(v5, a1 + 32, (std::string *)(a1 + 56), a1 + 80, *(void **)(a1 + 824), 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02F7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ___ZN3ims6Client10initializeERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEERKNS_11StackConfigE_block_invoke_10(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::initializeFromSIM(v5, a1 + 32, (std::string *)(a1 + 56), a1 + 80, 0);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02F87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *result;
  uint64_t v8;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  v6 = *(_OWORD *)(a2 + 80);
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = v6;
  ims::NetworkConfig::NetworkConfig((ims::NetworkConfig *)(a1 + 104), (const ims::NetworkConfig *)(a2 + 104));
  result = ims::DeviceConfig::DeviceConfig((std::string *)(a1 + 696), (__int128 *)(a2 + 696));
  v8 = *(_QWORD *)(a2 + 800);
  *(_DWORD *)(a1 + 807) = *(_DWORD *)(a2 + 807);
  *(_QWORD *)(a1 + 800) = v8;
  return result;
}

void sub_1BF02F964(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c23_ZTSN3ims11StackConfigE(uint64_t a1)
{
  ims::StackConfig::~StackConfig((void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::Client::initializeLimitedAccess(ims::Client *this, const ims::NetworkConfig *a2)
{
  int v4;
  _QWORD v5[4];
  std::string v6;
  std::string __p;
  std::string v8;
  int v9;
  std::string v10;
  std::string v11;
  std::string v12;
  std::string *v13;

  memset(&v12, 0, sizeof(v12));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v12, *((__int128 **)a2 + 60), *((__int128 **)a2 + 61), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 61) - *((_QWORD *)a2 + 60)) >> 3));
  memset(&v11, 0, sizeof(v11));
  if (*((char *)a2 + 431) < 0)
    std::string::__init_copy_ctor_external(&v11, *((const std::string::value_type **)a2 + 51), *((_QWORD *)a2 + 52));
  else
    v11 = *(std::string *)((_BYTE *)a2 + 17);
  memset(&v10, 0, sizeof(v10));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v10, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v10 = *(std::string *)((char *)this + 8);
  v4 = *((_DWORD *)a2 + 54);
  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 1174405120;
  v5[2] = ___ZN3ims6Client23initializeLimitedAccessERKNS_13NetworkConfigE_block_invoke;
  v5[3] = &__block_descriptor_tmp_12;
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v6, v10.__r_.__value_.__l.__data_, v10.__r_.__value_.__l.__size_);
  else
    v6 = v10;
  v9 = v4;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v11.__r_.__value_.__l.__data_, v11.__r_.__value_.__l.__size_);
  else
    __p = v11;
  memset(&v8, 0, sizeof(v8));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v8, (__int128 *)v12.__r_.__value_.__l.__data_, (__int128 *)v12.__r_.__value_.__l.__size_, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12.__r_.__value_.__l.__size_ - v12.__r_.__value_.__r.__words[0]) >> 3));
  IMSClientManager::callOnMainQueue((IMSClientManager *)v5);
  v13 = &v8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v13);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v11);
}

void sub_1BF02FBDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;

  if (a18 < 0)
    operator delete(__p);
  if (a34 < 0)
    operator delete(a29);
  if (*(char *)(v34 - 57) < 0)
    operator delete(*(void **)(v34 - 80));
  *(_QWORD *)(v34 - 80) = v34 - 48;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v34 - 80));
  _Unwind_Resume(a1);
}

void ___ZN3ims6Client23initializeLimitedAccessERKNS_13NetworkConfigE_block_invoke(unsigned int *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::initiateLimitedAccessRegister(v5, (uint64_t)(a1 + 8), a1[26], (uint64_t)(a1 + 14), (uint64_t)(a1 + 20));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02FCF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

std::string *__copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  return std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 80), *(__int128 **)(a2 + 80), *(__int128 **)(a2 + 88), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 3));
}

void sub_1BF02FDBC(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c89_ZTSNSt3__16vectorINS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEENS4_IS6_EEEE(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::Client::deinitialize(ims::Client *this, char a2)
{
  _QWORD v3[4];
  std::string __p;
  char v5;
  std::string v6;

  memset(&v6, 0, sizeof(v6));
  if (*((char *)this + 31) < 0)
    std::string::__init_copy_ctor_external(&v6, *((const std::string::value_type **)this + 1), *((_QWORD *)this + 2));
  else
    v6 = *(std::string *)((char *)this + 8);
  v3[0] = MEMORY[0x1E0C809B0];
  v3[1] = 1174405120;
  v3[2] = ___ZN3ims6Client12deinitializeEb_block_invoke;
  v3[3] = &__block_descriptor_tmp_13;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __p = v6;
  v5 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_1BF02FF20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (*(char *)(v18 - 25) < 0)
    operator delete(*(void **)(v18 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client12deinitializeEb_block_invoke(unsigned __int8 *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::deinitialize(v5, (uint64_t)(a1 + 32), 0, a1[56]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF02FFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::shutdown(uint64_t a1, void **a2)
{
  void *v3;
  _QWORD v4[4];
  std::string __p;
  xpc_object_t object;
  std::string v7;

  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v7 = *(std::string *)(a1 + 8);
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZN3ims6Client8shutdownEN3xpc4dictE_block_invoke;
  v4[3] = &__block_descriptor_tmp_14_0;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    __p = v7;
  v3 = *a2;
  object = v3;
  if (v3)
    xpc_retain(v3);
  else
    object = xpc_null_create();
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  xpc_release(object);
  object = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_1BF0300F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, xpc_object_t object)
{
  uint64_t v19;

  if (*(char *)(v19 - 25) < 0)
    operator delete(*(void **)(v19 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZN3ims6Client8shutdownEN3xpc4dictE_block_invoke(uint64_t a1)
{
  uint64_t v2;
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v7);
  v2 = v7;
  v3 = *(xpc_object_t *)(a1 + 56);
  if (v3)
    xpc_retain(*(xpc_object_t *)(a1 + 56));
  else
    v3 = xpc_null_create();
  BambiClient::shutdownStack(*(_QWORD **)(v2 + 168), (unsigned __int8 *)(a1 + 32));
  xpc_release(v3);
  v4 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BF0301F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  xpc_release(v9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

xpc_object_t __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c15_ZTSN3xpc4dictE(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  void *v6;
  xpc_object_t result;

  v4 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 32);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = *(void **)(a2 + 56);
  *(_QWORD *)(a1 + 56) = v6;
  if (v6)
    return xpc_retain(v6);
  result = xpc_null_create();
  *(_QWORD *)(a1 + 56) = result;
  return result;
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c15_ZTSN3xpc4dictE(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(_QWORD *)(a1 + 56) = 0;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::ClientHandle::dumpState(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[4];
  std::string v5;
  std::string __p;
  std::string v7;
  std::string v8;

  memset(&v8, 0, sizeof(v8));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v8, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v8 = *(std::string *)a2;
  memset(&v7, 0, sizeof(v7));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v7, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v7 = *(std::string *)a3;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 1174405120;
  v4[2] = ___ZNK3ims12ClientHandle9dumpStateERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke;
  v4[3] = &__block_descriptor_tmp_15_2;
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v5, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
  else
    v5 = v8;
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v7.__r_.__value_.__l.__data_, v7.__r_.__value_.__l.__size_);
  else
    __p = v7;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
}

void sub_1BF03041C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  uint64_t v30;

  if (a18 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (*(char *)(v30 - 25) < 0)
    operator delete(*(void **)(v30 - 48));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle9dumpStateERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9__block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IPTelephonyManager::dumpState(v5, (const std::string *)(a1 + 32), a1 + 56);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF030504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  v5 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BF03059C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 55) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
}

void ims::ClientHandle::qosEstablished(uint64_t a1, uint64_t a2)
{
  _QWORD v2[4];
  void *__p;
  void *v4;
  uint64_t v5;
  void *v6;
  _BYTE *v7;
  uint64_t v8;

  v6 = 0;
  v7 = 0;
  v8 = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&v6, *(const void **)a2, *(_QWORD *)(a2 + 8), (uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 1174405120;
  v2[2] = ___ZNK3ims12ClientHandle14qosEstablishedERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke;
  v2[3] = &__block_descriptor_tmp_16;
  v4 = 0;
  v5 = 0;
  __p = 0;
  std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(&__p, v6, (uint64_t)v7, (v7 - (_BYTE *)v6) >> 2);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
  if (__p)
  {
    v4 = __p;
    operator delete(__p);
  }
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
}

void sub_1BF0306B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  uint64_t v14;
  void *v16;

  if (__p)
    operator delete(__p);
  v16 = *(void **)(v14 - 40);
  if (v16)
  {
    *(_QWORD *)(v14 - 32) = v16;
    operator delete(v16);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims12ClientHandle14qosEstablishedERKNSt3__16vectorIjNS1_9allocatorIjEEEE_block_invoke(int **a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IMSCallManager::handleQualityOfServiceEstablished(*(_QWORD **)(v5 + 200), a1 + 4);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF030768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v2 = (_QWORD *)(a1 + 32);
  v2[2] = 0;
  return std::vector<unsigned int>::__init_with_size[abi:ne180100]<unsigned int *,unsigned int *>(v2, *(const void **)(a2 + 32), *(_QWORD *)(a2 + 40), (uint64_t)(*(_QWORD *)(a2 + 40) - *(_QWORD *)(a2 + 32)) >> 2);
}

void __destroy_helper_block_e8_32c39_ZTSNSt3__16vectorIjNS_9allocatorIjEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ims::ClientHandle::qosEstablishedForBearer(uint64_t a1, int a2, char a3, uint64_t a4)
{
  _QWORD v7[5];
  void *__p;
  void *v9;
  uint64_t v10;
  int v11;
  char v12;
  void *v13;
  _BYTE *v14;
  uint64_t v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&v13, *(const void **)a4, *(_QWORD *)(a4 + 8), (uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 1);
  v7[0] = MEMORY[0x1E0C809B0];
  v7[1] = 1174405120;
  v7[2] = ___ZN3ims12ClientHandle23qosEstablishedForBearerEjbRKNSt3__16vectorItNS1_9allocatorItEEEE_block_invoke;
  v7[3] = &__block_descriptor_tmp_17_0;
  v11 = a2;
  v12 = a3;
  v7[4] = a1;
  __p = 0;
  v9 = 0;
  v10 = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p, v13, (uint64_t)v14, (v14 - (_BYTE *)v13) >> 1);
  IMSClientManager::callOnMainQueue((IMSClientManager *)v7);
  if (__p)
  {
    v9 = __p;
    operator delete(__p);
  }
  if (v13)
  {
    v14 = v13;
    operator delete(v13);
  }
}

void sub_1BF03087C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  uint64_t v15;
  void *v17;

  if (__p)
    operator delete(__p);
  v17 = *(void **)(v15 - 56);
  if (v17)
  {
    *(_QWORD *)(v15 - 48) = v17;
    operator delete(v17);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN3ims12ClientHandle23qosEstablishedForBearerEjbRKNSt3__16vectorItNS1_9allocatorItEEEE_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IMSCallManager::handleQualityOfServiceEstablished(*(_QWORD **)(v5 + 200), *(_DWORD *)(a1 + 64), *(unsigned __int8 *)(a1 + 68), (uint64_t *)(a1 + 40));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF030944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *__copy_helper_block_e8_40c39_ZTSNSt3__16vectorItNS_9allocatorItEEEE(uint64_t a1, uint64_t a2)
{
  _QWORD *v2;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v2 = (_QWORD *)(a1 + 40);
  v2[2] = 0;
  return std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v2, *(const void **)(a2 + 40), *(_QWORD *)(a2 + 48), (uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 1);
}

void __destroy_helper_block_e8_40c39_ZTSNSt3__16vectorItNS_9allocatorItEEEE(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(_QWORD *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ims::ClientHandle::qosRevoked(ims::ClientHandle *this, int a2)
{
  _QWORD v2[4];
  int v3;

  v2[0] = MEMORY[0x1E0C809B0];
  v2[1] = 0x40000000;
  v2[2] = ___ZN3ims12ClientHandle10qosRevokedEj_block_invoke;
  v2[3] = &__block_descriptor_tmp_18_2;
  v3 = a2;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v2);
}

void ___ZN3ims12ClientHandle10qosRevokedEj_block_invoke(unsigned int *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IMSCallManager::handleQualityOfServiceRevoked(*(IMSCallManager **)(v5 + 200), a1[8]);
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF030A60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

ims::Client *ims::Client::Client(ims::Client *this)
{
  std::string *v2;
  __int128 v3;

  *(_QWORD *)this = off_1E78D3CF0;
  v2 = (std::string *)((char *)this + 8);
  if (byte_1ED70C94F < 0)
  {
    std::string::__init_copy_ctor_external(v2, (const std::string::value_type *)IMSClientManager::kDefaultStack, *((std::string::size_type *)&IMSClientManager::kDefaultStack + 1));
  }
  else
  {
    v3 = IMSClientManager::kDefaultStack;
    v2->__r_.__value_.__r.__words[2] = unk_1ED70C948;
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
  *((_BYTE *)this + 32) = 0;
  *(_QWORD *)this = off_1E78D3B50;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  return this;
}

void ims::Client::~Client(void **this)
{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78D3CF0;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void ims::Client::mergeAllCalls(ims::Client *this)
{
  IMSClientManager::callOnMainQueue((IMSClientManager *)&__block_literal_global_4);
}

void ___ZNK3ims6Client13mergeAllCallsEv_block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v4);
  IMSCallManager::mergeAllCalls(*(IMSCallManager **)(v4 + 200));
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF030C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::endConferenceCall(ims::Client *this)
{
  IMSClientManager::callOnMainQueue((IMSClientManager *)&__block_literal_global_21);
}

void ___ZNK3ims6Client17endConferenceCallEv_block_invoke(IMSClientManager *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;

  IMSClientManager::instance(a1);
  IPTelephonyManager::getInstance(&v4);
  IMSCallManager::endConferenceCall(*(IMSCallManager **)(v4 + 200));
  v1 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_1BF030CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void ims::Client::sendSMS(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD v11[4];
  std::string v12;
  std::string v13;
  std::string v14;
  void *v15;
  void *v16;
  uint64_t v17;
  std::string __p;
  char v19;
  std::string v20;
  std::string v21;
  void *v22;
  _BYTE *v23;
  uint64_t v24;
  std::string v25;
  std::string v26;

  memset(&v26, 0, sizeof(v26));
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v26, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v26 = *(std::string *)a2;
  memset(&v25, 0, sizeof(v25));
  if (*(char *)(a3 + 23) < 0)
    std::string::__init_copy_ctor_external(&v25, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  else
    v25 = *(std::string *)a3;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v22, *(const void **)a4, *(_QWORD *)(a4 + 8), *(_QWORD *)(a4 + 8) - *(_QWORD *)a4);
  memset(&v21, 0, sizeof(v21));
  if (*(char *)(a5 + 23) < 0)
    std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)a5, *(_QWORD *)(a5 + 8));
  else
    v21 = *(std::string *)a5;
  memset(&v20, 0, sizeof(v20));
  if (*(char *)(a1 + 31) < 0)
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)(a1 + 8), *(_QWORD *)(a1 + 16));
  else
    v20 = *(std::string *)(a1 + 8);
  v11[0] = MEMORY[0x1E0C809B0];
  v11[1] = 1174405120;
  v11[2] = ___ZNK3ims6Client7sendSMSERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIhNS5_IhEEEES9_b_block_invoke;
  v11[3] = &__block_descriptor_tmp_22;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v12, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
  else
    v12 = v20;
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v13, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  else
    v13 = v26;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v14, v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    v14 = v25;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v15, v22, (uint64_t)v23, v23 - (_BYTE *)v22);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v21.__r_.__value_.__l.__data_, v21.__r_.__value_.__l.__size_);
  else
    __p = v21;
  v19 = a6;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v15)
  {
    v16 = v15;
    operator delete(v15);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (v22)
  {
    v23 = v22;
    operator delete(v22);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
}

void sub_1BF030FA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  void *v48;

  if (__p)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  if (a24 < 0)
    operator delete(a19);
  if (a18 < 0)
    operator delete(a13);
  if (a46 < 0)
    operator delete(a41);
  if (*(char *)(v46 - 137) < 0)
    operator delete(*(void **)(v46 - 160));
  v48 = *(void **)(v46 - 136);
  if (v48)
  {
    *(_QWORD *)(v46 - 128) = v48;
    operator delete(v48);
  }
  if (*(char *)(v46 - 89) < 0)
    operator delete(*(void **)(v46 - 112));
  if (*(char *)(v46 - 57) < 0)
    operator delete(*(void **)(v46 - 80));
  _Unwind_Resume(exception_object);
}

void ___ZNK3ims6Client7sendSMSERKNSt3__112basic_stringIcNS1_11char_traitsIcEENS1_9allocatorIcEEEES9_RKNS1_6vectorIhNS5_IhEEEES9_b_block_invoke(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  IMSClientManager::instance((IMSClientManager *)a1);
  IPTelephonyManager::getInstance(&v5);
  IMSSMSManager::sendSMS(*(_QWORD *)(v5 + 208), a1 + 32, (std::string *)(a1 + 56), a1 + 80, (char **)(a1 + 104), (__int128 *)(a1 + 128), *(_BYTE *)(a1 + 152));
  v2 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_1BF031130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_32c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE80c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE104c39_ZTSNSt3__16vectorIhNS_9allocatorIhEEEE128c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  std::string *v7;
  __int128 v8;

  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 32), *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v4;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 56), *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 56);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 80), *(const std::string::value_type **)(a2 + 80), *(_QWORD *)(a2 + 88));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 80);
    *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
  }
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 104), *(const void **)(a2 + 104), *(_QWORD *)(a2 + 112), *(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104));
  v7 = (std::string *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    std::string::__init_copy_ctor_external(v7, *(const std::string::value_type **)(a2 + 128), *(_QWORD *)(a2 + 136));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 128);
    *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
    *(_OWORD *)&v7->__r_.__value_.__l.__data_ = v8;
  }
}

