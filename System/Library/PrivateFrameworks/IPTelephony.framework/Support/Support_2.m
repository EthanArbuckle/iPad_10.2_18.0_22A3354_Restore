void sub_1BEED6C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54)
{
  uint64_t v54;

  if (a22 < 0)
    operator delete(__p);
  LazuliSessionOptions::~LazuliSessionOptions(&a32);
  BambiCallOptions::~BambiCallOptions((void **)&a54);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v54 - 176);
  if (*(char *)(v54 - 89) < 0)
    operator delete(*(void **)(v54 - 112));
  ImsResult::~ImsResult((ImsResult *)(v54 - 256));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v54 - 144);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v54 - 160);
  _Unwind_Resume(a1);
}

void BambiCallTerminationReason::~BambiCallTerminationReason(void **this)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 14));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 12));
  if (*((char *)this + 95) < 0)
    operator delete(this[9]);
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

uint64_t SipDialogManager::handleNewServerTransaction(_QWORD *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  SipUriHeader *v12;
  __int128 *v13;
  uint64_t v14;
  uint64_t (*v15)(uint64_t);
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;
  const char *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  _QWORD *v24;
  uint64_t v25;
  int v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  void *v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::__shared_weak_count *size;
  _BOOL4 v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t v61;
  const std::string *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  __int128 v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  _QWORD *v84;
  uint64_t v85;
  const std::string *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  const std::string *v105;
  uint64_t v106;
  std::__shared_weak_count *v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  std::string v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  uint64_t v121;
  std::__shared_weak_count *v122;
  __int128 v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  void *v126[2];
  char v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  std::string __p;
  uint64_t v131;
  std::string v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  char v136;
  std::__shared_weak_count *v137;
  std::__shared_weak_count *v138;
  uint64_t v139;
  std::__shared_weak_count *v140;
  __int128 v141;

  v4 = *(_QWORD *)(*a2 + 288);
  v141 = 0uLL;
  (*(void (**)(__int128 *__return_ptr, _QWORD *, uint64_t))(*a1 + 32))(&v141, a1, v4);
  v5 = v141;
  if ((_QWORD)v141)
  {
    v6 = a2[1];
    v139 = *a2;
    v140 = (std::__shared_weak_count *)v6;
    if (v6)
    {
      v7 = (unint64_t *)(v6 + 8);
      do
        v8 = __ldxr(v7);
      while (__stxr(v8 + 1, v7));
    }
    SipDialog::addServerTransaction(v5, &v139);
    v9 = v140;
    if (v140)
    {
      p_shared_owners = (unint64_t *)&v140->__shared_owners_;
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    goto LABEL_53;
  }
  v12 = (SipUriHeader *)SipMessage::header<SipToHeader>(v4);
  if (v12)
    v13 = SipUriHeader::tag(v12);
  else
    v13 = &ims::kEmptyString;
  if (*((char *)v13 + 23) >= 0)
    v14 = *((unsigned __int8 *)v13 + 23);
  else
    v14 = *((_QWORD *)v13 + 1);
  v15 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112);
  if (v14)
  {
    v16 = (unsigned __int8 *)v15(v4);
    v17 = v16[23];
    if ((v17 & 0x80u) == 0)
      v18 = v16[23];
    else
      v18 = *((_QWORD *)v16 + 1);
    if (v18 != 6)
      goto LABEL_49;
    if ((v17 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v16, "NOTIFY", *((_QWORD *)v16 + 1)))
        goto LABEL_49;
    }
    else if (v16[23])
    {
      v19 = "NOTIFY";
      while (*v16 == *(unsigned __int8 *)v19)
      {
        ++v16;
        ++v19;
        if (!--v17)
          goto LABEL_38;
      }
      goto LABEL_49;
    }
LABEL_38:
    v24 = SipMessage::header<SipSubscriptionStateHeader>(v4);
    if (v24)
    {
      v25 = *((unsigned __int8 *)v24 + 127);
      v26 = (char)v25;
      if ((v25 & 0x80u) != 0)
        v25 = v24[14];
      if (v25 == 10)
      {
        v29 = (char *)v24[13];
        v27 = (char *)(v24 + 13);
        v28 = v29;
        v30 = v26 >= 0 ? v27 : v28;
        v31 = *(_QWORD *)v30;
        v32 = *((unsigned __int16 *)v30 + 4);
        if (v31 == *(_QWORD *)"terminated" && v32 == *(unsigned __int16 *)"ed")
        {
          v48 = a1[2];
          v47 = a1 + 2;
          v49 = (*(uint64_t (**)(_QWORD *))(v48 + 64))(v47);
          (*(void (**)(_QWORD *, uint64_t))(*v47 + 16))(v47, v49);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v49 + 8), (uint64_t)"received NOTIFY with state terminated for unknown dialog. Being nice and returning a 200 OK.", 92);
          *(_BYTE *)(v49 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v49 + 64))(v49, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v49 + 17) = 0;
          v50 = *a2;
          std::string::basic_string[abi:ne180100]<0>(&__p, "");
          SipServerTransaction::rejectTransactionWithStatus(v50, 200, (uint64_t)&__p);
          goto LABEL_50;
        }
      }
    }
LABEL_49:
    v34 = *a2;
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipServerTransaction::rejectTransactionWithStatus(v34, 481, (uint64_t)&__p);
LABEL_50:
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
    {
LABEL_53:
      v36 = 1;
      goto LABEL_54;
    }
    v35 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_52:
    operator delete(v35);
    goto LABEL_53;
  }
  v20 = (unsigned __int8 *)v15(v4);
  v21 = v20[23];
  if ((v21 & 0x80u) == 0)
    v22 = v20[23];
  else
    v22 = *((_QWORD *)v20 + 1);
  if (v22 != 6)
    goto LABEL_61;
  if ((v21 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v20, "INVITE", *((_QWORD *)v20 + 1)))
      goto LABEL_62;
LABEL_61:
    v36 = 0;
    goto LABEL_54;
  }
  if (v20[23])
  {
    v23 = "INVITE";
    while (*v20 == *(unsigned __int8 *)v23)
    {
      ++v20;
      ++v23;
      if (!--v21)
        goto LABEL_62;
    }
    goto LABEL_61;
  }
LABEL_62:
  v41 = a1[17];
  v42 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v41 + 16));
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v42;
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v41 + 8);
  if (*(_BYTE *)(__p.__r_.__value_.__r.__words[0] + 2657))
  {
    size = v42;
    v44 = 0;
  }
  else
  {
    v45 = a1[17];
    *(_OWORD *)&v117.__r_.__value_.__l.__data_ = 0uLL;
    v46 = *(std::__shared_weak_count **)(v45 + 16);
    if (v46)
    {
      v46 = std::__shared_weak_count::lock(v46);
      v117.__r_.__value_.__l.__size_ = (std::string::size_type)v46;
      if (v46)
      {
        v46 = *(std::__shared_weak_count **)(v45 + 8);
        v117.__r_.__value_.__r.__words[0] = (std::string::size_type)v46;
      }
    }
    if ((SipStack::registeredForVoice((SipStack *)v46) & 1) != 0)
    {
      v44 = 0;
    }
    else
    {
      v51 = a1[17];
      v52 = *(std::__shared_weak_count **)(v51 + 16);
      if (v52 && (v53 = std::__shared_weak_count::lock(v52)) != 0)
      {
        v54 = v53;
        v44 = *(_BYTE *)(*(_QWORD *)(v51 + 8) + 176) == 0;
        v55 = (unint64_t *)&v53->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      else
      {
        v44 = MEMORY[0xB0] == 0;
      }
    }
    if (v117.__r_.__value_.__l.__size_)
    {
      v57 = (unint64_t *)(v117.__r_.__value_.__l.__size_ + 8);
      do
        v58 = __ldaxr(v57);
      while (__stlxr(v58 - 1, v57));
      if (!v58)
      {
        (*(void (**)(std::string::size_type))(*(_QWORD *)v117.__r_.__value_.__l.__size_ + 16))(v117.__r_.__value_.__l.__size_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v117.__r_.__value_.__l.__size_);
      }
    }
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
    {
LABEL_86:
      if (v44)
        goto LABEL_87;
      goto LABEL_96;
    }
  }
  v59 = (unint64_t *)&size->__shared_owners_;
  do
    v60 = __ldaxr(v59);
  while (__stlxr(v60 - 1, v59));
  if (v60)
    goto LABEL_86;
  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
  std::__shared_weak_count::__release_weak(size);
  if (v44)
  {
LABEL_87:
    v61 = (*(uint64_t (**)(_QWORD *))(a1[2] + 48))(a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(a1[2] + 16))(a1 + 2, v61);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)"unable to create new dialog for incoming ", 41);
    *(_BYTE *)(v61 + 17) = 0;
    v62 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    LoggableString::LoggableString(&__p, v62);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v61 + 40))(v61, &__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v61 + 8), (uint64_t)": stack is not registered for voice", 35);
    *(_BYTE *)(v61 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v61 + 64))(v61, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v61 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    memset(&v117, 0, sizeof(v117));
    v63 = a1[17];
    v64 = *(std::__shared_weak_count **)(v63 + 16);
    if (v64 && (v65 = std::__shared_weak_count::lock(v64)) != 0)
    {
      v66 = v65;
      v67 = *(_QWORD *)(v63 + 8) + 3136;
      v68 = (unint64_t *)&v65->__shared_owners_;
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
      if (!v69)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v66);
      }
    }
    else
    {
      v67 = 3136;
    }
    if (!ims::AccessNetwork::isLTE((ims::AccessNetwork *)v67))
    {
      if (ims::AccessNetwork::isWifi((ims::AccessNetwork *)v67))
      {
        v103 = 488;
      }
      else
      {
        v106 = a1[17];
        v128 = 0;
        v129 = 0;
        v107 = *(std::__shared_weak_count **)(v106 + 16);
        if (v107 && (v129 = std::__shared_weak_count::lock(v107)) != 0)
        {
          v108 = *(_QWORD *)(v106 + 8);
          v128 = v108;
        }
        else
        {
          v108 = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(v126, "NotVoiceRegisteredNoLTE");
        SipStack::callTerminationReason(v108, (uint64_t)v126, (BambiCallTerminationReason *)&__p);
        if (v127 < 0)
          operator delete(v126[0]);
        std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v128);
        v103 = HIDWORD(v133);
        std::string::operator=(&v117, &v132);
        BambiCallTerminationReason::~BambiCallTerminationReason((void **)&__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_177;
    }
    v99 = a1[17];
    v128 = 0;
    v129 = 0;
    v100 = *(std::__shared_weak_count **)(v99 + 16);
    if (v100)
    {
      v101 = std::__shared_weak_count::lock(v100);
      v129 = v101;
      if (v101)
      {
        v102 = *(_QWORD *)(v99 + 8);
        v128 = v102;
LABEL_150:
        std::string::basic_string[abi:ne180100]<0>(v126, "NotVoiceRegisteredNonVoiceLTE");
        SipStack::callTerminationReason(v102, (uint64_t)v126, (BambiCallTerminationReason *)&__p);
        if (v127 < 0)
          operator delete(v126[0]);
        if (v101)
        {
          v109 = (unint64_t *)&v101->__shared_owners_;
          do
            v110 = __ldaxr(v109);
          while (__stlxr(v110 - 1, v109));
          if (!v110)
          {
            ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
            std::__shared_weak_count::__release_weak(v101);
          }
        }
        v103 = HIDWORD(v133);
        std::string::operator=(&v117, &v132);
        v111 = v138;
        if (v138)
        {
          v112 = (unint64_t *)&v138->__shared_owners_;
          do
            v113 = __ldaxr(v112);
          while (__stlxr(v113 - 1, v112));
          if (!v113)
          {
            ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
            std::__shared_weak_count::__release_weak(v111);
          }
        }
        v114 = v137;
        if (v137)
        {
          v115 = (unint64_t *)&v137->__shared_owners_;
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
        if (v136 < 0)
          operator delete(v135);
        if (SHIBYTE(v132.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v132.__r_.__value_.__l.__data_);
        if (SHIBYTE(v131) < 0)
          operator delete((void *)__p.__r_.__value_.__l.__size_);
LABEL_177:
        SipServerTransaction::rejectTransactionWithStatus(*a2, v103, (uint64_t)&v117);
        if ((SHIBYTE(v117.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_53;
        v35 = (void *)v117.__r_.__value_.__r.__words[0];
        goto LABEL_52;
      }
    }
    else
    {
      v101 = 0;
    }
    v102 = 0;
    goto LABEL_150;
  }
LABEL_96:
  __p.__r_.__value_.__r.__words[2] = 0;
  v131 = 0;
  v133 = 0;
  v134 = 0;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  memset(&v132, 0, sizeof(v132));
  v70 = a2[1];
  v124 = *a2;
  v125 = (std::__shared_weak_count *)v70;
  if (v70)
  {
    v71 = (unint64_t *)(v70 + 8);
    do
      v72 = __ldxr(v71);
    while (__stxr(v72 + 1, v71));
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *, uint64_t *, std::string *))(*a1 + 40))(&v117, a1, &v124, &__p);
  v73 = *(_OWORD *)&v117.__r_.__value_.__l.__data_;
  *(_OWORD *)&v117.__r_.__value_.__l.__data_ = 0uLL;
  v74 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  v141 = v73;
  if (v74)
  {
    v75 = (unint64_t *)&v74->__shared_owners_;
    do
      v76 = __ldaxr(v75);
    while (__stlxr(v76 - 1, v75));
    if (!v76)
    {
      ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
      std::__shared_weak_count::__release_weak(v74);
    }
  }
  v77 = (std::__shared_weak_count *)v117.__r_.__value_.__l.__size_;
  if (v117.__r_.__value_.__l.__size_)
  {
    v78 = (unint64_t *)(v117.__r_.__value_.__l.__size_ + 8);
    do
      v79 = __ldaxr(v78);
    while (__stlxr(v79 - 1, v78));
    if (!v79)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  v80 = v125;
  if (v125)
  {
    v81 = (unint64_t *)&v125->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  v84 = a1 + 2;
  v83 = a1[2];
  if ((_QWORD)v141)
  {
    v85 = (*(uint64_t (**)(_QWORD *))(v83 + 64))(a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v84 + 16))(a1 + 2, v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"created ", 8);
    *(_BYTE *)(v85 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)(v141 + *(_QWORD *)(*(_QWORD *)v141 - 24)) + 16))(v141 + *(_QWORD *)(*(_QWORD *)v141 - 24), v85);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)" for incoming ", 14);
    *(_BYTE *)(v85 + 17) = 0;
    v86 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    LoggableString::LoggableString(&v117, v86);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v85 + 40))(v85, &v117);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v85 + 17) = 0;
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    v123 = v141;
    if (*((_QWORD *)&v141 + 1))
    {
      v87 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    SipDialogManager::addDialog((uint64_t)a1, (uint64_t *)&v123);
    v89 = (std::__shared_weak_count *)*((_QWORD *)&v123 + 1);
    if (*((_QWORD *)&v123 + 1))
    {
      v90 = (unint64_t *)(*((_QWORD *)&v123 + 1) + 8);
      do
        v91 = __ldaxr(v90);
      while (__stlxr(v91 - 1, v90));
      if (!v91)
      {
        ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
        std::__shared_weak_count::__release_weak(v89);
      }
    }
    v92 = v141;
    v93 = a2[1];
    v121 = *a2;
    v122 = (std::__shared_weak_count *)v93;
    if (v93)
    {
      v94 = (unint64_t *)(v93 + 8);
      do
        v95 = __ldxr(v94);
      while (__stxr(v95 + 1, v94));
    }
    SipDialog::addServerTransaction(v92, &v121);
    v96 = v122;
    if (v122)
    {
      v97 = (unint64_t *)&v122->__shared_owners_;
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
    v118 = 0u;
    v119 = 0u;
    v120 = 0u;
    v117.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    v117.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(v117.__r_.__value_.__r.__words[2]) = 0;
    v36 = (*(unsigned int (**)(uint64_t *, _QWORD))(_bambiDomain + 24))(&_bambiDomain, 0) ^ 1;
    ImsResult::~ImsResult((ImsResult *)&v117);
  }
  else
  {
    v104 = (*(uint64_t (**)(_QWORD *))(v83 + 48))(a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v84 + 16))(v84, v104);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v104 + 8), (uint64_t)"unable to create new dialog for incoming ", 41);
    *(_BYTE *)(v104 + 17) = 0;
    v105 = (const std::string *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    LoggableString::LoggableString(&v117, v105);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v104 + 40))(v104, &v117);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v104 + 8), (uint64_t)": ", 2);
    *(_BYTE *)(v104 + 17) = 0;
    (*(void (**)(std::string *, uint64_t))(__p.__r_.__value_.__r.__words[0] + 16))(&__p, v104);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v104 + 64))(v104, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v104 + 17) = 0;
    if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v117.__r_.__value_.__l.__data_);
    SipServerTransaction::rejectTransactionWithResult((SipServerTransaction *)*a2, (ImsResult *)&__p);
    v36 = 1;
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
LABEL_54:
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v141 + 1);
  if (*((_QWORD *)&v141 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v141 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  return v36;
}

void sub_1BEED7A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  BambiCallTerminationReason::~BambiCallTerminationReason((void **)&a36);
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v41 - 80);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipSubscriptionStateHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Subscription-State");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

uint64_t SipDialogManager::dialogTerminated(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unsigned __int8 *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD *v10;
  const char *v11;
  uint64_t v12;
  unsigned __int8 *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t result;
  _QWORD *v17;
  uint64_t v18;
  _BYTE v19[24];

  v4 = a1 + 23;
  v5 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 23, a2);
  if (v5)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(v4, v5, (uint64_t)v19);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
    v7 = a1[2];
    v6 = a1 + 2;
    v8 = (*(uint64_t (**)(_QWORD *))(v7 + 64))(v6);
    (*(void (**)(_QWORD *, uint64_t))(*v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"removed [Dialog ", 16);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = (_BYTE *)(v8 + 17);
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 32))(v8, a2);
    v10 = *(_QWORD **)(v8 + 8);
    v11 = "] from lazuli map";
    v12 = 17;
  }
  else
  {
    v13 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 18, a2);
    if (!v13)
    {
      v18 = a1[2];
      v17 = a1 + 2;
      v8 = (*(uint64_t (**)(_QWORD *))(v18 + 56))(v17);
      (*(void (**)(_QWORD *, uint64_t))(*v17 + 16))(v17, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"dialogTerminated called on unknown dialog ", 42);
      *(_BYTE *)(v8 + 17) = 0;
      v9 = (_BYTE *)(v8 + 17);
      (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 32))(v8, a2);
      goto LABEL_6;
    }
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1 + 18, v13, (uint64_t)v19);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v19, 0);
    v15 = a1[2];
    v14 = a1 + 2;
    v8 = (*(uint64_t (**)(_QWORD *))(v15 + 64))(v14);
    (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(v14, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"removed [Dialog ", 16);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = (_BYTE *)(v8 + 17);
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v8 + 32))(v8, a2);
    v10 = *(_QWORD **)(v8 + 8);
    v11 = "] from map";
    v12 = 10;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)v11, v12);
  *v9 = 0;
LABEL_6:
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *v9 = 0;
  return result;
}

uint64_t SipDialogManager::handleRequest(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  const void *v23;
  char *v24;
  char *v25;
  uint64_t v26;
  void **v27;
  void **v28;
  __int128 *v29;
  void **v30;
  __int128 *v31;
  void **v32;
  __int128 *v33;
  void **v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  const char *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t *v44;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  std::string __str;
  std::string __p[3];
  _OWORD v69[4];
  __int128 v70;
  _OWORD v71[20];
  uint64_t v72;
  std::__shared_weak_count *v73;
  std::__shared_weak_count *v74;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD *))(*a2 + 112))(a2);
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 != 5)
    goto LABEL_12;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "REFER", *((_QWORD *)v6 + 1)))
      goto LABEL_12;
  }
  else if (v6[23])
  {
    v9 = "REFER";
    while (*v6 == *(unsigned __int8 *)v9)
    {
      ++v6;
      ++v9;
      if (!--v7)
        goto LABEL_21;
    }
LABEL_12:
    v69[0] = 0uLL;
    (*(void (**)(_OWORD *__return_ptr, _QWORD *, _QWORD *))(*a1 + 32))(v69, a1, a2);
    v10 = *(_QWORD *)&v69[0];
    if (*(_QWORD *)&v69[0])
    {
      v11 = (std::__shared_weak_count *)a3[1];
      v63 = (_QWORD *)*a3;
      v64 = v11;
      if (v11)
      {
        p_shared_owners = (unint64_t *)&v11->__shared_owners_;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      v14 = (*(uint64_t (**)(uint64_t, _QWORD *, _QWORD **))(*(_QWORD *)v10 + 16))(v10, a2, &v63);
      v15 = v64;
      if (v64)
      {
        v16 = (unint64_t *)&v64->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
    }
    else
    {
      v14 = 0;
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v69[0] + 1);
    if (*((_QWORD *)&v69[0] + 1))
    {
      v39 = (unint64_t *)(*((_QWORD *)&v69[0] + 1) + 8);
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
LABEL_70:
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
      return v14;
    }
    return v14;
  }
LABEL_21:
  v19 = (_QWORD *)*a3;
  v18 = (std::__shared_weak_count *)a3[1];
  v65 = v19;
  v66 = v18;
  if (v18)
  {
    v20 = (unint64_t *)&v18->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v73 = 0;
  v74 = 0;
  (*(void (**)(std::__shared_weak_count **__return_ptr, _QWORD *, _QWORD *))(*a1 + 32))(&v73, a1, a2);
  if (v73)
  {
    v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(a2 + 4, "Refer-To");
    if (v22)
    {
      v23 = (const void *)*((_QWORD *)v22 + 5);
      if (v23)
      {
        if (v24)
        {
          v25 = v24;
          v26 = (uint64_t)(v24 + 176);
          v27 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(v24 + 176), (void **)"method");
          v28 = (void **)(v25 + 184);
          if (v25 + 184 == (char *)v27)
            v29 = &ims::kEmptyString;
          else
            v29 = (__int128 *)(v27 + 7);
          v30 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v26, (void **)"Replaces");
          if (v28 == v30)
            v31 = &ims::kEmptyString;
          else
            v31 = (__int128 *)(v30 + 7);
          v32 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v26, (void **)"to-tag");
          if (v28 == v32)
            v33 = &ims::kEmptyString;
          else
            v33 = (__int128 *)(v32 + 7);
          v34 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v26, (void **)"from-tag");
          if (v28 == v34)
            v35 = &ims::kEmptyString;
          else
            v35 = (__int128 *)(v34 + 7);
          v36 = *((unsigned __int8 *)v29 + 23);
          if ((v36 & 0x80u) == 0)
            v37 = *((unsigned __int8 *)v29 + 23);
          else
            v37 = *((_QWORD *)v29 + 1);
          if (v37 == 6)
          {
            if ((v36 & 0x80) == 0)
            {
              if (*((_BYTE *)v29 + 23))
              {
                v38 = "INVITE";
                while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v38)
                {
                  v29 = (__int128 *)((char *)v29 + 1);
                  ++v38;
                  if (!--v36)
                    goto LABEL_73;
                }
                goto LABEL_58;
              }
LABEL_73:
              v72 = 0;
              memset(v71, 0, sizeof(v71));
              v70 = 0u;
              memset(v69, 0, sizeof(v69));
              SipUri::SipUri((SipUri *)v69, (const SipUri *)(v25 + 104));
              std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v70 + 8, *(_QWORD **)&v71[0]);
              v71[0] = 0uLL;
              *((_QWORD *)&v70 + 1) = v71;
              v46 = a1[17];
              v47 = *(std::__shared_weak_count **)(v46 + 16);
              if (v47 && (v48 = std::__shared_weak_count::lock(v47)) != 0)
              {
                v49 = v48;
                v50 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v46 + 8) + 136) + 248);
                v51 = (unint64_t *)&v48->__shared_owners_;
                do
                  v52 = __ldaxr(v51);
                while (__stlxr(v52 - 1, v51));
                if (!v52)
                {
                  ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
                  std::__shared_weak_count::__release_weak(v49);
                }
                if (!v50)
                  goto LABEL_91;
              }
              else if (!*(_QWORD *)(MEMORY[0x88] + 248))
              {
LABEL_91:
                v61 = v73;
                v62 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v65[36] + 112))(v65[36]);
                std::string::basic_string[abi:ne180100]<0>(&__str, "");
                SipDialog::sendResponse(&__str, v61, (uint64_t)(v65 + 40), v62, 200, (ImsResult *)__p);
                ImsResult::~ImsResult((ImsResult *)__p);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str.__r_.__value_.__l.__data_);
                SipUri::~SipUri((SipUri *)v69);
                v14 = 1;
                goto LABEL_62;
              }
              v53 = a1[17];
              __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v53 + 16));
              __p[0].__r_.__value_.__r.__words[0] = *(_QWORD *)(v53 + 8);
              v54 = *(_QWORD *)(*(_QWORD *)(__p[0].__r_.__value_.__r.__words[0] + 136) + 248);
              v55 = a1[17];
              v56 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v55 + 16));
              __str.__r_.__value_.__l.__size_ = (std::string::size_type)v56;
              __str.__r_.__value_.__r.__words[0] = *(_QWORD *)(v55 + 8);
              (*(void (**)(uint64_t, _QWORD, _OWORD *, __int128 *, __int128 *, __int128 *))(*(_QWORD *)v54 + 40))(v54, *(_QWORD *)(__str.__r_.__value_.__r.__words[0] + 136), v69, v31, v35, v33);
              v57 = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(v57);
              while (__stlxr(v58 - 1, v57));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
              if (__p[0].__r_.__value_.__l.__size_)
              {
                v59 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
                do
                  v60 = __ldaxr(v59);
                while (__stlxr(v60 - 1, v59));
                if (!v60)
                {
                  (*(void (**)(std::string::size_type))(*(_QWORD *)__p[0].__r_.__value_.__l.__size_ + 16))(__p[0].__r_.__value_.__l.__size_);
                  std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
                }
              }
              goto LABEL_91;
            }
            if (!memcmp(*(const void **)v29, "INVITE", *((_QWORD *)v29 + 1)))
              goto LABEL_73;
          }
LABEL_58:
          std::string::basic_string[abi:ne180100]<0>(__p, "Only INVITE refers accepted");
          SipServerTransaction::sendResponse(v19, 488, __p);
          goto LABEL_59;
        }
      }
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "Missing Refer-To header");
    SipServerTransaction::sendResponse(v19, 400, __p);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Dialog Does Not Exist");
    SipServerTransaction::sendResponse(v19, 481, __p);
  }
LABEL_59:
  ImsResult::~ImsResult((ImsResult *)v69);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v14 = 0;
LABEL_62:
  v41 = v74;
  if (v74)
  {
    v42 = (unint64_t *)&v74->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  if (v18)
  {
    v44 = (unint64_t *)&v18->__shared_owners_;
    do
      v40 = __ldaxr(v44);
    while (__stlxr(v40 - 1, v44));
    goto LABEL_70;
  }
  return v14;
}

void sub_1BEED83C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  SipUri::~SipUri((SipUri *)&a31);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v31 - 104);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipDialogManager::handleRequest(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  return SipDialogManager::handleRequest((_QWORD *)(a1 - 8), a2, a3);
}

uint64_t SipDialogManager::handleResponse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;

  v19 = 0;
  v20 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v19, a1, *(_QWORD *)(*a3 + 288));
  v5 = v19;
  if (v19)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    v17 = *a3;
    v18 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 24))(v5, a2, &v17);
    v10 = v18;
    if (v18)
    {
      v11 = (unint64_t *)&v18->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v13 = v20;
  if (v20)
  {
    v14 = (unint64_t *)&v20->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  return v9;
}

void sub_1BEED8590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipDialogManager::handleResponse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return SipDialogManager::handleResponse(a1 - 8, a2, a3);
}

void SipDialogManager::handleTransactionError(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = 0;
  v18 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v17, a1, *(_QWORD *)(*a3 + 288));
  v5 = v17;
  if (v17)
  {
    v6 = (std::__shared_weak_count *)a3[1];
    v15 = *a3;
    v16 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v5 + 32))(v5, a2, &v15);
    v9 = v16;
    if (v16)
    {
      v10 = (unint64_t *)&v16->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEED86A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogManager::handleTransactionError(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  SipDialogManager::handleTransactionError(a1 - 8, a2, a3);
}

void SipDialogManager::transactionCompleted(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v15, a1, *(_QWORD *)(*a2 + 288));
  v3 = v15;
  if (v15)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    v13 = *a2;
    v14 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 40))(v3, &v13);
    v7 = v14;
    if (v14)
    {
      v8 = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEED87B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogManager::transactionCompleted(uint64_t a1, _QWORD *a2)
{
  SipDialogManager::transactionCompleted(a1 - 8, a2);
}

void SipDialogManager::transactionTerminated(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(&v15, a1, *(_QWORD *)(*a2 + 288));
  v3 = v15;
  if (v15)
  {
    v4 = (std::__shared_weak_count *)a2[1];
    v13 = *a2;
    v14 = v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 48))(v3, &v13);
    v7 = v14;
    if (v14)
    {
      v8 = (unint64_t *)&v14->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_1BEED88BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipDialogManager::transactionTerminated(uint64_t a1, _QWORD *a2)
{
  SipDialogManager::transactionTerminated(a1 - 8, a2);
}

void SipDialogManager::getSubscription(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X3>, _QWORD *a5@<X8>)
{
  uint64_t v6;
  uint64_t v8;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  if (!v6)
    goto LABEL_9;
  v8 = *(unsigned __int8 *)(a2 + 23);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    v13 = 0;
    v14 = 0;
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(&v13, a1, a3);
    if (v13)
    {
      SipDialog::subscriptionForEvent(v13, (void **)a2, a4, a5);
    }
    else
    {
      *a5 = 0;
      a5[1] = 0;
    }
    v10 = v14;
    if (v14)
    {
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
LABEL_9:
    *a5 = 0;
    a5[1] = 0;
  }
}

void sub_1BEED89BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipDialogManager::cancelAllSubscriptions(SipDialogManager *this)
{
  char *v1;
  uint64_t v2;
  _QWORD *i;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  __int128 v12;
  uint64_t v13;

  v1 = (char *)this + 16;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"canceling all subscriptions", 27);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v13 = 0;
  v11 = 0u;
  v12 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)&v11, (uint64_t)(v1 + 128));
  for (i = (_QWORD *)v12; i; i = (_QWORD *)*i)
  {
    v4 = (std::__shared_weak_count *)i[5];
    v5 = (std::__shared_weak_count *)i[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    if (v4)
      SipDialog::cancelAllSubscriptions(v4);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v11);
}

void sub_1BEED8ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipDialogManager::printSubscriptions(SipDialogManager *this, ImsOutStream *a2)
{
  _QWORD *v3;
  char v4;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v3 = (_QWORD *)*((_QWORD *)this + 20);
  if (!v3)
    goto LABEL_18;
  v4 = 0;
  do
  {
    v6 = (_QWORD *)v3[5];
    v5 = (std::__shared_weak_count *)v3[6];
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    if (v6 && v6[251])
    {
      if ((v4 & 1) == 0)
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Subscriptions:", 14);
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((_BYTE *)a2 + 17) = 0;
      }
      v4 = 1;
      SipDialog::printSubscriptions(v6, a2, 1);
    }
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v3 = (_QWORD *)*v3;
  }
  while (v3);
  if ((v4 & 1) == 0)
  {
LABEL_18:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"No subscriptions", 16);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
}

void sub_1BEED8C34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipDialogManager::printDialogs(SipDialogManager *this, ImsOutStream *a2)
{
  _QWORD *v2;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  std::__shared_weak_count *v24;

  v2 = (_QWORD *)*((_QWORD *)this + 20);
  if (!v2)
    return;
  while (1)
  {
    v4 = v2[5];
    v5 = (std::__shared_weak_count *)v2[6];
    v23 = (char *)v4;
    v24 = v5;
    if (v5)
      break;
    if (!v4)
      return;
LABEL_8:
    v8 = *(_QWORD *)(v4 + 1848);
    v9 = *(std::__shared_weak_count **)(v4 + 1856);
    if (!v9)
      goto LABEL_13;
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
      if (v8)
      {
LABEL_14:
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Session ", 8);
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(char *, ImsOutStream *))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 24)] + 16))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 24)], a2);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)":", 1);
        *((_BYTE *)a2 + 17) = 0;
        (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *((_BYTE *)a2 + 17) = 0;
        v13 = *((_QWORD *)v23 + 231);
        v14 = (std::__shared_weak_count *)*((_QWORD *)v23 + 232);
        if (v14)
        {
          v15 = (unint64_t *)&v14->__shared_owners_;
          do
            v16 = __ldxr(v15);
          while (__stxr(v16 + 1, v15));
        }
        (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v13 + 248))(v13, a2);
        if (v14)
        {
          v17 = (unint64_t *)&v14->__shared_owners_;
          do
            v18 = __ldaxr(v17);
          while (__stlxr(v18 - 1, v17));
          if (!v18)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        v19 = v23;
        goto LABEL_25;
      }
    }
    else
    {
LABEL_13:
      if (v8)
        goto LABEL_14;
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Non-session ", 12);
    *((_BYTE *)a2 + 17) = 0;
    v19 = v23;
    (*(void (**)(char *, ImsOutStream *))(*(_QWORD *)&v23[*(_QWORD *)(*(_QWORD *)v23 - 24)] + 16))(&v23[*(_QWORD *)(*(_QWORD *)v23 - 24)], a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)":", 1);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    SipDialog::printDialogInfo((SipDialog *)v23, a2);
LABEL_25:
    if (*((_QWORD *)v19 + 251))
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  Subscriptions:", 16);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      SipDialog::printSubscriptions(v19, a2, 0);
    }
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    if (v24)
    {
      v20 = (unint64_t *)&v24->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v2 = (_QWORD *)*v2;
    if (!v2)
      return;
  }
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(v6);
  while (__stxr(v7 + 1, v6));
  if (v4)
    goto LABEL_8;
  do
    v22 = __ldaxr(v6);
  while (__stlxr(v22 - 1, v6));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEED8F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_QWORD *SipDialogManager::logPrefix(SipDialogManager *this, ImsOutStream *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  int v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  const char *v14;
  uint64_t v15;
  _QWORD *result;

  v3 = *((_QWORD *)this + 17);
  if (!v3)
    goto LABEL_16;
  v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (!v4)
    goto LABEL_16;
  v5 = std::__shared_weak_count::lock(v4);
  if (!v5)
    goto LABEL_16;
  v6 = v5;
  v7 = *(_QWORD *)(v3 + 8);
  if (!v7)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_16;
  }
  v8 = *(unsigned __int8 *)(v7 + 176);
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
    if (!v8)
      goto LABEL_16;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v6);
    if (!v8)
    {
LABEL_16:
      v13 = (_QWORD *)*((_QWORD *)a2 + 1);
      v14 = "DialogManager: ";
      v15 = 15;
      goto LABEL_17;
    }
  }
  v13 = (_QWORD *)*((_QWORD *)a2 + 1);
  v14 = "DialogManager(EMERGENCY): ";
  v15 = 26;
LABEL_17:
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)v14, v15);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'SipDialogManager::logPrefix(SipDialogManager *this, ImsOutStream *a2)
{
  return SipDialogManager::logPrefix((SipDialogManager *)((char *)this - 16), a2);
}

uint64_t SipDialogManager::activeDialogCount(SipDialogManager *this)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;

  v28 = 0;
  v26 = 0u;
  v27 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)&v26, (uint64_t)this + 144);
  v1 = (_QWORD *)v27;
  if ((_QWORD)v27)
  {
    v2 = 0;
    while (1)
    {
      v3 = v1[5];
      v4 = (std::__shared_weak_count *)v1[6];
      v25 = v4;
      if (v4)
      {
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v6 = __ldxr(p_shared_owners);
        while (__stxr(v6 + 1, p_shared_owners));
      }
      if (!v3)
        goto LABEL_27;
      v7 = *(_QWORD *)(v3 + 1848);
      v8 = *(std::__shared_weak_count **)(v3 + 1856);
      v24 = v8;
      if (v8)
      {
        v9 = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      if (v7)
        break;
      v18 = 0;
      if (v8)
        goto LABEL_22;
LABEL_26:
      v2 = (v2 + v18);
      v4 = v25;
LABEL_27:
      if (v4)
      {
        v21 = (unint64_t *)&v4->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
      }
      v1 = (_QWORD *)*v1;
      if (!v1)
        goto LABEL_35;
    }
    v11 = *(_QWORD *)(v3 + 1848);
    v12 = *(std::__shared_weak_count **)(v3 + 1856);
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 264))(v11);
    if (v12)
    {
      v16 = (unint64_t *)&v12->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v18 = v15 ^ 1;
    v8 = v24;
    if (!v24)
      goto LABEL_26;
LABEL_22:
    v19 = (unint64_t *)&v8->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
    goto LABEL_26;
  }
  v2 = 0;
LABEL_35:
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v26);
  return v2;
}

void sub_1BEED9210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SipDialogManager::checkTimers(SipDialogManager *this)
{
  _QWORD *i;
  SipDialog *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  __int128 v9;
  __int128 v10;
  uint64_t v11;

  v11 = 0;
  v9 = 0u;
  v10 = 0u;
  std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map((uint64_t)&v9, (uint64_t)this + 144);
  for (i = (_QWORD *)v10; i; i = (_QWORD *)*i)
  {
    v2 = (SipDialog *)i[5];
    v3 = (std::__shared_weak_count *)i[6];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldxr(p_shared_owners);
      while (__stxr(v5 + 1, p_shared_owners));
    }
    if (v2)
      SipDialog::checkTimers(v2);
    if (v3)
    {
      v6 = (unint64_t *)&v3->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
  }
  return std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&v9);
}

void sub_1BEED92E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t SipDialogManager::determineIncomingMessageCategory(SipDialogManager *this, const SipRequest *a2, const SipResponse *a3)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  SipDialog *v10;
  std::__shared_weak_count *v11;

  v10 = 0;
  v11 = 0;
  (*(void (**)(SipDialog **__return_ptr))(*(_QWORD *)this + 32))(&v10);
  if (v10)
    v5 = SipDialog::determineIncomingMessageCategory(v10, a2, a3);
  else
    v5 = 0;
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v5;
}

void sub_1BEED939C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t std::unordered_map<std::string,std::shared_ptr<SipDialog>>::unordered_map(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *i;

  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, *(_QWORD *)(a2 + 8));
  for (i = *(unsigned __int8 **)(a2 + 16); i; i = *(unsigned __int8 **)i)
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipDialog>> const&>(a1, i + 16, (uint64_t)(i + 16));
  return a1;
}

void sub_1BEED940C(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::pair<std::string const,std::shared_ptr<SipDialog>> const&>(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  _QWORD *v16;
  std::string *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v31 = 0;
  v16 = operator new(0x38uLL);
  v30[0] = v16;
  v30[1] = a1 + 16;
  *v16 = 0;
  v16[1] = v8;
  v17 = (std::string *)(v16 + 2);
  if (*(char *)(a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v17, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)&v17->__r_.__value_.__l.__data_ = *(_OWORD *)a3;
    v16[4] = *(_QWORD *)(a3 + 16);
  }
  v18 = *(_QWORD *)(a3 + 32);
  v16[5] = *(_QWORD *)(a3 + 24);
  v16[6] = v18;
  if (v18)
  {
    v19 = (unint64_t *)(v18 + 8);
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
  }
  LOBYTE(v31) = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v26);
    v9 = *(_QWORD *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v12);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = a1 + 16;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v28 >= v9)
          v28 %= v9;
      }
      else
      {
        v28 &= v9 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  i = (unsigned __int8 *)v30[0];
  v30[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return i;
}

void sub_1BEED96E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::clear(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  if (*(_QWORD *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
    *(_QWORD *)(a1 + 16) = 0;
    v2 = *(_QWORD *)(a1 + 8);
    if (v2)
    {
      for (i = 0; i != v2; ++i)
        *(_QWORD *)(*(_QWORD *)a1 + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 24) = 0;
  }
}

void std::allocate_shared[abi:ne180100]<SipDialog,std::allocator<SipDialog>,std::shared_ptr<SipDialogManager>,void>(std::__shared_weak_count_vtbl **a1, __int128 *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *shared_owners;
  unint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  __int128 v18;

  v4 = (std::__shared_weak_count *)operator new(0x860uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1348;
  v6 = (std::__shared_weak_count_vtbl *)&v4[1];
  v18 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  SipDialog::SipDialog((uint64_t)&v4[1], (const std::string **)&v18);
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v18 + 1);
  if (*((_QWORD *)&v18 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v18 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *a1 = v6;
  a1[1] = (std::__shared_weak_count_vtbl *)v4;
  shared_owners = (std::__shared_weak_count *)v4[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      return;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v4[9].__vftable = v6;
    v4[9].__shared_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    v4[9].__vftable = v6;
    v4[9].__shared_owners_ = (uint64_t)v4;
  }
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1BEED98B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  void *v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::__shared_weak_count::~__shared_weak_count(v9);
  operator delete(v11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipDialog>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1348;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialog>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1348;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipDialog>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unsigned __int8 *result;
  _BYTE v4[24];

  result = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1, result, (uint64_t)v4);
    std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v4, 0);
    return (unsigned __int8 *)1;
  }
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  unint64_t v4;
  int8x8_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 **v10;
  unsigned __int8 *v11;
  uint64_t v12;
  unint64_t v13;

  v4 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v5 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v5)
    return 0;
  v6 = v4;
  v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    v9 = v4;
    if (v4 >= *(_QWORD *)&v5)
      v9 = v4 % *(_QWORD *)&v5;
  }
  else
  {
    v9 = (*(_QWORD *)&v5 - 1) & v4;
  }
  v10 = *(unsigned __int8 ***)(*a1 + 8 * v9);
  if (!v10)
    return 0;
  v11 = *v10;
  if (*v10)
  {
    v12 = (uint64_t)(a1 + 4);
    do
    {
      v13 = *((_QWORD *)v11 + 1);
      if (v13 == v6)
      {
        if ((std::equal_to<std::string>::operator()[abi:ne180100](v12, v11 + 16, a2) & 1) != 0)
          return v11;
      }
      else
      {
        if (v8 > 1)
        {
          if (v13 >= *(_QWORD *)&v5)
            v13 %= *(_QWORD *)&v5;
        }
        else
        {
          v13 &= *(_QWORD *)&v5 - 1;
        }
        if (v13 != v9)
          return 0;
      }
      v11 = *(unsigned __int8 **)v11;
    }
    while (v11);
  }
  return v11;
}

_QWORD *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)result[1];
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*result + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*result + 8 * v4) = 0;
  }
  v10 = *a2;
  if (*a2)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*result + 8 * v11) = v7;
      v10 = *a2;
    }
  }
  *v7 = v10;
  *a2 = 0;
  --result[3];
  *(_QWORD *)a3 = a2;
  *(_QWORD *)(a3 + 8) = result + 2;
  *(_BYTE *)(a3 + 16) = 1;
  return result;
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  __int128 *v17;
  _QWORD *v18;
  std::string *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  size_t v26;
  _QWORD *v27;
  unint64_t v28;
  _QWORD v30[2];
  uint64_t v31;

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  v17 = *a4;
  v31 = 0;
  v18 = operator new(0x38uLL);
  v30[0] = v18;
  v30[1] = a1 + 16;
  *v18 = 0;
  v18[1] = v9;
  v19 = (std::string *)(v18 + 2);
  if (*((char *)v17 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v17, *((_QWORD *)v17 + 1));
  }
  else
  {
    v20 = *v17;
    v18[4] = *((_QWORD *)v17 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v18[5] = 0;
  v18[6] = 0;
  LOBYTE(v31) = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v10 || (float)(v22 * (float)v10) < v21)
  {
    v23 = 1;
    if (v10 >= 3)
      v23 = (v10 & (v10 - 1)) != 0;
    v24 = v23 | (2 * v10);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      v26 = v25;
    else
      v26 = v24;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v26);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v27 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v27)
  {
    *(_QWORD *)v30[0] = *v27;
    *v27 = v30[0];
  }
  else
  {
    *(_QWORD *)v30[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v30[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v30[0])
    {
      v28 = *(_QWORD *)(*(_QWORD *)v30[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v28 >= v10)
          v28 %= v10;
      }
      else
      {
        v28 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v28) = v30[0];
    }
  }
  i = (unsigned __int8 *)v30[0];
  v30[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)v30, 0);
  return i;
}

void sub_1BEED9E44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::allocate_shared[abi:ne180100]<SipUssdSession,std::allocator<SipUssdSession>,std::string const&,void>(uint64_t *a1, const std::string *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  uint64_t v6;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)operator new(0x2B8uLL);
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1398;
  v6 = SipUssdSession::SipUssdSession((uint64_t)&v4[1], a2);
  *a1 = v6;
  a1[1] = (uint64_t)v4;
  shared_weak_owners = (std::__shared_weak_count *)v4[8].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      return;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v10 = __ldxr(p_shared_weak_owners);
    while (__stxr(v10 + 1, p_shared_weak_owners));
    v4[8].__shared_owners_ = v6;
    v4[8].__shared_weak_owners_ = (uint64_t)v4;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
    v12 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[8].__shared_owners_ = v6;
    v4[8].__shared_weak_owners_ = (uint64_t)v4;
  }
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_1BEED9F60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipUssdSession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipUssdSession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1398;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipUssdSession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SipUserAgentConfig::initializeFromPrefs(SipUserAgentConfig *this, const ImsPrefs *a2)
{
  void **FeatureTagsEnabledKey;
  uint64_t v5;
  void **DeviceIMEIKey;
  void **v7;
  void **UseDialogEventPackageKey;
  void *v9;
  unint64_t v10;
  void **DialogEventPackageSessionDescriptionKey;
  void *v12;
  unint64_t v13;
  void **DefaultAuthAlgorithmKey;
  ImsPrefs *v15;
  void **v16;
  void **AuthResponseTimeoutMillisecondsKey;
  void *v18;
  ImsPrefs *v19;
  void **PreferredAuthQopListKey;
  ImsPrefs *v21;
  void **HoldResumeTimerMillisecondsKey;
  void *v23;
  ImsPrefs *v24;
  void **v25;
  void *v26;
  ImsPrefs *v27;
  void **RingingTimerSecondsKey;
  void *v29;
  ImsPrefs *v30;
  void **RingbackTimerSecondsKey;
  void *v32;
  ImsPrefs *v33;
  void **WaitForRingingTimerMOSecondsKey;
  void *v35;
  ImsPrefs *v36;
  void **WaitForRingingTimerMTSecondsKey;
  void *v38;
  ImsPrefs *v39;
  void **TriggerCSFBOnWaitForRingingTimeoutKey;
  void *v41;
  unint64_t v42;
  void **LocalQoSTimeoutMOSecondsKey;
  void *v44;
  ImsPrefs *v45;
  void **LocalQoSTimeoutMTSecondsKey;
  void *v47;
  ImsPrefs *v48;
  void **TriggerCSFBOnLocalQoSTimeoutMOKey;
  void *v50;
  unint64_t v51;
  void **TriggerCSFBOnLocalQoSTimeoutMTKey;
  void *v53;
  unint64_t v54;
  void **StartLocalQosTimerOnSessionProgressKey;
  void *v56;
  unint64_t v57;
  void **v58;
  void *v59;
  ImsPrefs *v60;
  void **AlwaysPrack18xKey;
  void *v62;
  unint64_t v63;
  void **QueueUnreliableProvisionalResponsesKey;
  void *v65;
  unint64_t v66;
  void **UseCompactHeadersKey;
  void *v68;
  unint64_t v69;
  void **AlwaysAddPrivacyHeaderKey;
  void *v71;
  unint64_t v72;
  void **SendPreferredServiceInInviteKey;
  void *v74;
  unint64_t v75;
  void **SendAcceptContactInInviteKey;
  void *v77;
  unint64_t v78;
  void **SendAcceptContactInSmsKey;
  void *v80;
  unint64_t v81;
  void **AcceptContactParamsKey;
  ImsPrefs *v83;
  void **v84;
  void *v85;
  ImsPrefs *v86;
  void **SupportPEarlyMediaHeaderKey;
  void *v88;
  unint64_t v89;
  void **EarlyMediaNeedsHeaderKey;
  void *v91;
  unint64_t v92;
  void **AlwaysSetPhoneContextKey;
  void *v94;
  unint64_t v95;
  void **EnableForkingKey;
  void *v97;
  unint64_t v98;
  void **EnableReasonHeaderInByeKey;
  void *v100;
  unint64_t v101;
  void **AllowTelUriInReferToKey;
  void *v103;
  unint64_t v104;
  void **SendReferToPeerKey;
  void *v106;
  unint64_t v107;
  void **AlwaysSubscribeToConferenceEventsKey;
  void *v109;
  unint64_t v110;
  void **SendConferenceSubscribeInNewDialogKey;
  void *v112;
  unint64_t v113;
  void **SendConferenceSubscribeAfterRefersKey;
  void *v115;
  unint64_t v116;
  void **TreatAllNotificationsAsPartialKey;
  void *v118;
  unint64_t v119;
  void **AddServicesToContactInConferenceSubscribeKey;
  void *v121;
  unint64_t v122;
  void **ConferenceParticipantJoinTimeoutMillisecondsKey;
  void *v124;
  ImsPrefs *v125;
  void **ConferenceWaitForHoldTimeoutMillisecondsKey;
  void *v127;
  ImsPrefs *v128;
  void **SendPreferredIdentityKey;
  void *v130;
  char v131;
  ImsPrefs *v132;
  void **UssdResponseTimeoutMillisecondsKey;
  void *v134;
  ImsPrefs *v135;
  void **ReRegisterOnErrorCodesKey;
  ImsPrefs *v137;
  void **EmergencyErrorResponsesToTriggerCSFBKey;
  ImsPrefs *v139;
  void **InviteErrorResponsesToTriggerCSFBKey;
  ImsPrefs *v141;
  void **TriggerCSFBOnSDPErrorKey;
  void *v143;
  unint64_t v144;
  void **PrivacyHeaderValueKey;
  ImsPrefs *v146;
  void **v147;
  void **UserAgentHeaderValueKey;
  ImsPrefs *v149;
  void **v150;
  void **IgnoreDuplicateSDPKey;
  void *v152;
  unint64_t v153;
  void **MaintainTransportForDurationOfSessionKey;
  void *v155;
  unint64_t v156;
  void **WaitForByeResponseTimeoutKey;
  void *v158;
  ImsPrefs *v159;
  void **WaitForCancelResponseTimeoutKey;
  void *v161;
  ImsPrefs *v162;
  void **v163;
  void *v164;
  ImsPrefs *v165;
  void **AlwaysSendSessionProgressKey;
  void *v167;
  unint64_t v168;
  void **PreferredSenderIdentityKey;
  ImsPrefs *v170;
  void **PreferredSenderNameKey;
  ImsPrefs *v172;
  void **v173;
  void **IgnoreFromHeaderForSenderNameKey;
  void *v175;
  unint64_t v176;
  void **SendInitialInviteAsInactiveKey;
  void *v178;
  unint64_t v179;
  void **SendResumeInviteAsSendRecvKey;
  void *v181;
  unint64_t v182;
  void **AlwaysUnsubscribeFromRegEventsKey;
  void *v184;
  unint64_t v185;
  void **AllowIncomingUssdSessionsKey;
  void *v187;
  unint64_t v188;
  void **AllowRemoteHoldForUnconfirmedCallsKey;
  void *v190;
  unint64_t v191;
  void **TTYReinviteTimeoutMillisecondsKey;
  void *v193;
  int v194;
  ImsPrefs *v195;
  void **KillForkOnUpdateErrorsKey;
  ImsPrefs *v197;
  void **v198;
  void *v199;
  unint64_t v200;
  void **EnableSessionIdKey;
  void *v202;
  unint64_t v203;
  void **AlwaysAddSipInstanceKey;
  void *v205;
  unint64_t v206;
  void **AddSipInstanceForWifiKey;
  void *v208;
  unint64_t v209;
  void **UseCorrectAckConstructionKey;
  void *v211;
  unint64_t v212;
  void **IgnoreRegNotificationContactExpiresKey;
  void *v214;
  unint64_t v215;
  void **ConferenceServerKey;
  ImsPrefs *v217;
  void **PrackErrorDelayKey;
  void *v219;
  ImsPrefs *v220;
  void **CountryOfOriginationFormatKey;
  ImsPrefs *v222;
  const ImsPrefsKeyEnum *v223;
  void **v224;
  void **LocationForShortCodeCallsKey;
  ImsPrefs *v226;
  const ImsPrefsKeyEnum *v227;
  void **v228;
  void **UseCIDUrlInPIDFKey;
  void *v230;
  unint64_t v231;
  void **UseTupleInPIDFKey;
  void *v233;
  unint64_t v234;
  void **AddContentDispositionInPIDFKey;
  void *v236;
  unint64_t v237;
  void **MethodInPIDFKey;
  ImsPrefs *v239;
  void **v240;
  void **SendLocalTimeZoneInformationKey;
  void *v242;
  unint64_t v243;
  void **BlockSilentRedialOverCSKey;
  void *v245;
  unint64_t v246;
  void **v247;
  void *v248;
  unint64_t v249;
  void **ValidateSipMessageRecipientKey;
  void *v251;
  unint64_t v252;
  void **IgnoreErrorsInTerminatedForksKey;
  void *v254;
  unint64_t v255;
  void **RestartRingbackTimerOn180Key;
  void *v257;
  unint64_t v258;
  const ImsPrefsKeyEnum *AccessNetworkRefreshMethodKey;
  ImsPrefs *v260;
  void **v261;
  void **AccessNetworkRefreshInHeldCallsKey;
  void *v263;
  unint64_t v264;
  void **UseCampedAccessNetworkInPANIKey;
  void *v266;
  unint64_t v267;
  void **SetCountryWithCampedPANIKey;
  void *v269;
  char v270;
  ImsPrefs *v271;
  void **AddLocationInInviteResponsesKey;
  ImsPrefs *v273;
  void **ResponseCodesAllowedForSilentRedialKey;
  ImsPrefs *v275;
  void **ResponseCodesBlockedForSilentRedialNRSANonEmKey;
  ImsPrefs *v277;
  void **DropRegistrationOnCSFBKey;
  void *v279;
  unint64_t v280;
  void **DropRegistrationOnSRVCCKey;
  void *v282;
  unint64_t v283;
  void **DropRegistrationOnErrorCodesKey;
  ImsPrefs *v285;
  void **v286;
  void *v287;
  unint64_t v288;
  void **AcceptedSmsContentTypesKey;
  ImsPrefs *v290;
  std::string::size_type size;
  void **v292;
  void **i;
  void **IgnoreSessionRefreshErrorsKey;
  void *v295;
  unint64_t v296;
  void **IgnoreSessionTimerExpirationKey;
  void *v298;
  unint64_t v299;
  void **RejectSMSWithFakeTimeoutKey;
  void *v301;
  unint64_t v302;
  void **v303;
  void *v304;
  unint64_t v305;
  void **InternalDisableSipInstanceKey;
  void *v307;
  unint64_t v308;
  void **AdditionalContactParamsKey;
  ImsPrefs *v310;
  void **ReRegisterOnInternalRequestTimeoutKey;
  void *v312;
  unint64_t v313;
  void **AllowInvalidTimestampInPCNIKey;
  void *v315;
  char v316;
  ImsPrefs *v317;
  void **NonFatalReInviteResponsesKey;
  ImsPrefs *v319;
  void **DisableMergeOnInviteErrorResponsesKey;
  ImsPrefs *v321;
  void *v322;
  ImsPrefs *v323;
  const ImsDictPref *v324;
  __int128 v325;
  void **v326;
  const void *v327;
  void *__p[2];
  __int128 v329;
  char v330;
  std::string v331;
  std::string v332[2];
  void *v333;
  uint64_t v334;
  uint64_t v335;

  FeatureTagsEnabledKey = (void **)ImsPrefs::getFeatureTagsEnabledKey(this);
  v5 = (uint64_t)ImsPrefs::prefWithKey(a2, FeatureTagsEnabledKey);
  if (v5)
  {
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    if ((v5 & 1) == 0)
      goto LABEL_8;
  }
  else if (!*((_BYTE *)FeatureTagsEnabledKey + 57))
  {
    goto LABEL_8;
  }
  DeviceIMEIKey = (void **)ImsPrefs::getDeviceIMEIKey((ImsPrefs *)v5);
  v5 = ImsPrefs::stringValue(a2, DeviceIMEIKey);
  v7 = (void **)((char *)this + 464);
  if (*((char *)this + 487) < 0)
    operator delete(*v7);
  *(_OWORD *)v7 = *(_OWORD *)__p;
  *((_QWORD *)this + 60) = v329;
LABEL_8:
  UseDialogEventPackageKey = (void **)ImsPrefs::getUseDialogEventPackageKey((ImsPrefs *)v5);
  v9 = ImsPrefs::prefWithKey(a2, UseDialogEventPackageKey);
  if (v9)
    v10 = (*(uint64_t (**)(void *))(*(_QWORD *)v9 + 40))(v9);
  else
    v10 = *((_BYTE *)UseDialogEventPackageKey + 57) != 0;
  *((_BYTE *)this + 916) = v10;
  DialogEventPackageSessionDescriptionKey = (void **)ImsPrefs::getDialogEventPackageSessionDescriptionKey((ImsPrefs *)v10);
  v12 = ImsPrefs::prefWithKey(a2, DialogEventPackageSessionDescriptionKey);
  if (v12)
    v13 = (*(uint64_t (**)(void *))(*(_QWORD *)v12 + 40))(v12);
  else
    v13 = *((_BYTE *)DialogEventPackageSessionDescriptionKey + 57) != 0;
  *((_BYTE *)this + 917) = v13;
  DefaultAuthAlgorithmKey = (void **)ImsPrefs::getDefaultAuthAlgorithmKey((ImsPrefs *)v13);
  v15 = (ImsPrefs *)ImsPrefs::stringValue(a2, DefaultAuthAlgorithmKey);
  v16 = (void **)((char *)this + 1320);
  if (*((char *)this + 1343) < 0)
    operator delete(*v16);
  *(_OWORD *)v16 = *(_OWORD *)__p;
  *((_QWORD *)this + 167) = v329;
  AuthResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getAuthResponseTimeoutMillisecondsKey(v15);
  v18 = ImsPrefs::prefWithKey(a2, AuthResponseTimeoutMillisecondsKey);
  if (v18)
    v19 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v18 + 56))(v18);
  else
    v19 = (ImsPrefs *)*((unsigned int *)AuthResponseTimeoutMillisecondsKey + 15);
  *((_DWORD *)this + 342) = (_DWORD)v19;
  v333 = 0;
  v334 = 0;
  v335 = 0;
  PreferredAuthQopListKey = (void **)ImsPrefs::getPreferredAuthQopListKey(v19);
  v21 = (ImsPrefs *)ImsPrefs::stringValue(a2, PreferredAuthQopListKey);
  HoldResumeTimerMillisecondsKey = (void **)ImsPrefs::getHoldResumeTimerMillisecondsKey(v21);
  v23 = ImsPrefs::prefWithKey(a2, HoldResumeTimerMillisecondsKey);
  if (v23)
    v24 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 56))(v23);
  else
    v24 = (ImsPrefs *)*((unsigned int *)HoldResumeTimerMillisecondsKey + 15);
  *((_DWORD *)this + 6) = (_DWORD)v24;
  v25 = (void **)ImsPrefs::getMultiCallHoldResumeTimerMillisecondsKey(v24);
  v26 = ImsPrefs::prefWithKey(a2, v25);
  if (v26)
    v27 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v26 + 56))(v26);
  else
    v27 = (ImsPrefs *)*((unsigned int *)v25 + 15);
  *((_DWORD *)this + 7) = (_DWORD)v27;
  if (!(_DWORD)v27)
    *((_DWORD *)this + 7) = *((_DWORD *)this + 6);
  RingingTimerSecondsKey = (void **)ImsPrefs::getRingingTimerSecondsKey(v27);
  v29 = ImsPrefs::prefWithKey(a2, RingingTimerSecondsKey);
  if (v29)
    v30 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v29 + 56))(v29);
  else
    v30 = (ImsPrefs *)*((unsigned int *)RingingTimerSecondsKey + 15);
  *(_DWORD *)this = (_DWORD)v30;
  RingbackTimerSecondsKey = (void **)ImsPrefs::getRingbackTimerSecondsKey(v30);
  v32 = ImsPrefs::prefWithKey(a2, RingbackTimerSecondsKey);
  if (v32)
    v33 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v32 + 56))(v32);
  else
    v33 = (ImsPrefs *)*((unsigned int *)RingbackTimerSecondsKey + 15);
  *((_DWORD *)this + 1) = (_DWORD)v33;
  WaitForRingingTimerMOSecondsKey = (void **)ImsPrefs::getWaitForRingingTimerMOSecondsKey(v33);
  v35 = ImsPrefs::prefWithKey(a2, WaitForRingingTimerMOSecondsKey);
  if (v35)
    v36 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v35 + 56))(v35);
  else
    v36 = (ImsPrefs *)*((unsigned int *)WaitForRingingTimerMOSecondsKey + 15);
  *((_DWORD *)this + 2) = (_DWORD)v36;
  WaitForRingingTimerMTSecondsKey = (void **)ImsPrefs::getWaitForRingingTimerMTSecondsKey(v36);
  v38 = ImsPrefs::prefWithKey(a2, WaitForRingingTimerMTSecondsKey);
  if (v38)
    v39 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v38 + 56))(v38);
  else
    v39 = (ImsPrefs *)*((unsigned int *)WaitForRingingTimerMTSecondsKey + 15);
  *((_DWORD *)this + 3) = (_DWORD)v39;
  TriggerCSFBOnWaitForRingingTimeoutKey = (void **)ImsPrefs::getTriggerCSFBOnWaitForRingingTimeoutKey(v39);
  v41 = ImsPrefs::prefWithKey(a2, TriggerCSFBOnWaitForRingingTimeoutKey);
  if (v41)
    v42 = (*(uint64_t (**)(void *))(*(_QWORD *)v41 + 40))(v41);
  else
    v42 = *((_BYTE *)TriggerCSFBOnWaitForRingingTimeoutKey + 57) != 0;
  *((_BYTE *)this + 32) = v42;
  LocalQoSTimeoutMOSecondsKey = (void **)ImsPrefs::getLocalQoSTimeoutMOSecondsKey((ImsPrefs *)v42);
  v44 = ImsPrefs::prefWithKey(a2, LocalQoSTimeoutMOSecondsKey);
  if (v44)
    v45 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v44 + 56))(v44);
  else
    v45 = (ImsPrefs *)*((unsigned int *)LocalQoSTimeoutMOSecondsKey + 15);
  *((_DWORD *)this + 4) = (_DWORD)v45;
  LocalQoSTimeoutMTSecondsKey = (void **)ImsPrefs::getLocalQoSTimeoutMTSecondsKey(v45);
  v47 = ImsPrefs::prefWithKey(a2, LocalQoSTimeoutMTSecondsKey);
  if (v47)
    v48 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v47 + 56))(v47);
  else
    v48 = (ImsPrefs *)*((unsigned int *)LocalQoSTimeoutMTSecondsKey + 15);
  *((_DWORD *)this + 5) = (_DWORD)v48;
  TriggerCSFBOnLocalQoSTimeoutMOKey = (void **)ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMOKey(v48);
  v50 = ImsPrefs::prefWithKey(a2, TriggerCSFBOnLocalQoSTimeoutMOKey);
  if (v50)
    v51 = (*(uint64_t (**)(void *))(*(_QWORD *)v50 + 40))(v50);
  else
    v51 = *((_BYTE *)TriggerCSFBOnLocalQoSTimeoutMOKey + 57) != 0;
  *((_BYTE *)this + 33) = v51;
  TriggerCSFBOnLocalQoSTimeoutMTKey = (void **)ImsPrefs::getTriggerCSFBOnLocalQoSTimeoutMTKey((ImsPrefs *)v51);
  v53 = ImsPrefs::prefWithKey(a2, TriggerCSFBOnLocalQoSTimeoutMTKey);
  if (v53)
    v54 = (*(uint64_t (**)(void *))(*(_QWORD *)v53 + 40))(v53);
  else
    v54 = *((_BYTE *)TriggerCSFBOnLocalQoSTimeoutMTKey + 57) != 0;
  *((_BYTE *)this + 34) = v54;
  StartLocalQosTimerOnSessionProgressKey = (void **)ImsPrefs::getStartLocalQosTimerOnSessionProgressKey((ImsPrefs *)v54);
  v56 = ImsPrefs::prefWithKey(a2, StartLocalQosTimerOnSessionProgressKey);
  if (v56)
    v57 = (*(uint64_t (**)(void *))(*(_QWORD *)v56 + 40))(v56);
  else
    v57 = *((_BYTE *)StartLocalQosTimerOnSessionProgressKey + 57) != 0;
  *((_BYTE *)this + 35) = v57;
  v58 = (void **)ImsPrefs::getCallSetupPingTimerMillisecondsKey((ImsPrefs *)v57);
  v59 = ImsPrefs::prefWithKey(a2, v58);
  if (v59)
    v60 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v59 + 56))(v59);
  else
    v60 = (ImsPrefs *)*((unsigned int *)v58 + 15);
  *((_DWORD *)this + 9) = (_DWORD)v60;
  AlwaysPrack18xKey = (void **)ImsPrefs::getAlwaysPrack18xKey(v60);
  v62 = ImsPrefs::prefWithKey(a2, AlwaysPrack18xKey);
  if (v62)
    v63 = (*(uint64_t (**)(void *))(*(_QWORD *)v62 + 40))(v62);
  else
    v63 = *((_BYTE *)AlwaysPrack18xKey + 57) != 0;
  *((_BYTE *)this + 40) = v63;
  QueueUnreliableProvisionalResponsesKey = (void **)ImsPrefs::getQueueUnreliableProvisionalResponsesKey((ImsPrefs *)v63);
  v65 = ImsPrefs::prefWithKey(a2, QueueUnreliableProvisionalResponsesKey);
  if (v65)
    v66 = (*(uint64_t (**)(void *))(*(_QWORD *)v65 + 40))(v65);
  else
    v66 = *((_BYTE *)QueueUnreliableProvisionalResponsesKey + 57) != 0;
  *((_BYTE *)this + 41) = v66;
  UseCompactHeadersKey = (void **)ImsPrefs::getUseCompactHeadersKey((ImsPrefs *)v66);
  v68 = ImsPrefs::prefWithKey(a2, UseCompactHeadersKey);
  if (v68)
    v69 = (*(uint64_t (**)(void *))(*(_QWORD *)v68 + 40))(v68);
  else
    v69 = *((_BYTE *)UseCompactHeadersKey + 57) != 0;
  *((_BYTE *)this + 545) = v69;
  AlwaysAddPrivacyHeaderKey = (void **)ImsPrefs::getAlwaysAddPrivacyHeaderKey((ImsPrefs *)v69);
  v71 = ImsPrefs::prefWithKey(a2, AlwaysAddPrivacyHeaderKey);
  if (v71)
    v72 = (*(uint64_t (**)(void *))(*(_QWORD *)v71 + 40))(v71);
  else
    v72 = *((_BYTE *)AlwaysAddPrivacyHeaderKey + 57) != 0;
  *((_BYTE *)this + 613) = v72;
  SendPreferredServiceInInviteKey = (void **)ImsPrefs::getSendPreferredServiceInInviteKey((ImsPrefs *)v72);
  v74 = ImsPrefs::prefWithKey(a2, SendPreferredServiceInInviteKey);
  if (v74)
    v75 = (*(uint64_t (**)(void *))(*(_QWORD *)v74 + 40))(v74);
  else
    v75 = *((_BYTE *)SendPreferredServiceInInviteKey + 57) != 0;
  *((_BYTE *)this + 548) = v75;
  SendAcceptContactInInviteKey = (void **)ImsPrefs::getSendAcceptContactInInviteKey((ImsPrefs *)v75);
  v77 = ImsPrefs::prefWithKey(a2, SendAcceptContactInInviteKey);
  if (v77)
    v78 = (*(uint64_t (**)(void *))(*(_QWORD *)v77 + 40))(v77);
  else
    v78 = *((_BYTE *)SendAcceptContactInInviteKey + 57) != 0;
  *((_BYTE *)this + 546) = v78;
  SendAcceptContactInSmsKey = (void **)ImsPrefs::getSendAcceptContactInSmsKey((ImsPrefs *)v78);
  v80 = ImsPrefs::prefWithKey(a2, SendAcceptContactInSmsKey);
  if (v80)
    v81 = (*(uint64_t (**)(void *))(*(_QWORD *)v80 + 40))(v80);
  else
    v81 = *((_BYTE *)SendAcceptContactInSmsKey + 57) != 0;
  *((_BYTE *)this + 547) = v81;
  memset(&v332[1], 0, sizeof(std::string));
  AcceptContactParamsKey = (void **)ImsPrefs::getAcceptContactParamsKey((ImsPrefs *)v81);
  v83 = (ImsPrefs *)ImsPrefs::stringValue(a2, AcceptContactParamsKey);
  v84 = (void **)ImsPrefs::getStrictCallFlowTimeoutKey(v83);
  v85 = ImsPrefs::prefWithKey(a2, v84);
  if (v85)
    v86 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v85 + 56))(v85);
  else
    v86 = (ImsPrefs *)*((unsigned int *)v84 + 15);
  *((_DWORD *)this + 148) = (_DWORD)v86;
  SupportPEarlyMediaHeaderKey = (void **)ImsPrefs::getSupportPEarlyMediaHeaderKey(v86);
  v88 = ImsPrefs::prefWithKey(a2, SupportPEarlyMediaHeaderKey);
  if (v88)
    v89 = (*(uint64_t (**)(void *))(*(_QWORD *)v88 + 40))(v88);
  else
    v89 = *((_BYTE *)SupportPEarlyMediaHeaderKey + 57) != 0;
  *((_BYTE *)this + 608) = v89;
  EarlyMediaNeedsHeaderKey = (void **)ImsPrefs::getEarlyMediaNeedsHeaderKey((ImsPrefs *)v89);
  v91 = ImsPrefs::prefWithKey(a2, EarlyMediaNeedsHeaderKey);
  if (v91)
    v92 = (*(uint64_t (**)(void *))(*(_QWORD *)v91 + 40))(v91);
  else
    v92 = *((_BYTE *)EarlyMediaNeedsHeaderKey + 57) != 0;
  *((_BYTE *)this + 609) = v92;
  AlwaysSetPhoneContextKey = (void **)ImsPrefs::getAlwaysSetPhoneContextKey((ImsPrefs *)v92);
  v94 = ImsPrefs::prefWithKey(a2, AlwaysSetPhoneContextKey);
  if (v94)
    v95 = (*(uint64_t (**)(void *))(*(_QWORD *)v94 + 40))(v94);
  else
    v95 = *((_BYTE *)AlwaysSetPhoneContextKey + 57) != 0;
  *((_BYTE *)this + 610) = v95;
  EnableForkingKey = (void **)ImsPrefs::getEnableForkingKey((ImsPrefs *)v95);
  v97 = ImsPrefs::prefWithKey(a2, EnableForkingKey);
  if (v97)
    v98 = (*(uint64_t (**)(void *))(*(_QWORD *)v97 + 40))(v97);
  else
    v98 = *((_BYTE *)EnableForkingKey + 57) != 0;
  *((_BYTE *)this + 611) = v98;
  EnableReasonHeaderInByeKey = (void **)ImsPrefs::getEnableReasonHeaderInByeKey((ImsPrefs *)v98);
  v100 = ImsPrefs::prefWithKey(a2, EnableReasonHeaderInByeKey);
  if (v100)
    v101 = (*(uint64_t (**)(void *))(*(_QWORD *)v100 + 40))(v100);
  else
    v101 = *((_BYTE *)EnableReasonHeaderInByeKey + 57) != 0;
  *((_BYTE *)this + 612) = v101;
  AllowTelUriInReferToKey = (void **)ImsPrefs::getAllowTelUriInReferToKey((ImsPrefs *)v101);
  v103 = ImsPrefs::prefWithKey(a2, AllowTelUriInReferToKey);
  if (v103)
    v104 = (*(uint64_t (**)(void *))(*(_QWORD *)v103 + 40))(v103);
  else
    v104 = *((_BYTE *)AllowTelUriInReferToKey + 57) != 0;
  *((_BYTE *)this + 616) = v104;
  SendReferToPeerKey = (void **)ImsPrefs::getSendReferToPeerKey((ImsPrefs *)v104);
  v106 = ImsPrefs::prefWithKey(a2, SendReferToPeerKey);
  if (v106)
    v107 = (*(uint64_t (**)(void *))(*(_QWORD *)v106 + 40))(v106);
  else
    v107 = *((_BYTE *)SendReferToPeerKey + 57) != 0;
  *((_BYTE *)this + 617) = v107;
  AlwaysSubscribeToConferenceEventsKey = (void **)ImsPrefs::getAlwaysSubscribeToConferenceEventsKey((ImsPrefs *)v107);
  v109 = ImsPrefs::prefWithKey(a2, AlwaysSubscribeToConferenceEventsKey);
  if (v109)
    v110 = (*(uint64_t (**)(void *))(*(_QWORD *)v109 + 40))(v109);
  else
    v110 = *((_BYTE *)AlwaysSubscribeToConferenceEventsKey + 57) != 0;
  *((_BYTE *)this + 618) = v110;
  SendConferenceSubscribeInNewDialogKey = (void **)ImsPrefs::getSendConferenceSubscribeInNewDialogKey((ImsPrefs *)v110);
  v112 = ImsPrefs::prefWithKey(a2, SendConferenceSubscribeInNewDialogKey);
  if (v112)
    v113 = (*(uint64_t (**)(void *))(*(_QWORD *)v112 + 40))(v112);
  else
    v113 = *((_BYTE *)SendConferenceSubscribeInNewDialogKey + 57) != 0;
  *((_BYTE *)this + 619) = v113;
  SendConferenceSubscribeAfterRefersKey = (void **)ImsPrefs::getSendConferenceSubscribeAfterRefersKey((ImsPrefs *)v113);
  v115 = ImsPrefs::prefWithKey(a2, SendConferenceSubscribeAfterRefersKey);
  if (v115)
    v116 = (*(uint64_t (**)(void *))(*(_QWORD *)v115 + 40))(v115);
  else
    v116 = *((_BYTE *)SendConferenceSubscribeAfterRefersKey + 57) != 0;
  *((_BYTE *)this + 620) = v116;
  TreatAllNotificationsAsPartialKey = (void **)ImsPrefs::getTreatAllNotificationsAsPartialKey((ImsPrefs *)v116);
  v118 = ImsPrefs::prefWithKey(a2, TreatAllNotificationsAsPartialKey);
  if (v118)
    v119 = (*(uint64_t (**)(void *))(*(_QWORD *)v118 + 40))(v118);
  else
    v119 = *((_BYTE *)TreatAllNotificationsAsPartialKey + 57) != 0;
  *((_BYTE *)this + 621) = v119;
  AddServicesToContactInConferenceSubscribeKey = (void **)ImsPrefs::getAddServicesToContactInConferenceSubscribeKey((ImsPrefs *)v119);
  v121 = ImsPrefs::prefWithKey(a2, AddServicesToContactInConferenceSubscribeKey);
  if (v121)
    v122 = (*(uint64_t (**)(void *))(*(_QWORD *)v121 + 40))(v121);
  else
    v122 = *((_BYTE *)AddServicesToContactInConferenceSubscribeKey + 57) != 0;
  *((_BYTE *)this + 622) = v122;
  ConferenceParticipantJoinTimeoutMillisecondsKey = (void **)ImsPrefs::getConferenceParticipantJoinTimeoutMillisecondsKey((ImsPrefs *)v122);
  v124 = ImsPrefs::prefWithKey(a2, ConferenceParticipantJoinTimeoutMillisecondsKey);
  if (v124)
    v125 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v124 + 56))(v124);
  else
    v125 = (ImsPrefs *)*((unsigned int *)ConferenceParticipantJoinTimeoutMillisecondsKey + 15);
  *((_DWORD *)this + 156) = (_DWORD)v125;
  ConferenceWaitForHoldTimeoutMillisecondsKey = (void **)ImsPrefs::getConferenceWaitForHoldTimeoutMillisecondsKey(v125);
  v127 = ImsPrefs::prefWithKey(a2, ConferenceWaitForHoldTimeoutMillisecondsKey);
  if (v127)
    v128 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v127 + 56))(v127);
  else
    v128 = (ImsPrefs *)*((unsigned int *)ConferenceWaitForHoldTimeoutMillisecondsKey + 15);
  *((_DWORD *)this + 281) = (_DWORD)v128;
  SendPreferredIdentityKey = (void **)ImsPrefs::getSendPreferredIdentityKey(v128);
  v130 = ImsPrefs::prefWithKey(a2, SendPreferredIdentityKey);
  if (v130)
    v131 = (*(uint64_t (**)(void *))(*(_QWORD *)v130 + 40))(v130);
  else
    v131 = *((_BYTE *)SendPreferredIdentityKey + 57) != 0;
  *((_BYTE *)this + 688) = v131;
  SipTimers::setTimersFromPrefs((SipUserAgentConfig *)((char *)this + 512), a2);
  UssdResponseTimeoutMillisecondsKey = (void **)ImsPrefs::getUssdResponseTimeoutMillisecondsKey(v132);
  v134 = ImsPrefs::prefWithKey(a2, UssdResponseTimeoutMillisecondsKey);
  if (v134)
    v135 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v134 + 56))(v134);
  else
    v135 = (ImsPrefs *)*((unsigned int *)UssdResponseTimeoutMillisecondsKey + 15);
  *((_DWORD *)this + 158) = (_DWORD)v135;
  ReRegisterOnErrorCodesKey = (void **)ImsPrefs::getReRegisterOnErrorCodesKey(v135);
  ImsPrefs::stringValue(a2, ReRegisterOnErrorCodesKey);
  SipResponseCodeMap::fromString((uint64_t)this + 696, (uint64_t)__p);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v137 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  EmergencyErrorResponsesToTriggerCSFBKey = (void **)ImsPrefs::getEmergencyErrorResponsesToTriggerCSFBKey(v137);
  ImsPrefs::stringValue(a2, EmergencyErrorResponsesToTriggerCSFBKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 760, (uint64_t)__p, v332);
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v139 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  InviteErrorResponsesToTriggerCSFBKey = (void **)ImsPrefs::getInviteErrorResponsesToTriggerCSFBKey(v139);
  ImsPrefs::stringValue(a2, InviteErrorResponsesToTriggerCSFBKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 728, (uint64_t)__p, v332);
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  TriggerCSFBOnSDPErrorKey = (void **)ImsPrefs::getTriggerCSFBOnSDPErrorKey(v141);
  v143 = ImsPrefs::prefWithKey(a2, TriggerCSFBOnSDPErrorKey);
  if (v143)
    v144 = (*(uint64_t (**)(void *))(*(_QWORD *)v143 + 40))(v143);
  else
    v144 = *((_BYTE *)TriggerCSFBOnSDPErrorKey + 57) != 0;
  *((_BYTE *)this + 914) = v144;
  PrivacyHeaderValueKey = (void **)ImsPrefs::getPrivacyHeaderValueKey((ImsPrefs *)v144);
  v146 = (ImsPrefs *)ImsPrefs::stringValue(a2, PrivacyHeaderValueKey);
  v147 = (void **)((char *)this + 640);
  if (*((char *)this + 663) < 0)
    operator delete(*v147);
  *(_OWORD *)v147 = *(_OWORD *)__p;
  *((_QWORD *)this + 82) = v329;
  UserAgentHeaderValueKey = (void **)ImsPrefs::getUserAgentHeaderValueKey(v146);
  v149 = (ImsPrefs *)ImsPrefs::stringValue(a2, UserAgentHeaderValueKey);
  v150 = (void **)((char *)this + 664);
  if (*((char *)this + 687) < 0)
    operator delete(*v150);
  *(_OWORD *)v150 = *(_OWORD *)__p;
  *((_QWORD *)this + 85) = v329;
  IgnoreDuplicateSDPKey = (void **)ImsPrefs::getIgnoreDuplicateSDPKey(v149);
  v152 = ImsPrefs::prefWithKey(a2, IgnoreDuplicateSDPKey);
  if (v152)
    v153 = (*(uint64_t (**)(void *))(*(_QWORD *)v152 + 40))(v152);
  else
    v153 = *((_BYTE *)IgnoreDuplicateSDPKey + 57) != 0;
  *((_BYTE *)this + 689) = v153;
  MaintainTransportForDurationOfSessionKey = (void **)ImsPrefs::getMaintainTransportForDurationOfSessionKey((ImsPrefs *)v153);
  v155 = ImsPrefs::prefWithKey(a2, MaintainTransportForDurationOfSessionKey);
  if (v155)
    v156 = (*(uint64_t (**)(void *))(*(_QWORD *)v155 + 40))(v155);
  else
    v156 = *((_BYTE *)MaintainTransportForDurationOfSessionKey + 57) != 0;
  *((_BYTE *)this + 792) = v156;
  WaitForByeResponseTimeoutKey = (void **)ImsPrefs::getWaitForByeResponseTimeoutKey((ImsPrefs *)v156);
  v158 = ImsPrefs::prefWithKey(a2, WaitForByeResponseTimeoutKey);
  if (v158)
    v159 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v158 + 56))(v158);
  else
    v159 = (ImsPrefs *)*((unsigned int *)WaitForByeResponseTimeoutKey + 15);
  *((_DWORD *)this + 149) = (_DWORD)v159;
  WaitForCancelResponseTimeoutKey = (void **)ImsPrefs::getWaitForCancelResponseTimeoutKey(v159);
  v161 = ImsPrefs::prefWithKey(a2, WaitForCancelResponseTimeoutKey);
  if (v161)
    v162 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v161 + 56))(v161);
  else
    v162 = (ImsPrefs *)*((unsigned int *)WaitForCancelResponseTimeoutKey + 15);
  *((_DWORD *)this + 150) = (_DWORD)v162;
  v163 = (void **)ImsPrefs::getWaitForAckBeforeEndingCallTimeoutKey(v162);
  v164 = ImsPrefs::prefWithKey(a2, v163);
  if (v164)
    v165 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v164 + 56))(v164);
  else
    v165 = (ImsPrefs *)*((unsigned int *)v163 + 15);
  *((_DWORD *)this + 151) = (_DWORD)v165;
  AlwaysSendSessionProgressKey = (void **)ImsPrefs::getAlwaysSendSessionProgressKey(v165);
  v167 = ImsPrefs::prefWithKey(a2, AlwaysSendSessionProgressKey);
  if (v167)
    v168 = (*(uint64_t (**)(void *))(*(_QWORD *)v167 + 40))(v167);
  else
    v168 = *((_BYTE *)AlwaysSendSessionProgressKey + 57) != 0;
  *((_BYTE *)this + 793) = v168;
  PreferredSenderIdentityKey = (void **)ImsPrefs::getPreferredSenderIdentityKey((ImsPrefs *)v168);
  ImsPrefs::stringValue(a2, PreferredSenderIdentityKey);
  v170 = (ImsPrefs *)SipRequest::identityTypeFromString((uint64_t)__p);
  *((_DWORD *)this + 201) = (_DWORD)v170;
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  PreferredSenderNameKey = (void **)ImsPrefs::getPreferredSenderNameKey(v170);
  v172 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, PreferredSenderNameKey);
  if (v172)
  {
    v173 = (void **)ImsPrefs::getPreferredSenderNameKey(v172);
    ImsPrefs::stringValue(a2, v173);
    v172 = (ImsPrefs *)SipRequest::identityTypeFromString((uint64_t)__p);
    *((_DWORD *)this + 202) = (_DWORD)v172;
    if (SBYTE7(v329) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *((_DWORD *)this + 202) = *((_DWORD *)this + 201);
  }
  IgnoreFromHeaderForSenderNameKey = (void **)ImsPrefs::getIgnoreFromHeaderForSenderNameKey(v172);
  v175 = ImsPrefs::prefWithKey(a2, IgnoreFromHeaderForSenderNameKey);
  if (v175)
    v176 = (*(uint64_t (**)(void *))(*(_QWORD *)v175 + 40))(v175);
  else
    v176 = *((_BYTE *)IgnoreFromHeaderForSenderNameKey + 57) != 0;
  *((_BYTE *)this + 812) = v176;
  SendInitialInviteAsInactiveKey = (void **)ImsPrefs::getSendInitialInviteAsInactiveKey((ImsPrefs *)v176);
  v178 = ImsPrefs::prefWithKey(a2, SendInitialInviteAsInactiveKey);
  if (v178)
    v179 = (*(uint64_t (**)(void *))(*(_QWORD *)v178 + 40))(v178);
  else
    v179 = *((_BYTE *)SendInitialInviteAsInactiveKey + 57) != 0;
  *((_BYTE *)this + 813) = v179;
  SendResumeInviteAsSendRecvKey = (void **)ImsPrefs::getSendResumeInviteAsSendRecvKey((ImsPrefs *)v179);
  v181 = ImsPrefs::prefWithKey(a2, SendResumeInviteAsSendRecvKey);
  if (v181)
    v182 = (*(uint64_t (**)(void *))(*(_QWORD *)v181 + 40))(v181);
  else
    v182 = *((_BYTE *)SendResumeInviteAsSendRecvKey + 57) != 0;
  *((_BYTE *)this + 814) = v182;
  AlwaysUnsubscribeFromRegEventsKey = (void **)ImsPrefs::getAlwaysUnsubscribeFromRegEventsKey((ImsPrefs *)v182);
  v184 = ImsPrefs::prefWithKey(a2, AlwaysUnsubscribeFromRegEventsKey);
  if (v184)
    v185 = (*(uint64_t (**)(void *))(*(_QWORD *)v184 + 40))(v184);
  else
    v185 = *((_BYTE *)AlwaysUnsubscribeFromRegEventsKey + 57) != 0;
  *((_BYTE *)this + 815) = v185;
  AllowIncomingUssdSessionsKey = (void **)ImsPrefs::getAllowIncomingUssdSessionsKey((ImsPrefs *)v185);
  v187 = ImsPrefs::prefWithKey(a2, AllowIncomingUssdSessionsKey);
  if (v187)
    v188 = (*(uint64_t (**)(void *))(*(_QWORD *)v187 + 40))(v187);
  else
    v188 = *((_BYTE *)AllowIncomingUssdSessionsKey + 57) != 0;
  *((_BYTE *)this + 628) = v188;
  AllowRemoteHoldForUnconfirmedCallsKey = (void **)ImsPrefs::getAllowRemoteHoldForUnconfirmedCallsKey((ImsPrefs *)v188);
  v190 = ImsPrefs::prefWithKey(a2, AllowRemoteHoldForUnconfirmedCallsKey);
  if (v190)
    v191 = (*(uint64_t (**)(void *))(*(_QWORD *)v190 + 40))(v190);
  else
    v191 = *((_BYTE *)AllowRemoteHoldForUnconfirmedCallsKey + 57) != 0;
  *((_BYTE *)this + 816) = v191;
  TTYReinviteTimeoutMillisecondsKey = (void **)ImsPrefs::getTTYReinviteTimeoutMillisecondsKey((ImsPrefs *)v191);
  v193 = ImsPrefs::prefWithKey(a2, TTYReinviteTimeoutMillisecondsKey);
  if (v193)
    v194 = (*(uint64_t (**)(void *))(*(_QWORD *)v193 + 56))(v193);
  else
    v194 = *((_DWORD *)TTYReinviteTimeoutMillisecondsKey + 15);
  *((_DWORD *)this + 205) = v194;
  v195 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "UPDATE");
  KillForkOnUpdateErrorsKey = (void **)ImsPrefs::getKillForkOnUpdateErrorsKey(v195);
  ImsPrefs::stringValue(a2, KillForkOnUpdateErrorsKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 824, (uint64_t)__p, v332);
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v198 = (void **)ImsPrefs::getUseDummyImeiCheckDigitKey(v197);
  v199 = ImsPrefs::prefWithKey(a2, v198);
  if (v199)
    v200 = (*(uint64_t (**)(void *))(*(_QWORD *)v199 + 40))(v199);
  else
    v200 = *((_BYTE *)v198 + 57) != 0;
  *((_BYTE *)this + 856) = v200;
  EnableSessionIdKey = (void **)ImsPrefs::getEnableSessionIdKey((ImsPrefs *)v200);
  v202 = ImsPrefs::prefWithKey(a2, EnableSessionIdKey);
  if (v202)
    v203 = (*(uint64_t (**)(void *))(*(_QWORD *)v202 + 40))(v202);
  else
    v203 = *((_BYTE *)EnableSessionIdKey + 57) != 0;
  *((_BYTE *)this + 857) = v203;
  AlwaysAddSipInstanceKey = (void **)ImsPrefs::getAlwaysAddSipInstanceKey((ImsPrefs *)v203);
  v205 = ImsPrefs::prefWithKey(a2, AlwaysAddSipInstanceKey);
  if (v205)
    v206 = (*(uint64_t (**)(void *))(*(_QWORD *)v205 + 40))(v205);
  else
    v206 = *((_BYTE *)AlwaysAddSipInstanceKey + 57) != 0;
  *((_BYTE *)this + 614) = v206;
  AddSipInstanceForWifiKey = (void **)ImsPrefs::getAddSipInstanceForWifiKey((ImsPrefs *)v206);
  v208 = ImsPrefs::prefWithKey(a2, AddSipInstanceForWifiKey);
  if (v208)
    v209 = (*(uint64_t (**)(void *))(*(_QWORD *)v208 + 40))(v208);
  else
    v209 = *((_BYTE *)AddSipInstanceForWifiKey + 57) != 0;
  *((_BYTE *)this + 615) = v209;
  UseCorrectAckConstructionKey = (void **)ImsPrefs::getUseCorrectAckConstructionKey((ImsPrefs *)v209);
  v211 = ImsPrefs::prefWithKey(a2, UseCorrectAckConstructionKey);
  if (v211)
    v212 = (*(uint64_t (**)(void *))(*(_QWORD *)v211 + 40))(v211);
  else
    v212 = *((_BYTE *)UseCorrectAckConstructionKey + 57) != 0;
  *((_BYTE *)this + 858) = v212;
  IgnoreRegNotificationContactExpiresKey = (void **)ImsPrefs::getIgnoreRegNotificationContactExpiresKey((ImsPrefs *)v212);
  v214 = ImsPrefs::prefWithKey(a2, IgnoreRegNotificationContactExpiresKey);
  if (v214)
    v215 = (*(uint64_t (**)(void *))(*(_QWORD *)v214 + 40))(v214);
  else
    v215 = *((_BYTE *)IgnoreRegNotificationContactExpiresKey + 57) != 0;
  *((_BYTE *)this + 859) = v215;
  ConferenceServerKey = (void **)ImsPrefs::getConferenceServerKey((ImsPrefs *)v215);
  ImsPrefs::stringValue(a2, ConferenceServerKey);
  v217 = (ImsPrefs *)SipUri::fromString((uint64_t)this + 48, (std::string *)__p);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  PrackErrorDelayKey = (void **)ImsPrefs::getPrackErrorDelayKey(v217);
  v219 = ImsPrefs::prefWithKey(a2, PrackErrorDelayKey);
  if (v219)
    v220 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v219 + 56))(v219);
  else
    v220 = (ImsPrefs *)*((unsigned int *)PrackErrorDelayKey + 15);
  *((_DWORD *)this + 215) = (_DWORD)v220;
  CountryOfOriginationFormatKey = (void **)ImsPrefs::getCountryOfOriginationFormatKey(v220);
  v222 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, CountryOfOriginationFormatKey);
  if (v222)
  {
    v223 = (const ImsPrefsKeyEnum *)ImsPrefs::getCountryOfOriginationFormatKey(v222);
    ImsPrefs::stringValue(a2, v223, (std::string *)__p);
    v224 = (void **)((char *)this + 864);
    if (*((char *)this + 887) < 0)
      operator delete(*v224);
    *(_OWORD *)v224 = *(_OWORD *)__p;
    *((_QWORD *)this + 110) = v329;
  }
  LocationForShortCodeCallsKey = (void **)ImsPrefs::getLocationForShortCodeCallsKey(v222);
  v226 = (ImsPrefs *)ImsPrefs::prefWithKey(a2, LocationForShortCodeCallsKey);
  if (v226)
  {
    v227 = (const ImsPrefsKeyEnum *)ImsPrefs::getLocationForShortCodeCallsKey(v226);
    ImsPrefs::stringValue(a2, v227, (std::string *)__p);
    v228 = (void **)((char *)this + 888);
    if (*((char *)this + 911) < 0)
      operator delete(*v228);
    *(_OWORD *)v228 = *(_OWORD *)__p;
    *((_QWORD *)this + 113) = v329;
  }
  UseCIDUrlInPIDFKey = (void **)ImsPrefs::getUseCIDUrlInPIDFKey(v226);
  v230 = ImsPrefs::prefWithKey(a2, UseCIDUrlInPIDFKey);
  if (v230)
    v231 = (*(uint64_t (**)(void *))(*(_QWORD *)v230 + 40))(v230);
  else
    v231 = *((_BYTE *)UseCIDUrlInPIDFKey + 57) != 0;
  *((_BYTE *)this + 919) = v231;
  UseTupleInPIDFKey = (void **)ImsPrefs::getUseTupleInPIDFKey((ImsPrefs *)v231);
  v233 = ImsPrefs::prefWithKey(a2, UseTupleInPIDFKey);
  if (v233)
    v234 = (*(uint64_t (**)(void *))(*(_QWORD *)v233 + 40))(v233);
  else
    v234 = *((_BYTE *)UseTupleInPIDFKey + 57) != 0;
  *((_BYTE *)this + 920) = v234;
  AddContentDispositionInPIDFKey = (void **)ImsPrefs::getAddContentDispositionInPIDFKey((ImsPrefs *)v234);
  v236 = ImsPrefs::prefWithKey(a2, AddContentDispositionInPIDFKey);
  if (v236)
    v237 = (*(uint64_t (**)(void *))(*(_QWORD *)v236 + 40))(v236);
  else
    v237 = *((_BYTE *)AddContentDispositionInPIDFKey + 57) != 0;
  *((_BYTE *)this + 921) = v237;
  MethodInPIDFKey = (void **)ImsPrefs::getMethodInPIDFKey((ImsPrefs *)v237);
  v239 = (ImsPrefs *)ImsPrefs::stringValue(a2, MethodInPIDFKey);
  v240 = (void **)((char *)this + 928);
  if (*((char *)this + 951) < 0)
    operator delete(*v240);
  *(_OWORD *)v240 = *(_OWORD *)__p;
  *((_QWORD *)this + 118) = v329;
  SendLocalTimeZoneInformationKey = (void **)ImsPrefs::getSendLocalTimeZoneInformationKey(v239);
  v242 = ImsPrefs::prefWithKey(a2, SendLocalTimeZoneInformationKey);
  if (v242)
    v243 = (*(uint64_t (**)(void *))(*(_QWORD *)v242 + 40))(v242);
  else
    v243 = *((_BYTE *)SendLocalTimeZoneInformationKey + 57) != 0;
  *((_BYTE *)this + 913) = v243;
  BlockSilentRedialOverCSKey = (void **)ImsPrefs::getBlockSilentRedialOverCSKey((ImsPrefs *)v243);
  v245 = ImsPrefs::prefWithKey(a2, BlockSilentRedialOverCSKey);
  if (v245)
    v246 = (*(uint64_t (**)(void *))(*(_QWORD *)v245 + 40))(v245);
  else
    v246 = *((_BYTE *)BlockSilentRedialOverCSKey + 57) != 0;
  *((_BYTE *)this + 912) = v246;
  v247 = (void **)ImsPrefs::getKillCallOnHoldResumeErrorKey((ImsPrefs *)v246);
  v248 = ImsPrefs::prefWithKey(a2, v247);
  if (v248)
    v249 = (*(uint64_t (**)(void *))(*(_QWORD *)v248 + 40))(v248);
  else
    v249 = *((_BYTE *)v247 + 57) != 0;
  *((_BYTE *)this + 915) = v249;
  ValidateSipMessageRecipientKey = (void **)ImsPrefs::getValidateSipMessageRecipientKey((ImsPrefs *)v249);
  v251 = ImsPrefs::prefWithKey(a2, ValidateSipMessageRecipientKey);
  if (v251)
    v252 = (*(uint64_t (**)(void *))(*(_QWORD *)v251 + 40))(v251);
  else
    v252 = *((_BYTE *)ValidateSipMessageRecipientKey + 57) != 0;
  *((_BYTE *)this + 918) = v252;
  IgnoreErrorsInTerminatedForksKey = (void **)ImsPrefs::getIgnoreErrorsInTerminatedForksKey((ImsPrefs *)v252);
  v254 = ImsPrefs::prefWithKey(a2, IgnoreErrorsInTerminatedForksKey);
  if (v254)
    v255 = (*(uint64_t (**)(void *))(*(_QWORD *)v254 + 40))(v254);
  else
    v255 = *((_BYTE *)IgnoreErrorsInTerminatedForksKey + 57) != 0;
  *((_BYTE *)this + 952) = v255;
  RestartRingbackTimerOn180Key = (void **)ImsPrefs::getRestartRingbackTimerOn180Key((ImsPrefs *)v255);
  v257 = ImsPrefs::prefWithKey(a2, RestartRingbackTimerOn180Key);
  if (v257)
    v258 = (*(uint64_t (**)(void *))(*(_QWORD *)v257 + 40))(v257);
  else
    v258 = *((_BYTE *)RestartRingbackTimerOn180Key + 57) != 0;
  *((_BYTE *)this + 953) = v258;
  AccessNetworkRefreshMethodKey = (const ImsPrefsKeyEnum *)ImsPrefs::getAccessNetworkRefreshMethodKey((ImsPrefs *)v258);
  ImsPrefs::stringValue(a2, AccessNetworkRefreshMethodKey, (std::string *)__p);
  v261 = (void **)((char *)this + 960);
  if (*((char *)this + 983) < 0)
    operator delete(*v261);
  *(_OWORD *)v261 = *(_OWORD *)__p;
  *((_QWORD *)this + 122) = v329;
  AccessNetworkRefreshInHeldCallsKey = (void **)ImsPrefs::getAccessNetworkRefreshInHeldCallsKey(v260);
  v263 = ImsPrefs::prefWithKey(a2, AccessNetworkRefreshInHeldCallsKey);
  if (v263)
    v264 = (*(uint64_t (**)(void *))(*(_QWORD *)v263 + 40))(v263);
  else
    v264 = *((_BYTE *)AccessNetworkRefreshInHeldCallsKey + 57) != 0;
  *((_BYTE *)this + 984) = v264;
  UseCampedAccessNetworkInPANIKey = (void **)ImsPrefs::getUseCampedAccessNetworkInPANIKey((ImsPrefs *)v264);
  v266 = ImsPrefs::prefWithKey(a2, UseCampedAccessNetworkInPANIKey);
  if (v266)
    v267 = (*(uint64_t (**)(void *))(*(_QWORD *)v266 + 40))(v266);
  else
    v267 = *((_BYTE *)UseCampedAccessNetworkInPANIKey + 57) != 0;
  *((_BYTE *)this + 985) = v267;
  SetCountryWithCampedPANIKey = (void **)ImsPrefs::getSetCountryWithCampedPANIKey((ImsPrefs *)v267);
  v269 = ImsPrefs::prefWithKey(a2, SetCountryWithCampedPANIKey);
  if (v269)
    v270 = (*(uint64_t (**)(void *))(*(_QWORD *)v269 + 40))(v269);
  else
    v270 = *((_BYTE *)SetCountryWithCampedPANIKey + 57) != 0;
  *((_BYTE *)this + 986) = v270;
  v271 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  AddLocationInInviteResponsesKey = (void **)ImsPrefs::getAddLocationInInviteResponsesKey(v271);
  ImsPrefs::stringValue(a2, AddLocationInInviteResponsesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 992, (uint64_t)__p, v332);
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v273 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  ResponseCodesAllowedForSilentRedialKey = (void **)ImsPrefs::getResponseCodesAllowedForSilentRedialKey(v273);
  ImsPrefs::stringValue(a2, ResponseCodesAllowedForSilentRedialKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1024, (uint64_t)__p, v332);
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v275 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  ResponseCodesBlockedForSilentRedialNRSANonEmKey = (void **)ImsPrefs::getResponseCodesBlockedForSilentRedialNRSANonEmKey(v275);
  ImsPrefs::stringValue(a2, ResponseCodesBlockedForSilentRedialNRSANonEmKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1056, (uint64_t)__p, v332);
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  DropRegistrationOnCSFBKey = (void **)ImsPrefs::getDropRegistrationOnCSFBKey(v277);
  v279 = ImsPrefs::prefWithKey(a2, DropRegistrationOnCSFBKey);
  if (v279)
    v280 = (*(uint64_t (**)(void *))(*(_QWORD *)v279 + 40))(v279);
  else
    v280 = *((_BYTE *)DropRegistrationOnCSFBKey + 57) != 0;
  *((_BYTE *)this + 1120) = v280;
  DropRegistrationOnSRVCCKey = (void **)ImsPrefs::getDropRegistrationOnSRVCCKey((ImsPrefs *)v280);
  v282 = ImsPrefs::prefWithKey(a2, DropRegistrationOnSRVCCKey);
  if (v282)
    v283 = (*(uint64_t (**)(void *))(*(_QWORD *)v282 + 40))(v282);
  else
    v283 = *((_BYTE *)DropRegistrationOnSRVCCKey + 57) != 0;
  *((_BYTE *)this + 1121) = v283;
  DropRegistrationOnErrorCodesKey = (void **)ImsPrefs::getDropRegistrationOnErrorCodesKey((ImsPrefs *)v283);
  ImsPrefs::stringValue(a2, DropRegistrationOnErrorCodesKey);
  SipResponseCodeMap::fromString((uint64_t)this + 1184, (uint64_t)__p);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v286 = (void **)ImsPrefs::getResetCallIdOnAuthChallengeKey(v285);
  v287 = ImsPrefs::prefWithKey(a2, v286);
  if (v287)
    v288 = (*(uint64_t (**)(void *))(*(_QWORD *)v287 + 40))(v287);
  else
    v288 = *((_BYTE *)v286 + 57) != 0;
  *((_BYTE *)this + 1122) = v288;
  memset(v332, 0, 24);
  AcceptedSmsContentTypesKey = (void **)ImsPrefs::getAcceptedSmsContentTypesKey((ImsPrefs *)v288);
  v290 = (ImsPrefs *)ImsPrefs::stringValue(a2, AcceptedSmsContentTypesKey);
  size = HIBYTE(v332[0].__r_.__value_.__r.__words[2]);
  if ((v332[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v332[0].__r_.__value_.__l.__size_;
  if (size)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v329 = 0;
    std::string::basic_string[abi:ne180100]<0>(&v331, ",");
    ims::tokenize(v332, (uint64_t *)__p, (char *)&v331);
    if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v331.__r_.__value_.__l.__data_);
    v292 = (void **)__p[0];
    for (i = (void **)__p[1]; v292 != i; v292 += 3)
      std::__tree<std::string>::__emplace_hint_unique_key_args<std::string,std::string const&>((uint64_t **)this + 141, (uint64_t)this + 1136, v292, (uint64_t)v292);
    v331.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
  }
  IgnoreSessionRefreshErrorsKey = (void **)ImsPrefs::getIgnoreSessionRefreshErrorsKey(v290);
  v295 = ImsPrefs::prefWithKey(a2, IgnoreSessionRefreshErrorsKey);
  if (v295)
    v296 = (*(uint64_t (**)(void *))(*(_QWORD *)v295 + 40))(v295);
  else
    v296 = *((_BYTE *)IgnoreSessionRefreshErrorsKey + 57) != 0;
  *((_BYTE *)this + 1152) = v296;
  IgnoreSessionTimerExpirationKey = (void **)ImsPrefs::getIgnoreSessionTimerExpirationKey((ImsPrefs *)v296);
  v298 = ImsPrefs::prefWithKey(a2, IgnoreSessionTimerExpirationKey);
  if (v298)
    v299 = (*(uint64_t (**)(void *))(*(_QWORD *)v298 + 40))(v298);
  else
    v299 = *((_BYTE *)IgnoreSessionTimerExpirationKey + 57) != 0;
  *((_BYTE *)this + 1153) = v299;
  RejectSMSWithFakeTimeoutKey = (void **)ImsPrefs::getRejectSMSWithFakeTimeoutKey((ImsPrefs *)v299);
  v301 = ImsPrefs::prefWithKey(a2, RejectSMSWithFakeTimeoutKey);
  if (v301)
    v302 = (*(uint64_t (**)(void *))(*(_QWORD *)v301 + 40))(v301);
  else
    v302 = *((_BYTE *)RejectSMSWithFakeTimeoutKey + 57) != 0;
  *((_BYTE *)this + 1154) = v302;
  v303 = (void **)ImsPrefs::getDontSendPreconditionsIfCallWaitingDisabledKey((ImsPrefs *)v302);
  v304 = ImsPrefs::prefWithKey(a2, v303);
  if (v304)
    v305 = (*(uint64_t (**)(void *))(*(_QWORD *)v304 + 40))(v304);
  else
    v305 = *((_BYTE *)v303 + 57) != 0;
  *((_BYTE *)this + 1155) = v305;
  InternalDisableSipInstanceKey = (void **)ImsPrefs::getInternalDisableSipInstanceKey((ImsPrefs *)v305);
  v307 = ImsPrefs::prefWithKey(a2, InternalDisableSipInstanceKey);
  if (v307)
    v308 = (*(uint64_t (**)(void *))(*(_QWORD *)v307 + 40))(v307);
  else
    v308 = *((_BYTE *)InternalDisableSipInstanceKey + 57) != 0;
  *((_BYTE *)this + 1156) = v308;
  AdditionalContactParamsKey = (void **)ImsPrefs::getAdditionalContactParamsKey((ImsPrefs *)v308);
  SipHeaderTemplateMap::initializeFromPref((uint64_t **)this + 145, a2, AdditionalContactParamsKey);
  ReRegisterOnInternalRequestTimeoutKey = (void **)ImsPrefs::getReRegisterOnInternalRequestTimeoutKey(v310);
  v312 = ImsPrefs::prefWithKey(a2, ReRegisterOnInternalRequestTimeoutKey);
  if (v312)
    v313 = (*(uint64_t (**)(void *))(*(_QWORD *)v312 + 40))(v312);
  else
    v313 = *((_BYTE *)ReRegisterOnInternalRequestTimeoutKey + 57) != 0;
  *((_BYTE *)this + 987) = v313;
  AllowInvalidTimestampInPCNIKey = (void **)ImsPrefs::getAllowInvalidTimestampInPCNIKey((ImsPrefs *)v313);
  v315 = ImsPrefs::prefWithKey(a2, AllowInvalidTimestampInPCNIKey);
  if (v315)
    v316 = (*(uint64_t (**)(void *))(*(_QWORD *)v315 + 40))(v315);
  else
    v316 = *((_BYTE *)AllowInvalidTimestampInPCNIKey + 57) != 0;
  *((_BYTE *)this + 1216) = v316;
  v317 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  NonFatalReInviteResponsesKey = (void **)ImsPrefs::getNonFatalReInviteResponsesKey(v317);
  ImsPrefs::stringValue(a2, NonFatalReInviteResponsesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1088, (uint64_t)__p, &v331);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v319 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  DisableMergeOnInviteErrorResponsesKey = (void **)ImsPrefs::getDisableMergeOnInviteErrorResponsesKey(v319);
  ImsPrefs::stringValue(a2, DisableMergeOnInviteErrorResponsesKey);
  SipResponseCodeMap::addResponseCodesForMethodFromString((uint64_t)this + 1288, (uint64_t)__p, &v331);
  if (SHIBYTE(v331.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v331.__r_.__value_.__l.__data_);
  if (SBYTE7(v329) < 0)
    operator delete(__p[0]);
  v322 = ImsPrefs::getSpamCallRiskLevelsKey(v321);
  v323 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(a2, (void **)v322);
  if (v323)
    v324 = v323;
  else
    v324 = (const ImsDictPref *)*((_QWORD *)v322 + 11);
  if (v324)
  {
    SpamRiskMap::SpamRiskMap((SpamRiskMap *)__p, v324);
    v325 = v329;
    *((_OWORD *)this + 78) = *(_OWORD *)__p;
    *((_OWORD *)this + 79) = v325;
    *((_BYTE *)this + 1280) = v330;
  }
  v326 = (void **)ImsPrefs::getSpamCallCategoryMappingKey(v323);
  v327 = ImsPrefs::typedPrefWithKey<ImsArrayPref>(a2, v326);
  if (v327)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v329 = 0;
    ImsArrayPref::stringValues((uint64_t)v327, (std::vector<std::string> *)__p);
    SpamCategoryMap::SpamCategoryMap((uint64_t)&v331, (__int128 **)__p);
    if ((std::string *)((char *)this + 1224) != &v331)
      std::__tree<std::__value_type<std::string,ims::SpamCategory>,std::__map_value_compare<std::string,std::__value_type<std::string,ims::SpamCategory>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ims::SpamCategory>>>::__assign_multi<std::__tree_const_iterator<std::__value_type<std::string,ims::SpamCategory>,std::__tree_node<std::__value_type<std::string,ims::SpamCategory>,void *> *,long>>((uint64_t *)this + 153, v331.__r_.__value_.__l.__data_, &v331.__r_.__value_.__l.__size_);
    std::__tree<std::string>::destroy((uint64_t)&v331, (char *)v331.__r_.__value_.__l.__size_);
    v331.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v331);
  }
  if (SHIBYTE(v332[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v332[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v332[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v335) < 0)
    operator delete(v333);
}

void sub_1BEEDB9A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void **a18, char *a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  std::__tree<std::string>::destroy((uint64_t)&a18, a19);
  a18 = &a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a18);
  if (a29 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  if (*(char *)(v35 - 49) < 0)
    operator delete(*(void **)(v35 - 72));
  _Unwind_Resume(a1);
}

uint64_t SipUserAgentConfig::shouldCSFBOnInviteResponse(SipUserAgentConfig *this, unsigned int a2, int a3)
{
  uint64_t v6;
  char *v7;
  _BOOL8 v8;
  _BOOL4 v9;
  void *__p[2];
  char v12;
  char v13;

  if (a2 < 0x12C)
    return 0;
  v6 = 728;
  if (a3)
    v6 = 760;
  v7 = (char *)this + v6;
  v13 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "INVITE");
  v8 = SipResponseCodeMap::containsResponseCodeForMethod((uint64_t)v7, __p, a2, &v13);
  if (v12 < 0)
    operator delete(__p[0]);
  v9 = (a2 & 0xFFFFFFFE) == 0x1E6 && v8;
  if (v9 && !v13)
    return 0;
  if (!(a3 ^ 1 | v8))
    return SipUserAgentConfig::shouldCSFBOnInviteResponse(this, a2, 0);
  return v8;
}

void sub_1BEEDBC14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipUserAgent::SipUserAgent(uint64_t a1, uint64_t *a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *shared_owners;
  unint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  std::__shared_weak_count *v55;
  std::__shared_weak_count *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *size;
  unint64_t *v72;
  unint64_t v73;
  SipAuthClient *v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t v80;
  char v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::string v86;
  std::string __p;
  uint64_t v88;
  std::__shared_weak_count *v89;

  v4 = (std::__shared_weak_count *)a2[1];
  v88 = *a2;
  v89 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  SipStackLayer::SipStackLayer((_QWORD *)a1, &v88);
  v7 = v89;
  if (v89)
  {
    v8 = (unint64_t *)&v89->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.ua");
  v10 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v86, *(const std::string::value_type **)(v10 + 4136), *(_QWORD *)(v10 + 4144));
  else
    v86 = *(std::string *)(v10 + 4136);
  ImsLogContainer::ImsLogContainer(a1 + 24, &__p, &v86);
  if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v86.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78C1448;
  *(_QWORD *)(a1 + 24) = &unk_1E78C1470;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 160;
  *(_QWORD *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_QWORD *)(a1 + 272) = 0;
  SipMessageEncodingMap::SipMessageEncodingMap((SipMessageEncodingMap *)(a1 + 288));
  *(_QWORD *)(a1 + 480) = &off_1E78EC610;
  *(_OWORD *)(a1 + 488) = 0u;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_QWORD *)(a1 + 560) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 568) = 0;
  ImsRandomNumberGenerator<unsigned char>::ImsRandomNumberGenerator((_QWORD *)(a1 + 592), 0, 63);
  *(_BYTE *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  srandomdev();
  v11 = (std::__shared_weak_count *)operator new(0x110uLL);
  v11->__shared_owners_ = 0;
  v12 = (unint64_t *)&v11->__shared_owners_;
  v11->__shared_weak_owners_ = 0;
  v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1508;
  v13 = (std::__shared_weak_count_vtbl *)&v11[1];
  SipDialogManager::SipDialogManager((SipDialogManager *)&v11[1], (SipUserAgent *)a1);
  shared_owners = (std::__shared_weak_count *)v11[6].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_29;
    do
      v15 = __ldxr(v12);
    while (__stxr(v15 + 1, v12));
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v11[6].__vftable = v13;
    v11[6].__shared_owners_ = (uint64_t)v11;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v18 = __ldxr(v12);
    while (__stxr(v18 + 1, v12));
    v19 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    v11[6].__vftable = v13;
    v11[6].__shared_owners_ = (uint64_t)v11;
  }
  do
    v21 = __ldaxr(v12);
  while (__stlxr(v21 - 1, v12));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_29:
  v22 = *(std::__shared_weak_count **)(a1 + 184);
  *(_QWORD *)(a1 + 176) = v13;
  *(_QWORD *)(a1 + 184) = v11;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  v25 = (std::__shared_weak_count *)operator new(0x128uLL);
  v25->__shared_owners_ = 0;
  v26 = (unint64_t *)&v25->__shared_owners_;
  v25->__shared_weak_owners_ = 0;
  v25->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1558;
  v27 = v25 + 1;
  SipMessageManager::SipMessageManager((SipMessageManager *)&v25[1], (uint64_t **)a1);
  shared_weak_owners = (std::__shared_weak_count *)v25[6].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_47;
    do
      v29 = __ldxr(v26);
    while (__stxr(v29 + 1, v26));
    v30 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
    v25[6].__shared_owners_ = (uint64_t)v27;
    v25[6].__shared_weak_owners_ = (uint64_t)v25;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v32 = __ldxr(v26);
    while (__stxr(v32 + 1, v26));
    v33 = (unint64_t *)&v25->__shared_weak_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v25[6].__shared_owners_ = (uint64_t)v27;
    v25[6].__shared_weak_owners_ = (uint64_t)v25;
  }
  do
    v35 = __ldaxr(v26);
  while (__stlxr(v35 - 1, v26));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
LABEL_47:
  v36 = *(std::__shared_weak_count **)(a1 + 200);
  *(_QWORD *)(a1 + 192) = v27;
  *(_QWORD *)(a1 + 200) = v25;
  if (v36)
  {
    v37 = (unint64_t *)&v36->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  v39 = (std::__shared_weak_count *)operator new(0x178uLL);
  v39->__shared_owners_ = 0;
  v40 = (unint64_t *)&v39->__shared_owners_;
  v39->__shared_weak_owners_ = 0;
  v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C15A8;
  v41 = v39 + 1;
  SipOptionsManager::SipOptionsManager((SipOptionsManager *)&v39[1], (SipUserAgent *)a1);
  v42 = (std::__shared_weak_count *)v39[6].__shared_weak_owners_;
  if (v42)
  {
    if (v42->__shared_owners_ != -1)
      goto LABEL_65;
    do
      v43 = __ldxr(v40);
    while (__stxr(v43 + 1, v40));
    v44 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
    v39[6].__shared_owners_ = (uint64_t)v41;
    v39[6].__shared_weak_owners_ = (uint64_t)v39;
    std::__shared_weak_count::__release_weak(v42);
  }
  else
  {
    do
      v46 = __ldxr(v40);
    while (__stxr(v46 + 1, v40));
    v47 = (unint64_t *)&v39->__shared_weak_owners_;
    do
      v48 = __ldxr(v47);
    while (__stxr(v48 + 1, v47));
    v39[6].__shared_owners_ = (uint64_t)v41;
    v39[6].__shared_weak_owners_ = (uint64_t)v39;
  }
  do
    v49 = __ldaxr(v40);
  while (__stlxr(v49 - 1, v40));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    std::__shared_weak_count::__release_weak(v39);
  }
LABEL_65:
  v50 = *(std::__shared_weak_count **)(a1 + 240);
  *(_QWORD *)(a1 + 232) = v41;
  *(_QWORD *)(a1 + 240) = v39;
  if (v50)
  {
    v51 = (unint64_t *)&v50->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v53 = (std::__shared_weak_count *)operator new(0x100uLL);
  v53->__shared_owners_ = 0;
  v54 = (unint64_t *)&v53->__shared_owners_;
  v53->__shared_weak_owners_ = 0;
  v53->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C15F8;
  v55 = v53 + 1;
  SipDialogEventClient::SipDialogEventClient((SipDialogEventClient *)&v53[1], (SipUserAgent *)a1);
  v56 = (std::__shared_weak_count *)v53[6].__vftable;
  if (v56)
  {
    if (v56->__shared_owners_ != -1)
      goto LABEL_83;
    do
      v57 = __ldxr(v54);
    while (__stxr(v57 + 1, v54));
    v58 = (unint64_t *)&v53->__shared_weak_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    v53[5].__shared_weak_owners_ = (uint64_t)v55;
    v53[6].__vftable = (std::__shared_weak_count_vtbl *)v53;
    std::__shared_weak_count::__release_weak(v56);
  }
  else
  {
    do
      v60 = __ldxr(v54);
    while (__stxr(v60 + 1, v54));
    v61 = (unint64_t *)&v53->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v53[5].__shared_weak_owners_ = (uint64_t)v55;
    v53[6].__vftable = (std::__shared_weak_count_vtbl *)v53;
  }
  do
    v63 = __ldaxr(v54);
  while (__stlxr(v63 - 1, v54));
  if (!v63)
  {
    ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
    std::__shared_weak_count::__release_weak(v53);
  }
LABEL_83:
  v64 = *(std::__shared_weak_count **)(a1 + 272);
  *(_QWORD *)(a1 + 264) = v55;
  *(_QWORD *)(a1 + 272) = v53;
  if (v64)
  {
    v65 = (unint64_t *)&v64->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  SipRegistrationClient::create((SipRegistrationClient *)a1, (SipRegistrationClient **)&__p);
  v67 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v68 = *(std::__shared_weak_count **)(a1 + 256);
  *(_OWORD *)(a1 + 248) = v67;
  if (v68)
  {
    v69 = (unint64_t *)&v68->__shared_owners_;
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v72 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v73 = __ldaxr(v72);
    while (__stlxr(v73 - 1, v72));
    if (!v73)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v74 = (SipAuthClient *)operator new();
  SipAuthClient::SipAuthClient(v74, (SipUserAgent *)a1);
  *(_QWORD *)(a1 + 280) = v74;
  *(_QWORD *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "100rel");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(a1 + 152), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "path");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(a1 + 152), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::string::basic_string[abi:ne180100]<0>(&__p, "replaces");
  std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>((uint64_t **)(a1 + 152), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v75 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v75)
  {
    v77 = 0;
    goto LABEL_110;
  }
  v76 = std::__shared_weak_count::lock(v75);
  v77 = v76;
  if (!v76)
  {
LABEL_110:
    v78 = 0;
    v81 = 1;
    goto LABEL_111;
  }
  v78 = *(_QWORD *)(a1 + 8);
  v79 = (unint64_t *)&v76->__shared_weak_owners_;
  do
    v80 = __ldxr(v79);
  while (__stxr(v80 + 1, v79));
  v81 = 0;
LABEL_111:
  v82 = *(std::__shared_weak_count **)(a1 + 472);
  *(_QWORD *)(a1 + 464) = v78;
  *(_QWORD *)(a1 + 472) = v77;
  if (v82)
    std::__shared_weak_count::__release_weak(v82);
  if ((v81 & 1) == 0)
  {
    v83 = (unint64_t *)&v77->__shared_owners_;
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
      std::__shared_weak_count::__release_weak(v77);
    }
  }
  return a1;
}

void sub_1BEEDC418(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, SipMessageEncodingMap *a11, uint64_t a12, uint64_t a13, ImsLogContainer *a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  _QWORD *v27;
  std::__shared_weak_count *v29;

  if (a27 < 0)
    operator delete(__p);
  *v27 = &off_1E78C16F0;
  v29 = (std::__shared_weak_count *)v27[2];
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(exception_object);
}

_QWORD *SipStackLayer::SipStackLayer(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  std::__shared_weak_count *v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78C16F0;
  v3 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    v7 = (std::__shared_weak_count *)a1[2];
    a1[1] = v3;
    a1[2] = v4;
    if (v7)
      std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    a1[1] = v3;
    a1[2] = 0;
  }
  return a1;
}

void SipUserAgent::~SipUserAgent(SipUserAgent *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;

  *(_QWORD *)this = &off_1E78C1448;
  *((_QWORD *)this + 3) = &unk_1E78C1470;
  v2 = (_QWORD *)((char *)this + 136);
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 17));
  *((_QWORD *)this + 16) = v2;
  *((_QWORD *)this + 18) = 0;
  *v2 = 0;
  v3 = *((_QWORD *)this + 35);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 68);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 73);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  SipUserAgent::clearAssociatedUris(this);
  ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator((_QWORD *)this + 74);
  if (*((char *)this + 583) < 0)
    operator delete(*((void **)this + 70));
  SipRouteSet::~SipRouteSet((SipUserAgent *)((char *)this + 480));
  SipMessageEncodingMap::~SipMessageEncodingMap((std::__shared_weak_count **)this + 36);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 264);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 248);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 232);
  std::unique_ptr<LazuliMessageEncodingMap>::reset[abi:ne180100]((uint64_t *)this + 28, 0);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 192);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  std::__tree<std::string>::destroy((uint64_t)this + 152, *((char **)this + 20));
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*((char **)this + 17));
  *((_QWORD *)this + 3) = off_1E78CFE68;
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  *(_QWORD *)this = &off_1E78C16F0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
}

{
  SipUserAgent::~SipUserAgent(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipUserAgent::clearAssociatedUris(SipUserAgent *this)
{
  uint64_t v2;
  uint64_t result;

  SipRouteSet::clear((_QWORD *)this + 60);
  v2 = *((_QWORD *)this + 67);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *((_QWORD *)this + 67) = 0;
  result = *((_QWORD *)this + 69);
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 69) = 0;
  return result;
}

void `non-virtual thunk to'SipUserAgent::~SipUserAgent(SipUserAgent *this)
{
  SipUserAgent::~SipUserAgent((SipUserAgent *)((char *)this - 24));
}

{
  SipUserAgent::~SipUserAgent((SipUserAgent *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void SipUserAgent::deinitialize(SipUserAgent *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  unint64_t v16;
  BOOL v17;
  _QWORD *v18;
  uint64_t *v19;
  _QWORD *v20;
  unint64_t v21;
  BOOL v22;
  _QWORD *v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;

  v33 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2 && (v33 = std::__shared_weak_count::lock(v2)) != 0)
    v3 = *((_QWORD *)this + 1);
  else
    v3 = 0;
  SipUserAgent::clearAssociatedUris(this);
  SipDialogManager::deinitialize(*((SipDialogManager **)this + 22));
  SipMessageManager::deinitialize(*((SipMessageManager **)this + 24));
  if (v3 && *(_BYTE *)(v3 + 2657))
    SipLazuliManager::deinitialize(*((SipLazuliManager **)this + 26));
  v4 = (_QWORD *)*((_QWORD *)this + 29);
  SipTimerContainer::cancelAllTimers((SipTimerContainer *)(v4 + 26));
  v5 = (_QWORD *)v4[24];
  v4 += 24;
  std::__tree<std::__value_type<std::string,ResendOptionsInfo>,std::__map_value_compare<std::string,std::__value_type<std::string,ResendOptionsInfo>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,ResendOptionsInfo>>>::destroy((uint64_t)(v4 - 1), v5);
  *(v4 - 1) = v4;
  *v4 = 0;
  v4[1] = 0;
  if (v3 && *(_BYTE *)(v3 + 1124))
  {
    v6 = (_QWORD *)*((_QWORD *)this + 31);
    v7 = *((_QWORD *)this + 33);
    v8 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
    v9 = v7 + 104;
    if (!v7)
      v9 = 0;
    if (v8)
    {
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    if (v7)
    {
      v13 = v6 + 21;
      v12 = (uint64_t *)v6[21];
      if (v12)
      {
        v14 = v6 + 21;
        v15 = (_QWORD *)v6[21];
        do
        {
          v16 = v15[4];
          v17 = v16 >= v9;
          if (v16 >= v9)
            v18 = v15;
          else
            v18 = v15 + 1;
          if (v17)
            v14 = v15;
          v15 = (_QWORD *)*v18;
        }
        while (*v18);
        if (v14 != v13 && v14[4] <= v9)
        {
          v19 = v6 + 21;
          v20 = (_QWORD *)v6[21];
          do
          {
            v21 = v20[4];
            v22 = v21 >= v9;
            if (v21 >= v9)
              v23 = v20;
            else
              v23 = v20 + 1;
            if (v22)
              v19 = v20;
            v20 = (_QWORD *)*v23;
          }
          while (*v23);
          if (v19 != v13 && v19[4] <= v9)
          {
            v24 = (uint64_t *)v19[1];
            if (v24)
            {
              do
              {
                v25 = v24;
                v24 = (uint64_t *)*v24;
              }
              while (v24);
            }
            else
            {
              v26 = v19;
              do
              {
                v25 = (uint64_t *)v26[2];
                v27 = *v25 == (_QWORD)v26;
                v26 = v25;
              }
              while (!v27);
            }
            if ((uint64_t *)v6[20] == v19)
              v6[20] = v25;
            --v6[22];
            std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v12, v19);
            std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v19 + 4));
            operator delete(v19);
          }
        }
      }
    }
    if (v8)
    {
      v28 = (unint64_t *)&v8->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  SipRegistrationClient::deinitialize(*((SipRegistrationClient **)this + 31));
  SipAuthClient::clear(*((SipAuthClient **)this + 35));
  v30 = *((_QWORD *)this + 73);
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  *((_QWORD *)this + 73) = 0;
  if (v33)
  {
    v31 = (unint64_t *)&v33->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BEEDCA50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipUserAgent::initialize(SipUserAgent *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t **v15;
  uint64_t **v16;
  _QWORD *v17;
  unint64_t v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t **v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  SipStack *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  std::__shared_weak_count_vtbl *v41;
  std::__shared_weak_count *shared_owners;
  unint64_t v43;
  unint64_t *p_shared_weak_owners;
  unint64_t v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  LazuliMessageEncodingMap *v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  const ImsPrefs *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  SipStack *v65;
  std::__shared_weak_count *v66;
  SipStack *v67;
  std::__shared_weak_count *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  SipStack *v71;
  std::__shared_weak_count *v72;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v72 = v3;
    if (v3)
    {
      v4 = *((_QWORD *)this + 1);
      v71 = (SipStack *)v4;
      if (!v4)
      {
        v23 = v3;
LABEL_82:
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v64 = __ldaxr(p_shared_owners);
        while (__stlxr(v64 - 1, p_shared_owners));
        if (!v64)
        {
          ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
          std::__shared_weak_count::__release_weak(v23);
        }
        return;
      }
      v5 = v4 + 720;
      if (!SipTimers::isValid((SipTimers *)(v4 + 720)))
      {
        v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 56))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"invalid timer values ", 21);
        *(_BYTE *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v4 + 720, v6);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)".  Using default values.", 24);
        *(_BYTE *)(v6 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v6 + 17) = 0;
        SipTimers::resetDefaults((char **)(v4 + 720));
      }
      v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v7);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"using SIP timers ", 17);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v4 + 720, v7);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      SipRegistrationClient::initialize(*((SipRegistrationClient **)this + 31));
      if (*(_BYTE *)(v4 + 1124))
      {
        v8 = *((_QWORD *)this + 31);
        v9 = *((_QWORD *)this + 33);
        v10 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
        if (v9)
          v11 = v9 + 104;
        else
          v11 = 0;
        v69 = v11;
        v70 = v10;
        if (v10)
        {
          v12 = (unint64_t *)&v10->__shared_owners_;
          do
            v13 = __ldxr(v12);
          while (__stxr(v13 + 1, v12));
        }
        if (v9)
        {
          v15 = (uint64_t **)(v8 + 168);
          v14 = *(uint64_t **)(v8 + 168);
          if (v14)
          {
            v16 = (uint64_t **)(v8 + 168);
            v17 = *(_QWORD **)(v8 + 168);
            do
            {
              v18 = v17[4];
              v19 = v18 >= v11;
              if (v18 >= v11)
                v20 = v17;
              else
                v20 = v17 + 1;
              if (v19)
                v16 = (uint64_t **)v17;
              v17 = (_QWORD *)*v20;
            }
            while (*v20);
            if (v16 == v15 || (unint64_t)v16[4] > v11)
            {
              while (1)
              {
                while (1)
                {
                  v21 = (uint64_t **)v14;
                  v22 = v14[4];
                  if (v22 <= v11)
                    break;
                  v14 = *v21;
                  v15 = v21;
                  if (!*v21)
                    goto LABEL_33;
                }
                if (v22 >= v11)
                  break;
                v14 = v21[1];
                if (!v14)
                {
                  v15 = v21 + 1;
                  goto LABEL_33;
                }
              }
            }
          }
          else
          {
            v21 = (uint64_t **)(v8 + 168);
LABEL_33:
            v24 = (uint64_t *)operator new(0x30uLL);
            v25 = v24;
            v24[4] = v11;
            v24[5] = (uint64_t)v10;
            if (v10)
            {
              v26 = (unint64_t *)&v10->__shared_owners_;
              do
                v27 = __ldxr(v26);
              while (__stxr(v27 + 1, v26));
            }
            *v24 = 0;
            v24[1] = 0;
            v24[2] = (uint64_t)v21;
            *v15 = v24;
            v28 = **(_QWORD **)(v8 + 160);
            if (v28)
            {
              *(_QWORD *)(v8 + 160) = v28;
              v25 = *v15;
            }
            std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v8 + 168), v25);
            ++*(_QWORD *)(v8 + 176);
            v10 = v70;
          }
        }
        if (v10)
        {
          v29 = (unint64_t *)&v10->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      v31 = *((_QWORD *)this + 24);
      v67 = v71;
      v68 = v72;
      if (v72)
      {
        v32 = (unint64_t *)&v72->__shared_owners_;
        do
          v33 = __ldxr(v32);
        while (__stxr(v33 + 1, v32));
      }
      SipMessageManager::initialize(v31, &v67);
      v34 = v68;
      if (v68)
      {
        v35 = (unint64_t *)&v68->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = v71;
      if (!*((_BYTE *)v71 + 2657))
      {
LABEL_81:
        v59 = *((_QWORD *)this + 35);
        v60 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v59 + 104) + 24))(*(_QWORD *)(v59 + 104));
        v61 = SipUserAgent::config(*(SipUserAgent **)(v59 + 112));
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 112))(v60, v61 + 1320);
        *((_BYTE *)this + 416) = *(_BYTE *)(v4 + 753);
        v62 = (const ImsPrefs *)SipStack::prefs(v71);
        SipMessageEncodingMap::initializeFromPrefs((SipUserAgent *)((char *)this + 288), v62);
        v23 = v72;
        if (!v72)
          return;
        goto LABEL_82;
      }
      v38 = *((_QWORD *)this + 26);
      if (v38)
      {
LABEL_73:
        v65 = v37;
        v66 = v72;
        if (v72)
        {
          v54 = (unint64_t *)&v72->__shared_owners_;
          do
            v55 = __ldxr(v54);
          while (__stxr(v55 + 1, v54));
        }
        SipLazuliManager::initialize(v38, &v65);
        v56 = v66;
        if (v66)
        {
          v57 = (unint64_t *)&v66->__shared_owners_;
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
        goto LABEL_81;
      }
      v39 = (std::__shared_weak_count *)operator new(0x2F0uLL);
      v39->__shared_owners_ = 0;
      v40 = (unint64_t *)&v39->__shared_owners_;
      v39->__shared_weak_owners_ = 0;
      v39->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1648;
      v41 = (std::__shared_weak_count_vtbl *)&v39[1];
      SipLazuliManager::SipLazuliManager((SipLazuliManager *)&v39[1], this);
      shared_owners = (std::__shared_weak_count *)v39[7].__shared_owners_;
      if (shared_owners)
      {
        if (shared_owners->__shared_owners_ != -1)
        {
LABEL_67:
          v50 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
          *((_QWORD *)this + 26) = v41;
          *((_QWORD *)this + 27) = v39;
          if (v50)
          {
            v51 = (unint64_t *)&v50->__shared_owners_;
            do
              v52 = __ldaxr(v51);
            while (__stlxr(v52 - 1, v51));
            if (!v52)
            {
              ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
              std::__shared_weak_count::__release_weak(v50);
            }
          }
          v53 = (LazuliMessageEncodingMap *)operator new();
          LazuliMessageEncodingMap::LazuliMessageEncodingMap(v53);
          std::unique_ptr<LazuliMessageEncodingMap>::reset[abi:ne180100]((uint64_t *)this + 28, (uint64_t)v53);
          v38 = *((_QWORD *)this + 26);
          v37 = v71;
          goto LABEL_73;
        }
        do
          v43 = __ldxr(v40);
        while (__stxr(v43 + 1, v40));
        p_shared_weak_owners = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v45 = __ldxr(p_shared_weak_owners);
        while (__stxr(v45 + 1, p_shared_weak_owners));
        v39[7].__vftable = v41;
        v39[7].__shared_owners_ = (uint64_t)v39;
        std::__shared_weak_count::__release_weak(shared_owners);
      }
      else
      {
        do
          v46 = __ldxr(v40);
        while (__stxr(v46 + 1, v40));
        v47 = (unint64_t *)&v39->__shared_weak_owners_;
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
        v39[7].__vftable = v41;
        v39[7].__shared_owners_ = (uint64_t)v39;
      }
      do
        v49 = __ldaxr(v40);
      while (__stlxr(v49 - 1, v40));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
        std::__shared_weak_count::__release_weak(v39);
      }
      goto LABEL_67;
    }
  }
}

void sub_1BEEDCFD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  MEMORY[0x1C3B87100](v7, 0x10A0C40E475C269);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipUserAgent::logPrefix(SipUserAgent *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  v11 = 0;
  v12 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_8;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v12 = v5;
  if (!v5 || (v6 = *((_QWORD *)this + 1), (v11 = v6) == 0))
  {
LABEL_8:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"UserAgent: ", 11);
    *((_BYTE *)a2 + 17) = 0;
    if (!v5)
      return;
    goto LABEL_9;
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 104))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  if (v10 < 0)
    operator delete(__p[0]);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" [UserAgent]: ", 14);
  *((_BYTE *)a2 + 17) = 0;
LABEL_9:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEEDD144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipUserAgent::logPrefix(SipUserAgent *this, ImsOutStream *a2)
{
  SipUserAgent::logPrefix((SipUserAgent *)((char *)this - 24), a2);
}

void SipUserAgent::setThumperEnabled(SipUserAgent *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  SipDialogEventPackage **v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  *((_BYTE *)this + 608) = a2;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v16 = v5;
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 1);
      if (!v7 || !*(_BYTE *)(v7 + 1124))
        goto LABEL_14;
      v8 = (SipDialogEventPackage **)*((_QWORD *)this + 33);
      v9 = (std::__shared_weak_count *)*((_QWORD *)this + 34);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
      }
      SipDialogEventClient::setThumperEnabled(v8, a2);
      if (v9)
      {
        v12 = (unint64_t *)&v9->__shared_owners_;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v6 = v16;
      if (v16)
      {
LABEL_14:
        v14 = (unint64_t *)&v6->__shared_owners_;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

void sub_1BEEDD280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipUserAgent::handleNewServerTransaction(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void **v7;
  void **v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  char v13;
  char v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  void *__p[2];
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;

  v4 = *(_QWORD *)(*a2 + 288);
  v5 = *(_QWORD *)(a1 + 176);
  v6 = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v7 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 224, v6);
  v8 = (void **)(v5 + 232);
  if ((void **)(v5 + 232) == v7)
  {
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v18);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" requests aren't supported in dialogs. Seeing if we have an appropriate delegate.", 81);
    *(_BYTE *)(v18 + 17) = 0;
    v19 = (_BYTE *)(v18 + 17);
  }
  else
  {
    v9 = *(_QWORD *)(a1 + 176);
    v10 = (std::__shared_weak_count *)a2[1];
    v42 = *a2;
    v43 = v10;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v42);
    v14 = v13;
    v15 = v43;
    if (!v43)
      goto LABEL_9;
    v16 = (unint64_t *)&v43->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
      if ((v14 & 1) != 0)
        return;
    }
    else
    {
LABEL_9:
      if ((v13 & 1) != 0)
        return;
    }
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"incoming ", 9);
    *(_BYTE *)(v18 + 17) = 0;
    v19 = (_BYTE *)(v18 + 17);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" didn't match an existing dialog. Seeing if we have an appropriate delegate.", 76);
    *(_BYTE *)(v18 + 17) = 0;
  }
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *v19 = 0;
  v22 = (void **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
  v23 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 128, v22);
  if ((void **)(a1 + 136) == v23 || (v24 = v23[7]) == 0)
  {
    v32 = *(_QWORD *)(a1 + 24);
    v31 = a1 + 24;
    v33 = (*(uint64_t (**)(uint64_t))(v32 + 56))(v31);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v31 + 16))(v31, v33);
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 112))(v4);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 32))(v33, v34);
    v35 = *(_QWORD **)(v33 + 8);
    if (v8 == v7)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" requests aren't supported", 26);
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v33 + 17) = 0;
      v37 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      SipServerTransaction::rejectTransactionWithStatus(v37, 501, (uint64_t)__p);
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v35, (uint64_t)" requests aren't supported outside dialogs", 42);
      *(_BYTE *)(v33 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v33 + 17) = 0;
      v36 = *a2;
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      SipServerTransaction::rejectTransactionWithStatus(v36, 481, (uint64_t)__p);
    }
    if (v39 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v25 = (std::__shared_weak_count *)a2[1];
    v40 = *a2;
    v41 = v25;
    if (v25)
    {
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    (*(void (**)(void *, uint64_t *))(*(_QWORD *)v24 + 16))(v24, &v40);
    v28 = v41;
    if (v41)
    {
      v29 = (unint64_t *)&v41->__shared_owners_;
      do
        v30 = __ldaxr(v29);
      while (__stlxr(v30 - 1, v29));
      if (!v30)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
    }
  }
}

void sub_1BEEDD650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipUserAgent::conferenceServerUri(std::__shared_weak_count **this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::string::size_type size;
  std::string::size_type v10;
  ImsPrefs *v11;
  void **UseDomainForConferenceServerKey;
  void *v13;
  std::string *v14;
  __int128 v15;
  int shared_owners_high;
  const std::string::value_type *p_shared_weak_owners;
  std::string::size_type v18;
  std::string *v19;
  __int128 v20;
  std::string *v21;
  std::string::size_type v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string v27;
  std::string v28;
  std::string v29;
  std::string v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  _QWORD v33[3];

  v33[2] = *MEMORY[0x1E0C80C00];
  v4 = SipUserAgent::config((SipUserAgent *)this);
  v5 = *(unsigned __int8 *)(v4 + 175);
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(v4 + 160);
  if (v5)
  {
    v6 = SipUserAgent::config((SipUserAgent *)this);
    SipUri::SipUri((SipUri *)a2, (const SipUri *)(v6 + 48));
    return;
  }
  v31 = 0;
  v32 = 0;
  v7 = this[2];
  if (!v7 || (v32 = std::__shared_weak_count::lock(v7)) == 0)
  {
    memset(&v30, 0, sizeof(v30));
LABEL_11:
    std::string::basic_string[abi:ne180100]<0>(&v30, "");
    size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
    if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v30.__r_.__value_.__l.__size_;
    if (size)
      goto LABEL_37;
    goto LABEL_23;
  }
  v8 = this[1];
  v31 = v8;
  memset(&v30, 0, sizeof(v30));
  if (!v8)
    goto LABEL_11;
  if (SHIBYTE(v8[159].__shared_owners_) < 0)
    std::string::__init_copy_ctor_external(&v30, (const std::string::value_type *)v8[158].__shared_weak_owners_, (std::string::size_type)v8[159].__vftable);
  else
    v30 = *(std::string *)((char *)v8 + 3808);
  v10 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v30.__r_.__value_.__l.__size_;
  if (!v10)
    goto LABEL_23;
  v11 = (ImsPrefs *)SipStack::prefs((SipStack *)v8);
  UseDomainForConferenceServerKey = (void **)ImsPrefs::getUseDomainForConferenceServerKey(v11);
  v13 = ImsPrefs::prefWithKey(v11, UseDomainForConferenceServerKey);
  if (v13)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v13 + 40))(v13) & 1) != 0)
      goto LABEL_37;
LABEL_23:
    std::operator+<char>();
    v14 = std::string::append(&v27, ".mcc", 4uLL);
    v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    shared_owners_high = SHIBYTE(v31[154].__shared_owners_);
    if (shared_owners_high >= 0)
      p_shared_weak_owners = (const std::string::value_type *)&v31[153].__shared_weak_owners_;
    else
      p_shared_weak_owners = (const std::string::value_type *)v31[153].__shared_weak_owners_;
    if (shared_owners_high >= 0)
      v18 = HIBYTE(v31[154].__shared_owners_);
    else
      v18 = (std::string::size_type)v31[154].__vftable;
    v19 = std::string::append(&v28, p_shared_weak_owners, v18);
    v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    v29.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    v21 = std::string::append(&v29, ".3gppnetwork.org", 0x10uLL);
    v22 = v21->__r_.__value_.__r.__words[0];
    v33[0] = v21->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v33 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
    v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
    v21->__r_.__value_.__l.__size_ = 0;
    v21->__r_.__value_.__r.__words[2] = 0;
    v21->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v30.__r_.__value_.__l.__data_);
    v30.__r_.__value_.__r.__words[0] = v22;
    v30.__r_.__value_.__l.__size_ = v33[0];
    *(std::string::size_type *)((char *)&v30.__r_.__value_.__r.__words[1] + 7) = *(_QWORD *)((char *)v33 + 7);
    *((_BYTE *)&v30.__r_.__value_.__s + 23) = v23;
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    goto LABEL_37;
  }
  if (!*((_BYTE *)UseDomainForConferenceServerKey + 57))
    goto LABEL_23;
LABEL_37:
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 376) = 0u;
  *(_OWORD *)(a2 + 392) = 0u;
  *(_OWORD *)(a2 + 344) = 0u;
  *(_OWORD *)(a2 + 360) = 0u;
  *(_OWORD *)(a2 + 312) = 0u;
  *(_OWORD *)(a2 + 328) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 8) = &off_1E78D08F8;
  *(_QWORD *)(a2 + 16) = 0;
  *(_WORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  *(_QWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a2 + 64) = &off_1E78B82D8;
  *(_QWORD *)(a2 + 72) = a2 + 80;
  *(_BYTE *)(a2 + 97) = 1;
  *(_QWORD *)a2 = &off_1E78BFCE8;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 264) = 0u;
  *(_OWORD *)(a2 + 280) = 0u;
  *(_OWORD *)(a2 + 296) = 0u;
  *(_QWORD *)(a2 + 312) = 0;
  *(_QWORD *)(a2 + 344) = 0;
  *(_QWORD *)(a2 + 352) = 0;
  *(_QWORD *)(a2 + 328) = &off_1E78B82D8;
  *(_QWORD *)(a2 + 336) = a2 + 344;
  *(_QWORD *)(a2 + 384) = 0;
  *(_QWORD *)(a2 + 392) = 0;
  *(_QWORD *)(a2 + 368) = &off_1E78B82D8;
  *(_QWORD *)(a2 + 376) = a2 + 384;
  *(_BYTE *)(a2 + 96) = 1;
  *(_WORD *)(a2 + 360) = 257;
  *(_WORD *)(a2 + 400) = 257;
  SipUri::fromString(a2, &v29);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  v24 = v32;
  if (v32)
  {
    p_shared_owners = (unint64_t *)&v32->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BEEDDAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  uint64_t v35;

  if (a28 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a15 < 0)
    operator delete(a10);
  if (a35 < 0)
    operator delete(a30);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v35 - 88);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::config(SipUserAgent *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 208;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 208;
  v4 = v3;
  v5 = *((_QWORD *)this + 1) + 208;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

uint64_t SipUserAgent::setAssociatedUris(SipUserAgent *this, const SipRouteSet *a2, const SipUri *a3)
{
  uint64_t v6;
  SipUri *v7;
  SipUri *v8;
  const SipUri *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;

  SipUserAgent::clearAssociatedUris(this);
  v6 = *((_QWORD *)this + 68);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  SipRouteSet::operator=((SipUserAgent *)((char *)this + 480), a2);
  if (a3)
  {
    v7 = (SipUri *)operator new();
    SipUri::SipUri(v7, a3);
    *((_QWORD *)this + 67) = v7;
    v8 = (SipUri *)operator new();
    SipUri::SipUri(v8, a3);
  }
  else
  {
    *((_QWORD *)this + 67) = 0;
    v8 = (SipUri *)operator new();
    v9 = (const SipUri *)SipUserAgent::publicUri(this);
    SipUri::SipUri(v8, v9);
  }
  v11 = *((_QWORD *)this + 3);
  v10 = (_QWORD *)((char *)this + 24);
  v10[65] = v8;
  v12 = (*(uint64_t (**)(_QWORD *))(v11 + 64))(v10);
  (*(void (**)(_QWORD *, uint64_t))(*v10 + 16))(v10, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"using public identity ", 22);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)v10[65] + 40))(v10[65], v12);
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  return result;
}

void sub_1BEEDDD28(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::publicUri(SipUserAgent *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  SipUri *v12;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v2)
  {
    v2 = std::__shared_weak_count::lock(v2);
    v3 = v2;
    if (v2)
      v2 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
  }
  else
  {
    v3 = 0;
  }
  v4 = *((_QWORD *)this + 67);
  if (v4 || (v5 = (uint64_t *)*((_QWORD *)this + 61), v5 != *((uint64_t **)this + 62)) && (v4 = *v5) != 0)
  {
LABEL_12:
    if (!v3)
      return v4;
    goto LABEL_13;
  }
  if (!v2 || !LOBYTE(v2[7].__shared_owners_) || SipStack::registered((SipStack *)v2))
  {
    v4 = *((_QWORD *)this + 31) + 1184;
    goto LABEL_12;
  }
  v10 = *((_QWORD *)this + 3);
  v9 = (char *)this + 24;
  v11 = (*(uint64_t (**)(char *))(v10 + 64))(v9);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"not emergency registered, using anonymous public URI", 52);
  *(_BYTE *)(v11 + 17) = 0;
  v12 = (SipUri *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v11 + 17) = 0;
  v4 = SipUri::anonymousUri(v12);
  if (!v3)
    return v4;
LABEL_13:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  return v4;
}

void sub_1BEEDDE88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::setPublicGruu(uint64_t a1, std::string *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(a1 + 584);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 64))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Saving pub-gruu: ", 17);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = operator new();
  result = SipUri::SipUri(v6, a2);
  *(_QWORD *)(a1 + 584) = v6;
  return result;
}

void sub_1BEEDDF74(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4064E45795);
  _Unwind_Resume(a1);
}

void SipUserAgent::publicDomain(SipUserAgent *this@<X0>, uint64_t a2@<X8>)
{
  SipUri *v4;
  uint64_t v5;
  uint64_t v6;
  SipUri **v7;
  SipUri **v8;
  SipUri *v9;
  uint64_t v10;
  uint64_t v11;
  std::string *v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v4 = (SipUri *)*((_QWORD *)this + 67);
  if (!v4 || !SipUri::isSipUri(v4))
    goto LABEL_11;
  v5 = *((_QWORD *)this + 67);
  if ((*(char *)(v5 + 39) & 0x80000000) == 0)
  {
    if (!*(_BYTE *)(v5 + 39))
      goto LABEL_7;
LABEL_10:
    SipHost::asString(v5 + 8, a2);
    goto LABEL_22;
  }
  if (*(_QWORD *)(v5 + 24))
    goto LABEL_10;
LABEL_7:
  v6 = *(_QWORD *)(v5 + 48);
  if (v6 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v6 + 88))(v6))
  {
    v5 = *((_QWORD *)this + 67);
    goto LABEL_10;
  }
LABEL_11:
  v7 = (SipUri **)*((_QWORD *)this + 61);
  v8 = (SipUri **)*((_QWORD *)this + 62);
  while (v7 != v8)
  {
    v9 = *v7;
    if (SipUri::isSipUri(*v7))
    {
      if (*((char *)v9 + 39) < 0)
      {
        if (*((_QWORD *)v9 + 3))
          goto LABEL_21;
      }
      else if (*((_BYTE *)v9 + 39))
      {
        goto LABEL_21;
      }
      v10 = *((_QWORD *)v9 + 6);
      if (v10 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v10 + 88))(v10))
      {
LABEL_21:
        SipHost::asString((uint64_t)v9 + 8, a2);
        break;
      }
    }
    ++v7;
  }
LABEL_22:
  v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *(_QWORD *)(a2 + 8);
  if (!v11)
  {
    v39 = 0;
    v37 = 0u;
    v38 = 0u;
    v35 = 0u;
    v36 = 0u;
    v33 = 0u;
    v34 = 0u;
    v31 = 0u;
    v32 = 0u;
    v29 = 0u;
    v30 = 0u;
    v27 = 0u;
    v28 = 0u;
    v25 = 0u;
    v26 = 0u;
    v23 = 0u;
    v24 = 0u;
    v21 = 0u;
    v22 = 0u;
    v19 = 0u;
    v20 = 0u;
    v17 = 0u;
    v18 = 0u;
    v15 = 0u;
    v16 = 0u;
    v12 = (std::string *)(*((_QWORD *)this + 31) + 2000);
    v14 = 0u;
    SipUri::SipUri((uint64_t)&v14, v12);
    v13 = BYTE7(v16);
    if (SBYTE7(v16) < 0)
      v13 = *((_QWORD *)&v15 + 1);
    if ((v13 || (_QWORD)v17 && (*(unsigned int (**)(_QWORD))(*(_QWORD *)v17 + 88))(v17))
      && !SipUri::isBarred((SipUri *)&v14))
    {
      SipHost::asString((uint64_t)&v14 + 8, a2);
    }
    SipUri::~SipUri((SipUri *)&v14);
  }
}

void sub_1BEEDE154(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t SipUserAgent::clearLastPreferredPublicUri(SipUserAgent *this)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t result;

  v2 = (_QWORD *)((char *)this + 24);
  v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(_QWORD *, uint64_t))(*v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Clearing lastPreferredPublicUri ", 32);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  result = v2[65];
  if (result)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  *((_QWORD *)this + 68) = 0;
  return result;
}

SipHeader *SipMessage::header<SipSupportedHeader>(SipMessage *a1)
{
  SipHeader *result;

  result = SipMessage::headerWithName(a1, "Supported", 1);
  if (result)
  return result;
}

uint64_t *SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(uint64_t *result, void **a2, void **a3)
{
  void **v4;
  uint64_t **v5;
  void **v6;
  void **v7;
  BOOL v8;

  if (a2 != a3)
  {
    v4 = a2;
    v5 = (uint64_t **)(result + 8);
    do
    {
      result = std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v5, v4 + 4, (uint64_t)(v4 + 4));
      v6 = (void **)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (void **)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (void **)v4[2];
          v8 = *v7 == v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != a3);
  }
  return result;
}

std::string *SipUserAgent::addUAHeaders(SipUserAgent *this, SipMessage *a2)
{
  SipHeader *v4;
  char *v5;
  uint64_t **v6;
  char *v7;
  SipUserAgent *v8;
  SipUserAgent *v9;
  SipUserAgent *v10;
  BOOL v11;
  uint64_t *v12;
  char *v13;
  char **v14;
  SipMessage *v15;
  SipMessage *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 *v20;
  SipMessage *v21;
  SipMessage *v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  uint64_t *v25;
  ImsPrefs *v26;
  void **AddSupportedHeaderToAllResponsesKey;
  void *v28;
  unsigned __int8 *v29;
  uint64_t v30;
  uint64_t v31;
  const char *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  unsigned __int8 *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  unsigned __int8 *v44;
  uint64_t v45;
  uint64_t v46;
  const char *v47;
  unsigned __int8 *v48;
  uint64_t v49;
  uint64_t v50;
  const char *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  const char *v55;
  SipUri *v56;
  SipUri **v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  _QWORD *v61;
  SipRouteSet *v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  const std::string *v67;
  SipHeader *v68;
  char **v70;
  char *v71;
  _QWORD *v72[2];
  __int16 v73;
  uint64_t v74;
  std::__shared_weak_count *v75;

  v4 = SipMessage::headerWithName(a2, "Allow", 1);
  if (v4)
  else
    v5 = 0;
  v7 = (char *)*((_QWORD *)v5 + 9);
  v6 = (uint64_t **)(v5 + 72);
  std::__tree<std::string>::destroy((uint64_t)(v6 - 1), v7);
  *(v6 - 1) = (uint64_t *)v6;
  *v6 = 0;
  v6[1] = 0;
  v70 = 0;
  v71 = 0;
  v72[0] = 0;
  std::set<std::string>::set[abi:ne180100]((uint64_t *)&v70, *((_QWORD *)this + 22) + 224);
  v8 = (SipUserAgent *)*((_QWORD *)this + 16);
  if (v8 != (SipUserAgent *)((char *)this + 136))
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)&v70, (void **)v8 + 4, (uint64_t)v8 + 32);
      v9 = (SipUserAgent *)*((_QWORD *)v8 + 1);
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = *(SipUserAgent **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (SipUserAgent *)*((_QWORD *)v8 + 2);
          v11 = *(_QWORD *)v10 == (_QWORD)v8;
          v8 = v10;
        }
        while (!v11);
      }
      v8 = v10;
    }
    while (v10 != (SipUserAgent *)((char *)this + 136));
  }
  v12 = (uint64_t *)v70;
  if (v70 != &v71)
  {
    do
    {
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>(v6 - 1, (void **)v12 + 4, (uint64_t)(v12 + 4));
      v13 = (char *)v12[1];
      if (v13)
      {
        do
        {
          v14 = (char **)v13;
          v13 = *(char **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (char **)v12[2];
          v11 = *v14 == (char *)v12;
          v12 = (uint64_t *)v14;
        }
        while (!v11);
      }
      v12 = (uint64_t *)v14;
    }
    while (v14 != &v71);
  }
  std::__tree<std::string>::destroy((uint64_t)&v70, v71);
  if (a2)
  {
    if (v15)
    {
      v16 = v15;
      if (*(_BYTE *)(SipUserAgent::config(this) + 688))
      {
        v17 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v18 = v17[23];
        if ((v18 & 0x80u) == 0)
          v19 = v17[23];
        else
          v19 = *((_QWORD *)v17 + 1);
        if (v19 == 3)
        {
          if ((v18 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v17, &SipRequest::kMethodBye, *((_QWORD *)v17 + 1)))
              goto LABEL_117;
          }
          else
          {
            if (!v17[23])
              goto LABEL_117;
            v20 = &SipRequest::kMethodBye;
            while (*v17 == *(unsigned __int8 *)v20)
            {
              ++v17;
              v20 = (__int128 *)((char *)v20 + 1);
              if (!--v18)
                goto LABEL_117;
            }
          }
        }
        v29 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v30 = v29[23];
        if ((v30 & 0x80u) == 0)
          v31 = v29[23];
        else
          v31 = *((_QWORD *)v29 + 1);
        if (v31 == 6)
        {
          if ((v30 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v29, "INVITE", *((_QWORD *)v29 + 1)))
              goto LABEL_117;
          }
          else
          {
            if (!v29[23])
              goto LABEL_117;
            v32 = "INVITE";
            while (*v29 == *(unsigned __int8 *)v32)
            {
              ++v29;
              ++v32;
              if (!--v30)
                goto LABEL_117;
            }
          }
        }
        v33 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v34 = v33[23];
        if ((v34 & 0x80u) == 0)
          v35 = v33[23];
        else
          v35 = *((_QWORD *)v33 + 1);
        if (v35 == 7)
        {
          if ((v34 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v33, "OPTIONS", *((_QWORD *)v33 + 1)))
              goto LABEL_117;
          }
          else
          {
            if (!v33[23])
              goto LABEL_117;
            v36 = "OPTIONS";
            while (*v33 == *(unsigned __int8 *)v36)
            {
              ++v33;
              ++v36;
              if (!--v34)
                goto LABEL_117;
            }
          }
        }
        v37 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v38 = v37[23];
        if ((v38 & 0x80u) == 0)
          v39 = v37[23];
        else
          v39 = *((_QWORD *)v37 + 1);
        if (v39 == 9)
        {
          if ((v38 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v37, "SUBSCRIBE", *((_QWORD *)v37 + 1)))
              goto LABEL_117;
          }
          else
          {
            if (!v37[23])
              goto LABEL_117;
            v40 = "SUBSCRIBE";
            while (*v37 == *(unsigned __int8 *)v40)
            {
              ++v37;
              ++v40;
              if (!--v38)
                goto LABEL_117;
            }
          }
        }
        v44 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v45 = v44[23];
        if ((v45 & 0x80u) == 0)
          v46 = v44[23];
        else
          v46 = *((_QWORD *)v44 + 1);
        if (v46 == 6)
        {
          if ((v45 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v44, "NOTIFY", *((_QWORD *)v44 + 1)))
              goto LABEL_117;
          }
          else
          {
            if (!v44[23])
              goto LABEL_117;
            v47 = "NOTIFY";
            while (*v44 == *(unsigned __int8 *)v47)
            {
              ++v44;
              ++v47;
              if (!--v45)
                goto LABEL_117;
            }
          }
        }
        v48 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v49 = v48[23];
        if ((v49 & 0x80u) == 0)
          v50 = v48[23];
        else
          v50 = *((_QWORD *)v48 + 1);
        if (v50 == 5)
        {
          if ((v49 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v48, "REFER", *((_QWORD *)v48 + 1)))
              goto LABEL_117;
          }
          else
          {
            if (!v48[23])
              goto LABEL_117;
            v51 = "REFER";
            while (*v48 == *(unsigned __int8 *)v51)
            {
              ++v48;
              ++v51;
              if (!--v49)
                goto LABEL_117;
            }
          }
        }
        v52 = (unsigned __int8 *)(*(uint64_t (**)(SipMessage *))(*(_QWORD *)v16 + 112))(v16);
        v53 = v52[23];
        if ((v53 & 0x80u) == 0)
          v54 = v52[23];
        else
          v54 = *((_QWORD *)v52 + 1);
        if (v54 != 7)
          goto LABEL_138;
        if ((v53 & 0x80) == 0)
        {
          if (v52[23])
          {
            v55 = "MESSAGE";
            while (*v52 == *(unsigned __int8 *)v55)
            {
              ++v52;
              ++v55;
              if (!--v53)
                goto LABEL_117;
            }
            goto LABEL_138;
          }
LABEL_117:
          v56 = (SipUri *)*((_QWORD *)this + 67);
          if (!v56)
          {
            v57 = (SipUri **)*((_QWORD *)this + 61);
            if (v57 == *((SipUri ***)this + 62))
              v56 = 0;
            else
              v56 = *v57;
          }
          v74 = 0;
          v75 = 0;
          v58 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
          if (v58)
          {
            v59 = std::__shared_weak_count::lock(v58);
            v75 = v59;
            if (v59)
            {
              v60 = *((_QWORD *)this + 1);
              v74 = v60;
              if (v60)
              {
                if (*(_BYTE *)(v60 + 176))
                {
                  if (v56 && !SipUri::isAnonymousUri(v56))
                    goto LABEL_130;
                  v56 = (SipUri *)*((_QWORD *)this + 69);
                }
              }
            }
          }
          else
          {
            v59 = 0;
          }
          if (!v56)
          {
LABEL_133:
            if (v59)
            {
              p_shared_owners = (unint64_t *)&v59->__shared_owners_;
              do
                v64 = __ldaxr(p_shared_owners);
              while (__stlxr(v64 - 1, p_shared_owners));
              if (!v64)
              {
                ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
                std::__shared_weak_count::__release_weak(v59);
              }
            }
            goto LABEL_138;
          }
LABEL_130:
          v61 = SipMessage::headerWithName(v16, "P-Preferred-Identity", 1);
          if (v61)
          v62 = (SipRouteSet *)(v61 + 8);
          SipRouteSet::clear(v61 + 8);
          v72[0] = 0;
          v72[1] = 0;
          v70 = (char **)&off_1E78B82D8;
          v71 = (char *)v72;
          v73 = 256;
          SipRouteSet::addHop(v62, v56, 0, 0, (const SipParameterMap *)&v70);
          v70 = (char **)&off_1E78B82D8;
          std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v71, v72[0]);
          v59 = v75;
          goto LABEL_133;
        }
        if (!memcmp(*(const void **)v52, "MESSAGE", *((_QWORD *)v52 + 1)))
          goto LABEL_117;
      }
LABEL_138:
      v65 = SipUserAgent::config(this);
      SipMessage::addHeader(v16, (uint64_t)"Max-Forwards", *(_DWORD *)(v65 + 796), 0);
      v66 = (uint64_t *)SipMessage::header<SipSupportedHeader>(v16);
      SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v66, *((void ***)this + 19), (void **)this + 20);
      goto LABEL_139;
    }
    if (v21)
    {
      v22 = v21;
      v70 = 0;
      v71 = 0;
      v23 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
      if (v23)
      {
        v23 = std::__shared_weak_count::lock(v23);
        v24 = v23;
        v71 = (char *)v23;
        if (v23)
        {
          v23 = (std::__shared_weak_count *)*((_QWORD *)this + 1);
          v70 = (char **)v23;
        }
      }
      else
      {
        v24 = 0;
      }
      if ((*((_DWORD *)v22 + 22) - 200) < 0x64)
        goto LABEL_37;
      if (v23)
      {
        v26 = (ImsPrefs *)SipStack::prefs((SipStack *)v23);
        AddSupportedHeaderToAllResponsesKey = (void **)ImsPrefs::getAddSupportedHeaderToAllResponsesKey(v26);
        v28 = ImsPrefs::prefWithKey(v26, AddSupportedHeaderToAllResponsesKey);
        if (v28)
        {
          if (!(*(unsigned int (**)(void *))(*(_QWORD *)v28 + 40))(v28))
            goto LABEL_76;
        }
        else if (!*((_BYTE *)AddSupportedHeaderToAllResponsesKey + 57))
        {
          goto LABEL_76;
        }
LABEL_37:
        v25 = (uint64_t *)SipMessage::header<SipSupportedHeader>(v22);
        SipMultiStringHeader::addValues<std::__tree_const_iterator<std::string,std::__tree_node<std::string,void *> *,long>>(v25, *((void ***)this + 19), (void **)this + 20);
LABEL_78:
        if (v24)
        {
          v42 = (unint64_t *)&v24->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
            std::__shared_weak_count::__release_weak(v24);
          }
        }
        goto LABEL_139;
      }
LABEL_76:
      if (SipMessage::firstHeaderWithName(v22, (uint64_t)"Supported", 0))
      {
        v41 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v41);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)"stripping Supported header from ", 32);
        *(_BYTE *)(v41 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v41 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v41 + 8), (uint64_t)" response", 9);
        *(_BYTE *)(v41 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v41 + 17) = 0;
        SipMessage::removeHeadersWithName(v22, "Supported");
      }
      goto LABEL_78;
    }
  }
LABEL_139:
  v67 = (const std::string *)(SipUserAgent::config(this) + 664);
  v68 = SipMessage::header<SipUserAgentHeader>(a2, 1);
  return std::string::operator=((std::string *)((char *)v68 + 64), v67);
}

void sub_1BEEDEAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  va_list va;

  va_start(va, a7);
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy(v7, a5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipUserAgent::transportLayer(SipUserAgent *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *((_QWORD *)this + 1);
    if (v7)
    {
      v9 = *(_QWORD *)(v7 + 160);
      v8 = *(_QWORD *)(v7 + 168);
      *a2 = v9;
      a2[1] = v8;
      if (v8)
      {
        v10 = (unint64_t *)(v8 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

uint64_t SipUserAgent::transactionLayer(SipUserAgent *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  if (v5)
    v6 = *(_QWORD *)(v5 + 152);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void SipUserAgent::makeSipInstance(SipUserAgent *a1@<X0>, uint64_t a2@<X1>, ImsResult *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const ImsResult *v12;
  _BYTE v13[72];
  void (**v14)(ImsResult *__hidden);
  uint64_t *v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  uint64_t *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  void (**v37)(SipParameterMap *__hidden);
  _QWORD *v38;
  _QWORD v39[5];
  uint64_t v40;
  __int128 v41;

  v6 = SipUserAgent::config(a1);
  v7 = *(unsigned __int8 *)(v6 + 487);
  if ((v7 & 0x80u) != 0)
    v7 = *(_QWORD *)(v6 + 472);
  if (v7)
  {
    v41 = 0u;
    v39[2] = 257;
    v36 = 0u;
    v22 = 0u;
    v18 = 0u;
    *(_QWORD *)&v19 = 0;
    v17 = 0uLL;
    v15 = (uint64_t *)&off_1E78D08F8;
    v16 = 0;
    LOWORD(v18) = 0;
    v21 = 0;
    *(_QWORD *)&v22 = 0;
    *((_QWORD *)&v19 + 1) = &off_1E78B82D8;
    v20 = &v21;
    v14 = &off_1E78BFCE8;
    v33 = 0u;
    v34 = 0u;
    v35 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0u;
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    *(_QWORD *)&v36 = 0;
    v39[0] = 0;
    v39[1] = 0;
    v37 = &off_1E78B82D8;
    v38 = v39;
    v40 = 0;
    *(_QWORD *)&v41 = 0;
    v39[3] = &off_1E78B82D8;
    v39[4] = &v40;
    WORD4(v22) = 257;
    WORD4(v41) = 257;
    *((_QWORD *)a3 + 6) = 0;
    *((_QWORD *)a3 + 7) = 0;
    *((_QWORD *)a3 + 8) = 0;
    *(_QWORD *)a3 = &off_1E78B7238;
    *((_QWORD *)a3 + 1) = &_bambiDomain;
    *((_QWORD *)a3 + 2) = 0;
    *((_QWORD *)a3 + 3) = 0;
    *((_QWORD *)a3 + 4) = 0;
    *((_QWORD *)a3 + 5) = 0;
    if (*(_BYTE *)(SipUserAgent::config(a1) + 456))
    {
      v8 = SipUserAgent::config(a1);
      v9 = SipUserAgent::config(a1);
      v10 = SipUserAgent::config(a1);
      ims::makeUrnFromImei(v8 + 464, v9 + 488, *(unsigned __int8 *)(v10 + 856), (uint64_t)&v14, (uint64_t)v13);
    }
    else
    {
      v11 = SipUserAgent::config(a1);
      ims::makeUrnFromUuid(v11 + 464, (uint64_t)&v14, (uint64_t)v13);
    }
    ImsResult::operator=((uint64_t)a3, (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)a3 + 1) + 24))(*((_QWORD *)a3 + 1), *((unsigned int *)a3 + 4)) & 1) == 0)SipUri::asString((uint64_t)&v14, a2, 0);
    SipUri::~SipUri((SipUri *)&v14);
  }
  else
  {
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    v17 = 0u;
    v18 = 0u;
    v19 = 0u;
    v14 = &off_1E78B7238;
    v15 = &_bambiDomain;
    LODWORD(v16) = 1073741825;
    v12 = (const ImsResult *)ImsResult::operator<<<char [12]>((uint64_t)&v14, "no deviceId");
    ImsResult::ImsResult(a3, v12);
    ImsResult::~ImsResult((ImsResult *)&v14);
  }
}

void sub_1BEEDEEF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  ImsResult *v18;

  ImsResult::~ImsResult((ImsResult *)&a9);
  ImsResult::~ImsResult(v18);
  SipUri::~SipUri((SipUri *)&a18);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::isEmergencyInvite(uint64_t a1, unsigned __int8 *a2, int a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  const char *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  _BOOL4 v22;
  unint64_t *p_shared_owners;
  unint64_t v24;

  v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v4)
    return 0;
  v7 = std::__shared_weak_count::lock(v4);
  if (!v7)
    return 0;
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 && *(_BYTE *)(v9 + 176))
  {
    v10 = a2[23];
    if ((v10 & 0x80u) == 0)
      v11 = a2[23];
    else
      v11 = *((_QWORD *)a2 + 1);
    if (v11 == 6)
    {
      if ((v10 & 0x80) != 0)
      {
        v22 = memcmp(*(const void **)a2, "INVITE", *((_QWORD *)a2 + 1)) == 0;
      }
      else
      {
        if (a2[23])
        {
          v12 = v10 - 1;
          v13 = "INVITE";
          do
          {
            v15 = *a2++;
            v14 = v15;
            v17 = *(unsigned __int8 *)v13++;
            v16 = v17;
            v19 = v12-- != 0;
          }
          while (v14 == v16 && v19);
          if (a3)
            v20 = 0;
          else
            v20 = v14 == v16;
          v21 = v20;
          goto LABEL_31;
        }
        v22 = 1;
      }
    }
    else
    {
      v22 = 0;
    }
    if (a3)
      v21 = 0;
    else
      v21 = v22;
  }
  else
  {
    v21 = 0;
  }
LABEL_31:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v24 = __ldaxr(p_shared_owners);
  while (__stlxr(v24 - 1, p_shared_owners));
  if (!v24)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
  return v21;
}

BOOL SipUserAgent::shouldAddSipInstanceForNetwork(SipUserAgent *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL8 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (!v2)
    return 1;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 1;
  v4 = v3;
  v5 = *((_QWORD *)this + 1);
  v6 = !v5
    || !ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v5 + 3136))
    || *(_BYTE *)(SipUserAgent::config(this) + 615) != 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_1BEEDF10C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipUserAgent::fillContactForServicesAndMethod(SipUserAgent *a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, unsigned __int8 *a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  std::__shared_weak_count *v8;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  SipStack *v25;
  _BOOL4 isWifi;
  int v27;
  uint64_t v28;
  int v29;
  std::string::size_type size;
  uint64_t v31;
  SipStack *v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  ImsPrefs *v40;
  void **AdditionalFeatureTagsKey;
  const void *v42;
  const void *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  SipStack *v47;
  int isEmergencyInvite;
  unint64_t *v49;
  unint64_t v50;
  ImsPrefs *v51;
  const ImsPrefsKeyEnum *EmergencyPreferredIdentityKey;
  char v53;
  void **v54;
  int v55;
  void *v56;
  std::string *p_str;
  int v58;
  std::string::size_type v59;
  SipUri *v60;
  uint64_t v61;
  uint64_t v62;
  const char *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  std::string::size_type v67;
  ImsPrefs *v68;
  void **AddEmergencyContactParamInInviteKey;
  void *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  unsigned __int8 *v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t v82;
  const char *v83;
  unsigned __int8 *v84;
  BOOL v85;
  ImsPrefs *v86;
  void **AlwaysAddSipInstanceToSubscribeRequestKey;
  void *v88;
  SipStack *v89;
  std::string v90;
  std::string v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  __int128 v95;
  uint64_t v96;
  _QWORD *v97;
  std::__shared_weak_count *v98;
  void *v99[2];
  char v100;
  void *__p[2];
  __int128 v102;
  __int128 v103;
  __int128 v104;
  uint64_t v105;
  std::string __str;
  void **v107;

  v97 = 0;
  v98 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
  if (!v8)
    goto LABEL_30;
  v98 = std::__shared_weak_count::lock(v8);
  if (!v98)
    goto LABEL_30;
  v13 = *((_QWORD *)a1 + 1);
  v97 = (_QWORD *)v13;
  if (!v13)
    goto LABEL_30;
  v15 = *(_QWORD *)(v13 + 160);
  v14 = *(std::__shared_weak_count **)(v13 + 168);
  if (!v14)
    goto LABEL_9;
  p_shared_owners = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldxr(p_shared_owners);
  while (__stxr(v17 + 1, p_shared_owners));
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (v18)
  {
LABEL_9:
    if (v15)
      goto LABEL_10;
LABEL_30:
    v35 = *((_QWORD *)a1 + 3);
    v34 = (_QWORD *)((char *)a1 + 24);
    v36 = (*(uint64_t (**)(_QWORD *))(v35 + 48))(v34);
    (*(void (**)(_QWORD *, uint64_t))(*v34 + 16))(v34, v36);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"fillContactForServicesAndMethod: no stack or transport layer available", 70);
    *(_BYTE *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v36 + 17) = 0;
    *(_OWORD *)(a6 + 24) = 0u;
    *(_OWORD *)(a6 + 40) = 0u;
    *(_OWORD *)(a6 + 56) = 0u;
    *(_QWORD *)a6 = &off_1E78B7238;
    *(_QWORD *)(a6 + 8) = &_bambiDomain;
    *(_DWORD *)(a6 + 16) = 1073741826;
    goto LABEL_31;
  }
  ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
  std::__shared_weak_count::__release_weak(v14);
  if (!v15)
    goto LABEL_30;
LABEL_10:
  v96 = 0;
  v94 = 0u;
  v95 = 0u;
  v92 = 0u;
  v93 = 0u;
  v19 = (void *)v97[20];
  v20 = (std::__shared_weak_count *)v97[21];
  __p[0] = v19;
  __p[1] = v20;
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  SipTransportLayer::fillContactHost((SipTransportLayer *)v19, (SipUri *)(a2 + 8), (uint64_t)&v92);
  if (v20)
  {
    v23 = (unint64_t *)&v20->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v92 + 1) + 24))(*((_QWORD *)&v92 + 1), v93))
  {
    v25 = (SipStack *)v97;
    isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v97 + 392));
    v89 = v25;
    v27 = *((unsigned __int8 *)v25 + 176);
    LODWORD(v25) = *(unsigned __int8 *)(SipUserAgent::config(a1) + 456);
    memset(&v91, 0, sizeof(v91));
    v28 = SipUserAgent::config(a1);
    if ((_DWORD)v25)
      v29 = 1;
    else
      v29 = 2;
    SipHeaderTemplateMap::matchingHeaderTemplate(v28 + 1160, (const void **)a4, a5, isWifi, v27 != 0, v29, a3, &v91);
    size = HIBYTE(v91.__r_.__value_.__r.__words[2]);
    if ((v91.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = v91.__r_.__value_.__l.__size_;
    if (size)
      SipParameterMap::fromString(a2 + 416, &v91, 0, 0);
    v31 = *((_QWORD *)a1 + 31);
    v32 = v89;
    if (*(_BYTE *)(v31 + 1144))
      v33 = *(_DWORD *)(v31 + 1140) | a3;
    else
      v33 = 0;
    *(_DWORD *)(a2 + 456) = v33;
    v40 = (ImsPrefs *)SipStack::prefs(v89);
    AdditionalFeatureTagsKey = (void **)ImsPrefs::getAdditionalFeatureTagsKey(v40);
    v42 = ImsPrefs::typedPrefWithKey<ImsDictPref>(v40, AdditionalFeatureTagsKey);
    if (!v42)
      v42 = AdditionalFeatureTagsKey[11];
    if (v42)
    {
      v43 = (const void *)(*(uint64_t (**)(const void *))(*(_QWORD *)v42 + 64))(v42);
      SipContactParam::setAdditionalFeatureTags((SipContactParam *)a2, v43);
    }
    memset(&v90, 0, sizeof(v90));
    v44 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
    if (!v44)
      goto LABEL_65;
    v45 = std::__shared_weak_count::lock(v44);
    __p[1] = v45;
    if (!v45)
      goto LABEL_65;
    v46 = v45;
    v47 = (SipStack *)*((_QWORD *)a1 + 1);
    __p[0] = v47;
    if (v47 && !SipStack::registered(v47))
      isEmergencyInvite = SipUserAgent::isEmergencyInvite((uint64_t)a1, a4, a5);
    else
      isEmergencyInvite = 0;
    v49 = (unint64_t *)&v46->__shared_owners_;
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (v50)
    {
      if (!isEmergencyInvite)
        goto LABEL_65;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      if ((isEmergencyInvite & 1) == 0)
      {
LABEL_65:
        v59 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
        if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v59 = v90.__r_.__value_.__l.__size_;
        if (v59)
        {
LABEL_86:
          v67 = HIBYTE(v90.__r_.__value_.__r.__words[2]);
          if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            v67 = v90.__r_.__value_.__l.__size_;
          if (v67)
          {
            std::string::basic_string[abi:ne180100]<0>(__p, "");
            SipUri::setUser(a2 + 8, &v90, (uint64_t)__p);
            if (SBYTE7(v102) < 0)
              operator delete(__p[0]);
          }
          if (*((_BYTE *)v32 + 176))
          {
            v68 = (ImsPrefs *)SipStack::prefs(v32);
            AddEmergencyContactParamInInviteKey = (void **)ImsPrefs::getAddEmergencyContactParamInInviteKey(v68);
            v70 = ImsPrefs::prefWithKey(v68, AddEmergencyContactParamInInviteKey);
            if (v70)
            {
              if (!(*(unsigned int (**)(void *))(*(_QWORD *)v70 + 40))(v70))
                goto LABEL_102;
            }
            else if (!*((_BYTE *)AddEmergencyContactParamInInviteKey + 57))
            {
              goto LABEL_102;
            }
            v71 = *((_QWORD *)a1 + 31);
            if (*(char *)(v71 + 2447) < 0)
              v72 = *(_QWORD *)(v71 + 2432);
            else
              v72 = *(unsigned __int8 *)(v71 + 2447);
            if (v72)
            {
              std::string::basic_string[abi:ne180100]<0>(__p, "");
              SipParameterMap::setParameter(a2 + 72, (__int128 *)(v71 + 2424), (const std::string *)__p);
              if (SBYTE7(v102) < 0)
                operator delete(__p[0]);
            }
          }
LABEL_102:
          if (!*((_BYTE *)v32 + 2657))
            goto LABEL_118;
          SipUri::makeCanonical((SipUri *)(a2 + 8));
          v73 = a4[23];
          v74 = (v73 & 0x80u) == 0 ? a4[23] : *((_QWORD *)a4 + 1);
          if (v74 != 8)
            goto LABEL_118;
          if ((v73 & 0x80) != 0)
          {
            if (memcmp(*(const void **)a4, "REGISTER", *((_QWORD *)a4 + 1)))
              goto LABEL_118;
          }
          else if (a4[23])
          {
            v75 = "REGISTER";
            v76 = a4;
            while (*v76 == *(unsigned __int8 *)v75)
            {
              ++v76;
              ++v75;
              if (!--v73)
                goto LABEL_114;
            }
LABEL_118:
            if (*(_BYTE *)(SipUserAgent::config(a1) + 1156))
              goto LABEL_149;
            if (*(_BYTE *)(SipUserAgent::config(a1) + 614))
            {
LABEL_120:
              memset(&__str, 0, sizeof(__str));
              v105 = 0;
              v103 = 0u;
              v104 = 0u;
              *(_OWORD *)__p = 0u;
              v102 = 0u;
              SipUserAgent::makeSipInstance(a1, (uint64_t)&__str, (ImsResult *)__p);
              if ((*(unsigned int (**)(void *, _QWORD))(*(_QWORD *)__p[1] + 24))(__p[1], v102))
              {
                v78 = *((_QWORD *)a1 + 3);
                v77 = (_QWORD *)((char *)a1 + 24);
                v79 = (*(uint64_t (**)(_QWORD *))(v78 + 56))(v77);
                (*(void (**)(_QWORD *, uint64_t))(*v77 + 16))(v77, v79);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"unable to add sip.instance to Contact: ", 39);
                *(_BYTE *)(v79 + 17) = 0;
                (*((void (**)(void **, uint64_t))__p[0] + 2))(__p, v79);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v79 + 17) = 0;
              }
              else
              {
                ims::addQuotes((uint64_t)&__str, 0);
                std::string::basic_string[abi:ne180100]<0>(v99, "+sip.instance");
                v107 = v99;
                v80 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a2 + 424), v99, (uint64_t)&std::piecewise_construct, (__int128 **)&v107);
                std::string::operator=((std::string *)(v80 + 7), &__str);
                if (v100 < 0)
                  operator delete(v99[0]);
              }
              ImsResult::~ImsResult((ImsResult *)__p);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str.__r_.__value_.__l.__data_);
              goto LABEL_149;
            }
            v81 = a4[23];
            if ((v81 & 0x80u) == 0)
              v82 = a4[23];
            else
              v82 = *((_QWORD *)a4 + 1);
            if (v82 == 8)
            {
              if ((v81 & 0x80) != 0)
              {
                v85 = memcmp(*(const void **)a4, "REGISTER", *((_QWORD *)a4 + 1)) == 0;
              }
              else
              {
                if (a4[23])
                {
                  v83 = "REGISTER";
                  v84 = a4;
                  while (*v84 == *(unsigned __int8 *)v83)
                  {
                    ++v84;
                    ++v83;
                    if (!--v81)
                      goto LABEL_135;
                  }
                  goto LABEL_139;
                }
LABEL_135:
                v85 = 1;
              }
              if (!a5 && v85)
                goto LABEL_120;
            }
LABEL_139:
            if (SipUserAgent::isEmergencyInvite((uint64_t)a1, a4, a5)
              && SipUserAgent::shouldAddSipInstanceForNetwork(a1))
            {
              goto LABEL_120;
            }
            if (std::operator==[abi:ne180100]<std::allocator<char>>(a4, "SUBSCRIBE"))
            {
              v86 = (ImsPrefs *)SipStack::prefs(v32);
              AlwaysAddSipInstanceToSubscribeRequestKey = (void **)ImsPrefs::getAlwaysAddSipInstanceToSubscribeRequestKey(v86);
              v88 = ImsPrefs::prefWithKey(v86, AlwaysAddSipInstanceToSubscribeRequestKey);
              if (v88)
              {
                if ((*(unsigned int (**)(void *))(*(_QWORD *)v88 + 40))(v88))
                  goto LABEL_120;
              }
              else if (*((_BYTE *)AlwaysAddSipInstanceToSubscribeRequestKey + 57))
              {
                goto LABEL_120;
              }
            }
LABEL_149:
            *(_OWORD *)(a6 + 24) = 0u;
            *(_OWORD *)(a6 + 40) = 0u;
            *(_OWORD *)(a6 + 56) = 0u;
            *(_QWORD *)a6 = &off_1E78B7238;
            *(_QWORD *)(a6 + 8) = &_bambiDomain;
            *(_DWORD *)(a6 + 16) = 0;
            if (SHIBYTE(v90.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v90.__r_.__value_.__l.__data_);
            if (SHIBYTE(v91.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v91.__r_.__value_.__l.__data_);
            goto LABEL_153;
          }
LABEL_114:
          __p[0] = 0;
          __p[1] = 0;
          *(_QWORD *)&v102 = 0;
          std::string::basic_string[abi:ne180100]<0>(__p, "none");
          ims::addQuotes((uint64_t)__p, 0);
          std::string::basic_string[abi:ne180100]<0>(&__str, "+g.gsma.rcs.telephony");
          SipParameterMap::setParameter(a2 + 416, (__int128 *)&__str, (const std::string *)__p);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SBYTE7(v102) < 0)
            operator delete(__p[0]);
          goto LABEL_118;
        }
        v60 = (SipUri *)*((_QWORD *)a1 + 73);
        if (v60 && SipUri::isSipUri(v60))
        {
          v61 = a4[23];
          v62 = (v61 & 0x80u) == 0 ? a4[23] : *((_QWORD *)a4 + 1);
          if (v62 != 8)
            goto LABEL_84;
          if ((v61 & 0x80) == 0)
          {
            if (a4[23])
            {
              v63 = "REGISTER";
              v64 = a4;
              while (*v64 == *(unsigned __int8 *)v63)
              {
                ++v64;
                ++v63;
                if (!--v61)
                  goto LABEL_85;
              }
              goto LABEL_84;
            }
            goto LABEL_85;
          }
          if (memcmp(*(const void **)a4, "REGISTER", *((_QWORD *)a4 + 1)))
          {
LABEL_84:
            SipUri::operator=((SipUri *)(a2 + 8), *((_QWORD *)a1 + 73));
            goto LABEL_86;
          }
        }
LABEL_85:
        std::string::operator=(&v90, (const std::string *)(*((_QWORD *)a1 + 31) + 2024));
        goto LABEL_86;
      }
    }
    v51 = (ImsPrefs *)SipStack::prefs(v89);
    EmergencyPreferredIdentityKey = (const ImsPrefsKeyEnum *)ImsPrefs::getEmergencyPreferredIdentityKey(v51);
    ImsPrefs::stringValue(v51, EmergencyPreferredIdentityKey, (std::string *)__p);
    std::string::basic_string[abi:ne180100]<0>(&__str, "IMSI");
    v53 = BYTE7(v102);
    if ((SBYTE7(v102) & 0x80u) == 0)
      v54 = __p;
    else
      v54 = (void **)__p[0];
    v55 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
    v56 = (void *)__str.__r_.__value_.__r.__words[0];
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_str = &__str;
    else
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    v58 = strcasecmp((const char *)v54, (const char *)p_str);
    if (v55 < 0)
    {
      operator delete(v56);
      v53 = BYTE7(v102);
    }
    v32 = v89;
    if (v53 < 0)
      operator delete(__p[0]);
    if (!v58)
    {
      v65 = *((_QWORD *)a1 + 69);
      if (v65)
      {
        if (*(char *)(v65 + 151) < 0 ? *(_QWORD *)(v65 + 136) : *(unsigned __int8 *)(v65 + 151))
          std::string::operator=(&v90, (const std::string *)(v65 + 128));
      }
    }
    goto LABEL_65;
  }
  ImsResult::ImsResult(a6, (uint64_t)&v92);
LABEL_153:
  ImsResult::~ImsResult((ImsResult *)&v92);
LABEL_31:
  v37 = v98;
  if (v98)
  {
    v38 = (unint64_t *)&v98->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
}

void sub_1BEEDFA80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a16 < 0)
    operator delete(__p);
  if (a22 < 0)
    operator delete(a17);
  ImsResult::~ImsResult((ImsResult *)&a23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::getCallTransferInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  BOOL v8;
  char v9;
  int v10;
  std::string::size_type size;
  uint64_t *v12;
  std::string::size_type v13;
  uint64_t *v14;
  uint64_t *v15;
  std::string v17;
  std::string v18;
  std::string v19;
  std::string __str;
  void *__p[2];
  uint64_t v22;
  std::string v23;
  std::string v24;
  std::string v25[2];
  __int128 v26;
  __int128 v27;
  const char *v28;

  v3 = *(unsigned __int8 *)(a2 + 23);
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 264);
    if (v4)
    {
      v26 = 0u;
      v27 = 0u;
      memset(v25, 0, sizeof(v25));
      std::string::basic_string[abi:ne180100]<0>(&v24, "");
      std::string::basic_string[abi:ne180100]<0>(&v23, "");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(v25, v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
      else
        v25[0] = v24;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v25[1], v23.__r_.__value_.__l.__data_, v23.__r_.__value_.__l.__size_);
      else
        v25[1] = v23;
      if (SHIBYTE(v22) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v26, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
        BYTE8(v27) = 0;
        if (SHIBYTE(v22) < 0)
          operator delete(__p[0]);
      }
      else
      {
        v26 = *(_OWORD *)__p;
        *(_QWORD *)&v27 = v22;
        BYTE8(v27) = 0;
      }
      v7 = v4 + 152;
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v23.__r_.__value_.__l.__data_);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      v8 = SipDialogTable::fillReplacesHeaderData(v7, (void **)a2, (uint64_t)v25);
      v9 = !v8;
      if (!a3)
        v9 = 1;
      if ((v9 & 1) == 0)
      {
        memset(&__str, 0, sizeof(__str));
        if (SHIBYTE(v25[0].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&__str, v25[0].__r_.__value_.__l.__data_, v25[0].__r_.__value_.__l.__size_);
        else
          __str = v25[0];
        memset(&v19, 0, sizeof(v19));
        if (SHIBYTE(v25[1].__r_.__value_.__r.__words[2]) < 0)
          std::string::__init_copy_ctor_external(&v19, v25[1].__r_.__value_.__l.__data_, v25[1].__r_.__value_.__l.__size_);
        else
          v19 = v25[1];
        memset(&v18, 0, sizeof(v18));
        if (SBYTE7(v27) < 0)
        {
          std::string::__init_copy_ctor_external(&v18, (const std::string::value_type *)v26, *((std::string::size_type *)&v26 + 1));
        }
        else
        {
          *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v26;
          v18.__r_.__value_.__r.__words[2] = v27;
        }
        v10 = BYTE8(v27);
        std::string::operator=((std::string *)(a3 + 104), &__str);
        size = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v19.__r_.__value_.__l.__size_;
        if (size)
        {
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)"to-tag";
          v12 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 72), (void **)"to-tag", (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
          std::string::operator=((std::string *)(v12 + 7), &v19);
        }
        v13 = HIBYTE(v18.__r_.__value_.__r.__words[2]);
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          v13 = v18.__r_.__value_.__l.__size_;
        if (v13)
        {
          v17.__r_.__value_.__r.__words[0] = (std::string::size_type)"from-tag";
          v14 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 72), (void **)"from-tag", (uint64_t)&std::piecewise_construct, (__int128 **)&v17);
          std::string::operator=((std::string *)(v14 + 7), &v18);
        }
        if (v10)
        {
          std::string::basic_string[abi:ne180100]<0>(&v17, "");
          v28 = "early-only";
          v15 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)(a3 + 72), (void **)"early-only", (uint64_t)&std::piecewise_construct, (__int128 **)&v28);
          std::string::operator=((std::string *)(v15 + 7), &v17);
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v17.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v18.__r_.__value_.__l.__data_);
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v19.__r_.__value_.__l.__data_);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v27) < 0)
        operator delete((void *)v26);
      if (SHIBYTE(v25[1].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v25[1].__r_.__value_.__l.__data_);
      if (SHIBYTE(v25[0].__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v25[0].__r_.__value_.__l.__data_);
        if (v8)
          return 1;
      }
      else if (v8)
      {
        return 1;
      }
    }
  }
  return 0;
}

void sub_1BEEDFF18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  uint64_t v53;

  if (a28 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  SipLazuliManager::OutgoingMsrp::~OutgoingMsrp((void **)(v53 - 160));
  _Unwind_Resume(a1);
}

uint64_t SipUserAgent::getPreferredMedia(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  _DWORD *v8;
  int v9;
  __int128 v11;
  void *v12[2];
  __int128 v13;
  __int128 v14;
  void *v15[2];
  __int128 v16;
  void *__p[2];
  __int128 v18;
  std::string v19;
  void **v20;

  v2 = 0x200000001;
  v3 = *(unsigned __int8 *)(a2 + 23);
  v4 = (char)v3;
  if ((v3 & 0x80u) != 0)
    v3 = *(_QWORD *)(a2 + 8);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 264);
    if (v5)
    {
      if (v4 < 0)
        std::string::__init_copy_ctor_external(&v19, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        v19 = *(std::string *)a2;
      v2 = (uint64_t)std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v5 + 152, (void **)&v19.__r_.__value_.__l.__data_);
      v6 = v5 + 160;
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v19.__r_.__value_.__l.__data_);
      if (v6 == v2 || !*(_BYTE *)(v2 + 512))
        return 0x200000001;
      *(_OWORD *)__p = 0u;
      v18 = 0u;
      *(_OWORD *)v15 = 0u;
      v16 = 0u;
      v13 = 0u;
      v14 = 0u;
      v11 = 0u;
      *(_OWORD *)v12 = 0u;
      SipDialogParticipantInfo::SipDialogParticipantInfo((SipDialogParticipantInfo *)&v11, (const SipDialogParticipantInfo *)(v2 + 384));
      v7 = v15[1];
      if (v15[1] == (void *)v16)
      {
LABEL_17:
        v9 = 1;
      }
      else
      {
        v8 = v15[1];
        while (v8[1] != 3)
        {
          v8 += 3;
          if (v8 == (_DWORD *)v16)
            goto LABEL_17;
        }
        v9 = 0;
        v2 = *(_QWORD *)v8;
      }
      if (SHIBYTE(v18) < 0)
      {
        operator delete(__p[1]);
        v7 = v15[1];
      }
      if (v7)
      {
        *(_QWORD *)&v16 = v7;
        operator delete(v7);
      }
      std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)&v14, *((_QWORD **)&v14 + 1));
      if (SHIBYTE(v13) < 0)
        operator delete(v12[1]);
      v20 = (void **)&v11;
      std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100](&v20);
      if (v9)
        return 0x200000001;
    }
  }
  return v2;
}

void sub_1BEEE0180(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 - 41) < 0)
    operator delete(*(void **)(v1 - 64));
  _Unwind_Resume(exception_object);
}

uint64_t SipUserAgent::determineIncomingMessageCategory(SipDialogManager **this, const SipRequest *a2, const SipResponse *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t v12;
  const char *i;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  int v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  uint64_t result;
  unint64_t *v24;
  unint64_t v25;
  SipDialogManager *v26;
  SipDialogManager *v27;
  unint64_t *v28;
  unint64_t v29;
  SipDialogManager **v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  SipDialogManager *v40;
  std::__shared_weak_count *v41;
  char *v42;
  std::__shared_weak_count *v43;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 != 7)
    goto LABEL_12;
  if ((v7 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v6, "OPTIONS", *((_QWORD *)v6 + 1)))
      goto LABEL_22;
LABEL_12:
    v10 = (unsigned __int8 *)(*(uint64_t (**)(const SipRequest *))(*(_QWORD *)a2 + 112))(a2);
    v11 = v10[23];
    if ((v11 & 0x80u) == 0)
      v12 = v10[23];
    else
      v12 = *((_QWORD *)v10 + 1);
    if (v12 != 8)
      return SipDialogManager::determineIncomingMessageCategory(this[22], a2, a3);
    if ((v11 & 0x80) != 0)
    {
      result = memcmp(*(const void **)v10, "REGISTER", *((_QWORD *)v10 + 1));
      if (!(_DWORD)result)
        return result;
      return SipDialogManager::determineIncomingMessageCategory(this[22], a2, a3);
    }
    if (v10[23])
    {
      for (i = "REGISTER"; *v10 == *(unsigned __int8 *)i; ++i)
      {
        ++v10;
        if (!--v11)
          return 0;
      }
      return SipDialogManager::determineIncomingMessageCategory(this[22], a2, a3);
    }
    return 0;
  }
  if (v6[23])
  {
    v9 = "OPTIONS";
    while (*v6 == *(unsigned __int8 *)v9)
    {
      ++v6;
      ++v9;
      if (!--v7)
        goto LABEL_22;
    }
    goto LABEL_12;
  }
LABEL_22:
  v14 = (std::__shared_weak_count *)this[2];
  if (v14)
  {
    v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      v16 = v15;
      if (this[1])
      {
        v17 = (std::__shared_weak_count *)this[2];
        if (v17 && (v18 = std::__shared_weak_count::lock(v17)) != 0)
        {
          v19 = v18;
          v20 = *((unsigned __int8 *)this[1] + 2657);
          p_shared_owners = (unint64_t *)&v18->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        else
        {
          v20 = MEMORY[0xA61];
        }
        v24 = (unint64_t *)&v16->__shared_owners_;
        do
          v25 = __ldaxr(v24);
        while (__stlxr(v25 - 1, v24));
        if (!v25)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
        if (v20)
        {
          v42 = 0;
          v43 = 0;
          v26 = this[26];
          v27 = this[27];
          v40 = v26;
          v41 = (std::__shared_weak_count *)v27;
          if (v27)
          {
            v28 = (unint64_t *)((char *)v27 + 8);
            do
              v29 = __ldxr(v28);
            while (__stxr(v29 + 1, v28));
          }
          if (v26)
          {
            v42 = (char *)v26 + 8;
            v43 = (std::__shared_weak_count *)v27;
            v30 = &v40;
          }
          else
          {
            v30 = (SipDialogManager **)&v42;
          }
          *v30 = 0;
          v30[1] = 0;
          v33 = v41;
          if (v41)
          {
            v34 = (unint64_t *)&v41->__shared_owners_;
            do
              v35 = __ldaxr(v34);
            while (__stlxr(v35 - 1, v34));
            if (!v35)
            {
              ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
              std::__shared_weak_count::__release_weak(v33);
            }
          }
          v37 = v42;
          v36 = v43;
          if (v43)
          {
            v38 = (unint64_t *)&v43->__shared_owners_;
            do
              v39 = __ldaxr(v38);
            while (__stlxr(v39 - 1, v38));
            if (!v39)
            {
              ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
              std::__shared_weak_count::__release_weak(v36);
            }
          }
          if (v37)
            return 3;
        }
      }
      else
      {
        v31 = (unint64_t *)&v15->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
  }
  return 0;
}

BOOL SipUserAgentConfig::countryOfOriginationAllowedInPANI(SipUserAgentConfig *this)
{
  const char *v2;
  const char *v3;
  char v4;
  void **v5;
  const char *v6;
  int v7;
  void *v8;
  const char *v9;
  _BOOL8 v10;
  _QWORD v12[2];
  char v13;
  void *__p[2];
  char v15;

  v2 = (char *)this + 864;
  std::string::basic_string[abi:ne180100]<0>(__p, "PANI");
  if (*((char *)this + 887) >= 0)
    v3 = v2;
  else
    v3 = (const char *)*((_QWORD *)this + 108);
  v4 = v15;
  if (v15 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (!strcasecmp(v3, (const char *)v5))
  {
    v10 = 1;
    if ((v4 & 0x80) == 0)
      return v10;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 887) >= 0)
    v6 = v2;
  else
    v6 = (const char *)*((_QWORD *)this + 108);
  v7 = v13;
  v8 = (void *)v12[0];
  if (v13 >= 0)
    v9 = (const char *)v12;
  else
    v9 = (const char *)v12[0];
  v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0)
    operator delete(v8);
  if (v15 < 0)
LABEL_17:
    operator delete(__p[0]);
  return v10;
}

void sub_1BEEE054C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipUserAgentConfig::countryOfOriginationAllowedInBody(SipUserAgentConfig *this)
{
  const char *v2;
  const char *v3;
  char v4;
  void **v5;
  const char *v6;
  int v7;
  void *v8;
  const char *v9;
  _BOOL8 v10;
  _QWORD v12[2];
  char v13;
  void *__p[2];
  char v15;

  v2 = (char *)this + 864;
  std::string::basic_string[abi:ne180100]<0>(__p, "PIDF");
  if (*((char *)this + 887) >= 0)
    v3 = v2;
  else
    v3 = (const char *)*((_QWORD *)this + 108);
  v4 = v15;
  if (v15 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (!strcasecmp(v3, (const char *)v5))
  {
    v10 = 1;
    if ((v4 & 0x80) == 0)
      return v10;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 887) >= 0)
    v6 = v2;
  else
    v6 = (const char *)*((_QWORD *)this + 108);
  v7 = v13;
  v8 = (void *)v12[0];
  if (v13 >= 0)
    v9 = (const char *)v12;
  else
    v9 = (const char *)v12[0];
  v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0)
    operator delete(v8);
  if (v15 < 0)
LABEL_17:
    operator delete(__p[0]);
  return v10;
}

void sub_1BEEE0640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipUserAgentConfig::latLongAllowedInShortCodeCall(SipUserAgentConfig *this)
{
  const char *v2;
  const char *v3;
  char v4;
  void **v5;
  const char *v6;
  int v7;
  void *v8;
  const char *v9;
  _BOOL8 v10;
  _QWORD v12[2];
  char v13;
  void *__p[2];
  char v15;

  v2 = (char *)this + 888;
  std::string::basic_string[abi:ne180100]<0>(__p, "LATLONG");
  if (*((char *)this + 911) >= 0)
    v3 = v2;
  else
    v3 = (const char *)*((_QWORD *)this + 111);
  v4 = v15;
  if (v15 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (!strcasecmp(v3, (const char *)v5))
  {
    v10 = 1;
    if ((v4 & 0x80) == 0)
      return v10;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 911) >= 0)
    v6 = v2;
  else
    v6 = (const char *)*((_QWORD *)this + 111);
  v7 = v13;
  v8 = (void *)v12[0];
  if (v13 >= 0)
    v9 = (const char *)v12;
  else
    v9 = (const char *)v12[0];
  v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0)
    operator delete(v8);
  if (v15 < 0)
LABEL_17:
    operator delete(__p[0]);
  return v10;
}

void sub_1BEEE0734(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipUserAgentConfig::civicInfoAllowedInShortCodeCall(SipUserAgentConfig *this)
{
  const char *v2;
  const char *v3;
  char v4;
  void **v5;
  const char *v6;
  int v7;
  void *v8;
  const char *v9;
  _BOOL8 v10;
  _QWORD v12[2];
  char v13;
  void *__p[2];
  char v15;

  v2 = (char *)this + 888;
  std::string::basic_string[abi:ne180100]<0>(__p, "CIVIC");
  if (*((char *)this + 911) >= 0)
    v3 = v2;
  else
    v3 = (const char *)*((_QWORD *)this + 111);
  v4 = v15;
  if (v15 >= 0)
    v5 = __p;
  else
    v5 = (void **)__p[0];
  if (!strcasecmp(v3, (const char *)v5))
  {
    v10 = 1;
    if ((v4 & 0x80) == 0)
      return v10;
    goto LABEL_17;
  }
  std::string::basic_string[abi:ne180100]<0>(v12, "BOTH");
  if (*((char *)this + 911) >= 0)
    v6 = v2;
  else
    v6 = (const char *)*((_QWORD *)this + 111);
  v7 = v13;
  v8 = (void *)v12[0];
  if (v13 >= 0)
    v9 = (const char *)v12;
  else
    v9 = (const char *)v12[0];
  v10 = strcasecmp(v6, v9) == 0;
  if (v7 < 0)
    operator delete(v8);
  if (v15 < 0)
LABEL_17:
    operator delete(__p[0]);
  return v10;
}

void sub_1BEEE0828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipStackLayer::~SipStackLayer(SipStackLayer *this)
{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78C16F0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  *(_QWORD *)this = &off_1E78C16F0;
  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

_QWORD *ImsRandomNumberGenerator<unsigned char>::~ImsRandomNumberGenerator(_QWORD *a1)
{
  uint64_t v2;

  v2 = a1[1];
  if (v2)
    MEMORY[0x1C3B87100](v2, 0x1000C40BDFB0063);
  if (*a1)
    MEMORY[0x1C3B87100](*a1, 0x1000C4052888210);
  return a1;
}

uint64_t *std::unique_ptr<LazuliMessageEncodingMap>::reset[abi:ne180100](uint64_t *result, uint64_t a2)
{
  uint64_t v2;
  void **v3;

  v2 = *result;
  *result = a2;
  if (v2)
  {
    v3 = (void **)(v2 + 40);
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100](&v3);
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::~__hash_table(v2);
    JUMPOUT(0x1C3B87100);
  }
  return result;
}

void std::__shared_ptr_emplace<SipDialogManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1508;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialogManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1508;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipDialogManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipMessageManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1558;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipMessageManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1558;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipMessageManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipOptionsManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C15A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipOptionsManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C15A8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipOptionsManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipDialogEventClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C15F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipDialogEventClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C15F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipDialogEventClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v9 = 0;
  v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void std::__shared_ptr_emplace<SipLazuliManager>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1648;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipLazuliManager>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1648;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipLazuliManager>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, uint64_t a3, __int128 **a4)
{
  uint64_t **v6;
  uint64_t *result;
  uint64_t *v8[3];
  uint64_t v9;

  v9 = 0;
  v6 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)a1, a4, v8);
    std::__tree<unsigned int>::__insert_node_at(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void std::__tree<std::__value_type<std::string,SipUserAgentDelegate *>,std::__map_value_compare<std::string,std::__value_type<std::string,SipUserAgentDelegate *>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,SipUserAgentDelegate *>>>::__construct_node<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, __int128 **a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  char *v7;
  std::string *v8;
  __int128 *v9;
  __int128 v10;

  v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *v6 = v5;
  *((_BYTE *)a3 + 16) = 0;
  v8 = (std::string *)(v7 + 32);
  v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v9, *((_QWORD *)v9 + 1));
  }
  else
  {
    v10 = *v9;
    *((_QWORD *)v7 + 6) = *((_QWORD *)v9 + 2);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v10;
  }
  *((_QWORD *)v7 + 7) = 0;
  *((_BYTE *)a3 + 16) = 1;
}

void sub_1BEEE0CD8(_Unwind_Exception *a1)
{
  _QWORD *v1;
  void **v2;
  uint64_t v3;

  *v1 = 0;
  std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,void *>>>::operator()[abi:ne180100](v3, v2);
  _Unwind_Resume(a1);
}

uint64_t std::__tree<std::string>::__erase_unique<std::string>(uint64_t **a1, void **a2)
{
  void **v3;

  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3)
    return 0;
  std::__tree<std::string>::erase(a1, (uint64_t)v3);
  return 1;
}

uint64_t *std::__tree<std::string>::erase(uint64_t **a1, uint64_t a2)
{
  uint64_t *v3;

  v3 = std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0)
    operator delete(*(void **)(a2 + 32));
  operator delete((void *)a2);
  return v3;
}

uint64_t _GLOBAL__sub_I_SipUserAgent_cpp()
{
}

uint64_t IBIRTPStackController::IBIRTPStackController(uint64_t a1, uint64_t *a2, int a3, uint64_t *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_weak_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  if (v6)
  {
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = *a4;
  v10 = (std::__shared_weak_count *)a4[1];
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)a1 = off_1E78C1900;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = v5;
  *(_QWORD *)(a1 + 32) = v6;
  if (v6)
  {
    v13 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *(_DWORD *)(a1 + 40) = a3;
  *(_QWORD *)(a1 + 48) = v9;
  *(_QWORD *)(a1 + 56) = v10;
  if (v10)
  {
    v15 = (unint64_t *)&v10->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    *(_DWORD *)(a1 + 64) = 0;
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 64) = 0;
  }
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = &off_1E78C1710;
  *(_QWORD *)(a1 + 72) = a1 + 80;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 104;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  return a1;
}

void IBIRTPStackController::~IBIRTPStackController(char **this)
{
  *this = (char *)&off_1E78C1710;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 15));
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(this[13]);
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(this[10]);
  RTPStackController::~RTPStackController((RTPStackController *)this);
}

{
  IBIRTPStackController::~IBIRTPStackController(this);
  JUMPOUT(0x1C3B87100);
}

void RTPStackController::~RTPStackController(RTPStackController *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78C1900;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 48);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void IBIRTPStackController::initialize(uint64_t a1, std::string::size_type a2, int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  NSObject *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  std::string::size_type v13;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  std::__shared_weak_count *size;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_weak_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  RTPManager *v32;
  uint64_t v33;
  std::string::size_type v34;
  uint64_t v35;
  int v36;
  const std::string::value_type *v37;
  uint64_t v38;
  int v39;
  int v40;
  void *v42;
  int v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  char v47;
  uint64_t v48;
  _QWORD v49[5];
  std::string v50;
  _BYTE v51[80];
  uint64_t v52;
  std::__shared_weak_count *v53;
  dispatch_object_t v54;
  std::__shared_weak_count *v55;
  dispatch_object_t v56;
  std::__shared_weak_count *v57;
  std::string __p[3];
  dispatch_object_t v59;
  std::__shared_weak_count *v60;
  char v61;
  _QWORD v62[3];
  __int128 v63;
  __int128 v64;
  __int128 v65;

  v63 = 0u;
  v64 = 0u;
  v65 = 0u;
  v62[0] = &off_1E78B7238;
  v62[1] = &_bambiDomain;
  v62[2] = 0;
  v6 = a1 + 96;
  if ((void **)(a1 + 104) != std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 96, (void **)a2))
  {
    __p[0].__r_.__value_.__r.__words[0] = a2;
    if (std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a2, (__int128 **)__p)[56] == a3)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
      std::string::basic_string[abi:ne180100]<0>(&v59, (char *)&str_1_12);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::warn(ims::_logger, (uint64_t)__p, (uint64_t)&v59);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"AppId : ", 8);
      *(_BYTE *)(v7 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v7 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" is already initialized for ", 28);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v7 + 32))(v7, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v61 < 0)
        operator delete(v59);
      if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      {
LABEL_69:
        operator delete(__p[0].__r_.__value_.__l.__data_);
        goto LABEL_76;
      }
      goto LABEL_76;
    }
  }
  __p[0].__r_.__value_.__r.__words[0] = a2;
  std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a2, (__int128 **)__p)[56] = a3;
  if (!*(_QWORD *)(a1 + 136))
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&v59, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Initializing for ", 17);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v9 + 32))(v9, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" with AppId : ", 14);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v61 < 0)
      operator delete(v59);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v10 = *(NSObject **)(*(_QWORD *)(a1 + 48) + 344);
    v59 = v10;
    if (v10)
      dispatch_retain(v10);
    v11 = (std::__shared_weak_count *)operator new(0x80uLL);
    v11->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C17D8;
    IBIRTPClient::IBIRTPClient((IBIRTPClient *)&v11[1], &v59);
    __p[0].__r_.__value_.__r.__words[0] = v13;
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v11;
    shared_weak_owners = (std::__shared_weak_count *)v11[1].__shared_weak_owners_;
    if (shared_weak_owners)
    {
      if (shared_weak_owners->__shared_owners_ != -1)
      {
LABEL_31:
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 136, (__int128 *)__p);
        size = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
        if (__p[0].__r_.__value_.__l.__size_)
        {
          v23 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        if (v59)
          dispatch_release(v59);
        v25 = *(_QWORD *)(a1 + 136);
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v59, (_QWORD *)(a1 + 8));
        v26 = v60;
        v54 = v59;
        v55 = v60;
        v56 = v59;
        v57 = v60;
        if (v60)
        {
          p_shared_weak_owners = (unint64_t *)&v60->__shared_weak_owners_;
          do
            v28 = __ldxr(p_shared_weak_owners);
          while (__stxr(v28 + 1, p_shared_weak_owners));
        }
        IBIRTPClient::registerClient(v25, (uint64_t)&v56, (uint64_t)__p);
        ImsResult::operator=((uint64_t)v62, (uint64_t)__p);
        ImsResult::~ImsResult((ImsResult *)__p);
        if (v57)
          std::__shared_weak_count::__release_weak(v57);
        if (v26)
        {
          v29 = (unint64_t *)&v26->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        goto LABEL_48;
      }
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
      v16 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v11[1].__shared_owners_ = v13;
      v11[1].__shared_weak_owners_ = (uint64_t)v11;
      std::__shared_weak_count::__release_weak(shared_weak_owners);
    }
    else
    {
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
      v19 = (unint64_t *)&v11->__shared_weak_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      v11[1].__shared_owners_ = v13;
      v11[1].__shared_weak_owners_ = (uint64_t)v11;
    }
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v59, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Already initialized, just updating AppId for ", 45);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" to : ", 6);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v61 < 0)
    operator delete(v59);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
LABEL_48:
  v31 = *(_QWORD *)(a1 + 120);
  if (!v31)
    goto LABEL_76;
  v32 = *(RTPManager **)(a1 + 48);
  v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v31 + 24) + 176))(v31 + 24);
  RTPManager::stackIdForSession(v32, v33, __p);
  if ((__p[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v34 = HIBYTE(__p[0].__r_.__value_.__r.__words[2]);
  else
    v34 = __p[0].__r_.__value_.__l.__size_;
  v35 = *(unsigned __int8 *)(a2 + 23);
  v36 = (char)v35;
  if ((v35 & 0x80u) != 0)
    v35 = *(_QWORD *)(a2 + 8);
  if (v34 != v35)
  {
    if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) == 0)
      goto LABEL_76;
    goto LABEL_69;
  }
  if (v36 >= 0)
    v37 = (const std::string::value_type *)a2;
  else
    v37 = *(const std::string::value_type **)a2;
  if ((*((_BYTE *)&__p[0].__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v42 = (void *)__p[0].__r_.__value_.__r.__words[0];
    v43 = memcmp(__p[0].__r_.__value_.__l.__data_, v37, __p[0].__r_.__value_.__l.__size_);
    operator delete(v42);
    if (v43)
      goto LABEL_76;
  }
  else if (*((_BYTE *)&__p[0].__r_.__value_.__s + 23))
  {
    v38 = 0;
    do
    {
      v39 = __p[0].__r_.__value_.__s.__data_[v38];
      v40 = v37[v38];
    }
    while (v39 == v40 && HIBYTE(__p[0].__r_.__value_.__r.__words[2]) - 1 != v38++);
    if (v39 != v40)
      goto LABEL_76;
  }
  v52 = 0;
  v53 = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 120), &v52);
  v44 = v53;
  if (v53)
  {
    v45 = (unint64_t *)&v53->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
LABEL_76:
  __p[0].__r_.__value_.__r.__words[0] = a2;
  v47 = std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(v6, (void **)a2, (__int128 **)__p)[56];
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 104))(a1, 2);
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v59, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v48 = ImsLogger::info(ims::_logger, (uint64_t)__p, (uint64_t)&v59);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v48 + 8), (uint64_t)"IBI Stack Controller initialized!", 33);
  *(_BYTE *)(v48 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v48 + 64))(v48, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v48 + 17) = 0;
  if (v61 < 0)
    operator delete(v59);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  memset(__p, 0, 24);
  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p[0] = *(std::string *)a2;
  v49[0] = MEMORY[0x1E0C809B0];
  v49[1] = 1174405120;
  v49[2] = ___ZN21IBIRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke;
  v49[3] = &__block_descriptor_tmp_8;
  v49[4] = a1;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v50, __p[0].__r_.__value_.__l.__data_, __p[0].__r_.__value_.__l.__size_);
  else
    v50 = __p[0];
  v51[72] = v47;
  ImsResult::ImsResult((ImsResult *)v51, (const ImsResult *)v62);
  ims::performBlock((IMSClientManager *)v49);
  ImsResult::~ImsResult((ImsResult *)v51);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  ImsResult::~ImsResult((ImsResult *)v62);
}

void sub_1BEEE1770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  uint64_t v41;

  ImsResult::~ImsResult((ImsResult *)&__p);
  if (a35)
    std::__shared_weak_count::__release_weak(a35);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  ImsResult::~ImsResult((ImsResult *)(v41 - 136));
  _Unwind_Resume(a1);
}

void ___ZN21IBIRTPStackController10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEh_block_invoke(uint64_t a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  void (***v4)(_QWORD, uint64_t *, uint64_t, uint64_t, _BYTE *);
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v12[72];
  uint64_t v13;
  std::__shared_weak_count *v14;
  void (***v15)(_QWORD, _QWORD *, uint64_t, _QWORD, _BYTE *);
  std::__shared_weak_count *v16;

  v2 = *(_QWORD **)(a1 + 32);
  v15 = 0;
  v16 = 0;
  v3 = (std::__shared_weak_count *)v2[4];
  if (v3)
  {
    v16 = std::__shared_weak_count::lock(v3);
    if (v16)
    {
      v4 = (void (***)(_QWORD, uint64_t *, uint64_t, uint64_t, _BYTE *))v2[3];
      v15 = v4;
      if (v4)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, v2 + 1);
        v5 = *(unsigned __int8 *)(a1 + 136);
        ImsResult::ImsResult((ImsResult *)v12, (const ImsResult *)(a1 + 64));
        (**v4)(v4, &v13, a1 + 40, v5, v12);
        ImsResult::~ImsResult((ImsResult *)v12);
        v6 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEE1974(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c14_ZTS9ImsResult(uint64_t a1, uint64_t a2)
{
  __int128 v4;

  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  ImsResult::ImsResult((ImsResult *)(a1 + 64), (const ImsResult *)(a2 + 64));
}

void sub_1BEEE1A0C(_Unwind_Exception *exception_object)
{
  void **v1;
  uint64_t v2;

  if (*(char *)(v2 + 63) < 0)
    operator delete(*v1);
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE64c14_ZTS9ImsResult(uint64_t a1)
{
  ImsResult::~ImsResult((ImsResult *)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

void IBIRTPStackController::cleanup(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  uint64_t ***v6;
  uint64_t *v7;
  uint64_t **v8;
  BOOL v9;
  unsigned int v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t **v22;
  unsigned int v23;
  std::string::size_type size;
  std::string::size_type v25;
  unint64_t *v26;
  unint64_t v27;
  RTPManager *v28;
  uint64_t v29;
  char v30;
  std::string::size_type v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  std::string *p_s1;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  const char *v40;
  unsigned __int8 *v41;
  int v42;
  int v43;
  int v44;
  int v45;
  BOOL v46;
  char v47;
  BOOL v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  uint64_t **v53;
  _QWORD *v54;
  uint64_t v55;
  RTPManager *v56;
  uint64_t v57;
  uint64_t v58;
  std::string::size_type v59;
  size_t v60;
  size_t v61;
  uint64_t v62;
  unsigned __int8 *v63;
  std::string *p_p;
  size_t v65;
  size_t v66;
  const char *v67;
  int v68;
  int v69;
  int v70;
  int v71;
  char v72;
  _BOOL4 v73;
  std::__shared_weak_count *v74;
  unint64_t *p_shared_owners;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string __s1;
  uint64_t **v81;
  uint64_t *v82;
  uint64_t v83;
  std::string __p;

  if (!a1[6])
    return;
  v4 = (_QWORD *)a1[9];
  v82 = 0;
  v83 = 0;
  v81 = &v82;
  v77 = (uint64_t)(a1 + 9);
  v5 = a1 + 10;
  if (v4 == a1 + 10)
    goto LABEL_92;
  do
  {
    v6 = (uint64_t ***)&v82;
    if (v81 == &v82)
      goto LABEL_9;
    v7 = v82;
    v8 = &v82;
    if (v82)
    {
      do
      {
        v6 = (uint64_t ***)v7;
        v7 = (uint64_t *)v7[1];
      }
      while (v7);
    }
    else
    {
      do
      {
        v6 = (uint64_t ***)v8[2];
        v9 = *v6 == v8;
        v8 = (uint64_t **)v6;
      }
      while (v9);
    }
    v10 = *((_DWORD *)v4 + 8);
    if (*((_DWORD *)v6 + 8) < v10)
    {
LABEL_9:
      if (v82)
        v11 = (uint64_t **)v6;
      else
        v11 = &v82;
      if (v82)
      {
        v12 = (uint64_t **)(v6 + 1);
      }
      else
      {
        v6 = &v81;
        v12 = &v82;
      }
      if (v6[1])
        goto LABEL_31;
LABEL_25:
      __p.__r_.__value_.__r.__words[2] = 1;
      v15 = (uint64_t *)operator new(0x38uLL);
      v16 = v15;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&v82;
      *((_DWORD *)v15 + 8) = *((_DWORD *)v4 + 8);
      v15[5] = v4[5];
      v17 = v4[6];
      v15[6] = v17;
      if (v17)
      {
        v18 = (unint64_t *)(v17 + 8);
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      *v15 = 0;
      v15[1] = 0;
      v15[2] = (uint64_t)v11;
      *v12 = v15;
      if (*v81)
      {
        v81 = (uint64_t **)*v81;
        v16 = *v12;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(v82, v16);
      ++v83;
      __p.__r_.__value_.__r.__words[0] = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,void *>>>>::reset[abi:ne180100]((uint64_t)&__p);
      goto LABEL_31;
    }
    v12 = &v82;
    v11 = &v82;
    if (!v82)
      goto LABEL_25;
    v13 = v82;
    while (1)
    {
      while (1)
      {
        v11 = (uint64_t **)v13;
        v14 = *((_DWORD *)v13 + 8);
        if (v14 <= v10)
          break;
        v13 = *v11;
        v12 = v11;
        if (!*v11)
          goto LABEL_25;
      }
      if (v14 >= v10)
        break;
      v13 = v11[1];
      if (!v13)
      {
        v12 = v11 + 1;
        goto LABEL_25;
      }
    }
LABEL_31:
    v20 = (_QWORD *)v4[1];
    if (v20)
    {
      do
      {
        v21 = v20;
        v20 = (_QWORD *)*v20;
      }
      while (v20);
    }
    else
    {
      do
      {
        v21 = (_QWORD *)v4[2];
        v9 = *v21 == (_QWORD)v4;
        v4 = v21;
      }
      while (!v9);
    }
    v4 = v21;
  }
  while (v21 != v5);
  v22 = v81;
  if (v81 != &v82)
  {
    do
    {
      v23 = *((_DWORD *)v22 + 8);
      size = (std::string::size_type)v22[5];
      v25 = (std::string::size_type)v22[6];
      __p.__r_.__value_.__l.__size_ = size;
      __p.__r_.__value_.__r.__words[0] = v23;
      __p.__r_.__value_.__r.__words[2] = v25;
      if (v25)
      {
        v26 = (unint64_t *)(v25 + 8);
        do
          v27 = __ldxr(v26);
        while (__stxr(v27 + 1, v26));
        size = __p.__r_.__value_.__l.__size_;
      }
      if (!size)
        goto LABEL_77;
      v28 = (RTPManager *)a1[6];
      v29 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)(size + 24) + 176))(size + 24);
      RTPManager::stackIdForSession(v28, v29, &__s1);
      v30 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v31 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
      else
        v31 = __s1.__r_.__value_.__l.__size_;
      v32 = a2[23];
      v33 = *((_QWORD *)a2 + 1);
      if ((v32 & 0x80u) == 0)
        v34 = a2[23];
      else
        v34 = *((_QWORD *)a2 + 1);
      if (v31 != v34)
        goto LABEL_60;
      if ((v32 & 0x80u) == 0)
        v35 = a2;
      else
        v35 = *(unsigned __int8 **)a2;
      if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        v38 = (void *)__s1.__r_.__value_.__r.__words[0];
        if (memcmp(__s1.__r_.__value_.__l.__data_, v35, __s1.__r_.__value_.__l.__size_))
          goto LABEL_60;
        operator delete(v38);
      }
      else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        v37 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
        while (p_s1->__r_.__value_.__s.__data_[0] == *v35)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          ++v35;
          if (!--v37)
            goto LABEL_76;
        }
LABEL_60:
        if (v34 == 15)
        {
          if ((v32 & 0x80) != 0)
          {
            v48 = memcmp(*(const void **)a2, "kIBIAllSessions", v33) == 0;
            goto LABEL_73;
          }
          if ((_DWORD)v32)
          {
            v39 = v32 - 1;
            v40 = "kIBIAllSessions";
            v41 = a2;
            do
            {
              v43 = *v41++;
              v42 = v43;
              v45 = *(unsigned __int8 *)v40++;
              v44 = v45;
              v46 = v39-- != 0;
              v47 = v46;
              v48 = v42 == v44;
            }
            while (v42 == v44 && (v47 & 1) != 0);
LABEL_73:
            if (v30 < 0)
LABEL_74:
              operator delete(__s1.__r_.__value_.__l.__data_);
          }
          else
          {
            v48 = 1;
            if (v30 < 0)
              goto LABEL_74;
          }
        }
        else
        {
          v48 = 0;
          if (v30 < 0)
            goto LABEL_74;
        }
        if (!v48)
          goto LABEL_77;
      }
LABEL_76:
      IBISession::cleanup((IBISession *)__p.__r_.__value_.__l.__size_, 1);
      std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::__erase_unique<unsigned int>(v77, (unsigned int *)&__p);
LABEL_77:
      v49 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
      if (__p.__r_.__value_.__r.__words[2])
      {
        v50 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
      v52 = v22[1];
      if (v52)
      {
        do
        {
          v53 = (uint64_t **)v52;
          v52 = (uint64_t *)*v52;
        }
        while (v52);
      }
      else
      {
        do
        {
          v53 = (uint64_t **)v22[2];
          v9 = *v53 == (uint64_t *)v22;
          v22 = v53;
        }
        while (!v9);
      }
      v22 = v53;
    }
    while (v53 != &v82);
  }
LABEL_92:
  v54 = a1 + 15;
  v55 = a1[15];
  if (!v55)
  {
    v60 = a2[23];
    v61 = *((_QWORD *)a2 + 1);
    goto LABEL_110;
  }
  v56 = (RTPManager *)a1[6];
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v55 + 24) + 176))(v55 + 24);
  RTPManager::stackIdForSession(v56, v57, &__p);
  v58 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v59 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v59 = __p.__r_.__value_.__l.__size_;
  v60 = a2[23];
  v61 = *((_QWORD *)a2 + 1);
  if ((v60 & 0x80u) == 0)
    v62 = a2[23];
  else
    v62 = *((_QWORD *)a2 + 1);
  if (v59 != v62)
  {
LABEL_110:
    if ((v60 & 0x80u) == 0)
      v65 = v60;
    else
      v65 = v61;
    if (v65 != 15)
    {
      v73 = 0;
      if (v55)
        goto LABEL_132;
      goto LABEL_127;
    }
    if ((v60 & 0x80) != 0)
    {
      v73 = memcmp(*(const void **)a2, "kIBIAllSessions", v61) == 0;
    }
    else
    {
      if (!(_DWORD)v60)
      {
        v73 = 1;
        if (v55)
          goto LABEL_132;
LABEL_127:
        if (v73)
          goto LABEL_135;
        goto LABEL_140;
      }
      v66 = v60 - 1;
      v67 = "kIBIAllSessions";
      do
      {
        v69 = *a2++;
        v68 = v69;
        v71 = *(unsigned __int8 *)v67++;
        v70 = v71;
        v46 = v66-- != 0;
        v72 = v46;
        v73 = v68 == v70;
      }
      while (v68 == v70 && (v72 & 1) != 0);
    }
    if (v55)
      goto LABEL_132;
    goto LABEL_127;
  }
  if ((v60 & 0x80u) == 0)
    v63 = a2;
  else
    v63 = *(unsigned __int8 **)a2;
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    if (memcmp(__p.__r_.__value_.__l.__data_, v63, __p.__r_.__value_.__l.__size_))
      goto LABEL_110;
  }
  else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
  {
    p_p = &__p;
    while (p_p->__r_.__value_.__s.__data_[0] == *v63)
    {
      p_p = (std::string *)((char *)p_p + 1);
      ++v63;
      if (!--v58)
        goto LABEL_130;
    }
    goto LABEL_110;
  }
LABEL_130:
  LOBYTE(v73) = 1;
LABEL_132:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v73)
  {
LABEL_135:
    v78 = 0;
    v79 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v54, &v78);
    v74 = v79;
    if (v79)
    {
      p_shared_owners = (unint64_t *)&v79->__shared_owners_;
      do
        v76 = __ldaxr(p_shared_owners);
      while (__stlxr(v76 - 1, p_shared_owners));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
LABEL_140:
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(v82);
}

void sub_1BEEE1FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, _QWORD *a18)
{
  std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(a18);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPStackController::cleanupAfterHandover(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 24))(a1, a2, 0);
}

void IBIRTPStackController::createRTPSession(uint64_t a1@<X0>, std::__shared_weak_count **a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, int a5@<W4>, void **a6@<X5>, dispatch_object_t *a7@<X6>, uint64_t *a8@<X8>)
{
  uint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  ImsPrefs *v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  unint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  ImsPrefs *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  int v72;
  uint64_t *v73;
  uint64_t v74;
  dispatch_object_t *v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  std::__shared_weak_count *v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  void *__p;
  std::__shared_weak_count *v87;
  char v88;
  std::__shared_weak_count *v89;
  std::__shared_weak_count *v90;
  char v91;
  std::__shared_weak_count *v92;
  std::__shared_weak_count *v93;

  v16 = a1 + 96;
  if ((void **)(a1 + 104) == std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 96, a6))
  {
    v18 = -1;
  }
  else
  {
    v17 = *std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(v16, &v89, a6);
    if (!v17)
      std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
    v18 = *(_BYTE *)(v17 + 56);
  }
  v75 = a7;
  std::string::basic_string[abi:ne180100]<0>(&v89, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ImsLogger::debug(ims::_logger, (uint64_t)&v89, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Attempting to create new RTP session for ", 41);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v19 + 32))(v19, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" with AppId : ", 14);
  *(_BYTE *)(v19 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  if (v88 < 0)
    operator delete(__p);
  if (v91 < 0)
    operator delete(v89);
  v84 = 0;
  v85 = 0;
  v20 = (std::__shared_weak_count *)a4[1];
  if (!v20)
  {
    v21 = 0;
    goto LABEL_66;
  }
  v21 = std::__shared_weak_count::lock(v20);
  v85 = v21;
  if (!v21 || (v74 = a3, v22 = *a4, (v84 = v22) == 0))
  {
LABEL_66:
    std::string::basic_string[abi:ne180100]<0>(&v89, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v60 = ImsLogger::error(ims::_logger, (uint64_t)&v89, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v60 + 8), (uint64_t)"SDPSession expired.", 19);
    *(_BYTE *)(v60 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v60 + 64))(v60, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v60 + 17) = 0;
    if (v88 < 0)
      operator delete(__p);
    if (v91 < 0)
      operator delete(v89);
    *a8 = 0;
    a8[1] = 0;
    if (v21)
      goto LABEL_89;
    return;
  }
  v82 = 0;
  v83 = 0;
  v80 = 0;
  v81 = 0;
  v23 = *(std::__shared_weak_count **)(v22 + 128);
  if (v23)
  {
    v23 = std::__shared_weak_count::lock(v23);
    v81 = v23;
    if (v23)
    {
      v23 = *(std::__shared_weak_count **)(v22 + 120);
      v80 = v23;
    }
  }
  v24 = (ImsPrefs *)SipStack::prefs((SipStack *)v23);
  v72 = a5;
  v73 = a8;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v89, (_QWORD *)(a1 + 8));
  v25 = v89;
  v26 = v90;
  v78 = v89;
  v79 = v90;
  v28 = *a2;
  v27 = a2[1];
  v29 = (std::__shared_weak_count *)operator new(0x438uLL);
  v29->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v29->__shared_owners_;
  v29->__shared_weak_owners_ = 0;
  v29->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1828;
  v89 = v28;
  v90 = v27;
  if (v27)
  {
    p_shared_weak_owners = (unint64_t *)&v27->__shared_weak_owners_;
    do
      v32 = __ldxr(p_shared_weak_owners);
    while (__stxr(v32 + 1, p_shared_weak_owners));
  }
  v33 = *(std::__shared_weak_count **)(a1 + 56);
  __p = *(void **)(a1 + 48);
  v87 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v92 = v25;
  v93 = v26;
  v78 = 0;
  v79 = 0;
  v36 = v29 + 1;
  IBISession::IBISession((uint64_t)&v29[1], (uint64_t *)&v89, v74, (uint64_t *)&__p, v24, &v92, v18, (__int128 *)a6, v75);
  v37 = v93;
  if (v93)
  {
    v38 = (unint64_t *)&v93->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v87;
  if (v87)
  {
    v41 = (unint64_t *)&v87->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
  if (v90)
    std::__shared_weak_count::__release_weak(v90);
  v82 = v29 + 1;
  v83 = v29;
  shared_weak_owners = (std::__shared_weak_count *)v29[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_46;
    do
      v44 = __ldxr(p_shared_owners);
    while (__stxr(v44 + 1, p_shared_owners));
    v45 = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v46 = __ldxr(v45);
    while (__stxr(v46 + 1, v45));
    v29[1].__shared_owners_ = (uint64_t)v36;
    v29[1].__shared_weak_owners_ = (uint64_t)v29;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
    v48 = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v49 = __ldxr(v48);
    while (__stxr(v49 + 1, v48));
    v29[1].__shared_owners_ = (uint64_t)v36;
    v29[1].__shared_weak_owners_ = (uint64_t)v29;
  }
  do
    v50 = __ldaxr(p_shared_owners);
  while (__stlxr(v50 - 1, p_shared_owners));
  if (!v50)
  {
    ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
    std::__shared_weak_count::__release_weak(v29);
  }
LABEL_46:
  if (v79)
  {
    v51 = &v79->__shared_owners_;
    do
      v52 = __ldaxr((unint64_t *)v51);
    while (__stlxr(v52 - 1, (unint64_t *)v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
  if (v81)
  {
    v53 = &v81->__shared_owners_;
    do
      v54 = __ldaxr((unint64_t *)v53);
    while (__stlxr(v54 - 1, (unint64_t *)v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
      std::__shared_weak_count::__release_weak(v81);
    }
  }
  if (v82)
    v55 = (uint64_t)&v82[1];
  else
    v55 = 0;
  v76 = v55;
  v77 = v83;
  if (v83)
  {
    v56 = (unint64_t *)&v83->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
  }
  v89 = 0;
  v90 = 0;
  v58 = *(std::__shared_weak_count **)(v84 + 128);
  if (v58)
  {
    v58 = std::__shared_weak_count::lock(v58);
    v59 = v58;
    v90 = v58;
    if (v58)
    {
      v58 = *(std::__shared_weak_count **)(v84 + 120);
      v89 = v58;
    }
  }
  else
  {
    v59 = 0;
  }
  v61 = (ImsPrefs *)SipStack::prefs((SipStack *)v58);
  MediaSessionStateMachine::create(&v76, v61, v72 == 2, v73);
  if (v59)
  {
    v62 = (unint64_t *)&v59->__shared_owners_;
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v64 = v77;
  if (v77)
  {
    v65 = (unint64_t *)&v77->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v83;
  if (v83)
  {
    v68 = (unint64_t *)&v83->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v21 = v85;
  if (v85)
  {
LABEL_89:
    v70 = (unint64_t *)&v21->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEEE2664(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v32;
  void *v33;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 104);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  v32 = *(std::__shared_weak_count **)(v30 - 120);
  if (v32)
    std::__shared_weak_count::__release_weak(v32);
  std::__shared_weak_count::~__shared_weak_count(v29);
  operator delete(v33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::stackError(_QWORD *a1, const ImsResult *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[72];
  void *__p[2];
  char v15;
  __int128 v16;
  char v17;

  std::string::basic_string[abi:ne180100]<0>(&v16, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"stackError", 10);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [error=", 8);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v15 < 0)
    operator delete(__p[0]);
  if (v17 < 0)
    operator delete((void *)v16);
  (*(void (**)(_QWORD *, const char *, _QWORD))(*a1 + 24))(a1, "kIBIAllSessions", 0);
  v8 = a1[17];
  if (v8)
  {
    v9 = *(std::__shared_weak_count **)(v8 + 72);
    *(_QWORD *)(v8 + 64) = 0;
    *(_QWORD *)(v8 + 72) = 0;
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  v16 = 0uLL;
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 17), &v16);
  v10 = (std::__shared_weak_count *)*((_QWORD *)&v16 + 1);
  if (*((_QWORD *)&v16 + 1))
  {
    v11 = (unint64_t *)(*((_QWORD *)&v16 + 1) + 8);
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy((char *)a1[13]);
  a1[12] = a1 + 13;
  a1[14] = 0;
  a1[13] = 0;
  ImsResult::ImsResult((ImsResult *)v13, a2);
  RTPStackController::stackError(a1, (const ImsResult *)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
}

void sub_1BEEE2974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  ImsResult::~ImsResult((ImsResult *)&a10);
  _Unwind_Resume(a1);
}

void RTPStackController::stackError(_QWORD *a1, const ImsResult *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE v12[72];
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  v3 = (std::__shared_weak_count *)a1[4];
  if (v3)
  {
    v16 = std::__shared_weak_count::lock(v3);
    if (v16)
    {
      v5 = a1[3];
      v15 = v5;
      if (v5)
      {
        std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v13, a1 + 1);
        ImsResult::ImsResult((ImsResult *)v12, a2);
        (*(void (**)(uint64_t, uint64_t *, _BYTE *))(*(_QWORD *)v5 + 8))(v5, &v13, v12);
        ImsResult::~ImsResult((ImsResult *)v12);
        v6 = v14;
        if (v14)
        {
          p_shared_owners = (unint64_t *)&v14->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
  }
  v9 = v16;
  if (v16)
  {
    v10 = (unint64_t *)&v16->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEE2AB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

_QWORD *IBIRTPStackController::addSession(uint64_t a1, unsigned int a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  void *__p[2];
  char v19;
  void *v20[2];
  uint64_t v21;

  std::string::basic_string[abi:ne180100]<0>(v20, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v20, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"addSession", 10);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" session=", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v19 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  v10 = *(uint64_t **)(a1 + 80);
  v11 = (uint64_t **)(a1 + 80);
  v12 = (uint64_t **)(a1 + 80);
  if (v10)
  {
    while (1)
    {
      while (1)
      {
        v12 = (uint64_t **)v10;
        v13 = *((_DWORD *)v10 + 8);
        if (v13 <= a2)
          break;
        v10 = *v12;
        v11 = v12;
        if (!*v12)
          goto LABEL_13;
      }
      if (v13 >= a2)
        break;
      v10 = v12[1];
      if (!v10)
      {
        v11 = v12 + 1;
        goto LABEL_13;
      }
    }
  }
  else
  {
LABEL_13:
    v14 = (uint64_t *)v12;
    v21 = 1;
    v12 = (uint64_t **)operator new(0x38uLL);
    v20[1] = (void *)(a1 + 80);
    *((_DWORD *)v12 + 8) = a2;
    v12[5] = 0;
    v12[6] = 0;
    *v12 = 0;
    v12[1] = 0;
    v12[2] = v14;
    *v11 = (uint64_t *)v12;
    v15 = **(_QWORD **)(a1 + 72);
    v16 = (uint64_t *)v12;
    if (v15)
    {
      *(_QWORD *)(a1 + 72) = v15;
      v16 = *v11;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 80), v16);
    ++*(_QWORD *)(a1 + 88);
    v20[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v20);
  }
  return std::shared_ptr<IpAddress>::operator=[abi:ne180100](v12 + 5, a3);
}

void sub_1BEEE2D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t IBIRTPStackController::removeSession(IBIRTPStackController *this, unsigned int a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  size_t v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;
  unsigned int v12;

  v12 = a2;
  std::string::basic_string[abi:ne180100]<0>(v10, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v4 = v3;
  v5 = *(_QWORD **)(v3 + 8);
  v6 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v6);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"removeSession", 13);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  return std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::__erase_unique<unsigned int>((uint64_t)this + 72, &v12);
}

void sub_1BEEE2EF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleMediaError(IBIRTPStackController *this, unsigned int a2, int a3, int a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  size_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  IBISession *v20;
  std::__shared_weak_count *v21;
  void *__p[2];
  char v23;
  void *v24[2];
  char v25;
  unsigned int v26;

  v26 = a2;
  std::string::basic_string[abi:ne180100]<0>(v24, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)v24, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v8 = v7;
  v9 = *(_QWORD **)(v7 + 8);
  v10 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v10);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"handleMediaError", 16);
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" rtpTimeout=", 12);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" rtcpTimeout=", 13);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v23 < 0)
    operator delete(__p[0]);
  if (v25 < 0)
    operator delete(v24[0]);
  v20 = 0;
  v21 = 0;
  v18 = 0;
  v19 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v20, (uint64_t)this + 72, &v26, (uint64_t)&v18);
  v11 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v20)
  {
    IBISession::handleMediaError(v20, a3, a4);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v24, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::warn(ims::_logger, (uint64_t)v24, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"handleMediaError", 16);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v23 < 0)
      operator delete(__p[0]);
    if (v25 < 0)
      operator delete(v24[0]);
  }
  v15 = v21;
  if (v21)
  {
    v16 = (unint64_t *)&v21->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_1BEEE324C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  BOOL v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  v8 = *(_QWORD *)(a2 + 8);
  v6 = a2 + 8;
  v7 = v8;
  if (!v8)
    goto LABEL_12;
  v9 = *a3;
  v10 = v6;
  do
  {
    v11 = *(_DWORD *)(v7 + 32);
    v12 = v11 >= v9;
    if (v11 >= v9)
      v13 = (uint64_t *)v7;
    else
      v13 = (uint64_t *)(v7 + 8);
    if (v12)
      v10 = v7;
    v7 = *v13;
  }
  while (*v13);
  if (v10 != v6 && v9 >= *(_DWORD *)(v10 + 32))
  {
    v16 = *(_QWORD *)(v10 + 40);
    v15 = *(_QWORD *)(v10 + 48);
    *a1 = v16;
    a1[1] = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v21, "rtp.util");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"getValueFromMap", 15);
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" Object not found [key=", 23);
    *(_BYTE *)(v14 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v14 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
    *(_OWORD *)a1 = *(_OWORD *)a4;
    *(_QWORD *)a4 = 0;
    *(_QWORD *)(a4 + 8) = 0;
  }
}

void sub_1BEEE3454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleStartMediaResponse(IBIRTPStackController *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  IBISession *v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  int v24;

  v24 = a3;
  std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStartMediaResponse", 24);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v18, (uint64_t)this + 72, (unsigned int *)&v24, (uint64_t)&v16);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v18)
  {
    IBISession::handleStartMediaResponse((uint64_t **)v18, a2, v24);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"handleStartMediaResponse", 24);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEEE3784(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::handleStopMediaResponse(IBIRTPStackController *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  IBISession *v19;
  std::__shared_weak_count *v20;
  void *__p[2];
  char v22;
  void *v23[2];
  char v24;
  int v25;

  v25 = a3;
  std::string::basic_string[abi:ne180100]<0>(v23, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v23, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStopMediaResponse", 23);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (v24 < 0)
    operator delete(v23[0]);
  v19 = 0;
  v20 = 0;
  v17 = 0;
  v18 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v19, (uint64_t)this + 72, (unsigned int *)&v25, (uint64_t)&v17);
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v19)
  {
    if (a2 == 2)
      v12 = 0;
    else
      v12 = a2;
    IBISession::handleStopMediaResponse((uint64_t **)v19, v12, v25);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v23, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v13 = ImsLogger::warn(ims::_logger, (uint64_t)v23, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"handleStopMediaResponse", 23);
    *(_BYTE *)(v13 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    if (v22 < 0)
      operator delete(__p[0]);
    if (v24 < 0)
      operator delete(v23[0]);
  }
  v14 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEEE3B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::handleTerminateMediaSessionResponse(IBIRTPStackController *this, unsigned int a2, unsigned int a3)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;
  unsigned int v23;

  v23 = a3;
  std::string::basic_string[abi:ne180100]<0>(v21, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleTerminateMediaSessionResponse", 35);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v5 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  v17 = 0;
  v18 = 0;
  v15 = 0;
  v16 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v17, (uint64_t)this + 72, &v23, (uint64_t)&v15);
  v8 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (v17)
  {
    (*(void (**)(void))(*(_QWORD *)v17 + 152))();
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v11 = ImsLogger::warn(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"handleTerminateMediaSessionResponse", 35);
    *(_BYTE *)(v11 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
  }
  v12 = v18;
  if (v18)
  {
    v13 = (unint64_t *)&v18->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEEE3E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::handleStartDTMFCodeResponse(IBIRTPStackController *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  IBISession *v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  int v24;

  v24 = a3;
  std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStartDTMFCodeResponse", 27);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v18, (uint64_t)this + 72, (unsigned int *)&v24, (uint64_t)&v16);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v18)
  {
    IBISession::handleStartDTMFCodeResponse(v18, a2, v24);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"handleStartDTMFCodeResponse", 27);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEEE4214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::handleStopDTMFCodeResponse(IBIRTPStackController *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  IBISession *v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  int v24;

  v24 = a3;
  std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleStopDTMFCodeResponse", 26);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v18, (uint64_t)this + 72, (unsigned int *)&v24, (uint64_t)&v16);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v18)
  {
    IBISession::handleStopDTMFCodeResponse(v18, a2, v24);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"handleStopDTMFCodeResponse", 26);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEEE4594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void IBIRTPStackController::handleCreateAudioMediaSessionResponse(IBIRTPStackController *this, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(v21, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleCreateAudioMediaSessionResponse", 37);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  v12 = *((_QWORD *)this + 15);
  v11 = (_QWORD *)((char *)this + 120);
  v10 = v12;
  if (v12)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v10 + 160))(v10, a2, a3);
    v17 = 0;
    v18 = 0;
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](v11, &v17);
    v13 = v18;
    if (v18)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v21, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v16 = ImsLogger::warn(ims::_logger, (uint64_t)v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"handleCreateAudioMediaSessionResponse", 37);
    *(_BYTE *)(v16 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (v22 < 0)
      operator delete(v21[0]);
  }
}

void sub_1BEEE48D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::handleConfigureAudioMediaSessionResponse(IBIRTPStackController *this, int a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  size_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  IBISession *v18;
  std::__shared_weak_count *v19;
  void *__p[2];
  char v21;
  void *v22[2];
  char v23;
  int v24;

  v24 = a3;
  std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v5 = ImsLogger::debug(ims::_logger, (uint64_t)v22, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v6 = v5;
  v7 = *(_QWORD **)(v5 + 8);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"handleConfigureAudioMediaSessionResponse", 40);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" result=", 8);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v21 < 0)
    operator delete(__p[0]);
  if (v23 < 0)
    operator delete(v22[0]);
  v18 = 0;
  v19 = 0;
  v16 = 0;
  v17 = 0;
  ims::getValueFromMap<unsigned int,std::shared_ptr<IBISession>>(&v18, (uint64_t)this + 72, (unsigned int *)&v24, (uint64_t)&v16);
  v9 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v18)
  {
    IBISession::handleConfigureAudioMediaSessionResponse((uint64_t **)v18, a2, v24);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v22, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v12 = ImsLogger::warn(ims::_logger, (uint64_t)v22, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"handleConfigureAudioMediaSessionResponse", 40);
    *(_BYTE *)(v12 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"called for non-existent session. ignore it.", 43);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    if (v21 < 0)
      operator delete(__p[0]);
    if (v23 < 0)
      operator delete(v22[0]);
  }
  v13 = v19;
  if (v19)
  {
    v14 = (unint64_t *)&v19->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
}

void sub_1BEEE4C0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a25 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPStackController::sendAudioCallEvent@<X0>(_QWORD *a1@<X0>, __int16 a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  _WORD *v10;
  uint64_t v11;
  _WORD *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  IBIRTPClient *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t GMID;
  uint64_t (*v25)(const unsigned __int8 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  void *__p[2];
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  void *aBlock[2];
  char v44;
  void *v45[2];
  char v46;
  void *v47;
  std::__shared_weak_count *v48;
  char v49;
  _OWORD v50[2];
  uint64_t v51;
  void *v52;
  uint64_t v53;
  uint64_t (*v54)(_QWORD *, uint64_t, uint64_t);
  void *v55;
  void *v56;
  std::__shared_weak_count *v57;
  uint64_t (*v58)(const unsigned __int8 *);

  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v52, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v52);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"sendAudioCallEvent", 18);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [event=", 8);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (SHIBYTE(v54) < 0)
    operator delete(v52);
  if (SBYTE7(v38) < 0)
    operator delete(__p[0]);
  v42 = 0;
  v40 = 0u;
  v41 = 0u;
  v38 = 0u;
  v39 = 0u;
  *(_OWORD *)__p = 0u;
  AriSdk::ARI_CsiIceAudCallEventReq_SDK::ARI_CsiIceAudCallEventReq_SDK((AriSdk::ARI_CsiIceAudCallEventReq_SDK *)__p);
  v10 = (_WORD *)operator new();
  *v10 = a2;
  v11 = v41;
  *(_QWORD *)&v41 = v10;
  if (v11)
    MEMORY[0x1C3B87100](v11, 0x1000C40BDFB0063);
  v12 = (_WORD *)operator new();
  *v12 = 0;
  v13 = *((_QWORD *)&v41 + 1);
  *((_QWORD *)&v41 + 1) = v12;
  if (v13)
    MEMORY[0x1C3B87100](v13, 0x1000C40BDFB0063);
  LODWORD(v52) = 123;
  AriSdk::Tlv<unsigned short>::operator=<unsigned int,void>(&v42, &v52);
  v15 = (IBIRTPClient *)a1[17];
  v14 = (std::__shared_weak_count *)a1[18];
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  if (!v15)
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0x40000000;
    if (!v14)
      return MEMORY[0x1C3B8686C](__p);
    goto LABEL_46;
  }
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v52, (_QWORD *)v15 + 1);
  v19 = v52;
  v18 = (std::__shared_weak_count *)v53;
  if (v53)
  {
    v20 = (unint64_t *)(v53 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
    v22 = (unint64_t *)&v18->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
  v25 = IBIRTPClient::callbackForRequest(v15, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
  v52 = (void *)MEMORY[0x1E0C809B0];
  v53 = 1174405120;
  v54 = ___ZN12IBIRTPClient4sendIN6AriSdk29ARI_CsiIceAudCallEventReq_SDKEEE9ImsResultRT__block_invoke;
  v55 = &__block_descriptor_tmp_38;
  v56 = v19;
  v57 = v18;
  if (v18)
  {
    p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
    do
      v27 = __ldxr(p_shared_weak_owners);
    while (__stxr(v27 + 1, p_shared_weak_owners));
  }
  v58 = v25;
  v28 = *((_QWORD *)v15 + 11);
  v45[0] = 0;
  ice::detail::wrapCallback<int>((uint64_t)&v52, v45);
  v51 = 0;
  memset(v50, 0, sizeof(v50));
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v47, (_QWORD *)(v28 + 8));
  ice::SendMsgBaseProxy::SendMsgBaseProxy();
  v29 = v48;
  if (v48)
  {
    v30 = (unint64_t *)&v48->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  aBlock[0] = v45[0];
  v45[0] = 0;
  ice::SendMsgBaseProxy::callback();
  if (aBlock[0])
    _Block_release(aBlock[0]);
  if (v45[0])
    _Block_release(v45[0]);
  MEMORY[0x1C3B86680](v50);
  std::string::basic_string[abi:ne180100]<0>(&v47, "ibi.client");
  std::string::basic_string[abi:ne180100]<0>(v45, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v32 = ImsLogger::debug(ims::_logger, (uint64_t)&v47, (uint64_t)v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Sent: ", 6);
  *(_BYTE *)(v32 + 17) = 0;
  v33 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
  IBIRTPClient::getMsgName((v33 >> 17) & 0xFFFF8000 | ((_DWORD)v33 << 26), aBlock);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v32 + 32))(v32, aBlock);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" successfully", 13);
  *(_BYTE *)(v32 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v32 + 17) = 0;
  if (v44 < 0)
    operator delete(aBlock[0]);
  if (v46 < 0)
    operator delete(v45[0]);
  if (v49 < 0)
    operator delete(v47);
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if (v57)
    std::__shared_weak_count::__release_weak(v57);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  if (v14)
  {
LABEL_46:
    v34 = (unint64_t *)&v14->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  return MEMORY[0x1C3B8686C](__p);
}

void sub_1BEEE51F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *aBlock,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v45;

  if (a42 < 0)
    operator delete(__p);
  v45 = *(std::__shared_weak_count **)(v43 - 80);
  if (v45)
    std::__shared_weak_count::__release_weak(v45);
  if (v42)
    std::__shared_weak_count::__release_weak(v42);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  MEMORY[0x1C3B8686C](&a11);
  _Unwind_Resume(a1);
}

uint64_t IBIRTPStackController::reportAPSession(_QWORD *a1, IpAddress **a2, IpAddress **a3, __int16 a4, __int16 a5, int a6)
{
  uint64_t v10;
  int v11;
  int v12;
  _BYTE *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  IBIRTPClient *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  const char *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t GMID;
  uint64_t (*v29)(const unsigned __int8 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  _QWORD v41[2];
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  IBIRTPClient *v49;
  std::__shared_weak_count *v50;
  int v51;
  void *v52;
  _BYTE *v53;
  uint64_t v54;
  void *__p[2];
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t v63[4];
  __int128 v64;
  uint64_t v65;
  __int16 v66;
  __int16 v67;
  void *v68[2];
  char v69;
  void *v70[2];
  char v71;
  void *v72;
  std::__shared_weak_count *v73;
  char v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;
  void *v78;
  uint64_t v79;
  uint64_t (*v80)(_QWORD *, uint64_t, uint64_t);
  void *v81;
  void *v82;
  std::__shared_weak_count *v83;
  uint64_t (*v84)(const unsigned __int8 *);

  v67 = a4;
  v66 = a5;
  std::string::basic_string[abi:ne180100]<0>(__p, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(&v78, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v10 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v78);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"reportAPSession", 15);
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" [localPort=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" remotePort=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" callActive=", 12);
  *(_BYTE *)(v10 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v10 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" remoteAddress=", 15);
  *(_BYTE *)(v10 + 17) = 0;
  if (*a3)
    IpAddress::asString(*a3, 0, &v75);
  else
    std::string::basic_string[abi:ne180100]<0>(&v75, "0");
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v10 + 32))(v10, &v75);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" localAddress=", 14);
  *(_BYTE *)(v10 + 17) = 0;
  if (*a2)
    IpAddress::asString(*a2, 0, &v72);
  else
    std::string::basic_string[abi:ne180100]<0>(&v72, "0");
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, &v72);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  if (v74 < 0)
    operator delete(v72);
  if (SBYTE7(v76) < 0)
    operator delete((void *)v75);
  if (SHIBYTE(v80) < 0)
    operator delete(v78);
  if (SBYTE7(v56) < 0)
    operator delete(__p[0]);
  v65 = 0;
  v64 = 0u;
  v62 = 0u;
  memset(v63, 0, sizeof(v63));
  v60 = 0u;
  v61 = 0u;
  v58 = 0u;
  v59 = 0u;
  v56 = 0u;
  v57 = 0u;
  *(_OWORD *)__p = 0u;
  AriSdk::ARI_IBICallPsRtpReq_SDK::ARI_IBICallPsRtpReq_SDK((AriSdk::ARI_IBICallPsRtpReq_SDK *)__p);
  v52 = 0;
  v53 = 0;
  v54 = 0;
  std::vector<unsigned char>::vector(&v52, 0x10uLL);
  v51 = 0;
  LODWORD(v78) = 0;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v59, &v78);
  if (a6)
  {
    v11 = v66 ? 2055 : 7;
    v51 = v11;
    if (*a3)
      v51 = v11 | 0x400;
  }
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v59 + 1, &v51);
  if (a1[14])
    v12 = *(unsigned __int8 *)(a1[12] + 56);
  else
    v12 = 255;
  LODWORD(v78) = v12;
  AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v60, &v78);
  v78 = (void *)(*(uint64_t (**)(IpAddress *, void *, int64_t))(*(_QWORD *)*a2 + 200))(*a2, v52, v53 - (_BYTE *)v52);
  AriSdk::Tlv<unsigned char>::operator=<unsigned long,void>((uint64_t *)&v60 + 1, &v78);
  ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>((uint64_t)&v61, (uint64_t)&v52);
  AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v62 + 1, &v67);
  if (*a3)
  {
    v78 = (void *)(*(uint64_t (**)(IpAddress *, void *, int64_t))(*(_QWORD *)*a3 + 200))(*a3, v52, v53 - (_BYTE *)v52);
    AriSdk::Tlv<unsigned char>::operator=<unsigned long,void>(v63, &v78);
    ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>((uint64_t)&v63[1], (uint64_t)&v52);
  }
  else
  {
    v13 = (_BYTE *)operator new();
    *v13 = 0;
    v14 = v63[0];
    v63[0] = (uint64_t)v13;
    if (v14)
      MEMORY[0x1C3B87100](v14, 0x1000C4077774924);
  }
  AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>((uint64_t *)&v64, &v66);
  v16 = (IBIRTPClient *)a1[17];
  v15 = (std::__shared_weak_count *)a1[18];
  v49 = v16;
  v50 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v78, "ibi.stackcontroller");
    std::string::basic_string[abi:ne180100]<0>(&v75, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::debug(ims::_logger, (uint64_t)&v78, (uint64_t)&v75);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Sending IBICallPsRtpReq for ", 28);
    *(_BYTE *)(v19 + 17) = 0;
    if (a6)
      v20 = "active session";
    else
      v20 = "terminated session";
    if (a6)
      v21 = 14;
    else
      v21 = 18;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)v20, v21);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (SBYTE7(v76) < 0)
      operator delete((void *)v75);
    if (SHIBYTE(v80) < 0)
      operator delete(v78);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v78, (_QWORD *)v16 + 1);
    v23 = v78;
    v22 = (std::__shared_weak_count *)v79;
    if (v79)
    {
      v24 = (unint64_t *)(v79 + 16);
      do
        v25 = __ldxr(v24);
      while (__stxr(v25 + 1, v24));
      v26 = (unint64_t *)&v22->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
    GMID = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
    v29 = IBIRTPClient::callbackForRequest(v16, (GMID >> 17) & 0xFFFF8000 | ((_DWORD)GMID << 26));
    v78 = (void *)MEMORY[0x1E0C809B0];
    v79 = 1174405120;
    v80 = ___ZN12IBIRTPClient4sendIN6AriSdk23ARI_IBICallPsRtpReq_SDKEEE9ImsResultRT__block_invoke;
    v81 = &__block_descriptor_tmp_45;
    v82 = v23;
    v83 = v22;
    if (v22)
    {
      p_shared_weak_owners = (unint64_t *)&v22->__shared_weak_owners_;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
    }
    v84 = v29;
    v32 = *((_QWORD *)v16 + 11);
    v70[0] = 0;
    ice::detail::wrapCallback<int>((uint64_t)&v78, v70);
    LODWORD(v75) = 0;
    if (!(_QWORD)v59)
      AriSdk::Tlv<unsigned int>::operator=<unsigned int &,void>((uint64_t *)&v59, &v75);
    v75 = 0u;
    v76 = 0u;
    v77 = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v72, (_QWORD *)(v32 + 8));
    ice::SendMsgBaseProxy::SendMsgBaseProxy();
    v33 = v73;
    if (v73)
    {
      v34 = (unint64_t *)&v73->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v68[0] = v70[0];
    v70[0] = 0;
    ice::SendMsgBaseProxy::callback();
    if (v68[0])
      _Block_release(v68[0]);
    if (v70[0])
      _Block_release(v70[0]);
    MEMORY[0x1C3B86680](&v75);
    std::string::basic_string[abi:ne180100]<0>(&v72, "ibi.client");
    std::string::basic_string[abi:ne180100]<0>(v70, (char *)&str_1_12);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v36 = ImsLogger::debug(ims::_logger, (uint64_t)&v72, (uint64_t)v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"Sent: ", 6);
    *(_BYTE *)(v36 + 17) = 0;
    v37 = AriSdk::MsgBase::getGMID((AriSdk::MsgBase *)__p);
    IBIRTPClient::getMsgName((v37 >> 17) & 0xFFFF8000 | ((_DWORD)v37 << 26), v68);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v36 + 32))(v36, v68);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" successfully", 13);
    *(_BYTE *)(v36 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v36 + 17) = 0;
    if (v69 < 0)
      operator delete(v68[0]);
    if (v71 < 0)
      operator delete(v70[0]);
    if (v74 < 0)
      operator delete(v72);
    v47 = 0;
    v48 = 0;
    v41[0] = &off_1E78B7238;
    v41[1] = &_bambiDomain;
    v42 = 0;
    v45 = 0;
    v46 = 0;
    v43 = 0;
    v44 = 0;
    if (v83)
      std::__shared_weak_count::__release_weak(v83);
    if (v22)
      std::__shared_weak_count::__release_weak(v22);
    ImsResult::~ImsResult((ImsResult *)v41);
  }
  if (v15)
  {
    v38 = (unint64_t *)&v15->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v52)
  {
    v53 = v52;
    operator delete(v52);
  }
  return MEMORY[0x1C3B86818](__p);
}

void sub_1BEEE5AF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (__p)
    operator delete(__p);
  MEMORY[0x1C3B86818](&a25);
  _Unwind_Resume(a1);
}

void ibiUtils::ibiSetValue<unsigned char,16ul,std::vector<unsigned char>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  const void *v4;
  size_t v5;
  const char *v6;
  __n128 __p;
  uint64_t v8;

  v4 = *(const void **)a2;
  v3 = *(_QWORD *)(a2 + 8);
  v5 = v3 - *(_QWORD *)a2;
  v8 = 0;
  __p = 0uLL;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, v4, v3, v5);
  AriSdk::TlvArray<unsigned char,16ul>::operator=(a1, &__p, v6);
  if (__p.n128_u64[0])
  {
    __p.n128_u64[1] = __p.n128_u64[0];
    operator delete((void *)__p.n128_u64[0]);
  }
}

void sub_1BEEE5CFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t *AriSdk::Tlv<unsigned short>::operator=<unsigned short &,void>(uint64_t *a1, _WORD *a2)
{
  _WORD *v4;
  uint64_t v5;

  v4 = (_WORD *)operator new();
  *v4 = *a2;
  v5 = *a1;
  *a1 = (uint64_t)v4;
  if (v5)
    MEMORY[0x1C3B87100](v5, 0x1000C40BDFB0063);
  return a1;
}

void IBIRTPStackController::startAudio(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _BYTE v6[72];
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"startAudio", 10);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (!IBISession::_activeAudio)
  {
    IBIRTPStackController::sendAudioCallEvent(a1, 0, (uint64_t)v6);
    ImsResult::~ImsResult((ImsResult *)v6);
    IBISession::_activeAudio = 1;
  }
}

void sub_1BEEE5ECC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

void IBIRTPStackController::stopAudio(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  _BYTE v6[72];
  void *__p[2];
  char v8;
  void *v9[2];
  char v10;

  std::string::basic_string[abi:ne180100]<0>(v9, "ibi.stackcontroller");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_12);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v9, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"stopAudio", 9);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v8 < 0)
    operator delete(__p[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (IBISession::_activeAudio)
  {
    if (!a1[11])
    {
      IBIRTPStackController::sendAudioCallEvent(a1, 1, (uint64_t)v6);
      ImsResult::~ImsResult((ImsResult *)v6);
      IBISession::_activeAudio = 0;
    }
  }
}

void sub_1BEEE6050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (*(char *)(v24 - 33) < 0)
    operator delete(*(void **)(v24 - 56));
  _Unwind_Resume(exception_object);
}

BOOL IBIRTPStackController::sessionExists(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  _BOOL8 v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;

  v3 = *(_QWORD **)(a1 + 72);
  v4 = (_QWORD *)(a1 + 80);
  if (v3 == (_QWORD *)(a1 + 80))
    return 0;
  do
  {
    v6 = v3[5];
    v7 = (std::__shared_weak_count *)v3[6];
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v6 + 24) + 176))(v6 + 24);
    v11 = v10 == a3;
    if (v7)
    {
      v12 = (unint64_t *)&v7->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    if (v10 == a3)
      break;
    v14 = (_QWORD *)v3[1];
    if (v14)
    {
      do
      {
        v15 = v14;
        v14 = (_QWORD *)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        v15 = (_QWORD *)v3[2];
        v16 = *v15 == (_QWORD)v3;
        v3 = v15;
      }
      while (!v16);
    }
    v3 = v15;
  }
  while (v15 != v4);
  return v11;
}

void sub_1BEEE6174(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  _Unwind_Resume(exception_object);
}

char *IBIRTPStackController::setAppId(char *result, __int128 *a2, int a3)
{
  __int128 *v3;
  __int128 *v4;
  char v5;
  __int128 *v6[5];

  if (a3 != 255)
  {
    v6[3] = v3;
    v6[4] = v4;
    v5 = a3;
    v6[0] = a2;
    result = std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(result + 96), (void **)a2, v6);
    result[56] = v5;
  }
  return result;
}

BOOL RTPStackController::controllerInitialized(RTPStackController *this)
{
  return *((_DWORD *)this + 16) == 2;
}

uint64_t RTPStackController::setStackControllerState(uint64_t result, int a2)
{
  *(_DWORD *)(result + 64) = a2;
  return result;
}

char *std::__tree<std::__value_type<std::string,unsigned char>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned char>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned char>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, void **a2, __int128 **a3)
{
  void **v5;
  char *v6;
  void **v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v15 = 0;
  v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>(a1, &v15, a2);
  v6 = (char *)*v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v6 = (char *)operator new(0x40uLL);
    v9 = (std::string *)(v6 + 32);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      *((_QWORD *)v6 + 6) = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[56] = 0;
    v11 = v15;
    *(_QWORD *)v6 = 0;
    *((_QWORD *)v6 + 1) = 0;
    *((_QWORD *)v6 + 2) = v11;
    *v7 = v6;
    v12 = **(_QWORD **)a1;
    v13 = (uint64_t *)v6;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v7;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v6;
}

void sub_1BEEE62EC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(*a1);
    std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::destroy(a1[1]);
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 5));
    operator delete(a1);
  }
}

void std::__shared_ptr_emplace<IBIRTPClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C17D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBIRTPClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C17D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IBIRTPClient>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 40);
    operator delete(v1);
  }
}

uint64_t std::__tree<std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,std::shared_ptr<IBISession>>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,std::shared_ptr<IBISession>>>>::__erase_unique<unsigned int>(uint64_t a1, unsigned int *a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v3 = *a2;
  v4 = a1 + 8;
  do
  {
    v5 = *(_DWORD *)(v2 + 32);
    v6 = v5 >= v3;
    if (v5 >= v3)
      v7 = (uint64_t *)v2;
    else
      v7 = (uint64_t *)(v2 + 8);
    if (v6)
      v4 = v2;
    v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32))
    return 0;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__remove_node_pointer((uint64_t **)a1, (uint64_t *)v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v4 + 40);
  operator delete((void *)v4);
  return 1;
}

void std::__shared_ptr_emplace<IBISession>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1828;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBISession>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1828;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IBISession>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk29ARI_CsiIceAudCallEventReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BEEE659C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12IBIRTPClientEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void __destroy_helper_block_e8_32c37_ZTSNSt3__18weak_ptrI12IBIRTPClientEE(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void *ice::detail::wrapCallback<int>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  void *result;
  _QWORD aBlock[5];

  aBlock[0] = MEMORY[0x1E0C809B0];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke;
  aBlock[3] = &unk_1E78C18A0;
  aBlock[4] = a1;
  result = _Block_copy(aBlock);
  *a2 = result;
  return result;
}

uint64_t ___ZN3ice6detail12wrapCallbackIiEEN8dispatch5blockIU13block_pointerFiPhjEEENSt3__117integral_constantIiLi2EEEU13block_pointerFT_S4_jE_block_invoke(uint64_t a1)
{
  (*(void (**)(void))(*(_QWORD *)(a1 + 32) + 16))();
  return 0;
}

uint64_t AriSdk::TlvArray<unsigned char,16ul>::operator=(uint64_t a1, __n128 *a2, const char *a3)
{
  const char *v5;
  void *p_p;
  void *__p;
  char v9;

  if (a2->n128_u64[1] - a2->n128_u64[0] < 0x11)
  {
    std::vector<unsigned char>::__move_assign(a1, a2);
  }
  else
  {
    AriOsa::LogSrcInfo((AriOsa *)"/AppleInternal/Library/BuildRoots/ee8c6483-5bc6-11ef-a57d-0a3c3d30a6d7/Applications/Xcode.app/Contents/Developer/Platforms/iPhoneOS.platform/Developer/SDKs/iPhoneOS18.0.Internal.sdk/usr/local/include/ARI/ari_sdk_msg.h", "operator=", a3);
    if (v9 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    Ari::Log((Ari *)8, (uint64_t)"(%s:%d) Array assignment too large(%p), got(%zu) max(%zu)", v5, p_p, 360, a1, a2->n128_u64[1] - a2->n128_u64[0], 16);
    if (v9 < 0)
      operator delete(__p);
  }
  return a1;
}

void sub_1BEEE672C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *std::vector<unsigned char>::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(_QWORD *result, const void *a2, uint64_t a3, size_t __sz)
{
  _QWORD *v6;
  uint64_t v7;
  size_t v8;

  if (__sz)
  {
    v6 = result;
    result = std::vector<unsigned char>::__vallocate[abi:ne180100](result, __sz);
    v7 = v6[1];
    v8 = a3 - (_QWORD)a2;
    if (v8)
      result = memmove((void *)v6[1], a2, v8);
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_1BEEE67A4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

__n128 std::vector<unsigned char>::__move_assign(uint64_t a1, __n128 *a2)
{
  void *v4;
  __n128 result;

  v4 = *(void **)a1;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = v4;
    operator delete(v4);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  result = *a2;
  *(__n128 *)a1 = *a2;
  *(_QWORD *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t ___ZN12IBIRTPClient4sendIN6AriSdk23ARI_IBICallPsRtpReq_SDKEEE9ImsResultRT__block_invoke(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  uint64_t v8;
  void (*v9)(uint64_t, uint64_t, uint64_t *);
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v19;
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v22;

  v21 = 0;
  v22 = 0;
  v4 = (std::__shared_weak_count *)a1[5];
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    v22 = v7;
    if (v7)
    {
      v8 = a1[4];
      v21 = v8;
      if (v8)
      {
        v9 = (void (*)(uint64_t, uint64_t, uint64_t *))a1[6];
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        v19 = v8;
        v20 = v7;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        v9(a2, a3, &v19);
        v12 = v20;
        if (v20)
        {
          v13 = (unint64_t *)&v20->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
      }
    }
  }
  v15 = v22;
  if (v22)
  {
    v16 = (unint64_t *)&v22->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  return 0;
}

void sub_1BEEE6908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipProxyRequireHeader::~SipProxyRequireHeader(char **this)
{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
}

{
  *this = (char *)off_1E78CE4E0;
  std::__tree<std::string>::destroy((uint64_t)(this + 8), this[9]);
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipMultiStringHeader *SipProxyRequireHeader::clone(SipProxyRequireHeader *this)
{
  SipMultiStringHeader *v2;

  v2 = (SipMultiStringHeader *)operator new();
  SipMultiStringHeader::SipMultiStringHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C19B8;
  return v2;
}

void sub_1BEEE69F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40045FEA15);
  _Unwind_Resume(a1);
}

void LazuliSuccessReportHeader::create(const std::string *a1@<X0>, std::string **a2@<X8>)
{
  std::string *v4;
  unint64_t *p_size;
  std::string *v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::string *)operator new(0x70uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  p_size = &v4->__r_.__value_.__l.__size_;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C1AC8;
  v6 = v4 + 1;
  LazuliStringHeader::LazuliStringHeader(v4 + 1, &LazuliHeader::kHeaderSuccessReport, a1);
  v4[4].__r_.__value_.__s.__data_[8] = 1;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C1B18;
  v7 = (std::__shared_weak_count *)v4[1].__r_.__value_.__r.__words[2];
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v8 = __ldxr(p_size);
    while (__stxr(v8 + 1, p_size));
    v9 = &v4->__r_.__value_.__r.__words[2];
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v4[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    v4[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_size);
    while (__stxr(v11 + 1, p_size));
    v12 = &v4->__r_.__value_.__r.__words[2];
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    v4[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  }
  do
    v14 = __ldaxr(p_size);
  while (__stlxr(v14 - 1, p_size));
  if (!v14)
  {
    (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
LABEL_14:
  *a2 = v6;
  a2[1] = v4;
}

void sub_1BEEE6B30(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliSuccessReportHeader::~LazuliSuccessReportHeader(void **this)
{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

double LazuliSuccessReportHeader::clone@<D0>(LazuliSuccessReportHeader *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  double result;
  __int128 v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C1B90;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  v4[3] = off_1E78C1A50;
  *((_BYTE *)v4 + 104) = 1;
  *(_QWORD *)&v6 = v4 + 3;
  *((_QWORD *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1BEEE6C60(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliSuccessReportHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1B90;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliSuccessReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1B90;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliSuccessReportHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t SDPRTCPXR::SDPRTCPXR(uint64_t a1, __int128 **a2, _QWORD *a3, __int128 *a4)
{
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::string *v11;
  __int128 v12;
  void *__p[2];
  uint64_t v15;

  std::string::basic_string[abi:ne180100]<0>(__p, "rtcp-xr");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v15) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v15) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v15;
  }
  *(_QWORD *)a1 = &off_1E78C1BE0;
  *(_QWORD *)(a1 + 40) = *a3;
  v8 = a3[1];
  *(_QWORD *)(a1 + 48) = v8;
  if (v8)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a1 + 56), *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3));
  v11 = (std::string *)(a1 + 80);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v11, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v12 = *a4;
    *(_QWORD *)(a1 + 96) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v11->__r_.__value_.__l.__data_ = v12;
  }
  return a1;
}

void sub_1BEEE6EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  va_list va;

  va_start(va, a4);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v6);
  *(_QWORD *)v4 = v7;
  if (*(char *)(v4 + 39) < 0)
    operator delete(*v5);
  _Unwind_Resume(a1);
}

void SDPRTCPXR::toStream(SDPRTCPXR *this, ImsOutStream *a2)
{
  __int128 *v2;
  __int128 *v3;
  char i;
  __int128 v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  std::string __p;
  std::string v12;
  std::string v13;
  std::string v14;

  v2 = (__int128 *)*((_QWORD *)this + 7);
  v3 = (__int128 *)*((_QWORD *)this + 8);
  if (v2 != v3)
  {
    for (i = 0; ; i = 1)
    {
      memset(&v14, 0, sizeof(v14));
      if ((*((char *)v2 + 23) & 0x80000000) == 0)
        break;
      std::string::__init_copy_ctor_external(&v14, *(const std::string::value_type **)v2, *((_QWORD *)v2 + 1));
      if ((i & 1) != 0)
        goto LABEL_7;
LABEL_8:
      v8 = (_QWORD *)*((_QWORD *)a2 + 1);
      v13.__r_.__value_.__s.__data_[0] = 97;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
      *((_BYTE *)a2 + 17) = 0;
      v9 = (_QWORD *)*((_QWORD *)a2 + 1);
      v13.__r_.__value_.__s.__data_[0] = 61;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(std::string *__return_ptr, SDPRTCPXR *))(*(_QWORD *)this + 32))(&v12, this);
      LoggableString::LoggableString(&v13, &v12);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v13);
      v10 = (_QWORD *)*((_QWORD *)a2 + 1);
      __p.__r_.__value_.__s.__data_[0] = 58;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v10, (uint64_t)&__p, 1);
      *((_BYTE *)a2 + 17) = 0;
      LoggableString::LoggableString(&__p, &v14);
      (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v13.__r_.__value_.__l.__data_);
      if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v12.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
      v2 = (__int128 *)((char *)v2 + 24);
      if (v2 == v3)
        return;
    }
    v7 = *v2;
    v14.__r_.__value_.__r.__words[2] = *((_QWORD *)v2 + 2);
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
    if ((i & 1) == 0)
      goto LABEL_8;
LABEL_7:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\r\n", 2);
    *((_BYTE *)a2 + 17) = 0;
    goto LABEL_8;
  }
}

void sub_1BEEE70D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a33 < 0)
    operator delete(a28);
  _Unwind_Resume(exception_object);
}

_QWORD *SDPRTCPXR::value@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "");
}

_QWORD *ims::toString<UacAccessResponse>@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 5)
    v5 = "Unknown";
  else
    v5 = off_1E78C1E10[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

_QWORD *ims::toString<UacCallStatus>@<X0>(int *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  char *v5;

  v4 = *a1;
  if (v4 > 4)
    v5 = "Unknown";
  else
    v5 = off_1E78C1E40[v4];
  return std::string::basic_string[abi:ne180100]<0>(a2, v5);
}

uint64_t nas::barringTypeFromString(uint64_t a1)
{
  const char *v1;

  if (*(char *)(a1 + 23) >= 0)
    v1 = (const char *)a1;
  else
    v1 = *(const char **)a1;
    return 2;
  if (!strcasecmp(v1, "SSAC"))
    return 1;
    return 4;
  if (!strcasecmp(v1, "BOTH"))
    return 3;
  return 0;
}

void IMSNasClient::notifyDelegates(_QWORD *a1, int a2, __int16 *a3, int a4)
{
  std::__shared_weak_count *v4;
  void (***v9)(_QWORD, _BYTE *, __int16 *);
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  __int16 v21;
  int v22;
  char v23;
  int v24;
  char v25;
  _BYTE v26[32];
  void (***v27)(_QWORD, _BYTE *, _WORD *);
  std::__shared_weak_count *v28;

  v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    v9 = (void (***)(_QWORD, _BYTE *, __int16 *))a1[1];
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v11 = __ldxr(p_shared_weak_owners);
    while (__stxr(v11 + 1, p_shared_weak_owners));
    v12 = std::__shared_weak_count::lock(v4);
    v28 = v12;
    if (v12)
    {
      v13 = v12;
      v27 = v9;
      std::__shared_weak_count::__release_weak(v4);
      if (v9)
      {
        v14 = (_QWORD *)a1[3];
        v15 = a1 + 4;
        if (v14 != v15)
        {
          do
          {
            memset(v26, 0, sizeof(v26));
            if (*((char *)v14 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v26, (const std::string::value_type *)v14[4], v14[5]);
            }
            else
            {
              *(_OWORD *)v26 = *((_OWORD *)v14 + 2);
              *(_QWORD *)&v26[16] = v14[6];
            }
            *(_QWORD *)&v26[24] = v14[7];
            v16 = (*(_DWORD *)&v26[24] & a4) != 0 && *(_DWORD *)&v26[28] == a2;
            if (v16)
            {
              v21 = *a3;
              v22 = *((_DWORD *)a3 + 1);
              v23 = *((_BYTE *)a3 + 8);
              v24 = *((_DWORD *)a3 + 3);
              v25 = *((_BYTE *)a3 + 16);
              (**v9)(v9, v26, &v21);
            }
            if ((v26[23] & 0x80000000) != 0)
              operator delete(*(void **)v26);
            v17 = (_QWORD *)v14[1];
            if (v17)
            {
              do
              {
                v18 = v17;
                v17 = (_QWORD *)*v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                v18 = (_QWORD *)v14[2];
                v16 = *v18 == (_QWORD)v14;
                v14 = v18;
              }
              while (!v16);
            }
            v14 = v18;
          }
          while (v18 != v15);
        }
      }
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEEE7430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void IMSNasClient::notifyDelegates(_QWORD *a1, int a2, __int16 *a3, uint64_t a4, uint64_t a5)
{
  std::__shared_weak_count *v5;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  BOOL v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int16 v24;
  int v25;
  char v26;
  int v27;
  char v28;
  _BYTE v29[32];
  uint64_t v30;
  std::__shared_weak_count *v31;

  v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    v11 = a1[1];
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v13 = __ldxr(p_shared_weak_owners);
    while (__stxr(v13 + 1, p_shared_weak_owners));
    v14 = std::__shared_weak_count::lock(v5);
    v31 = v14;
    if (v14)
    {
      v15 = v14;
      v30 = v11;
      std::__shared_weak_count::__release_weak(v5);
      if (v11)
      {
        v16 = (_QWORD *)a1[3];
        v17 = a1 + 4;
        if (v16 != v17)
        {
          do
          {
            memset(v29, 0, sizeof(v29));
            if (*((char *)v16 + 55) < 0)
            {
              std::string::__init_copy_ctor_external((std::string *)v29, (const std::string::value_type *)v16[4], v16[5]);
            }
            else
            {
              *(_OWORD *)v29 = *((_OWORD *)v16 + 2);
              *(_QWORD *)&v29[16] = v16[6];
            }
            v18 = v16[7];
            *(_QWORD *)&v29[24] = v18;
            if ((v18 & 4) != 0 && HIDWORD(v18) == a2)
            {
              v24 = *a3;
              v25 = *((_DWORD *)a3 + 1);
              v26 = *((_BYTE *)a3 + 8);
              v27 = *((_DWORD *)a3 + 3);
              v28 = *((_BYTE *)a3 + 16);
              (*(void (**)(uint64_t, _BYTE *, uint64_t, __int16 *, uint64_t))(*(_QWORD *)v11 + 8))(v11, v29, a4, &v24, a5);
            }
            if ((v29[23] & 0x80000000) != 0)
              operator delete(*(void **)v29);
            v19 = (_QWORD *)v16[1];
            if (v19)
            {
              do
              {
                v20 = v19;
                v19 = (_QWORD *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                v20 = (_QWORD *)v16[2];
                v21 = *v20 == (_QWORD)v16;
                v16 = v20;
              }
              while (!v21);
            }
            v16 = v20;
          }
          while (v20 != v17);
        }
      }
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEEE7628(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t IMSNasClient::computeBarringForInstance(IMSNasClient *this, uint64_t a2)
{
  _QWORD *v4;
  char *v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  void *__p[2];
  __int128 v16;

  v4 = (_QWORD *)*((_QWORD *)this + 3);
  v5 = (char *)this + 32;
  if (v4 == (_QWORD *)((char *)this + 32))
  {
    v13 = 0;
  }
  else
  {
    v6 = 0;
    v7 = 0;
    do
    {
      *(_OWORD *)__p = 0u;
      v16 = 0u;
      if (*((char *)v4 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, (const std::string::value_type *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)__p = *((_OWORD *)v4 + 2);
        *(_QWORD *)&v16 = v4[6];
      }
      v8 = v4[7];
      *((_QWORD *)&v16 + 1) = v8;
      if (HIDWORD(v8) == (_DWORD)a2)
      {
        ++v7;
        v9 = v8;
      }
      else
      {
        v9 = 0;
      }
      if (SBYTE7(v16) < 0)
        operator delete(__p[0]);
      v10 = (char *)v4[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = *(char **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (char *)v4[2];
          v12 = *(_QWORD *)v11 == (_QWORD)v4;
          v4 = v11;
        }
        while (!v12);
      }
      v6 |= v9;
      v4 = v11;
    }
    while (v11 != v5);
    if (v7)
      v13 = v6;
    else
      v13 = 0;
  }
  return (*(uint64_t (**)(IMSNasClient *, uint64_t, uint64_t))(*(_QWORD *)this + 80))(this, a2, v13);
}

uint64_t IMSNasClient::addListener(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
}

uint64_t IMSNasClient::addListener(uint64_t **a1, void **a2, uint64_t a3, int a4)
{
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  void **v11;
  uint64_t *v12;
  uint64_t *v13;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *__p[2];
  char v22;
  void **v23;
  uint64_t v24;
  unint64_t v25;

  std::string::basic_string[abi:ne180100]<0>(v19, "nas");
  std::string::basic_string[abi:ne180100]<0>(v17, (char *)&str_16_1);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Adding listener for ", 20);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" on instance ", 13);
  *(_BYTE *)(v8 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v8 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" with barring for ", 18);
  v9 = 0;
  *(_BYTE *)(v8 + 17) = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  if ((a4 & 1) != 0)
  {
    v9 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v23, (__int128 *)"SSAC");
    v24 = v9;
  }
  if ((a4 & 2) != 0)
  {
    if (v9 >= v25)
    {
    }
    else
    {
      *(_QWORD *)(v9 + 16) = 0x300000000000000;
      v9 += 24;
    }
    v24 = v9;
  }
  if ((a4 & 4) != 0)
  {
    if (v9 >= v25)
    {
    }
    else
    {
      *(_QWORD *)(v9 + 16) = 0x300000000000000;
      v10 = v9 + 24;
    }
    v24 = v10;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, " ");
  ims::join<std::__wrap_iter<std::string const*>>((uint64_t)v23, v24, (uint64_t)__p, v15);
  if (v22 < 0)
    operator delete(__p[0]);
  __p[0] = &v23;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, v15);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v16 < 0)
    operator delete(v15[0]);
  if (v18 < 0)
    operator delete(v17[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v11 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 3), a2);
  if (a1 + 4 == (uint64_t **)v11 || *((_DWORD *)v11 + 15) != (_DWORD)a3)
  {
    v23 = a2;
    v13 = std::__tree<std::__value_type<std::string,IMSNasClient::NasEntry>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasClient::NasEntry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasClient::NasEntry>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, a2, (__int128 **)&v23);
    *((_DWORD *)v13 + 14) = a4;
    *((_DWORD *)v13 + 15) = a3;
  }
  else
  {
    v23 = a2;
    v12 = std::__tree<std::__value_type<std::string,IMSNasClient::NasEntry>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasClient::NasEntry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasClient::NasEntry>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 3, a2, (__int128 **)&v23);
    *((_DWORD *)v12 + 14) |= a4;
  }
  return IMSNasClient::computeBarringForInstance((IMSNasClient *)a1, a3);
}

void sub_1BEEE7A20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (a33 < 0)
    operator delete(__p);
  __p = (void *)(v33 - 72);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(a1);
}

uint64_t IMSNasClient::removeListener(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
}

void **IMSNasClient::removeListener(void ***a1, void **a2, int a3)
{
  uint64_t v6;
  void ***v7;
  void **result;
  void **v9;
  uint64_t v10;
  BOOL v11;
  void **v12;
  void **v13;
  void **v14;
  uint64_t *v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  std::string::basic_string[abi:ne180100]<0>(v18, "nas");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_16_1);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Removing listener for ", 22);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v17 < 0)
    operator delete(__p[0]);
  if (v19 < 0)
    operator delete(v18[0]);
  v7 = a1 + 3;
  result = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)(a1 + 3), a2);
  if (a1 + 4 != (void ***)result)
  {
    v9 = result;
    v10 = *((unsigned int *)result + 15);
    v11 = ((_DWORD)result[7] & ~a3) == 0;
    *((_DWORD *)result + 14) &= ~a3;
    if (v11)
    {
      v12 = (void **)result[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (void **)*v12;
        }
        while (v12);
      }
      else
      {
        v14 = result;
        do
        {
          v13 = (void **)v14[2];
          v11 = *v13 == v14;
          v14 = v13;
        }
        while (!v11);
      }
      if (*v7 == result)
        *v7 = v13;
      v15 = (uint64_t *)a1[4];
      a1[5] = (void **)((char *)a1[5] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v15, (uint64_t *)v9);
      if (*((char *)v9 + 55) < 0)
        operator delete(v9[4]);
      operator delete(v9);
    }
    return (void **)IMSNasClient::computeBarringForInstance((IMSNasClient *)a1, v10);
  }
  return result;
}

void sub_1BEEE7C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSNasClient::bootstrap(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(a1 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BEEE7D1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void IMSNasDeviceClient::initializeNasClient(uint64_t a1, uint64_t a2, uint64_t a3, std::__shared_weak_count **a4, dispatch_object_t *a5, int a6)
{
  _QWORD **v12;
  uint64_t v13;
  uint64_t v14;
  capabilities::radio *RadioVendor;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  NSObject *v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  BambiAccessBarring *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::string::size_type size;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v60;
  unint64_t v61;
  unint64_t *p_shared_weak_owners;
  unint64_t v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  uint64_t v80;
  std::__shared_weak_count *v81;
  std::__shared_weak_count *v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  uint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  char *v88;
  char **v89;
  char **v90;
  _QWORD *v91;
  char *v92;
  NSObject *v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98[2];
  void *__p;
  std::__shared_weak_count *v100;
  std::__shared_weak_count *v101;
  dispatch_object_t v102;
  std::string v103;
  int v104;
  std::__shared_weak_count *v105[2];
  dispatch_object_t object;
  std::__shared_weak_count *v107;
  std::__shared_weak_count *v108;

  v12 = (_QWORD **)(a1 + 48);
  std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::__erase_unique<std::string>((void ***)(a1 + 48), (void **)a2);
  if (*(_QWORD *)(a1 + 8))
    goto LABEL_2;
  if (!a6)
  {
    std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v58 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"No baseband for architecture", 28);
    *(_BYTE *)(v58 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v58 + 17) = 0;
    if (SHIBYTE(v101) < 0)
      operator delete(__p);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    goto LABEL_116;
  }
  std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Creating NAS client.", 20);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (SHIBYTE(v101) < 0)
    operator delete(__p);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  RadioVendor = (capabilities::radio *)TelephonyRadiosGetRadioVendor();
  if ((_DWORD)RadioVendor != 2)
  {
    if (capabilities::radio::mav20Plus(RadioVendor))
    {
      v16 = (std::__shared_weak_count *)operator new(0x128uLL);
      v16->__shared_owners_ = 0;
      p_shared_owners = (unint64_t *)&v16->__shared_owners_;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1CC0;
      v18 = v16 + 1;
      QMINasClient::QMINasClient((QMINasClient *)&v16[1], a5);
      v60 = (std::__shared_weak_count *)v16[4].__vftable;
      if (v60)
      {
        if (v60->__shared_owners_ != -1)
          goto LABEL_111;
        do
          v61 = __ldxr(p_shared_owners);
        while (__stxr(v61 + 1, p_shared_owners));
        p_shared_weak_owners = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v63 = __ldxr(p_shared_weak_owners);
        while (__stxr(v63 + 1, p_shared_weak_owners));
        v16[3].__shared_weak_owners_ = (uint64_t)v18;
        v16[4].__vftable = (std::__shared_weak_count_vtbl *)v16;
        std::__shared_weak_count::__release_weak(v60);
      }
      else
      {
        do
          v64 = __ldxr(p_shared_owners);
        while (__stxr(v64 + 1, p_shared_owners));
        v65 = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v66 = __ldxr(v65);
        while (__stxr(v66 + 1, v65));
        v16[3].__shared_weak_owners_ = (uint64_t)v18;
        v16[4].__vftable = (std::__shared_weak_count_vtbl *)v16;
      }
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
    }
    else
    {
      if (TelephonyRadiosGetRadioVendor() != 1)
      {
        std::string::basic_string[abi:ne180100]<0>(&v103, "ims.nas");
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v75 = ImsLogger::error(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v75 + 8), (uint64_t)"Unknown radio vendor ", 21);
        *(_BYTE *)(v75 + 17) = 0;
        TelephonyRadiosGetRadioVendor();
        std::ostream::operator<<();
        *(_BYTE *)(v75 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v75 + 64))(v75, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v75 + 17) = 0;
        if (SHIBYTE(v101) < 0)
          operator delete(__p);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v18 = 0;
        v16 = 0;
        goto LABEL_111;
      }
      v16 = (std::__shared_weak_count *)operator new(0xD0uLL);
      v16->__shared_owners_ = 0;
      v67 = (unint64_t *)&v16->__shared_owners_;
      v16->__shared_weak_owners_ = 0;
      v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1D10;
      v18 = v16 + 1;
      LegacyQMINasClient::LegacyQMINasClient((uint64_t)&v16[1], a5);
      shared_weak_owners = (std::__shared_weak_count *)v16[3].__shared_weak_owners_;
      if (shared_weak_owners)
      {
        if (shared_weak_owners->__shared_owners_ != -1)
          goto LABEL_111;
        do
          v69 = __ldxr(v67);
        while (__stxr(v69 + 1, v67));
        v70 = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v71 = __ldxr(v70);
        while (__stxr(v71 + 1, v70));
        v16[3].__shared_owners_ = (uint64_t)v18;
        v16[3].__shared_weak_owners_ = (uint64_t)v16;
        std::__shared_weak_count::__release_weak(shared_weak_owners);
      }
      else
      {
        do
          v72 = __ldxr(v67);
        while (__stxr(v72 + 1, v67));
        v73 = (unint64_t *)&v16->__shared_weak_owners_;
        do
          v74 = __ldxr(v73);
        while (__stxr(v74 + 1, v73));
        v16[3].__shared_owners_ = (uint64_t)v18;
        v16[3].__shared_weak_owners_ = (uint64_t)v16;
      }
      do
        v26 = __ldaxr(v67);
      while (__stlxr(v26 - 1, v67));
    }
LABEL_104:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
    goto LABEL_111;
  }
  v16 = (std::__shared_weak_count *)operator new(0x1A0uLL);
  v16->__shared_owners_ = 0;
  v17 = (unint64_t *)&v16->__shared_owners_;
  v16->__shared_weak_owners_ = 0;
  v16->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1C70;
  v18 = v16 + 1;
  IBINasClient::IBINasClient((IBINasClient *)&v16[1], a5);
  v19 = (std::__shared_weak_count *)v16[13].__shared_weak_owners_;
  if (!v19)
  {
    do
      v23 = __ldxr(v17);
    while (__stxr(v23 + 1, v17));
    v24 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v16[13].__shared_owners_ = (uint64_t)v18;
    v16[13].__shared_weak_owners_ = (uint64_t)v16;
    goto LABEL_25;
  }
  if (v19->__shared_owners_ == -1)
  {
    do
      v20 = __ldxr(v17);
    while (__stxr(v20 + 1, v17));
    v21 = (unint64_t *)&v16->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v16[13].__shared_owners_ = (uint64_t)v18;
    v16[13].__shared_weak_owners_ = (uint64_t)v16;
    std::__shared_weak_count::__release_weak(v19);
    do
LABEL_25:
      v26 = __ldaxr(v17);
    while (__stlxr(v26 - 1, v17));
    goto LABEL_104;
  }
LABEL_111:
  v76 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = v18;
  *(_QWORD *)(a1 + 16) = v16;
  if (!v76)
    goto LABEL_117;
  v77 = (unint64_t *)&v76->__shared_owners_;
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (!v78)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_116:
  v18 = *(std::__shared_weak_count **)(a1 + 8);
LABEL_117:
  if (v18)
  {
    std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v79 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"Created NAS client for architecture", 35);
    *(_BYTE *)(v79 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v79 + 17) = 0;
    if (SHIBYTE(v101) < 0)
      operator delete(__p);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
LABEL_2:
    if (*(_BYTE *)(a1 + 72))
    {
      if (*(_QWORD *)(a1 + 40))
      {
        std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v13 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Bootstraping NAS client...", 26);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v13 + 17) = 0;
        if (SHIBYTE(v101) < 0)
          operator delete(__p);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8), a2, a3);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v38 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Initializing NAS client...", 26);
        *(_BYTE *)(v38 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v38 + 17) = 0;
        if (SHIBYTE(v101) < 0)
          operator delete(__p);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        v39 = *(_QWORD *)(a1 + 8);
        v40 = *a4;
        v41 = a4[1];
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_weak_owners_;
          do
            v43 = __ldxr(v42);
          while (__stxr(v43 + 1, v42));
          do
            v44 = __ldxr(v42);
          while (__stxr(v44 + 1, v42));
        }
        v45 = *(std::__shared_weak_count **)(v39 + 16);
        *(_QWORD *)(v39 + 8) = v40;
        *(_QWORD *)(v39 + 16) = v41;
        if (v45)
          std::__shared_weak_count::__release_weak(v45);
        if (v41)
          std::__shared_weak_count::__release_weak(v41);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2, a3);
      }
      std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string const&>((uint64_t **)(a1 + 24), (void **)a2, a2);
      *(_OWORD *)&v103.__r_.__value_.__l.__data_ = 0uLL;
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)__p + 21) + 192))(&v103, *((_QWORD *)__p + 21), a2);
      v46 = v100;
      if (v100)
      {
        v47 = (unint64_t *)&v100->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
          std::__shared_weak_count::__release_weak(v46);
        }
      }
      if (v103.__r_.__value_.__r.__words[0])
      {
        v49 = (BambiAccessBarring *)(v103.__r_.__value_.__r.__words[0] + 2904);
        v50 = *(_QWORD *)(a1 + 8);
        v51 = *(std::__shared_weak_count **)(a1 + 16);
        v98[0] = v50;
        v98[1] = (uint64_t)v51;
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_weak_owners_;
          do
            v53 = __ldxr(v52);
          while (__stxr(v53 + 1, v52));
        }
        BambiAccessBarring::setDelegate(v49, v98);
        if (v51)
          std::__shared_weak_count::__release_weak(v51);
      }
      size = v103.__r_.__value_.__l.__size_;
      if (v103.__r_.__value_.__l.__size_)
      {
        v55 = (unint64_t *)(v103.__r_.__value_.__l.__size_ + 8);
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          (*(void (**)(std::string::size_type))(*(_QWORD *)size + 16))(size);
          v57 = (std::__shared_weak_count *)size;
LABEL_173:
          std::__shared_weak_count::__release_weak(v57);
          return;
        }
      }
      return;
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v27 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Baseband is currently not available", 35);
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v27 + 17) = 0;
    if (SHIBYTE(v101) < 0)
      operator delete(__p);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    v28 = a4[1];
    if (!v28)
      return;
    v29 = std::__shared_weak_count::lock(v28);
    v108 = v29;
    if (!v29)
      return;
    v30 = v29;
    v107 = *a4;
    v31 = v107;
    if (!v107)
    {
LABEL_169:
      v96 = (unint64_t *)&v30->__shared_owners_;
      do
        v97 = __ldaxr(v96);
      while (__stlxr(v97 - 1, v96));
      if (!v97)
      {
        ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
        v57 = v30;
        goto LABEL_173;
      }
      return;
    }
    if (!a6)
    {
LABEL_164:
      std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
      std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v95 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)"go straight to nasSystemInitialized", 35);
      *(_BYTE *)(v95 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v95 + 17) = 0;
      if (SHIBYTE(v101) < 0)
        operator delete(__p);
      if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v103.__r_.__value_.__l.__data_);
      ((void (*)(std::__shared_weak_count *, uint64_t))v31->__on_zero_shared)(v31, a2);
      goto LABEL_169;
    }
    std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v32 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Defer NasClient init as BB is not available.", 44);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    if (SHIBYTE(v101) < 0)
      operator delete(__p);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    LODWORD(__p) = a3;
    v33 = *a4;
    v34 = a4[1];
    v100 = *a4;
    v101 = v34;
    if (v34)
    {
      v35 = (unint64_t *)&v34->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *a5;
    v102 = v37;
    if (v37)
      dispatch_retain(v37);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v103, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v103 = *(std::string *)a2;
    v104 = a3;
    v105[0] = v33;
    v105[1] = v34;
    v100 = 0;
    v101 = 0;
    object = v37;
    if (v37)
      dispatch_retain(v37);
    v89 = (char **)(a1 + 56);
    v88 = *(char **)(a1 + 56);
    if (v88)
    {
      while (1)
      {
        while (1)
        {
          v90 = (char **)v88;
          v91 = v88 + 32;
          if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v103, (void **)v88 + 4) & 0x80) == 0)break;
          v88 = *v90;
          v89 = v90;
          if (!*v90)
            goto LABEL_149;
        }
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v91, (void **)&v103.__r_.__value_.__l.__data_) & 0x80) == 0)break;
        v89 = v90 + 1;
        v88 = v90[1];
        if (!v88)
          goto LABEL_149;
      }
      if (*v89)
        goto LABEL_154;
    }
    else
    {
      v90 = (char **)(a1 + 56);
    }
LABEL_149:
    v92 = (char *)operator new(0x58uLL);
    *(std::string *)(v92 + 32) = v103;
    memset(&v103, 0, sizeof(v103));
    *((_DWORD *)v92 + 14) = v104;
    *((_OWORD *)v92 + 4) = *(_OWORD *)v105;
    v105[0] = 0;
    v105[1] = 0;
    v93 = object;
    *((_QWORD *)v92 + 10) = object;
    if (v93)
      dispatch_retain(v93);
    *(_QWORD *)v92 = 0;
    *((_QWORD *)v92 + 1) = 0;
    *((_QWORD *)v92 + 2) = v90;
    *v89 = v92;
    v94 = (_QWORD *)**v12;
    if (v94)
    {
      *v12 = v94;
      v92 = *v89;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 56), (uint64_t *)v92);
    ++*(_QWORD *)(a1 + 64);
LABEL_154:
    if (object)
      dispatch_release(object);
    if (v105[1])
      std::__shared_weak_count::__release_weak(v105[1]);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (v102)
      dispatch_release(v102);
    if (v101)
      std::__shared_weak_count::__release_weak(v101);
    goto LABEL_164;
  }
  std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v80 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)"No NAS client for architecture", 30);
  *(_BYTE *)(v80 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v80 + 17) = 0;
  if (SHIBYTE(v101) < 0)
    operator delete(__p);
  if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v103.__r_.__value_.__l.__data_);
  v81 = a4[1];
  if (v81)
  {
    v82 = std::__shared_weak_count::lock(v81);
    v108 = v82;
    if (v82)
    {
      v83 = v82;
      v107 = *a4;
      v84 = v107;
      if (v107)
      {
        std::string::basic_string[abi:ne180100]<0>(&v103, "nas");
        std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v85 = ImsLogger::debug(ims::_logger, (uint64_t)&v103, (uint64_t)&__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v85 + 8), (uint64_t)"go straight to nasSystemInitialized", 35);
        *(_BYTE *)(v85 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v85 + 64))(v85, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v85 + 17) = 0;
        if (SHIBYTE(v101) < 0)
          operator delete(__p);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        ((void (*)(std::__shared_weak_count *, uint64_t))v84->__on_zero_shared)(v84, a2);
      }
      v86 = (unint64_t *)&v83->__shared_owners_;
      do
        v87 = __ldaxr(v86);
      while (__stlxr(v87 - 1, v86));
      if (!v87)
      {
        ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
        v57 = v83;
        goto LABEL_173;
      }
    }
  }
}

void sub_1BEEE8B10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  IMSNasDeviceClient::DeferredInit::~DeferredInit((IMSNasDeviceClient::DeferredInit *)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

uint64_t std::pair<std::string,IMSNasDeviceClient::DeferredInit>::~pair(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  return a1;
}

void IMSNasDeviceClient::DeferredInit::~DeferredInit(IMSNasDeviceClient::DeferredInit *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *((_QWORD *)this + 3);
  if (v2)
    dispatch_release(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void IMSNasDeviceClient::deinitializeNasClient(uint64_t a1, void **a2)
{
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12[2];
  void *__p;
  std::__shared_weak_count *v14;
  char v15;
  void *v16;
  std::__shared_weak_count *v17;
  char v18;

  std::string::basic_string[abi:ne180100]<0>(&v16, "nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&str_16_1);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v16, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Deinitializing NAS client.", 26);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v15 < 0)
    operator delete(__p);
  if (v18 < 0)
    operator delete(v16);
  std::__tree<std::string>::__erase_unique<std::string>((uint64_t **)(a1 + 24), a2);
  std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::__erase_unique<std::string>((void ***)(a1 + 48), a2);
  if (!*(_QWORD *)(a1 + 40))
  {
    v5 = *(_QWORD *)(a1 + 8);
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
  }
  v16 = 0;
  v17 = 0;
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  (*(void (**)(void **__return_ptr, _QWORD, void **))(**((_QWORD **)__p + 21) + 192))(&v16, *((_QWORD *)__p + 21), a2);
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v16)
  {
    v12[0] = 0;
    v12[1] = 0;
    BambiAccessBarring::setDelegate((BambiAccessBarring *)((char *)v16 + 2904), v12);
  }
  v9 = v17;
  if (v17)
  {
    v10 = (unint64_t *)&v17->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEE8E74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void IMSNasDeviceClient::requestCurrentBarringInfo(IMSNasDeviceClient *this)
{
  uint64_t v2;
  uint64_t v3;
  void *__p[2];
  char v5;
  void *v6[2];
  char v7;

  v2 = *((_QWORD *)this + 1);
  if (v2 && *((_BYTE *)this + 72))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 88))(v2);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v6, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v3 = ImsLogger::debug(ims::_logger, (uint64_t)v6, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip requestCurrentBarringInfo", 99);
    *(_BYTE *)(v3 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v3 + 17) = 0;
    if (v5 < 0)
      operator delete(__p[0]);
    if (v7 < 0)
      operator delete(v6[0]);
  }
}

void sub_1BEEE8FB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::reportCallStatus(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8;
  uint64_t v14;
  uint64_t v15;
  void *__p[2];
  char v17;
  void *v18[2];
  char v19;

  v8 = *(_QWORD *)(a1 + 8);
  if (!v8)
    goto LABEL_12;
  if (*(_BYTE *)(a1 + 72))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v8 + 104))(v8, a2, a3, a4, a5, a6, a7);
    return;
  }
  if ((_DWORD)a3 == 2 && (a4 & 1) != 0 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v8 + 72))(v8))
  {
    std::string::basic_string[abi:ne180100]<0>(v18, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Airplane mode is Enabled, but still reportCallStatus for call end", 65);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
    (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2, 2, a4, a5, a6, a7);
  }
  else
  {
LABEL_12:
    std::string::basic_string[abi:ne180100]<0>(v18, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v15 = ImsLogger::debug(ims::_logger, (uint64_t)v18, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip reportCallStatus", 90);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (v17 < 0)
      operator delete(__p[0]);
    if (v19 < 0)
      operator delete(v18[0]);
  }
}

void sub_1BEEE9208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::requestVoiceSystemId(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  uint64_t v8;
  void *__p[2];
  char v10;
  void *v11[2];
  char v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4 && *(_BYTE *)(a1 + 72))
  {
    v5 = (std::__shared_weak_count *)a3[1];
    v13 = *a3;
    v14 = v5;
    if (v5)
    {
      p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
      do
        v7 = __ldxr(p_shared_weak_owners);
      while (__stxr(v7 + 1, p_shared_weak_owners));
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v4 + 96))(v4, a2, &v13);
    if (v14)
      std::__shared_weak_count::__release_weak(v14);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v11, "nas");
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_16_1);
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v11, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"No Baseband for architecture or Baseband is currently not available: skip requestVoiceSystemId", 94);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v10 < 0)
      operator delete(__p[0]);
    if (v12 < 0)
      operator delete(v11[0]);
  }
}

void sub_1BEEE9358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  std::__shared_weak_count *v22;

  v22 = *(std::__shared_weak_count **)(v20 - 24);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::setBasebandAvailable(uint64_t a1, int a2, uint64_t a3)
{
  void **v5;
  void **v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12[2];
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  *(_BYTE *)(a1 + 72) = a2;
  if (a2)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      if (!*(_QWORD *)(a3 + 8))
        return;
    }
    else if (!*(_BYTE *)(a3 + 23))
    {
      return;
    }
    v5 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a1 + 48, (void **)a3);
    if ((void **)(a1 + 56) != v5)
    {
      v6 = v5;
      std::string::basic_string[abi:ne180100]<0>(v15, "nas");
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_16_1);
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v7 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Running deferred init for NasClient on stack ", 45);
      *(_BYTE *)(v7 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a3);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v7 + 17) = 0;
      if (v14 < 0)
        operator delete(__p[0]);
      if (v16 < 0)
        operator delete(v15[0]);
      v8 = *((unsigned int *)v6 + 14);
      v9 = (std::__shared_weak_count *)v6[9];
      v12[0] = (std::__shared_weak_count *)v6[8];
      v12[1] = v9;
      if (v9)
      {
        p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
        do
          v11 = __ldxr(p_shared_weak_owners);
        while (__stxr(v11 + 1, p_shared_weak_owners));
      }
      IMSNasDeviceClient::initializeNasClient(a1, a3, v8, v12, (dispatch_object_t *)v6 + 10, 1);
      if (v9)
        std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEE950C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;

  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  _Unwind_Resume(exception_object);
}

void IMSNasDeviceClient::~IMSNasDeviceClient(IMSNasDeviceClient *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  *(_QWORD *)this = &off_1E78C1D60;
  v2 = *((_QWORD *)this + 1);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(*((_QWORD **)this + 7));
  std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

{
  IMSNasDeviceClient::~IMSNasDeviceClient(this);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<IBINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1C70;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<IBINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1C70;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<IBINasClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<QMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1CC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1CC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<QMINasClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<LegacyQMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1D10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LegacyQMINasClient>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C1D10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LegacyQMINasClient>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t *std::__tree<std::__value_type<std::string,IMSNasClient::NasEntry>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasClient::NasEntry>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasClient::NasEntry>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v8;
  _QWORD *v9;
  __int128 *v10;
  uint64_t *v11;
  std::string *v12;
  __int128 v13;
  uint64_t *v14;
  uint64_t *v15;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = a1 + 1;
LABEL_9:
    v10 = *a3;
    v11 = (uint64_t *)operator new(0x40uLL);
    v12 = (std::string *)(v11 + 4);
    if (*((char *)v10 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v12, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
    }
    else
    {
      v13 = *v10;
      v11[6] = *((_QWORD *)v10 + 2);
      *(_OWORD *)&v12->__r_.__value_.__l.__data_ = v13;
    }
    v11[7] = 0;
    *v11 = 0;
    v11[1] = 0;
    v11[2] = (uint64_t)v8;
    *v6 = v11;
    v14 = (uint64_t *)**a1;
    v15 = v11;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t **)v5;
      v9 = v5 + 4;
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)v5 + 4) & 0x80) == 0)
        break;
      v5 = *v8;
      v6 = v8;
      if (!*v8)
        goto LABEL_9;
    }
    if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v9, a2) & 0x80) == 0)
      break;
    v6 = v8 + 1;
    v5 = v8[1];
    if (!v5)
      goto LABEL_9;
  }
  v11 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v11;
}

void sub_1BEEE9814(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::__erase_unique<std::string>(void ***a1, void **a2)
{
  void **v3;
  uint64_t *v4;
  void **v5;
  void **v6;
  void **v7;
  BOOL v8;
  uint64_t *v9;

  v3 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)a1, a2);
  if (a1 + 1 != (void ***)v3)
  {
    v4 = (uint64_t *)v3;
    v5 = (void **)v3[1];
    if (v5)
    {
      do
      {
        v6 = v5;
        v5 = (void **)*v5;
      }
      while (v5);
    }
    else
    {
      v7 = v3;
      do
      {
        v6 = (void **)v7[2];
        v8 = *v6 == v7;
        v7 = v6;
      }
      while (!v8);
    }
    if (*a1 == v3)
      *a1 = v6;
    v9 = (uint64_t *)a1[1];
    a1[2] = (void **)((char *)a1[2] - 1);
    std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v9, v4);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSNasDeviceClient::DeferredInit>,0>((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSNasDeviceClient::DeferredInit>,0>(uint64_t a1)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  v2 = *(NSObject **)(a1 + 48);
  if (v2)
    dispatch_release(v2);
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::__map_value_compare<std::string,std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,IMSNasDeviceClient::DeferredInit>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,IMSNasDeviceClient::DeferredInit>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void SipWarningHeader::~SipWarningHeader(void **this)
{
  void **v2;

  *this = off_1E78C1F40;
  v2 = this + 8;
  std::vector<SipWarning>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader(this);
}

{
  void **v2;

  *this = off_1E78C1F40;
  v2 = this + 8;
  std::vector<SipWarning>::__destroy_vector::operator()[abi:ne180100](&v2);
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipHeader *SipWarningHeader::clone(SipWarningHeader *this)
{
  SipHeader *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  const std::string::value_type **v11;
  __int128 v12;
  std::string *v13;
  const std::string::value_type **v14;
  __int128 v15;

  v2 = (SipHeader *)operator new();
  SipHeader::SipHeader(v2, this);
  *(_QWORD *)v2 = off_1E78C1F40;
  *((_QWORD *)v2 + 9) = 0;
  *((_QWORD *)v2 + 10) = 0;
  *((_QWORD *)v2 + 8) = 0;
  v3 = *((_QWORD *)this + 8);
  v4 = *((_QWORD *)this + 9);
  if (v4 != v3)
  {
    v5 = 0x6DB6DB6DB6DB6DB7 * ((v4 - v3) >> 3);
    if (v5 >= 0x492492492492493)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SipWarning>>(v5);
    v7 = 0;
    *((_QWORD *)v2 + 8) = v6;
    *((_QWORD *)v2 + 9) = v6;
    *((_QWORD *)v2 + 10) = &v6[56 * v8];
    do
    {
      v9 = v3 + v7;
      *(_DWORD *)&v6[v7] = *(_DWORD *)(v3 + v7);
      v10 = (std::string *)&v6[v7 + 8];
      v11 = (const std::string::value_type **)(v3 + v7 + 8);
      if (*(char *)(v3 + v7 + 31) < 0)
      {
        std::string::__init_copy_ctor_external(v10, *v11, *(_QWORD *)(v9 + 16));
      }
      else
      {
        v12 = *(_OWORD *)v11;
        *(_QWORD *)&v6[v7 + 24] = *(_QWORD *)(v3 + v7 + 24);
        *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v12;
      }
      v13 = (std::string *)&v6[v7 + 32];
      v14 = (const std::string::value_type **)(v3 + v7 + 32);
      if (*(char *)(v9 + 55) < 0)
      {
        std::string::__init_copy_ctor_external(v13, *v14, *(_QWORD *)(v3 + v7 + 40));
      }
      else
      {
        v15 = *(_OWORD *)v14;
        *(_QWORD *)&v6[v7 + 48] = *(_QWORD *)(v3 + v7 + 48);
        *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v15;
      }
      v7 += 56;
    }
    while (v9 + 56 != v4);
    *((_QWORD *)v2 + 9) = &v6[v7];
  }
  *(_QWORD *)v2 = &off_1E78C1E78;
  return v2;
}

void sub_1BEEE9B60(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40038B74ABLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipWarning>::encodeValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v9;

  v2 = a1[8];
  if (a1[9] != v2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(a2 + 8);
        v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(_BYTE *)(a2 + 17) = 0;
        v2 = a1[8];
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      v2 = a1[8];
      v5 += 56;
    }
    while (v6 < 0x6DB6DB6DB6DB6DB7 * ((a1[9] - v2) >> 3));
  }
  return 1;
}

BOOL SipVectorHeader<SipWarning>::setValueFromString(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4;
  void *v6[2];
  __int128 v7;
  void *__p[2];
  uint64_t v9;
  void *v10[2];
  uint64_t v11;

  v4 = 0;
  v10[0] = 0;
  v10[1] = 0;
  v11 = 0;
  while (1)
  {
    v4 = (*(uint64_t (**)(int64x2_t *, uint64_t, uint64_t, void **, uint64_t))(a1->i64[0] + 128))(a1, a2, v4, v10, 44);
    if (v4 == -1)
      break;
    v9 = 0;
    v7 = 0u;
    *(_OWORD *)__p = 0u;
    *(_OWORD *)v6 = 0u;
    if (((*(uint64_t (**)(int64x2_t *, void **, void **))(a1->i64[0] + 120))(a1, v10, v6) & 1) == 0)
    {
      if (SHIBYTE(v9) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v7) < 0)
        operator delete(v6[1]);
      break;
    }
    SipVectorHeader<SipWarning>::addItem(a1, (uint64_t)v6);
    if (SHIBYTE(v9) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v7) < 0)
      operator delete(v6[1]);
  }
  if (SHIBYTE(v11) < 0)
    operator delete(v10[0]);
  return v4 == -1;
}

void sub_1BEEE9D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipWarning>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipWarning>::allowsMerging()
{
  return 1;
}

BOOL SipVectorHeader<SipWarning>::mergeHeader(int64x2_t *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;

  v4 = v3;
  if (v3)
  {
    v5 = v3[8];
    v6 = v3[9];
    while (v5 != v6)
    {
      SipVectorHeader<SipWarning>::addItem(a1, v5);
      v5 += 56;
    }
  }
  return v4 != 0;
}

uint64_t SipWarningHeader::itemToStream(SipWarningHeader *this, const SipWarning *a2, ImsOutStream *a3)
{
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  char v9;
  char v10;

  v5 = (char *)a2 + 32;
  std::ostream::operator<<();
  *((_BYTE *)a3 + 17) = 0;
  v6 = (_QWORD *)*((_QWORD *)a3 + 1);
  v9 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)&v9, 1);
  *((_BYTE *)a3 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)a2 + 8);
  v7 = (_QWORD *)*((_QWORD *)a3 + 1);
  v10 = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v10, 1);
  *((_BYTE *)a3 + 17) = 0;
  return (*(uint64_t (**)(ImsOutStream *, char *))(*(_QWORD *)a3 + 32))(a3, v5);
}

uint64_t SipWarningHeader::itemFromString(uint64_t a1, std::string *a2, uint64_t a3)
{
  std::string::size_type v5;
  std::string *v6;
  std::string::size_type Token;
  void **v8;
  uint64_t v9;
  std::string __p;
  std::string v12;
  std::string v13;
  char v14;

  memset(&v13, 0, sizeof(v13));
  v5 = ims::nextToken(a2, 0, &v13, 0x20u);
  if (v5 == -1
    || ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (v6 = &v13)
      : (v6 = (std::string *)v13.__r_.__value_.__r.__words[0]),
        *(_DWORD *)a3 = strtoul((const char *)v6, 0, 10),
        Token = ims::nextToken(a2, v5, (std::string *)(a3 + 8), 0x20u),
        Token == -1))
  {
    v9 = 0;
  }
  else
  {
    std::string::basic_string(&__p, a2, Token, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v14);
    ims::removeQuotes((uint64_t)&__p, &v12);
    v8 = (void **)(a3 + 32);
    if (*(char *)(a3 + 55) < 0)
      operator delete(*v8);
    *(_OWORD *)v8 = *(_OWORD *)&v12.__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 48) = *((_QWORD *)&v12.__r_.__value_.__l + 2);
    *((_BYTE *)&v12.__r_.__value_.__s + 23) = 0;
    v12.__r_.__value_.__s.__data_[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v9 = 1;
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  return v9;
}

void sub_1BEEE9FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  _Unwind_Resume(exception_object);
}

unint64_t SipVectorHeader<SipWarning>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<SipWarning>>(unint64_t a1)
{
  if (a1 >= 0x492492492492493)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(56 * a1);
}

void std::__destroy_at[abi:ne180100]<SipWarning,0>(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

void SipWarning::~SipWarning(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

void std::vector<SipWarning>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        std::__destroy_at[abi:ne180100]<SipWarning,0>(v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t SipVectorHeader<SipWarning>::addItem(int64x2_t *a1, uint64_t a2)
{
  int64x2_t *v4;
  unint64_t v5;
  unint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  __int128 v19;
  __int128 v20;
  int64x2_t v21;
  unint64_t v22;
  unint64_t v23;
  int64x2_t v24;
  unint64_t v25;
  int64x2_t *v26;

  v4 = a1 + 5;
  v5 = a1[5].u64[0];
  v6 = a1[4].u64[1];
  if (v6 >= v5)
  {
    v9 = a1[4].i64[0];
    v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v6 - v9) >> 3);
    if ((unint64_t)(v10 + 1) > 0x492492492492492)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - v9) >> 3);
    v12 = 2 * v11;
    if (2 * v11 <= v10 + 1)
      v12 = v10 + 1;
    if (v11 >= 0x249249249249249)
      v13 = 0x492492492492492;
    else
      v13 = v12;
    v26 = v4;
    if (v13)
      v13 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<SipWarning>>(v13);
    else
      v14 = 0;
    v23 = v13;
    v24.i64[0] = v13 + 56 * v10;
    v24.i64[1] = v24.i64[0];
    v25 = v13 + 56 * v14;
    std::construct_at[abi:ne180100]<SipWarning,SipWarning const&,SipWarning*>(v24.i64[0], a2);
    v15 = v24.i64[0];
    v8 = v24.i64[0] + 56;
    v17 = a1[4].i64[0];
    v16 = a1[4].u64[1];
    if (v16 == v17)
    {
      v21 = vdupq_n_s64(v16);
    }
    else
    {
      do
      {
        v18 = *(_DWORD *)(v16 - 56);
        v16 -= 56;
        *(_DWORD *)(v15 - 56) = v18;
        v15 -= 56;
        v19 = *(_OWORD *)(v16 + 8);
        *(_QWORD *)(v15 + 24) = *(_QWORD *)(v16 + 24);
        *(_OWORD *)(v15 + 8) = v19;
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_QWORD *)(v16 + 8) = 0;
        v20 = *(_OWORD *)(v16 + 32);
        *(_QWORD *)(v15 + 48) = *(_QWORD *)(v16 + 48);
        *(_OWORD *)(v15 + 32) = v20;
        *(_QWORD *)(v16 + 40) = 0;
        *(_QWORD *)(v16 + 48) = 0;
        *(_QWORD *)(v16 + 32) = 0;
      }
      while (v16 != v17);
      v21 = a1[4];
    }
    a1[4].i64[0] = v15;
    a1[4].i64[1] = v8;
    v24 = v21;
    v22 = a1[5].u64[0];
    a1[5].i64[0] = v25;
    v25 = v22;
    v23 = v21.i64[0];
    result = std::__split_buffer<SipWarning>::~__split_buffer((uint64_t)&v23);
  }
  else
  {
    result = std::construct_at[abi:ne180100]<SipWarning,SipWarning const&,SipWarning*>(a1[4].i64[1], a2);
    v8 = v6 + 56;
    a1[4].i64[1] = v6 + 56;
  }
  a1[4].i64[1] = v8;
  return result;
}

void sub_1BEEEA314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SipWarning>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::construct_at[abi:ne180100]<SipWarning,SipWarning const&,SipWarning*>(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 8), *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(a2 + 8);
    *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  v5 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 32), *(_QWORD *)(a2 + 40));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 32);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return a1;
}

void sub_1BEEEA3C4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<SipWarning>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 56;
    std::__destroy_at[abi:ne180100]<SipWarning,0>(i - 56);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void SipCallInfoHeader::~SipCallInfoHeader(void **this)
{
  *this = &off_1E78C1FD8;
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  *this = off_1E78E5828;
  this[8] = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)(this + 9), this[10]);
  SipHeader::~SipHeader(this);
}

{
  SipCallInfoHeader::~SipCallInfoHeader(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipCallInfoHeader::encodeValue(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 104);
  return 1;
}

uint64_t SipCallInfoHeader::setValueFromString(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 104), a2);
  return 1;
}

SipParameterHeader *SipCallInfoHeader::clone(SipCallInfoHeader *this)
{
  SipParameterHeader *v2;

  v2 = (SipParameterHeader *)operator new();
  SipParameterHeader::SipParameterHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C1FD8;
  *((_QWORD *)v2 + 14) = 0;
  *((_QWORD *)v2 + 15) = 0;
  *((_QWORD *)v2 + 13) = 0;
  return v2;
}

void sub_1BEEEA554(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40D8A9F79FLL);
  _Unwind_Resume(a1);
}

void SipServiceRouteHeader::~SipServiceRouteHeader(void **this)
{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipRouteSetHeader *SipServiceRouteHeader::clone(SipServiceRouteHeader *this)
{
  SipRouteSetHeader *v2;

  v2 = (SipRouteSetHeader *)operator new();
  SipRouteSetHeader::SipRouteSetHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C2078;
  return v2;
}

void sub_1BEEEA63C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

uint64_t SipRouteSetHeader::allowsDuplicates(SipRouteSetHeader *this)
{
  return 1;
}

uint64_t SipRouteSetHeader::allowsMerging(SipRouteSetHeader *this)
{
  return 1;
}

void SipClientTransaction::~SipClientTransaction(SipClientTransaction *this, uint64_t *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;

  v4 = *a2;
  *(_QWORD *)this = *a2;
  *((_QWORD *)this + 9) = &off_1E78C21D0;
  *((_QWORD *)this + 12) = a2[6];
  *(_QWORD *)((char *)this + *(_QWORD *)(v4 - 24)) = a2[7];
  *((_QWORD *)this + 21) = &unk_1E78C2280;
  v9 = 0;
  v10 = 0;
  (*(void (**)(char *, uint64_t *, uint64_t))(*((_QWORD *)this + 9) + 48))((char *)this + 72, &v9, 1);
  v5 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *((_QWORD *)this + 70);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  SipTransaction::~SipTransaction(this, a2 + 1);
}

void SipClientTransaction::~SipClientTransaction(SipClientTransaction *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipClientTransaction::~SipClientTransaction(SipClientTransaction *this)
{
}

{
}

{
}

{
  JUMPOUT(0x1C3B87100);
}

{
  JUMPOUT(0x1C3B87100);
}

{
  JUMPOUT(0x1C3B87100);
}

void SipClientTransaction::loggableName(SipClientTransaction *this@<X0>, std::string *a2@<X8>)
{
  const std::string *v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  std::string v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;

  v12 = 0;
  v10 = 0u;
  v11 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v10, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v10 + 1), (uint64_t)"ClientTransaction ", 18);
  BYTE1(v11) = 0;
  v4 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
  LoggableString::LoggableString(&v9, v4);
  (*(void (**)(__int128 *, std::string *))(v10 + 40))(&v10, &v9);
  LOBYTE(v5[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v10 + 1), (uint64_t)v5, 1);
  BYTE1(v11) = 0;
  ObfuscatedString::ObfuscatedString((uint64_t)v5, (const std::string *)((char *)this + 320));
  (*(void (**)(__int128 *, void **))(v10 + 56))(&v10, v5);
  if (v8 < 0)
    operator delete(__p);
  if (v6 < 0)
    operator delete(v5[0]);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  ImsStringOutStream::loggableStr((ImsStringOutStream *)&v10, a2);
  *(_QWORD *)&v10 = &off_1E78D7A10;
  if ((_BYTE)v11)
  {
    if (*((_QWORD *)&v10 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v10 + 1) + 8))(*((_QWORD *)&v10 + 1));
  }
}

void sub_1BEEEA964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  uint64_t v23;

  ims::AccessNetwork::~AccessNetwork(&a10);
  if (a21 < 0)
    operator delete(__p);
  *(_QWORD *)(v21 - 64) = &off_1E78D7A10;
  if (*(_BYTE *)(v21 - 48))
  {
    v23 = *(_QWORD *)(v21 - 56);
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipClientTransaction::loggableName(SipClientTransaction *this@<X0>, std::string *a2@<X8>)
{
  SipClientTransaction::loggableName((SipClientTransaction *)((char *)this - 96), a2);
}

void SipClientTransaction::resendLastMessage(SipClientTransaction *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD **v4;
  uint64_t v5;
  const std::string *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::string __p;

  v4 = (_QWORD **)((char *)this + 168);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  ((void (*)(_QWORD **, uint64_t))(*v4)[2])(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"resending ", 10);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = (const std::string *)(*(uint64_t (**)(_QWORD *))(*v4[15] + 112))(v4[15]);
  LoggableString::LoggableString(&__p, v6);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 40))(v5, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" request", 8);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = *((_QWORD *)this + 39);
  v8 = *((_QWORD *)this + 36);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v12, (_QWORD *)this + 34);
  SipTransactionLayer::sendMessageInTransaction(v7, v8, (uint64_t)&v12, a2);
  v9 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_1BEEEAB18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t SipClientTransaction::handleError(SipClientTransaction *this, const ImsResult *a2)
{
  char *v4;
  uint64_t v5;
  const void *v6;
  uint64_t v7;
  SipUserAgent *v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  std::string::size_type v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  SipUserAgent *v27;
  uint64_t v28;
  void **v29;
  uint64_t v30;
  const std::string *v31;
  unsigned int *v32;
  SipUserAgent *v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  const std::string *v37;
  uint64_t v38;
  std::string::size_type v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t *v42;
  uint64_t v43;
  std::string::size_type v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  int v48;
  std::string __p;
  __int128 v51;
  __int128 v52;
  __int128 v53;

  v4 = (char *)this + 168;
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"SipClientTransaction::handleError", 33);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v6 = (const void *)*((_QWORD *)a2 + 5);
  if (v6)
  else
    v7 = 0;
  v8 = (SipUserAgent *)SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
  if (*(_BYTE *)(SipUserAgent::config(v8) + 987))
    v9 = v7 == 0;
  else
    v9 = 0;
  if (!v9 || *((_DWORD *)a2 + 4) != 408)
    goto LABEL_29;
  v10 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
  v11 = *(_QWORD *)(v10 + 248);
  v12 = *(std::__shared_weak_count **)(v10 + 256);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  v15 = *(_QWORD *)(v11 + 3632);
  if (v15)
  {
    v16 = *(unsigned __int8 *)(v15 + 220) != 0;
    if (!v12)
      goto LABEL_20;
  }
  else
  {
    v16 = 0;
    if (!v12)
      goto LABEL_20;
  }
  v17 = (unint64_t *)&v12->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
  {
LABEL_20:
    if (v16)
      goto LABEL_21;
LABEL_29:
    v27 = (SipUserAgent *)SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
    v28 = SipUserAgent::config(v27) + 696;
    v29 = (void **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
    if (SipResponseCodeMap::containsResponseCodeForMethod(v28, v29, *((_DWORD *)a2 + 4), 0))
    {
      v30 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))(v4);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))(v4, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"triggering reregistration due to ", 33);
      *(_BYTE *)(v30 + 17) = 0;
      v31 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
      LoggableString::LoggableString(&__p, v31);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v30 + 40))(v30, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" error ", 7);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v30);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v7)
      {
        v32 = (unsigned int *)SipMessage::header<SipRetryAfterHeader>(v7);
        if (v32)
          v7 = v32[26];
        else
          v7 = 0;
      }
      v43 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
      v44 = *(_QWORD *)(v43 + 248);
      v22 = *(std::__shared_weak_count **)(v43 + 256);
      __p.__r_.__value_.__r.__words[0] = v44;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
      if (v22)
      {
        v45 = (unint64_t *)&v22->__shared_owners_;
        do
          v46 = __ldxr(v45);
        while (__stxr(v46 + 1, v45));
      }
      (*(void (**)(std::string::size_type, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v44 + 168))(v44, 5, v7, 0);
      if (!v22)
        goto LABEL_54;
      v47 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v47);
      while (__stlxr(v26 - 1, v47));
    }
    else
    {
      v33 = (SipUserAgent *)SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
      v34 = SipUserAgent::config(v33) + 1184;
      v35 = (void **)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
      if (!SipResponseCodeMap::containsResponseCodeForMethod(v34, v35, *((_DWORD *)a2 + 4), 0))
        goto LABEL_54;
      v36 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))(v4);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))(v4, v36);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"dropping registration due to ", 29);
      *(_BYTE *)(v36 + 17) = 0;
      v37 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
      LoggableString::LoggableString(&__p, v37);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v36 + 40))(v36, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" error ", 7);
      *(_BYTE *)(v36 + 17) = 0;
      (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v36);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v36 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v38 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
      v39 = *(_QWORD *)(v38 + 248);
      v22 = *(std::__shared_weak_count **)(v38 + 256);
      __p.__r_.__value_.__r.__words[0] = v39;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
      if (v22)
      {
        v40 = (unint64_t *)&v22->__shared_owners_;
        do
          v41 = __ldxr(v40);
        while (__stxr(v41 + 1, v40));
      }
      (*(void (**)(std::string::size_type, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v39 + 168))(v39, 3, 0, 0);
      if (!v22)
        goto LABEL_54;
      v42 = (unint64_t *)&v22->__shared_owners_;
      do
        v26 = __ldaxr(v42);
      while (__stlxr(v26 - 1, v42));
    }
LABEL_52:
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
    goto LABEL_54;
  }
  ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
  std::__shared_weak_count::__release_weak(v12);
  if (!v16)
    goto LABEL_29;
LABEL_21:
  v19 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))(v4);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))(v4, v19);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"triggering reregistration due to internal timeout", 49);
  *(_BYTE *)(v19 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v19 + 17) = 0;
  v20 = SipTransportLayer::userAgent(*((SipTransportLayer **)this + 39));
  v21 = *(_QWORD *)(v20 + 248);
  v22 = *(std::__shared_weak_count **)(v20 + 256);
  __p.__r_.__value_.__r.__words[0] = v21;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  if (v22)
  {
    v23 = (unint64_t *)&v22->__shared_owners_;
    do
      v24 = __ldxr(v23);
    while (__stxr(v24 + 1, v23));
  }
  (*(void (**)(std::string::size_type, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v21 + 168))(v21, 5, 0, 0);
  if (v22)
  {
    v25 = (unint64_t *)&v22->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    goto LABEL_52;
  }
LABEL_54:
  v51 = 0u;
  v52 = 0u;
  v53 = 0u;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741840;
  if (*((uint64_t **)a2 + 1) == &_bambiDomain)
  {
    v48 = *((_DWORD *)a2 + 4);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (v48 == 1073741840)
      return (*(uint64_t (**)(SipClientTransaction *))(*(_QWORD *)this + 136))(this);
  }
  else
  {
    ImsResult::~ImsResult((ImsResult *)&__p);
  }
  return SipTransaction::handleError(this, a2);
}

void sub_1BEEEB0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void *SipMessage::header<SipRetryAfterHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "Retry-After");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

uint64_t `non-virtual thunk to'SipClientTransaction::handleError(SipClientTransaction *this, const ImsResult *a2)
{
  return SipClientTransaction::handleError((SipClientTransaction *)((char *)this - 72), a2);
}

void *SipMessage::header<SipPAssertedIdentityHeader>(uint64_t a1)
{
  unsigned __int8 *v1;
  const void *v2;

  v1 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 32), "P-Asserted-Identity");
  if (v1 && (v2 = (const void *)*((_QWORD *)v1 + 5)) != 0)
  else
    return 0;
}

void SipClientTransaction::handleConnectionError(SipClientTransaction *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (*((_QWORD *)this + 7))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 11);
    if (v2)
    {
      v3 = *((_QWORD *)this + 10);
      p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
      do
        v5 = __ldxr(p_shared_weak_owners);
      while (__stxr(v5 + 1, p_shared_weak_owners));
      v6 = std::__shared_weak_count::lock(v2);
      if (v6)
      {
        std::__shared_weak_count::__release_weak(v2);
        if (v3 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v3 + 72))(v3))
        {
LABEL_12:
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          return;
        }
      }
      else
      {
        std::__shared_weak_count::__release_weak(v2);
      }
    }
    else
    {
      v6 = 0;
    }
    (*(void (**)(_QWORD))(**((_QWORD **)this + 7) + 80))(*((_QWORD *)this + 7));
    if (!v6)
      return;
    goto LABEL_12;
  }
}

void sub_1BEEEB2A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipClientTransaction::handleConnectionError(SipClientTransaction *this)
{
  SipClientTransaction::handleConnectionError((SipClientTransaction *)((char *)this - 72));
}

uint64_t SipClientTransaction::handleResponse(SipClientTransaction *this, const SipResponse *a2)
{
  _QWORD *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const std::string *v16;
  uint64_t v17;
  void *v18;
  std::string *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  const SipResponse *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  const char *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::string::size_type v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  SipRouteSet *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  std::string::size_type v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  SipRouteSet *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  const SipUri *v62;
  uint64_t v63;
  unsigned __int8 *v64;
  uint64_t v65;
  uint64_t v66;
  const char *v67;
  uint64_t v68;
  char *v69;
  void *v70;
  const void **i;
  const void **v72;
  unsigned __int8 *v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;
  const void **v77;
  const char *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  const void **v82;
  const char *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  std::string::size_type v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  std::string __p[3];
  void *v111;
  std::__shared_weak_count *v112;
  void *v113;
  std::string::size_type size;
  uint64_t v115;
  std::__shared_weak_count *v116;
  _OWORD v117[3];
  _QWORD *v118;
  std::__shared_weak_count *v119;

  memset(v117, 0, sizeof(v117));
  v4 = (_QWORD *)((char *)this + 272);
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v118, (_QWORD *)this + 34);
  if (v118)
    v5 = (uint64_t)(v118 + 12);
  else
    v5 = 0;
  v115 = v5;
  v116 = v119;
  v118 = 0;
  v119 = 0;
  LoggableString::LoggableString((LoggableString *)__p, "handleResponse");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v117, &v115, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v6 = v116;
  if (v116)
  {
    p_shared_owners = (unint64_t *)&v116->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v9 = v119;
  if (v119)
  {
    v10 = (unint64_t *)&v119->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = (char *)this + 168;
  v13 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 21) + 16))((char *)this + 168, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipClientTransaction::handleResponse", 36);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = *((_QWORD *)this + 70);
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  *((_QWORD *)this + 70) = (*(uint64_t (**)(const SipResponse *))(*(_QWORD *)a2 + 32))(a2);
  v15 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 21) + 64))((char *)this + 168);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"received ", 9);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" response to ", 13);
  *(_BYTE *)(v15 + 17) = 0;
  v16 = (const std::string *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
  LoggableString::LoggableString(__p, v16);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" request", 8);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v17 = *((_QWORD *)this + 7);
  if (v17 && (*(unsigned int (**)(uint64_t, const SipResponse *))(*(_QWORD *)v17 + 88))(v17, a2))
  {
    v113 = 0;
    size = 0;
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(__p, v4);
    if (__p[0].__r_.__value_.__r.__words[0]
    {
      v113 = v18;
      size = __p[0].__r_.__value_.__l.__size_;
      v19 = __p;
    }
    else
    {
      v19 = (std::string *)&v113;
    }
    v19->__r_.__value_.__r.__words[0] = 0;
    v19->__r_.__value_.__l.__size_ = 0;
    v20 = (std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_;
    if (__p[0].__r_.__value_.__l.__size_)
    {
      v21 = (unint64_t *)(__p[0].__r_.__value_.__l.__size_ + 8);
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = *((_QWORD *)this + 43);
    if (v23 && v113)
    {
      v111 = v113;
      v112 = (std::__shared_weak_count *)size;
      if (size)
      {
        v24 = (unint64_t *)(size + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      (*(void (**)(uint64_t, const SipResponse *, void **))(*(_QWORD *)v23 + 24))(v23, a2, &v111);
      v27 = v112;
      if (v112)
      {
        v28 = (unint64_t *)&v112->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
    }
    else
    {
      v30 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 56))((char *)this + 168);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"no TU to handle response", 24);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
    }
    v31 = *((_DWORD *)a2 + 22);
    if (v31 < 0x12C)
      goto LABEL_149;
    if (v31 == 504)
    {
      v32 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
      v33 = v32[23];
      if ((v33 & 0x80u) == 0)
        v34 = v32[23];
      else
        v34 = *((_QWORD *)v32 + 1);
      if (v34 != 8)
        goto LABEL_55;
      if ((v33 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v32, "REGISTER", *((_QWORD *)v32 + 1)))
          goto LABEL_55;
      }
      else if (v32[23])
      {
        v35 = "REGISTER";
        while (*v32 == *(unsigned __int8 *)v35)
        {
          ++v32;
          ++v35;
          if (!--v33)
            goto LABEL_88;
        }
LABEL_55:
        v36 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"checking for P-CSCF Restoration info in 504 response", 52);
        *(_BYTE *)(v36 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v36 + 17) = 0;
        v37 = SipMessage::header<SipPAssertedIdentityHeader>((uint64_t)a2);
        if (v37)
        {
          v38 = *((_QWORD *)this + 39);
          v119 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v38 + 16));
          v118 = *(_QWORD **)(v38 + 8);
          v39 = v118[20];
          v40 = (std::__shared_weak_count *)v118[21];
          __p[0].__r_.__value_.__r.__words[0] = v39;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v40;
          if (v40)
          {
            v41 = (unint64_t *)&v40->__shared_owners_;
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          v43 = (SipRouteSet *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v39 + 48))(v39);
          if (v40)
          {
            v44 = (unint64_t *)&v40->__shared_owners_;
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 - 1, v44));
            if (!v45)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          v46 = v119;
          if (v119)
          {
            v47 = (unint64_t *)&v119->__shared_owners_;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v49 = *((_QWORD *)this + 39);
          v119 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v49 + 16));
          v118 = *(_QWORD **)(v49 + 8);
          v50 = v118[20];
          v51 = (std::__shared_weak_count *)v118[21];
          __p[0].__r_.__value_.__r.__words[0] = v50;
          __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v51;
          if (v51)
          {
            v52 = (unint64_t *)&v51->__shared_owners_;
            do
              v53 = __ldxr(v52);
            while (__stxr(v53 + 1, v52));
          }
          v54 = (SipRouteSet *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v50 + 56))(v50);
          if (v51)
          {
            v55 = (unint64_t *)&v51->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
              std::__shared_weak_count::__release_weak(v51);
            }
          }
          v57 = v119;
          if (v119)
          {
            v58 = (unint64_t *)&v119->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
            }
          }
          v60 = v37[9];
          if (v37[10] == v60)
          {
LABEL_87:
            v63 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v63);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"P-Asserted-Identity from Server Timeout response not found in service route or path", 83);
            *(_BYTE *)(v63 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          }
          else
          {
            v61 = 0;
            while (1)
            {
              v62 = *(const SipUri **)(v60 + 8 * v61);
              if ((SipRouteSet::containsUri(v43, v62) & 1) != 0 || (SipRouteSet::containsUri(v54, v62) & 1) != 0)
                break;
              ++v61;
              v60 = v37[9];
              if (v61 >= (v37[10] - v60) >> 3)
                goto LABEL_87;
            }
            v68 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v68);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v68 + 8), (uint64_t)"found P-Asserted-Identity in service route", 42);
            *(_BYTE *)(v68 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v68 + 64))(v68, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v68 + 17) = 0;
            v69 = SipMessage::bodyWithContentType((uint64_t)a2, Sip3gppImsInfoBody::kContentType);
            if (v69
            {
              v72 = (const void **)*((_QWORD *)v70 + 5);
              for (i = (const void **)*((_QWORD *)v70 + 6); v72 != i; ++v72)
              {
                if (*v72
                {
                  v74 = v73;
                  v75 = v73[31];
                  if ((v75 & 0x80u) == 0)
                    v76 = v73[31];
                  else
                    v76 = *((_QWORD *)v73 + 2);
                  if (v76 != 11)
                    goto LABEL_118;
                  v77 = (const void **)(v73 + 8);
                  if ((v75 & 0x80) != 0)
                  {
                    if (memcmp(*v77, "restoration", *((_QWORD *)v73 + 2)))
                      goto LABEL_118;
                  }
                  else if (v73[31])
                  {
                    v78 = "restoration";
                    while (*(unsigned __int8 *)v77 == *(unsigned __int8 *)v78)
                    {
                      v77 = (const void **)((char *)v77 + 1);
                      ++v78;
                      if (!--v75)
                        goto LABEL_119;
                    }
LABEL_118:
                    v79 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
                    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v79);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"service type isn't restoration", 30);
                    goto LABEL_131;
                  }
LABEL_119:
                  v80 = v74[55];
                  if ((v80 & 0x80u) == 0)
                    v81 = v74[55];
                  else
                    v81 = *((_QWORD *)v74 + 5);
                  if (v81 == 20)
                  {
                    v82 = (const void **)(v74 + 32);
                    if ((v80 & 0x80) != 0)
                    {
                      if (!memcmp(*v82, "initial-registration", *((_QWORD *)v74 + 5)))
                      {
LABEL_155:
                        v100 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
                        (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v100);
                        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v100 + 8), (uint64_t)"restarting registration due to server timeout response from P-CSCF", 66);
                        *(_BYTE *)(v100 + 17) = 0;
                        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v100 + 64))(v100, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                        *(_BYTE *)(v100 + 17) = 0;
                        v101 = *((_QWORD *)this + 39);
                        v119 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v101 + 16));
                        v118 = *(_QWORD **)(v101 + 8);
                        v102 = v118[18];
                        v103 = *(_QWORD *)(v102 + 248);
                        v104 = *(std::__shared_weak_count **)(v102 + 256);
                        __p[0].__r_.__value_.__r.__words[0] = v103;
                        __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v104;
                        if (v104)
                        {
                          v105 = (unint64_t *)&v104->__shared_owners_;
                          do
                            v106 = __ldxr(v105);
                          while (__stxr(v106 + 1, v105));
                        }
                        (*(void (**)(std::string::size_type, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v103 + 168))(v103, 2, 0, 0);
                        if (v104)
                        {
                          v107 = (unint64_t *)&v104->__shared_owners_;
                          do
                            v108 = __ldaxr(v107);
                          while (__stlxr(v108 - 1, v107));
                          if (!v108)
                          {
                            ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
                            std::__shared_weak_count::__release_weak(v104);
                          }
                        }
                        v93 = v119;
                        if (v119)
                        {
                          v109 = (unint64_t *)&v119->__shared_owners_;
                          do
                            v95 = __ldaxr(v109);
                          while (__stlxr(v95 - 1, v109));
                          goto LABEL_145;
                        }
                        goto LABEL_149;
                      }
                    }
                    else
                    {
                      if (!v74[55])
                        goto LABEL_155;
                      v83 = "initial-registration";
                      while (*(unsigned __int8 *)v82 == *(unsigned __int8 *)v83)
                      {
                        v82 = (const void **)((char *)v82 + 1);
                        ++v83;
                        if (!--v80)
                          goto LABEL_155;
                      }
                    }
                  }
                  v79 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
                  (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v79);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"action isn't initial registration", 33);
                }
                else
                {
                  v79 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
                  (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v79);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"not an AlternativeService item", 30);
                }
LABEL_131:
                *(_BYTE *)(v79 + 17) = 0;
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v79 + 17) = 0;
              }
              v63 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v63);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"no appropriate AlternativeService item found. This must not be a restoration response", 85);
              *(_BYTE *)(v63 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
            else
            {
              v63 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v63);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"no body in Server Timeout response", 34);
              *(_BYTE *)(v63 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            }
          }
        }
        else
        {
          v63 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))(v12, v63);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"Server Timeout response does not contain P-Asserted-Identity", 60);
          *(_BYTE *)(v63 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        *(_BYTE *)(v63 + 17) = 0;
        goto LABEL_149;
      }
    }
LABEL_88:
    if (!SipRegistrationClient::isImsOutageResponse(a2, v26))
    {
      SipResultDomain::makeResult(a2, (uint64_t)__p);
      (*(void (**)(SipClientTransaction *, std::string *))(*(_QWORD *)this + 112))(this, __p);
      ImsResult::~ImsResult((ImsResult *)__p);
      goto LABEL_149;
    }
    v64 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 36) + 112))(*((_QWORD *)this + 36));
    v65 = v64[23];
    if ((v65 & 0x80u) == 0)
      v66 = v64[23];
    else
      v66 = *((_QWORD *)v64 + 1);
    if (v66 == 8)
    {
      if ((v65 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)v64, "REGISTER", *((_QWORD *)v64 + 1)))
          goto LABEL_149;
      }
      else
      {
        if (!v64[23])
          goto LABEL_149;
        v67 = "REGISTER";
        while (*v64 == *(unsigned __int8 *)v67)
        {
          ++v64;
          ++v67;
          if (!--v65)
            goto LABEL_149;
        }
      }
    }
    v84 = (*(uint64_t (**)(char *))(*(_QWORD *)v12 + 32))((char *)this + 168);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v12 + 16))((char *)this + 168, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"received Service Unavailable (IMS Outage) response from P-CSCF.  Terminating registration.", 90);
    *(_BYTE *)(v84 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v84 + 17) = 0;
    v85 = *((_QWORD *)this + 39);
    v119 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v85 + 16));
    v118 = *(_QWORD **)(v85 + 8);
    v86 = v118[18];
    v87 = *(_QWORD *)(v86 + 248);
    v88 = *(std::__shared_weak_count **)(v86 + 256);
    __p[0].__r_.__value_.__r.__words[0] = v87;
    __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v88;
    if (v88)
    {
      v89 = (unint64_t *)&v88->__shared_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    (*(void (**)(std::string::size_type))(*(_QWORD *)v87 + 280))(v87);
    if (v88)
    {
      v91 = (unint64_t *)&v88->__shared_owners_;
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 - 1, v91));
      if (!v92)
      {
        ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
        std::__shared_weak_count::__release_weak(v88);
      }
    }
    v93 = v119;
    if (v119)
    {
      v94 = (unint64_t *)&v119->__shared_owners_;
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 - 1, v94));
LABEL_145:
      if (!v95)
      {
        ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
        std::__shared_weak_count::__release_weak(v93);
      }
    }
LABEL_149:
    v96 = (std::__shared_weak_count *)size;
    if (size)
    {
      v97 = (unint64_t *)(size + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 - 1, v97));
      if (!v98)
      {
        ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
        std::__shared_weak_count::__release_weak(v96);
      }
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v117);
}

void sub_1BEEEC068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  uint64_t v28;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v28 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void SipClientInviteTransaction::constructStateMachine(SipClientInviteTransaction *this)
{
  std::__shared_weak_count *v2;
  std::string::size_type v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *shared_owners;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_size;
  std::__shared_weak_count_vtbl *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::string::size_type v50;
  std::string *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  std::string::size_type v74;
  std::string *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  std::__shared_weak_count_vtbl *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  std::string::size_type v112;
  std::__shared_weak_count *v113;
  __int128 v114;

  v112 = 0;
  v113 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v112, (_QWORD *)this + 34);
  v3 = v112;
  v2 = v113;
  v4 = (std::__shared_weak_count *)operator new(0x100uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2E38;
  v7 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(_QWORD *)&v114 = v3;
  *((_QWORD *)&v114 + 1) = v2;
  if (v2)
  {
    v8 = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  SipClientInviteCallingTransactionState::SipClientInviteCallingTransactionState((uint64_t)&v4[1], (std::string::size_type *)&v114);
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)&v110 = v7;
  *((_QWORD *)&v110 + 1) = v5;
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_22:
  v111 = v110;
  v110 = 0uLL;
  (*(void (**)(SipClientInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v111);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v111 + 1);
  if (*((_QWORD *)&v111 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v111 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*((_QWORD *)&v110 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v110 + 1) + 16))(*((_QWORD *)&v110 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v110 + 1));
    }
  }
  v26 = v112;
  v25 = v113;
  v27 = (std::string *)operator new(0xF8uLL);
  v28 = (std::__shared_weak_count *)v27;
  v27->__r_.__value_.__l.__size_ = 0;
  p_size = &v27->__r_.__value_.__l.__size_;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C2E88;
  v30 = (std::__shared_weak_count_vtbl *)&v27[1];
  *(_QWORD *)&v114 = v26;
  *((_QWORD *)&v114 + 1) = v25;
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  SipClientInviteProceedingTransactionState::SipClientInviteProceedingTransactionState(v27 + 1, (std::string::size_type *)&v114);
  if (v25)
  {
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v110 = v30;
  *((_QWORD *)&v110 + 1) = v28;
  v35 = (std::__shared_weak_count *)v28[9].__shared_owners_;
  if (v35)
  {
    if (v35->__shared_owners_ != -1)
      goto LABEL_53;
    do
      v36 = __ldxr(p_size);
    while (__stxr(v36 + 1, p_size));
    v37 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
    std::__shared_weak_count::__release_weak(v35);
  }
  else
  {
    do
      v39 = __ldxr(p_size);
    while (__stxr(v39 + 1, p_size));
    v40 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
  }
  do
    v42 = __ldaxr(p_size);
  while (__stlxr(v42 - 1, p_size));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_53:
  v109 = v110;
  v110 = 0uLL;
  (*(void (**)(SipClientInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v109);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v109 + 1);
  if (*((_QWORD *)&v109 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v50 = v112;
  v49 = v113;
  v51 = (std::string *)operator new(0xF8uLL);
  v52 = (std::__shared_weak_count *)v51;
  v51->__r_.__value_.__l.__size_ = 0;
  v53 = &v51->__r_.__value_.__l.__size_;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C2ED8;
  v54 = (std::__shared_weak_count_vtbl *)&v51[1];
  *(_QWORD *)&v114 = v50;
  *((_QWORD *)&v114 + 1) = v49;
  if (v49)
  {
    v55 = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  SipClientInviteCompletedTransactionState::SipClientInviteCompletedTransactionState(v51 + 1, (std::string::size_type *)&v114);
  if (v49)
  {
    v57 = (unint64_t *)&v49->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_QWORD *)&v110 = v54;
  *((_QWORD *)&v110 + 1) = v52;
  v59 = (std::__shared_weak_count *)v52[9].__shared_owners_;
  if (v59)
  {
    if (v59->__shared_owners_ != -1)
      goto LABEL_84;
    do
      v60 = __ldxr(v53);
    while (__stxr(v60 + 1, v53));
    v61 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
    std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    do
      v63 = __ldxr(v53);
    while (__stxr(v63 + 1, v53));
    v64 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
  }
  do
    v66 = __ldaxr(v53);
  while (__stlxr(v66 - 1, v53));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_84:
  v108 = v110;
  v110 = 0uLL;
  (*(void (**)(SipClientInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v108);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v108 + 1);
  if (*((_QWORD *)&v108 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v108 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  v74 = v112;
  v73 = v113;
  v75 = (std::string *)operator new(0xF8uLL);
  v76 = (std::__shared_weak_count *)v75;
  v75->__r_.__value_.__l.__size_ = 0;
  v77 = &v75->__r_.__value_.__l.__size_;
  v75->__r_.__value_.__r.__words[2] = 0;
  v75->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C2F28;
  v78 = (std::__shared_weak_count_vtbl *)&v75[1];
  *(_QWORD *)&v114 = v74;
  *((_QWORD *)&v114 + 1) = v73;
  if (v73)
  {
    v79 = (unint64_t *)&v73->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  SipClientInviteTerminationPendingTransactionState::SipClientInviteTerminationPendingTransactionState(v75 + 1, (std::string::size_type *)&v114);
  if (v73)
  {
    v81 = (unint64_t *)&v73->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  *(_QWORD *)&v110 = v78;
  *((_QWORD *)&v110 + 1) = v76;
  v83 = (std::__shared_weak_count *)v76[9].__shared_owners_;
  if (v83)
  {
    if (v83->__shared_owners_ != -1)
      goto LABEL_115;
    do
      v84 = __ldxr(v77);
    while (__stxr(v84 + 1, v77));
    v85 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v76[9].__vftable = v78;
    v76[9].__shared_owners_ = (uint64_t)v76;
    std::__shared_weak_count::__release_weak(v83);
  }
  else
  {
    do
      v87 = __ldxr(v77);
    while (__stxr(v87 + 1, v77));
    v88 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    v76[9].__vftable = v78;
    v76[9].__shared_owners_ = (uint64_t)v76;
  }
  do
    v90 = __ldaxr(v77);
  while (__stlxr(v90 - 1, v77));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_115:
  v107 = v110;
  v110 = 0uLL;
  (*(void (**)(SipClientInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v107);
  v91 = (std::__shared_weak_count *)*((_QWORD *)&v107 + 1);
  if (*((_QWORD *)&v107 + 1))
  {
    v92 = (unint64_t *)(*((_QWORD *)&v107 + 1) + 8);
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)*((_QWORD *)&v110 + 1);
  if (*((_QWORD *)&v110 + 1))
  {
    v95 = (unint64_t *)(*((_QWORD *)&v110 + 1) + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v112, &v114);
  v106 = v114;
  v114 = 0uLL;
  (*(void (**)(SipClientInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v106);
  v97 = (std::__shared_weak_count *)*((_QWORD *)&v106 + 1);
  if (*((_QWORD *)&v106 + 1))
  {
    v98 = (unint64_t *)(*((_QWORD *)&v106 + 1) + 8);
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v100 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  if (*((_QWORD *)&v114 + 1))
  {
    v101 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
    do
      v102 = __ldaxr(v101);
    while (__stlxr(v102 - 1, v101));
    if (!v102)
    {
      ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
      std::__shared_weak_count::__release_weak(v100);
    }
  }
  v103 = v113;
  if (v113)
  {
    v104 = (unint64_t *)&v113->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
      std::__shared_weak_count::__release_weak(v103);
    }
  }
}

void sub_1BEEEC924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v9 - 80);
  _Unwind_Resume(a1);
}

void SipClientInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipClientInviteTransaction **a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipClientInviteTransaction,std::allocator<SipClientInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v7, &v6, a3, a4, a5);
  SipClientInviteTransaction::constructStateMachine(*a5);
}

void sub_1BEEECA34(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipClientInviteTransaction::~SipClientInviteTransaction(SipClientInviteTransaction *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_1E78C2328;
  *((_QWORD *)this + 9) = &unk_1E78C23D8;
  *((_QWORD *)this + 12) = &unk_1E78C2440;
  *((_QWORD *)this + 21) = &unk_1E78C2488;
  v2 = *((_QWORD *)this + 71);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  SipClientTransaction::~SipClientTransaction(this, (uint64_t *)&off_1E78C24E0);
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipClientInviteTransaction::~SipClientInviteTransaction(SipClientInviteTransaction *this)
{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 72));
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 96));
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 168));
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 96));
  JUMPOUT(0x1C3B87100);
}

{
  SipClientInviteTransaction::~SipClientInviteTransaction((SipClientInviteTransaction *)((char *)this - 168));
  JUMPOUT(0x1C3B87100);
}

uint64_t SipClientInviteTransaction::initialize(SipClientInviteTransaction *this)
{
  SipTransaction::initialize(this);
  return (*(uint64_t (**)(SipClientInviteTransaction *, uint64_t))(*(_QWORD *)this + 32))(this, 2);
}

double SipClientInviteTransaction::sendAckForResponse@<D0>(SipClientInviteTransaction *this@<X0>, const SipResponse *a2@<X1>, uint64_t a3@<X8>)
{
  SipRequest *MatchingAckForResponse;
  uint64_t v6;
  double result;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;

  MatchingAckForResponse = (SipRequest *)*((_QWORD *)this + 71);
  if (MatchingAckForResponse
    || (MatchingAckForResponse = SipRequest::createMatchingAckForResponse(*((SipRequest **)this + 36), a2),
        (*((_QWORD *)this + 71) = MatchingAckForResponse) != 0))
  {
    v6 = *((_QWORD *)this + 39);
    std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v11, (_QWORD *)this + 34);
    SipTransactionLayer::sendMessageInTransaction(v6, (uint64_t)MatchingAckForResponse, (uint64_t)&v11, a3);
    v8 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    result = 0.0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741825;
  }
  return result;
}

void sub_1BEEECC6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTransaction::constructStateMachine(SipClientNonInviteTransaction *this)
{
  std::__shared_weak_count *v2;
  std::string::size_type v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *shared_owners;
  unint64_t v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::string::size_type v26;
  std::string *v27;
  std::__shared_weak_count *v28;
  unint64_t *p_size;
  std::__shared_weak_count_vtbl *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  std::string::size_type v50;
  std::string *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  std::__shared_weak_count_vtbl *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  __int128 v82;
  __int128 v83;
  __int128 v84;
  __int128 v85;
  __int128 v86;
  std::string::size_type v87;
  std::__shared_weak_count *v88;
  __int128 v89;

  v87 = 0;
  v88 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v87, (_QWORD *)this + 34);
  v3 = v87;
  v2 = v88;
  v4 = (std::__shared_weak_count *)operator new(0x100uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2FC8;
  v7 = (std::__shared_weak_count_vtbl *)&v4[1];
  *(_QWORD *)&v89 = v3;
  *((_QWORD *)&v89 + 1) = v2;
  if (v2)
  {
    v8 = (unint64_t *)&v2->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  SipClientNonInviteTryingTransactionState::SipClientNonInviteTryingTransactionState((uint64_t)&v4[1], (std::string::size_type *)&v89);
  if (v2)
  {
    v10 = (unint64_t *)&v2->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  *(_QWORD *)&v85 = v7;
  *((_QWORD *)&v85 + 1) = v5;
  shared_owners = (std::__shared_weak_count *)v5[9].__shared_owners_;
  if (shared_owners)
  {
    if (shared_owners->__shared_owners_ != -1)
      goto LABEL_22;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_owners);
  }
  else
  {
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v5[9].__vftable = v7;
    v5[9].__shared_owners_ = (uint64_t)v5;
  }
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_22:
  v86 = v85;
  v85 = 0uLL;
  (*(void (**)(SipClientNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v86);
  v20 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v21 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*((_QWORD *)&v85 + 1))
  {
    v23 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      (*(void (**)(_QWORD))(**((_QWORD **)&v85 + 1) + 16))(*((_QWORD *)&v85 + 1));
      std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v85 + 1));
    }
  }
  v26 = v87;
  v25 = v88;
  v27 = (std::string *)operator new(0xF8uLL);
  v28 = (std::__shared_weak_count *)v27;
  v27->__r_.__value_.__l.__size_ = 0;
  p_size = &v27->__r_.__value_.__l.__size_;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C3018;
  v30 = (std::__shared_weak_count_vtbl *)&v27[1];
  *(_QWORD *)&v89 = v26;
  *((_QWORD *)&v89 + 1) = v25;
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  SipClientNonInviteProceedingTransactionState::SipClientNonInviteProceedingTransactionState(v27 + 1, (std::string::size_type *)&v89);
  if (v25)
  {
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  *(_QWORD *)&v85 = v30;
  *((_QWORD *)&v85 + 1) = v28;
  v35 = (std::__shared_weak_count *)v28[9].__shared_owners_;
  if (v35)
  {
    if (v35->__shared_owners_ != -1)
      goto LABEL_53;
    do
      v36 = __ldxr(p_size);
    while (__stxr(v36 + 1, p_size));
    v37 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
    std::__shared_weak_count::__release_weak(v35);
  }
  else
  {
    do
      v39 = __ldxr(p_size);
    while (__stxr(v39 + 1, p_size));
    v40 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v28[9].__vftable = v30;
    v28[9].__shared_owners_ = (uint64_t)v28;
  }
  do
    v42 = __ldaxr(p_size);
  while (__stlxr(v42 - 1, p_size));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_53:
  v84 = v85;
  v85 = 0uLL;
  (*(void (**)(SipClientNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v84);
  v43 = (std::__shared_weak_count *)*((_QWORD *)&v84 + 1);
  if (*((_QWORD *)&v84 + 1))
  {
    v44 = (unint64_t *)(*((_QWORD *)&v84 + 1) + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v47 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  v50 = v87;
  v49 = v88;
  v51 = (std::string *)operator new(0xF8uLL);
  v52 = (std::__shared_weak_count *)v51;
  v51->__r_.__value_.__l.__size_ = 0;
  v53 = &v51->__r_.__value_.__l.__size_;
  v51->__r_.__value_.__r.__words[2] = 0;
  v51->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C3068;
  v54 = (std::__shared_weak_count_vtbl *)&v51[1];
  *(_QWORD *)&v89 = v50;
  *((_QWORD *)&v89 + 1) = v49;
  if (v49)
  {
    v55 = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  SipClientNonInviteCompletedTransactionState::SipClientNonInviteCompletedTransactionState(v51 + 1, (std::string::size_type *)&v89);
  if (v49)
  {
    v57 = (unint64_t *)&v49->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  *(_QWORD *)&v85 = v54;
  *((_QWORD *)&v85 + 1) = v52;
  v59 = (std::__shared_weak_count *)v52[9].__shared_owners_;
  if (v59)
  {
    if (v59->__shared_owners_ != -1)
      goto LABEL_84;
    do
      v60 = __ldxr(v53);
    while (__stxr(v60 + 1, v53));
    v61 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
    std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    do
      v63 = __ldxr(v53);
    while (__stxr(v63 + 1, v53));
    v64 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v52[9].__vftable = v54;
    v52[9].__shared_owners_ = (uint64_t)v52;
  }
  do
    v66 = __ldaxr(v53);
  while (__stlxr(v66 - 1, v53));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_84:
  v83 = v85;
  v85 = 0uLL;
  (*(void (**)(SipClientNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v83);
  v67 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v68 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)*((_QWORD *)&v85 + 1);
  if (*((_QWORD *)&v85 + 1))
  {
    v71 = (unint64_t *)(*((_QWORD *)&v85 + 1) + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  std::allocate_shared[abi:ne180100]<SipTerminatedTransactionState,std::allocator<SipTerminatedTransactionState>,std::shared_ptr<SipTransaction> &,void>(&v87, &v89);
  v82 = v89;
  v89 = 0uLL;
  (*(void (**)(SipClientNonInviteTransaction *, __int128 *))(*(_QWORD *)this + 48))(this, &v82);
  v73 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v74 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v76 = (std::__shared_weak_count *)*((_QWORD *)&v89 + 1);
  if (*((_QWORD *)&v89 + 1))
  {
    v77 = (unint64_t *)(*((_QWORD *)&v89 + 1) + 8);
    do
      v78 = __ldaxr(v77);
    while (__stlxr(v78 - 1, v77));
    if (!v78)
    {
      ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
      std::__shared_weak_count::__release_weak(v76);
    }
  }
  v79 = v88;
  if (v88)
  {
    v80 = (unint64_t *)&v88->__shared_owners_;
    do
      v81 = __ldaxr(v80);
    while (__stlxr(v81 - 1, v80));
    if (!v81)
    {
      ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
      std::__shared_weak_count::__release_weak(v79);
    }
  }
}

void sub_1BEEED2B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTransaction::create(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string *a4@<X3>, SipClientNonInviteTransaction **a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;

  v6 = a2;
  v7 = a1;
  *a5 = 0;
  a5[1] = 0;
  std::allocate_shared[abi:ne180100]<SipClientNonInviteTransaction,std::allocator<SipClientNonInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(&v7, &v6, a3, a4, a5);
  SipClientNonInviteTransaction::constructStateMachine(*a5);
}

void sub_1BEEED3A8(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void SipClientNonInviteTransaction::initialize(SipClientNonInviteTransaction *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  _BYTE v12[24];
  _BYTE *v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v3 = *((_QWORD *)this + 34);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 35);
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  SipTransaction::initialize(this);
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = operator new(0x20uLL);
  *v9 = &off_1E78C3108;
  v9[1] = this;
  v9[2] = v3;
  v9[3] = v2;
  v13 = v9;
  SipTimerContainer::startSipTimer((_QWORD *)this + 51, (uint64_t)&SipTimers::kTimerF, (uint64_t)v12, 0);
  v10 = v13;
  if (v13 == v12)
  {
    v11 = 4;
    v10 = v12;
  }
  else
  {
    if (!v13)
      goto LABEL_13;
    v11 = 5;
  }
  (*(void (**)(void))(*v10 + 8 * v11))();
LABEL_13:
  (*(void (**)(SipClientNonInviteTransaction *, uint64_t))(*(_QWORD *)this + 32))(this, 1);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BEEED4F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  char *v14;
  char *v16;
  uint64_t v17;

  v16 = a13;
  if (a13 == v14)
  {
    v17 = 4;
    v16 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v17 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v16 + 8 * v17))();
LABEL_6:
  if (v13)
  {
    std::__shared_weak_count::__release_weak(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

void SipClientNonInviteTransaction::handleTimer(SipTransaction *a1, unsigned __int8 *a2)
{
  if (operator==(a2, (uint64_t)&SipTimers::kTimerF)
    && ((*(uint64_t (**)(SipTransaction *))(*(_QWORD *)a1 + 144))(a1) & 1) == 0)
  {
    SipTransaction::handleTimeout(a1);
  }
}

void SipClientNonInviteTransaction::~SipClientNonInviteTransaction(SipClientNonInviteTransaction *this)
{
  SipClientTransaction::~SipClientTransaction(this, (uint64_t *)&off_1E78C2700);
}

{
  SipClientTransaction::~SipClientTransaction(this, (uint64_t *)&off_1E78C2700);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'SipClientNonInviteTransaction::~SipClientNonInviteTransaction(SipClientNonInviteTransaction *this)
{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 72), (uint64_t *)&off_1E78C2700);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 72), (uint64_t *)&off_1E78C2700);
  JUMPOUT(0x1C3B87100);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 96), (uint64_t *)&off_1E78C2700);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 96), (uint64_t *)&off_1E78C2700);
  JUMPOUT(0x1C3B87100);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 168), (uint64_t *)&off_1E78C2700);
}

{
  SipClientTransaction::~SipClientTransaction((SipClientNonInviteTransaction *)((char *)this - 168), (uint64_t *)&off_1E78C2700);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<SipClientInviteCallingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2E38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteCallingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2E38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteCallingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipClientInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2E88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2E88;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipClientInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2ED8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2ED8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipClientInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteTerminationPendingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2F28;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteTerminationPendingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SipClientInviteTransaction,std::allocator<SipClientInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x258uLL);
  std::__shared_ptr_emplace<SipClientInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientInviteTransaction>,0>((uint64_t)v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 37, (uint64_t)(v10 + 3));
}

void sub_1BEEED854(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientInviteTransaction>,0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const std::string *a5)
{
  uint64_t v6;
  uint64_t v7;

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = &off_1E78C2F78;
  v6 = *a2;
  v7 = *a3;
  *(_QWORD *)(a1 + 120) = &off_1E78B7B60;
  SipTransaction::SipTransaction(a1 + 24, (uint64_t *)&off_1E78C24E8, v6, a4, a5);
  *(_QWORD *)(a1 + 312) = v7;
  *(_QWORD *)(a1 + 24) = &off_1E78C2328;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_QWORD *)(a1 + 96) = &unk_1E78C23D8;
  *(_QWORD *)(a1 + 120) = &unk_1E78C2440;
  *(_QWORD *)(a1 + 192) = &unk_1E78C2488;
  return a1;
}

void sub_1BEEED8F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipClientInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2F78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2F78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<SipClientNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteTryingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C2FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteTryingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipClientNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteProceedingTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3018;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteProceedingTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<SipClientNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteCompletedTransactionState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3068;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteCompletedTransactionState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<SipClientNonInviteTransaction,std::allocator<SipClientNonInviteTransaction>,SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, const std::string *a4@<X4>, _QWORD *a5@<X8>)
{
  _QWORD *v10;

  v10 = operator new(0x250uLL);
  std::__shared_ptr_emplace<SipClientNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientNonInviteTransaction>,0>(v10, a1, a2, a3, a4);
  *a5 = v10 + 3;
  a5[1] = v10;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a5, v10 + 37, (uint64_t)(v10 + 3));
}

void sub_1BEEEDAB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipClientNonInviteTransaction>::__shared_ptr_emplace[abi:ne180100]<SipTransactionLayer *&,SipRequest *&,std::shared_ptr<IpAddress> const&,std::string const&,std::allocator<SipClientNonInviteTransaction>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const std::string *a5)
{
  uint64_t v6;
  uint64_t v7;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78C30B8;
  v6 = *a2;
  v7 = *a3;
  a1[15] = &off_1E78B7B60;
  SipTransaction::SipTransaction((uint64_t)(a1 + 3), (uint64_t *)&off_1E78C2708, v6, a4, a5);
  a1[39] = v7;
  a1[73] = 0;
  a1[3] = &off_1E78C2548;
  a1[12] = &unk_1E78C25F8;
  a1[15] = &unk_1E78C2660;
  a1[24] = &unk_1E78C26A8;
  return a1;
}

void sub_1BEEEDB44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipClientNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C30B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipClientNonInviteTransaction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C30B8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipClientNonInviteTransaction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C3108;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C3108;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C3108;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C3108;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 88))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEEEDD8C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipClientNonInviteTransaction::initialize(void)::$_0,std::allocator<SipClientNonInviteTransaction::initialize(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void ims::rtp::createMediaSessionStateMachine(uint64_t *a1@<X0>, ImsPrefs *a2@<X1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  void *__p[2];
  char v18;
  void *v19[2];
  char v20;

  std::string::basic_string[abi:ne180100]<0>(v19, "rtp.session");
  std::string::basic_string[abi:ne180100]<0>(__p, (char *)&str_1_13);
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)v19, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"createMediaSessionStateMachine", 30);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v18 < 0)
    operator delete(__p[0]);
  if (v20 < 0)
    operator delete(v19[0]);
  v9 = a1[1];
  v15 = *a1;
  v16 = (std::__shared_weak_count *)v9;
  if (v9)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  MediaSessionStateMachine::create(&v15, a2, a3, a4);
  v12 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v16->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEEEDF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t tlv::parseV<audio::tlv::DtmfEvent>(tlv **a1, int a2)
{
  tlv *v3;
  const unsigned __int8 *v4;
  int v5;
  int v6;

  v3 = *a1;
  v4 = (const unsigned __int8 *)*a1 + a2;
  tlv::throwIfNotEnoughBytes(*a1, v4, (const unsigned __int8 *)1);
  v5 = *(unsigned __int8 *)v3;
  tlv::throwIfNotEnoughBytes((tlv *)((char *)v3 + 1), v4, (const unsigned __int8 *)1);
  v6 = *((unsigned __int8 *)v3 + 1);
  *a1 = (tlv *)((char *)v3 + 2);
  return v5 | (v6 << 8);
}

void sub_1BEEEE004(void *a1)
{
  _QWORD *v1;

  __cxa_begin_catch(a1);
  *v1 = 0;
  __cxa_end_catch();
  JUMPOUT(0x1BEEEDFF0);
}

ims::lazuli::Chat *ims::lazuli::Chat::Chat(ims::lazuli::Chat *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v3 = dispatch_queue_create("LazuliChat", v2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  if (v3)
  {
    v4 = v3;
    dispatch_retain(v3);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v4);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E78C3200;
  return this;
}

void ims::lazuli::Chat::~Chat(ims::lazuli::Chat *this)
{
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this + 1);
}

_QWORD *ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable(_QWORD *a1)
{
  NSObject *v2;
  NSObject *v3;
  std::__shared_weak_count *v4;

  v2 = a1[3];
  if (v2)
    dispatch_release(v2);
  v3 = a1[2];
  if (v3)
    dispatch_release(v3);
  v4 = (std::__shared_weak_count *)a1[1];
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  return a1;
}

__n128 ims::lazuli::Chat::startChat@<Q0>(uint64_t *a1@<X0>, void **a2@<X1>, __n128 *a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  __int128 v14;
  unint64_t *v15;
  unint64_t v16;
  xpc_object_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  std::string::size_type v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  char *v39;
  std::string *v40;
  std::string *v41;
  uint64_t v42;
  __n128 result;
  __n128 v44;
  xpc_object_t object;
  std::string __p;
  std::string v47;
  std::string v48;
  std::string v49;
  std::string *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v6 = (std::__shared_weak_count *)operator new(0x158uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3448;
  v8 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a2;
  object = v12;
  if (v12)
    xpc_retain(v12);
  else
    object = xpc_null_create();
  v13 = v6 + 1;
  ims::lazuli::Chat::Chat((ims::lazuli::Chat *)&v6[1]);
  v6[2].__shared_weak_owners_ = (uint64_t)&unk_1E78C35F8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  if (*(char *)(v8 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v49, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
  }
  else
  {
    v14 = *(_OWORD *)(v8 + 8);
    v49.__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v14;
  }
  ImsLogContainer::ImsLogContainer((uint64_t)&v6[3], &__p, &v49);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v6[7].__shared_owners_ = v8;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3498;
  v6[2].__shared_weak_owners_ = (uint64_t)&unk_1E78C3530;
  v6[3].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C3550;
  v6[7].__shared_weak_owners_ = (uint64_t)v9;
  if (v9)
  {
    v15 = (unint64_t *)&v9->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
  }
  v17 = object;
  v6[8].__vftable = (std::__shared_weak_count_vtbl *)object;
  if (v17)
    xpc_retain(v17);
  else
    v6[8].__vftable = (std::__shared_weak_count_vtbl *)xpc_null_create();
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v49, &v48);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v48.__r_.__value_.__l.__data_);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"kResourceXml";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v49, &v48);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v48.__r_.__value_.__l.__data_);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"kSubject";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v49, &v48);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v48.__r_.__value_.__l.__data_);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v49, &v48);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v48.__r_.__value_.__l.__data_);
  v6[12].__shared_owners_ = 0;
  v6[12].__shared_weak_owners_ = 0;
  v6[13].__vftable = 0;
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v6[8];
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v49, &v48);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  xpc_release(v48.__r_.__value_.__l.__data_);
  xpc_release(object);
  object = 0;
  if (v9)
  {
    v18 = (unint64_t *)&v9->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v44.n128_u64[0] = (unint64_t)&v6[1];
  v44.n128_u64[1] = (unint64_t)v6;
  shared_weak_owners = (std::__shared_weak_count *)v6[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_48;
    do
      v21 = __ldxr(p_shared_owners);
    while (__stxr(v21 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v6[1].__shared_owners_ = (uint64_t)v13;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v24 = __ldxr(p_shared_owners);
    while (__stxr(v24 + 1, p_shared_owners));
    v25 = (unint64_t *)&v6->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v6[1].__shared_owners_ = (uint64_t)v13;
    v6[1].__shared_weak_owners_ = (uint64_t)v6;
  }
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
LABEL_48:
  v28 = v6 + 1;
  v29 = ((uint64_t (*)(std::__shared_weak_count *))v6[3].__vftable[1].__get_deleter)(&v6[3]);
  (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)(v44.n128_u64[0] + 48) + 16))(v44.n128_u64[0] + 48, v29);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"Chat conv ", 10);
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v29 + 32))(v29, v44.n128_u64[0] + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" stack ", 7);
  *(_BYTE *)(v29 + 17) = 0;
  ((void (*)(std::string *__return_ptr, std::__shared_weak_count *))v28->__vftable[2].__on_zero_shared)(&__p, v28);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v29 + 32))(v29, &__p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v30 = *(std::__shared_weak_count **)(v44.n128_u64[0] + 16);
  if (!v30 || (v31 = *(_QWORD *)(v44.n128_u64[0] + 8), (v32 = std::__shared_weak_count::lock(v30)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v33 = v32;
  v34 = (unint64_t *)&v32->__shared_weak_owners_;
  do
    v35 = __ldxr(v34);
  while (__stxr(v35 + 1, v34));
  v36 = (unint64_t *)&v32->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v33);
  }
  memset(&v48, 0, sizeof(v48));
  if (*(char *)(v44.n128_u64[0] + 319) < 0)
    std::string::__init_copy_ctor_external(&v48, *(const std::string::value_type **)(v44.n128_u64[0] + 296), *(_QWORD *)(v44.n128_u64[0] + 304));
  else
    v48 = *(std::string *)(v44.n128_u64[0] + 296);
  __p.__r_.__value_.__r.__words[0] = v44.n128_u64[0];
  __p.__r_.__value_.__l.__size_ = v31;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v33;
  do
    v38 = __ldxr(v34);
  while (__stxr(v38 + 1, v34));
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v47, v48.__r_.__value_.__l.__data_, v48.__r_.__value_.__l.__size_);
  else
    v47 = v48;
  v50 = 0;
  v39 = (char *)operator new(0x38uLL);
  *(_QWORD *)v39 = off_1E78C33C8;
  *(std::string *)(v39 + 8) = __p;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
  v40 = (std::string *)(v39 + 32);
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v40, v47.__r_.__value_.__l.__data_, v47.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v40->__r_.__value_.__l.__data_ = *(_OWORD *)&v47.__r_.__value_.__l.__data_;
    *((_QWORD *)v39 + 6) = *((_QWORD *)&v47.__r_.__value_.__l + 2);
  }
  v50 = (std::string *)v39;
  IMSClientManager::callOnMainQueue((IMSClientManager *)&v49);
  v41 = v50;
  if (v50 == &v49)
  {
    v42 = 4;
    v41 = &v49;
  }
  else
  {
    if (!v50)
      goto LABEL_74;
    v42 = 5;
  }
  (*(void (**)(void))(v41->__r_.__value_.__r.__words[0] + 8 * v42))();
LABEL_74:
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v47.__r_.__value_.__l.__data_);
  if (__p.__r_.__value_.__r.__words[2])
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2]);
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v48.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v33);
  result = v44;
  *a3 = v44;
  return result;
}

void sub_1BEEEE7B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34)
{
  std::__shared_weak_count *v34;
  _QWORD *v35;
  std::__shared_weak_count *v37;

  v37 = (std::__shared_weak_count *)v35[3];
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  operator delete(v35);
  if (a26 < 0)
    operator delete(__p);
  std::__shared_weak_count::__release_weak(v34);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void ims::lazuli::ChatDelegate::~ChatDelegate(ims::lazuli::ChatDelegate *this)
{
  JUMPOUT(0x1C3B87100);
}

ims::lazuli::ChatServices *ims::lazuli::ChatServices::ChatServices(ims::lazuli::ChatServices *this)
{
  NSObject *v2;
  NSObject *v3;
  NSObject *v4;

  v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  v3 = dispatch_queue_create("LazuliChatServices", v2);
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  *((_QWORD *)this + 3) = v3;
  if (v3)
  {
    v4 = v3;
    dispatch_retain(v3);
    *((_QWORD *)this + 4) = 0;
    dispatch_release(v4);
  }
  else
  {
    *((_QWORD *)this + 4) = 0;
  }
  *(_QWORD *)this = off_1E78C3288;
  return this;
}

void ims::lazuli::ChatServices::~ChatServices(ims::lazuli::ChatServices *this)
{
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this + 1);
}

void ims::lazuli::ChatServices::create(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  _QWORD *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  std::string __p;
  std::string v25;

  v4 = (std::__shared_weak_count *)operator new(0xB8uLL);
  v5 = v4;
  v4->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3918;
  v7 = &v4[1].__vftable;
  v9 = *a1;
  v8 = (std::__shared_weak_count *)a1[1];
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  ims::lazuli::ChatServices::ChatServices((ims::lazuli::ChatServices *)&v4[1]);
  std::string::basic_string[abi:ne180100]<0>(&v25, "laz.cht.svc");
  if (*(char *)(v9 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v9 + 8), *(_QWORD *)(v9 + 16));
  }
  else
  {
    v12 = *(_OWORD *)(v9 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v9 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v12;
  }
  ImsLogContainer::ImsLogContainer((uint64_t)&v5[2].__shared_weak_owners_, &v25, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)off_1E78C3968;
  v5[2].__shared_weak_owners_ = (uint64_t)&unk_1E78C39A0;
  v5[7].__vftable = (std::__shared_weak_count_vtbl *)v9;
  v5[7].__shared_owners_ = (uint64_t)v8;
  if (v8)
  {
    v13 = (unint64_t *)&v8->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    do
      v15 = __ldaxr(v13);
    while (__stlxr(v15 - 1, v13));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  shared_weak_owners = (std::__shared_weak_count *)v5[1].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_30;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
    p_shared_weak_owners = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
    v5[1].__shared_owners_ = (uint64_t)v7;
    v5[1].__shared_weak_owners_ = (uint64_t)v5;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v20 = __ldxr(p_shared_owners);
    while (__stxr(v20 + 1, p_shared_owners));
    v21 = (unint64_t *)&v5->__shared_weak_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    v5[1].__shared_owners_ = (uint64_t)v7;
    v5[1].__shared_weak_owners_ = (uint64_t)v5;
  }
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
LABEL_30:
  *a2 = v7;
  a2[1] = v5;
}

void sub_1BEEEED44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  void *v25;

  if (a20 < 0)
    operator delete(__p);
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable(&v20[1].__shared_owners_);
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v25);
  _Unwind_Resume(a1);
}

uint64_t `anonymous namespace'::ChatImpl::init(void)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C33C8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C33C8;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x38uLL);
  *v2 = off_1E78C33C8;
  return v2;
}

void sub_1BEEEEF1C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E78C33C8;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::operator()(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  _OWORD *v24;
  _OWORD *v25;
  __int128 *v26;
  __int128 v27;
  __int128 *v28;
  __int128 v29;
  uint64_t v30;
  IMSClientManager *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void *__p[2];
  _OWORD v38[2];
  std::string v39[2];
  _BYTE v40[176];
  std::string v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  std::string v46;

  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    v3 = a1[1];
    v4 = std::__shared_weak_count::lock(v2);
    if (v4 && a1[2])
    {
      v44 = 0;
      v45 = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v3 + 96))(__p, v3);
      IMSClientManager::lazuliDelegateForStack(__p, &v44);
      if (SBYTE7(v38[0]) < 0)
        operator delete(__p[0]);
      v5 = v44;
      v7 = v3 + 48;
      v6 = *(_QWORD *)(v3 + 48);
      if (v44)
      {
        v8 = (*(uint64_t (**)(uint64_t))(v6 + 64))(v3 + 48);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v3 + 48, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Tracking Chat ", 14);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v3 + 296);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        if (*(char *)(v3 + 319) < 0)
          std::string::__init_copy_ctor_external(&v46, *(const std::string::value_type **)(v3 + 296), *(_QWORD *)(v3 + 304));
        else
          v46 = *(std::string *)(v3 + 296);
        v11 = *(std::__shared_weak_count **)(v3 + 16);
        if (!v11 || (v12 = *(_QWORD *)(v3 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v14 = v13;
        v42 = v12;
        v43 = v13;
        p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v16 = __ldxr(p_shared_weak_owners);
        while (__stxr(v16 + 1, p_shared_weak_owners));
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v14);
        }
        LazuliDelegate::addChat(v5, (uint64_t)&v46, &v42);
        if (v43)
          std::__shared_weak_count::__release_weak(v43);
        if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v46.__r_.__value_.__l.__data_);
      }
      else
      {
        v10 = (*(uint64_t (**)(uint64_t))(v6 + 56))(v3 + 48);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v3 + 48, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Unable to store Chat ", 21);
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 32))(v10, v3 + 296);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
      }
      v19 = v45;
      if (v45)
      {
        v20 = (unint64_t *)&v45->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      if (*(char *)(v3 + 223) < 0)
      {
        if (!*(_QWORD *)(v3 + 208))
          goto LABEL_64;
      }
      else if (!*(_BYTE *)(v3 + 223))
      {
LABEL_64:
        v35 = (unint64_t *)&v4->__shared_owners_;
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      memset(&v41, 0, sizeof(v41));
      memset(v40, 0, sizeof(v40));
      memset(v39, 0, sizeof(v39));
      *(_OWORD *)__p = 0u;
      memset(v38, 0, sizeof(v38));
      v22 = *(_QWORD *)(v3 + 152);
      if (*(char *)(v22 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v22 + 8), *(_QWORD *)(v22 + 16));
      }
      else
      {
        v23 = *(_OWORD *)(v22 + 8);
        *(_QWORD *)&v38[0] = *(_QWORD *)(v22 + 24);
        *(_OWORD *)__p = v23;
      }
      v24 = (_OWORD *)(v3 + 248);
      if (*(char *)(v3 + 271) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v38 + 8), *(const std::string::value_type **)(v3 + 248), *(_QWORD *)(v3 + 256));
      }
      else
      {
        *(_OWORD *)((char *)v38 + 8) = *v24;
        *((_QWORD *)&v38[1] + 1) = *(_QWORD *)(v3 + 264);
      }
      if (*(char *)(v3 + 199) < 0)
        std::string::__init_copy_ctor_external(v39, *(const std::string::value_type **)(v3 + 176), *(_QWORD *)(v3 + 184));
      else
        v39[0] = *(std::string *)(v3 + 176);
      v25 = (_OWORD *)(v3 + 296);
      if (*(char *)(v3 + 319) < 0)
      {
        std::string::__init_copy_ctor_external(&v39[1], *(const std::string::value_type **)(v3 + 296), *(_QWORD *)(v3 + 304));
        if (*(char *)(v3 + 319) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v40, *(const std::string::value_type **)(v3 + 296), *(_QWORD *)(v3 + 304));
          goto LABEL_52;
        }
      }
      else
      {
        *(_OWORD *)&v39[1].__r_.__value_.__l.__data_ = *v25;
        v39[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 312);
      }
      *(_OWORD *)v40 = *v25;
      *(_QWORD *)&v40[16] = *(_QWORD *)(v3 + 312);
LABEL_52:
      v26 = (__int128 *)(v3 + 200);
      memset(&v40[24], 0, 128);
      if (*(char *)(v3 + 223) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)&v40[152], *(const std::string::value_type **)(v3 + 200), *(_QWORD *)(v3 + 208));
      }
      else
      {
        v27 = *v26;
        *(_QWORD *)&v40[168] = *(_QWORD *)(v3 + 216);
        *(_OWORD *)&v40[152] = v27;
      }
      v28 = (__int128 *)(v3 + 224);
      if (*(char *)(v3 + 247) < 0)
      {
        std::string::__init_copy_ctor_external(&v41, *(const std::string::value_type **)(v3 + 224), *(_QWORD *)(v3 + 232));
      }
      else
      {
        v29 = *v28;
        v41.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 240);
        *(_OWORD *)&v41.__r_.__value_.__l.__data_ = v29;
      }
      v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v3 + 48);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"Creating Group Chat txn ", 24);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _OWORD *))(*(_QWORD *)v30 + 32))(v30, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" subject '", 10);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v30 + 32))(v30, v28);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"' xml ", 6);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v30 + 32))(v30, v26);
      v31 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
      IMSClientManager::instance(v31);
      IPTelephonyManager::getInstance(&v44);
      IMSCallManager::initializeMOLazuliSession(*(IMSCallManager **)(v44 + 200), (const LazuliSendParams *)__p, 0);
      v32 = v45;
      if (v45)
      {
        v33 = (unint64_t *)&v45->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
      LazuliSendParams::~LazuliSendParams(__p);
      goto LABEL_64;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(&v46, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 32))(v9, a1 + 4);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v46.__r_.__value_.__l.__data_);
  if (SBYTE7(v38[0]) < 0)
    operator delete(__p[0]);
  if (v4)
    goto LABEL_64;
}

void sub_1BEEEF5C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v35;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::init(void)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::init(void)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::string *v6;
  __int128 v7;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v3 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::string *)(a1 + 24);
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  return a1;
}

void sub_1BEEEF8A8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<`anonymous namespace'::ChatImpl::init(void)::$_0,std::allocator<`anonymous namespace'::ChatImpl::init(void)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ChatImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ChatImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3448;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::ChatImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::ChatImpl::~ChatImpl(_anonymous_namespace_::ChatImpl *this)
{
  uint64_t v2;
  char *v3;
  __int128 v4;
  void **v5;
  uint64_t v6;
  char *v7;
  char *v8;
  std::string *v9;
  void **v10;
  uint64_t v11;
  std::string __p;
  std::string v13;
  std::string v14;
  std::string v15;
  void *v16[2];
  char v17;
  void **v18;
  uint64_t v19;

  v19 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)this = &off_1E78C3498;
  *((_QWORD *)this + 5) = &unk_1E78C3530;
  *((_QWORD *)this + 6) = &unk_1E78C3550;
  memset(&v15, 0, sizeof(v15));
  v3 = (char *)this + 152;
  v2 = *((_QWORD *)this + 19);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v15, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(v2 + 8);
    v15.__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v4;
  }
  memset(&v14, 0, sizeof(v14));
  v5 = (void **)((char *)this + 296);
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(&v14, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
  }
  else
  {
    *(_OWORD *)&v14.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    v14.__r_.__value_.__r.__words[2] = *((_QWORD *)this + 39);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(v16, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Destroying Chat instance for conv ", 34);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, char *))(*(_QWORD *)v6 + 32))(v6, (char *)this + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" client refcount ", 17);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v17 < 0)
    operator delete(v16[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&__p, v15.__r_.__value_.__l.__data_, v15.__r_.__value_.__l.__size_);
  else
    __p = v15;
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v13, v14.__r_.__value_.__l.__data_, v14.__r_.__value_.__l.__size_);
  else
    v13 = v14;
  v18 = 0;
  v7 = (char *)operator new(0x38uLL);
  v8 = v7;
  *(_QWORD *)v7 = off_1E78C3618;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v7 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v7 + 8) = __p;
  v9 = (std::string *)(v8 + 32);
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v9, v13.__r_.__value_.__l.__data_, v13.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
    *((_QWORD *)v8 + 6) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  }
  v18 = (void **)v8;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v16);
  v10 = v18;
  if (v18 == v16)
  {
    v11 = 4;
    v10 = v16;
  }
  else
  {
    if (!v18)
      goto LABEL_28;
    v11 = 5;
  }
  (*((void (**)(void))*v10 + v11))();
LABEL_28:
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v13.__r_.__value_.__l.__data_);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v14.__r_.__value_.__l.__data_);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  if (*((char *)this + 319) < 0)
    operator delete(*v5);
  if (*((char *)this + 295) < 0)
    operator delete(*((void **)this + 34));
  if (*((char *)this + 271) < 0)
    operator delete(*((void **)this + 31));
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  if (*((char *)this + 199) < 0)
    operator delete(*((void **)this + 22));
  xpc_release(*((xpc_object_t *)this + 21));
  *((_QWORD *)this + 21) = 0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v3);
  *((_QWORD *)this + 6) = off_1E78CFE68;
  if (*((char *)this + 103) < 0)
    operator delete(*((void **)this + 10));
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this + 1);
}

{
  JUMPOUT(0x1C3B87100);
}

void sub_1BEEEFD14(_Unwind_Exception *exception_object, int a2)
{
  char *v2;
  void **v3;

  if (a2)
  {
    if (v2[31] < 0)
      operator delete(*v3);
    operator delete(v2);
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void `anonymous namespace'::ChatImpl::changeGroupChatInfo(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = (_QWORD *)operator new();
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  v15 = 0;
  v16 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void `anonymous namespace'::ChatImpl::sendMessage(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = (_QWORD *)operator new();
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  v15 = 0;
  v16 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void `anonymous namespace'::ChatImpl::addParticipant(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = (_QWORD *)operator new();
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  v15 = 0;
  v16 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void `anonymous namespace'::ChatImpl::removeParticipant(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = (_QWORD *)operator new();
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  v15 = 0;
  v16 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void `anonymous namespace'::ChatImpl::contributionId(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void `anonymous namespace'::ChatImpl::conversationId(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 319) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 37), *((_QWORD *)this + 38));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 296);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 39);
  }
}

uint64_t `anonymous namespace'::ChatImpl::setContributionId(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t result;

  v1 = a1 + 48;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 56))(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"deprecated-- setContributionId for ", 35);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 32))(v2, v1 + 248);
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  return result;
}

std::string *`anonymous namespace'::ChatImpl::setConversationId(std::string *a1, const std::string *a2)
{
  std::string *v3;
  uint64_t v4;

  v3 = a1 + 2;
  v4 = (*(uint64_t (**)(std::string *))(a1[2].__r_.__value_.__r.__words[0] + 56))(a1 + 2);
  (*(void (**)(std::string *, uint64_t))(v3->__r_.__value_.__r.__words[0] + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"deprecated-- clobbering conversation ID ", 40);
  *(_BYTE *)(v4 + 17) = 0;
  v3 = (std::string *)((char *)v3 + 248);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v4 + 32))(v4, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" as ", 4);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v4 + 32))(v4, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  return std::string::operator=(v3, a2);
}

void `anonymous namespace'::ChatImpl::chatId(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 295) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 34), *((_QWORD *)this + 35));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 17);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 36);
  }
}

void `anonymous namespace'::ChatImpl::stackId(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  uint64_t v2;
  __int128 v3;

  v2 = *((_QWORD *)this + 19);
  if (*(char *)(v2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(const std::string::value_type **)(v2 + 8), *(_QWORD *)(v2 + 16));
  }
  else
  {
    v3 = *(_OWORD *)(v2 + 8);
    a2->__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 24);
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = v3;
  }
}

uint64_t `anonymous namespace'::ChatImpl::status(_anonymous_namespace_::ChatImpl *this)
{
  return 0;
}

void `anonymous namespace'::ChatImpl::leaveGroupChat(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = (_QWORD *)operator new();
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  v15 = 0;
  v16 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

std::string *`anonymous namespace'::ChatImpl::newRemoteUriAvailable(uint64_t a1, const std::string *a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = a1 + 48;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 48) + 64))(a1 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Updating URI of conversation ", 29);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v3 + 248);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  return std::string::operator=((std::string *)(v3 + 128), a2);
}

void `anonymous namespace'::ChatImpl::remoteUri(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 199) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 22), *((_QWORD *)this + 23));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 11);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 24);
  }
}

std::string *`non-virtual thunk to'`anonymous namespace'::ChatImpl::newRemoteUriAvailable(uint64_t a1, const std::string *a2)
{
}

void `non-virtual thunk to'`anonymous namespace'::ChatImpl::remoteUri(_anonymous_namespace_::ChatImpl *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 159) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 17), *((_QWORD *)this + 18));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)((char *)this + 136);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 19);
  }
}

void `non-virtual thunk to'`anonymous namespace'::ChatImpl::~ChatImpl(_anonymous_namespace_::ChatImpl *this)
{
}

{
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E78C3618;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E78C3618;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  __int128 *v1;
  char *v2;

  v1 = (__int128 *)(a1 + 8);
  v2 = (char *)operator new(0x38uLL);
  *(_QWORD *)v2 = off_1E78C3618;
  return v2;
}

void sub_1BEEF07D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

std::string *std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::__clone(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a2 = off_1E78C3618;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(a1 + 8);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  uint64_t v2;
  uint64_t **v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  IMSClientManager *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  xpc_object_t object;
  void *v16;
  std::__shared_weak_count *v17;
  char v18;
  void *__p[2];
  char v20;
  std::string v21;

  v2 = a1 + 8;
  v16 = 0;
  v17 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 8), &v16);
  v3 = (uint64_t **)v16;
  if (v16)
  {
    std::string::basic_string[abi:ne180100]<0>(&v21, "laz.cht");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v21, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Removing Chat ", 14);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, a1 + 32);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (*(char *)(a1 + 55) < 0)
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a1 + 32), *(_QWORD *)(a1 + 40));
    else
      v21 = *(std::string *)(a1 + 32);
    std::__tree<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::weak_ptr<ims::lazuli::Chat>>>>::__erase_unique<std::string>(v3 + 4, (void **)&v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  v5 = v17;
  if (v17)
  {
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(&v16, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)&v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"terminate ", 10);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = a1 + 32;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" on ", 4);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v2);
  v10 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v18 < 0)
    operator delete(v16);
  if (v20 < 0)
    operator delete(__p[0]);
  IMSClientManager::instance(v10);
  IPTelephonyManager::getInstance((uint64_t *)&v16);
  v11 = *((_QWORD *)v16 + 25);
  std::string::basic_string[abi:ne180100]<0>(__p, "TerminateChat");
  object = xpc_null_create();
  IMSCallManager::terminateLazuli(v11, v9, (uint64_t)__p, &object);
  xpc_release(object);
  object = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  v12 = v17;
  if (v17)
  {
    v13 = (unint64_t *)&v17->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_1BEEF0B2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *a11, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  unint64_t *p_shared_owners;
  unint64_t v30;

  if (a12)
  {
    p_shared_owners = (unint64_t *)&a12->__shared_owners_;
    do
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))a12->__on_zero_shared)(a12);
      std::__shared_weak_count::__release_weak(a12);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,std::allocator<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0>,void ()(void)>::target_type()
{
}

std::string *std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::~ChatImpl()::$_0 const&,0ul>(std::string *this, __int128 *a2)
{
  __int128 v4;
  std::string *v5;
  __int128 v6;

  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    this->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 2);
    *(_OWORD *)&this->__r_.__value_.__l.__data_ = v4;
  }
  v5 = this + 1;
  if (*((char *)a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 3), *((_QWORD *)a2 + 4));
  }
  else
  {
    v6 = *(__int128 *)((char *)a2 + 24);
    this[1].__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 5);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  return this;
}

void sub_1BEEF0CEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t *std::unique_ptr<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>(`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0 &&)::{lambda(void)#1},std::default_delete<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0 &&>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 + 8);
    MEMORY[0x1C3B87100](v2, 0x60C40A44E5E0CLL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>(`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0,dispatch_queue_s *::default_delete<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  xpc_object_t *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t **v29;
  uint64_t *v30;
  std::string __p[13];
  std::string v32[2];
  std::string v33[2];
  std::string v34[4];
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;
  std::string v42;
  std::string v43;
  void *v44;
  _BYTE *v45;
  uint64_t v46;
  xpc_object_t v47[3];
  xpc_object_t *v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v29 = a1;
  v30 = v1;
  v3 = *v1++;
  v2 = v3;
  v44 = 0;
  v45 = 0;
  v46 = 0;
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kBody";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v47);
  xpc::dyn_cast_or_default();
  xpc_release(v47[0]);
  memset(&v43, 0, sizeof(v43));
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kContentType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v47);
  xpc::dyn_cast_or_default();
  xpc_release(v47[0]);
  memset(&v42, 0, sizeof(v42));
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v47);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(v47[0]);
  size = HIBYTE(v42.__r_.__value_.__r.__words[2]);
  if ((v42.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v42.__r_.__value_.__l.__size_;
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    else
      v32[0] = *(std::string *)((char *)__p + 8);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v42 = v32[0];
    *((_BYTE *)&v32[0].__r_.__value_.__s + 23) = 0;
    v32[0].__r_.__value_.__s.__data_[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v42);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"changing group chat info ", 25);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (_OWORD *)(v2 + 296);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" on ", 4);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v8 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(v8 + 8);
    __p[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v9;
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" type is ", 9);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, &v43);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" body length ", 13);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v10 || (v11 = *(_QWORD *)(v2 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, sizeof(v32));
  v18 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v18 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
  }
  else
  {
    v19 = *(_OWORD *)(v18 + 8);
    v32[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
    *(_OWORD *)&v32[0].__r_.__value_.__l.__data_ = v19;
  }
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32[1], v42.__r_.__value_.__l.__data_, v42.__r_.__value_.__l.__size_);
  else
    v32[1] = v42;
  if (*(char *)(v2 + 199) < 0)
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(v2 + 176), *(_QWORD *)(v2 + 184));
  else
    v33[0] = *(std::string *)(v2 + 176);
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
  {
    *(_OWORD *)&v33[1].__r_.__value_.__l.__data_ = *v7;
    v33[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 312);
LABEL_37:
    *(_OWORD *)&v34[0].__r_.__value_.__l.__data_ = *v7;
    v34[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 312);
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(&v33[1], *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
    goto LABEL_37;
  std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
LABEL_38:
  memset(&v34[1], 0, 48);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v34[2].__r_.__value_.__r.__words, v44, (uint64_t)v45, v45 - (_BYTE *)v44);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v34[3], v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
  else
    v34[3] = v43;
  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  v37 = 0u;
  v38 = 0u;
  v35 = 0u;
  v36 = 0u;
  __p[0].__r_.__value_.__r.__words[0] = v11;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  LazuliSendParams::LazuliSendParams((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const LazuliSendParams *)v32);
  v48 = 0;
  v21 = (char *)operator new(0x140uLL);
  v22 = (xpc_object_t *)v21;
  v23 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_QWORD *)v21 = &off_1E78C3698;
  *(_OWORD *)(v21 + 8) = v23;
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  LazuliSendParams::LazuliSendParams((std::string *)v21 + 1, (__int128 *)&__p[0].__r_.__value_.__r.__words[2]);
  v48 = v22;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v47);
  v26 = v48;
  if (v48 == v47)
  {
    v27 = 4;
    v26 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_51;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_51:
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__r.__words[2]);
  if (__p[0].__r_.__value_.__l.__size_)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  LazuliSendParams::~LazuliSendParams((void **)&v32[0].__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v42.__r_.__value_.__l.__data_);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  if (v44)
  {
    v45 = v44;
    operator delete(v44);
  }
}

void sub_1BEEF13E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *__p;
  char a72;
  std::__shared_weak_count *v72;
  uint64_t v73;
  void *v75;

  if (a72 < 0)
    operator delete(__p);
  if (a70 < 0)
    operator delete(a65);
  if (a64 < 0)
    operator delete(a59);
  if (a58 < 0)
    operator delete(a53);
  std::__shared_weak_count::__release_weak(v72);
  if (*(char *)(v73 - 153) < 0)
    operator delete(*(void **)(v73 - 176));
  if (*(char *)(v73 - 129) < 0)
    operator delete(*(void **)(v73 - 152));
  v75 = *(void **)(v73 - 128);
  if (v75)
  {
    *(_QWORD *)(v73 - 120) = v75;
    operator delete(v75);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0,std::default_delete<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1C3B87100](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3698;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3698;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x140uLL);
  *v2 = &off_1E78C3698;
  return v2;
}

void sub_1BEEF1754(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E78C3698;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  const char *v13;
  LazuliDelegate *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t object;
  xpc_object_t v28;
  void *__p;
  std::__shared_weak_count *v30;
  char v31;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(_QWORD *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::changeLazuliGroupInfo(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      v5 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_43:
      v18 = (unint64_t *)&v4->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 48);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v31 < 0)
    operator delete(__p);
  __p = 0;
  v30 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    v28 = 0;
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v9;
    if (v9)
    {
      v28 = v9;
    }
    else
    {
      v10 = xpc_null_create();
      v28 = v10;
      if (!v10)
      {
        v11 = xpc_null_create();
        v10 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B87B98](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
LABEL_21:
      xpc_release(v10);
      v26 = xpc_BOOL_create(0);
      if (!v26)
        v26 = xpc_null_create();
      v24 = &v28;
      v25 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v26, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v26);
      v26 = 0;
      if (*(char *)(a1 + 119) >= 0)
        v12 = (const char *)(a1 + 96);
      else
        v12 = *(const char **)(a1 + 96);
      v22 = xpc_string_create(v12);
      if (!v22)
        v22 = xpc_null_create();
      v24 = &v28;
      v25 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v22, &v23);
      xpc_release(v23);
      v23 = 0;
      xpc_release(v22);
      v22 = 0;
      if (*(char *)(a1 + 71) >= 0)
        v13 = (const char *)(a1 + 48);
      else
        v13 = *(const char **)(a1 + 48);
      v20 = xpc_string_create(v13);
      if (!v20)
        v20 = xpc_null_create();
      v24 = &v28;
      v25 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v20, &v21);
      xpc_release(v21);
      v21 = 0;
      xpc_release(v20);
      v20 = 0;
      v14 = (LazuliDelegate *)__p;
      v24 = v28;
      if (v28)
        xpc_retain(v28);
      else
        v24 = xpc_null_create();
      LazuliDelegate::handleGroupChatUpdate(v14, &v24);
      xpc_release(v24);
      v24 = 0;
      xpc_release(v28);
      goto LABEL_37;
    }
    v11 = xpc_null_create();
LABEL_20:
    v28 = v11;
    goto LABEL_21;
  }
LABEL_37:
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v4)
    goto LABEL_43;
}

void sub_1BEEF1BA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1BEEF1D74(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::changeGroupChatInfo(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  LazuliSendParams::~LazuliSendParams((void **)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0>(`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0,dispatch_queue_s *::default_delete<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  std::string::size_type size;
  int64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_weak_owners;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  char *v30;
  xpc_object_t *v31;
  __int128 v32;
  unint64_t *v33;
  unint64_t v34;
  xpc_object_t *v35;
  uint64_t v36;
  uint64_t **v38;
  uint64_t *v39;
  std::string __p;
  uint64_t v41;
  xpc_object_t object[2];
  _OWORD v43[2];
  std::string v44[2];
  std::string v45[2];
  std::string v46[2];
  __int128 v47;
  __int128 v48;
  std::string v49[3];
  std::string v50[2];
  std::string v51;
  __int128 v52;
  uint64_t v53;
  std::string v54;
  _BYTE *v55;
  _BYTE *v56;
  uint64_t v57;
  xpc_object_t v58[3];
  xpc_object_t *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v38 = a1;
  v39 = v1;
  v3 = *v1++;
  v2 = v3;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  object[0] = v1;
  object[1] = "kBody";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v58);
  xpc::dyn_cast_or_default();
  xpc_release(v58[0]);
  memset(&v54, 0, sizeof(v54));
  object[0] = v1;
  object[1] = "kContentType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v58);
  xpc::dyn_cast_or_default();
  xpc_release(v58[0]);
  v52 = 0uLL;
  v53 = 0;
  object[0] = v1;
  object[1] = "kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v58);
  xpc::dyn_cast_or_default();
  xpc_release(v58[0]);
  memset(&v51, 0, sizeof(v51));
  object[0] = v1;
  object[1] = "kContributionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v58);
  xpc::dyn_cast_or_default();
  xpc_release(v58[0]);
  memset(&v50[1], 0, sizeof(std::string));
  object[0] = v1;
  object[1] = "kInReplyToContributionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v58);
  xpc::dyn_cast_or_default();
  xpc_release(v58[0]);
  memset(v50, 0, 24);
  object[0] = v1;
  object[1] = "kMessageType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)object, v58);
  memset(&__p, 0, sizeof(__p));
  xpc::dyn_cast_or_default();
  xpc_release(v58[0]);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)"kOriginalMessageSize";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&__p, object);
  v4 = xpc::dyn_cast_or_default();
  xpc_release(object[0]);
  v5 = HIBYTE(v53);
  if (v53 < 0)
    v5 = *((_QWORD *)&v52 + 1);
  if (!v5)
  {
    ImsUuid::generate((ImsUuid *)&__p);
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)object, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)object = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(_QWORD *)&v43[0] = v41;
    }
    if (SHIBYTE(v53) < 0)
      operator delete((void *)v52);
    v52 = *(_OWORD *)object;
    v53 = *(_QWORD *)&v43[0];
    BYTE7(v43[0]) = 0;
    LOBYTE(object[0]) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (SHIBYTE(v41) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 32))(v6, &v52);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
  }
  size = HIBYTE(v51.__r_.__value_.__r.__words[2]);
  if ((v51.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v51.__r_.__value_.__l.__size_;
  if (size)
  {
    if (v4)
    {
LABEL_16:
      v8 = v4;
      goto LABEL_36;
    }
  }
  else
  {
    ImsUuid::generate((ImsUuid *)&__p);
    if (SHIBYTE(v41) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)object, (const std::string::value_type *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__r.__words[2]);
    }
    else
    {
      *(_OWORD *)object = *(_OWORD *)&__p.__r_.__value_.__r.__words[1];
      *(_QWORD *)&v43[0] = v41;
    }
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v51.__r_.__value_.__l.__data_);
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)object;
    v51.__r_.__value_.__r.__words[2] = *(_QWORD *)&v43[0];
    BYTE7(v43[0]) = 0;
    LOBYTE(object[0]) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (SHIBYTE(v41) < 0)
      operator delete((void *)__p.__r_.__value_.__l.__size_);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"contributionId not provided, using uuid ", 40);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, &v51);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v4)
      goto LABEL_16;
  }
  v8 = v56 - v55;
  v10 = HIBYTE(v50[0].__r_.__value_.__r.__words[2]);
  if ((v50[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v10 = v50[0].__r_.__value_.__l.__size_;
  if (v10 == 12)
  {
    v11 = v50;
    if ((v50[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v11 = (std::string *)v50[0].__r_.__value_.__r.__words[0];
    v12 = v11->__r_.__value_.__r.__words[0];
    v13 = LODWORD(v11->__r_.__value_.__r.__words[1]);
    if (v12 == *(_QWORD *)"kMessageText" && v13 == *(unsigned int *)"Text")
    {
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 56))(v2 + 48);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v15);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"original content size not provided for encoded user text, using encoded size", 76);
      *(_BYTE *)(v15 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v15 + 17) = 0;
    }
  }
LABEL_36:
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v16);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"sending trx ", 12);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v16 + 32))(v16, &v52);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" conversation ", 14);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" on ", 4);
  *(_BYTE *)(v16 + 17) = 0;
  v17 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v17 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v17 + 8), *(_QWORD *)(v17 + 16));
  }
  else
  {
    v18 = *(_OWORD *)(v17 + 8);
    __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v17 + 24);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v18;
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" type ", 6);
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v16 + 32))(v16, &v54);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)" length ", 8);
  *(_BYTE *)(v16 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v16 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v16 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v19 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v19 || (v20 = *(_QWORD *)(v2 + 8), (v21 = std::__shared_weak_count::lock(v19)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v22 = v21;
  p_shared_weak_owners = (unint64_t *)&v21->__shared_weak_owners_;
  do
    v24 = __ldxr(p_shared_weak_owners);
  while (__stxr(v24 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v22);
  }
  memset(v49, 0, sizeof(v49));
  v47 = 0u;
  v48 = 0u;
  memset(v46, 0, sizeof(v46));
  memset(v45, 0, sizeof(v45));
  memset(v44, 0, sizeof(v44));
  *(_OWORD *)object = 0u;
  memset(v43, 0, sizeof(v43));
  v27 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v27 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)object, *(const std::string::value_type **)(v27 + 8), *(_QWORD *)(v27 + 16));
  }
  else
  {
    v28 = *(_OWORD *)(v27 + 8);
    *(_QWORD *)&v43[0] = *(_QWORD *)(v27 + 24);
    *(_OWORD *)object = v28;
  }
  if (SHIBYTE(v53) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)v43 + 8), (const std::string::value_type *)v52, *((std::string::size_type *)&v52 + 1));
  }
  else
  {
    *(_OWORD *)((char *)v43 + 8) = v52;
    *((_QWORD *)&v43[1] + 1) = v53;
  }
  if (*(char *)(v2 + 199) < 0)
    std::string::__init_copy_ctor_external(v44, *(const std::string::value_type **)(v2 + 176), *(_QWORD *)(v2 + 184));
  else
    v44[0] = *(std::string *)(v2 + 176);
  if (*(char *)(v2 + 319) < 0)
    std::string::__init_copy_ctor_external(&v44[1], *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
  else
    v44[1] = *(std::string *)(v2 + 296);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v45, v51.__r_.__value_.__l.__data_, v51.__r_.__value_.__l.__size_);
  else
    v45[0] = v51;
  if (SHIBYTE(v50[1].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v45[1], v50[1].__r_.__value_.__l.__data_, v50[1].__r_.__value_.__l.__size_);
  else
    v45[1] = v50[1];
  memset(v46, 0, 24);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(v46, v55, (uint64_t)v56, v56 - v55);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v46[1], v54.__r_.__value_.__l.__data_, v54.__r_.__value_.__l.__size_);
  else
    v46[1] = v54;
  v47 = 0uLL;
  *(_QWORD *)&v48 = 0;
  *((_QWORD *)&v48 + 1) = v8;
  if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(v49, v50[0].__r_.__value_.__l.__data_, v50[0].__r_.__value_.__l.__size_);
  else
    v49[0] = v50[0];
  memset(&v49[1], 0, 48);
  __p.__r_.__value_.__r.__words[0] = v20;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v22;
  do
    v29 = __ldxr(p_shared_weak_owners);
  while (__stxr(v29 + 1, p_shared_weak_owners));
  LazuliSendParams::LazuliSendParams((std::string *)&__p.__r_.__value_.__r.__words[2], (const LazuliSendParams *)object);
  v59 = 0;
  v30 = (char *)operator new(0x140uLL);
  v31 = (xpc_object_t *)v30;
  v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_QWORD *)v30 = &off_1E78C3718;
  *(_OWORD *)(v30 + 8) = v32;
  if (*((_QWORD *)&v32 + 1))
  {
    v33 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 16);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  LazuliSendParams::LazuliSendParams((std::string *)v30 + 1, (__int128 *)&__p.__r_.__value_.__r.__words[2]);
  v59 = v31;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v58);
  v35 = v59;
  if (v59 == v58)
  {
    v36 = 4;
    v35 = v58;
  }
  else
  {
    if (!v59)
      goto LABEL_83;
    v36 = 5;
  }
  (*((void (**)(void))*v35 + v36))();
LABEL_83:
  LazuliSendParams::~LazuliSendParams((void **)&__p.__r_.__value_.__r.__words[2]);
  if (__p.__r_.__value_.__l.__size_)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
  LazuliSendParams::~LazuliSendParams(object);
  std::__shared_weak_count::__release_weak(v22);
  if (SHIBYTE(v50[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50[0].__r_.__value_.__l.__data_);
  if (SHIBYTE(v50[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v50[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v51.__r_.__value_.__l.__data_);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v54.__r_.__value_.__l.__data_);
  if (v55)
  {
    v56 = v55;
    operator delete(v55);
  }
}

void sub_1BEEF27F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  void *v21;

  a13 = off_1E78C0288;
  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 - 233) < 0)
    operator delete(*(void **)(v19 - 256));
  if (*(char *)(v19 - 209) < 0)
    operator delete(*(void **)(v19 - 232));
  if (*(char *)(v19 - 185) < 0)
    operator delete(*(void **)(v19 - 208));
  if (*(char *)(v19 - 153) < 0)
    operator delete(*(void **)(v19 - 176));
  if (*(char *)(v19 - 129) < 0)
    operator delete(*(void **)(v19 - 152));
  v21 = *(void **)(v19 - 128);
  if (v21)
  {
    *(_QWORD *)(v19 - 120) = v21;
    operator delete(v21);
  }
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0,std::default_delete<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1C3B87100](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3718;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3718;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x140uLL);
  *v2 = &off_1E78C3718;
  return v2;
}

void sub_1BEEF2C88(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E78C3718;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  const char *v13;
  const char *v14;
  LazuliDelegate *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  const char *v28;
  xpc_object_t v29;
  xpc_object_t object;
  xpc_object_t v31;
  void *__p;
  std::__shared_weak_count *v33;
  char v34;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(_QWORD *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::sendLazuli(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      v5 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_48:
      v19 = (unint64_t *)&v4->__shared_owners_;
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 48);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v34 < 0)
    operator delete(__p);
  __p = 0;
  v33 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    v31 = 0;
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v9;
    if (v9)
    {
      v31 = v9;
    }
    else
    {
      v10 = xpc_null_create();
      v31 = v10;
      if (!v10)
      {
        v11 = xpc_null_create();
        v10 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B87B98](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
LABEL_21:
      xpc_release(v10);
      v29 = xpc_BOOL_create(0);
      if (!v29)
        v29 = xpc_null_create();
      v27 = &v31;
      v28 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v27, &v29, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v29);
      v29 = 0;
      if (*(char *)(a1 + 119) >= 0)
        v12 = (const char *)(a1 + 96);
      else
        v12 = *(const char **)(a1 + 96);
      v25 = xpc_string_create(v12);
      if (!v25)
        v25 = xpc_null_create();
      v27 = &v31;
      v28 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v27, &v25, &v26);
      xpc_release(v26);
      v26 = 0;
      xpc_release(v25);
      v25 = 0;
      if (*(char *)(a1 + 143) >= 0)
        v13 = (const char *)(a1 + 120);
      else
        v13 = *(const char **)(a1 + 120);
      v23 = xpc_string_create(v13);
      if (!v23)
        v23 = xpc_null_create();
      v27 = &v31;
      v28 = "kContributionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v27, &v23, &v24);
      xpc_release(v24);
      v24 = 0;
      xpc_release(v23);
      v23 = 0;
      if (*(char *)(a1 + 71) >= 0)
        v14 = (const char *)(a1 + 48);
      else
        v14 = *(const char **)(a1 + 48);
      v21 = xpc_string_create(v14);
      if (!v21)
        v21 = xpc_null_create();
      v27 = &v31;
      v28 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v27, &v21, &v22);
      xpc_release(v22);
      v22 = 0;
      xpc_release(v21);
      v21 = 0;
      v15 = (LazuliDelegate *)__p;
      v27 = v31;
      if (v31)
        xpc_retain(v31);
      else
        v27 = xpc_null_create();
      LazuliDelegate::handleMessageSend(v15, &v27);
      xpc_release(v27);
      v27 = 0;
      xpc_release(v31);
      goto LABEL_42;
    }
    v11 = xpc_null_create();
LABEL_20:
    v31 = v11;
    goto LABEL_21;
  }
LABEL_42:
  v16 = v33;
  if (v33)
  {
    v17 = (unint64_t *)&v33->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v4)
    goto LABEL_48;
}

void sub_1BEEF3144(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19, void *__p,std::__shared_weak_count *a21,int a22,__int16 a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;

  if (a21)
  {
    p_shared_owners = (unint64_t *)&a21->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))a21->__on_zero_shared)(a21);
      std::__shared_weak_count::__release_weak(a21);
    }
  }
  v29 = (unint64_t *)&v25->__shared_owners_;
  do
    v30 = __ldaxr(v29);
  while (__stlxr(v30 - 1, v29));
  if (!v30)
  {
    ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::sendMessage(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1BEEF3320(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0>(`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0,dispatch_queue_s *::default_delete<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  xpc_object_t *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t **v29;
  uint64_t *v30;
  std::string __p[13];
  std::string v32[2];
  std::string v33[2];
  std::string v34[4];
  _BYTE v35[104];
  __int128 v36;
  uint64_t v37;
  std::string v38;
  xpc_object_t v39[3];
  xpc_object_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v29 = a1;
  v30 = v1;
  v3 = *v1++;
  v2 = v3;
  memset(&v38, 0, sizeof(v38));
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v39);
  xpc::dyn_cast_or_default();
  xpc_release(v39[0]);
  v36 = 0uLL;
  v37 = 0;
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v39);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(v39[0]);
  size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v38.__r_.__value_.__l.__size_;
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    else
      v32[0] = *(std::string *)((char *)__p + 8);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v38 = v32[0];
    *((_BYTE *)&v32[0].__r_.__value_.__s + 23) = 0;
    v32[0].__r_.__value_.__s.__data_[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v38);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"adding group participant trx ", 29);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, &v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" conversation ", 14);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (_OWORD *)(v2 + 296);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" on ", 4);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v8 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(v8 + 8);
    __p[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v9;
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v10 || (v11 = *(_QWORD *)(v2 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  memset(v35, 0, sizeof(v35));
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, sizeof(v32));
  v18 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v18 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
  }
  else
  {
    v19 = *(_OWORD *)(v18 + 8);
    v32[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
    *(_OWORD *)&v32[0].__r_.__value_.__l.__data_ = v19;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32[1], v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v32[1] = v38;
  if (*(char *)(v2 + 199) < 0)
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(v2 + 176), *(_QWORD *)(v2 + 184));
  else
    v33[0] = *(std::string *)(v2 + 176);
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
  {
    *(_OWORD *)&v33[1].__r_.__value_.__l.__data_ = *v7;
    v33[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 312);
LABEL_37:
    *(_OWORD *)&v34[0].__r_.__value_.__l.__data_ = *v7;
    v34[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 312);
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(&v33[1], *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
    goto LABEL_37;
  std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
LABEL_38:
  memset(&v34[1], 0, 72);
  if (SHIBYTE(v37) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v35, (const std::string::value_type *)v36, *((std::string::size_type *)&v36 + 1));
  }
  else
  {
    *(_OWORD *)v35 = v36;
    *(_QWORD *)&v35[16] = v37;
  }
  memset(&v35[24], 0, 80);
  __p[0].__r_.__value_.__r.__words[0] = v11;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  LazuliSendParams::LazuliSendParams((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const LazuliSendParams *)v32);
  v40 = 0;
  v21 = (char *)operator new(0x140uLL);
  v22 = (xpc_object_t *)v21;
  v23 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_QWORD *)v21 = &off_1E78C3798;
  *(_OWORD *)(v21 + 8) = v23;
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  LazuliSendParams::LazuliSendParams((std::string *)v21 + 1, (__int128 *)&__p[0].__r_.__value_.__r.__words[2]);
  v40 = v22;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v39);
  v26 = v40;
  if (v40 == v39)
  {
    v27 = 4;
    v26 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_51;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_51:
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__r.__words[2]);
  if (__p[0].__r_.__value_.__l.__size_)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  LazuliSendParams::~LazuliSendParams((void **)&v32[0].__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1BEEF3938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *__p;
  char a72;
  std::__shared_weak_count *v72;
  uint64_t v73;

  if (a72 < 0)
    operator delete(__p);
  if (a70 < 0)
    operator delete(a65);
  if (a64 < 0)
    operator delete(a59);
  if (a58 < 0)
    operator delete(a53);
  std::__shared_weak_count::__release_weak(v72);
  if (*(char *)(v73 - 129) < 0)
    operator delete(*(void **)(v73 - 152));
  if (*(char *)(v73 - 105) < 0)
    operator delete(*(void **)(v73 - 128));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0,std::default_delete<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1C3B87100](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3798;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3798;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x140uLL);
  *v2 = &off_1E78C3798;
  return v2;
}

void sub_1BEEF3C7C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E78C3798;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  const char *v13;
  LazuliDelegate *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t object;
  xpc_object_t v28;
  void *__p;
  std::__shared_weak_count *v30;
  char v31;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(_QWORD *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::addParticipant(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      v5 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_43:
      v18 = (unint64_t *)&v4->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 48);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v31 < 0)
    operator delete(__p);
  __p = 0;
  v30 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    v28 = 0;
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v9;
    if (v9)
    {
      v28 = v9;
    }
    else
    {
      v10 = xpc_null_create();
      v28 = v10;
      if (!v10)
      {
        v11 = xpc_null_create();
        v10 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B87B98](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
LABEL_21:
      xpc_release(v10);
      v26 = xpc_BOOL_create(0);
      if (!v26)
        v26 = xpc_null_create();
      v24 = &v28;
      v25 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v26, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v26);
      v26 = 0;
      if (*(char *)(a1 + 119) >= 0)
        v12 = (const char *)(a1 + 96);
      else
        v12 = *(const char **)(a1 + 96);
      v22 = xpc_string_create(v12);
      if (!v22)
        v22 = xpc_null_create();
      v24 = &v28;
      v25 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v22, &v23);
      xpc_release(v23);
      v23 = 0;
      xpc_release(v22);
      v22 = 0;
      if (*(char *)(a1 + 71) >= 0)
        v13 = (const char *)(a1 + 48);
      else
        v13 = *(const char **)(a1 + 48);
      v20 = xpc_string_create(v13);
      if (!v20)
        v20 = xpc_null_create();
      v24 = &v28;
      v25 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v20, &v21);
      xpc_release(v21);
      v21 = 0;
      xpc_release(v20);
      v20 = 0;
      v14 = (LazuliDelegate *)__p;
      v24 = v28;
      if (v28)
        xpc_retain(v28);
      else
        v24 = xpc_null_create();
      LazuliDelegate::handleParticipantAdded(v14, &v24);
      xpc_release(v24);
      v24 = 0;
      xpc_release(v28);
      goto LABEL_37;
    }
    v11 = xpc_null_create();
LABEL_20:
    v28 = v11;
    goto LABEL_21;
  }
LABEL_37:
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v4)
    goto LABEL_43;
}

void sub_1BEEF40CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::addParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1BEEF429C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0>(`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0,dispatch_queue_s *::default_delete<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  std::string::size_type size;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  __int128 v9;
  std::__shared_weak_count *v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  __int128 v19;
  unint64_t v20;
  char *v21;
  xpc_object_t *v22;
  __int128 v23;
  unint64_t *v24;
  unint64_t v25;
  xpc_object_t *v26;
  uint64_t v27;
  uint64_t **v29;
  uint64_t *v30;
  std::string __p[13];
  std::string v32[2];
  std::string v33[2];
  std::string v34[4];
  _BYTE v35[104];
  __int128 v36;
  uint64_t v37;
  std::string v38;
  xpc_object_t v39[3];
  xpc_object_t *v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v29 = a1;
  v30 = v1;
  v3 = *v1++;
  v2 = v3;
  memset(&v38, 0, sizeof(v38));
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v39);
  xpc::dyn_cast_or_default();
  xpc_release(v39[0]);
  v36 = 0uLL;
  v37 = 0;
  v32[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1;
  v32[0].__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v32, v39);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(v39[0]);
  size = HIBYTE(v38.__r_.__value_.__r.__words[2]);
  if ((v38.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v38.__r_.__value_.__l.__size_;
  if (!size)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      std::string::__init_copy_ctor_external(v32, (const std::string::value_type *)__p[0].__r_.__value_.__l.__size_, __p[0].__r_.__value_.__r.__words[2]);
    else
      v32[0] = *(std::string *)((char *)__p + 8);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v38 = v32[0];
    *((_BYTE *)&v32[0].__r_.__value_.__s + 23) = 0;
    v32[0].__r_.__value_.__s.__data_[0] = 0;
    __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
    if (__p[1].__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__p[0].__r_.__value_.__l.__size_);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 56))(v2 + 48);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v5 + 32))(v5, &v38);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v2 + 48) + 64))(v2 + 48);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 48) + 16))(v2 + 48, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"removing group participant trx ", 31);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, &v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" from group conversation ", 25);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = (_OWORD *)(v2 + 296);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, v2 + 296);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" on ", 4);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v8 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(__p, *(const std::string::value_type **)(v8 + 8), *(_QWORD *)(v8 + 16));
  }
  else
  {
    v9 = *(_OWORD *)(v8 + 8);
    __p[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v8 + 24);
    *(_OWORD *)&__p[0].__r_.__value_.__l.__data_ = v9;
  }
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v10 || (v11 = *(_QWORD *)(v2 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
  do
    v15 = __ldxr(p_shared_weak_owners);
  while (__stxr(v15 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v17 = __ldaxr(p_shared_owners);
  while (__stlxr(v17 - 1, p_shared_owners));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v13);
  }
  memset(v35, 0, sizeof(v35));
  memset(v34, 0, sizeof(v34));
  memset(v33, 0, sizeof(v33));
  memset(v32, 0, sizeof(v32));
  v18 = *(_QWORD *)(v2 + 152);
  if (*(char *)(v18 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v32, *(const std::string::value_type **)(v18 + 8), *(_QWORD *)(v18 + 16));
  }
  else
  {
    v19 = *(_OWORD *)(v18 + 8);
    v32[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v18 + 24);
    *(_OWORD *)&v32[0].__r_.__value_.__l.__data_ = v19;
  }
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v32[1], v38.__r_.__value_.__l.__data_, v38.__r_.__value_.__l.__size_);
  else
    v32[1] = v38;
  if (*(char *)(v2 + 199) < 0)
    std::string::__init_copy_ctor_external(v33, *(const std::string::value_type **)(v2 + 176), *(_QWORD *)(v2 + 184));
  else
    v33[0] = *(std::string *)(v2 + 176);
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
  {
    *(_OWORD *)&v33[1].__r_.__value_.__l.__data_ = *v7;
    v33[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 312);
LABEL_37:
    *(_OWORD *)&v34[0].__r_.__value_.__l.__data_ = *v7;
    v34[0].__r_.__value_.__r.__words[2] = *(_QWORD *)(v2 + 312);
    goto LABEL_38;
  }
  std::string::__init_copy_ctor_external(&v33[1], *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
  if ((*(char *)(v2 + 319) & 0x80000000) == 0)
    goto LABEL_37;
  std::string::__init_copy_ctor_external(v34, *(const std::string::value_type **)(v2 + 296), *(_QWORD *)(v2 + 304));
LABEL_38:
  memset(&v34[1], 0, 72);
  if (SHIBYTE(v37) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v35, (const std::string::value_type *)v36, *((std::string::size_type *)&v36 + 1));
  }
  else
  {
    *(_OWORD *)v35 = v36;
    *(_QWORD *)&v35[16] = v37;
  }
  memset(&v35[24], 0, 80);
  __p[0].__r_.__value_.__r.__words[0] = v11;
  __p[0].__r_.__value_.__l.__size_ = (std::string::size_type)v13;
  do
    v20 = __ldxr(p_shared_weak_owners);
  while (__stxr(v20 + 1, p_shared_weak_owners));
  LazuliSendParams::LazuliSendParams((std::string *)&__p[0].__r_.__value_.__r.__words[2], (const LazuliSendParams *)v32);
  v40 = 0;
  v21 = (char *)operator new(0x140uLL);
  v22 = (xpc_object_t *)v21;
  v23 = *(_OWORD *)&__p[0].__r_.__value_.__l.__data_;
  *(_QWORD *)v21 = &off_1E78C3818;
  *(_OWORD *)(v21 + 8) = v23;
  if (*((_QWORD *)&v23 + 1))
  {
    v24 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 16);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  LazuliSendParams::LazuliSendParams((std::string *)v21 + 1, (__int128 *)&__p[0].__r_.__value_.__r.__words[2]);
  v40 = v22;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v39);
  v26 = v40;
  if (v40 == v39)
  {
    v27 = 4;
    v26 = v39;
  }
  else
  {
    if (!v40)
      goto LABEL_51;
    v27 = 5;
  }
  (*((void (**)(void))*v26 + v27))();
LABEL_51:
  LazuliSendParams::~LazuliSendParams((void **)&__p[0].__r_.__value_.__r.__words[2]);
  if (__p[0].__r_.__value_.__l.__size_)
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p[0].__r_.__value_.__l.__size_);
  LazuliSendParams::~LazuliSendParams((void **)&v32[0].__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v13);
  if (SHIBYTE(v37) < 0)
    operator delete((void *)v36);
  if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v38.__r_.__value_.__l.__data_);
}

void sub_1BEEF48B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,int a55,__int16 a56,char a57,char a58,void *a59,uint64_t a60,int a61,__int16 a62,char a63)
{
  char a64;
  void *a65;
  char a70;
  void *__p;
  char a72;
  std::__shared_weak_count *v72;
  uint64_t v73;

  if (a72 < 0)
    operator delete(__p);
  if (a70 < 0)
    operator delete(a65);
  if (a64 < 0)
    operator delete(a59);
  if (a58 < 0)
    operator delete(a53);
  std::__shared_weak_count::__release_weak(v72);
  if (*(char *)(v73 - 129) < 0)
    operator delete(*(void **)(v73 - 152));
  if (*(char *)(v73 - 105) < 0)
    operator delete(*(void **)(v73 - 128));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0,std::default_delete<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1C3B87100](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3818;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = &off_1E78C3818;
  LazuliSendParams::~LazuliSendParams((void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  _QWORD *v1;
  _QWORD *v2;

  v1 = (_QWORD *)(a1 + 8);
  v2 = operator new(0x140uLL);
  *v2 = &off_1E78C3818;
  return v2;
}

void sub_1BEEF4BF8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E78C3818;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  const char *v13;
  LazuliDelegate *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  xpc_object_t v24;
  const char *v25;
  xpc_object_t v26;
  xpc_object_t object;
  xpc_object_t v28;
  void *__p;
  std::__shared_weak_count *v30;
  char v31;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(_QWORD *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::removeParticipant(*((IMSSMSManager **)__p + 26), (std::string *)(a1 + 24));
      v5 = v30;
      if (v30)
      {
        p_shared_owners = (unint64_t *)&v30->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_43:
      v18 = (unint64_t *)&v4->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, a1 + 24);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 96);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 120);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" / ", 3);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 48);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v31 < 0)
    operator delete(__p);
  __p = 0;
  v30 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 24), &__p);
  if (__p)
  {
    v28 = 0;
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v9;
    if (v9)
    {
      v28 = v9;
    }
    else
    {
      v10 = xpc_null_create();
      v28 = v10;
      if (!v10)
      {
        v11 = xpc_null_create();
        v10 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B87B98](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
LABEL_21:
      xpc_release(v10);
      v26 = xpc_BOOL_create(0);
      if (!v26)
        v26 = xpc_null_create();
      v24 = &v28;
      v25 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v26, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v26);
      v26 = 0;
      if (*(char *)(a1 + 119) >= 0)
        v12 = (const char *)(a1 + 96);
      else
        v12 = *(const char **)(a1 + 96);
      v22 = xpc_string_create(v12);
      if (!v22)
        v22 = xpc_null_create();
      v24 = &v28;
      v25 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v22, &v23);
      xpc_release(v23);
      v23 = 0;
      xpc_release(v22);
      v22 = 0;
      if (*(char *)(a1 + 71) >= 0)
        v13 = (const char *)(a1 + 48);
      else
        v13 = *(const char **)(a1 + 48);
      v20 = xpc_string_create(v13);
      if (!v20)
        v20 = xpc_null_create();
      v24 = &v28;
      v25 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v24, &v20, &v21);
      xpc_release(v21);
      v21 = 0;
      xpc_release(v20);
      v20 = 0;
      v14 = (LazuliDelegate *)__p;
      v24 = v28;
      if (v28)
        xpc_retain(v28);
      else
        v24 = xpc_null_create();
      LazuliDelegate::handleParticipantRemoved(v14, &v24);
      xpc_release(v24);
      v24 = 0;
      xpc_release(v28);
      goto LABEL_37;
    }
    v11 = xpc_null_create();
LABEL_20:
    v28 = v11;
    goto LABEL_21;
  }
LABEL_37:
  v15 = v30;
  if (v30)
  {
    v16 = (unint64_t *)&v30->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v4)
    goto LABEL_43;
}

void sub_1BEEF5048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, uint64_t a14, uint64_t a15, uint64_t a16, xpc_object_t a17, void *__p, std::__shared_weak_count *a19, int a20,__int16 a21,char a22,char a23)
{
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (a19)
  {
    p_shared_owners = (unint64_t *)&a19->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))a19->__on_zero_shared)(a19);
      std::__shared_weak_count::__release_weak(a19);
    }
  }
  v27 = (unint64_t *)&v23->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::removeParticipant(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a2[1];
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + 8) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  LazuliSendParams::LazuliSendParams((std::string *)(a1 + 16), (const LazuliSendParams *)(a2 + 2));
  return a1;
}

void sub_1BEEF5218(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  _Unwind_Resume(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::Chat>::execute_wrapped<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0>(`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0,dispatch_queue_s *::default_delete<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(void ***a1)
{
  void **v1;
  std::__shared_weak_count **v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  std::string *v16;
  _QWORD *v17;
  uint64_t v18;
  void ***v20;
  void **v21;
  void *__p[2];
  std::__shared_weak_count *v23;
  std::string v24;
  std::string v25;
  std::string v26;
  xpc_object_t object[4];
  std::string v28;
  std::string v29;
  _QWORD v30[3];
  _QWORD *v31;
  uint64_t v32;

  v32 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v20 = a1;
  v21 = v1;
  v2 = (std::__shared_weak_count **)*v1;
  v3 = (uint64_t)*v1 + 48;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 64))(v3);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Leave Group Chat ", 17);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, std::__shared_weak_count **))(*(_QWORD *)v4 + 32))(v4, v2 + 37);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" on stack ", 10);
  *(_BYTE *)(v4 + 17) = 0;
  ((void (*)(void **__return_ptr, std::__shared_weak_count **))(*v2)[4].__vftable)(__p, v2);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v4 + 32))(v4, __p);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  v5 = v2[2];
  if (!v5 || (v6 = v2[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  memset(&v29, 0, sizeof(v29));
  ((void (*)(std::string *__return_ptr, std::__shared_weak_count **))(*v2)[4].__vftable)(&v29, v2);
  memset(&v28, 0, sizeof(v28));
  if (*((char *)v2 + 319) < 0)
    std::string::__init_copy_ctor_external(&v28, (const std::string::value_type *)v2[37], (std::string::size_type)v2[38]);
  else
    v28 = *(std::string *)(v2 + 37);
  memset(&object[1], 0, 24);
  v30[0] = v1 + 1;
  v30[1] = "kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)v30, object);
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  xpc_release(object[0]);
  __p[0] = v2;
  __p[1] = v6;
  v23 = v8;
  do
    v13 = __ldxr(p_shared_weak_owners);
  while (__stxr(v13 + 1, p_shared_weak_owners));
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v24, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
  else
    v24 = v28;
  if (SHIBYTE(object[3]) < 0)
    std::string::__init_copy_ctor_external(&v25, (const std::string::value_type *)object[1], (std::string::size_type)object[2]);
  else
    v25 = *(std::string *)&object[1];
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v26, v29.__r_.__value_.__l.__data_, v29.__r_.__value_.__l.__size_);
  else
    v26 = v29;
  v31 = 0;
  v14 = (char *)operator new(0x68uLL);
  v15 = v14;
  *(_QWORD *)v14 = off_1E78C3898;
  *(_OWORD *)(v14 + 8) = *(_OWORD *)__p;
  *((_QWORD *)v14 + 3) = v23;
  __p[1] = 0;
  v23 = 0;
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v14 + 32), v24.__r_.__value_.__l.__data_, v24.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v14 + 32) = v24;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)(v15 + 56), v25.__r_.__value_.__l.__data_, v25.__r_.__value_.__l.__size_);
  else
    *(std::string *)(v15 + 56) = v25;
  v16 = (std::string *)(v15 + 80);
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v16, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v16->__r_.__value_.__l.__data_ = *(_OWORD *)&v26.__r_.__value_.__l.__data_;
    *((_QWORD *)v15 + 12) = *((_QWORD *)&v26.__r_.__value_.__l + 2);
  }
  v31 = v15;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v30);
  v17 = v31;
  if (v31 == v30)
  {
    v18 = 4;
    v17 = v30;
  }
  else
  {
    if (!v31)
      goto LABEL_41;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_41:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v26.__r_.__value_.__l.__data_);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  if (SHIBYTE(object[3]) < 0)
    operator delete(object[1]);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v28.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v8);
}

void sub_1BEEF568C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,xpc_object_t object,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  std::__shared_weak_count *v44;
  uint64_t v45;
  void **v46;
  void **v47;
  uint64_t v48;
  std::__shared_weak_count *v50;

  if (*(char *)(v45 + 79) < 0)
    operator delete(*v47);
  if (*(char *)(v45 + 55) < 0)
    operator delete(*v46);
  v50 = *(std::__shared_weak_count **)(v45 + 24);
  if (v50)
    std::__shared_weak_count::__release_weak(v50);
  operator delete((void *)v45);
  if (a31 < 0)
    operator delete(__p);
  if (a25 < 0)
    operator delete(a20);
  if (a19 < 0)
    operator delete(a14);
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  if (a38 < 0)
    operator delete(a33);
  if (a44 < 0)
    operator delete(a39);
  if (*(char *)(v48 - 105) < 0)
    operator delete(*(void **)(v48 - 128));
  std::__shared_weak_count::__release_weak(v44);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0,std::default_delete<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1C3B87100](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C3898;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C3898;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x68uLL);
  *v2 = off_1E78C3898;
  return v2;
}

void sub_1BEEF5994(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E78C3898;
}

void std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t ***v8;
  uint64_t ***v9;
  uint64_t ***v10;
  _OWORD *v11;
  IMSClientManager *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  const char *v16;
  const char *v17;
  uint64_t v18;
  const char *v19;
  const char *v20;
  LazuliDelegate *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  void *__p[2];
  _OWORD v28[2];
  std::string v29[2];
  _BYTE v30[200];
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  xpc_object_t v34;
  xpc_object_t v35;
  xpc_object_t v36;
  uint64_t ***v37;
  uint64_t ***v38;
  const char *v39;
  char v40;

  v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4 && *(_QWORD *)(a1 + 16))
    {
      memset(v30, 0, sizeof(v30));
      memset(v29, 0, sizeof(v29));
      *(_OWORD *)__p = 0u;
      memset(v28, 0, sizeof(v28));
      v5 = *(_QWORD *)(v3 + 152);
      if (*(char *)(v5 + 31) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)(v5 + 8), *(_QWORD *)(v5 + 16));
      }
      else
      {
        v6 = *(_OWORD *)(v5 + 8);
        *(_QWORD *)&v28[0] = *(_QWORD *)(v5 + 24);
        *(_OWORD *)__p = v6;
      }
      if (*(char *)(a1 + 79) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)((char *)v28 + 8), *(const std::string::value_type **)(a1 + 56), *(_QWORD *)(a1 + 64));
      }
      else
      {
        *(_OWORD *)((char *)v28 + 8) = *(_OWORD *)(a1 + 56);
        *((_QWORD *)&v28[1] + 1) = *(_QWORD *)(a1 + 72);
      }
      if (*(char *)(v3 + 199) < 0)
        std::string::__init_copy_ctor_external(v29, *(const std::string::value_type **)(v3 + 176), *(_QWORD *)(v3 + 184));
      else
        v29[0] = *(std::string *)(v3 + 176);
      v11 = (_OWORD *)(v3 + 296);
      if (*(char *)(v3 + 319) < 0)
      {
        std::string::__init_copy_ctor_external(&v29[1], *(const std::string::value_type **)(v3 + 296), *(_QWORD *)(v3 + 304));
        v12 = (IMSClientManager *)v30;
        if (*(char *)(v3 + 319) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v30, *(const std::string::value_type **)(v3 + 296), *(_QWORD *)(v3 + 304));
LABEL_29:
          memset(&v30[24], 0, 176);
          IMSClientManager::instance(v12);
          IPTelephonyManager::getInstance((uint64_t *)&v38);
          IMSCallManager::leaveGroupChat(v38[25], (std::string *)__p);
          v13 = (std::__shared_weak_count *)v39;
          if (v39)
          {
            v14 = (unint64_t *)(v39 + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 - 1, v14));
            if (!v15)
            {
              ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
              std::__shared_weak_count::__release_weak(v13);
            }
          }
          LazuliSendParams::~LazuliSendParams(__p);
LABEL_59:
          p_shared_owners = (unint64_t *)&v4->__shared_owners_;
          do
            v26 = __ldaxr(p_shared_owners);
          while (__stlxr(v26 - 1, p_shared_owners));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
          return;
        }
      }
      else
      {
        *(_OWORD *)&v29[1].__r_.__value_.__l.__data_ = *v11;
        v29[1].__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 312);
        v12 = (IMSClientManager *)v30;
      }
      *(_OWORD *)v30 = *v11;
      *(_QWORD *)&v30[16] = *(_QWORD *)(v3 + 312);
      goto LABEL_29;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "laz.cht");
  std::string::basic_string[abi:ne180100]<0>(&v38, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)&v38);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Chat instance gone for ", 23);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 32))(v7, a1 + 32);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v40 < 0)
    operator delete(v38);
  if (SBYTE7(v28[0]) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 80), __p);
  if (__p[0])
  {
    v37 = 0;
    v8 = (uint64_t ***)xpc_dictionary_create(0, 0, 0);
    v9 = v8;
    if (v8)
    {
      v37 = v8;
    }
    else
    {
      v9 = (uint64_t ***)xpc_null_create();
      v37 = v9;
      if (!v9)
      {
        v10 = (uint64_t ***)xpc_null_create();
        v9 = 0;
        goto LABEL_36;
      }
    }
    if (MEMORY[0x1C3B87B98](v9) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v9);
LABEL_37:
      xpc_release(v9);
      v35 = xpc_BOOL_create(0);
      if (!v35)
        v35 = xpc_null_create();
      v38 = (uint64_t ***)&v37;
      v39 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v38, &v35, &v36);
      xpc_release(v36);
      v36 = 0;
      xpc_release(v35);
      v35 = 0;
      if (*(char *)(a1 + 55) >= 0)
        v16 = (const char *)(a1 + 32);
      else
        v16 = *(const char **)(a1 + 32);
      v33 = xpc_string_create(v16);
      if (!v33)
        v33 = xpc_null_create();
      v38 = (uint64_t ***)&v37;
      v39 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v38, &v33, &v34);
      xpc_release(v34);
      v34 = 0;
      xpc_release(v33);
      v33 = 0;
      v19 = *(const char **)(a1 + 56);
      v18 = a1 + 56;
      v17 = v19;
      if (*(char *)(v18 + 23) >= 0)
        v20 = (const char *)v18;
      else
        v20 = v17;
      v31 = xpc_string_create(v20);
      if (!v31)
        v31 = xpc_null_create();
      v38 = (uint64_t ***)&v37;
      v39 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v38, &v31, &v32);
      xpc_release(v32);
      v32 = 0;
      xpc_release(v31);
      v31 = 0;
      v21 = (LazuliDelegate *)__p[0];
      v38 = v37;
      if (v37)
        xpc_retain(v37);
      else
        v38 = (uint64_t ***)xpc_null_create();
      LazuliDelegate::handleLeaveGroupChat(v21, (void **)&v38);
      xpc_release(v38);
      v38 = 0;
      xpc_release(v37);
      goto LABEL_53;
    }
    v10 = (uint64_t ***)xpc_null_create();
LABEL_36:
    v37 = v10;
    goto LABEL_37;
  }
LABEL_53:
  v22 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v23 = (unint64_t *)((char *)__p[1] + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (v4)
    goto LABEL_59;
}

void sub_1BEEF5EF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  unint64_t v35;

  if (a32 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a20 < 0)
    operator delete(a15);
  if (a14 < 0)
    operator delete(a9);
  p_shared_owners = (unint64_t *)&v32->__shared_owners_;
  do
    v35 = __ldaxr(p_shared_owners);
  while (__stlxr(v35 - 1, p_shared_owners));
  if (!v35)
  {
    ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
    std::__shared_weak_count::__release_weak(v32);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 16) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 47) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 24), *(const std::string::value_type **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v7;
  }
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 48), *(const std::string::value_type **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v8;
  }
  v9 = (std::string *)(a1 + 72);
  if (*(char *)(a2 + 95) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1BEEF61F0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 71) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 47) < 0)
    operator delete(*v2);
  v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatImpl::leaveGroupChat(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ChatServicesImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::ChatServicesImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C3918;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::ChatServicesImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::ChatServicesImpl::~ChatServicesImpl(_anonymous_namespace_::ChatServicesImpl *this)
{
  *(_QWORD *)this = off_1E78C3968;
  *((_QWORD *)this + 5) = &unk_1E78C39A0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  *((_QWORD *)this + 5) = off_1E78CFE68;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this + 1);
}

{
  *(_QWORD *)this = off_1E78C3968;
  *((_QWORD *)this + 5) = &unk_1E78C39A0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 144);
  *((_QWORD *)this + 5) = off_1E78CFE68;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this + 1);
  JUMPOUT(0x1C3B87100);
}

void `anonymous namespace'::ChatServicesImpl::sendSpamReport(_QWORD *a1, xpc_object_t *a2)
{
  xpc_object_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  xpc_object_t v9;
  NSObject *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *a2;
  if (*a2)
    xpc_retain(*a2);
  else
    v3 = xpc_null_create();
  v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (v6 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = v6;
  v8 = (_QWORD *)operator new();
  *v8 = a1;
  v8[1] = v3;
  v9 = xpc_null_create();
  v10 = a1[3];
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldxr(p_shared_owners);
  while (__stxr(v12 + 1, p_shared_owners));
  v13 = (_QWORD *)operator new();
  *v13 = v8;
  v13[1] = v5;
  v13[2] = v7;
  v15 = 0;
  v16 = 0;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  xpc_release(v9);
}

void `anonymous namespace'::ChatServicesImpl::getCapabilities(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  std::string *v8;
  NSObject *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  std::string __p;
  uint64_t v16;
  uint64_t v17;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v6 = v5;
  v7 = (_QWORD *)operator new();
  *v7 = a1;
  v8 = (std::string *)(v7 + 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v8, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    v7[3] = *((_QWORD *)&__p.__r_.__value_.__l + 2);
  }
  v9 = a1[3];
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (_QWORD *)operator new();
  *v12 = v7;
  v12[1] = v4;
  v12[2] = v6;
  v16 = 0;
  v17 = 0;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void `non-virtual thunk to'`anonymous namespace'::ChatServicesImpl::~ChatServicesImpl(_anonymous_namespace_::ChatServicesImpl *this)
{
  *((_QWORD *)this - 5) = off_1E78C3968;
  *(_QWORD *)this = &unk_1E78C39A0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this - 4);
}

{
  *((_QWORD *)this - 5) = off_1E78C3968;
  *(_QWORD *)this = &unk_1E78C39A0;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 104);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  ctu::SharedSynchronizable<ims::lazuli::Chat>::~SharedSynchronizable((_QWORD *)this - 4);
  JUMPOUT(0x1C3B87100);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::ChatServices>::execute_wrapped<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0>(`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0,dispatch_queue_s *::default_delete<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0>>)::{lambda(void *)#1}::__invoke(_QWORD **a1)
{
  _QWORD *v1;
  _QWORD *v2;
  std::string::size_type v3;
  _QWORD *v4;
  xpc_object_t v5;
  xpc_object_t v6;
  uint64_t v7;
  xpc_object_t v8;
  std::string::size_type size;
  BOOL v10;
  _BYTE *v11;
  _BYTE *v12;
  std::string::size_type v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  std::string *p_str;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  xpc_object_t v22;
  xpc_object_t v23;
  std::string *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  xpc_object_t v37;
  const void *v38;
  uint64_t v39;
  size_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  xpc_object_t v50;
  std::string *v51;
  std::string *v52;
  std::string *p_object;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  _QWORD **v59;
  _QWORD *v60;
  _BYTE __p[40];
  std::string v62;
  std::string v63;
  std::string v64;
  xpc_object_t v65;
  std::string v66;
  const void *v67;
  uint64_t v68;
  uint64_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t v73;
  xpc_object_t v74;
  xpc_object_t v75;
  xpc_object_t v76;
  xpc_object_t v77;
  xpc_object_t v78;
  std::string v79;
  std::string object;
  std::string v81;
  std::string v82;
  void *v83;
  _BYTE *v84;
  uint64_t v85;
  std::string __str;
  std::string v87;
  std::string v88;
  std::string *v89;
  uint64_t v90;

  v90 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v59 = a1;
  v60 = v1;
  v4 = (_QWORD *)*v1;
  v3 = (std::string::size_type)(v1 + 1);
  v2 = v4;
  memset(&v87, 0, sizeof(v87));
  v88.__r_.__value_.__r.__words[0] = v3;
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v88, &__str);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  xpc_release(__str.__r_.__value_.__l.__data_);
  *(_QWORD *)__p = v3;
  *(_QWORD *)&__p[8] = "kMessageIDList";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)__p, &v88);
  v5 = xpc_null_create();
  v6 = (xpc_object_t)v88.__r_.__value_.__r.__words[0];
  v7 = MEMORY[0x1E0C812C8];
  if (v88.__r_.__value_.__r.__words[0] && MEMORY[0x1C3B87B98](v88.__r_.__value_.__r.__words[0]) == v7)
    xpc_retain(v6);
  else
    v6 = xpc_null_create();
  if (MEMORY[0x1C3B87B98](v6) != v7)
  {
    if (v5)
    {
      xpc_retain(v5);
      v8 = v5;
    }
    else
    {
      v8 = xpc_null_create();
    }
    xpc_release(v6);
    v6 = v8;
  }
  xpc_release(v5);
  xpc_release(v88.__r_.__value_.__l.__data_);
  memset(&__str, 0, sizeof(__str));
  v88.__r_.__value_.__r.__words[0] = v3;
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kSpamType";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v88, &v83);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  xpc_release(v83);
  v83 = 0;
  v84 = 0;
  v85 = 0;
  v88.__r_.__value_.__r.__words[0] = v3;
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kBody";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v88, &v82);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if (*(_QWORD *)__p)
  {
    *(_QWORD *)&__p[8] = *(_QWORD *)__p;
    operator delete(*(void **)__p);
  }
  xpc_release(v82.__r_.__value_.__l.__data_);
  memset(&v82, 0, sizeof(v82));
  v88.__r_.__value_.__r.__words[0] = v3;
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v88, &v81);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  xpc_release(v81.__r_.__value_.__l.__data_);
  memset(&v81, 0, sizeof(v81));
  v88.__r_.__value_.__r.__words[0] = v3;
  v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v88, &object);
  memset(__p, 0, 24);
  xpc::dyn_cast_or_default();
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  xpc_release(object.__r_.__value_.__l.__data_);
  memset(&object, 0, sizeof(object));
  std::string::basic_string[abi:ne180100]<0>(&object, "");
  size = HIBYTE(v87.__r_.__value_.__r.__words[2]);
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v87.__r_.__value_.__l.__size_;
  v10 = size != 0;
  if (!size)
  {
    std::string::__assign_external(&object, "Can't send a spam report for empty remoteUri", 0x2CuLL);
    v11 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(v2[5] + 56))(v2 + 5);
    (*(void (**)(_QWORD *, _BYTE *))(v2[5] + 16))(v2 + 5, v11);
    (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v11 + 32))(v11, &object);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v11[17] = 0;
  }
  if (MEMORY[0x1C3B87B98](v6) != v7 || !xpc_array_get_count(v6))
  {
    std::string::__assign_external(&object, "Can't send a spam report without any message IDs", 0x30uLL);
    v12 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(v2[5] + 56))(v2 + 5);
    (*(void (**)(_QWORD *, _BYTE *))(v2[5] + 16))(v2 + 5, v12);
    (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v12 + 32))(v12, &object);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v10 = 0;
    v12[17] = 0;
  }
  v13 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
  if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v13 = v81.__r_.__value_.__l.__size_;
  if (!v13)
  {
    ImsUuid::generate((ImsUuid *)__p);
    if ((__p[31] & 0x80000000) != 0)
      std::string::__init_copy_ctor_external(&v88, *(const std::string::value_type **)&__p[8], *(std::string::size_type *)&__p[16]);
    else
      v88 = *(std::string *)&__p[8];
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v81.__r_.__value_.__l.__data_);
    v81 = v88;
    *((_BYTE *)&v88.__r_.__value_.__s + 23) = 0;
    v88.__r_.__value_.__s.__data_[0] = 0;
    *(_QWORD *)__p = off_1E78C0288;
    if ((__p[31] & 0x80000000) != 0)
      operator delete(*(void **)&__p[8]);
    v14 = (*(uint64_t (**)(_QWORD *))(v2[5] + 56))(v2 + 5);
    (*(void (**)(_QWORD *, uint64_t))(v2[5] + 16))(v2 + 5, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"transaction not provided, using uuid ", 37);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v14 + 32))(v14, &v81);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
  }
  memset(&v79, 0, sizeof(v79));
  v15 = v2[18];
  if (*(char *)(v15 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v79, *(const std::string::value_type **)(v15 + 8), *(_QWORD *)(v15 + 16));
  }
  else
  {
    v16 = *(_OWORD *)(v15 + 8);
    v79.__r_.__value_.__r.__words[2] = *(_QWORD *)(v15 + 24);
    *(_OWORD *)&v79.__r_.__value_.__l.__data_ = v16;
  }
  if (v10)
  {
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      if (__str.__r_.__value_.__l.__size_ <= 1)
        goto LABEL_53;
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    else
    {
      if (HIBYTE(__str.__r_.__value_.__r.__words[2]) <= 1u)
        goto LABEL_53;
      p_str = &__str;
    }
    if (p_str->__r_.__value_.__s.__data_[0] == 107)
    {
      v24 = std::string::basic_string(&v88, &__str, 1uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v78);
      ims::lowerCase((uint64_t)v24, (std::string *)__p);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__str.__r_.__value_.__l.__data_);
      __str = *(std::string *)__p;
      __p[23] = 0;
      __p[0] = 0;
      if (SHIBYTE(v88.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v88.__r_.__value_.__l.__data_);
    }
LABEL_53:
    v25 = (*(uint64_t (**)(_QWORD *))(v2[5] + 64))(v2 + 5);
    (*(void (**)(_QWORD *, uint64_t))(v2[5] + 16))(v2 + 5, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"sending spam report message on ", 31);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 32))(v25, &v79);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" for trx ", 9);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 32))(v25, &v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)" with spam type ", 16);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v25 + 32))(v25, &__str);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    v26 = (std::__shared_weak_count *)v2[2];
    if (!v26 || (v27 = v2[1], (v28 = std::__shared_weak_count::lock(v26)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v29 = v28;
    p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v33 = __ldaxr(p_shared_owners);
    while (__stlxr(v33 - 1, p_shared_owners));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v29);
    }
    *(_QWORD *)__p = v27;
    *(_QWORD *)&__p[8] = v29;
    do
      v34 = __ldxr(p_shared_weak_owners);
    while (__stxr(v34 + 1, p_shared_weak_owners));
    if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)&__p[16], v81.__r_.__value_.__l.__data_, v81.__r_.__value_.__l.__size_);
    else
      *(std::string *)&__p[16] = v81;
    if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v62, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
    else
      v62 = v82;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v63, v79.__r_.__value_.__l.__data_, v79.__r_.__value_.__l.__size_);
    else
      v63 = v79;
    if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v64, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
    else
      v64 = v87;
    v65 = v6;
    if (v6)
      xpc_retain(v6);
    else
      v65 = xpc_null_create();
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v66, __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    else
      v66 = __str;
    v67 = 0;
    v68 = 0;
    v69 = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v67, v83, (uint64_t)v84, v84 - (_BYTE *)v83);
    v89 = 0;
    v35 = (char *)operator new(0xB0uLL);
    v36 = v35;
    *(_QWORD *)v35 = &off_1E78C3A38;
    *(_OWORD *)(v35 + 8) = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    *(_OWORD *)(v35 + 24) = *(_OWORD *)&__p[16];
    *((_QWORD *)v35 + 5) = *(_QWORD *)&__p[32];
    memset(&__p[16], 0, 24);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v35 + 2, v62.__r_.__value_.__l.__data_, v62.__r_.__value_.__l.__size_);
    else
      *((std::string *)v35 + 2) = v62;
    *((std::string *)v36 + 3) = v63;
    memset(&v63, 0, sizeof(v63));
    if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external((std::string *)v36 + 4, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
    else
      *((std::string *)v36 + 4) = v64;
    v37 = v65;
    *((_QWORD *)v36 + 15) = v65;
    if (v37)
      xpc_retain(v37);
    else
      *((_QWORD *)v36 + 15) = xpc_null_create();
    *((_QWORD *)v36 + 19) = 0;
    *(std::string *)(v36 + 128) = v66;
    memset(&v66, 0, sizeof(v66));
    v38 = v67;
    v39 = v68;
    v40 = v68 - (_QWORD)v67;
    *((_QWORD *)v36 + 20) = 0;
    *((_QWORD *)v36 + 21) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)v36 + 19, v38, v39, v40);
    v89 = (std::string *)v36;
    IMSClientManager::callOnMainQueue((IMSClientManager *)&v88);
    v47 = v89;
    if (v89 == &v88)
    {
      v48 = 4;
      v47 = &v88;
    }
    else
    {
      if (!v89)
      {
LABEL_95:
        v49 = v29;
LABEL_96:
        std::__shared_weak_count::__release_weak(v49);
        goto LABEL_128;
      }
      v48 = 5;
    }
    (*(void (**)(std::string *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(v47->__r_.__value_.__r.__words[0]
                                                                                                + 8 * v48))(v47, v41, v42, v43, v44, v45, v46);
    goto LABEL_95;
  }
  v19 = v2[5];
  v18 = v2 + 5;
  v20 = (*(uint64_t (**)(_QWORD *))(v19 + 56))(v18);
  (*(void (**)(_QWORD *, uint64_t))(*v18 + 16))(v18, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Can't send spam report message on ", 34);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 32))(v20, &v79);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" for trx ", 9);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v20 + 32))(v20, &v81);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  *(_QWORD *)__p = 0;
  *(_QWORD *)&__p[8] = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&v79.__r_.__value_.__l.__data_, __p);
  if (*(_QWORD *)__p)
  {
    v21 = (*(uint64_t (**)(_QWORD *))(*v18 + 56))(v18);
    (*(void (**)(_QWORD *, uint64_t))(*v18 + 16))(v18, v21);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Returning failure status.", 25);
    *(_BYTE *)(v21 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v21 + 17) = 0;
    v78 = 0;
    v22 = xpc_dictionary_create(0, 0, 0);
    v23 = v22;
    if (v22)
    {
      v78 = v22;
    }
    else
    {
      v23 = xpc_null_create();
      v78 = v23;
      if (!v23)
      {
        v50 = xpc_null_create();
        v23 = 0;
        goto LABEL_102;
      }
    }
    if (MEMORY[0x1C3B87B98](v23) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v23);
LABEL_103:
      xpc_release(v23);
      v76 = xpc_BOOL_create(0);
      if (!v76)
        v76 = xpc_null_create();
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v88, &v76, &v77);
      xpc_release(v77);
      v77 = 0;
      xpc_release(v76);
      v76 = 0;
      if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v51 = &v82;
      else
        v51 = (std::string *)v82.__r_.__value_.__r.__words[0];
      v74 = xpc_string_create((const char *)v51);
      if (!v74)
        v74 = xpc_null_create();
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v88, &v74, &v75);
      xpc_release(v75);
      v75 = 0;
      xpc_release(v74);
      v74 = 0;
      if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v52 = &v81;
      else
        v52 = (std::string *)v81.__r_.__value_.__r.__words[0];
      v72 = xpc_string_create((const char *)v52);
      if (!v72)
        v72 = xpc_null_create();
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v88, &v72, &v73);
      xpc_release(v73);
      v73 = 0;
      xpc_release(v72);
      v72 = 0;
      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_object = &object;
      else
        p_object = (std::string *)object.__r_.__value_.__r.__words[0];
      v70 = xpc_string_create((const char *)p_object);
      if (!v70)
        v70 = xpc_null_create();
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)&v78;
      v88.__r_.__value_.__l.__size_ = (std::string::size_type)"kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v88, &v70, &v71);
      xpc_release(v71);
      v71 = 0;
      xpc_release(v70);
      v70 = 0;
      v54 = *(_QWORD *)__p;
      v88.__r_.__value_.__r.__words[0] = (std::string::size_type)v78;
      if (v78)
        xpc_retain(v78);
      else
        v88.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v54 + 120))(v54, &v88);
      xpc_release(v88.__r_.__value_.__l.__data_);
      v88.__r_.__value_.__r.__words[0] = 0;
      xpc_release(v78);
      goto LABEL_124;
    }
    v50 = xpc_null_create();
LABEL_102:
    v78 = v50;
    goto LABEL_103;
  }
LABEL_124:
  v55 = *(std::__shared_weak_count **)&__p[8];
  if (*(_QWORD *)&__p[8])
  {
    v56 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
    do
      v57 = __ldaxr(v56);
    while (__stlxr(v57 - 1, v56));
    if (!v57)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      v49 = v55;
      goto LABEL_96;
    }
  }
LABEL_128:
  if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v79.__r_.__value_.__l.__data_);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    operator delete(object.__r_.__value_.__l.__data_);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v81.__r_.__value_.__l.__data_);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v82.__r_.__value_.__l.__data_);
  if (v83)
  {
    v84 = v83;
    operator delete(v83);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  xpc_release(v6);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v87.__r_.__value_.__l.__data_);
}

void sub_1BEEF74D0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  __clang_call_terminate(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0,std::default_delete<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 8));
    *(_QWORD *)(v2 + 8) = 0;
    MEMORY[0x1C3B87100](v2, 0xA0C40AFF93C70);
  }
  return a1;
}

uint64_t `anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}::~(uint64_t a1)
{
  void *v2;
  std::__shared_weak_count *v3;

  v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(_QWORD *)(a1 + 152) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 143) < 0)
    operator delete(*(void **)(a1 + 120));
  xpc_release(*(xpc_object_t *)(a1 + 112));
  *(_QWORD *)(a1 + 112) = 0;
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  return a1;
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E78C3A38;
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(_QWORD *a1)
{
  *a1 = &off_1E78C3A38;
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0xB0uLL);
  *v2 = &off_1E78C3A38;
  return v2;
}

void sub_1BEEF7AE8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E78C3A38;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BYTE *v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  const char *v13;
  uint64_t v14;
  const char *v15;
  const char *v16;
  const char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  xpc_object_t v24;
  xpc_object_t v25;
  xpc_object_t v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t v29;
  xpc_object_t v30;
  const char *v31;
  xpc_object_t v32;
  xpc_object_t object;
  xpc_object_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;
  char *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(_QWORD *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&v38);
      IMSSMSManager::reportLazuliChatbotSpam(*((_QWORD *)v38 + 26), a1 + 72, a1 + 24, (std::string *)(a1 + 96), a1 + 48, (xpc_object_t *)(a1 + 120), a1 + 128, (char **)(a1 + 152));
      v5 = v39;
      if (v39)
      {
        p_shared_owners = (unint64_t *)&v39->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_50:
      v22 = (unint64_t *)&v4->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  v38 = 0;
  v39 = 0;
  v40 = 0;
  std::string::basic_string[abi:ne180100]<0>(&v38, "ChatServices instance is gone");
  std::string::basic_string[abi:ne180100]<0>(&v35, "laz.cht.svc");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = (_BYTE *)ImsLogger::error(ims::_logger, (uint64_t)&v35, a1 + 72);
  (*(void (**)(_BYTE *, char **))(*(_QWORD *)v8 + 32))(v8, &v38);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v8[17] = 0;
  if (v37 < 0)
    operator delete(v35);
  v35 = 0;
  v36 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 72), &v35);
  if (v35)
  {
    v34 = 0;
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v9;
    if (v9)
    {
      v34 = v9;
    }
    else
    {
      v10 = xpc_null_create();
      v34 = v10;
      if (!v10)
      {
        v11 = xpc_null_create();
        v10 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B87B98](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
LABEL_21:
      xpc_release(v10);
      v32 = xpc_BOOL_create(0);
      if (!v32)
        v32 = xpc_null_create();
      v30 = &v34;
      v31 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v30, &v32, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v32);
      v32 = 0;
      if (*(char *)(a1 + 71) >= 0)
        v12 = (const char *)(a1 + 48);
      else
        v12 = *(const char **)(a1 + 48);
      v28 = xpc_string_create(v12);
      if (!v28)
        v28 = xpc_null_create();
      v30 = &v34;
      v31 = "kConversationId";
      xpc::dict::object_proxy::operator=((uint64_t)&v30, &v28, &v29);
      xpc_release(v29);
      v29 = 0;
      xpc_release(v28);
      v28 = 0;
      v15 = *(const char **)(a1 + 24);
      v14 = a1 + 24;
      v13 = v15;
      if (*(char *)(v14 + 23) >= 0)
        v16 = (const char *)v14;
      else
        v16 = v13;
      v26 = xpc_string_create(v16);
      if (!v26)
        v26 = xpc_null_create();
      v30 = &v34;
      v31 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v30, &v26, &v27);
      xpc_release(v27);
      v27 = 0;
      xpc_release(v26);
      v26 = 0;
      if (v40 >= 0)
        v17 = (const char *)&v38;
      else
        v17 = v38;
      v24 = xpc_string_create(v17);
      if (!v24)
        v24 = xpc_null_create();
      v30 = &v34;
      v31 = "kReason";
      xpc::dict::object_proxy::operator=((uint64_t)&v30, &v24, &v25);
      xpc_release(v25);
      v25 = 0;
      xpc_release(v24);
      v24 = 0;
      v18 = v35;
      v30 = v34;
      if (v34)
        xpc_retain(v34);
      else
        v30 = xpc_null_create();
      (*(void (**)(void *, xpc_object_t *))(*(_QWORD *)v18 + 120))(v18, &v30);
      xpc_release(v30);
      v30 = 0;
      xpc_release(v34);
      goto LABEL_42;
    }
    v11 = xpc_null_create();
LABEL_20:
    v34 = v11;
    goto LABEL_21;
  }
LABEL_42:
  v19 = v36;
  if (v36)
  {
    v20 = (unint64_t *)&v36->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (SHIBYTE(v40) < 0)
    operator delete(v38);
  if (v4)
    goto LABEL_50;
}

void sub_1BEEF7F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t a20)
{
  std::__shared_weak_count *v20;
  uint64_t v21;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;

  v23 = *(std::__shared_weak_count **)(v21 - 48);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldaxr(p_shared_owners);
    while (__stlxr(v25 - 1, p_shared_owners));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v26 = (unint64_t *)&v20->__shared_owners_;
  do
    v27 = __ldaxr(v26);
  while (__stlxr(v27 - 1, v26));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatServicesImpl::sendSpamReport(xpc::dict)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  void *v11;
  __int128 v12;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v7;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v8;
  }
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 64), *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v9;
  }
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 88), *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v10;
  }
  v11 = *(void **)(a2 + 112);
  *(_QWORD *)(a1 + 112) = v11;
  if (v11)
    xpc_retain(v11);
  else
    *(_QWORD *)(a1 + 112) = xpc_null_create();
  if (*(char *)(a2 + 143) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 120), *(const std::string::value_type **)(a2 + 120), *(_QWORD *)(a2 + 128));
  }
  else
  {
    v12 = *(_OWORD *)(a2 + 120);
    *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v12;
  }
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(a1 + 144), *(const void **)(a2 + 144), *(_QWORD *)(a2 + 152), *(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144));
  return a1;
}

void sub_1BEEF8290(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  std::__shared_weak_count *v7;

  xpc_release(*(xpc_object_t *)(v1 + 112));
  *(_QWORD *)(v1 + 112) = 0;
  if (*(char *)(v1 + 111) < 0)
    operator delete(*v5);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v4);
  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v7 = *(std::__shared_weak_count **)(v1 + 8);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<ims::lazuli::ChatServices>::execute_wrapped<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0>(`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0,std::default_delete<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  __int128 v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  std::string *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t *v26;
  uint64_t v27;
  void *v28;
  _BYTE __p[32];
  std::string v30;
  std::string v31;
  std::string v32;
  std::string v33;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v1 = *a1;
  v26 = a1;
  v27 = v1;
  v2 = *(_QWORD **)v1;
  memset(&v33, 0, sizeof(v33));
  v3 = v2[18];
  if (*(char *)(v3 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v33, *(const std::string::value_type **)(v3 + 8), *(_QWORD *)(v3 + 16));
  }
  else
  {
    v4 = *(_OWORD *)(v3 + 8);
    v33.__r_.__value_.__r.__words[2] = *(_QWORD *)(v3 + 24);
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v4;
  }
  v5 = (std::__shared_weak_count *)v2[2];
  if (!v5 || (v6 = (void *)v2[1], (v7 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v8 = v7;
  p_shared_weak_owners = (unint64_t *)&v7->__shared_weak_owners_;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v8);
  }
  memset(&v32, 0, sizeof(v32));
  ImsUuid::generate((ImsUuid *)&v28);
  if ((__p[23] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)__p, *(std::string::size_type *)&__p[8]);
    v28 = off_1E78C0288;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
  }
  else
  {
    v32 = *(std::string *)__p;
  }
  std::string::basic_string[abi:ne180100]<0>(&v28, "laz.cht");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v13 = ImsLogger::debug(ims::_logger, (uint64_t)&v28, (uint64_t)&v33);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"get capabilities transaction id ", 32);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v13 + 32))(v13, &v32);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  if ((__p[15] & 0x80000000) != 0)
    operator delete(v28);
  v28 = v6;
  *(_QWORD *)__p = v8;
  do
    v14 = __ldxr(p_shared_weak_owners);
  while (__stxr(v14 + 1, p_shared_weak_owners));
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external((std::string *)&__p[8], v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
  else
    *(std::string *)&__p[8] = v32;
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v30, v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
  else
    v30 = v33;
  if (*(char *)(v1 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(&v31, *(const std::string::value_type **)(v1 + 8), *(_QWORD *)(v1 + 16));
  }
  else
  {
    v15 = *(_OWORD *)(v1 + 8);
    v31.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1 + 24);
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v15;
  }
  v35 = 0;
  v16 = (char *)operator new(0x60uLL);
  v17 = v16;
  v19 = v28;
  v18 = *(_QWORD *)__p;
  *(_QWORD *)v16 = off_1E78C3AB8;
  *((_QWORD *)v16 + 1) = v19;
  *((_QWORD *)v16 + 2) = v18;
  if (v18)
  {
    v20 = (unint64_t *)(v18 + 16);
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  *(_OWORD *)(v16 + 24) = *(_OWORD *)&__p[8];
  *((_QWORD *)v16 + 5) = *(_QWORD *)&__p[24];
  memset(&__p[8], 0, 24);
  *((std::string *)v16 + 2) = v30;
  memset(&v30, 0, sizeof(v30));
  v22 = (std::string *)(v16 + 72);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v22, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v22->__r_.__value_.__l.__data_ = *(_OWORD *)&v31.__r_.__value_.__l.__data_;
    *((_QWORD *)v17 + 11) = *((_QWORD *)&v31.__r_.__value_.__l + 2);
  }
  v35 = v17;
  IMSClientManager::callOnMainQueue((IMSClientManager *)v34);
  v23 = v35;
  if (v35 == v34)
  {
    v24 = 4;
    v23 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_40;
    v24 = 5;
  }
  (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_40:
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
  if ((__p[31] & 0x80000000) != 0)
    operator delete(*(void **)&__p[8]);
  if (*(_QWORD *)__p)
    std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)__p);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  std::__shared_weak_count::__release_weak(v8);
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v33.__r_.__value_.__l.__data_);
}

void sub_1BEEF8724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, std::__shared_weak_count *a13, void *a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  std::__shared_weak_count *v40;
  uint64_t v41;
  void **v42;
  void **v43;
  uint64_t v44;
  std::__shared_weak_count *v46;

  if (*(char *)(v41 + 71) < 0)
    operator delete(*v43);
  if (*(char *)(v41 + 47) < 0)
    operator delete(*v42);
  v46 = *(std::__shared_weak_count **)(v41 + 16);
  if (v46)
    std::__shared_weak_count::__release_weak(v46);
  operator delete((void *)v41);
  if (a34 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  if (a22 < 0)
    operator delete(a14);
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  if (a40 < 0)
    operator delete(a35);
  std::__shared_weak_count::__release_weak(v40);
  if (*(char *)(v44 - 105) < 0)
    operator delete(*(void **)(v44 - 128));
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0,std::default_delete<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    if (*(char *)(v2 + 31) < 0)
      operator delete(*(void **)(v2 + 8));
    MEMORY[0x1C3B87100](v2, 0x1032C402793DAF4);
  }
  return a1;
}

uint64_t std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C3AB8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C3AB8;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
    operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x60uLL);
  *v2 = off_1E78C3AB8;
  return v2;
}

void sub_1BEEF89F8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E78C3AB8;
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy(uint64_t a1)
{
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy_deallocate(void *a1)
{
  operator delete(a1);
}

void std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  const char *v12;
  void *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  xpc_object_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  const char *v22;
  xpc_object_t v23;
  xpc_object_t object;
  xpc_object_t v25;
  void *__p;
  std::__shared_weak_count *v27;
  char v28;

  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    v3 = (IMSClientManager *)std::__shared_weak_count::lock(v2);
    v4 = (std::__shared_weak_count *)v3;
    if (v3 && *(_QWORD *)(a1 + 8))
    {
      IMSClientManager::instance(v3);
      IPTelephonyManager::getInstance((uint64_t *)&__p);
      IMSSMSManager::getCapabilities(*((_QWORD *)__p + 26), (void **)(a1 + 48), a1 + 24, a1 + 72);
      v5 = v27;
      if (v27)
      {
        p_shared_owners = (unint64_t *)&v27->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
LABEL_38:
      v17 = (unint64_t *)&v4->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      return;
    }
  }
  else
  {
    v4 = 0;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "laz.cht");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v8 = ImsLogger::error(ims::_logger, (uint64_t)&__p, a1 + 48);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"ChatServices instance gone for ", 31);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, a1 + 24);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  if (v28 < 0)
    operator delete(__p);
  __p = 0;
  v27 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1 + 48), &__p);
  if (__p)
  {
    v25 = 0;
    v9 = xpc_dictionary_create(0, 0, 0);
    v10 = v9;
    if (v9)
    {
      v25 = v9;
    }
    else
    {
      v10 = xpc_null_create();
      v25 = v10;
      if (!v10)
      {
        v11 = xpc_null_create();
        v10 = 0;
        goto LABEL_20;
      }
    }
    if (MEMORY[0x1C3B87B98](v10) == MEMORY[0x1E0C812F8])
    {
      xpc_retain(v10);
LABEL_21:
      xpc_release(v10);
      v23 = xpc_BOOL_create(0);
      if (!v23)
        v23 = xpc_null_create();
      v21 = &v25;
      v22 = "kIsSuccess";
      xpc::dict::object_proxy::operator=((uint64_t)&v21, &v23, &object);
      xpc_release(object);
      object = 0;
      xpc_release(v23);
      v23 = 0;
      if (*(char *)(a1 + 47) >= 0)
        v12 = (const char *)(a1 + 24);
      else
        v12 = *(const char **)(a1 + 24);
      v19 = xpc_string_create(v12);
      if (!v19)
        v19 = xpc_null_create();
      v21 = &v25;
      v22 = "kTransactionId";
      xpc::dict::object_proxy::operator=((uint64_t)&v21, &v19, &v20);
      xpc_release(v20);
      v20 = 0;
      xpc_release(v19);
      v19 = 0;
      v13 = __p;
      v21 = v25;
      if (v25)
        xpc_retain(v25);
      else
        v21 = xpc_null_create();
      (*(void (**)(void *, xpc_object_t *))(*(_QWORD *)v13 + 96))(v13, &v21);
      xpc_release(v21);
      v21 = 0;
      xpc_release(v25);
      goto LABEL_32;
    }
    v11 = xpc_null_create();
LABEL_20:
    v25 = v11;
    goto LABEL_21;
  }
LABEL_32:
  v14 = v27;
  if (v27)
  {
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (v4)
    goto LABEL_38;
}

void sub_1BEEF8D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21)
{
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;

  if (a17)
  {
    p_shared_owners = (unint64_t *)&a17->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))a17->__on_zero_shared)(a17);
      std::__shared_weak_count::__release_weak(a17);
    }
  }
  v25 = (unint64_t *)&v21->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},0,false>::__compressed_pair_elem[abi:ne180100]<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1} const&,0ul>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  std::string *v9;
  __int128 v10;

  v4 = *(_QWORD *)(a2 + 8);
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)(a1 + 8) = v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 16);
    *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v7;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 40), *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v8 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v8;
  }
  v9 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v10 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
  }
  return a1;
}

void sub_1BEEF8FEC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  std::__shared_weak_count *v5;

  if (*(char *)(v1 + 63) < 0)
    operator delete(*v3);
  if (*(char *)(v1 + 39) < 0)
    operator delete(*v2);
  v5 = *(std::__shared_weak_count **)(v1 + 8);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(exception_object);
}

void std::__function::__alloc_func<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1},std::allocator<`anonymous namespace'::ChatServicesImpl::getCapabilities(std::string const&)::$_0::operator() const(void)::{lambda(void)#1}>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
}

void SipReferredByHeader::~SipReferredByHeader(SipReferredByHeader *this)
{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipReferredByHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

{
  *(_QWORD *)this = &off_1E78DC1D0;
  SipUri::~SipUri((SipReferredByHeader *)((char *)this + 104));
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
  JUMPOUT(0x1C3B87100);
}

SipUriHeader *SipReferredByHeader::clone(SipReferredByHeader *this)
{
  SipUriHeader *v2;

  v2 = (SipUriHeader *)operator new();
  SipUriHeader::SipUriHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C3B80;
  return v2;
}

void sub_1BEEF91A0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4072661F37);
  _Unwind_Resume(a1);
}

void SipRouteSetHeader::SipRouteSetHeader(SipRouteSetHeader *this, const SipRouteSetHeader *a2)
{
  _QWORD *v3;

  SipHeader::SipHeader(this, a2);
  *v3 = off_1E78C3C20;
  SipRouteSet::SipRouteSet((SipRouteSet *)(v3 + 8), (const SipRouteSetHeader *)((char *)a2 + 64));
}

void sub_1BEEF9200(_Unwind_Exception *a1)
{
  void **v1;

  SipHeader::~SipHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipRouteSetHeader::encodeValue(SipRouteSetHeader *this, ImsOutStream *a2)
{
  SipRouteSet::toStream((SipRouteSetHeader *)((char *)this + 64), a2);
  return 1;
}

BOOL SipRouteSetHeader::setValueFromString(uint64_t a1, std::string *a2)
{
  _QWORD *v4;
  _BOOL8 v5;
  uint64_t v6;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  v4 = (_QWORD *)(a1 + 64);
  v5 = SipRouteSet::fromString((SipRouteSet *)(a1 + 64), a2);
  if (!v5)
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::error(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Invalid URIs in ", 16);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a1 + 8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" header: ", 9);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 32))(v6, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v9 < 0)
      operator delete(__p[0]);
    if (v11 < 0)
      operator delete(v10[0]);
    SipRouteSet::clear(v4);
  }
  return v5;
}

void sub_1BEEF9368(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SipRouteSetHeader::mergeHeader(SipRouteSetHeader *this, const SipHeader *lpsrc)
{
  char *v3;

  if (v3)
    SipRouteSet::addHops((SipRouteSetHeader *)((char *)this + 64), (const SipRouteSet *)(v3 + 64), 0, 0, 0);
  return v3 != 0;
}

std::string::size_type SipRouteSetHeader::findParameterMarker(int a1, std::string *this)
{
  std::string::size_type size;
  std::string::size_type v4;
  std::string::size_type v5;
  std::string::size_type v6;
  std::string::size_type v7;
  uint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    v4 = 0;
    while (1)
    {
      v5 = std::string::find(this, 60, v4);
      if (v5 == -1)
        return std::string::find(this, 59, v4);
      v6 = std::string::find(this, 62, v5);
      if (v6 == -1)
        break;
      v4 = v6 + 1;
      v7 = HIBYTE(this->__r_.__value_.__r.__words[2]);
      if ((v7 & 0x80u) != 0)
        v7 = this->__r_.__value_.__l.__size_;
      if (v4 >= v7)
        return -1;
    }
    std::string::basic_string[abi:ne180100]<0>(v12, "sip.decode");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v12, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"No matching close bracket in route set header: ", 47);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 32))(v9, this);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v11 < 0)
      operator delete(__p[0]);
    if (v13 < 0)
      operator delete(v12[0]);
  }
  return -1;
}

void sub_1BEEF9568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LoggableString::~LoggableString(void **this)
{
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

uint64_t SipTransportInterface::SipTransportInterface(uint64_t a1, uint64_t *a2, const std::string *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::string __p;

  v6 = a2[1];
  *(_QWORD *)a1 = v6;
  *(_QWORD *)(a1 + *(_QWORD *)(v6 - 48)) = a2[2];
  *(_QWORD *)(a1 + 24) = 0;
  v7 = a1 + 24;
  *(_BYTE *)(a1 + 12) = 1;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.tport");
  ImsLogContainer::ImsLogContainer(v7 + 48, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v8 = *a2;
  *(_QWORD *)a1 = *a2;
  *(_QWORD *)(a1 + *(_QWORD *)(v8 - 48)) = a2[3];
  *(_QWORD *)(a1 + 72) = off_1E78C4110;
  return a1;
}

void sub_1BEEF96A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  SipLockable *v15;
  uint64_t *v16;

  if (a15 < 0)
    operator delete(__p);
  SipLockable::~SipLockable(v15, v16);
  _Unwind_Resume(a1);
}

void SipTcpConnection::create(uint64_t *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  char v16;

  v16 = a3;
  *a4 = 0;
  a4[1] = 0;
  std::allocate_shared[abi:ne180100]<SipTcpConnection,std::allocator<SipTcpConnection>,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,void>(a1, a2, &v16, a4);
  v6 = *a2;
  if (*a2)
  {
    v7 = (std::__shared_weak_count *)a4[1];
    if (*a4)
      v8 = *a4 + 176;
    else
      v8 = 0;
    v14 = v8;
    v15 = v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v6 + 184))(v6, &v14);
    v11 = v15;
    if (v15)
    {
      v12 = (unint64_t *)&v15->__shared_owners_;
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
}

void sub_1BEEF9790(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void SipTcpConnection::~SipTcpConnection(SipTcpConnection *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  SipMessageDecoder *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t (*v12)(char *);
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;

  *(_QWORD *)this = &off_1E78C3CE0;
  *((_QWORD *)this + 9) = &unk_1E78C3DB8;
  v2 = (char *)this + 72;
  *((_QWORD *)this + 22) = &unk_1E78C3E18;
  *((_QWORD *)this + 23) = &unk_1E78C3E68;
  v3 = ImsLogContainer::debugStream((SipTcpConnection *)((char *)this + 72));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"SipTcpConnection dtor", 21);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  SipTimerContainer::cancelAllTimers((SipTcpConnection *)((char *)this + 360));
  if (*((_QWORD *)this + 42))
  {
    v4 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v4);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"deleting with ", 14);
    *(_BYTE *)(v4 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" users still attached", 21);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    SipTcpConnection::removeAllTransactions(this, 0);
  }
  SipTcpConnection::stopCrlfKeepAlive(this);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 26);
  v5 = (SipMessageDecoder *)*((_QWORD *)this + 38);
  if (v5)
  {
    SipMessageDecoder::~SipMessageDecoder(v5);
    MEMORY[0x1C3B87100]();
  }
  *((_QWORD *)this + 38) = 0;
  v6 = (_QWORD *)((char *)this + 272);
  v7 = *((_QWORD *)this + 34);
  if (!v7)
  {
    v9 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"_sock is already null", 21);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    goto LABEL_20;
  }
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7) & 1) != 0)
  {
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v2 + 64))(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"closing connection", 18);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 72))(*v6);
    goto LABEL_20;
  }
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v10)
    v11 = std::__shared_weak_count::lock(v10);
  else
    v11 = 0;
  v12 = *(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64);
  if (*((_BYTE *)this + 506))
  {
    v13 = v12(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"resetting connection", 20);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(_QWORD))(*(_QWORD *)*v6 + 80))(*v6);
    if (!v11)
      goto LABEL_20;
  }
  else
  {
    v14 = v12(v2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v14);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"NOT resetting connection", 24);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if (!v11)
      goto LABEL_20;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
LABEL_20:
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 536);
  SipTimerContainer::~SipTimerContainer((SipTcpConnection *)((char *)this + 360));
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)this + 312);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 272);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)this + 224);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 208);
  v18 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  SipTransportInterface::~SipTransportInterface(this, (uint64_t)&off_1E78C3E88);
}

{
  SipTcpConnection::~SipTcpConnection(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTcpConnection::removeAllTransactions(SipTcpConnection *this, const ImsResult *a2)
{
  _QWORD *i;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t j;
  _QWORD *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  char v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  __int128 v39;
  __int128 v40;
  uint64_t v41;

  v41 = 0;
  v39 = 0u;
  v40 = 0u;
  LODWORD(v41) = *((_DWORD *)this + 86);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>((uint64_t)&v39, *((_QWORD *)this + 40));
  for (i = (_QWORD *)*((_QWORD *)this + 41); i; i = (_QWORD *)*i)
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__emplace_unique_key_args<SipConnectionUser *,SipConnectionUser * const&>((uint64_t)&v39, i[2], i[2]);
  if (*((_QWORD *)this + 42))
  {
    v5 = (_QWORD *)*((_QWORD *)this + 41);
    if (v5)
    {
      do
      {
        v6 = (_QWORD *)*v5;
        operator delete(v5);
        v5 = v6;
      }
      while (v6);
    }
    *((_QWORD *)this + 41) = 0;
    v7 = *((_QWORD *)this + 40);
    if (v7)
    {
      for (j = 0; j != v7; ++j)
        *(_QWORD *)(*((_QWORD *)this + 39) + 8 * j) = 0;
    }
    *((_QWORD *)this + 42) = 0;
  }
  v9 = (_QWORD *)v40;
  if ((_QWORD)v40)
  {
    v10 = (char *)this + 72;
    do
    {
      v11 = v9[2];
      v37 = 0;
      v38 = 0;
      (*(void (**)(uint64_t *__return_ptr, SipTcpConnection *))(*(_QWORD *)this + 112))(&v37, this);
      if (!v37)
        goto LABEL_26;
      if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 176))(v37) & 1) != 0)
      {
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v37 + 280))(v37) & 1) != 0)
          goto LABEL_24;
        v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 72, v12);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"group doesn't accept transactions", 33);
        *(_BYTE *)(v12 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v12 + 17) = 0;
        v13 = v38;
        v37 = 0;
        v38 = 0;
        if (!v13)
          goto LABEL_26;
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
      }
      else
      {
        v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 72, v16);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"group isn't initialized", 23);
        *(_BYTE *)(v16 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v16 + 17) = 0;
        v13 = v38;
        v37 = 0;
        v38 = 0;
        if (!v13)
          goto LABEL_26;
        v17 = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(v17);
        while (__stlxr(v15 - 1, v17));
      }
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
LABEL_24:
      if (v37)
      {
        v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 64))((char *)this + 72);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 72, v18);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"switching user ", 15);
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(__p, v11);
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 40))(v18, __p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" to transport ", 14);
        *(_BYTE *)(v18 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 104))(v37, v18);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        goto LABEL_27;
      }
LABEL_26:
      v18 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 64))((char *)this + 72);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 72, v18);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"removing myself from ", 21);
      *(_BYTE *)(v18 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(__p, v11);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v18 + 40))(v18, __p);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_27:
      *(_BYTE *)(v18 + 17) = 0;
      if (v36 < 0)
        operator delete(__p[0]);
      v33 = 0;
      v34 = 0;
      (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v11 + 48))(v11, &v33, 0);
      v19 = v34;
      if (v34)
      {
        v20 = (unint64_t *)&v34->__shared_owners_;
        do
          v21 = __ldaxr(v20);
        while (__stlxr(v21 - 1, v20));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      v31 = v37;
      v32 = v38;
      if (v38)
      {
        v22 = (unint64_t *)&v38->__shared_owners_;
        do
          v23 = __ldxr(v22);
        while (__stxr(v23 + 1, v22));
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v11 + 48))(v11, &v31, 1);
      v24 = v32;
      if (!v32)
        goto LABEL_41;
      v25 = (unint64_t *)&v32->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (v26)
      {
LABEL_41:
        if (!a2)
          goto LABEL_43;
LABEL_42:
        (*(void (**)(uint64_t, const ImsResult *))(*(_QWORD *)v11 + 24))(v11, a2);
        goto LABEL_43;
      }
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
      if (a2)
        goto LABEL_42;
LABEL_43:
      v27 = v38;
      if (v38)
      {
        v28 = (unint64_t *)&v38->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v9 = (_QWORD *)*v9;
    }
    while (v9);
  }
  SipTcpConnection::stopCrlfKeepAlive(this);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 26);
  return std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)&v39);
}

void sub_1BEEFA064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'SipTcpConnection::~SipTcpConnection(SipTcpConnection *this)
{
  SipTcpConnection::~SipTcpConnection((SipTcpConnection *)((char *)this - 72));
}

{
  SipTcpConnection::~SipTcpConnection((SipTcpConnection *)((char *)this - 176));
}

{
  SipTcpConnection::~SipTcpConnection((SipTcpConnection *)((char *)this - 184));
}

{
  SipTcpConnection::~SipTcpConnection((SipTcpConnection *)((char *)this - 72));
  JUMPOUT(0x1C3B87100);
}

{
  SipTcpConnection::~SipTcpConnection((SipTcpConnection *)((char *)this - 176));
  JUMPOUT(0x1C3B87100);
}

{
  SipTcpConnection::~SipTcpConnection((SipTcpConnection *)((char *)this - 184));
  JUMPOUT(0x1C3B87100);
}

void SipTcpConnection::loggableName(SipTcpConnection *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v5, 1);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v5 + 1), (uint64_t)"TcpConnection ", 14);
  BYTE1(v6) = 0;
  (*(void (**)(SipTcpConnection *, __int128 *))(*(_QWORD *)this + 104))(this, &v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v6 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v5 = &off_1E78D7A10;
  if ((_BYTE)v6)
  {
    if (*((_QWORD *)&v5 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 8))(*((_QWORD *)&v5 + 1));
  }
}

void sub_1BEEFA250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL SipTcpConnection::addUser(SipTcpConnection *this, SipConnectionUser *a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  __int128 v12;

  v3 = *((unsigned __int8 *)this + 504);
  if (*((_BYTE *)this + 504))
  {
    v4 = (char *)this + 72;
    v5 = (*(uint64_t (**)(char *, SipConnectionUser *))(*((_QWORD *)this + 9) + 64))((char *)this + 72, a2);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Don't add user to a connection that is shutting down.", 53);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
  }
  else
  {
    SipTimerContainer::cancelAllTimers((SipTcpConnection *)((char *)this + 360));
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__emplace_unique_key_args<SipConnectionUser *,SipConnectionUser * const&>((uint64_t)this + 312, (unint64_t)a2, (uint64_t)a2);
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"now used by ", 12);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" transactions", 13);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (!*((_QWORD *)this + 26))
    {
      (*(void (**)(__int128 *__return_ptr, SipTcpConnection *))(*(_QWORD *)this + 112))(&v12, this);
      std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 208, &v12);
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v12 + 1);
      if (*((_QWORD *)&v12 + 1))
      {
        v10 = (unint64_t *)(*((_QWORD *)&v12 + 1) + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 - 1, v10));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
  }
  return v3 == 0;
}

void SipTcpConnection::removeUser(SipTcpConnection *this, unint64_t a2)
{
  int8x8_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  uint8x8_t v7;
  unint64_t v8;
  uint64_t v9;
  void **v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  _QWORD v30[6];
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  __int128 v34;
  char v35;

  v3 = *(int8x8_t *)((char *)this + 320);
  if (!*(_QWORD *)&v3)
    goto LABEL_47;
  v4 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v5 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v4 >> 47) ^ v4);
  v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v5 >> 47));
  v7 = (uint8x8_t)vcnt_s8(v3);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    v8 = v6;
    if (v6 >= *(_QWORD *)&v3)
      v8 = v6 % *(_QWORD *)&v3;
  }
  else
  {
    v8 = (*(_QWORD *)&v3 - 1) & v6;
  }
  v9 = *((_QWORD *)this + 39);
  v10 = *(void ***)(v9 + 8 * v8);
  if (!v10)
    goto LABEL_47;
  v11 = *v10;
  if (!*v10)
    goto LABEL_47;
  v12 = *(_QWORD *)&v3 - 1;
  while (1)
  {
    v13 = v11[1];
    if (v13 == v6)
      break;
    if (v7.u32[0] > 1uLL)
    {
      if (v13 >= *(_QWORD *)&v3)
        v13 %= *(_QWORD *)&v3;
    }
    else
    {
      v13 &= v12;
    }
    if (v13 != v8)
      goto LABEL_47;
LABEL_17:
    v11 = (_QWORD *)*v11;
    if (!v11)
      goto LABEL_47;
  }
  if (v11[2] != a2)
    goto LABEL_17;
  v14 = (_QWORD *)*v11;
  if (v7.u32[0] > 1uLL)
  {
    if (v6 >= *(_QWORD *)&v3)
      v6 %= *(_QWORD *)&v3;
  }
  else
  {
    v6 &= v12;
  }
  v15 = *(_QWORD **)(v9 + 8 * v6);
  do
  {
    v16 = v15;
    v15 = (_QWORD *)*v15;
  }
  while (v15 != v11);
  if (v16 == (_QWORD *)((char *)this + 328))
    goto LABEL_36;
  v17 = v16[1];
  if (v7.u32[0] > 1uLL)
  {
    if (v17 >= *(_QWORD *)&v3)
      v17 %= *(_QWORD *)&v3;
  }
  else
  {
    v17 &= v12;
  }
  if (v17 == v6)
  {
LABEL_38:
    if (v14)
    {
      v18 = v14[1];
      goto LABEL_40;
    }
  }
  else
  {
LABEL_36:
    if (!v14)
      goto LABEL_37;
    v18 = v14[1];
    if (v7.u32[0] > 1uLL)
    {
      v19 = v14[1];
      if (v18 >= *(_QWORD *)&v3)
        v19 = v18 % *(_QWORD *)&v3;
    }
    else
    {
      v19 = v18 & v12;
    }
    if (v19 != v6)
    {
LABEL_37:
      *(_QWORD *)(v9 + 8 * v6) = 0;
      v14 = (_QWORD *)*v11;
      goto LABEL_38;
    }
LABEL_40:
    if (v7.u32[0] > 1uLL)
    {
      if (v18 >= *(_QWORD *)&v3)
        v18 %= *(_QWORD *)&v3;
    }
    else
    {
      v18 &= v12;
    }
    if (v18 != v6)
    {
      *(_QWORD *)(*((_QWORD *)this + 39) + 8 * v18) = v16;
      v14 = (_QWORD *)*v11;
    }
  }
  *v16 = v14;
  *v11 = 0;
  --*((_QWORD *)this + 42);
  operator delete(v11);
LABEL_47:
  v20 = (*(uint64_t (**)(char *, unint64_t))(*((_QWORD *)this + 9) + 64))((char *)this + 72, a2);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v20);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"being used by ", 14);
  *(_BYTE *)(v20 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v20 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" transactions", 13);
  *(_BYTE *)(v20 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v20 + 17) = 0;
  SipTcpConnection::startCrlfKeepAlive((std::__shared_weak_count **)this);
  if (!*((_QWORD *)this + 42))
  {
    LoggableString::LoggableString((LoggableString *)&v34, "setIdleTimeout");
    v21 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
    if (!v21 || (v22 = *((_QWORD *)this + 24), (v23 = std::__shared_weak_count::lock(v21)) == 0))
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v32 = v22;
    v33 = v23;
    v30[5] = 0;
    v31 = 0;
    v30[0] = MEMORY[0x1E0C809B0];
    v30[1] = 0x40000000;
    v30[2] = ___ZN16SipTcpConnection10removeUserEP17SipConnectionUser_block_invoke;
    v30[3] = &__block_descriptor_tmp_9;
    v30[4] = this;
    SipLockable::performBlock((uint64_t)this, &v34, &v32, v30);
    v24 = v33;
    if (v33)
    {
      p_shared_owners = (unint64_t *)&v33->__shared_owners_;
      do
        v26 = __ldaxr(p_shared_owners);
      while (__stlxr(v26 - 1, p_shared_owners));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    v27 = v31;
    if (v31)
    {
      v28 = (unint64_t *)&v31->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    if (v35 < 0)
      operator delete((void *)v34);
  }
}

void sub_1BEEFA7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  uint64_t v6;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a6);
  va_start(va, a6);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  if (*(char *)(v6 - 33) < 0)
    operator delete(*(void **)(v6 - 56));
  _Unwind_Resume(a1);
}

void SipTcpConnection::startCrlfKeepAlive(std::__shared_weak_count **this)
{
  int v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  WakeOnWifiAssertion *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  time_t v10;
  unsigned int v11;
  uint64_t v12;
  tm *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  _BYTE v24[24];
  _BYTE *v25;
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (SipTcpConnection::crlfKeepAliveAllowed((SipTcpConnection *)this))
  {
    v2 = SipTcpConnection::isOnWiFi((SipTcpConnection *)this);
    v3 = this[67];
    if (v2)
    {
      if (!v3)
      {
        v4 = ((uint64_t (*)(char *))this[9][2].__shared_weak_owners_)((char *)this + 72);
        ((void (*)(char *, uint64_t))this[9]->__shared_weak_owners_)((char *)this + 72, v4);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Creating WoW assertion", 22);
        *(_BYTE *)(v4 + 17) = 0;
        v5 = (WakeOnWifiAssertion *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v4 + 17) = 0;
        WakeOnWifiAssertion::get(v5, &v23);
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(this + 67), &v23);
        v6 = (std::__shared_weak_count *)*((_QWORD *)&v23 + 1);
        if (*((_QWORD *)&v23 + 1))
        {
          v7 = (unint64_t *)(*((_QWORD *)&v23 + 1) + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
      }
    }
    else if (v3)
    {
      v9 = ((uint64_t (*)(char *))this[9][2].__shared_weak_owners_)((char *)this + 72);
      ((void (*)(char *, uint64_t))this[9]->__shared_weak_owners_)((char *)this + 72, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Releasing WoW assertion", 23);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
      std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](this + 67);
    }
    {
    }
    v10 = time(0);
    v11 = *((_DWORD *)this + 131);
    v12 = ((uint64_t (*)(char *))this[9][2].__shared_weak_owners_)((char *)this + 72);
    ((void (*)(char *, uint64_t))this[9]->__shared_weak_owners_)((char *)this + 72, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"next keepalive event ", 21);
    *(_BYTE *)(v12 + 17) = 0;
    ims::formatTimeAndIntervalFromNow((ims *)(v10 + v11), v12, v13);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    v15 = this[24];
    v14 = this[25];
    if (v14)
    {
      p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
      do
        v17 = __ldxr(p_shared_weak_owners);
      while (__stxr(v17 + 1, p_shared_weak_owners));
      do
        v18 = __ldxr(p_shared_weak_owners);
      while (__stxr(v18 + 1, p_shared_weak_owners));
      this[66] = (std::__shared_weak_count *)v10;
      do
        v19 = __ldxr(p_shared_weak_owners);
      while (__stxr(v19 + 1, p_shared_weak_owners));
    }
    else
    {
      this[66] = (std::__shared_weak_count *)v10;
    }
    v25 = 0;
    v20 = operator new(0x20uLL);
    *v20 = &off_1E78C4240;
    v20[1] = this;
    v20[2] = v15;
    v20[3] = v14;
    v25 = v20;
    v21 = v25;
    if (v25 == v24)
    {
      v22 = 4;
      v21 = v24;
    }
    else
    {
      if (!v25)
        goto LABEL_26;
      v22 = 5;
    }
    (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_26:
    if (v14)
    {
      std::__shared_weak_count::__release_weak(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
}

void sub_1BEEFAB28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, char *a15)
{
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;

  v18 = a15;
  if (a15 == v16)
  {
    v19 = 4;
    v18 = &a12;
  }
  else
  {
    if (!a15)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN16SipTcpConnection10removeUserEP17SipConnectionUser_block_invoke(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  int v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  BOOL v14;
  unint64_t *p_shared_weak_owners;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t *v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v1 = *(_QWORD *)(a1 + 32);
  v2 = *(std::__shared_weak_count **)(v1 + 296);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      v4 = v3;
      v5 = *(_QWORD *)(v1 + 288);
      if (!v5 || *(_QWORD *)(v1 + 336))
        goto LABEL_5;
      if (!*(_BYTE *)(v1 + 505))
      {
        SipTcpConnection::stopCrlfKeepAlive((SipTcpConnection *)v1);
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(v1 + 208));
LABEL_5:
        p_shared_owners = (unint64_t *)&v4->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (!v7)
        {
          ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
          std::__shared_weak_count::__release_weak(v4);
        }
        return;
      }
      if (*(_BYTE *)(v1 + 516))
      {
        v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 72) + 64))(v1 + 72);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 72) + 16))(v1 + 72, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"A transaction timed out when using this connection.  closing connection.", 72);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        SipTcpConnection::closeIfUnused((SipTcpConnection *)v1);
        goto LABEL_5;
      }
      (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 32))(&v31);
      if (v32)
      {
        v9 = std::__shared_weak_count::lock(v32);
        if (v9)
          v10 = v31;
        else
          v10 = 0;
        if (v32)
          std::__shared_weak_count::__release_weak(v32);
        if (v10)
        {
          v11 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10) + 488);
          if (v11 == -1)
          {
            v23 = *(_QWORD *)(v1 + 72);
            v22 = v1 + 72;
            v24 = (*(uint64_t (**)(uint64_t))(v23 + 64))(v22);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 16))(v22, v24);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Infinite idle timeout. Never close idle sockets.", 48);
            *(_BYTE *)(v24 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v24 + 17) = 0;
            goto LABEL_48;
          }
          v13 = *(_QWORD *)(v1 + 192);
          v12 = *(std::__shared_weak_count **)(v1 + 200);
          v14 = v12 == 0;
          if (v12)
          {
            p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
            do
              v16 = __ldxr(p_shared_weak_owners);
            while (__stxr(v16 + 1, p_shared_weak_owners));
            do
              v17 = __ldxr(p_shared_weak_owners);
            while (__stxr(v17 + 1, p_shared_weak_owners));
            if (v11)
            {
              do
                v18 = __ldxr(p_shared_weak_owners);
              while (__stxr(v18 + 1, p_shared_weak_owners));
              goto LABEL_37;
            }
            goto LABEL_34;
          }
          if (v11)
          {
LABEL_37:
            v33 = 0;
            v25 = (uint64_t *)operator new(0x20uLL);
            *v25 = (uint64_t)&off_1E78C41C0;
            v25[1] = v1;
            v25[2] = v13;
            v25[3] = (uint64_t)v12;
            v33 = v25;
            SipTimerContainer::startTimer((_QWORD *)(v1 + 360), (uint64_t)"IdleTimeout", (uint64_t)&v31, 1000 * v11, 0);
            v26 = v33;
            if (v33 == &v31)
            {
              v27 = 4;
              v26 = &v31;
LABEL_41:
              (*(void (**)(void))(*v26 + 8 * v27))();
              if (!v12)
                goto LABEL_48;
              goto LABEL_47;
            }
            if (v33)
            {
              v27 = 5;
              goto LABEL_41;
            }
            goto LABEL_46;
          }
          v12 = 0;
          goto LABEL_44;
        }
      }
      else
      {
        v9 = 0;
      }
      v12 = *(std::__shared_weak_count **)(v1 + 200);
      if (v12)
      {
        v19 = (unint64_t *)&v12->__shared_weak_owners_;
        do
          v20 = __ldxr(v19);
        while (__stxr(v20 + 1, v19));
        do
          v21 = __ldxr(v19);
        while (__stxr(v21 + 1, v19));
LABEL_34:
        v14 = 0;
LABEL_45:
        v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v1 + 72) + 64))(v1 + 72);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v1 + 72) + 16))(v1 + 72, v28);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"no idle timout set.  closing connection.", 40);
        *(_BYTE *)(v28 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v28 + 17) = 0;
        SipTcpConnection::closeIfUnused((SipTcpConnection *)v1);
LABEL_46:
        if (!v14)
        {
LABEL_47:
          std::__shared_weak_count::__release_weak(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
LABEL_48:
        if (v9)
        {
          v29 = (unint64_t *)&v9->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
            std::__shared_weak_count::__release_weak(v9);
          }
        }
        goto LABEL_5;
      }
LABEL_44:
      v14 = 1;
      goto LABEL_45;
    }
  }
}

void sub_1BEEFAF4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *a13)
{
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;
  char *v16;
  char *v18;
  uint64_t v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v18 = a13;
  if (a13 == v16)
  {
    v19 = 4;
    v18 = &a10;
  }
  else
  {
    if (!a13)
      goto LABEL_6;
    v19 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v18 + 8 * v19))();
LABEL_6:
  if (v15)
  {
    std::__shared_weak_count::__release_weak(v15);
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v22 = (unint64_t *)&v13->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipTcpConnection::transactionTimedOut(SipTcpConnection *this)
{
  char *v1;
  uint64_t v2;
  uint64_t result;

  v1 = (char *)this + 72;
  v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v1 + 16))(v1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Transaction timed out when using this connection.", 49);
  *(_BYTE *)(v2 + 17) = 0;
  result = (*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  v1[444] = 1;
  return result;
}

void SipTcpConnection::closeIfUnused(SipTcpConnection *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  int v10;
  char v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v27[72];
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  if (*((_QWORD *)this + 42))
    return;
  v3 = *((_QWORD *)this + 24);
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  v34 = v3;
  if (!v2 || (v4 = std::__shared_weak_count::lock(v2), (v35 = v4) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v5 = v4;
  v32 = 0;
  v33 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v6)
  {
    v33 = std::__shared_weak_count::lock(v6);
    if (v33)
    {
      v7 = *((_QWORD *)this + 36);
      v32 = v7;
      if (v7)
      {
        v30 = v3;
        v31 = v5;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v7 + 64))(v7, &v30);
        v11 = v10;
        v12 = v31;
        if (!v31)
          goto LABEL_14;
        v13 = (unint64_t *)&v31->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
          if ((v11 & 1) != 0)
            goto LABEL_15;
        }
        else
        {
LABEL_14:
          if (v10)
          {
LABEL_15:
            v15 = v32;
            v28 = v34;
            v29 = v35;
            if (v35)
            {
              v16 = (unint64_t *)&v35->__shared_owners_;
              do
                v17 = __ldxr(v16);
              while (__stxr(v17 + 1, v16));
            }
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v15 + 56))(v15, &v28);
            v18 = v29;
            if (v29)
            {
              v19 = (unint64_t *)&v29->__shared_owners_;
              do
                v20 = __ldaxr(v19);
              while (__stlxr(v20 - 1, v19));
              if (!v20)
              {
                ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
                std::__shared_weak_count::__release_weak(v18);
              }
            }
            goto LABEL_25;
          }
        }
      }
    }
  }
  SipTcpConnection::shutdown(this, 1, (uint64_t)v27);
  ImsResult::~ImsResult((ImsResult *)v27);
LABEL_25:
  v21 = v33;
  if (v33)
  {
    v22 = (unint64_t *)&v33->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v24 = v35;
  if (v35)
  {
    v25 = (unint64_t *)&v35->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BEEFB290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 48);
  _Unwind_Resume(a1);
}

BOOL SipTcpConnection::crlfKeepAliveAllowed(SipTcpConnection *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  uint64_t (*v8)(uint64_t);
  _DWORD *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  if (!*((_DWORD *)this + 131))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      v21 = v3;
      if (v3)
      {
        v4 = v3;
        v5 = *((_QWORD *)this + 36);
        v20 = v5;
        if (!v5)
          goto LABEL_24;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 32))(&v16);
        v18 = 0;
        if (v17)
        {
          v6 = std::__shared_weak_count::lock(v17);
          v19 = v6;
          if (v6)
          {
            v7 = v16;
            v18 = v16;
          }
          else
          {
            v7 = 0;
          }
          if (v17)
            std::__shared_weak_count::__release_weak(v17);
          if (v7)
          {
            v8 = *(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16);
            if (*((_BYTE *)this + 508))
              v9 = (_DWORD *)(v8(v7) + 444);
            else
              v9 = (_DWORD *)(v8(v7) + 448);
            *((_DWORD *)this + 131) = *v9;
            v10 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7) + 452);
            if (v10 > *((_DWORD *)this + 131))
              v10 = 0;
            *((_DWORD *)this + 130) = v10;
          }
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v12 = __ldaxr(p_shared_owners);
            while (__stlxr(v12 - 1, p_shared_owners));
            if (!v12)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        v4 = v21;
        if (v21)
        {
LABEL_24:
          v13 = (unint64_t *)&v4->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
    if (!*((_DWORD *)this + 131))
      return 0;
  }
  if ((SipTcpConnection::isLazuliConnection(this) & 1) != 0)
    return 1;
  return *((_BYTE *)this + 508) != 0;
}

void sub_1BEEFB460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::isOnWiFi(SipTcpConnection *this)
{
  BOOL isCampedOnWifi;
  SipStack *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  SipStack *v7;
  std::__shared_weak_count *v8;

  v7 = 0;
  v8 = 0;
  SipTcpConnection::stack((SipTcpConnection *)&v7, (uint64_t)this);
  v2 = v7;
  if (v7)
    isCampedOnWifi = SipStack::isCampedOnWifi(v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return (v2 != 0) & isCampedOnWifi;
}

void sub_1BEEFB518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTcpConnection::stopCrlfKeepAlive(SipTcpConnection *this)
{
  _QWORD *v2;
  char *v3;
  uint64_t v4;
  uint64_t v5;

  if (SipTcpConnection::crlfKeepAliveAllowed(this))
  {
    {
    }
    *((_QWORD *)this + 66) = 0;
    if (*((_QWORD *)this + 67))
    {
      v2 = (_QWORD *)((char *)this + 536);
      v4 = *((_QWORD *)this + 9);
      v3 = (char *)this + 72;
      v5 = (*(uint64_t (**)(char *))(v4 + 64))(v3);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Releasing WoW assertion", 23);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v2);
    }
  }
}

void SipTcpConnection::updateCrlfKeepAliveInterval(SipTcpConnection *this, int a2, int a3)
{
  char *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*((_DWORD *)this + 130) == a2 && *((_DWORD *)this + 131) == a3)
  {
    v6 = (char *)this + 72;
    v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"CRLF-KeepAlive interval already at [", 36);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    v8 = *(_QWORD **)(v7 + 8);
    v13 = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v13, 1);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    v9 = *(_QWORD **)(v7 + 8);
    v14 = 93;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v14, 1);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
  }
  else
  {
    SipTcpConnection::stopCrlfKeepAlive(this);
    v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Updating CRLF-KeepAlive interval to [", 37);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    v11 = *(_QWORD **)(v10 + 8);
    v15 = 44;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v15, 1);
    *(_BYTE *)(v10 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v10 + 17) = 0;
    v12 = *(_QWORD **)(v10 + 8);
    v16 = 93;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)&v16, 1);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    *((_DWORD *)this + 130) = a2;
    *((_DWORD *)this + 131) = a3;
    if (SipTcpConnection::crlfKeepAliveAllowed(this))
      SipTcpConnection::startCrlfKeepAlive((std::__shared_weak_count **)this);
  }
}

void SipTcpConnection::shutdown(SipTcpConnection *this@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  BOOL v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  void (**v10)(ImsResult *__hidden);
  uint64_t v11;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  unint64_t *p_shared_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  uint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  int v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  void (**v47)(ImsResult *__hidden);
  uint64_t *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[24];
  _BYTE *v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 504))
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 0;
    return;
  }
  if (!*((_BYTE *)this + 505))
  {
    v13 = (char *)this + 72;
    v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v14);
    v15 = *(_QWORD **)(v14 + 8);
    if ((a2 & 1) != 0)
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"We don't shutdown incoming connection. Mark it for reset on delete", 66);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)this + 506) = 1;
    }
    else
    {
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)"We don't shutdown incoming connection. And we don't reset on delete", 67);
      *(_BYTE *)(v14 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    *(_BYTE *)(v14 + 17) = 0;
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741834;
    return;
  }
  v57 = 0;
  v55 = 0u;
  v56 = 0u;
  v54 = 0u;
  v53 = 0u;
  (*(void (**)(__int128 *__return_ptr))(**((_QWORD **)this + 34) + 64))(&v53);
  v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v5);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Connection shutdown attempted. Result = ", 40);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(__int128 *, uint64_t))(v53 + 16))(&v53, v5);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  v50 = 0u;
  v51 = 0u;
  v52 = 0u;
  v47 = &off_1E78B7238;
  v48 = &_bambiDomain;
  v49 = 1073741834;
  v7 = *((uint64_t **)&v53 + 1) != &_bambiDomain || (_DWORD)v54 != 1073741834;
  *((_BYTE *)this + 504) = v7;
  ImsResult::~ImsResult((ImsResult *)&v47);
  v47 = 0;
  v48 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    v48 = (uint64_t *)v9;
    if (v9)
    {
      v10 = (void (**)(ImsResult *__hidden))*((_QWORD *)this + 36);
      v47 = v10;
      if (v10)
      {
        (*((void (**)(uint64_t *__return_ptr))*v10 + 4))(&v43);
        v45 = 0;
        v46 = 0;
        if (!v44)
          goto LABEL_50;
        v46 = std::__shared_weak_count::lock(v44);
        if (v46)
        {
          v11 = v43;
          v45 = v43;
        }
        else
        {
          v11 = 0;
        }
        if (v44)
          std::__shared_weak_count::__release_weak(v44);
        if (!v11 || !*((_BYTE *)this + 504))
          goto LABEL_50;
        v16 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 16))(v11) + 492);
        v18 = *((_QWORD *)this + 24);
        v17 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
        if (v17)
        {
          p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
          do
            v20 = __ldxr(p_shared_weak_owners);
          while (__stxr(v20 + 1, p_shared_weak_owners));
          do
            v21 = __ldxr(p_shared_weak_owners);
          while (__stxr(v21 + 1, p_shared_weak_owners));
          do
            v22 = __ldxr(p_shared_weak_owners);
          while (__stxr(v22 + 1, p_shared_weak_owners));
        }
        v59 = 0;
        v23 = operator new(0x20uLL);
        *v23 = &off_1E78C42C0;
        v23[1] = this;
        v23[2] = v18;
        v23[3] = v17;
        v59 = v23;
        SipTimerContainer::startTimer((_QWORD *)this + 45, (uint64_t)"ShutdownWait", (uint64_t)v58, 1000 * v16, 0);
        v24 = v59;
        if (v59 == v58)
        {
          v25 = 4;
          v24 = v58;
        }
        else
        {
          if (!v59)
            goto LABEL_36;
          v25 = 5;
        }
        (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_36:
        v26 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
        if (!v26 || (v27 = *((_QWORD *)this + 24), (v28 = std::__shared_weak_count::lock(v26)) == 0))
          std::__throw_bad_weak_ptr[abi:ne180100]();
        v41 = v27;
        v42 = v28;
        v43 = 0;
        v44 = 0;
        SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 224, &v41);
        v29 = v42;
        if (v42)
        {
          p_shared_owners = (unint64_t *)&v42->__shared_owners_;
          do
            v31 = __ldaxr(p_shared_owners);
          while (__stlxr(v31 - 1, p_shared_owners));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        v32 = v44;
        if (v44)
        {
          v33 = &v44->__shared_owners_;
          do
            v34 = __ldaxr((unint64_t *)v33);
          while (__stlxr(v34 - 1, (unint64_t *)v33));
          if (!v34)
          {
            ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
            std::__shared_weak_count::__release_weak(v32);
          }
        }
        if (v17)
        {
          std::__shared_weak_count::__release_weak(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
LABEL_50:
        v35 = v46;
        if (v46)
        {
          v36 = (unint64_t *)&v46->__shared_owners_;
          do
            v37 = __ldaxr(v36);
          while (__stlxr(v37 - 1, v36));
          if (!v37)
          {
            ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
            std::__shared_weak_count::__release_weak(v35);
          }
        }
        v9 = (std::__shared_weak_count *)v48;
      }
    }
  }
  else
  {
    v9 = 0;
  }
  v38 = *((_BYTE *)this + 504) == 0;
  *(_QWORD *)(a3 + 56) = 0;
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)a3 = &off_1E78B7238;
  *(_QWORD *)(a3 + 8) = &_bambiDomain;
  *(_DWORD *)(a3 + 16) = v38 << 30;
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  *(_QWORD *)(a3 + 32) = 0;
  if (v9)
  {
    v39 = (unint64_t *)&v9->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v53);
}

void sub_1BEEFBCE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;
  uint64_t v12;
  uint64_t v13;
  va_list va3;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  va_list va4;

  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  va_copy(va3, va2);
  v10 = va_arg(va3, _QWORD);
  v12 = va_arg(va3, _QWORD);
  va_copy(va4, va3);
  v13 = va_arg(va4, _QWORD);
  v15 = va_arg(va4, _QWORD);
  v16 = va_arg(va4, _QWORD);
  v17 = va_arg(va4, _QWORD);
  v18 = va_arg(va4, _QWORD);
  v19 = va_arg(va4, _QWORD);
  v20 = va_arg(va4, _QWORD);
  v21 = va_arg(va4, _QWORD);
  v22 = va_arg(va4, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va3);
  ImsResult::~ImsResult((ImsResult *)va4);
  _Unwind_Resume(a1);
}

void SipTypedTerminationLock<SipLockable>::set(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;

  v2 = a2[1];
  v8 = *a2;
  v9 = (std::__shared_weak_count *)v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  SipTypedTerminationLock<SipLockable>::set(a1, &v8, (std::string *)(a1 + 8));
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEEFBE1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::handleTimer(SipTcpConnection *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  const char *v17;
  std::string *v18;
  const char *v19;
  std::string __p;
  uint64_t v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  _OWORD v26[3];

  v3 = (std::__shared_weak_count *)*((_QWORD *)a1 + 25);
  if (!v3 || (v5 = *((_QWORD *)a1 + 24), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v26, 0, sizeof(v26));
  v24 = v5;
  v25 = v6;
  v22 = 0;
  v23 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleTimer");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v26, &v24, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v25;
  if (v25)
  {
    p_shared_owners = (unint64_t *)&v25->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v23;
  if (v23)
  {
    v11 = (unint64_t *)&v23->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (*(uint64_t (**)(_QWORD *))(*((_QWORD *)a1 + 9) + 64))((_QWORD *)a1 + 9);
  (*(void (**)(_QWORD *, uint64_t))(*((_QWORD *)a1 + 9) + 16))((_QWORD *)a1 + 9, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipTcpConnection::handleTimer", 29);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  v14 = a2[23];
  v15 = *((_QWORD *)a2 + 1);
  if ((v14 & 0x80u) == 0)
    v16 = a2[23];
  else
    v16 = *((_QWORD *)a2 + 1);
  if (v16 != 16)
  {
    if (v16 != 12)
    {
      if (v16 != 11)
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
      if ((v14 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, "IdleTimeout", v15))
          return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
      }
      else if (a2[23])
      {
        v17 = "IdleTimeout";
        while (*a2 == *(unsigned __int8 *)v17)
        {
          ++a2;
          ++v17;
          if (!--v14)
            goto LABEL_40;
        }
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
      }
LABEL_40:
      SipTcpConnection::closeIfUnused(a1);
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
    }
    if ((v14 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "ShutdownWait", v15))
        return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
    }
    else if (a2[23])
    {
      v19 = "ShutdownWait";
      while (*a2 == *(unsigned __int8 *)v19)
      {
        ++a2;
        ++v19;
        if (!--v14)
          goto LABEL_44;
      }
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
    }
LABEL_44:
    SipTcpConnection::resetSocket(a1);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
  }
  if ((v14 & 0x80) != 0)
  {
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
LABEL_42:
    (*(void (**)(SipTcpConnection *))(*(_QWORD *)a1 + 192))(a1);
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
  }
  if (!a2[23])
    goto LABEL_42;
  while (*a2 == v18->__r_.__value_.__s.__data_[0])
  {
    ++a2;
    v18 = (std::string *)((char *)v18 + 1);
    if (!--v14)
      goto LABEL_42;
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v26);
}

void sub_1BEEFC0C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, char a20)
{
  if (a15 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::resetSocket(SipTcpConnection *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v2 = *((_QWORD *)this + 34);
  if (v2 && ((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2) & 1) == 0)
    (*(void (**)(_QWORD))(**((_QWORD **)this + 34) + 80))(*((_QWORD *)this + 34));
  v7 = 0;
  v8 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 224, &v7);
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return SipTcpConnection::removeFromTransport(this);
}

void sub_1BEEFC1A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::removeFromTransport(SipTcpConnection *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *size;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string __p;
  uint64_t v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  _OWORD v41[3];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2 || (v3 = *((_QWORD *)this + 24), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v41, 0, sizeof(v41));
  v39 = v3;
  v40 = v4;
  v37 = 0;
  v38 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "removeFromTransport");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v41, &v39, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v40;
  if (v40)
  {
    p_shared_owners = (unint64_t *)&v40->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v38;
  if (v38)
  {
    v9 = (unint64_t *)&v38->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (char *)this + 72;
  v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SipTcpConnection::removeFromTransport", 37);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  v13 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  v37 = *((_QWORD *)this + 24);
  if (!v13 || (v38 = std::__shared_weak_count::lock(v13)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = 0;
  v35 = 0;
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v14 || (v35 = std::__shared_weak_count::lock(v14)) == 0 || (v34 = *((_QWORD *)this + 36)) == 0)
  {
    v19 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"already removed from transport", 30);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    goto LABEL_32;
  }
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  v16 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 168);
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_24;
  v17 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
    if (v16)
    {
LABEL_25:
      if (*((_BYTE *)this + 507))
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v34 + 80))(&__p);
        BambiClient::releaseKeepAliveAssertion(v16, (uint64_t)&__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SipTcpConnection::crlfKeepAliveAllowed(this))
      {
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v34 + 80))(&__p);
        BambiClient::removeAssertions(v16, (uint64_t)&__p, *((_DWORD *)this + 88));
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
LABEL_24:
    if (v16)
      goto LABEL_25;
  }
  SipTimerContainer::cancelAllTimers((SipTcpConnection *)((char *)this + 360));
  v32 = v37;
  v33 = v38;
  if (v38)
  {
    v27 = (unint64_t *)&v38->__shared_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v34 + 56))(v34, &v32);
  v29 = v33;
  if (v33)
  {
    v30 = (unint64_t *)&v33->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
LABEL_32:
  v20 = v35;
  if (v35)
  {
    v21 = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  SipTcpConnection::stopCrlfKeepAlive(this);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 26);
  *((_BYTE *)this + 507) = 0;
  v23 = v38;
  if (v38)
  {
    v24 = (unint64_t *)&v38->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v41);
}

void sub_1BEEFC578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v22 - 80);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::decodeMessage(uint64_t a1, const std::string::value_type *a2)
{
  const std::string::value_type *v2;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::string::pointer v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unsigned __int8 v32;
  std::string::pointer v33;

  v2 = a2;
  v33 = 0;
  v32 = 0;
  if ((SipMessageDecoder::decode(*(std::string **)(a1 + 304), a2, &v33, &v32) & 1) == 0)
  {
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 56))(a1 + 72);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"decode failure on TCP connection", 32);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    SipTcpConnection::removeFromTransport((SipTcpConnection *)a1);
    return 0;
  }
  if (!v33)
    return 0;
  v30 = 0;
  v31 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 296);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    v31 = v5;
    if (v5)
    {
      v6 = *(_QWORD *)(a1 + 288);
      v30 = v6;
      if (v6)
      {
        v7 = v33;
        v8 = *((_QWORD *)v2 + 1);
        if (v2[23] >= 0)
        {
          v9 = *((unsigned __int8 *)v2 + 23);
        }
        else
        {
          v2 = *(const std::string::value_type **)v2;
          v9 = v8;
        }
        v10 = v32;
        (*(void (**)(uint64_t *__return_ptr))(**(_QWORD **)(a1 + 272) + 104))(&v28);
        v11 = *(std::__shared_weak_count **)(a1 + 200);
        v26 = *(_QWORD *)(a1 + 192);
        if (v11)
        {
          v27 = std::__shared_weak_count::lock(v11);
          if (v27)
          {
            (*(void (**)(uint64_t, std::string::pointer, const std::string::value_type *, uint64_t, BOOL, uint64_t *, uint64_t *))(*(_QWORD *)v6 + 48))(v6, v7, v2, v9, v10 != 0, &v28, &v26);
            v12 = v27;
            if (v27)
            {
              p_shared_owners = (unint64_t *)&v27->__shared_owners_;
              do
                v14 = __ldaxr(p_shared_owners);
              while (__stlxr(v14 - 1, p_shared_owners));
              if (!v14)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
            v15 = v29;
            if (v29)
            {
              v16 = (unint64_t *)&v29->__shared_owners_;
              do
                v17 = __ldaxr(v16);
              while (__stlxr(v17 - 1, v16));
              if (!v17)
              {
                ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
                std::__shared_weak_count::__release_weak(v15);
              }
            }
            v18 = 1;
            v5 = v31;
            if (!v31)
              return v18;
LABEL_30:
            v24 = (unint64_t *)&v5->__shared_owners_;
            do
              v25 = __ldaxr(v24);
            while (__stlxr(v25 - 1, v24));
            if (!v25)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
            return v18;
          }
        }
        else
        {
          v27 = 0;
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
    }
  }
  else
  {
    v5 = 0;
  }
  v22 = *(_QWORD *)(a1 + 72);
  v21 = a1 + 72;
  v23 = (*(uint64_t (**)(uint64_t))(v22 + 64))(v21);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v23);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"I was detached from my transport. Dropping incoming message:", 60);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v23 + 17) = 0;
  (*(void (**)(std::string::pointer, uint64_t))(*(_QWORD *)v33 + 16))(v33, v23);
  if (v33)
    (*(void (**)(std::string::pointer))(*(_QWORD *)v33 + 8))(v33);
  v18 = 0;
  if (v5)
    goto LABEL_30;
  return v18;
}

void sub_1BEEFC8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::processDataFromSocket(uint64_t a1, void *a2, size_t a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  std::string::size_type size;
  std::string *p_p;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  void *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  void *v35;
  std::__shared_weak_count *v36;
  char v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string __p;
  uint64_t v41;
  std::__shared_weak_count *v42;
  _OWORD v43[3];

  v4 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v4 || (v7 = *(_QWORD *)(a1 + 192), (v8 = std::__shared_weak_count::lock(v4)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v43, 0, sizeof(v43));
  v41 = v7;
  v42 = v8;
  v35 = 0;
  v36 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "processDataFromSocket");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v43, &v41, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v9 = v42;
  if (v42)
  {
    p_shared_owners = (unint64_t *)&v42->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = a1 + 72;
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 72) + 64))(a1 + 72);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 72) + 16))(a1 + 72, v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"SipTcpConnection::processDataFromSocket", 39);
  *(_BYTE *)(v13 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v13 + 17) = 0;
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100](&__p, a2, a3);
  size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = __p.__r_.__value_.__l.__size_;
  if (size == 2)
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if (LOWORD(p_p->__r_.__value_.__l.__data_) == 2573)
    {
      v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 64))(a1 + 72);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 16))(a1 + 72, v26);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"Received CRLF pong", 18);
      *(_BYTE *)(v26 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v26 + 17) = 0;
      *(_BYTE *)(a1 + 507) = 0;
      {
      }
      SipTcpConnection::startCrlfKeepAlive((std::__shared_weak_count **)a1);
      v38 = 0;
      v39 = 0;
      v27 = *(std::__shared_weak_count **)(a1 + 296);
      if (v27)
      {
        v39 = std::__shared_weak_count::lock(v27);
        if (v39)
        {
          v38 = *(_QWORD *)(a1 + 288);
          if (v38)
          {
            IPTelephonyManager::getInstance((uint64_t *)&v35);
            v28 = v36;
            v29 = *((_QWORD *)v35 + 21);
            if (v36)
            {
              v30 = (unint64_t *)&v36->__shared_owners_;
              do
                v31 = __ldaxr(v30);
              while (__stlxr(v31 - 1, v30));
              if (!v31)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            if (v29)
            {
              (*(void (**)(void **__return_ptr))(*(_QWORD *)v38 + 80))(&v35);
              BambiClient::releaseKeepAliveAssertion(v29, (uint64_t)&v35);
              if (v37 < 0)
                operator delete(v35);
            }
          }
        }
      }
      v32 = v39;
      if (v39)
      {
        v33 = (unint64_t *)&v39->__shared_owners_;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
        if (!v34)
        {
          ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
          std::__shared_weak_count::__release_weak(v32);
        }
      }
    }
  }
  v16 = *(_QWORD *)(a1 + 304);
  if (!*(_QWORD *)(v16 + 24))
  {
    if (*(char *)(v16 + 23) < 0)
    {
      if (*(_QWORD *)(v16 + 8))
        goto LABEL_17;
    }
    else if (*(_BYTE *)(v16 + 23))
    {
      goto LABEL_17;
    }
    ims::chomp(&__p, "\r\n", 1);
  }
LABEL_17:
  v35 = 0;
  v36 = 0;
  v17 = *(std::__shared_weak_count **)(a1 + 296);
  if (v17)
  {
    v18 = std::__shared_weak_count::lock(v17);
    v36 = v18;
    if (v18)
    {
      v19 = *(void **)(a1 + 288);
      v35 = v19;
      goto LABEL_25;
    }
  }
  else
  {
    v18 = 0;
  }
  v19 = 0;
LABEL_25:
  v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    v20 = __p.__r_.__value_.__l.__size_;
  if (v20)
  {
    v21 = SipTcpConnection::decodeMessage(a1, (const std::string::value_type *)&__p);
    v22 = v19 ? v21 : 0;
    if (v22 == 1)
    {
      while ((SipTcpConnection::decodeMessage(a1, (const std::string::value_type *)&ims::kEmptyString) & 1) != 0)
        ;
    }
  }
  if (v18)
  {
    v23 = (unint64_t *)&v18->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v43);
}

void sub_1BEEFCD34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,char a25)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  if (a22 < 0)
    operator delete(a17);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTcpConnection::processDataFromSocket(uint64_t a1, void *a2, size_t a3)
{
  return SipTcpConnection::processDataFromSocket(a1 - 176, a2, a3);
}

uint64_t SipTcpConnection::handleSocketError(SipTcpConnection *this, const ImsResult *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _OWORD v37[3];

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v3 || (v5 = *((_QWORD *)this + 24), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v37, 0, sizeof(v37));
  v35 = v5;
  v36 = v6;
  v33 = 0;
  v34 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleSocketError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v37, &v35, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v34;
  if (v34)
  {
    v11 = (unint64_t *)&v34->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (char *)this + 72;
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SipTcpConnection::handleSocketError", 35);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (!*((_BYTE *)this + 504))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (v19)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v19);
      if (__p.__r_.__value_.__l.__size_)
      {
        v20 = *((_QWORD *)this + 36);
        __p.__r_.__value_.__r.__words[0] = v20;
        if (v20)
        {
          v21 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
          v28 = *((_QWORD *)this + 24);
          if (v21)
          {
            v29 = std::__shared_weak_count::lock(v21);
            if (v29)
            {
              (*(void (**)(std::string::size_type, uint64_t *, const ImsResult *))(*(_QWORD *)v20 + 40))(v20, &v28, a2);
              v22 = v29;
              if (v29)
              {
                v23 = (unint64_t *)&v29->__shared_owners_;
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              goto LABEL_30;
            }
          }
          else
          {
            v29 = 0;
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
      }
    }
LABEL_30:
    v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 56))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"handling socket error: ", 23);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v25);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    SipTcpConnection::removeAllTransactions(this, a2);
    SipTcpConnection::removeFromTransport(this);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
    v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v26);
    while (__stlxr(v18 - 1, v26));
    goto LABEL_33;
  }
  v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Shutting down, ignore socket error: ", 36);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v15);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v30 = 0;
  v31 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 224, &v30);
  size = v31;
  if (!v31)
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
  v17 = (unint64_t *)&v31->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
LABEL_33:
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
}

void sub_1BEEFD138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v22 - 80);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTcpConnection::handleSocketError(SipTcpConnection *this, const ImsResult *a2)
{
  return SipTcpConnection::handleSocketError((SipTcpConnection *)((char *)this - 176), a2);
}

uint64_t SipTcpConnection::handleConnectError(SipTcpConnection *this, const ImsResult *a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *size;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  _OWORD v37[3];

  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v3 || (v5 = *((_QWORD *)this + 24), (v6 = std::__shared_weak_count::lock(v3)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v37, 0, sizeof(v37));
  v35 = v5;
  v36 = v6;
  v33 = 0;
  v34 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "handleConnectError");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v37, &v35, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v7 = v36;
  if (v36)
  {
    p_shared_owners = (unint64_t *)&v36->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = v34;
  if (v34)
  {
    v11 = (unint64_t *)&v34->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v13 = (char *)this + 72;
  v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SipTcpConnection::handleConnectError", 36);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (!*((_BYTE *)this + 504))
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    v19 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (v19)
    {
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v19);
      if (__p.__r_.__value_.__l.__size_)
      {
        v20 = *((_QWORD *)this + 36);
        __p.__r_.__value_.__r.__words[0] = v20;
        if (v20)
        {
          v21 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
          v28 = *((_QWORD *)this + 24);
          if (v21)
          {
            v29 = std::__shared_weak_count::lock(v21);
            if (v29)
            {
              (*(void (**)(std::string::size_type, uint64_t *, const ImsResult *))(*(_QWORD *)v20 + 40))(v20, &v28, a2);
              v22 = v29;
              if (v29)
              {
                v23 = (unint64_t *)&v29->__shared_owners_;
                do
                  v24 = __ldaxr(v23);
                while (__stlxr(v24 - 1, v23));
                if (!v24)
                {
                  ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                  std::__shared_weak_count::__release_weak(v22);
                }
              }
              goto LABEL_30;
            }
          }
          else
          {
            v29 = 0;
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
      }
    }
LABEL_30:
    v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 56))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v25);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"handling connect error: ", 24);
    *(_BYTE *)(v25 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v25);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v25 + 17) = 0;
    SipTcpConnection::removeAllTransactions(this, a2);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
    v26 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v18 = __ldaxr(v26);
    while (__stlxr(v18 - 1, v26));
    goto LABEL_33;
  }
  v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v13 + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))((char *)this + 72, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Shutting down, ignore connect error: ", 37);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v15);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  v30 = 0;
  v31 = 0;
  SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 224, &v30);
  size = v31;
  if (!v31)
    return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
  v17 = (unint64_t *)&v31->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
LABEL_33:
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
    std::__shared_weak_count::__release_weak(size);
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v37);
}

void sub_1BEEFD50C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v22 - 80);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTcpConnection::handleConnectError(SipTcpConnection *this, const ImsResult *a2)
{
  return SipTcpConnection::handleConnectError((SipTcpConnection *)((char *)this - 176), a2);
}

uint64_t SipTcpConnection::connectionClosedByPeer(SipTcpConnection *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::string::size_type v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *size;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::string __p;
  uint64_t v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  _OWORD v39[3];

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (!v2 || (v3 = *((_QWORD *)this + 24), (v4 = std::__shared_weak_count::lock(v2)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v39, 0, sizeof(v39));
  v37 = v3;
  v38 = v4;
  v35 = 0;
  v36 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "connectionClosedByPeer");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v39, &v37, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v5 = v38;
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = v36;
  if (v36)
  {
    v9 = (unint64_t *)&v36->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (char *)this + 72;
  v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"SipTcpConnection::connectionClosedByPeer", 40);
  *(_BYTE *)(v12 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  v13 = (_QWORD *)((char *)this + 328);
  while (1)
  {
    v13 = (_QWORD *)*v13;
    if (!v13)
      break;
    v14 = v13[2];
    v15 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"report connection error to ", 27);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v14 + 16))(&__p, v14);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v15 + 40))(v15, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
  }
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v16 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v16)
  {
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v16);
    if (__p.__r_.__value_.__l.__size_)
    {
      v17 = *((_QWORD *)this + 36);
      __p.__r_.__value_.__r.__words[0] = v17;
      if (v17)
      {
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v17 + 32))(&v32);
        v35 = 0;
        if (v33)
        {
          v18 = std::__shared_weak_count::lock(v33);
          v36 = v18;
          if (v18)
          {
            v19 = v32;
            v35 = v32;
          }
          else
          {
            v19 = 0;
          }
          if (v33)
            std::__shared_weak_count::__release_weak(v33);
          if (!*((_BYTE *)this + 504)
            && v19
            && *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19) + 573))
          {
            (*(void (**)(_QWORD))(**((_QWORD **)this + 34) + 80))(*((_QWORD *)this + 34));
          }
          if (v18)
          {
            v20 = (unint64_t *)&v18->__shared_owners_;
            do
              v21 = __ldaxr(v20);
            while (__stlxr(v21 - 1, v20));
            if (!v21)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
      }
    }
  }
  SipTcpConnection::removeFromTransport(this);
  if (*((_BYTE *)this + 504))
  {
    v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))((char *)this + 72, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Connection closed by both sides. ", 33);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    v30 = 0;
    v31 = 0;
    SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 224, &v30);
    v23 = v31;
    if (v31)
    {
      v24 = (unint64_t *)&v31->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v27 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v39);
}

void sub_1BEEFD978(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t `non-virtual thunk to'SipTcpConnection::connectionClosedByPeer(SipTcpConnection *this)
{
  return SipTcpConnection::connectionClosedByPeer((SipTcpConnection *)((char *)this - 176));
}

uint64_t SipTcpConnection::connectionResetByPeer(SipTcpConnection *this)
{
  return (*(uint64_t (**)(SipTcpConnection *))(*(_QWORD *)this + 160))(this);
}

uint64_t `non-virtual thunk to'SipTcpConnection::connectionResetByPeer(SipTcpConnection *this)
{
  return (*(uint64_t (**)(char *))(*((_QWORD *)this - 22) + 160))((char *)this - 176);
}

void SipTcpConnection::sendData(SipTcpConnection *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  int v6;
  const ImsResult *v7;
  void (**v8)(ImsResult *__hidden);
  uint64_t *v9;
  int v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;

  v5 = *((_QWORD *)this + 34);
  if (!v5)
  {
    v11 = 0u;
    v12 = 0u;
    v13 = 0u;
    v8 = &off_1E78B7238;
    v9 = &_bambiDomain;
    v10 = 1073741827;
    v7 = (const ImsResult *)ImsResult::operator<<<char [33]>((uint64_t)&v8, "send: connection not initialized");
    ImsResult::ImsResult((ImsResult *)a2, v7);
    goto LABEL_6;
  }
  *(_QWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  (*(void (**)(_QWORD *__return_ptr))(*(_QWORD *)v5 + 32))((_QWORD *)a2);
  v11 = 0u;
  v12 = 0u;
  v13 = 0u;
  v8 = &off_1E78B7238;
  v9 = &_bambiDomain;
  v10 = 1073741840;
  if (*(uint64_t **)(a2 + 8) != &_bambiDomain)
  {
LABEL_6:
    ImsResult::~ImsResult((ImsResult *)&v8);
    return;
  }
  v6 = *(_DWORD *)(a2 + 16);
  ImsResult::~ImsResult((ImsResult *)&v8);
  if (v6 == 1073741840)
    SipTcpConnection::removeFromTransport(this);
}

void sub_1BEEFDB34(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void SipTcpConnection::initializeOutgoing(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, ImsResult *a7@<X8>)
{
  const ImsResult *v8;
  std::__shared_weak_count *v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string::size_type v18;
  uint64_t data_low;
  uint64_t v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  std::string::size_type v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  NSObject *v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  unint64_t *p_shared_owners;
  unint64_t v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  int v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t isLazuliConnection;
  uint64_t v64;
  NSObject *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  _QWORD v73[2];
  std::string v74;
  std::string v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::string __p;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  dispatch_object_t v88;
  std::__shared_weak_count *v89;

  *(_BYTE *)(a1 + 505) = 1;
  if (*(_QWORD *)(a1 + 272))
  {
    v81 = 0u;
    v82 = 0u;
    v83 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741825;
    v8 = (const ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&__p, "connection already initialized");
    ImsResult::ImsResult(a7, v8);
    ImsResult::~ImsResult((ImsResult *)&__p);
    return;
  }
  v78 = 0;
  v79 = 0;
  v14 = *(std::__shared_weak_count **)(a1 + 296);
  if (v14
    && (v79 = std::__shared_weak_count::lock(v14)) != 0
    && (v15 = *(_QWORD *)(a1 + 288), (v78 = v15) != 0)
    && ((*(void (**)(std::string *__return_ptr))(*(_QWORD *)v15 + 32))(&v75),
        __p.__r_.__value_.__r.__words[0] = 0,
        v75.__r_.__value_.__l.__size_))
  {
    v16 = a3;
    v17 = std::__shared_weak_count::lock((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
    if (v17)
    {
      v18 = v75.__r_.__value_.__r.__words[0];
      __p.__r_.__value_.__r.__words[0] = v75.__r_.__value_.__r.__words[0];
    }
    else
    {
      v18 = 0;
    }
    if (v75.__r_.__value_.__l.__size_)
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v75.__r_.__value_.__l.__size_);
    if (v18)
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)v18 + 200))(&v75, v18);
      data_low = LODWORD(v75.__r_.__value_.__l.__data_);
      (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v18 + 16))(v18);
    }
    else
    {
      data_low = 104;
    }
    a3 = v16;
    if (v17)
    {
      p_shared_owners = (unint64_t *)&v17->__shared_owners_;
      do
        v49 = __ldaxr(p_shared_owners);
      while (__stlxr(v49 - 1, p_shared_owners));
      if (!v49)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  else
  {
    data_low = 104;
  }
  v20 = a3;
  SipTcpConnection::networkManager((SipTcpConnection *)&__p, a1);
  v21 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if (!__p.__r_.__value_.__l.__size_)
    goto LABEL_15;
  v22 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v21 + 1) + 16))(*((_QWORD *)&v21 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v21 + 1));
    if (!(_QWORD)v21)
      goto LABEL_46;
  }
  else
  {
LABEL_15:
    if (!(_QWORD)v21)
      goto LABEL_46;
  }
  SipTcpConnection::networkManager((SipTcpConnection *)&v75, a1);
  v24 = *(std::__shared_weak_count **)(a1 + 200);
  if (!v24
    || (v25 = v75.__r_.__value_.__r.__words[0],
        v26 = *(_QWORD *)(a1 + 192),
        (v27 = std::__shared_weak_count::lock(v24)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v28 = v26 + 176;
  if (!v26)
    v28 = 0;
  v76 = v28;
  v77 = v27;
  *(_OWORD *)&v74.__r_.__value_.__l.__data_ = 0uLL;
  (*(void (**)(std::string *__return_ptr, std::string::size_type, uint64_t *, uint64_t, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v25 + 104))(&__p, v25, &v76, a4, a6, data_low, *(unsigned __int8 *)(a1 + 508));
  v29 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  v30 = *(std::__shared_weak_count **)(a1 + 280);
  *(_OWORD *)(a1 + 272) = v29;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v34 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v36 = v77;
  if (v77)
  {
    v37 = (unint64_t *)&v77->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v74.__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(v74.__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v74.__r_.__value_.__l.__size_ + 16))(v74.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v74.__r_.__value_.__l.__size_);
    }
  }
  v41 = (std::__shared_weak_count *)v75.__r_.__value_.__l.__size_;
  if (v75.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v75.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
LABEL_46:
  memset(&v75, 0, sizeof(v75));
  std::string::basic_string[abi:ne180100]<0>(&v75, "67A03811-DB0A-594E-C2AE-8B0517EDF26F");
  memset(&v74, 0, sizeof(v74));
  if (!SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1))
    goto LABEL_96;
  ims::convertBundleIdToUuid(&__p);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v75 = __p;
  if (*(_BYTE *)(a1 + 508))
  {
    v88 = 0;
    v89 = 0;
    v44 = *(std::__shared_weak_count **)(a1 + 296);
    if (v44)
    {
      v89 = std::__shared_weak_count::lock(v44);
      if (v89)
      {
        v45 = *(NSObject **)(a1 + 288);
        v88 = v45;
        if (v45)
        {
          (*((void (**)(uint64_t *__return_ptr))v45->isa + 4))(&v84);
          v86 = 0;
          if (v85)
          {
            v46 = std::__shared_weak_count::lock(v85);
            v87 = v46;
            if (v46)
            {
              v47 = v84;
              v86 = v84;
            }
            else
            {
              v47 = 0;
            }
            if (v85)
              std::__shared_weak_count::__release_weak(v85);
            if (v47)
            {
              v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 16))(v47);
              if (*(char *)(v50 + 487) < 0)
                std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v50 + 464), *(_QWORD *)(v50 + 472));
              else
                __p = *(std::string *)(v50 + 464);
              if (v46)
              {
                v70 = (unint64_t *)&v46->__shared_owners_;
                do
                  v71 = __ldaxr(v70);
                while (__stlxr(v71 - 1, v70));
                if (!v71)
                {
                  ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                  std::__shared_weak_count::__release_weak(v46);
                }
              }
              v53 = 0;
              goto LABEL_79;
            }
            if (v46)
            {
              v51 = (unint64_t *)&v46->__shared_owners_;
              do
                v52 = __ldaxr(v51);
              while (__stlxr(v52 - 1, v51));
              if (!v52)
              {
                ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
                std::__shared_weak_count::__release_weak(v46);
              }
            }
          }
        }
      }
    }
    v53 = 1;
LABEL_79:
    v54 = v89;
    if (v89)
    {
      v55 = (unint64_t *)&v89->__shared_owners_;
      do
        v56 = __ldaxr(v55);
      while (__stlxr(v56 - 1, v55));
      if (!v56)
      {
        ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
        std::__shared_weak_count::__release_weak(v54);
      }
    }
    if (v53)
      memset(&__p, 0, sizeof(__p));
    v74 = __p;
  }
  if (v78)
  {
    IPTelephonyManager::getInstance((uint64_t *)&__p);
    v57 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    v58 = *(_QWORD *)(__p.__r_.__value_.__r.__words[0] + 168);
    if (__p.__r_.__value_.__l.__size_)
    {
      v59 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
        std::__shared_weak_count::__release_weak(v57);
      }
    }
    if (v58)
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v78 + 80))(&__p);
      BambiClient::addAssertions(v58, (uint64_t)&__p, *(_DWORD *)(a1 + 352));
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_96:
  v61 = (uint64_t *)(a1 + 272);
  *((_QWORD *)a7 + 2) = 0;
  *((_QWORD *)a7 + 3) = 0;
  *((_QWORD *)a7 + 7) = 0;
  *((_QWORD *)a7 + 8) = 0;
  *((_QWORD *)a7 + 5) = 0;
  *((_QWORD *)a7 + 6) = 0;
  *(_QWORD *)a7 = &off_1E78B7238;
  *((_QWORD *)a7 + 1) = &_bambiDomain;
  *((_QWORD *)a7 + 4) = 0;
  v62 = *(_QWORD *)(a1 + 272);
  if (v62)
  {
    isLazuliConnection = SipTcpConnection::isLazuliConnection((SipTcpConnection *)a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v62 + 200))(v62, isLazuliConnection);
    v64 = *v61;
    v65 = sImsDispatchQueue;
    if (sImsDispatchQueue)
    {
      v88 = (dispatch_object_t)sImsDispatchQueue;
    }
    else
    {
      v65 = dispatch_queue_create("com.apple.ipTelephony.queue", 0);
      sImsDispatchQueue = (uint64_t)v65;
      v88 = v65;
      if (!v65)
        goto LABEL_102;
    }
    dispatch_retain(v65);
LABEL_102:
    v73[0] = &off_1E78B7BD8;
    v73[1] = 0;
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, dispatch_object_t *, std::string *, _QWORD, _QWORD *, std::string *, char))(*(_QWORD *)v64 + 16))(&__p, v64, a2, v20, a4, &v88, &v75, 0, v73, &v74, a5);
    ImsResult::operator=((uint64_t)a7, (uint64_t)&__p);
    ImsResult::~ImsResult((ImsResult *)&__p);
    ims::CFType::~CFType((ims::CFType *)v73);
    if (v88)
      dispatch_release(v88);
    goto LABEL_104;
  }
  v81 = 0u;
  v82 = 0u;
  v83 = 0u;
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
  LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
  v66 = ImsResult::operator<<<char [51]>((uint64_t)&__p, "Network Manager un-available to create new socket.");
  ImsResult::operator=((uint64_t)a7, v66);
  ImsResult::~ImsResult((ImsResult *)&__p);
LABEL_104:
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)a7 + 1) + 24))(*((_QWORD *)a7 + 1), *((unsigned int *)a7 + 4)))
  {
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100](v61);
  }
  if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v74.__r_.__value_.__l.__data_);
  if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v75.__r_.__value_.__l.__data_);
  v67 = v79;
  if (v79)
  {
    v68 = (unint64_t *)&v79->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
}

void sub_1BEEFE308(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v38 - 112);
  if (a20 < 0)
    operator delete(__p);
  if (a27 < 0)
    operator delete(a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void SipTcpConnection::networkManager(SipTcpConnection *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v17 = 0;
  v18 = 0;
  v3 = *(std::__shared_weak_count **)(a2 + 296);
  if (!v3)
  {
    v5 = 0;
    goto LABEL_8;
  }
  v5 = std::__shared_weak_count::lock(v3);
  v18 = v5;
  if (!v5 || (v6 = *(_QWORD *)(a2 + 288), (v17 = v6) == 0))
  {
LABEL_8:
    *(_QWORD *)this = 0;
    *((_QWORD *)this + 1) = 0;
    if (!v5)
      return;
    goto LABEL_23;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v6 + 32))(&v13);
  v15 = 0;
  v16 = 0;
  if (v14)
  {
    v7 = std::__shared_weak_count::lock(v14);
    v16 = v7;
    if (v7)
    {
      v8 = v13;
      v15 = v13;
    }
    else
    {
      v8 = 0;
    }
    if (v14)
      std::__shared_weak_count::__release_weak(v14);
    if (v8)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 176))(v8);
      if (!v7)
        goto LABEL_22;
      goto LABEL_18;
    }
  }
  else
  {
    v7 = 0;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  if (!v7)
    goto LABEL_22;
LABEL_18:
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v10 = __ldaxr(p_shared_owners);
  while (__stlxr(v10 - 1, p_shared_owners));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
LABEL_22:
  v5 = v18;
  if (!v18)
    return;
LABEL_23:
  v11 = (unint64_t *)&v5->__shared_owners_;
  do
    v12 = __ldaxr(v11);
  while (__stlxr(v12 - 1, v11));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEEFE574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::isLazuliConnection(SipTcpConnection *this)
{
  BOOL v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v7;
  std::__shared_weak_count *v8;

  v7 = 0;
  v8 = 0;
  SipTcpConnection::stack((SipTcpConnection *)&v7, (uint64_t)this);
  v2 = v7;
  if (v7)
    v1 = *(_BYTE *)(v7 + 2657) != 0;
  v3 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return (v2 != 0) & v1;
}

uint64_t ImsResult::operator<<<char [51]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEEFE6AC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

ImsOutStream *SipTcpConnection::printDebugInfo(SipTcpConnection *this, ImsOutStream *a2)
{
  _BYTE *v4;
  _QWORD *i;
  uint64_t v6;
  void *__p[2];
  char v9;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"    ", 4);
  *((_BYTE *)a2 + 17) = 0;
  v4 = (_BYTE *)(*(uint64_t (**)(SipTcpConnection *, ImsOutStream *))(*(_QWORD *)this + 104))(this, a2);
  (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v4[17] = 0;
  if (*((_QWORD *)this + 42))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"      Attached transactions:", 28);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
    for (i = (_QWORD *)*((_QWORD *)this + 41); i; i = (_QWORD *)*i)
    {
      v6 = i[2];
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"      ", 6);
      *((_BYTE *)a2 + 17) = 0;
      (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v6 + 16))(__p, v6);
      (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
      (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *((_BYTE *)a2 + 17) = 0;
      if (v9 < 0)
        operator delete(__p[0]);
    }
  }
  return a2;
}

void sub_1BEEFE818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SipTcpConnection::logPrefix(SipTcpConnection *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 24))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEEFE8A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'SipTcpConnection::logPrefix(SipTcpConnection *this, ImsOutStream *a2)
{
  SipTcpConnection::logPrefix((SipTcpConnection *)((char *)this - 72), a2);
}

ImsOutStream *SipTcpConnection::toStream(SipTcpConnection *this, ImsOutStream *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v4 = *((_QWORD *)this + 34);
  if (!v4)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"(not connected)", 15);
    *((_BYTE *)a2 + 17) = 0;
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_27:
    *((_BYTE *)a2 + 17) = 0;
    return a2;
  }
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v4 + 136))(&v20);
  v6 = v20;
  v5 = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_7;
LABEL_14:
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"unknown", 7);
      *((_BYTE *)a2 + 17) = 0;
      goto LABEL_15;
    }
  }
  if (!v6)
    goto LABEL_14;
LABEL_7:
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 34) + 136))(&v20);
  (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v20 + 40))(v20, a2);
  v9 = v21;
  if (v21)
  {
    v10 = (unint64_t *)&v21->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
LABEL_15:
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" <-> ", 5);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 34) + 104))(&v20);
  v13 = v20;
  v12 = v21;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (v13)
        goto LABEL_20;
      goto LABEL_26;
    }
  }
  if (!v13)
  {
LABEL_26:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"unknown", 7);
    goto LABEL_27;
  }
LABEL_20:
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 34) + 104))(&v20);
  (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v20 + 40))(v20, a2);
  v16 = v21;
  if (v21)
  {
    v17 = (unint64_t *)&v21->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  return a2;
}

void sub_1BEEFEAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipTcpConnection::transportGroup(SipTcpConnection *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v4 || (v5 = std::__shared_weak_count::lock(v4), (v15 = v5) == 0))
  {
    *a2 = 0;
    a2[1] = 0;
    return;
  }
  v6 = v5;
  v7 = *((_QWORD *)this + 36);
  v14 = v7;
  if (v7)
  {
    *a2 = 0;
    a2[1] = 0;
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v7 + 24))(&v12);
    *a2 = 0;
    a2[1] = 0;
    if (v13)
    {
      v8 = std::__shared_weak_count::lock(v13);
      a2[1] = v8;
      if (v8)
      {
        v9 = v12;
        *a2 = v12;
      }
      else
      {
        v9 = 0;
      }
      if (v13)
        std::__shared_weak_count::__release_weak(v13);
      if (v9)
        goto LABEL_14;
    }
    std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)a2);
  }
  *a2 = 0;
  a2[1] = 0;
LABEL_14:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BEEFEBE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTcpConnection::sendPing(SipTcpConnection *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  time_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void *__p;
  std::__shared_weak_count *v27;
  char v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _BYTE v31[24];
  _BYTE *v32;
  uint64_t v33;

  v33 = *MEMORY[0x1E0C80C00];
  if (SipTcpConnection::isLazuliConnection(this))
  {
    if ((SipTcpConnection::isOnWiFi(this) & 1) == 0)
    {
      v21 = time(0);
      if (*((_BYTE *)this + 507) || *((_QWORD *)this + 66) + 540 > v21)
      {
        v23 = *((_QWORD *)this + 9);
        v22 = (char *)this + 72;
        v24 = (*(uint64_t (**)(char *))(v23 + 64))(v22);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v22 + 16))(v22, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"too soon to send another keepalive. skipping.", 45);
        *(_BYTE *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v24 + 17) = 0;
        *(_OWORD *)(a3 + 24) = 0u;
        *(_OWORD *)(a3 + 40) = 0u;
        *(_OWORD *)(a3 + 56) = 0u;
        *(_QWORD *)a3 = &off_1E78B7238;
        *(_QWORD *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 1073741826;
        return;
      }
    }
  }
  v29 = 0;
  v30 = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (v6)
  {
    v30 = std::__shared_weak_count::lock(v6);
    if (v30)
    {
      v29 = *((_QWORD *)this + 36);
      if (v29)
      {
        IPTelephonyManager::getInstance((uint64_t *)&__p);
        v7 = v27;
        v8 = *((_QWORD *)__p + 21);
        if (v27)
        {
          p_shared_owners = (unint64_t *)&v27->__shared_owners_;
          do
            v10 = __ldaxr(p_shared_owners);
          while (__stlxr(v10 - 1, p_shared_owners));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
            std::__shared_weak_count::__release_weak(v7);
          }
        }
        if (v8)
        {
          (*(void (**)(void **__return_ptr))(*(_QWORD *)v29 + 80))(&__p);
          BambiClient::acquireKeepAliveAssertion(v8, (uint64_t)&__p, *((_DWORD *)this + 88), a2);
          if (v28 < 0)
            operator delete(__p);
        }
      }
    }
  }
  v11 = v30;
  if (v30)
  {
    v12 = (unint64_t *)&v30->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  {
  }
  {
  }
  *((_BYTE *)this + 507) = 1;
  if (SipTcpConnection::isLazuliConnection(this))
  {
    v15 = *((_QWORD *)this + 24);
    v14 = *((_QWORD *)this + 25);
    if (v14)
    {
      v16 = (unint64_t *)(v14 + 16);
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
    }
    v18 = operator new(0x20uLL);
    *v18 = &off_1E78C4340;
    v18[1] = v15;
    v18[2] = v14;
    v18[3] = this;
    v32 = v18;
    v19 = v32;
    if (v32 == v31)
    {
      v20 = 4;
      v19 = v31;
      goto LABEL_34;
    }
    if (v32)
    {
      v20 = 5;
LABEL_34:
      (*(void (**)(void))(*v19 + 8 * v20))();
    }
  }
  v25 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"sending CRLF ping", 17);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  SipTcpConnection::sendData(this, a3);
}

void sub_1BEEFEF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::sendMessage@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  ImsResult *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *size;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v38;
  std::__shared_weak_count *v39;
  std::string __p;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  _OWORD v48[3];

  v5 = (std::__shared_weak_count *)a1[25];
  if (!v5 || (v9 = a1[24], (v10 = std::__shared_weak_count::lock(v5)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  memset(v48, 0, sizeof(v48));
  v46 = v9;
  v47 = v10;
  v44 = 0;
  v45 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "sendMessage");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v48, &v46, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v11 = v47;
  if (v47)
  {
    p_shared_owners = (unint64_t *)&v47->__shared_owners_;
    do
      v13 = __ldaxr(p_shared_owners);
    while (__stlxr(v13 - 1, p_shared_owners));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = v45;
  if (v45)
  {
    v15 = (unint64_t *)&v45->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = a1 + 9;
  v18 = (*(uint64_t (**)(_QWORD *))(a1[9] + 64))(a1 + 9);
  (*(void (**)(_QWORD *, uint64_t))(a1[9] + 16))(a1 + 9, v18);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"SipTcpConnection::sendMessage", 29);
  *(_BYTE *)(v18 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v18 + 17) = 0;
  a4[2] = 0;
  a4[3] = 0;
  a4[7] = 0;
  a4[8] = 0;
  a4[5] = 0;
  a4[6] = 0;
  *a4 = &off_1E78B7238;
  a4[1] = &_bambiDomain;
  a4[4] = 0;
  v44 = 0;
  v45 = 0;
  v19 = (std::__shared_weak_count *)a1[37];
  if (!v19 || (v45 = std::__shared_weak_count::lock(v19)) == 0 || (v20 = a1[36], (v44 = v20) == 0))
  {
    v41 = 0u;
    v42 = 0u;
    v43 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 1073741826;
    v25 = (ImsResult *)ImsResult::operator<<<char [31]>((uint64_t)&__p, "already removed from transport");
    ImsLogContainer::logResult((ImsLogContainer *)(a1 + 9), v25);
    ImsResult::operator=((uint64_t)a4, (uint64_t)v25);
    ImsResult::~ImsResult((ImsResult *)&__p);
    goto LABEL_26;
  }
  v21 = (std::__shared_weak_count *)a1[25];
  v38 = a1[24];
  if (!v21)
  {
    v39 = 0;
LABEL_48:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v39 = std::__shared_weak_count::lock(v21);
  if (!v39)
    goto LABEL_48;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v20 + 16))(&__p, v20, a2, &v38);
  ImsResult::operator=((uint64_t)a4, (uint64_t)&__p);
  ImsResult::~ImsResult((ImsResult *)&__p);
  v22 = v39;
  if (v39)
  {
    v23 = (unint64_t *)&v39->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
LABEL_26:
  if (!a3)
    goto LABEL_39;
  if (!(*(unsigned int (**)(_QWORD *))(*a1 + 176))(a1))
  {
    v32 = (*(uint64_t (**)(_QWORD *))(*v17 + 64))(a1 + 9);
    (*(void (**)(_QWORD *, uint64_t))(*v17 + 16))(a1 + 9, v32);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"no longer initialized. Setting desired transport to our group.", 62);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v32 + 17) = 0;
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*a1 + 112))(&__p, a1);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)a3, (__int128 *)&__p);
    size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (!__p.__r_.__value_.__l.__size_)
      goto LABEL_39;
    v33 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v31 = __ldaxr(v33);
    while (__stlxr(v31 - 1, v33));
    goto LABEL_37;
  }
  v26 = (std::__shared_weak_count *)a1[25];
  if (!v26 || (v27 = a1[24], (v28 = std::__shared_weak_count::lock(v26)) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  size = (std::__shared_weak_count *)a3[1];
  *a3 = v27;
  a3[1] = v28;
  if (size)
  {
    v30 = (unint64_t *)&size->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
LABEL_37:
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
LABEL_39:
  v34 = v45;
  if (v45)
  {
    v35 = (unint64_t *)&v45->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  return SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v48);
}

void sub_1BEEFF3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  ImsResult *v28;

  ImsResult::~ImsResult((ImsResult *)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  ImsResult::~ImsResult(v28);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void SipTcpConnection::handleKeepAliveWake(SipTcpConnection *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[9];
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  if (SipTcpConnection::crlfKeepAliveAllowed(this) && !*((_BYTE *)this + 507))
  {
    v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      v18 = v3;
      if (v3)
      {
        v4 = v3;
        v5 = *((_QWORD *)this + 36);
        v17 = v5;
        if (!v5)
          goto LABEL_21;
        (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 32))(&v13);
        v15 = 0;
        if (v14)
        {
          v6 = std::__shared_weak_count::lock(v14);
          v16 = v6;
          if (v6)
          {
            v7 = v13;
            v15 = v13;
          }
          else
          {
            v7 = 0;
          }
          if (v14)
            std::__shared_weak_count::__release_weak(v14);
          if (v7)
          {
            (*(void (**)(_QWORD *__return_ptr, SipTcpConnection *, _QWORD))(*(_QWORD *)this + 64))(v12, this, 0);
            ImsResult::~ImsResult((ImsResult *)v12);
          }
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
        }
        v4 = v18;
        if (v18)
        {
LABEL_21:
          v10 = (unint64_t *)&v4->__shared_owners_;
          do
            v11 = __ldaxr(v10);
          while (__stlxr(v11 - 1, v10));
          if (!v11)
          {
            ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
            std::__shared_weak_count::__release_weak(v4);
          }
        }
      }
    }
  }
}

void sub_1BEEFF5B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 64);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 - 48);
  _Unwind_Resume(a1);
}

void SipTcpConnection::handleKeepAliveNotification(SipTcpConnection *this)
{
  uint64_t v2;
  _QWORD v3[9];

  if (SipTcpConnection::isLazuliConnection(this))
  {
    v2 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 9) + 64))((char *)this + 72);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 9) + 16))((char *)this + 72, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"scheduled keepalive event", 25);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(_QWORD *__return_ptr, SipTcpConnection *, uint64_t))(*(_QWORD *)this + 64))(v3, this, 1);
    ImsResult::~ImsResult((ImsResult *)v3);
  }
}

void `non-virtual thunk to'SipTcpConnection::handleKeepAliveNotification(SipTcpConnection *this)
{
  SipTcpConnection::handleKeepAliveNotification((SipTcpConnection *)((char *)this - 184));
}

void SipTcpConnection::stack(SipTcpConnection *this, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;

  v20 = 0;
  v21 = 0;
  v3 = *(std::__shared_weak_count **)(a2 + 296);
  if (!v3
    || (v21 = std::__shared_weak_count::lock(v3)) == 0
    || (v5 = *(_QWORD *)(a2 + 288), (v20 = v5) == 0)
    || ((*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v5 + 32))(&v18), !v19))
  {
LABEL_25:
    v12 = 1;
    goto LABEL_26;
  }
  v6 = std::__shared_weak_count::lock(v19);
  if (v6)
    v7 = v18;
  else
    v7 = 0;
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  if (!v7)
  {
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
    goto LABEL_25;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v8 = *(std::__shared_weak_count **)(v7 + 16);
  if (v8)
  {
    v9 = std::__shared_weak_count::lock(v8);
    *((_QWORD *)this + 1) = v9;
    if (v9)
      *(_QWORD *)this = *(_QWORD *)(v7 + 8);
  }
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = 0;
LABEL_26:
  v15 = v21;
  if (!v21)
    goto LABEL_30;
  v16 = (unint64_t *)&v21->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (!v12)
      return;
  }
  else
  {
LABEL_30:
    if (!v12)
      return;
  }
  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
}

void sub_1BEEFF7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void SipTcpConnection::setManager(SipTcpConnection *a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;

  SipTcpConnection::stopCrlfKeepAlive(a1);
  v5 = *a2;
  v4 = a2[1];
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 16);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 37);
  *((_QWORD *)a1 + 36) = v5;
  *((_QWORD *)a1 + 37) = v4;
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
}

uint64_t SipTcpConnection::isReliable(SipTcpConnection *this)
{
  return 1;
}

uint64_t SipTcpConnection::initialized(SipTcpConnection *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v9;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 37);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  if (*((_QWORD *)this + 36) && !*((_BYTE *)this + 504) && (v9 = *((_QWORD *)this + 34)) != 0)
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 128))(v9);
  else
    v5 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v5;
}

void sub_1BEEFF918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t SipTcpConnection::shuttingDown(SipTcpConnection *this)
{
  return *((unsigned __int8 *)this + 504);
}

uint64_t std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::allocate_shared[abi:ne180100]<SipTcpConnection,std::allocator<SipTcpConnection>,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, char *a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x240uLL);
  std::__shared_ptr_emplace<SipTcpConnection>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,std::allocator<SipTcpConnection>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a4, v8 + 27, (uint64_t)(v8 + 3));
}

void sub_1BEEFF9FC(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<SipTcpConnection>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,std::allocator<SipTcpConnection>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78C4170;
  std::construct_at[abi:ne180100]<SipTcpConnection,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,SipTcpConnection*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1BEEFFA44(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<SipTcpConnection>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4170;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<SipTcpConnection>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4170;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<SipTcpConnection>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<SipTcpConnection,std::shared_ptr<SipTcpConnectionManager> &,std::shared_ptr<ImsTcpSocketInterface> &,BOOL &,SipTcpConnection*>(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  char v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *p_shared_weak_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  std::string __p;

  v5 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v28 = *a2;
  v29 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v9 = (std::__shared_weak_count *)a3[1];
  v27 = *a3;
  if (v9)
  {
    v10 = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v12 = *a4;
  *(_QWORD *)a1 = &off_1E78B7B60;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)v5 + 80))(&__p);
  SipTransportInterface::SipTransportInterface(a1, (uint64_t *)&off_1E78C3E88, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)a1 = &off_1E78C3CE0;
  *(_QWORD *)(a1 + 72) = &unk_1E78C3DB8;
  *(_QWORD *)(a1 + 176) = &unk_1E78C3E18;
  *(_QWORD *)(a1 + 184) = &unk_1E78C3E68;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  v30 = 0;
  v31 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "ShutdownLock");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)(a1 + 224), &v30, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  *(_QWORD *)(a1 + 272) = v27;
  *(_QWORD *)(a1 + 280) = v9;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  *(_QWORD *)(a1 + 288) = v28;
  *(_QWORD *)(a1 + 296) = v29;
  if (v29)
  {
    p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_DWORD *)(a1 + 344) = 1065353216;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 360));
  *(_WORD *)(a1 + 506) = 0;
  *(_BYTE *)(a1 + 508) = v12;
  *(_DWORD *)(a1 + 512) = 0;
  *(_DWORD *)(a1 + 352) = 0;
  *(_OWORD *)(a1 + 520) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  *(_QWORD *)(a1 + 464) = a1 + *(_QWORD *)(*(_QWORD *)a1 - 48);
  v20 = operator new();
  v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v28 + 72))(v28);
  *(_OWORD *)v20 = 0u;
  *(_OWORD *)(v20 + 16) = 0u;
  *(_OWORD *)(v20 + 28) = 0u;
  *(_QWORD *)(v20 + 48) = 0;
  *(_QWORD *)(v20 + 56) = v21;
  *(_QWORD *)(a1 + 304) = v20;
  *(_WORD *)(a1 + 504) = 0;
  *(_BYTE *)(a1 + 516) = 0;
  if (v9)
  {
    v22 = (unint64_t *)&v9->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v29)
  {
    v24 = (unint64_t *)&v29->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  return a1;
}

void sub_1BEEFFD4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  SipTransportInterface *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  SipTimerContainer *v25;
  uint64_t v26;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;

  MEMORY[0x1C3B87100](v26, 0x1072C40C3E17F72);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v21 + 536);
  SipTimerContainer::~SipTimerContainer(v25);
  std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::~__hash_table(v24);
  v28 = (std::__shared_weak_count *)*((_QWORD *)v21 + 37);
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v21 + 272);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  v29 = (std::__shared_weak_count *)*((_QWORD *)v21 + 25);
  if (v29)
    std::__shared_weak_count::__release_weak(v29);
  SipTransportInterface::~SipTransportInterface(v21, (uint64_t)&off_1E78C3E88);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void sub_1BEEFFE14(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0)
    operator delete(__p);
  JUMPOUT(0x1BEEFFDFCLL);
}

void sub_1BEEFFE2C()
{
  JUMPOUT(0x1BEEFFDFCLL);
}

void std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(uint64_t a1, size_t __n)
{
  size_t prime;
  int8x8_t v4;
  void *v5;
  void *v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint8x8_t v10;
  unint64_t v11;
  uint8x8_t v12;
  uint64_t v13;
  _QWORD *v14;
  size_t v15;
  void *v16;

  if (__n == 1)
  {
    prime = 2;
  }
  else
  {
    prime = __n;
    if ((__n & (__n - 1)) != 0)
      prime = std::__next_prime(__n);
  }
  v4 = *(int8x8_t *)(a1 + 8);
  if (prime <= *(_QWORD *)&v4)
  {
    if (prime >= *(_QWORD *)&v4)
      return;
    v11 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(_QWORD *)&v4 < 3uLL || (v12 = (uint8x8_t)vcnt_s8(v4), v12.i16[0] = vaddlv_u8(v12), v12.u32[0] > 1uLL))
    {
      v11 = std::__next_prime(v11);
    }
    else
    {
      v13 = 1 << -(char)__clz(v11 - 1);
      if (v11 >= 2)
        v11 = v13;
    }
    if (prime <= v11)
      prime = v11;
    if (prime >= *(_QWORD *)&v4)
      return;
    if (!prime)
    {
      v16 = *(void **)a1;
      *(_QWORD *)a1 = 0;
      if (v16)
        operator delete(v16);
      *(_QWORD *)(a1 + 8) = 0;
      return;
    }
  }
  if (prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v5 = operator new(8 * prime);
  v6 = *(void **)a1;
  *(_QWORD *)a1 = v5;
  if (v6)
    operator delete(v6);
  v7 = 0;
  *(_QWORD *)(a1 + 8) = prime;
  do
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v7++) = 0;
  while (prime != v7);
  v8 = *(_QWORD **)(a1 + 16);
  if (v8)
  {
    v9 = v8[1];
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)prime);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      if (v9 >= prime)
        v9 %= prime;
    }
    else
    {
      v9 &= prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v9) = a1 + 16;
    v14 = (_QWORD *)*v8;
    if (*v8)
    {
      do
      {
        v15 = v14[1];
        if (v10.u32[0] > 1uLL)
        {
          if (v15 >= prime)
            v15 %= prime;
        }
        else
        {
          v15 &= prime - 1;
        }
        if (v15 != v9)
        {
          if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v15))
          {
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v15) = v8;
            goto LABEL_31;
          }
          *v8 = *v14;
          *v14 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v15);
          **(_QWORD **)(*(_QWORD *)a1 + 8 * v15) = v14;
          v14 = v8;
        }
        v15 = v9;
LABEL_31:
        v8 = v14;
        v14 = (_QWORD *)*v14;
        v9 = v15;
      }
      while (v14);
    }
  }
}

void std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__emplace_unique_key_args<SipConnectionUser *,SipConnectionUser * const&>(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *i;
  unint64_t v13;
  _QWORD *v14;
  float v15;
  float v16;
  _BOOL8 v17;
  unint64_t v18;
  unint64_t v19;
  size_t v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;

  v5 = 0x9DDFEA08EB382D69 * (((8 * a2) + 8) ^ HIDWORD(a2));
  v6 = 0x9DDFEA08EB382D69 * (HIDWORD(a2) ^ (v5 >> 47) ^ v5);
  v7 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
  v8 = *(_QWORD *)(a1 + 8);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = 0x9DDFEA08EB382D69 * (v6 ^ (v6 >> 47));
      if (v7 >= v8)
        v10 = v7 % v8;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
    v11 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
    if (v11)
    {
      for (i = (_QWORD *)*v11; i; i = (_QWORD *)*i)
      {
        v13 = i[1];
        if (v13 == v7)
        {
          if (i[2] == a2)
            return;
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = operator new(0x18uLL);
  *v14 = 0;
  v14[1] = v7;
  v14[2] = a3;
  v15 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v16 = *(float *)(a1 + 32);
  if (!v8 || (float)(v16 * (float)v8) < v15)
  {
    v17 = 1;
    if (v8 >= 3)
      v17 = (v8 & (v8 - 1)) != 0;
    v18 = v17 | (2 * v8);
    v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19)
      v20 = v19;
    else
      v20 = v18;
    std::__hash_table<SipConnectionUser *,std::hash<SipConnectionUser *>,std::equal_to<SipConnectionUser *>,std::allocator<SipConnectionUser *>>::__rehash<true>(a1, v20);
    v8 = *(_QWORD *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v7 >= v8)
        v10 = v7 % v8;
      else
        v10 = v7;
    }
    else
    {
      v10 = (v8 - 1) & v7;
    }
  }
  v21 = *(_QWORD *)a1;
  v22 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v10);
  if (v22)
  {
    *v14 = *v22;
LABEL_38:
    *v22 = v14;
    goto LABEL_39;
  }
  *v14 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v14;
  *(_QWORD *)(v21 + 8 * v10) = a1 + 16;
  if (*v14)
  {
    v23 = *(_QWORD *)(*v14 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v23 >= v8)
        v23 %= v8;
    }
    else
    {
      v23 &= v8 - 1;
    }
    v22 = (_QWORD *)(*(_QWORD *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
}

void sub_1BEF00254(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C41C0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C41C0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C41C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C41C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF0044C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipTcpConnection::setIdleTimer(void)::$_0,std::allocator<SipTcpConnection::setIdleTimer(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C4240;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C4240;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C4240;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C4240;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF006B4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipTcpConnection::startCrlfKeepAlive(void)::$_0,std::allocator<SipTcpConnection::startCrlfKeepAlive(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C42C0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C42C0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C42C0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C42C0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 120))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF0091C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipTcpConnection::shutdown(BOOL)::$_0,std::allocator<SipTcpConnection::shutdown(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

void SipTypedTerminationLock<SipLockable>::set(uint64_t a1, uint64_t *a2, std::string *__str)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;

  v3 = (_QWORD *)(a1 + 32);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  if (*a2 != v4)
  {
    if (v4)
    {
      v9 = *(std::__shared_weak_count **)(a1 + 40);
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 32));
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
      }
      else
      {
        std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 32));
      }
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 40))(v4, a1 + 8);
      if (v9)
      {
        v13 = (unint64_t *)&v9->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      if (v9)
      {
        v15 = (unint64_t *)&v9->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v5 = *a2;
    }
    if (v5)
    {
      v17 = a1 + 8;
      std::string::operator=((std::string *)(a1 + 8), __str);
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](v3, a2);
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(std::__shared_weak_count **)(a1 + 40);
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      if (v18)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, v17);
      if (v19)
      {
        v22 = (unint64_t *)&v19->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
    }
  }
}

void sub_1BEF00B70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C4340;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C4340;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_1E78C4340;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 16);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_1E78C4340;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[2];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v5;
  std::string *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (v3 != 18)
    return;
  v5 = (_QWORD *)a1[3];
  if ((v2 & 0x80) != 0)
  {
      return;
    goto LABEL_12;
  }
  if (!a2[23])
  {
LABEL_12:
    v7 = (std::__shared_weak_count *)a1[2];
    if (v7)
    {
      v8 = std::__shared_weak_count::lock(v7);
      if (v8)
      {
        v9 = v8;
        if (a1[1])
        {
          v10 = (std::__shared_weak_count *)v5[37];
          if (v10)
          {
            v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              v12 = v11;
              v13 = v5[36];
              if (v13)
              {
                (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 32))(&v25);
                if (v26)
                {
                  v14 = std::__shared_weak_count::lock(v26);
                  if (v14)
                    v15 = v25;
                  else
                    v15 = 0;
                  if (v26)
                    std::__shared_weak_count::__release_weak(v26);
                  if (v15)
                  {
                    v17 = v5[9];
                    v16 = v5 + 9;
                    v18 = (*(uint64_t (**)(_QWORD *))(v17 + 56))(v16);
                    (*(void (**)(_QWORD *, uint64_t))(*v16 + 16))(v16, v18);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Pong timeout.  Terminating registration", 39);
                    *(_BYTE *)(v18 + 17) = 0;
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v18 + 17) = 0;
                    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 192))(v15, 24, 0);
                  }
                  if (v14)
                  {
                    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
                    do
                      v20 = __ldaxr(p_shared_owners);
                    while (__stlxr(v20 - 1, p_shared_owners));
                    if (!v20)
                    {
                      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
                      std::__shared_weak_count::__release_weak(v14);
                    }
                  }
                }
              }
              v21 = (unint64_t *)&v12->__shared_owners_;
              do
                v22 = __ldaxr(v21);
              while (__stlxr(v22 - 1, v21));
              if (!v22)
              {
                ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                std::__shared_weak_count::__release_weak(v12);
              }
            }
          }
        }
        v23 = (unint64_t *)&v9->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    return;
  }
  while (*a2 == v6->__r_.__value_.__s.__data_[0])
  {
    ++a2;
    v6 = (std::string *)((char *)v6 + 1);
    if (!--v2)
      goto LABEL_12;
  }
}

void sub_1BEF00EF8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v6 = (unint64_t *)&v1->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<SipTcpConnection::sendPing(BOOL)::$_0,std::allocator<SipTcpConnection::sendPing(BOOL)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipTcpConnection_cpp()
{
  LoggableString::LoggableString((LoggableString *)&_MergedGlobals_5, "TcpConnectionOut");
  __cxa_atexit((void (*)(void *))LoggableString::~LoggableString, &_MergedGlobals_5, &dword_1BEDF4000);
  LoggableString::LoggableString((LoggableString *)&unk_1ED70E9F8, "TcpConnectionIn");
  return __cxa_atexit((void (*)(void *))LoggableString::~LoggableString, &unk_1ED70E9F8, &dword_1BEDF4000);
}

ImsOutStream *RTCPXRDLRRReport::toStream(RTCPXRDLRRReport *this, ImsOutStream *a2)
{
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"RTCP XR DLRR Report, Receiver SSRC: ", 36);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)", LRR timestamp: ", 17);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)", DLRR timestamp: ", 18);
  *((_BYTE *)a2 + 17) = 0;
  std::ostream::operator<<();
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *((_BYTE *)a2 + 17) = 0;
  return a2;
}

void SipSecurityVerifyHeader::SipSecurityVerifyHeader(SipSecurityVerifyHeader *this, const SipSecurityServerHeader *a2)
{
  SipHeader *v2;

  v2 = SipPolymorphicVectorHeader<SipSecurityMechanism>::SipPolymorphicVectorHeader(this, a2);
  *(_QWORD *)v2 = &off_1E78C4400;
  std::string::operator=((std::string *)((char *)v2 + 8), (const std::string *)"Security-Verify");
}

void sub_1BEF01154(_Unwind_Exception *a1)
{
  SipHeader *v1;

  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(v1);
  _Unwind_Resume(a1);
}

void SipSecurityVerifyHeader::~SipSecurityVerifyHeader(SipSecurityVerifyHeader *this)
{
  SipPolymorphicVectorHeader<SipSecurityMechanism>::~SipPolymorphicVectorHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipHeader *SipSecurityVerifyHeader::clone(SipSecurityVerifyHeader *this)
{
  SipHeader *v2;

  v2 = (SipHeader *)operator new();
  SipPolymorphicVectorHeader<SipSecurityMechanism>::SipPolymorphicVectorHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C4400;
  return v2;
}

void sub_1BEF011E0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40888A45CFLL);
  _Unwind_Resume(a1);
}

uint64_t SipVectorHeader<SipSecurityMechanism *>::encodeValue(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  unint64_t v6;
  _QWORD *v7;
  char v9;

  v2 = a1[8];
  if (a1[9] != v2)
  {
    v5 = 0;
    v6 = 0;
    do
    {
      if (v6)
      {
        v7 = *(_QWORD **)(a2 + 8);
        v9 = 44;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v9, 1);
        *(_BYTE *)(a2 + 17) = 0;
        v2 = a1[8];
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*a1 + 112))(a1, v2 + v5, a2);
      ++v6;
      v2 = a1[8];
      v5 += 8;
    }
    while (v6 < (a1[9] - v2) >> 3);
  }
  return 1;
}

BOOL SipVectorHeader<SipSecurityMechanism *>::setValueFromString(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  v4 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  while (1)
  {
    v4 = (*(uint64_t (**)(_QWORD *, uint64_t, uint64_t, void **, uint64_t))(*a1 + 128))(a1, a2, v4, __p, 44);
    if (v4 == -1)
      break;
    v6 = 0;
    if (((*(uint64_t (**)(_QWORD *, void **, uint64_t *))(*a1 + 120))(a1, __p, &v6) & 1) == 0)
      break;
    SipVectorHeader<SipSecurityMechanism *>::addItem(a1, &v6);
  }
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
  return v4 == -1;
}

void sub_1BEF01358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipVectorHeader<SipSecurityMechanism *>::allowsDuplicates()
{
  return 1;
}

uint64_t SipVectorHeader<SipSecurityMechanism *>::allowsMerging()
{
  return 1;
}

BOOL SipPolymorphicVectorHeader<SipSecurityMechanism>::mergeHeader(_QWORD *a1, void *lpsrc)
{
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v8;

  v4 = v3;
  if (v3)
  {
    v5 = v3[8];
    if (v3[9] != v5)
    {
      v6 = 0;
      do
      {
        v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 8 * v6) + 32))(*(_QWORD *)(v5 + 8 * v6));
        SipVectorHeader<SipSecurityMechanism *>::addItem(a1, &v8);
        ++v6;
        v5 = v4[8];
      }
      while (v6 < (v4[9] - v5) >> 3);
    }
  }
  return v4 != 0;
}

ImsOutStream *SipSecurityAgreementHeader::itemToStream(SipSecurityAgreementHeader *this, SipSecurityMechanism *const *a2, ImsOutStream *a3)
{
  char *v4;

  v4 = (char *)*a2;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a3 + 32))(a3, (char *)*a2 + 8);
  return SipParameterMap::toStream((SipParameterMap *)(v4 + 32), a3, 0, 0, 0, 0);
}

unint64_t SipVectorHeader<SipSecurityMechanism *>::nextToken(int a1, std::string *__str, std::string::size_type __pos, std::string *this, unsigned __int8 a5)
{
  return ims::nextTokenQ(__str, __pos, this, a5);
}

uint64_t SipAuthResponse::SipAuthResponse(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)a1 = off_1E78DD4F0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  return a1;
}

{
  std::string *v4;

  *(_QWORD *)a1 = off_1E78DD4F0;
  *(_OWORD *)(a1 + 8) = 0u;
  v4 = (std::string *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=(v4, (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void sub_1BEF014DC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(char *)(v1 + 55) < 0)
    operator delete(*(void **)(v1 + 32));
  if (*(char *)(v1 + 31) < 0)
    operator delete(*v2);
  _Unwind_Resume(exception_object);
}

void SipAuthResponse::~SipAuthResponse(void **this)
{
  *this = off_1E78DD4F0;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

ImsOutStream *SipSsoAuthResponse::encode(SipSsoAuthResponse *this, ImsOutStream *a2)
{
  void *__p[2];
  char v6;

  (*(void (**)(ImsOutStream *, void *))(*(_QWORD *)a2 + 32))(a2, &SipSsoAuthResponse::kSchemeName);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(_QWORD *)a2 + 32))(a2, "username");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 136);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\",", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(_QWORD *)a2 + 32))(a2, "realm");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 184);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\",", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, void *))(*(_QWORD *)a2 + 32))(a2, &SipSsoAuthResponse::kDirectiveUri);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"", 2);
  *((_BYTE *)a2 + 17) = 0;
  SipUri::asString((uint64_t)this + 208, 2, __p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\",", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  (*(void (**)(ImsOutStream *, const char *))(*(_QWORD *)a2 + 32))(a2, "nonce");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"\",", 4);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(_QWORD *)a2 + 32))(a2, "response");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"\",", 4);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(_QWORD *)a2 + 32))(a2, "msisdn");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 616);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\",", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, const char *))(*(_QWORD *)a2 + 32))(a2, "token");
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"=\"", 2);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 160);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"\"", 1);
  *((_BYTE *)a2 + 17) = 0;
  return a2;
}

void sub_1BEF01800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipSsoAuthResponse::log(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 72))(a1);
}

void SipSsoAuthResponse::~SipSsoAuthResponse(void **this)
{
  SipSsoAuthResponse::~SipSsoAuthResponse(this);
  JUMPOUT(0x1C3B87100);
}

{
  *this = &off_1E78C44E0;
  if (*((char *)this + 639) < 0)
    operator delete(this[77]);
  SipUri::~SipUri((SipUri *)(this + 26));
  if (*((char *)this + 207) < 0)
    operator delete(this[23]);
  if (*((char *)this + 183) < 0)
    operator delete(this[20]);
  if (*((char *)this + 159) < 0)
    operator delete(this[17]);
  ImsResult::~ImsResult((ImsResult *)(this + 8));
  SipAuthResponse::~SipAuthResponse(this);
}

uint64_t SipSsoAuthResponse::clone(SipSsoAuthResponse *this)
{
  uint64_t v2;

  v2 = operator new();
  SipAuthResponse::SipAuthResponse(v2, (uint64_t)this);
  *(_QWORD *)v2 = &off_1E78C44E0;
  *(_QWORD *)(v2 + 64) = &off_1E78B7238;
  *(_QWORD *)(v2 + 112) = 0;
  *(_OWORD *)(v2 + 120) = 0u;
  *(_QWORD *)(v2 + 72) = &_bambiDomain;
  *(_DWORD *)(v2 + 80) = 0;
  *(_QWORD *)(v2 + 88) = 0;
  *(_OWORD *)(v2 + 96) = 0u;
  *(_OWORD *)(v2 + 136) = 0u;
  *(_OWORD *)(v2 + 152) = 0u;
  *(_OWORD *)(v2 + 168) = 0u;
  *(_OWORD *)(v2 + 184) = 0u;
  *(_QWORD *)(v2 + 200) = 0;
  *(_QWORD *)(v2 + 216) = &off_1E78D08F8;
  *(_OWORD *)(v2 + 256) = 0u;
  *(_OWORD *)(v2 + 224) = 0u;
  *(_WORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 240) = 0;
  *(_QWORD *)(v2 + 208) = &off_1E78BFCE8;
  *(_OWORD *)(v2 + 288) = 0u;
  *(_QWORD *)(v2 + 272) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 280) = v2 + 288;
  *(_BYTE *)(v2 + 305) = 1;
  *(_OWORD *)(v2 + 328) = 0u;
  *(_OWORD *)(v2 + 344) = 0u;
  *(_OWORD *)(v2 + 360) = 0u;
  *(_OWORD *)(v2 + 376) = 0u;
  *(_OWORD *)(v2 + 392) = 0u;
  *(_OWORD *)(v2 + 408) = 0u;
  *(_OWORD *)(v2 + 424) = 0u;
  *(_OWORD *)(v2 + 440) = 0u;
  *(_OWORD *)(v2 + 456) = 0u;
  *(_QWORD *)(v2 + 520) = 0;
  *(_OWORD *)(v2 + 312) = 0u;
  *(_OWORD *)(v2 + 472) = 0u;
  *(_OWORD *)(v2 + 488) = 0u;
  *(_OWORD *)(v2 + 504) = 0u;
  *(_OWORD *)(v2 + 552) = 0u;
  *(_QWORD *)(v2 + 536) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 544) = v2 + 552;
  *(_OWORD *)(v2 + 592) = 0u;
  *(_QWORD *)(v2 + 576) = &off_1E78B82D8;
  *(_QWORD *)(v2 + 584) = v2 + 592;
  *(_BYTE *)(v2 + 304) = 1;
  *(_WORD *)(v2 + 568) = 257;
  *(_WORD *)(v2 + 608) = 257;
  *(_BYTE *)(v2 + 528) = 0;
  *(_QWORD *)(v2 + 632) = 0;
  *(_OWORD *)(v2 + 616) = 0u;
  std::string::operator=((std::string *)(v2 + 136), (const std::string *)((char *)this + 136));
  std::string::operator=((std::string *)(v2 + 160), (const std::string *)((char *)this + 160));
  std::string::operator=((std::string *)(v2 + 184), (const std::string *)((char *)this + 184));
  SipUri::operator=((SipUri *)(v2 + 208), (uint64_t)this + 208);
  std::string::operator=((std::string *)(v2 + 616), (const std::string *)((char *)this + 616));
  ImsResult::operator=(v2 + 64, (uint64_t)this + 64);
  return v2;
}

void sub_1BEF01A0C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10F3C4090C1171DLL);
  _Unwind_Resume(a1);
}

uint64_t SipSsoAuthResponse::scheme(SipSsoAuthResponse *this)
{
  return 0;
}

{
  return 0;
}

uint64_t SipSsoAuthResponse::computeResponse()
{
  return 1;
}

{
  return 1;
}

void SipSsoAuthResponse::result(SipSsoAuthResponse *this@<X0>, ImsResult *a2@<X8>)
{
  ImsResult::ImsResult(a2, (SipSsoAuthResponse *)((char *)this + 64));
}

uint64_t SipAuthResponse::shouldCache(SipAuthResponse *this)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;

  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)this + 56))(&v3);
  v1 = (*(unsigned int (**)(uint64_t, _QWORD))(*(_QWORD *)v4 + 24))(v4, v5) ^ 1;
  ImsResult::~ImsResult((ImsResult *)&v3);
  return v1;
}

void sub_1BEF01B10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t BambiCallActivity::BambiCallActivity(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string __p;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v6 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  ImsLogContainer::ImsLogContainer(v6, &__p, (const std::string *)(*a2 + 104));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78C4560;
  *(_QWORD *)(a1 + 8) = &unk_1E78C45A0;
  *(_QWORD *)(a1 + 112) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 152) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 160) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 168) = a3;
  *(_BYTE *)(a1 + 176) = 0;
  return a1;
}

void sub_1BEF01C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiCallActivity::~BambiCallActivity(BambiCallActivity *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78C4560;
  *((_QWORD *)this + 1) = &unk_1E78C45A0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 20);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 136);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)this + 14);
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  BambiCallActivity::~BambiCallActivity(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiCallActivity::~BambiCallActivity(BambiCallActivity *this)
{
  BambiCallActivity::~BambiCallActivity((BambiCallActivity *)((char *)this - 8));
}

{
  BambiCallActivity::~BambiCallActivity((BambiCallActivity *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::list<std::shared_ptr<BambiCallAction>>::push_back(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  _QWORD *result;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;

  result = operator new(0x20uLL);
  result[2] = a2;
  result[3] = a3;
  if (a3)
  {
    v7 = (unint64_t *)(a3 + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = *a1;
  *result = *a1;
  result[1] = a1;
  *(_QWORD *)(v9 + 8) = result;
  *a1 = (uint64_t)result;
  ++a1[2];
  return result;
}

void BambiCallActivity::perform(BambiCallActivity *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  void (**v16)(ImsResult *__hidden);
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  const ImsResult *v28;
  void (**v29)(ImsResult *__hidden);
  uint64_t *v30;
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  void (***v35)(ImsResult *__hidden);

  if (!*((_BYTE *)this + 176))
  {
    v4 = *((_QWORD *)this + 17);
    if (!v4)
    {
      v32 = 0u;
      v33 = 0u;
      v34 = 0u;
      v29 = &off_1E78B7238;
      v30 = &_bambiDomain;
      LODWORD(v31) = 1073741827;
      v28 = (const ImsResult *)ImsResult::operator<<<char [20]>((uint64_t)&v29, "No base call action");
      ImsResult::ImsResult((ImsResult *)a2, v28);
      ImsResult::~ImsResult((ImsResult *)&v29);
      return;
    }
    v29 = 0;
    v30 = 0;
    v31 = 0;
    (*(void (**)(uint64_t, void (***)(ImsResult *__hidden)))(*(_QWORD *)v4 + 48))(v4, &v29);
    v5 = (uint64_t *)v29;
    v6 = v30;
    if (v29 != (void (**)(ImsResult *__hidden))v30)
    {
      v7 = (char *)this + 8;
      do
      {
        v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v7 + 64))((char *)this + 8);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 8, v8);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"queueing prerequisite [", 23);
        *(_BYTE *)(v8 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v8 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"] ", 2);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)*v5 + 16))(*v5, v8);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v8 + 17) = 0;
        (*(void (**)(uint64_t))(*(_QWORD *)*v5 + 32))(*v5);
        std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)this + 14, *v5, v5[1]);
        v5 += 2;
      }
      while (v5 != v6);
    }
    v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"queueing base action [", 22);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"] ", 2);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 17) + 16))(*((_QWORD *)this + 17), v9);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(_QWORD))(**((_QWORD **)this + 17) + 32))(*((_QWORD *)this + 17));
    std::list<std::shared_ptr<BambiCallAction>>::push_back((uint64_t *)this + 14, *((_QWORD *)this + 17), *((_QWORD *)this + 18));
    v35 = &v29;
    std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v35);
    *((_BYTE *)this + 176) = 1;
  }
  v10 = (char *)this + 8;
  v11 = *((_QWORD *)this + 16);
  v12 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v12);
  v13 = *(_QWORD **)(v12 + 8);
  if (v11)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"Number of actions left to perform : ", 36);
    *(_BYTE *)(v12 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    v14 = *((_QWORD *)this + 15);
    v16 = *(void (***)(ImsResult *__hidden))(v14 + 16);
    v15 = *(std::__shared_weak_count **)(v14 + 24);
    v29 = v16;
    v30 = (uint64_t *)v15;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v18 = __ldxr(p_shared_owners);
      while (__stxr(v18 + 1, p_shared_owners));
    }
    if (((*((uint64_t (**)(_QWORD))*v16 + 7))(v16) & 1) != 0)
    {
      v19 = (uint64_t *)*((_QWORD *)this + 15);
      v20 = *v19;
      *(_QWORD *)(v20 + 8) = v19[1];
      *(_QWORD *)v19[1] = v20;
      --*((_QWORD *)this + 16);
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v19 + 2));
      operator delete(v19);
      *(_QWORD *)(a2 + 64) = 0;
      *(_OWORD *)(a2 + 32) = 0u;
      *(_OWORD *)(a2 + 48) = 0u;
      *(_OWORD *)a2 = 0u;
      *(_OWORD *)(a2 + 16) = 0u;
      (*((void (**)(_QWORD))*v16 + 5))(v16);
      v21 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))((char *)this + 8, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Action ", 7);
      *(_BYTE *)(v21 + 17) = 0;
      (*((void (**)(void (**)(ImsResult *__hidden), uint64_t))*v16 + 2))(v16, v21);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" finished with result ", 22);
      *(_BYTE *)(v21 + 17) = 0;
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 16))(a2, v21);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v21 + 17) = 0;
      if (v16 == *((void (***)(ImsResult *__hidden))this + 17))
      {
        v22 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
        *((_QWORD *)this + 17) = 0;
        *((_QWORD *)this + 18) = 0;
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
    }
    else
    {
      v25 = (*(uint64_t (**)(char *))(*(_QWORD *)v10 + 64))((char *)this + 8);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"last action prerequisites not yet met", 37);
      *(_BYTE *)(v25 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v25 + 17) = 0;
      *(_OWORD *)(a2 + 24) = 0u;
      *(_OWORD *)(a2 + 40) = 0u;
      *(_OWORD *)(a2 + 56) = 0u;
      *(_QWORD *)a2 = &off_1E78B7238;
      *(_QWORD *)(a2 + 8) = &_bambiDomain;
      *(_DWORD *)(a2 + 16) = 1073741838;
    }
    if (v15)
    {
      v26 = (unint64_t *)&v15->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v13, (uint64_t)"this activity is finished", 25);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    *(_OWORD *)(a2 + 24) = 0u;
    *(_OWORD *)(a2 + 40) = 0u;
    *(_OWORD *)(a2 + 56) = 0u;
    *(_QWORD *)a2 = &off_1E78B7238;
    *(_QWORD *)(a2 + 8) = &_bambiDomain;
    *(_DWORD *)(a2 + 16) = 0;
  }
}

void sub_1BEF02348(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

void BambiCallActivity::invalidateCall(_QWORD *a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v25;
  std::__shared_weak_count *v26;

  v2 = a1 + 14;
  v3 = (uint64_t *)a1[15];
  if (v3 != a1 + 14)
  {
    v5 = a1 + 1;
    do
    {
      v6 = (uint64_t *)v3[1];
      v7 = v3[2];
      v8 = (std::__shared_weak_count *)v3[3];
      v25 = v7;
      v26 = v8;
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
      }
      if (!v7)
        goto LABEL_21;
      v11 = *(std::__shared_weak_count **)(v7 + 136);
      if (v11)
      {
        v12 = *(_QWORD *)(v7 + 128);
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
        v15 = std::__shared_weak_count::lock(v11);
        v16 = *a2;
        if (v15)
        {
          v17 = v15;
          v18 = (unint64_t *)&v15->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
            std::__shared_weak_count::__release_weak(v17);
          }
          std::__shared_weak_count::__release_weak(v11);
          if (v12 != v16)
            goto LABEL_21;
LABEL_20:
          v20 = (*(uint64_t (**)(_QWORD *))(*v5 + 64))(v5);
          (*(void (**)(_QWORD *, uint64_t))(*v5 + 16))(v5, v20);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"removing action for invalided call ", 35);
          *(_BYTE *)(v20 + 17) = 0;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v20);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v20 + 17) = 0;
          v21 = *v3;
          *(_QWORD *)(v21 + 8) = v3[1];
          *(_QWORD *)v3[1] = v21;
          --a1[16];
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v3 + 2));
          operator delete(v3);
          goto LABEL_21;
        }
        std::__shared_weak_count::__release_weak(v11);
        if (!v16)
          goto LABEL_20;
      }
      else if (!*a2)
      {
        goto LABEL_20;
      }
LABEL_21:
      if (v26)
      {
        v22 = (unint64_t *)&v26->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v3 = v6;
    }
    while (v6 != v2);
  }
}

void sub_1BEF02598(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiCallActivity::removeCallAction(uint64_t a1, _QWORD *a2)
{
  _BYTE v3[72];

  std::list<std::shared_ptr<BambiCallAction>>::remove(a1 + 112, a2);
  BambiStrictCallHandler::performNextCallAction(*(BambiStrictCallHandler **)(a1 + 168), (uint64_t)v3);
  ImsResult::~ImsResult((ImsResult *)v3);
}

uint64_t std::list<std::shared_ptr<BambiCallAction>>::remove(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11[2];
  uint64_t v12;

  v11[0] = (uint64_t)v11;
  v11[1] = (uint64_t)v11;
  v12 = 0;
  v2 = *(_QWORD **)(a1 + 8);
  if (v2 == (_QWORD *)a1)
  {
    v9 = 0;
  }
  else
  {
    do
    {
      v6 = (_QWORD *)v2[1];
      v5 = v2[2];
      if (v5 == *a2)
      {
        if (v6 == (_QWORD *)a1)
        {
          v8 = 1;
LABEL_8:
          v6 = (_QWORD *)a1;
        }
        else
        {
          while (1)
          {
            v7 = v6[2];
            v8 = v7 == v5;
            if (v7 != v5)
              break;
            v6 = (_QWORD *)v6[1];
            if (v6 == (_QWORD *)a1)
              goto LABEL_8;
          }
        }
        std::list<std::shared_ptr<BambiCallAction>>::splice((uint64_t)v11, v11, a1, v2, v6);
        if (!v8)
          v6 = (_QWORD *)v6[1];
      }
      v2 = v6;
    }
    while (v6 != (_QWORD *)a1);
    v9 = v12;
  }
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear(v11);
  return v9;
}

void sub_1BEF026B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__list_imp<std::shared_ptr<SipLazuliManager::OutgoingPager>>::clear((uint64_t *)va);
  _Unwind_Resume(a1);
}

ImsOutStream *BambiCallActivity::log(BambiCallActivity *this, ImsOutStream *a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 17);
  if (v3)
  {
    (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v3 + 16))(v3, a2);
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"NoCallAction", 12);
    *((_BYTE *)a2 + 17) = 0;
  }
  return a2;
}

void BambiCallActivity::loggableName(BambiCallActivity *this@<X0>, std::string *a2@<X8>)
{
  std::string __p;
  __int128 v5;
  __int128 v6;
  uint64_t v7;

  v7 = 0;
  v5 = 0u;
  v6 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v5, 1);
  (*(void (**)(BambiCallActivity *, __int128 *))(*(_QWORD *)this + 16))(this, &v5);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v6 + 1) + 8, &__p);
  LoggableString::LoggableString(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v5 = &off_1E78D7A10;
  if ((_BYTE)v6)
  {
    if (*((_QWORD *)&v5 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v5 + 1) + 8))(*((_QWORD *)&v5 + 1));
  }
}

void sub_1BEF027C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a15 < 0)
    operator delete(__p);
  if (a18)
  {
    if (a17)
      (*(void (**)(uint64_t))(*(_QWORD *)a17 + 8))(a17);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *BambiCallActivity::logPrefix(BambiCallActivity *this, ImsOutStream *a2)
{
  _QWORD *result;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"BambiCallActivity: ", 19);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(BambiCallActivity *, ImsOutStream *))(*(_QWORD *)this + 16))(this, a2);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'BambiCallActivity::logPrefix(BambiCallActivity *this, ImsOutStream *a2)
{
  return BambiCallActivity::logPrefix((BambiCallActivity *)((char *)this - 8), a2);
}

uint64_t std::list<std::shared_ptr<BambiCallAction>>::splice(uint64_t result, uint64_t *a2, uint64_t a3, _QWORD *a4, _QWORD *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;

  if (a4 != a5)
  {
    v5 = (_QWORD *)*a5;
    if (result != a3)
    {
      v6 = 1;
      if (v5 != a4)
      {
        v7 = a4;
        do
        {
          v7 = (_QWORD *)v7[1];
          ++v6;
        }
        while (v7 != v5);
      }
      *(_QWORD *)(a3 + 16) -= v6;
      *(_QWORD *)(result + 16) += v6;
    }
    v8 = *a4;
    *(_QWORD *)(v8 + 8) = v5[1];
    *(_QWORD *)v5[1] = v8;
    v9 = *a2;
    *(_QWORD *)(v9 + 8) = a4;
    *a4 = v9;
    *a2 = (uint64_t)v5;
    v5[1] = a2;
  }
  return result;
}

SipState *BambiTransferState::BambiTransferState(SipState *a1, _QWORD *a2, const std::string *a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  std::string __p;

  v6 = *a2;
  v7 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(*a2 + 152));
  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(v6 + 144);
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v7;
  SipState::SipState(a1, *(const SipUserAgent **)(__p.__r_.__value_.__r.__words[0] + 144));
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.ect.state");
  ImsLogContainer::ImsLogContainer((uint64_t)a1 + 192, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *((_QWORD *)a1 + 37) = 0;
  *((_QWORD *)a1 + 38) = 0;
  *(_QWORD *)a1 = &off_1E78C4638;
  *((_QWORD *)a1 + 1) = &unk_1E78C4698;
  *((_QWORD *)a1 + 24) = &unk_1E78C46C8;
  *((_QWORD *)a1 + 39) = *a2;
  v10 = a2[1];
  *((_QWORD *)a1 + 40) = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 16);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  return a1;
}

void sub_1BEF02A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  SipState *v15;

  if (a15 < 0)
    operator delete(__p);
  SipState::~SipState(v15);
  _Unwind_Resume(a1);
}

void BambiTransferState::~BambiTransferState(BambiTransferState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78C4638;
  *((_QWORD *)this + 1) = &unk_1E78C4698;
  *((_QWORD *)this + 24) = &unk_1E78C46C8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *((_QWORD *)this + 24) = off_1E78CFE68;
  if (*((char *)this + 247) < 0)
    operator delete(*((void **)this + 28));
  if (*((char *)this + 223) < 0)
    operator delete(*((void **)this + 25));
  SipState::~SipState(this);
}

{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiTransferState::~BambiTransferState(BambiTransferState *this)
{
  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 8));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 192));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferState *)((char *)this - 192));
  JUMPOUT(0x1C3B87100);
}

void BambiTransferState::handleParticipantStateChange(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  _QWORD *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  _QWORD v11[2];
  int v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _QWORD *v16;
  std::__shared_weak_count *v17;

  if (a4 == 10)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 320);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      v17 = v6;
      if (v6)
      {
        v7 = v6;
        v8 = *(_QWORD **)(a1 + 312);
        v16 = v8;
        if (v8)
        {
          v13 = 0u;
          v14 = 0u;
          v15 = 0u;
          v11[0] = &off_1E78B7238;
          v11[1] = &_bambiDomain;
          v12 = 0x40000000;
          BambiTransferHandler::endTransfer(v8, (const ImsResult *)v11);
          ImsResult::~ImsResult((ImsResult *)v11);
        }
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
  }
}

void sub_1BEF02BFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 32);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferState::stateMachine(BambiTransferState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
    goto LABEL_7;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    goto LABEL_7;
  v4 = v3;
  v5 = *((_QWORD *)this + 39);
  v6 = v5 + 168;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      return v6;
    goto LABEL_7;
  }
  if (!v5)
  {
LABEL_7:
    v10 = *((_QWORD *)this + 24);
    v9 = (char *)this + 192;
    v11 = (*(uint64_t (**)(char *))(v10 + 56))(v9);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"BambiTransferState::stateMachine() - state machine is null", 58);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6 = 0;
    *(_BYTE *)(v11 + 17) = 0;
  }
  return v6;
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
    goto LABEL_7;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    goto LABEL_7;
  v4 = v3;
  v5 = *((_QWORD *)this + 39);
  v6 = v5 + 168;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v4);
    if (v5)
      return v6;
    goto LABEL_7;
  }
  if (!v5)
  {
LABEL_7:
    v10 = *((_QWORD *)this + 24);
    v9 = (char *)this + 192;
    v11 = (*(uint64_t (**)(char *))(v10 + 56))(v9);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v9 + 16))(v9, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"BambiTransferState::stateMachine() - state machine is null", 58);
    *(_BYTE *)(v11 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v6 = 0;
    *(_BYTE *)(v11 + 17) = 0;
  }
  return v6;
}

SipState *BambiTransferWaitingForHoldState::BambiTransferWaitingForHoldState(SipState *a1, _QWORD *a2, const std::string *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  BambiTransferState::BambiTransferState(a1, v10, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)a1 = &off_1E78C4728;
  *((_QWORD *)a1 + 1) = &unk_1E78C4790;
  *((_QWORD *)a1 + 24) = &unk_1E78C47C0;
  return a1;
}

void sub_1BEF02E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferWaitingForHoldState::checkForHeldParticipants(BambiTransferWaitingForHoldState *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::__shared_weak_count *v25;

  v25 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2 || (v25 = std::__shared_weak_count::lock(v2)) == 0 || (v3 = *((_QWORD *)this + 39), (v24 = v3) == 0))
  {
    v15 = *((_QWORD *)this + 24);
    v14 = (char *)this + 192;
    v16 = (*(uint64_t (**)(char *))(v15 + 56))(v14);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"BambiTransferWaitingForHoldState::checkForHeldParticipants() - transfer handler is null", 87);
    *(_BYTE *)(v16 + 17) = 0;
    v17 = (_BYTE *)(v16 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_24:
    v7 = 0;
    *v17 = 0;
    goto LABEL_25;
  }
  v4 = (*(uint64_t (**)(BambiTransferWaitingForHoldState *))(*(_QWORD *)this + 32))(this);
  if (!v4)
  {
    v22 = *((_QWORD *)this + 24);
    v21 = (char *)this + 192;
    v23 = (*(uint64_t (**)(char *))(v22 + 56))(v21);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v21 + 16))(v21, v23);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"BambiTransferWaitingForHoldState::checkForHeldParticipants() - state machine is null", 84);
    *(_BYTE *)(v23 + 17) = 0;
    v17 = (_BYTE *)(v23 + 17);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_24;
  }
  v5 = *(uint64_t **)(v3 + 416);
  v6 = *(uint64_t **)(v3 + 424);
  if (v5 == v6)
  {
LABEL_22:
    v7 = 0;
    goto LABEL_25;
  }
  LODWORD(v7) = 0;
  do
  {
    v8 = *v5;
    v9 = (std::__shared_weak_count *)v5[1];
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      v12 = *(_DWORD *)(v8 + 240);
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      v12 = *(_DWORD *)(v8 + 240);
    }
    if (v12 >= 2)
      v7 = v7;
    else
      v7 = (v7 + 1);
    v5 += 2;
  }
  while (v5 != v6);
  if (!(_DWORD)v7)
  {
    if (*(_QWORD *)(v24 + 416) != *(_QWORD *)(v24 + 424))
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, 2);
    goto LABEL_22;
  }
LABEL_25:
  if (v25)
  {
    v18 = (unint64_t *)&v25->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  return v7;
}

void sub_1BEF030A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiTransferWaitingForHoldState::handleTimer(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string __p;
  _QWORD v28[2];
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;

  v33 = 0;
  v34 = 0;
  v3 = (std::__shared_weak_count *)a1[40];
  if (!v3)
  {
    v5 = 0;
    goto LABEL_21;
  }
  v5 = std::__shared_weak_count::lock(v3);
  v34 = v5;
  if (!v5 || (v6 = (_QWORD *)a1[39], (v33 = v6) == 0))
  {
LABEL_21:
    v23 = a1[24];
    v22 = a1 + 24;
    v24 = (*(uint64_t (**)(_QWORD *))(v23 + 56))(v22);
    (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))(v22, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"BambiTransferWaitingForHoldState::handleTimer() - transfer handler is null", 74);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (!v5)
      return;
    goto LABEL_28;
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v8 = *(unsigned __int8 *)(a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8 == 21
    && (v9 >= 0 ? (v10 = (uint64_t *)a2) : (v10 = *(uint64_t **)a2),
        (v11 = *v10, v12 = v10[1], v13 = *(uint64_t *)((char *)v10 + 13), v11 == 0x46676E6974696157)
      ? (v14 = v12 == 0x6954646C6F48726FLL)
      : (v14 = 0),
        v14 ? (v15 = v13 == 0x74756F656D695464) : (v15 = 0),
        v15))
  {
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v28[0] = &off_1E78B7238;
    v28[1] = &_bambiDomain;
    v29 = 1073741830;
    BambiTransferHandler::endTransfer(v6, (const ImsResult *)v28);
    ImsResult::~ImsResult((ImsResult *)v28);
  }
  else
  {
    v17 = v6[2];
    v16 = v6 + 2;
    v18 = (*(uint64_t (**)(_QWORD *))(v17 + 56))(v16);
    (*(void (**)(_QWORD *, uint64_t))(*v16 + 16))(v16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Unknown timer ", 14);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" for state ", 11);
    *(_BYTE *)(v18 + 17) = 0;
    if (v7)
    {
      v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v19);
      if (*(char *)(v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
      }
      else
      {
        v21 = *(_OWORD *)v20;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
    }
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 32))(v18, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_28:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEF0338C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  ImsResult::~ImsResult((ImsResult *)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 - 64);
  _Unwind_Resume(a1);
}

void BambiTransferWaitingForHoldState::enterState(std::__shared_weak_count **this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_weak_owners;
  unint64_t v5;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  ImsPrefs *v9;
  std::__shared_weak_count *shared_owners;
  std::__shared_weak_count *v11;
  void *v12;
  void *v13;
  unsigned int v14;
  ImsPrefs *v15;
  void *TransferWaitForHoldTimeoutKey;
  void *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  void *__p;
  std::__shared_weak_count *v29;
  char v30;
  _OWORD v31[24];
  uint64_t v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  _BYTE v35[24];
  _BYTE *v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (!BambiTransferWaitingForHoldState::checkForHeldParticipants((BambiTransferWaitingForHoldState *)this))
    return;
  v3 = this[37];
  v2 = this[38];
  if (v2)
  {
    p_shared_weak_owners = (unint64_t *)&v2->__shared_weak_owners_;
    do
      v5 = __ldxr(p_shared_weak_owners);
    while (__stxr(v5 + 1, p_shared_weak_owners));
    do
      v6 = __ldxr(p_shared_weak_owners);
    while (__stxr(v6 + 1, p_shared_weak_owners));
  }
  v33 = 0;
  v34 = 0;
  v7 = this[40];
  if (v7 && (v34 = std::__shared_weak_count::lock(v7)) != 0)
  {
    v8 = this[39];
    v33 = v8;
  }
  else
  {
    v8 = 0;
  }
  v32 = 0;
  memset(v31, 0, sizeof(v31));
  ImsPrefs::ImsPrefs((ImsPrefs *)v31);
  if (v8)
  {
    __p = 0;
    v29 = 0;
    shared_owners = (std::__shared_weak_count *)v8[6].__shared_owners_;
    if (shared_owners)
    {
      shared_owners = std::__shared_weak_count::lock(shared_owners);
      v11 = shared_owners;
      v29 = shared_owners;
      if (shared_owners)
      {
        shared_owners = (std::__shared_weak_count *)v8[6].__vftable;
        __p = shared_owners;
      }
    }
    else
    {
      v11 = 0;
    }
    v15 = (ImsPrefs *)SipStack::prefs((SipStack *)shared_owners);
    TransferWaitForHoldTimeoutKey = ImsPrefs::getTransferWaitForHoldTimeoutKey(v15);
    v17 = ImsPrefs::prefWithKey(v15, (void **)TransferWaitForHoldTimeoutKey);
    if (v17)
    {
      v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v17 + 56))(v17);
      if (!v11)
        goto LABEL_26;
    }
    else
    {
      v14 = *((_DWORD *)TransferWaitForHoldTimeoutKey + 15);
      if (!v11)
        goto LABEL_26;
    }
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
LABEL_26:
    if (v14)
      goto LABEL_27;
    goto LABEL_37;
  }
  v12 = ImsPrefs::getTransferWaitForHoldTimeoutKey(v9);
  v13 = ImsPrefs::prefWithKey((ImsPrefs *)v31, (void **)v12);
  if (v13)
  {
    v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 56))(v13);
    if (v14)
      goto LABEL_27;
  }
  else
  {
    v14 = *((_DWORD *)v12 + 15);
    if (v14)
    {
LABEL_27:
      std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForHoldTimeout");
      if (v2)
      {
        v20 = (unint64_t *)&v2->__shared_weak_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v36 = 0;
      v22 = operator new(0x20uLL);
      *v22 = &off_1E78C4AA8;
      v22[1] = this;
      v22[2] = v3;
      v22[3] = v2;
      v36 = v22;
      SipTimerContainer::startTimer(this + 3, (uint64_t)&__p, (uint64_t)v35, v14, 0);
      v23 = v36;
      if (v36 == v35)
      {
        v24 = 4;
        v23 = v35;
      }
      else
      {
        if (!v36)
          goto LABEL_35;
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
LABEL_35:
      if (v30 < 0)
        operator delete(__p);
    }
  }
LABEL_37:
  ImsPrefs::~ImsPrefs((ImsPrefs *)v31);
  v25 = v34;
  if (v34)
  {
    v26 = (unint64_t *)&v34->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_1BEF036B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  std::__shared_weak_count *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v20;
  uint64_t v21;

  v20 = *(_QWORD **)(v18 - 80);
  if (v20 == v17)
  {
    v21 = 4;
    v20 = (_QWORD *)(v18 - 104);
  }
  else
  {
    if (!v20)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_6:
  if (a15 < 0)
    operator delete(__p);
  ImsPrefs::~ImsPrefs((ImsPrefs *)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v18 - 120);
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(a1);
}

void BambiTransferWaitingForHoldState::handleParticipantStateChange(BambiTransferWaitingForHoldState *this, uint64_t a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  _QWORD *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;

  if (a4 != 10)
  {
    if (a4 == 2)
      BambiTransferWaitingForHoldState::checkForHeldParticipants(this);
    return;
  }
  v18 = 0;
  v19 = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v5)
  {
    v6 = 0;
    goto LABEL_9;
  }
  v6 = std::__shared_weak_count::lock(v5);
  v19 = v6;
  if (!v6 || (v7 = (_QWORD *)*((_QWORD *)this + 39), (v18 = v7) == 0))
  {
LABEL_9:
    v9 = *((_QWORD *)this + 24);
    v8 = (char *)this + 192;
    v10 = (*(uint64_t (**)(char *))(v9 + 56))(v8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v8 + 16))(v8, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"BambiTransferWaitingForHoldState::handleParticipantStateChange() - transfer handler is null", 91);
    *(_BYTE *)(v10 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v10 + 17) = 0;
    if (!v6)
      return;
    goto LABEL_10;
  }
  v15 = 0u;
  v16 = 0u;
  v17 = 0u;
  v13[0] = &off_1E78B7238;
  v13[1] = &_bambiDomain;
  v14 = 0x40000000;
  BambiTransferHandler::endTransfer(v7, (const ImsResult *)v13);
  ImsResult::~ImsResult((ImsResult *)v13);
LABEL_10:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BEF038A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

SipState *BambiTransferTransferRequestedState::BambiTransferTransferRequestedState(SipState *a1, _QWORD *a2, const std::string *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  BambiTransferState::BambiTransferState(a1, v10, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)a1 = &off_1E78C4820;
  *((_QWORD *)a1 + 1) = &unk_1E78C4888;
  *((_QWORD *)a1 + 24) = &unk_1E78C48B8;
  return a1;
}

void sub_1BEF03968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiTransferTransferRequestedState::handleTimer(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  BOOL v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *p_shared_owners;
  unint64_t v26;
  std::string __p;
  _QWORD v28[2];
  int v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  _QWORD *v33;
  std::__shared_weak_count *v34;

  v33 = 0;
  v34 = 0;
  v3 = (std::__shared_weak_count *)a1[40];
  if (!v3)
  {
    v5 = 0;
    goto LABEL_21;
  }
  v5 = std::__shared_weak_count::lock(v3);
  v34 = v5;
  if (!v5 || (v6 = (_QWORD *)a1[39], (v33 = v6) == 0))
  {
LABEL_21:
    v23 = a1[24];
    v22 = a1 + 24;
    v24 = (*(uint64_t (**)(_QWORD *))(v23 + 56))(v22);
    (*(void (**)(_QWORD *, uint64_t))(*v22 + 16))(v22, v24);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"BambiTransferTransferRequestedState::handleTimer() - transfer handler is null", 77);
    *(_BYTE *)(v24 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v24 + 17) = 0;
    if (!v5)
      return;
    goto LABEL_28;
  }
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v8 = *(unsigned __int8 *)(a2 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a2 + 8);
  if (v8 == 21
    && (v9 >= 0 ? (v10 = (uint64_t *)a2) : (v10 = *(uint64_t **)a2),
        (v11 = *v10, v12 = v10[1], v13 = *(uint64_t *)((char *)v10 + 13), v11 == 0x46676E6974696157)
      ? (v14 = v12 == 0x69546E696F4A726FLL)
      : (v14 = 0),
        v14 ? (v15 = v13 == 0x74756F656D69546ELL) : (v15 = 0),
        v15))
  {
    v30 = 0u;
    v31 = 0u;
    v32 = 0u;
    v28[0] = &off_1E78B7238;
    v28[1] = &_bambiDomain;
    v29 = 1073741830;
    BambiTransferHandler::endTransfer(v6, (const ImsResult *)v28);
    ImsResult::~ImsResult((ImsResult *)v28);
  }
  else
  {
    v17 = v6[2];
    v16 = v6 + 2;
    v18 = (*(uint64_t (**)(_QWORD *))(v17 + 56))(v16);
    (*(void (**)(_QWORD *, uint64_t))(*v16 + 16))(v16, v18);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Unknown timer ", 14);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 32))(v18, a2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" for state ", 11);
    *(_BYTE *)(v18 + 17) = 0;
    if (v7)
    {
      v19 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v20 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v19);
      if (*(char *)(v20 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)v20, *(_QWORD *)(v20 + 8));
      }
      else
      {
        v21 = *(_OWORD *)v20;
        __p.__r_.__value_.__r.__words[2] = *(_QWORD *)(v20 + 16);
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
      }
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "Unknown");
    }
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v18 + 32))(v18, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
LABEL_28:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v26 = __ldaxr(p_shared_owners);
  while (__stlxr(v26 - 1, p_shared_owners));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1BEF03C4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  ImsResult::~ImsResult((ImsResult *)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 - 64);
  _Unwind_Resume(a1);
}

void BambiTransferTransferRequestedState::enterState(BambiTransferTransferRequestedState *this)
{
  std::__shared_weak_count *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  void *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t *v27;
  unint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  ImsPrefs *v49;
  void *TransferWaitForJoinTimeoutKey;
  void *v51;
  unsigned int v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  void *__p;
  std::__shared_weak_count *v62;
  char v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  _QWORD v66[10];
  std::__shared_weak_count *v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  _QWORD v70[9];
  _QWORD *v71;
  std::__shared_weak_count *v72;
  _BYTE v73[24];
  _BYTE *v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  v71 = 0;
  v72 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2
    || (v72 = std::__shared_weak_count::lock(v2)) == 0
    || (v3 = (_QWORD *)*((_QWORD *)this + 39), (v71 = v3) == 0))
  {
    v19 = *((_QWORD *)this + 24);
    v18 = (char *)this + 192;
    v20 = (*(uint64_t (**)(char *))(v19 + 56))(v18);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v18 + 16))(v18, v20);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"BambiTransferTransferRequestedState::enterState() - transfer handler is null", 76);
    *(_BYTE *)(v20 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v20 + 17) = 0;
    goto LABEL_19;
  }
  v4 = v3[52];
  v5 = v3[53];
  if (v4 == v5)
    goto LABEL_19;
  v7 = *(void **)v4;
  v6 = *(std::__shared_weak_count **)(v4 + 8);
  __p = *(void **)v4;
  v62 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v4 = v3[52];
    v5 = v3[53];
  }
  if ((unint64_t)(v5 - v4) <= 0x10)
    std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
  v10 = *(_QWORD *)(v4 + 16);
  v11 = *(std::__shared_weak_count **)(v4 + 24);
  v66[9] = v10;
  v67 = v11;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v14 = *(std::__shared_weak_count **)(v10 + 152);
  if (v14)
  {
    v15 = *(_QWORD *)(v10 + 144);
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    v68 = 0;
    v69 = std::__shared_weak_count::lock(v14);
    if (v69)
      v68 = v15;
  }
  else
  {
    v68 = 0;
    v69 = 0;
  }
  (*(void (**)(_QWORD *__return_ptr, void *, uint64_t *, uint64_t))(*(_QWORD *)v7 + 104))(v70, v7, &v68, 1);
  ImsResult::~ImsResult((ImsResult *)v70);
  v24 = v69;
  if (v69)
  {
    v25 = (unint64_t *)&v69->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (v14)
    std::__shared_weak_count::__release_weak(v14);
  if (v67)
  {
    v27 = &v67->__shared_owners_;
    do
      v28 = __ldaxr((unint64_t *)v27);
    while (__stlxr(v28 - 1, (unint64_t *)v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  if (v62)
  {
    v29 = &v62->__shared_owners_;
    do
      v30 = __ldaxr((unint64_t *)v29);
    while (__stlxr(v30 - 1, (unint64_t *)v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v31 = v71[52];
  if ((unint64_t)(v71[53] - v31) <= 0x10)
    std::vector<unsigned short>::__throw_out_of_range[abi:ne180100]();
  v32 = *(void **)(v31 + 16);
  v33 = *(std::__shared_weak_count **)(v31 + 24);
  __p = v32;
  v62 = v33;
  if (v33)
  {
    v34 = (unint64_t *)&v33->__shared_owners_;
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v64 = 0;
  v65 = 0;
  (*(void (**)(_QWORD *__return_ptr, void *, uint64_t *, _QWORD))(*(_QWORD *)v32 + 104))(v66, v32, &v64, 0);
  ImsResult::~ImsResult((ImsResult *)v66);
  v36 = v65;
  if (v65)
  {
    v37 = (unint64_t *)&v65->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  if (v62)
  {
    v39 = &v62->__shared_owners_;
    do
      v40 = __ldaxr((unint64_t *)v39);
    while (__stlxr(v40 - 1, (unint64_t *)v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
  v42 = *((_QWORD *)this + 37);
  v41 = (std::__shared_weak_count *)*((_QWORD *)this + 38);
  if (v41)
  {
    v43 = (unint64_t *)&v41->__shared_weak_owners_;
    do
      v44 = __ldxr(v43);
    while (__stxr(v44 + 1, v43));
    do
      v45 = __ldxr(v43);
    while (__stxr(v45 + 1, v43));
  }
  v46 = v71;
  __p = 0;
  v62 = 0;
  v47 = (std::__shared_weak_count *)v71[19];
  if (v47)
  {
    v47 = std::__shared_weak_count::lock(v47);
    v48 = v47;
    v62 = v47;
    if (v47)
    {
      v47 = (std::__shared_weak_count *)v46[18];
      __p = v47;
    }
  }
  else
  {
    v48 = 0;
  }
  v49 = (ImsPrefs *)SipStack::prefs((SipStack *)v47);
  TransferWaitForJoinTimeoutKey = ImsPrefs::getTransferWaitForJoinTimeoutKey(v49);
  v51 = ImsPrefs::prefWithKey(v49, (void **)TransferWaitForJoinTimeoutKey);
  if (v51)
  {
    v52 = (*(uint64_t (**)(void *))(*(_QWORD *)v51 + 56))(v51);
    if (!v48)
      goto LABEL_73;
  }
  else
  {
    v52 = *((_DWORD *)TransferWaitForJoinTimeoutKey + 15);
    if (!v48)
      goto LABEL_73;
  }
  v53 = (unint64_t *)&v48->__shared_owners_;
  do
    v54 = __ldaxr(v53);
  while (__stlxr(v54 - 1, v53));
  if (!v54)
  {
    ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
    std::__shared_weak_count::__release_weak(v48);
  }
LABEL_73:
  if (v52)
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForJoinTimeout");
    if (v41)
    {
      v55 = (unint64_t *)&v41->__shared_weak_owners_;
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v74 = 0;
    v57 = operator new(0x20uLL);
    *v57 = &off_1E78C4B28;
    v57[1] = this;
    v57[2] = v42;
    v57[3] = v41;
    v74 = v57;
    SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&__p, (uint64_t)v73, v52, 0);
    v59 = v74;
    if (v74 == v73)
    {
      v60 = 4;
      v59 = v73;
    }
    else
    {
      if (!v74)
        goto LABEL_82;
      v60 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t))(*v59 + 8 * v60))(v59, v58);
LABEL_82:
    if (v63 < 0)
      operator delete(__p);
  }
  if (v41)
  {
    std::__shared_weak_count::__release_weak(v41);
    std::__shared_weak_count::__release_weak(v41);
  }
LABEL_19:
  v21 = v72;
  if (v72)
  {
    v22 = (unint64_t *)&v72->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
}

void sub_1BEF04190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28)
{
  std::__shared_weak_count *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v32;
  uint64_t v33;

  v32 = *(_QWORD **)(v30 - 80);
  if (v32 == v29)
  {
    v33 = 4;
    v32 = (_QWORD *)(v30 - 104);
  }
  else
  {
    if (!v32)
      goto LABEL_6;
    v33 = 5;
  }
  (*(void (**)(void))(*v32 + 8 * v33))();
LABEL_6:
  if (a14 < 0)
    operator delete(__p);
  if (v28)
  {
    std::__shared_weak_count::__release_weak(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 120);
  _Unwind_Resume(a1);
}

void BambiTransferTransferRequestedState::handleParticipantStateChange(_QWORD *a1, uint64_t *a2, uint64_t a3, int a4)
{
  std::__shared_weak_count *v5;
  _QWORD *v8;
  uint64_t v9;
  uint64_t *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD v25[2];
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;

  v30 = 0;
  v31 = 0;
  v5 = (std::__shared_weak_count *)a1[40];
  if (!v5 || (v31 = std::__shared_weak_count::lock(v5)) == 0 || (v8 = (_QWORD *)a1[39], (v30 = v8) == 0))
  {
    v18 = a1[24];
    v17 = a1 + 24;
    v19 = (*(uint64_t (**)(_QWORD *))(v18 + 56))(v17);
    (*(void (**)(_QWORD *, uint64_t))(*v17 + 16))(v17, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"BambiTransferTransferRequestedState::handleParticipantStateChange() - transfer handler is null", 94);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_16:
    *(_BYTE *)(v19 + 17) = 0;
    goto LABEL_17;
  }
  v9 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  if (!v9)
  {
    v24 = a1[24];
    v23 = a1 + 24;
    v19 = (*(uint64_t (**)(_QWORD *))(v24 + 56))(v23);
    (*(void (**)(_QWORD *, uint64_t))(*v23 + 16))(v23, v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"BambiTransferTransferRequestedState::handleParticipantStateChange() - state machine is null", 91);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_16;
  }
  v10 = (uint64_t *)v8[52];
  if (v10 == (uint64_t *)v8[53])
    goto LABEL_17;
  v12 = *v10;
  v11 = (std::__shared_weak_count *)v10[1];
  if (!v11)
  {
    if (*a2 != v12)
      goto LABEL_17;
    goto LABEL_25;
  }
  p_shared_owners = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(p_shared_owners);
  while (__stxr(v14 + 1, p_shared_owners));
  v15 = *a2;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v15 == v12)
  {
LABEL_25:
    if (a4 == 10)
    {
      v27 = 0u;
      v28 = 0u;
      v29 = 0u;
      v25[0] = &off_1E78B7238;
      v25[1] = &_bambiDomain;
      v26 = 0x40000000;
      BambiTransferHandler::endTransfer(v30, (const ImsResult *)v25);
      ImsResult::~ImsResult((ImsResult *)v25);
    }
    else if (a4 == 6)
    {
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 32))(v9, 3);
    }
  }
LABEL_17:
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BEF044B0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 64);
  _Unwind_Resume(a1);
}

SipState *BambiTransferTransferCompleteState::BambiTransferTransferCompleteState(SipState *a1, _QWORD *a2, const std::string *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  BambiTransferState::BambiTransferState(a1, v10, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)a1 = &off_1E78C4918;
  *((_QWORD *)a1 + 1) = &unk_1E78C4978;
  *((_QWORD *)a1 + 24) = &unk_1E78C49A8;
  return a1;
}

void sub_1BEF04578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiTransferTransferCompleteState::enterState(BambiTransferTransferCompleteState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  _QWORD *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD v10[2];
  int v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  _QWORD *v15;
  std::__shared_weak_count *v16;

  v15 = 0;
  v16 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 40);
  if (!v2)
  {
    v3 = 0;
    goto LABEL_6;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v16 = v3;
  if (!v3 || (v4 = (_QWORD *)*((_QWORD *)this + 39), (v15 = v4) == 0))
  {
LABEL_6:
    v6 = *((_QWORD *)this + 24);
    v5 = (char *)this + 192;
    v7 = (*(uint64_t (**)(char *))(v6 + 56))(v5);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"BambiTransferTransferCompleteState::enterState() - transfer handler is null", 75);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (!v3)
      return;
    goto LABEL_7;
  }
  v12 = 0u;
  v13 = 0u;
  v14 = 0u;
  v10[0] = &off_1E78B7238;
  v10[1] = &_bambiDomain;
  v11 = 0;
  BambiTransferHandler::endTransfer(v4, (const ImsResult *)v10);
  ImsResult::~ImsResult((ImsResult *)v10);
LABEL_7:
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v9 = __ldaxr(p_shared_owners);
  while (__stlxr(v9 - 1, p_shared_owners));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1BEF046AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 48);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferState::id(BambiTransferState *this)
{
  return 0;
}

void BambiTransferWaitingForHoldState::~BambiTransferWaitingForHoldState(BambiTransferWaitingForHoldState *this)
{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiTransferWaitingForHoldState::id(BambiTransferWaitingForHoldState *this)
{
  return 1;
}

void `non-virtual thunk to'BambiTransferWaitingForHoldState::~BambiTransferWaitingForHoldState(BambiTransferWaitingForHoldState *this)
{
  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 8));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 192));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferWaitingForHoldState *)((char *)this - 192));
  JUMPOUT(0x1C3B87100);
}

void BambiTransferTransferRequestedState::~BambiTransferTransferRequestedState(BambiTransferTransferRequestedState *this)
{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiTransferTransferRequestedState::id(BambiTransferTransferRequestedState *this)
{
  return 2;
}

void `non-virtual thunk to'BambiTransferTransferRequestedState::~BambiTransferTransferRequestedState(BambiTransferTransferRequestedState *this)
{
  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 8));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 192));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferRequestedState *)((char *)this - 192));
  JUMPOUT(0x1C3B87100);
}

void BambiTransferTransferCompleteState::~BambiTransferTransferCompleteState(BambiTransferTransferCompleteState *this)
{
  BambiTransferState::~BambiTransferState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiTransferTransferCompleteState::id(BambiTransferTransferCompleteState *this)
{
  return 3;
}

void `non-virtual thunk to'BambiTransferTransferCompleteState::~BambiTransferTransferCompleteState(BambiTransferTransferCompleteState *this)
{
  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 8));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 192));
}

{
  BambiTransferState::~BambiTransferState((BambiTransferTransferCompleteState *)((char *)this - 192));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C4AA8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C4AA8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C4AA8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C4AA8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF04A74(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0,std::allocator<BambiTransferWaitingForHoldState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C4B28;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C4B28;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C4B28;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C4B28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 80))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF04CDC(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0,std::allocator<BambiTransferTransferRequestedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t BambiCallAction::BambiCallAction(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  std::string __p;

  *(_QWORD *)a1 = &off_1E78B7B60;
  v6 = a1 + 8;
  std::string::basic_string[abi:ne180100]<0>(&__p, "bambi.call");
  ImsLogContainer::ImsLogContainer(v6, &__p, (const std::string *)(*a2 + 104));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)a1 = &off_1E78C4BA8;
  *(_QWORD *)(a1 + 8) = &unk_1E78C4C08;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 152));
  v8 = *a2;
  v7 = a2[1];
  if (v7)
  {
    v9 = (unint64_t *)(v7 + 16);
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(std::__shared_weak_count **)(a1 + 136);
  *(_QWORD *)(a1 + 128) = v8;
  *(_QWORD *)(a1 + 136) = v7;
  if (v11)
    std::__shared_weak_count::__release_weak(v11);
  *(_QWORD *)(a1 + 144) = a3;
  *(_QWORD *)(a1 + 256) = a1;
  v12 = *a2;
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a1 + 16));
  std::string::operator=((std::string *)(a1 + 224), (const std::string *)(v12 + 104));
  return a1;
}

void sub_1BEF04E58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;
  uint64_t v16;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;

  v18 = *(std::__shared_weak_count **)(v16 + 136);
  if (v18)
    std::__shared_weak_count::__release_weak(v18);
  v19 = *(std::__shared_weak_count **)(v16 + 120);
  if (v19)
    std::__shared_weak_count::__release_weak(v19);
  ImsLogContainer::~ImsLogContainer(v15);
  _Unwind_Resume(a1);
}

void BambiCallAction::enqueue(BambiCallAction *this)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unsigned int v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  _BYTE v21[24];
  _BYTE *v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v20 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    goto LABEL_24;
  v20 = std::__shared_weak_count::lock(v2);
  if (!v20)
    goto LABEL_24;
  v3 = *((_QWORD *)this + 16);
  if (!v3)
    goto LABEL_24;
  v5 = *((_QWORD *)this + 14);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
  }
  v9 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v3 + 360));
  v10 = *(_DWORD *)(SipUserAgent::config(*(SipUserAgent **)(*(_QWORD *)(v3 + 352) + 144)) + 592);
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (v12)
  {
    if (!v10)
      goto LABEL_22;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!v10)
      goto LABEL_22;
  }
  if (v4)
  {
    v13 = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v15 = operator new(0x20uLL);
  *v15 = &off_1E78C4E28;
  v15[1] = this;
  v15[2] = v5;
  v15[3] = v4;
  v22 = v15;
  SipTimerContainer::startTimer((_QWORD *)this + 19, (uint64_t)"PerformAnyway", (uint64_t)v21, v10, 0);
  v16 = v22;
  if (v22 == v21)
  {
    v17 = 4;
    v16 = v21;
  }
  else
  {
    if (!v22)
      goto LABEL_22;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_22:
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_24:
  if (v20)
  {
    v18 = (unint64_t *)&v20->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BEF05090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, char *a17)
{
  std::__shared_weak_count *v17;
  char *v18;
  char *v20;
  uint64_t v21;

  v20 = a17;
  if (a17 == v18)
  {
    v21 = 4;
    v20 = &a14;
  }
  else
  {
    if (!a17)
      goto LABEL_6;
    v21 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
LABEL_6:
  if (v17)
  {
    std::__shared_weak_count::__release_weak(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

void BambiCallAction::handleTimer(_QWORD *a1, unsigned __int8 *a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  const char *v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[9];

  v3 = a2[23];
  v4 = *((_QWORD *)a2 + 1);
  if ((v3 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  if (v5 != 6)
  {
    if (v5 != 13)
      return;
    if ((v3 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a2, "PerformAnyway", v4))
        return;
    }
    else if (a2[23])
    {
      v6 = "PerformAnyway";
      while (*a2 == *(unsigned __int8 *)v6)
      {
        ++a2;
        ++v6;
        if (!--v3)
          goto LABEL_19;
      }
      return;
    }
LABEL_19:
    v8 = (*(uint64_t (**)(_QWORD *))(a1[1] + 48))(a1 + 1);
    (*(void (**)(_QWORD *, uint64_t))(a1[1] + 16))(a1 + 1, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"timed out waiting for prerequisites. Continuing.", 48);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(_QWORD *__return_ptr, _QWORD *))(*a1 + 40))(v24, a1);
    ImsResult::~ImsResult((ImsResult *)v24);
    v9 = a1[18];
    v10 = (std::__shared_weak_count *)a1[15];
    v22 = a1[14];
    if (v10)
    {
      v23 = std::__shared_weak_count::lock(v10);
      if (v23)
      {
        BambiCallActivity::removeCallAction(v9, &v22);
        v11 = v23;
        if (!v23)
          return;
        p_shared_owners = (unint64_t *)&v23->__shared_owners_;
        do
          v13 = __ldaxr(p_shared_owners);
        while (__stlxr(v13 - 1, p_shared_owners));
LABEL_31:
        if (!v13)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        return;
      }
    }
    else
    {
      v23 = 0;
    }
    goto LABEL_35;
  }
  if ((v3 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "Cancel", v4))
      return;
LABEL_26:
    v15 = a1[1];
    v14 = a1 + 1;
    v16 = (*(uint64_t (**)(_QWORD *))(v15 + 48))(v14);
    (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(v14, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"timed out waiting for prerequisites. Canceling.", 47);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    v17 = v14[17];
    v18 = (std::__shared_weak_count *)v14[14];
    v20 = v14[13];
    if (v18)
    {
      v21 = std::__shared_weak_count::lock(v18);
      if (v21)
      {
        BambiCallActivity::removeCallAction(v17, &v20);
        v11 = v21;
        if (!v21)
          return;
        v19 = (unint64_t *)&v21->__shared_owners_;
        do
          v13 = __ldaxr(v19);
        while (__stlxr(v13 - 1, v19));
        goto LABEL_31;
      }
    }
LABEL_35:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (!a2[23])
    goto LABEL_26;
  v7 = "Cancel";
  while (*a2 == *(unsigned __int8 *)v7)
  {
    ++a2;
    ++v7;
    if (!--v3)
      goto LABEL_26;
  }
}

void sub_1BEF05370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

double BambiCallAction::perform@<D0>(BambiCallAction *this@<X0>, uint64_t a2@<X8>)
{
  double result;

  SipTimerContainer::cancelAllTimers((BambiCallAction *)((char *)this + 152));
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

ImsOutStream *BambiCallAction::log(std::__shared_weak_count **this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *__p[2];
  char v11;
  void *v12;
  char v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count *v15;

  ((void (*)(void **__return_ptr))(*this)[1].__vftable)(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)" ", 1);
  *((_BYTE *)a2 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  v14 = 0;
  v15 = 0;
  v4 = this[17];
  if (!v4)
  {
    v5 = 0;
    goto LABEL_11;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v15 = v5;
  if (!v5 || (v6 = this[16], (v14 = v6) == 0))
  {
LABEL_11:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"Unknown Call", 12);
    *((_BYTE *)a2 + 17) = 0;
    if (!v5)
      return a2;
    goto LABEL_12;
  }
  ObfuscatedString::ObfuscatedString((uint64_t)__p, (const std::string *)&v6[19].__shared_owners_);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 56))(a2, __p);
  if (v13 < 0)
    operator delete(v12);
  if (v11 < 0)
    operator delete(__p[0]);
LABEL_12:
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  return a2;
}

void sub_1BEF05518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  ims::AccessNetwork::~AccessNetwork(&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void BambiCallRequireCallsHeldAction::createPrerequisites(_QWORD *a1, char **a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  BambiCall *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE *v19;
  int v20;
  std::string *v21;
  uint64_t v22;
  SipSession *v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  std::string::size_type v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  char *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  char *v51;
  char *v52;
  std::__shared_weak_count *size;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  __int128 v59;
  std::string v60;
  std::string __p;
  void *v62;
  int64x2_t v63;
  void *v64;
  _QWORD *v65;
  char v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  _QWORD v69[2];
  BambiCall *v70;
  std::__shared_weak_count *v71;
  char *v72;
  char *v73;
  uint64_t v74;

  v72 = 0;
  v73 = 0;
  v74 = 0;
  v70 = 0;
  v71 = 0;
  v3 = (std::__shared_weak_count *)a1[17];
  if (v3)
  {
    v5 = std::__shared_weak_count::lock(v3);
    v71 = v5;
    if (v5)
    {
      v6 = (BambiCall *)a1[16];
      v70 = v6;
      if (v6)
      {
        v7 = v5;
        v8 = BambiCall::bambiClient(v6);
        v69[0] = v6;
        v69[1] = v7;
        p_shared_owners = (unint64_t *)&v7->__shared_owners_;
        do
          v10 = __ldxr(p_shared_owners);
        while (__stxr(v10 + 1, p_shared_owners));
        BambiClient::unheldCallsExcludingCall(v8, &v72, v69);
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
        v12 = v72;
        v13 = v73;
        if (v72 != v73)
        {
          v14 = a1 + 1;
          do
          {
            v15 = *(_QWORD *)v12;
            v16 = (std::__shared_weak_count *)*((_QWORD *)v12 + 1);
            v67 = *(_QWORD *)v12;
            v68 = v16;
            if (v16)
            {
              v17 = (unint64_t *)&v16->__shared_owners_;
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            if ((BambiCall *)v15 == v70)
            {
              v22 = (*(uint64_t (**)(_QWORD *))(*v14 + 48))(a1 + 1);
              (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(a1 + 1, v22);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"createPrerequisites: my call shouldn't be in the unheld calls list", 66);
              *(_BYTE *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v22 + 17) = 0;
              if (v16)
                goto LABEL_42;
            }
            else
            {
              if ((*(_DWORD *)(v15 + 440) & 0xFFFFFFFE) == 2)
              {
                v19 = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v14 + 64))(a1 + 1);
                (*(void (**)(_QWORD *, _BYTE *))(*v14 + 16))(a1 + 1, v19);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v19 + 1), (uint64_t)"call ", 5);
                v19[17] = 0;
                ObfuscatedString::ObfuscatedString((uint64_t)&v62, (const std::string *)(v15 + 464));
                (*(void (**)(_BYTE *, void **))(*(_QWORD *)v19 + 56))(v19, &v62);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)v19 + 1), (uint64_t)" is already ", 12);
                v19[17] = 0;
                v20 = *(_DWORD *)(v15 + 440);
                if (v20 == 3)
                {
                  v21 = (std::string *)"held";
                }
                else if (v20 == 2)
                {
                  v21 = (std::string *)"holding";
                }
                else if (v20)
                {
                  v21 = (std::string *)"resumed";
                }
                else
                {
                  v21 = (std::string *)"resuming";
                }
                v60 = *v21;
                LoggableString::LoggableString(&__p, &v60);
                (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v19 + 40))(v19, &__p);
                (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                v19[17] = 0;
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__p.__r_.__value_.__l.__data_);
                if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v60.__r_.__value_.__l.__data_);
              }
              else
              {
                v23 = *(SipSession **)(v15 + 384);
                if (v23)
                {
                  if (SipSession::terminating(v23))
                  {
                    v24 = (*(uint64_t (**)(_QWORD *))(*v14 + 64))(a1 + 1);
                    (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(a1 + 1, v24);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"unheld call ", 12);
                    *(_BYTE *)(v24 + 17) = 0;
                    ObfuscatedString::ObfuscatedString((uint64_t)&v62, (const std::string *)(v15 + 464));
                    (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 56))(v24, &v62);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" is terminating. Don't need to hold it.", 39);
                    *(_BYTE *)(v24 + 17) = 0;
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  }
                  else
                  {
                    v25 = *(_QWORD *)(v15 + 384);
                    if (!v25 || !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v25 + 264))(v25))
                    {
                      v28 = (*(uint64_t (**)(_QWORD *))(*v14 + 64))(a1 + 1);
                      (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(a1 + 1, v28);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"need to put ", 12);
                      *(_BYTE *)(v28 + 17) = 0;
                      ObfuscatedString::ObfuscatedString((uint64_t)&v62, (const std::string *)(v15 + 464));
                      (*(void (**)(uint64_t, void **))(*(_QWORD *)v28 + 56))(v28, &v62);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)" on hold first", 14);
                      *(_BYTE *)(v28 + 17) = 0;
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(_BYTE *)(v28 + 17) = 0;
                      if (v66 < 0)
                        operator delete(v64);
                      if (v63.i8[15] < 0)
                        operator delete(v62);
                      v29 = operator new(0x140uLL);
                      v30 = (std::string::size_type)v29;
                      v29[1] = 0;
                      v29[2] = 0;
                      *v29 = &off_1E78C5138;
                      v62 = (void *)v15;
                      v63.i64[0] = (uint64_t)v16;
                      if (v16)
                      {
                        v31 = (unint64_t *)&v16->__shared_owners_;
                        do
                          v32 = __ldxr(v31);
                        while (__stxr(v32 + 1, v31));
                      }
                      BambiCallHoldAction::BambiCallHoldAction(v29 + 3, &v62, a1[18]);
                      v33 = (std::__shared_weak_count *)v63.i64[0];
                      if (v63.i64[0])
                      {
                        v34 = (unint64_t *)(v63.i64[0] + 8);
                        do
                          v35 = __ldaxr(v34);
                        while (__stlxr(v35 - 1, v34));
                        if (!v35)
                        {
                          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                          std::__shared_weak_count::__release_weak(v33);
                        }
                      }
                      v60.__r_.__value_.__r.__words[0] = v30 + 24;
                      v60.__r_.__value_.__l.__size_ = v30;
                      std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v60, (_QWORD *)(v30 + 136), v30 + 24);
                      v36 = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
                      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v60.__r_.__value_.__l.__data_;
                      *(_OWORD *)&v60.__r_.__value_.__l.__data_ = 0uLL;
                      v38 = a2[1];
                      v37 = (unint64_t)a2[2];
                      if ((unint64_t)v38 >= v37)
                      {
                        v59 = v36;
                        v39 = (v38 - *a2) >> 4;
                        v40 = v39 + 1;
                        if ((unint64_t)(v39 + 1) >> 60)
                          std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
                        v41 = v37 - (_QWORD)*a2;
                        if (v41 >> 3 > v40)
                          v40 = v41 >> 3;
                        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0)
                          v42 = 0xFFFFFFFFFFFFFFFLL;
                        else
                          v42 = v40;
                        v65 = a2 + 2;
                        v43 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v42);
                        v45 = &v43[16 * v39];
                        *(_OWORD *)v45 = v59;
                        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
                        v47 = *a2;
                        v46 = a2[1];
                        if (v46 == *a2)
                        {
                          v50 = vdupq_n_s64((unint64_t)v46);
                          v48 = &v43[16 * v39];
                        }
                        else
                        {
                          v48 = &v43[16 * v39];
                          do
                          {
                            v49 = *((_OWORD *)v46 - 1);
                            v46 -= 16;
                            *((_OWORD *)v48 - 1) = v49;
                            v48 -= 16;
                            *(_QWORD *)v46 = 0;
                            *((_QWORD *)v46 + 1) = 0;
                          }
                          while (v46 != v47);
                          v50 = *(int64x2_t *)a2;
                        }
                        v51 = v45 + 16;
                        *a2 = v48;
                        a2[1] = v45 + 16;
                        v63 = v50;
                        v52 = a2[2];
                        a2[2] = &v43[16 * v44];
                        v64 = v52;
                        v62 = (void *)v50.i64[0];
                        std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v62);
                        size = (std::__shared_weak_count *)v60.__r_.__value_.__l.__size_;
                        a2[1] = v51;
                        if (size)
                        {
                          v54 = (unint64_t *)&size->__shared_owners_;
                          do
                            v55 = __ldaxr(v54);
                          while (__stlxr(v55 - 1, v54));
                          if (!v55)
                          {
                            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                            std::__shared_weak_count::__release_weak(size);
                          }
                        }
                      }
                      else
                      {
                        *(_OWORD *)v38 = v36;
                        a2[1] = v38 + 16;
                      }
                      v16 = v68;
                      if (!v68)
                        goto LABEL_79;
LABEL_42:
                      v26 = (unint64_t *)&v16->__shared_owners_;
                      do
                        v27 = __ldaxr(v26);
                      while (__stlxr(v27 - 1, v26));
                      if (!v27)
                      {
                        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
                        std::__shared_weak_count::__release_weak(v16);
                      }
                      goto LABEL_79;
                    }
                    v24 = (*(uint64_t (**)(_QWORD *))(*v14 + 64))(a1 + 1);
                    (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(a1 + 1, v24);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"unheld call ", 12);
                    *(_BYTE *)(v24 + 17) = 0;
                    ObfuscatedString::ObfuscatedString((uint64_t)&v62, (const std::string *)(v15 + 464));
                    (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 56))(v24, &v62);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" has already terminated. Don't need to hold it.", 47);
                    *(_BYTE *)(v24 + 17) = 0;
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                  }
                }
                else
                {
                  v24 = (*(uint64_t (**)(_QWORD *))(*v14 + 64))(a1 + 1);
                  (*(void (**)(_QWORD *, uint64_t))(*v14 + 16))(a1 + 1, v24);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"unheld call ", 12);
                  *(_BYTE *)(v24 + 17) = 0;
                  ObfuscatedString::ObfuscatedString((uint64_t)&v62, (const std::string *)(v15 + 464));
                  (*(void (**)(uint64_t, void **))(*(_QWORD *)v24 + 56))(v24, &v62);
                  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)" has no session. Don't need to hold it.", 39);
                  *(_BYTE *)(v24 + 17) = 0;
                  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                }
                *(_BYTE *)(v24 + 17) = 0;
              }
              if (v66 < 0)
                operator delete(v64);
              if (v63.i8[15] < 0)
              {
                operator delete(v62);
                if (v16)
                  goto LABEL_42;
              }
              else if (v16)
              {
                goto LABEL_42;
              }
            }
LABEL_79:
            v12 += 16;
          }
          while (v12 != v13);
        }
      }
    }
  }
  v56 = v71;
  if (v71)
  {
    v57 = (unint64_t *)&v71->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v62 = &v72;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&v62);
}

void sub_1BEF05D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  uint64_t v33;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a33);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v33 - 128);
  a20 = (void *)(v33 - 112);
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t BambiCallRequireCallsHeldAction::prerequisitesMet(BambiCallRequireCallsHeldAction *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BambiCall *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  char v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t (*v13)(char *);
  uint64_t v14;
  char *v15;
  char *i;
  std::__shared_weak_count *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  SipSession *v21;
  uint64_t v22;
  int v23;
  std::string::size_type v24;
  const char *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  std::string v34;
  std::string __p;
  void *v36[2];
  char v37;
  void *v38;
  char v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  _QWORD v42[2];
  BambiCall *v43;
  std::__shared_weak_count *v44;
  char *v45;
  char *v46;
  uint64_t v47;

  v45 = 0;
  v46 = 0;
  v47 = 0;
  v43 = 0;
  v44 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v2)
  {
    v3 = std::__shared_weak_count::lock(v2);
    v44 = v3;
    if (v3)
    {
      v4 = (BambiCall *)*((_QWORD *)this + 16);
      v43 = v4;
      if (v4)
      {
        v5 = v3;
        v6 = BambiCall::bambiClient(v4);
        v42[0] = v4;
        v42[1] = v5;
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldxr(p_shared_owners);
        while (__stxr(v8 + 1, p_shared_owners));
        v9 = BambiClient::unheldCallsExcludingCall(v6, &v45, v42);
        do
          v10 = __ldaxr(p_shared_owners);
        while (__stlxr(v10 - 1, p_shared_owners));
        if (!v10)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
        v12 = *((_QWORD *)this + 1);
        v11 = (char *)this + 8;
        v13 = *(uint64_t (**)(char *))(v12 + 64);
        if ((v9 & 1) == 0)
        {
          v33 = v13(v11);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v33);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"no unheld calls", 15);
          *(_BYTE *)(v33 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v33 + 17) = 0;
          v28 = 1;
          goto LABEL_43;
        }
        v14 = v13(v11);
        (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"still waiting for these calls to go on hold or terminate:", 57);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        v15 = v45;
        for (i = v46; v15 != i; v15 += 16)
        {
          v18 = *(_QWORD *)v15;
          v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 1);
          v40 = *(_QWORD *)v15;
          v41 = v17;
          if (v17)
          {
            v19 = (unint64_t *)&v17->__shared_owners_;
            do
              v20 = __ldxr(v19);
            while (__stxr(v20 + 1, v19));
          }
          v21 = (SipSession *)*((_QWORD *)v43 + 48);
          if (v21 && SipSession::terminating(v21))
          {
            v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))(v11);
            (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v22);
            ObfuscatedString::ObfuscatedString((uint64_t)v36, (const std::string *)(v18 + 464));
            (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 56))(v22, v36);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)": terminating (", 15);
            *(_BYTE *)(v22 + 17) = 0;
            BambiCall::sipSessionState((BambiCall *)v18, &v34);
            LoggableString::LoggableString(&__p, &v34);
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 40))(v22, &__p);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)")", 1);
            *(_BYTE *)(v22 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_27;
          }
          v22 = (*(uint64_t (**)(char *))(*(_QWORD *)v11 + 64))(v11);
          (*(void (**)(char *, uint64_t))(*(_QWORD *)v11 + 16))(v11, v22);
          ObfuscatedString::ObfuscatedString((uint64_t)v36, (const std::string *)(v18 + 464));
          (*(void (**)(uint64_t, void **))(*(_QWORD *)v22 + 56))(v22, v36);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)": ", 2);
          *(_BYTE *)(v22 + 17) = 0;
          v23 = *(_DWORD *)(v18 + 440);
          if (v23 == 3)
          {
            v25 = "held";
          }
          else
          {
            if (v23 != 2)
            {
              if (v23)
              {
                *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)"resumed";
                v24 = 0x700000000000000;
              }
              else
              {
                *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)"resuming";
                v24 = 0x800000000000000;
              }
              goto LABEL_26;
            }
            v25 = "holding";
          }
          *(_OWORD *)&v34.__r_.__value_.__l.__data_ = *(_OWORD *)v25;
          v24 = *((_QWORD *)v25 + 2);
LABEL_26:
          v34.__r_.__value_.__r.__words[2] = v24;
          LoggableString::LoggableString(&__p, &v34);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v22 + 40))(v22, &__p);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_27:
          *(_BYTE *)(v22 + 17) = 0;
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v34.__r_.__value_.__l.__data_);
          if (v39 < 0)
            operator delete(v38);
          if (v37 < 0)
          {
            operator delete(v36[0]);
            if (v17)
            {
LABEL_37:
              v26 = (unint64_t *)&v17->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                std::__shared_weak_count::__release_weak(v17);
              }
            }
          }
          else if (v17)
          {
            goto LABEL_37;
          }
        }
      }
    }
  }
  v28 = 0;
LABEL_43:
  v29 = v44;
  if (v44)
  {
    v30 = (unint64_t *)&v44->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v36[0] = &v45;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)v36);
  return v28;
}

void sub_1BEF06258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,char a29,uint64_t a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a29);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a31);
  a21 = v31 - 112;
  std::vector<std::shared_ptr<BambiConferenceParticipant>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void BambiCallRequirePrepareAction::createPrerequisites(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  _QWORD *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t v21;
  unint64_t *p_shared_weak_owners;
  unint64_t v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  char *v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  __int128 v41;
  int64x2_t v42;
  uint64_t v43;
  unint64_t *p_shared_owners;
  unint64_t v45;
  __int128 v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  std::__shared_weak_count *v53;

  BambiCallRequireCallsHeldAction::createPrerequisites(a1, (char **)a2);
  v4 = (std::__shared_weak_count *)a1[17];
  if (!v4)
    return;
  v5 = std::__shared_weak_count::lock(v4);
  v47 = v5;
  if (!v5)
    return;
  v6 = v5;
  v7 = a1[16];
  if (!v7 || *(_BYTE *)(v7 + 457))
  {
LABEL_46:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v45 = __ldaxr(p_shared_owners);
    while (__stlxr(v45 - 1, p_shared_owners));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  v8 = (std::__shared_weak_count *)operator new(0x140uLL);
  v9 = v8;
  v8->__shared_owners_ = 0;
  v10 = (unint64_t *)&v8->__shared_owners_;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4EA8;
  v11 = &v8[1].__vftable;
  v52 = v7;
  v53 = v6;
  v12 = (unint64_t *)&v6->__shared_owners_;
  do
    v13 = __ldxr(v12);
  while (__stxr(v13 + 1, v12));
  v14 = a1[18];
  do
    v15 = __ldxr(v12);
  while (__stxr(v15 + 1, v12));
  v48 = v7;
  v49.i64[0] = (uint64_t)v6;
  BambiCallAction::BambiCallAction((uint64_t)&v8[1], &v48, v14);
  do
    v16 = __ldaxr(v12);
  while (__stlxr(v16 - 1, v12));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4D38;
  v9[1].__shared_owners_ = (uint64_t)&unk_1E78C4D98;
  v17 = v53;
  if (v53)
  {
    v18 = (unint64_t *)&v53->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  *(_QWORD *)&v46 = v11;
  *((_QWORD *)&v46 + 1) = v9;
  v20 = (std::__shared_weak_count *)v9[6].__vftable;
  if (v20)
  {
    if (v20->__shared_owners_ != -1)
      goto LABEL_31;
    do
      v21 = __ldxr(v10);
    while (__stxr(v21 + 1, v10));
    p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v23 = __ldxr(p_shared_weak_owners);
    while (__stxr(v23 + 1, p_shared_weak_owners));
    v9[5].__shared_weak_owners_ = (uint64_t)v11;
    v9[6].__vftable = (std::__shared_weak_count_vtbl *)v9;
    std::__shared_weak_count::__release_weak(v20);
  }
  else
  {
    do
      v24 = __ldxr(v10);
    while (__stxr(v24 + 1, v10));
    v25 = (unint64_t *)&v9->__shared_weak_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
    v9[5].__shared_weak_owners_ = (uint64_t)v11;
    v9[6].__vftable = (std::__shared_weak_count_vtbl *)v9;
  }
  do
    v27 = __ldaxr(v10);
  while (__stlxr(v27 - 1, v10));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
LABEL_31:
  v28 = *(_QWORD *)(a2 + 16);
  v29 = *(_OWORD **)(a2 + 8);
  if ((unint64_t)v29 >= v28)
  {
    v31 = ((uint64_t)v29 - *(_QWORD *)a2) >> 4;
    if ((unint64_t)(v31 + 1) >> 60)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v32 = v28 - *(_QWORD *)a2;
    v33 = v32 >> 3;
    if (v32 >> 3 <= (unint64_t)(v31 + 1))
      v33 = v31 + 1;
    if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
      v34 = 0xFFFFFFFFFFFFFFFLL;
    else
      v34 = v33;
    v51 = a2 + 16;
    v35 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v34);
    v37 = &v35[16 * v31];
    *(_OWORD *)v37 = v46;
    v39 = *(char **)a2;
    v38 = *(char **)(a2 + 8);
    if (v38 == *(char **)a2)
    {
      v42 = vdupq_n_s64((unint64_t)v38);
      v40 = &v35[16 * v31];
    }
    else
    {
      v40 = &v35[16 * v31];
      do
      {
        v41 = *((_OWORD *)v38 - 1);
        v38 -= 16;
        *((_OWORD *)v40 - 1) = v41;
        v40 -= 16;
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
      }
      while (v38 != v39);
      v42 = *(int64x2_t *)a2;
    }
    v30 = v37 + 16;
    *(_QWORD *)a2 = v40;
    *(_QWORD *)(a2 + 8) = v37 + 16;
    v49 = v42;
    v43 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 16) = &v35[16 * v36];
    v50 = v43;
    v48 = v42.i64[0];
    std::__split_buffer<std::shared_ptr<SipStack> const,std::allocator<std::shared_ptr<SipStack> const> &>::~__split_buffer((uint64_t)&v48);
  }
  else
  {
    *v29 = v46;
    v30 = v29 + 1;
  }
  *(_QWORD *)(a2 + 8) = v30;
  v6 = v47;
  if (v47)
    goto LABEL_46;
}

void sub_1BEF065EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;
  uint64_t v9;
  uint64_t v10;
  va_list va2;

  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v7 = va_arg(va2, _QWORD);
  v9 = va_arg(va2, _QWORD);
  v10 = va_arg(va2, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  _Unwind_Resume(a1);
}

uint64_t BambiCallRequirePrepareAction::prerequisitesMet(BambiCallRequirePrepareAction *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 16);
  if (v5 && *(_BYTE *)(v5 + 457))
    v6 = BambiCallRequireCallsHeldAction::prerequisitesMet(this);
  else
    v6 = 0;
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (!v8)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_1BEF066DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallStartAction::perform(BambiCallStartAction *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  ImsLogContainer *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  int v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  const ImsResult *v21;
  const ImsResult *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void (**v28)(ImsResult *__hidden);
  uint64_t *v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  SipTimerContainer::cancelAllTimers((BambiCallStartAction *)((char *)this + 152));
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v36[0] = &off_1E78B7238;
  v36[1] = &_bambiDomain;
  v37 = 0;
  ImsResult::~ImsResult((ImsResult *)v36);
  v34 = 0;
  v35 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v4
    || (v5 = std::__shared_weak_count::lock(v4), (v35 = v5) == 0)
    || (v6 = *((_QWORD *)this + 16), (v34 = v6) == 0))
  {
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    v28 = &off_1E78B7238;
    v29 = &_bambiDomain;
    v30 = 0x40000000;
    v22 = (const ImsResult *)ImsResult::operator<<<char [13]>((uint64_t)&v28, "Call in null");
    ImsResult::ImsResult((ImsResult *)a2, v22);
    goto LABEL_20;
  }
  v7 = v5;
  v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v8);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"starting call", 13);
  *(_BYTE *)(v8 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v8 + 17) = 0;
  v9 = *(ImsLogContainer **)(*((_QWORD *)this + 18) + 168);
  v26 = v6;
  v27 = v7;
  p_shared_owners = (unint64_t *)&v7->__shared_owners_;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v12 || (v13 = std::__shared_weak_count::lock(v12)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v14 = v13;
  BambiStrictCallHandler::startCallFromAction(v9, &v26, (uint64_t)&v28);
  v15 = (*(uint64_t (**)(uint64_t *, _QWORD))(*v29 + 24))(v29, v30);
  ImsResult::~ImsResult((ImsResult *)&v28);
  v16 = (unint64_t *)&v14->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  if (v15)
  {
    v31 = 0uLL;
    v32 = 0uLL;
    v33 = 0uLL;
    v28 = &off_1E78B7238;
    v29 = &_bambiDomain;
    v30 = 0x40000000;
    v21 = (const ImsResult *)ImsResult::operator<<<char [21]>((uint64_t)&v28, "unable to start call");
    ImsResult::ImsResult((ImsResult *)a2, v21);
LABEL_20:
    ImsResult::~ImsResult((ImsResult *)&v28);
    goto LABEL_21;
  }
  *(_OWORD *)(a2 + 24) = 0uLL;
  *(_OWORD *)(a2 + 40) = 0uLL;
  *(_OWORD *)(a2 + 56) = 0uLL;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
LABEL_21:
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEF069B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v6;
  va_list va;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v6 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [13]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF06A88(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void BambiCallAnswerAction::perform(BambiCallAnswerAction *this@<X0>, ImsResult *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const ImsResult *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD v25[2];
  int v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  _QWORD v32[2];
  int v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;

  SipTimerContainer::cancelAllTimers((BambiCallAnswerAction *)((char *)this + 152));
  v34 = 0u;
  v35 = 0u;
  v36 = 0u;
  v32[0] = &off_1E78B7238;
  v32[1] = &_bambiDomain;
  v33 = 0;
  ImsResult::~ImsResult((ImsResult *)v32);
  v30 = 0;
  v31 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v4
    && (v5 = std::__shared_weak_count::lock(v4), (v31 = v5) != 0)
    && (v6 = *((_QWORD *)this + 16), (v30 = v6) != 0))
  {
    v7 = v5;
    v8 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"answering call", 14);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    v23 = v6;
    v24 = v7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v11 || (v12 = std::__shared_weak_count::lock(v11)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v13 = v12;
    BambiStrictCallHandler::answerCallFromAction((uint64_t)&v23, (uint64_t)a2);
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
    v16 = v24;
    if (v24)
    {
      v17 = (unint64_t *)&v24->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
  }
  else
  {
    v27 = 0u;
    v28 = 0u;
    v29 = 0u;
    v25[0] = &off_1E78B7238;
    v25[1] = &_bambiDomain;
    v26 = 0x40000000;
    v19 = (const ImsResult *)ImsResult::operator<<<char [13]>((uint64_t)v25, "Call in null");
    ImsResult::ImsResult(a2, v19);
    ImsResult::~ImsResult((ImsResult *)v25);
  }
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BEF06CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t BambiCallResumeAction::prerequisitesMet(BambiCallResumeAction *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 440) == 2)
    {
      v7 = *((_QWORD *)this + 1);
      v6 = (char *)this + 8;
      v8 = (*(uint64_t (**)(char *))(v7 + 64))(v6);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"waiting for call to finish holding", 34);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v9 = 0;
      *(_BYTE *)(v8 + 17) = 0;
    }
    else
    {
      v9 = BambiCallRequireCallsHeldAction::prerequisitesMet(this);
    }
  }
  else
  {
    v9 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v9;
}

void sub_1BEF06E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallResumeAction::perform(BambiCallResumeAction *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  const ImsResult *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD v24[2];
  int v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  _QWORD v31[2];
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;

  SipTimerContainer::cancelAllTimers((BambiCallResumeAction *)((char *)this + 152));
  v33 = 0u;
  v34 = 0u;
  v35 = 0u;
  v31[0] = &off_1E78B7238;
  v31[1] = &_bambiDomain;
  v32 = 0;
  ImsResult::~ImsResult((ImsResult *)v31);
  v29 = 0;
  v30 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_20;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v30 = v5;
  if (!v5 || (v6 = *((_QWORD *)this + 16), (v29 = v6) == 0))
  {
LABEL_20:
    v26 = 0u;
    v27 = 0u;
    v28 = 0u;
    v24[0] = &off_1E78B7238;
    v24[1] = &_bambiDomain;
    v25 = 0x40000000;
    v19 = (const ImsResult *)ImsResult::operator<<<char [13]>((uint64_t)v24, "Call in null");
    ImsResult::ImsResult((ImsResult *)a2, v19);
    ImsResult::~ImsResult((ImsResult *)v24);
    if (!v5)
      return;
    goto LABEL_21;
  }
  v7 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64))((char *)this + 8);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 1) + 16))((char *)this + 8, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"resuming call", 13);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = *(_QWORD *)(*((_QWORD *)this + 18) + 168);
  v22 = v6;
  v23 = v5;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (!v11 || (v12 = std::__shared_weak_count::lock(v11)) == 0)
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v13 = v12;
  BambiStrictCallHandler::resumeCallFromAction(v8, (uint64_t)&v22);
  v14 = (unint64_t *)&v13->__shared_owners_;
  do
    v15 = __ldaxr(v14);
  while (__stlxr(v15 - 1, v14));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  v16 = v23;
  if (v23)
  {
    v17 = (unint64_t *)&v23->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  v5 = v30;
  if (v30)
  {
LABEL_21:
    v20 = (unint64_t *)&v5->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEF070C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t BambiCallPrepareAction::prerequisitesMet(BambiCallPrepareAction *this)
{
  return 1;
}

void BambiCallPrepareAction::perform(BambiCallPrepareAction *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(char *);
  uint64_t v9;
  const ImsResult *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  _QWORD v27[2];
  int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD v34[2];
  int v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;

  SipTimerContainer::cancelAllTimers((BambiCallPrepareAction *)((char *)this + 152));
  v36 = 0u;
  v37 = 0u;
  v38 = 0u;
  v34[0] = &off_1E78B7238;
  v34[1] = &_bambiDomain;
  v35 = 0;
  ImsResult::~ImsResult((ImsResult *)v34);
  v32 = 0;
  v33 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_9;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v33 = v5;
  if (!v5 || (v6 = *((_QWORD *)this + 16), (v32 = v6) == 0))
  {
LABEL_9:
    v29 = 0u;
    v30 = 0u;
    v31 = 0u;
    v27[0] = &off_1E78B7238;
    v27[1] = &_bambiDomain;
    v28 = 0x40000000;
    v10 = (const ImsResult *)ImsResult::operator<<<char [13]>((uint64_t)v27, "Call in null");
    ImsResult::ImsResult((ImsResult *)a2, v10);
    ImsResult::~ImsResult((ImsResult *)v27);
    if (!v5)
      return;
    goto LABEL_10;
  }
  v7 = (char *)this + 8;
  v8 = *(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64);
  if (*(_BYTE *)(v6 + 457))
  {
    v9 = v8((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"call is already prepared", 24);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
  }
  else
  {
    v13 = v8((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 8, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"preparing call", 14);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    v14 = *(_QWORD *)(*((_QWORD *)this + 18) + 168);
    v25 = v6;
    v26 = v5;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v17 || (v18 = std::__shared_weak_count::lock(v17)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v19 = v18;
    BambiStrictCallHandler::prepareCallFromAction(v14, (uint64_t)&v25);
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v22 = v26;
    if (v26)
    {
      v23 = (unint64_t *)&v26->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  v5 = v33;
  if (v33)
  {
LABEL_10:
    v11 = (unint64_t *)&v5->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEF073D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  _Unwind_Resume(a1);
}

uint64_t BambiCallHoldAction::prerequisitesMet(BambiCallHoldAction *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v2)
    return 0;
  v3 = std::__shared_weak_count::lock(v2);
  if (!v3)
    return 0;
  v4 = v3;
  v5 = *((_QWORD *)this + 16);
  if (v5)
  {
    if (*(_DWORD *)(v5 + 440))
    {
      v6 = 1;
    }
    else
    {
      v8 = *((_QWORD *)this + 1);
      v7 = (char *)this + 8;
      v9 = (*(uint64_t (**)(char *))(v8 + 64))(v7);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))(v7, v9);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"waiting for call to resume", 26);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v6 = 0;
      *(_BYTE *)(v9 + 17) = 0;
    }
  }
  else
  {
    v6 = 0;
  }
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return v6;
}

void sub_1BEF0751C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallHoldAction::perform(BambiCallHoldAction *this@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  char *v7;
  uint64_t (*v8)(char *);
  uint64_t v9;
  int v10;
  std::string *v11;
  const ImsResult *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string v29;
  std::string __p;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  _QWORD v36[2];
  int v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;

  SipTimerContainer::cancelAllTimers((BambiCallHoldAction *)((char *)this + 152));
  v38 = 0u;
  v39 = 0u;
  v40 = 0u;
  v36[0] = &off_1E78B7238;
  v36[1] = &_bambiDomain;
  v37 = 0;
  ImsResult::~ImsResult((ImsResult *)v36);
  v34 = 0;
  v35 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v4)
  {
    v5 = 0;
    goto LABEL_10;
  }
  v5 = std::__shared_weak_count::lock(v4);
  v35 = v5;
  if (!v5 || (v6 = *((_QWORD *)this + 16), (v34 = v6) == 0))
  {
LABEL_10:
    v31 = 0u;
    v32 = 0u;
    v33 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
    v12 = (const ImsResult *)ImsResult::operator<<<char [13]>((uint64_t)&__p, "Call in null");
    ImsResult::ImsResult((ImsResult *)a2, v12);
    ImsResult::~ImsResult((ImsResult *)&__p);
    if (!v5)
      return;
    goto LABEL_33;
  }
  v7 = (char *)this + 8;
  v8 = *(uint64_t (**)(char *))(*((_QWORD *)this + 1) + 64);
  if ((*(_DWORD *)(v6 + 440) & 0xFFFFFFFE) == 2)
  {
    v9 = v8((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"call is already ", 16);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = *(_DWORD *)(v6 + 440);
    if (v10 == 3)
    {
      v11 = (std::string *)"held";
    }
    else if (v10 == 2)
    {
      v11 = (std::string *)"holding";
    }
    else if (v10)
    {
      v11 = (std::string *)"resumed";
    }
    else
    {
      v11 = (std::string *)"resuming";
    }
    v29 = *v11;
    LoggableString::LoggableString(&__p, &v29);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v29.__r_.__value_.__l.__data_);
  }
  else
  {
    v13 = v8((char *)this + 8);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v7 + 16))((char *)this + 8, v13);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"holding call", 12);
    *(_BYTE *)(v13 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v13 + 17) = 0;
    v14 = *(_QWORD *)(*((_QWORD *)this + 18) + 168);
    v27 = v6;
    v28 = v5;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
    v17 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
    if (!v17 || (v18 = std::__shared_weak_count::lock(v17)) == 0)
      std::__throw_bad_weak_ptr[abi:ne180100]();
    v19 = v18;
    BambiStrictCallHandler::holdCallFromAction(v14, (uint64_t)&v27);
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    v22 = v28;
    if (v28)
    {
      v23 = (unint64_t *)&v28->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  v5 = v35;
  if (v35)
  {
LABEL_33:
    v25 = (unint64_t *)&v5->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void sub_1BEF07894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a32);
  _Unwind_Resume(a1);
}

void BambiCallAction::~BambiCallAction(BambiCallAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78C4BA8;
  *((_QWORD *)this + 1) = &unk_1E78C4C08;
  SipTimerContainer::~SipTimerContainer((BambiCallAction *)((char *)this + 152));
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 15);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

uint64_t BambiCallAction::prerequisitesMet(BambiCallAction *this)
{
  return 1;
}

_QWORD *BambiCallAction::logPrefix(BambiCallAction *this, ImsOutStream *a2)
{
  _QWORD *result;

  (*(void (**)(BambiCallAction *))(*(_QWORD *)this + 16))(this);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void `non-virtual thunk to'BambiCallAction::~BambiCallAction(BambiCallAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *`non-virtual thunk to'BambiCallAction::logPrefix(BambiCallAction *this, ImsOutStream *a2)
{
  _QWORD *result;

  (*(void (**)(char *))(*((_QWORD *)this - 1) + 16))((char *)this - 8);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void BambiCallRequireCallsHeldAction::~BambiCallRequireCallsHeldAction(BambiCallRequireCallsHeldAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiCallRequireCallsHeldAction::~BambiCallRequireCallsHeldAction(BambiCallRequireCallsHeldAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallRequireCallsHeldAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallRequireCallsHeldAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void BambiCallRequirePrepareAction::~BambiCallRequirePrepareAction(BambiCallRequirePrepareAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiCallRequirePrepareAction::~BambiCallRequirePrepareAction(BambiCallRequirePrepareAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallRequirePrepareAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallRequirePrepareAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void BambiCallStartAction::~BambiCallStartAction(BambiCallStartAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

std::string *BambiCallStartAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallStartAction");
}

void `non-virtual thunk to'BambiCallStartAction::~BambiCallStartAction(BambiCallStartAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallStartAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallStartAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void BambiCallAnswerAction::~BambiCallAnswerAction(BambiCallAnswerAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

std::string *BambiCallAnswerAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallAnswerAction");
}

void `non-virtual thunk to'BambiCallAnswerAction::~BambiCallAnswerAction(BambiCallAnswerAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallAnswerAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallAnswerAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void BambiCallResumeAction::~BambiCallResumeAction(BambiCallResumeAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

std::string *BambiCallResumeAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallResumeAction");
}

void `non-virtual thunk to'BambiCallResumeAction::~BambiCallResumeAction(BambiCallResumeAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallResumeAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallResumeAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void BambiCallPrepareAction::~BambiCallPrepareAction(BambiCallPrepareAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

std::string *BambiCallPrepareAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallPrepareAction");
}

void `non-virtual thunk to'BambiCallPrepareAction::~BambiCallPrepareAction(BambiCallPrepareAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallPrepareAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallPrepareAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void BambiCallHoldAction::~BambiCallHoldAction(BambiCallHoldAction *this)
{
  BambiCallAction::~BambiCallAction(this);
  JUMPOUT(0x1C3B87100);
}

std::string *BambiCallHoldAction::loggableName@<X0>(std::string *a1@<X8>)
{
  return LoggableString::LoggableString(a1, (const std::string *)"BambiCallHoldAction");
}

void `non-virtual thunk to'BambiCallHoldAction::~BambiCallHoldAction(BambiCallHoldAction *this)
{
  BambiCallAction::~BambiCallAction((BambiCallHoldAction *)((char *)this - 8));
}

{
  BambiCallAction::~BambiCallAction((BambiCallHoldAction *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(16 * a1);
}

_QWORD *std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C4E28;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C4E28;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C4E28;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C4E28;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 72))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF07F34(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else
    return 0;
}

void *std::__function::__func<BambiCallAction::enqueue(void)::$_0,std::allocator<BambiCallAction::enqueue(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void std::__shared_ptr_emplace<BambiCallHoldAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallHoldAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C5138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiCallHoldAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *BambiCallHoldAction::BambiCallHoldAction(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  BambiCallAction::BambiCallAction((uint64_t)a1, v10, a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *a1 = &off_1E78C5188;
  a1[1] = &unk_1E78C51E8;
  return a1;
}

void sub_1BEF080A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiCallPrepareAction>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4EA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiCallPrepareAction>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C4EA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiCallPrepareAction>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void SipSessionClientUnconfirmedState::enterState(SipSessionClientUnconfirmedState *this, int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  SipSession *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a2 == 1)
  {
    v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
    if (v3)
    {
      v4 = std::__shared_weak_count::lock(v3);
      if (v4)
      {
        v5 = v4;
        v6 = (SipSession *)*((_QWORD *)this + 26);
        if (v6)
          SipSession::startPingTimer(v6);
        p_shared_owners = (unint64_t *)&v5->__shared_owners_;
        do
          v8 = __ldaxr(p_shared_owners);
        while (__stlxr(v8 - 1, p_shared_owners));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
          std::__shared_weak_count::__release_weak(v5);
        }
      }
    }
  }
}

void sub_1BEF08188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallProvisionalResponseEvent::~BambiCallProvisionalResponseEvent(BambiCallProvisionalResponseEvent *this)
{
  SipMessage *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78C5680;
  *((_QWORD *)this + 5) = off_1E78E40E8;
  v2 = (BambiCallProvisionalResponseEvent *)((char *)this + 40);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  SipMessage::~SipMessage(v2);
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  SipMessage *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78C5680;
  *((_QWORD *)this + 5) = off_1E78E40E8;
  v2 = (BambiCallProvisionalResponseEvent *)((char *)this + 40);
  if (*((char *)this + 159) < 0)
    operator delete(*((void **)this + 17));
  SipMessage::~SipMessage(v2);
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientUnconfirmedState::handleInviteResponse(SipSessionState *a1, unsigned int *a2, uint64_t *a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  std::__shared_weak_count *v12;
  SipSession *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *shared_owners;
  BambiCall *v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  char v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::__shared_weak_count *v58;
  SipUserAgentConfig *v59;
  int shouldCSFBOnInviteResponse;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  BambiCallEvent *v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  uint64_t v68;
  std::string::size_type size;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  ImsPrefs *v74;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v76;
  char v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  uint64_t v87[2];
  SipStack *v88;
  std::__shared_weak_count *v89;
  SipStack *v90;
  uint64_t (**v91)(SipHost *__hidden);
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  void (**v97)(SipParameterMap *__hidden);
  uint64_t *v98;
  uint64_t v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  uint64_t v114;
  uint64_t v115;
  void (**v116)(SipParameterMap *__hidden);
  _QWORD *v117;
  _QWORD v118[5];
  _QWORD v119[3];
  std::string v120;
  __int128 v121;
  std::__shared_weak_count *v122[2];
  _OWORD v123[6];
  void *__p[2];
  __int128 v125;
  _QWORD v126[5];
  __int16 v127;
  uint64_t v128;
  uint64_t v129;
  void (**v130)(SipParameterMap *__hidden);
  _QWORD *v131;
  _QWORD v132[2];
  char v133;
  char v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  char v149;
  void (**v150)(SipParameterMap *__hidden);
  _QWORD *v151;
  _QWORD v152[2];
  __int16 v153;
  void (**v154)(SipParameterMap *__hidden);
  _QWORD *v155;
  _QWORD v156[2];
  __int16 v157;
  char v158;
  uint64_t v159;
  std::__shared_weak_count *v160;
  _QWORD v161[5];
  int v162;
  char v163;
  char v164;
  BambiCall *v165;
  std::__shared_weak_count *v166;
  std::__shared_weak_count *v167;
  std::__shared_weak_count *v168;

  v6 = (std::__shared_weak_count *)a3[1];
  v87[0] = *a3;
  v87[1] = (uint64_t)v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  SipSessionState::handleInviteResponse((uint64_t)a1, (uint64_t)a2, v87);
  if (v6)
  {
    v9 = (unint64_t *)&v6->__shared_owners_;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v11 = a2[22];
  if (v11 / 0x64 == 2)
  {
    v20 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v20 + 24))(v20) <= 5)
    {
      v21 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 32))(v21, 6);
    }
    return;
  }
  if (v11 / 0x64 != 1)
  {
    if (v11 == 422 || v11 < 0x12C)
      return;
    v22 = (std::__shared_weak_count *)a3[1];
    if (v22)
    {
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    v25 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
    if (!v25 || (v26 = std::__shared_weak_count::lock(v25), (v168 = v26) == 0))
    {
LABEL_143:
      if (!v22)
        return;
      v86 = (unint64_t *)&v22->__shared_owners_;
      do
        v44 = __ldaxr(v86);
      while (__stlxr(v44 - 1, v86));
      goto LABEL_146;
    }
    v27 = (std::__shared_weak_count *)*((_QWORD *)a1 + 26);
    v167 = v27;
    if (!v27)
    {
      v45 = v26;
LABEL_139:
      v84 = (unint64_t *)&v45->__shared_owners_;
      do
        v85 = __ldaxr(v84);
      while (__stlxr(v85 - 1, v84));
      if (!v85)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
      goto LABEL_143;
    }
    shared_owners = (std::__shared_weak_count *)v27[32].__shared_owners_;
    if (shared_owners)
    {
      v29 = (BambiCall *)v27[32].__vftable;
      p_shared_weak_owners = (unint64_t *)&shared_owners->__shared_weak_owners_;
      do
        v31 = __ldxr(p_shared_weak_owners);
      while (__stxr(v31 + 1, p_shared_weak_owners));
      v165 = 0;
      v166 = std::__shared_weak_count::lock(shared_owners);
      if (v166)
        v165 = v29;
      std::__shared_weak_count::__release_weak(shared_owners);
      v32 = (uint64_t)v27[32].__vftable;
      v33 = (std::__shared_weak_count *)v27[32].__shared_owners_;
      bzero(v161, 0x250uLL);
      if (v33)
      {
        v34 = (unint64_t *)&v33->__shared_weak_owners_;
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
        v159 = 0;
        v160 = std::__shared_weak_count::lock(v33);
        v36 = 0;
        if (v160)
          v159 = v32;
        goto LABEL_68;
      }
    }
    else
    {
      v165 = 0;
      v166 = 0;
      bzero(v161, 0x250uLL);
    }
    v33 = 0;
    v160 = 0;
    v159 = 0;
    v36 = 1;
LABEL_68:
    BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(v161, &v159);
    v46 = v160;
    if (v160)
    {
      v47 = (unint64_t *)&v160->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    if ((v36 & 1) == 0)
      std::__shared_weak_count::__release_weak(v33);
    SipSessionInterface::stack(v167, &v121);
    BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse((BambiCallSessionTerminationBaseEvent *)v161, (const SipResponse *)a2, (const BambiCallIncomingTerminationReasons *)(v121 + 2392));
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    bzero(&v121, 0x3F0uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&v121, 15, (BambiCallEvent *)v161);
    v126[1] = &off_1E78D08F8;
    v129 = 0;
    v128 = 0;
    memset(&v126[2], 0, 24);
    v127 = 0;
    v130 = &off_1E78B82D8;
    v132[1] = 0;
    v132[0] = 0;
    v131 = v132;
    v134 = 1;
    *(_QWORD *)&v121 = &off_1E78C5440;
    v126[0] = &off_1E78BFCE8;
    v136 = 0u;
    v137 = 0u;
    v138 = 0u;
    v139 = 0u;
    v140 = 0u;
    v141 = 0u;
    v142 = 0u;
    v143 = 0u;
    v144 = 0u;
    v135 = 0u;
    v145 = 0u;
    v146 = 0u;
    v147 = 0u;
    v148 = 0;
    v150 = &off_1E78B82D8;
    v152[1] = 0;
    v152[0] = 0;
    v151 = v152;
    v154 = &off_1E78B82D8;
    v156[1] = 0;
    v156[0] = 0;
    v155 = v156;
    v133 = 1;
    v153 = 257;
    v157 = 257;
    v149 = 0;
    v158 = 0;
    if (!v165)
      goto LABEL_91;
    if (v162 == 15)
    {
      memset(&v120, 0, sizeof(v120));
      BambiCall::remoteDisplayNumber(v165, (uint64_t)&v120);
      v52 = SipMessage::header<SipContactHeader>((uint64_t)a2);
      if (v52)
      {
        v53 = v52[9];
        if (v53 == v52[10])
          v53 = 0;
      }
      else
      {
        v53 = 0;
      }
      v119[2] = 257;
      v118[2] = 257;
      v115 = 0;
      v100 = 0u;
      v95 = 0u;
      v96 = 0;
      v93 = 0;
      v94 = 0;
      v91 = &off_1E78D08F8;
      v92 = 0;
      LOWORD(v95) = 0;
      v99 = 0;
      *(_QWORD *)&v100 = 0;
      v97 = &off_1E78B82D8;
      v98 = &v99;
      v90 = (SipStack *)&off_1E78BFCE8;
      v111 = 0u;
      v112 = 0u;
      v113 = 0u;
      v101 = 0u;
      v102 = 0u;
      v103 = 0u;
      v104 = 0u;
      v105 = 0u;
      v106 = 0u;
      v107 = 0u;
      v108 = 0u;
      v109 = 0u;
      v110 = 0u;
      v114 = 0;
      v118[0] = 0;
      v118[1] = 0;
      v116 = &off_1E78B82D8;
      v117 = v118;
      v119[0] = 0;
      v119[1] = 0;
      v118[3] = &off_1E78B82D8;
      v118[4] = v119;
      WORD4(v100) = 257;
      if (v53 && (v65 = v53 + 8, SipUri::isUrn((SipUri *)(v53 + 8))))
      {
        SipUri::operator=((SipUri *)&v90, v65);
      }
      else
      {
        v66 = v167;
        v67 = ((uint64_t (*)(std::__shared_weak_count *))v167->__vftable[1].__get_deleter)(v167);
        ((void (*)(std::__shared_weak_count *, uint64_t))v66->__on_zero_shared)(v66, v67);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v67 + 8), (uint64_t)"Response does not contain valid SOS service Urn", 47);
        *(_BYTE *)(v67 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v67 + 64))(v67, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v67 + 17) = 0;
      }
      v158 = 1;
      SipUri::operator=((SipUri *)v126, (uint64_t)&v90);
      v68 = BYTE7(v102);
      if (SBYTE7(v102) < 0)
        v68 = *((_QWORD *)&v101 + 1);
      if (v68)
      {
        if (SipUri::isEmergencyUrn((SipUri *)&v90) && SipUri::getEmergencySubservice((SipUri *)&v90) != 6)
          v158 = 0;
        size = HIBYTE(v120.__r_.__value_.__r.__words[2]);
        if ((v120.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
          size = v120.__r_.__value_.__l.__size_;
        if (size)
        {
          SipSessionInterface::stack(v167, &v88);
          SipStack::addEmergencyNumberToUrnMapping(v88, &v120, (uint64_t)&v90);
          v70 = v89;
          if (v89)
          {
            v71 = (unint64_t *)&v89->__shared_owners_;
            do
              v72 = __ldaxr(v71);
            while (__stlxr(v72 - 1, v71));
            if (!v72)
            {
              ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
              std::__shared_weak_count::__release_weak(v70);
            }
          }
        }
      }
      SipUri::~SipUri((SipUri *)&v90);
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v120.__r_.__value_.__l.__data_);
      v64 = (BambiCallEvent *)&v121;
      goto LABEL_122;
    }
    if (BambiCall::isWPSCall(v165))
    {
      if (v163)
      {
        v54 = v167;
        v55 = ((uint64_t (*)(std::__shared_weak_count *))v167->__vftable[1].__get_deleter)(v167);
        ((void (*)(std::__shared_weak_count *, uint64_t))v54->__on_zero_shared)(v54, v55);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"WPS Call failure detected - attempting to cleanup WPS state", 59);
        *(_BYTE *)(v55 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v55 + 17) = 0;
        v56 = v54[65].__shared_owners_;
        if (v56)
          (*(void (**)(uint64_t))(*(_QWORD *)v56 + 8))(v56);
        v54[65].__shared_owners_ = (*(uint64_t (**)(unsigned int *))(*(_QWORD *)a2 + 32))(a2);
        v57 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v57 + 32))(v57, 15);
LABEL_133:
        *(_QWORD *)&v121 = &off_1E78C5440;
        SipUri::~SipUri((SipUri *)v126);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&v121);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v161);
        v81 = v166;
        if (v166)
        {
          v82 = (unint64_t *)&v166->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v45 = v168;
        if (!v168)
          goto LABEL_143;
        goto LABEL_139;
      }
    }
    else
    {
LABEL_91:
      v58 = v167;
      if (SipSession::emergency(v167))
      {
        SipSessionInterface::stack(v58, &v90);
        v59 = (SipUserAgentConfig *)SipUserAgent::config(*((SipUserAgent **)v90 + 18));
        shouldCSFBOnInviteResponse = SipUserAgentConfig::shouldCSFBOnInviteResponse(v59, a2[22], 1);
        v61 = (std::__shared_weak_count *)v91;
        if (v91)
        {
          v62 = (unint64_t *)(v91 + 1);
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
        }
        if (shouldCSFBOnInviteResponse)
        {
          v163 = 1;
          v162 = 11;
        }
      }
    }
    v64 = (BambiCallEvent *)v161;
LABEL_122:
    v73 = v167;
    if (SipSession::emergency(v167) && a2[22] - 300 >= 0x64)
    {
      SipSessionInterface::stack(v73, &v90);
      v74 = (ImsPrefs *)SipStack::prefs(v90);
      EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v74);
      v76 = ImsPrefs::prefWithKey(v74, EmergencyAnonymousAutomaticRedialKey);
      v77 = v76
          ? (*(unint64_t (**)(void *))(*(_QWORD *)v76 + 40))(v76)
          : *((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57) != 0;
      v164 = v77;
      v78 = (std::__shared_weak_count *)v91;
      if (v91)
      {
        v79 = (unint64_t *)(v91 + 1);
        do
          v80 = __ldaxr(v79);
        while (__stlxr(v80 - 1, v79));
        if (!v80)
        {
          ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
          std::__shared_weak_count::__release_weak(v78);
        }
      }
    }
    SipSessionState::terminateSessionWithEvent(a1, v64);
    goto LABEL_133;
  }
  if (v11 != 100)
  {
    if (v11 != 183)
      goto LABEL_52;
    v121 = 0uLL;
    v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
    if (v12
      && (*((_QWORD *)&v121 + 1) = std::__shared_weak_count::lock(v12)) != 0
      && (v13 = (SipSession *)*((_QWORD *)a1 + 26), (*(_QWORD *)&v121 = v13) != 0))
    {
      v14 = (std::__shared_weak_count *)a3[1];
      if (v14)
      {
        v15 = (unint64_t *)&v14->__shared_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      SipSession::handleSessionProgressResponse(v13, (uint64_t)a2);
      if (v14)
      {
        v17 = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
      v19 = 0;
    }
    else
    {
      v19 = 1;
    }
    v37 = (std::__shared_weak_count *)*((_QWORD *)&v121 + 1);
    if (*((_QWORD *)&v121 + 1))
    {
      v38 = (unint64_t *)(*((_QWORD *)&v121 + 1) + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
        std::__shared_weak_count::__release_weak(v37);
      }
    }
    if ((v19 & 1) == 0)
    {
LABEL_52:
      if ((*(unsigned int (**)(SipSessionState *))(*(_QWORD *)a1 + 48))(a1) <= 3)
      {
        v40 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v40 + 32))(v40, 4);
      }
      v22 = (std::__shared_weak_count *)a3[1];
      if (v22)
      {
        v41 = (unint64_t *)&v22->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      *(_OWORD *)__p = 0u;
      v125 = 0u;
      memset(v123, 0, sizeof(v123));
      v121 = 0u;
      *(_OWORD *)v122 = 0u;
      BambiCallProvisionalResponseEvent::BambiCallProvisionalResponseEvent((BambiCallProvisionalResponseEvent *)&v121, (const SipResponse *)a2);
      SipSessionState::fireCallEvent(a1, (BambiCallEvent *)&v121);
      *(_QWORD *)&v121 = off_1E78C5680;
      *((_QWORD *)&v123[0] + 1) = off_1E78E40E8;
      if (SHIBYTE(v125) < 0)
        operator delete(__p[1]);
      SipMessage::~SipMessage((SipMessage *)((char *)v123 + 8));
      *(_QWORD *)&v121 = &off_1E78BD300;
      if (v122[1])
        std::__shared_weak_count::__release_weak(v122[1]);
      if (v22)
      {
        v43 = (unint64_t *)&v22->__shared_owners_;
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
LABEL_146:
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
    }
  }
}

void sub_1BEF08CF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *__p;
  char a72;
  SipUri *v72;
  unint64_t v73;
  uint64_t v74;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  SipUri::~SipUri((SipUri *)&a19);
  if (a72 < 0)
    operator delete(__p);
  STACK[0x200] = v73;
  SipUri::~SipUri(v72);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&STACK[0x200]);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&STACK[0x600]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v74 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v74 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiCallEmergencySessionRequiredEvent::~BambiCallEmergencySessionRequiredEvent(BambiCallEmergencySessionRequiredEvent *this)
{
  *(_QWORD *)this = &off_1E78C5440;
  SipUri::~SipUri((BambiCallEmergencySessionRequiredEvent *)((char *)this + 592));
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
}

{
  *(_QWORD *)this = &off_1E78C5440;
  SipUri::~SipUri((BambiCallEmergencySessionRequiredEvent *)((char *)this + 592));
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(this);
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientInviteState::enterState(SipSessionClientInviteState *this, int a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  const std::string *v6;
  _BOOL4 isNR;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  unint64_t *p_shared_weak_owners;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  void (**v32)(SipTimer *__hidden);
  std::string __p;
  _BYTE v34[24];
  _BYTE *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v32 = off_1E78C5C28;
  memset(&__p, 0, sizeof(__p));
  if (byte_1ED70CE60[23] < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)byte_1ED70CE60, *(std::string::size_type *)&byte_1ED70CE60[8]);
  else
    __p = *(std::string *)byte_1ED70CE60;
  v30 = 0;
  v31 = 0;
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v4)
    goto LABEL_36;
  v31 = std::__shared_weak_count::lock(v4);
  if (!v31)
    goto LABEL_36;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v30 = v5;
  if (!v5)
    goto LABEL_36;
  if ((SipSession::emergency(v5) & 1) != 0)
  {
    v6 = (const std::string *)&unk_1ED70D2A0;
LABEL_23:
    std::string::operator=(&__p, v6);
    goto LABEL_24;
  }
  SipSessionInterface::stack(v5, &v28);
  if (*(_BYTE *)(v28 + 3685))
  {
    SipSessionInterface::stack(v5, &v26);
    isNR = ims::AccessNetwork::isNR((ims::AccessNetwork *)(v26 + 3136));
    v8 = v27;
    if (v27)
    {
      p_shared_owners = (unint64_t *)&v27->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
  else
  {
    isNR = 0;
  }
  v11 = v29;
  if (v29)
  {
    v12 = (unint64_t *)&v29->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (isNR)
  {
    v6 = (const std::string *)&unk_1ED70D348;
    goto LABEL_23;
  }
LABEL_24:
  v15 = *((_QWORD *)this + 24);
  v14 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v14)
  {
    p_shared_weak_owners = (unint64_t *)&v14->__shared_weak_owners_;
    do
      v17 = __ldxr(p_shared_weak_owners);
    while (__stxr(v17 + 1, p_shared_weak_owners));
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
    do
      v19 = __ldxr(p_shared_weak_owners);
    while (__stxr(v19 + 1, p_shared_weak_owners));
  }
  v35 = 0;
  v20 = operator new(0x20uLL);
  *v20 = &off_1E78C5480;
  v20[1] = this;
  v20[2] = v15;
  v20[3] = v14;
  v35 = v20;
  SipTimerContainer::startSipTimer((_QWORD *)this + 3, (uint64_t)&v32, (uint64_t)v34, 0);
  v21 = v35;
  if (v35 == v34)
  {
    v22 = 4;
    v21 = v34;
  }
  else
  {
    if (!v35)
      goto LABEL_34;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_34:
  SipSessionClientUnconfirmedState::enterState(this, a2);
  if (v14)
  {
    std::__shared_weak_count::__release_weak(v14);
    std::__shared_weak_count::__release_weak(v14);
  }
LABEL_36:
  v23 = v31;
  if (v31)
  {
    v24 = (unint64_t *)&v31->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v32 = off_1E78C5C28;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1BEF090F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void SipTimer::~SipTimer(void **this)
{
  *this = off_1E78C5C28;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_1E78C5C28;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientInviteState::handleTimer(SipSessionState *a1, unsigned __int8 *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipSession *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  ImsPrefs *v14;
  void **EmergencyAnonymousAutomaticRedialKey;
  void *v16;
  char v17;
  std::__shared_weak_count *size;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  _BOOL4 isWifi;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *p_shared_owners;
  unint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  std::string v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  std::string __p[6];
  char v49;
  SipTransaction *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  _OWORD v54[3];
  SipSession *v55;
  std::__shared_weak_count *v56;

  if (!operator==(a2, (uint64_t)&SipTimers::kTimerInviteResponseTimeout)
    && !operator==(a2, (uint64_t)&SipTimers::kTimerEPSInviteResponseTimeout)
    && !operator==(a2, (uint64_t)&SipTimers::kTimerEmergencyInviteResponseTimeout))
  {
    return;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
  if (!v4)
    return;
  v5 = std::__shared_weak_count::lock(v4);
  v56 = v5;
  if (!v5)
    return;
  v6 = v5;
  v7 = (SipSession *)*((_QWORD *)a1 + 26);
  v55 = v7;
  if (!v7)
  {
LABEL_64:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v42 = __ldaxr(p_shared_owners);
    while (__stlxr(v42 - 1, p_shared_owners));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    return;
  }
  memset(v54, 0, sizeof(v54));
  v52 = (uint64_t)v7 + 104;
  v53 = v5;
  v8 = (unint64_t *)&v5->__shared_owners_;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  LoggableString::LoggableString((LoggableString *)__p, "handleTimer");
  SipTypedTerminationLock<SipLockable>::SipTypedTerminationLock((SipTerminationLockBase *)v54, &v52, __p);
  if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p[0].__r_.__value_.__l.__data_);
  v10 = v53;
  if (v53)
  {
    v11 = (unint64_t *)&v53->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  v50 = 0;
  v51 = 0;
  v13 = (std::__shared_weak_count *)v55;
  SipSession::clientInviteTransaction(v55, (uint64_t *)&v50);
  if (v50)
    SipTransaction::abort(v50);
  bzero(__p, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, 17);
  __p[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BD2A8;
  if (SipSession::emergency(v13))
  {
    SipSessionInterface::stack(v13, &v45);
    v14 = (ImsPrefs *)SipStack::prefs((SipStack *)v45.__r_.__value_.__l.__data_);
    EmergencyAnonymousAutomaticRedialKey = (void **)ImsPrefs::getEmergencyAnonymousAutomaticRedialKey(v14);
    v16 = ImsPrefs::prefWithKey(v14, EmergencyAnonymousAutomaticRedialKey);
    v17 = v16
        ? (*(unint64_t (**)(void *))(*(_QWORD *)v16 + 40))(v16)
        : *((_BYTE *)EmergencyAnonymousAutomaticRedialKey + 57) != 0;
    v49 = v17;
    size = (std::__shared_weak_count *)v45.__r_.__value_.__l.__size_;
    if (v45.__r_.__value_.__l.__size_)
    {
      v19 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
  }
  SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)__p);
  v21 = (std::__shared_weak_count *)v55;
  SipSessionInterface::stack((std::__shared_weak_count *)v55, &v45);
  if (v45.__r_.__value_.__r.__words[0])
  {
    SipSessionInterface::stack(v21, &v46);
    isWifi = ims::AccessNetwork::isWifi((ims::AccessNetwork *)(v46 + 3136));
    v23 = v47;
    if (v47)
    {
      v24 = (unint64_t *)&v47->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
  }
  else
  {
    isWifi = 0;
  }
  v26 = (std::__shared_weak_count *)v45.__r_.__value_.__l.__size_;
  if (!v45.__r_.__value_.__l.__size_)
    goto LABEL_38;
  v27 = (unint64_t *)(v45.__r_.__value_.__l.__size_ + 8);
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
    std::__shared_weak_count::__release_weak(v26);
    if (!isWifi)
      goto LABEL_58;
  }
  else
  {
LABEL_38:
    if (!isWifi)
      goto LABEL_58;
  }
  v29 = (std::__shared_weak_count *)v55;
  SipSessionInterface::stack((std::__shared_weak_count *)v55, &v46);
  v30 = *(_QWORD *)(v46 + 136);
  SipSessionInterface::stack(v29, &v43);
  if (*(char *)(v43 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v45, *(const std::string::value_type **)(v43 + 4136), *(_QWORD *)(v43 + 4144));
  else
    v45 = *(std::string *)(v43 + 4136);
  v31 = *(_QWORD *)(v30 + 248);
  if (v31)
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v31 + 96))(v31, &v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v32 = v44;
  if (v44)
  {
    v33 = (unint64_t *)&v44->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v47;
  if (v47)
  {
    v36 = (unint64_t *)&v47->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
LABEL_58:
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
  v38 = v51;
  if (v51)
  {
    v39 = (unint64_t *)&v51->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock((uint64_t)v54);
  v6 = v56;
  if (v56)
    goto LABEL_64;
}

void sub_1BEF09614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 128);
  SipTypedTerminationLock<SipLockable>::~SipTypedTerminationLock(v25 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25 - 48);
  _Unwind_Resume(a1);
}

void SipSessionClientInviteState::handleInviteResponse(SipSessionState *a1, unsigned int *a2, uint64_t *a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9[2];

  if (a2[22] == 100)
  {
    v3 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 32))(v3, 2);
  }
  else
  {
    v4 = (std::__shared_weak_count *)a3[1];
    v9[0] = *a3;
    v9[1] = (uint64_t)v4;
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    SipSessionClientUnconfirmedState::handleInviteResponse(a1, a2, v9);
    if (v4)
    {
      v7 = (unint64_t *)&v4->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
  }
}

void sub_1BEF0978C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSessionClientReceivedTryingResponseState::enterState(SipSessionClientReceivedTryingResponseState *this, int a2)
{
  void (**v4)(BambiCallEvent *__hidden);
  __int128 v5;
  std::__shared_weak_count *v6[2];

  v6[1] = 0;
  v4 = &off_1E78BD300;
  v5 = 1uLL;
  v6[0] = 0;
  SipSessionState::fireCallEvent(this, (BambiCallEvent *)&v4);
  SipSessionClientUnconfirmedState::enterState(this, a2);
  v4 = &off_1E78BD300;
  if (v6[0])
    std::__shared_weak_count::__release_weak(v6[0]);
}

void sub_1BEF09814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  _Unwind_Resume(exception_object);
}

void SipSessionClientCanceledState::enterState(SipSessionClientCanceledState *this, unsigned int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  SipUserAgent *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  SipUserAgent *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  _QWORD *v51;
  std::__shared_weak_count *v52;
  char v53[8];
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  _BYTE v60[24];
  _BYTE *v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 224) = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v59 = v5;
  if (!v5)
    return;
  v6 = *((_QWORD *)this + 26);
  v58 = v6;
  if (!v6)
  {
    v21 = v5;
LABEL_55:
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    return;
  }
  v56 = 0;
  v57 = 0;
  SipSession::clientInviteTransaction((SipSession *)v6, &v56);
  if (a2 < 2)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"queuing CANCEL until we receive a provisional response.", 55);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v56)
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"turning off retransmission of INVITE", 36);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v23 + 17) = 0;
      *(_BYTE *)(v56 + 360) = 0;
    }
  }
  else
  {
    v7 = v56;
    if (v56)
    {
      v8 = *(_QWORD **)(v6 + 240);
      v9 = *(std::__shared_weak_count **)(v6 + 248);
      v51 = v8;
      v52 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v49 = v7;
      v50 = v57;
      if (v57)
      {
        v12 = (unint64_t *)&v57->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = SipDialog::cancelInviteRequest(v8, &v49, *(const std::string **)(v6 + 1552), (uint64_t)v53);
      *((_BYTE *)this + 224) = (*(uint64_t (**)(uint64_t, _QWORD, double))(*(_QWORD *)v54 + 24))(v54, v55, v14) ^ 1;
      ImsResult::~ImsResult((ImsResult *)v53);
      v15 = v50;
      if (v50)
      {
        v16 = (unint64_t *)&v50->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v52;
      if (v52)
      {
        v19 = (unint64_t *)&v52->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"no client INVITE transaction to cancel, going right to terminated state", 71);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      v25 = (*(uint64_t (**)(SipSessionClientCanceledState *))(*(_QWORD *)this + 32))(this);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 13);
    }
  }
  v27 = *((_QWORD *)this + 24);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v26)
  {
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
  }
  v31 = v58;
  v32 = *(_QWORD *)(v58 + 240);
  if (v32 && (v33 = *(_QWORD *)(v32 + 208)) != 0)
    v34 = *(SipUserAgent **)(v33 + 136);
  else
    v34 = 0;
  if (*(_DWORD *)(SipUserAgent::config(v34) + 600))
  {
    if (v26)
    {
      v35 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v61 = 0;
    v37 = operator new(0x20uLL);
    *v37 = &off_1E78C5500;
    v37[1] = this;
    v37[2] = v27;
    v37[3] = v26;
    v61 = v37;
    v38 = *(_QWORD *)(v31 + 240);
    if (v38 && (v39 = *(_QWORD *)(v38 + 208)) != 0)
      v40 = *(SipUserAgent **)(v39 + 136);
    else
      v40 = 0;
    v41 = SipUserAgent::config(v40);
    SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&kWaitingForCancelResponseTimerName, (uint64_t)v60, *(_DWORD *)(v41 + 600), 0);
    v42 = v61;
    if (v61 == v60)
    {
      v43 = 4;
      v42 = v60;
    }
    else
    {
      if (!v61)
        goto LABEL_47;
      v43 = 5;
    }
    (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
  }
LABEL_47:
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  v44 = v57;
  if (v57)
  {
    v45 = (unint64_t *)&v57->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v21 = v59;
  if (v59)
    goto LABEL_55;
}

void sub_1BEF09C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  ImsResult::~ImsResult((ImsResult *)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22 - 88);
  _Unwind_Resume(a1);
}

void SipSessionClientCanceledState::terminateSession(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  SipSession *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  void *__p[2];
  char v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::string v37;
  __int128 v38;
  _BYTE v39[32];
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  SipSession *v44;
  std::__shared_weak_count *v45;

  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v45 = v5;
  if (!v5)
    return;
  v6 = *(SipSession **)(a1 + 208);
  v44 = v6;
  if (!v6)
  {
    v17 = v5;
LABEL_25:
    p_shared_owners = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
    return;
  }
  v7 = (*(uint64_t (**)(SipSession *))(*(_QWORD *)v6 + 64))(v6);
  (*(void (**)(SipSession *, uint64_t))(*(_QWORD *)v6 + 16))(v6, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"terminating session", 19);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v36 = 0;
  *(_OWORD *)&v37.__r_.__value_.__r.__words[1] = 0u;
  v43 = 0;
  v41 = 0u;
  v42 = 0u;
  *(_OWORD *)&v39[16] = 0u;
  v40 = 0u;
  v38 = 0u;
  *(_OWORD *)v39 = 0u;
  *((_BYTE *)&v37.__r_.__value_.__s + 23) = 13;
  qmemcpy(&v37, "InternalError", 13);
  *(_QWORD *)&v39[12] = 0xA000001F4;
  v8 = *((_QWORD *)v6 + 194);
  if (v8)
  {
    LODWORD(v36) = *(_DWORD *)v8;
    std::string::operator=(&v37, (const std::string *)(v8 + 8));
    std::string::operator=((std::string *)&v38, (const std::string *)(v8 + 32));
    v9 = *(_QWORD *)(v8 + 56);
    *(_DWORD *)&v39[16] = *(_DWORD *)(v8 + 64);
    *(_QWORD *)&v39[8] = v9;
    std::string::operator=((std::string *)&v39[24], (const std::string *)(v8 + 72));
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v41, (uint64_t *)(v8 + 96));
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v42, (uint64_t *)(v8 + 112));
    v10 = *(_DWORD *)(v8 + 131);
    LODWORD(v43) = *(_DWORD *)(v8 + 128);
    *(_DWORD *)((char *)&v43 + 3) = v10;
  }
  else
  {
    SipSessionInterface::stack((std::__shared_weak_count *)v6, &v32);
    v20 = v32;
    std::string::basic_string[abi:ne180100]<0>(__p, "InternalError");
    BambiCallTerminationReasonsBase::reason((const void ***)(v20 + 2224), (uint64_t)__p, &v34);
    v21 = v34;
    LODWORD(v36) = *(_DWORD *)v34;
    std::string::operator=(&v37, (const std::string *)(v34 + 8));
    std::string::operator=((std::string *)&v38, (const std::string *)(v21 + 32));
    v22 = *(_QWORD *)(v21 + 56);
    *(_DWORD *)&v39[16] = *(_DWORD *)(v21 + 64);
    *(_QWORD *)&v39[8] = v22;
    std::string::operator=((std::string *)&v39[24], (const std::string *)(v21 + 72));
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v41, (uint64_t *)(v21 + 96));
    std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v42, (uint64_t *)(v21 + 112));
    v23 = *(_DWORD *)(v21 + 131);
    LODWORD(v43) = *(_DWORD *)(v21 + 128);
    *(_DWORD *)((char *)&v43 + 3) = v23;
    v24 = v35;
    if (v35)
    {
      v25 = (unint64_t *)&v35->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
    if (v31 < 0)
      operator delete(__p[0]);
    v27 = v33;
    if (v33)
    {
      v28 = (unint64_t *)&v33->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  bzero(__p, 0x250uLL);
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)__p, 15, (uint64_t)&v36);
  __p[0] = &off_1E78BD2A8;
  SipSession::terminateWithEvent(v44, (BambiCallEvent *)__p, a2);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)__p);
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v42 + 1);
  if (*((_QWORD *)&v42 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v42 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
  if (*((_QWORD *)&v41 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (SHIBYTE(v40) < 0)
    operator delete(*(void **)&v39[24]);
  if ((v39[7] & 0x80000000) != 0)
    operator delete((void *)v38);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  v17 = v45;
  if (v45)
    goto LABEL_25;
}

void sub_1BEF0A108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 256);
  BambiCallTerminationReason::~BambiCallTerminationReason((void **)(v14 - 224));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 80);
  _Unwind_Resume(a1);
}

void SipSessionClientCanceledState::handleTransactionError(uint64_t a1)
{
  SipSessionClientCanceledState::terminateSession(a1, 13);
}

void SipSessionClientCanceledState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v6;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  v4 = qword_1ED70E658;
  if (byte_1ED70E667 >= 0)
    v4 = byte_1ED70E667;
  if (v3 != v4)
    return;
  if (byte_1ED70E667 >= 0)
    v6 = &kWaitingForCancelResponseTimerName;
  else
    v6 = (uint64_t *)kWaitingForCancelResponseTimerName;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v6, *((_QWORD *)a2 + 1)))
      return;
LABEL_17:
    SipSessionClientCanceledState::terminateSession(a1, 8);
    return;
  }
  if (!a2[23])
    goto LABEL_17;
  while (*a2 == *(unsigned __int8 *)v6)
  {
    ++a2;
    v6 = (uint64_t *)((char *)v6 + 1);
    if (!--v2)
      goto LABEL_17;
  }
}

void SipSessionClientCanceledState::handleResponse(uint64_t a1, const SipResponse *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  double v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  void *v52[9];
  uint64_t v53;
  std::string v54;
  void *v55[2];
  _BYTE v56[32];
  __int128 v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  _QWORD *v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;

  v67 = 0;
  v68 = 0;
  v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (!v4)
    goto LABEL_53;
  v68 = std::__shared_weak_count::lock(v4);
  if (!v68)
    goto LABEL_53;
  v7 = *(_QWORD *)(a1 + 208);
  v67 = v7;
  if (!v7)
    goto LABEL_53;
  v8 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v9 = v8[23];
  if ((v9 & 0x80u) == 0)
    v10 = v8[23];
  else
    v10 = *((_QWORD *)v8 + 1);
  if (v10 != 6)
    goto LABEL_15;
  if ((v9 & 0x80) == 0)
  {
    if (v8[23])
    {
      v11 = "INVITE";
      while (*v8 == *(unsigned __int8 *)v11)
      {
        ++v8;
        ++v11;
        if (!--v9)
          goto LABEL_25;
      }
      goto LABEL_15;
    }
LABEL_25:
    v16 = *((_DWORD *)a2 + 22);
    if (v16 - 100 > 0x63)
    {
      if (v16 - 200 > 0x63)
      {
        if (v16 >= 0x12C)
          SipSessionClientCanceledState::terminateSession(a1, 13);
        goto LABEL_53;
      }
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"received 200 after we sent a CANCEL.  Sending BYE.", 50);
      *(_BYTE *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v32 + 17) = 0;
      v33 = (std::__shared_weak_count *)a3[1];
      v61 = *a3;
      v62 = v33;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldxr(p_shared_owners);
        while (__stxr(v35 + 1, p_shared_owners));
      }
      SipSession::handleInviteResponseToCancel((_QWORD *)v7, a2, &v61);
      v29 = v62;
      if (!v62)
        goto LABEL_53;
      v36 = (unint64_t *)&v62->__shared_owners_;
      do
        v31 = __ldaxr(v36);
      while (__stlxr(v31 - 1, v36));
    }
    else
    {
      if (*(_BYTE *)(a1 + 224))
        goto LABEL_53;
      v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v17);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"received provisional response to INVITE.  Sending pending CANCEL request.", 73);
      *(_BYTE *)(v17 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v17 + 17) = 0;
      v18 = *(_QWORD **)(v7 + 240);
      v19 = *(std::__shared_weak_count **)(v7 + 248);
      v65 = v18;
      v66 = v19;
      if (v19)
      {
        v20 = (unint64_t *)&v19->__shared_owners_;
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = (std::__shared_weak_count *)a3[1];
      v63 = *a3;
      v64 = v22;
      if (v22)
      {
        v23 = (unint64_t *)&v22->__shared_owners_;
        do
          v24 = __ldxr(v23);
        while (__stxr(v24 + 1, v23));
      }
      v25 = SipDialog::cancelInviteRequest(v18, &v63, *(const std::string **)(v7 + 1552), (uint64_t)&v53);
      *(_BYTE *)(a1 + 224) = (*(uint64_t (**)(std::string::size_type, _QWORD, double))(*(_QWORD *)v54.__r_.__value_.__l.__data_
                                                                                               + 24))(v54.__r_.__value_.__r.__words[0], LODWORD(v54.__r_.__value_.__r.__words[1]), v25) ^ 1;
      ImsResult::~ImsResult((ImsResult *)&v53);
      v26 = v64;
      if (v64)
      {
        v27 = (unint64_t *)&v64->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
        }
      }
      v29 = v66;
      if (!v66)
        goto LABEL_53;
      v30 = (unint64_t *)&v66->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
    }
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
    goto LABEL_53;
  }
  if (!memcmp(*(const void **)v8, "INVITE", *((_QWORD *)v8 + 1)))
    goto LABEL_25;
LABEL_15:
  v12 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v13 = v12[23];
  if ((v13 & 0x80u) == 0)
    v14 = v12[23];
  else
    v14 = *((_QWORD *)v12 + 1);
  if (v14 != 6)
    goto LABEL_52;
  if ((v13 & 0x80) == 0)
  {
    if (v12[23])
    {
      v15 = "CANCEL";
      while (*v12 == *(unsigned __int8 *)v15)
      {
        ++v12;
        ++v15;
        if (!--v13)
          goto LABEL_59;
      }
      goto LABEL_52;
    }
    goto LABEL_59;
  }
  if (memcmp(*(const void **)v12, "CANCEL", *((_QWORD *)v12 + 1)))
  {
LABEL_52:
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v37);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)"doing nothing with ", 19);
    *(_BYTE *)(v37 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v37 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" response to ", 13);
    *(_BYTE *)(v37 + 17) = 0;
    v38 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v37 + 32))(v37, v38);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v37 + 8), (uint64_t)" request", 8);
    *(_BYTE *)(v37 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v37 + 64))(v37, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v37 + 17) = 0;
    goto LABEL_53;
  }
LABEL_59:
  if (*((_DWORD *)a2 + 22) >= 0x12Cu)
  {
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v42);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"received ", 9);
    *(_BYTE *)(v42 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v42 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)" response to our CANCEL.  Sending BYE.", 38);
    *(_BYTE *)(v42 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v42 + 17) = 0;
    v53 = 0;
    *(_OWORD *)&v54.__r_.__value_.__r.__words[1] = 0u;
    v60 = 0;
    v58 = 0u;
    v59 = 0u;
    *(_OWORD *)&v56[16] = 0u;
    v57 = 0u;
    *(_OWORD *)v55 = 0u;
    *(_OWORD *)v56 = 0u;
    *((_BYTE *)&v54.__r_.__value_.__s + 23) = 13;
    qmemcpy(&v54, "InternalError", 13);
    *(_QWORD *)&v56[12] = 0xA000001F4;
    v43 = *(_QWORD *)(v7 + 1552);
    if (v43)
    {
      LODWORD(v53) = *(_DWORD *)v43;
      std::string::operator=(&v54, (const std::string *)(v43 + 8));
      std::string::operator=((std::string *)v55, (const std::string *)(v43 + 32));
      v44 = *(_QWORD *)(v43 + 56);
      *(_DWORD *)&v56[16] = *(_DWORD *)(v43 + 64);
      *(_QWORD *)&v56[8] = v44;
      std::string::operator=((std::string *)&v56[24], (const std::string *)(v43 + 72));
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v58, (uint64_t *)(v43 + 96));
      std::shared_ptr<IpAddress>::operator=[abi:ne180100](&v59, (uint64_t *)(v43 + 112));
      v45 = *(_DWORD *)(v43 + 131);
      LODWORD(v60) = *(_DWORD *)(v43 + 128);
      *(_DWORD *)((char *)&v60 + 3) = v45;
    }
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v7 + 120))(v52, v7, &v53, 0);
    ImsResult::~ImsResult((ImsResult *)v52);
    v46 = (std::__shared_weak_count *)*((_QWORD *)&v59 + 1);
    if (*((_QWORD *)&v59 + 1))
    {
      v47 = (unint64_t *)(*((_QWORD *)&v59 + 1) + 8);
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
        std::__shared_weak_count::__release_weak(v46);
      }
    }
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v58 + 1);
    if (*((_QWORD *)&v58 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v58 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (SHIBYTE(v57) < 0)
      operator delete(*(void **)&v56[24]);
    if ((v56[7] & 0x80000000) != 0)
      operator delete(v55[0]);
    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v54.__r_.__value_.__l.__data_);
  }
LABEL_53:
  v39 = v68;
  if (v68)
  {
    v40 = (unint64_t *)&v68->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
}

void sub_1BEF0A8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 64);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSCanceledState::enterState(SipSessionClientWPSCanceledState *this, unsigned int a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  double v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unint64_t *p_shared_weak_owners;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count_vtbl *v32;
  void (__cdecl *v33)(std::__shared_weak_count *__hidden);
  SipUserAgent *v34;
  unint64_t *v35;
  unint64_t v36;
  _QWORD *v37;
  std::__shared_weak_count_vtbl *v38;
  void (__cdecl *v39)(std::__shared_weak_count *__hidden);
  SipUserAgent *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  _QWORD *v46;
  ImsPrefs *v47;
  void *WPSCSFBDelayTimeoutKey;
  void *v49;
  unsigned int v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *p_shared_owners;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  _QWORD *v63;
  std::__shared_weak_count *v64;
  SipStack *v65;
  std::__shared_weak_count *v66;
  unsigned int v67;
  uint64_t v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  std::__shared_weak_count *v71;
  _BYTE v72[24];
  _BYTE *v73;
  _BYTE v74[24];
  _BYTE *v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  *((_BYTE *)this + 224) = 0;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v3)
    return;
  v5 = std::__shared_weak_count::lock(v3);
  v71 = v5;
  if (!v5)
    return;
  v6 = *((_QWORD *)this + 26);
  v70 = (std::__shared_weak_count *)v6;
  if (!v6)
  {
    v21 = v5;
LABEL_71:
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v60 = __ldaxr(p_shared_owners);
    while (__stlxr(v60 - 1, p_shared_owners));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
    return;
  }
  v68 = 0;
  v69 = 0;
  SipSession::clientInviteTransaction((SipSession *)v6, &v68);
  if (a2 < 2)
  {
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v22);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"queuing CANCEL until we receive a provisional response.", 55);
    *(_BYTE *)(v22 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v22 + 17) = 0;
    if (v68)
    {
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v23);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"turning off retransmission of INVITE", 36);
      *(_BYTE *)(v23 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v23 + 17) = 0;
      *(_BYTE *)(v68 + 360) = 0;
    }
  }
  else
  {
    v7 = v68;
    if (v68)
    {
      v8 = *(_QWORD **)(v6 + 240);
      v9 = *(std::__shared_weak_count **)(v6 + 248);
      v63 = v8;
      v64 = v9;
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v61 = v7;
      v62 = v69;
      if (v69)
      {
        v12 = (unint64_t *)&v69->__shared_owners_;
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v14 = SipDialog::cancelInviteRequest(v8, &v61, *(const std::string **)(v6 + 1552), (uint64_t)&v65);
      *((_BYTE *)this + 224) = ((uint64_t (*)(std::__shared_weak_count *, _QWORD, double))v66->__get_deleter)(v66, v67, v14) ^ 1;
      ImsResult::~ImsResult((ImsResult *)&v65);
      v15 = v62;
      if (v62)
      {
        v16 = (unint64_t *)&v62->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      v18 = v64;
      if (v64)
      {
        v19 = (unint64_t *)&v64->__shared_owners_;
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
    }
    else
    {
      v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 64))(v6);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v24);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"no client INVITE transaction to cancel, going right to terminated state", 71);
      *(_BYTE *)(v24 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v24 + 17) = 0;
      v25 = (*(uint64_t (**)(SipSessionClientWPSCanceledState *))(*(_QWORD *)this + 32))(this);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 32))(v25, 13);
    }
  }
  v27 = *((_QWORD *)this + 24);
  v26 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v26)
  {
    p_shared_weak_owners = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v29 = __ldxr(p_shared_weak_owners);
    while (__stxr(v29 + 1, p_shared_weak_owners));
    do
      v30 = __ldxr(p_shared_weak_owners);
    while (__stxr(v30 + 1, p_shared_weak_owners));
  }
  v31 = v70;
  v32 = v70[10].__vftable;
  if (v32 && (v33 = v32[5].~__shared_weak_count_0) != 0)
    v34 = (SipUserAgent *)*((_QWORD *)v33 + 17);
  else
    v34 = 0;
  if (*(_DWORD *)(SipUserAgent::config(v34) + 600))
  {
    if (v26)
    {
      v35 = (unint64_t *)&v26->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v75 = 0;
    v37 = operator new(0x20uLL);
    *v37 = &off_1E78C5580;
    v37[1] = this;
    v37[2] = v27;
    v37[3] = v26;
    v75 = v37;
    v38 = v31[10].__vftable;
    if (v38 && (v39 = v38[5].~__shared_weak_count_0) != 0)
      v40 = (SipUserAgent *)*((_QWORD *)v39 + 17);
    else
      v40 = 0;
    v41 = SipUserAgent::config(v40);
    SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)&kWaitingForCancelResponseTimerName, (uint64_t)v74, *(_DWORD *)(v41 + 600), 0);
    v42 = v75;
    if (v75 == v74)
    {
      v43 = 4;
      v42 = v74;
    }
    else
    {
      if (!v75)
        goto LABEL_47;
      v43 = 5;
    }
    (*(void (**)(_QWORD *))(*v42 + 8 * v43))(v42);
  }
LABEL_47:
  if (v26)
  {
    v44 = (unint64_t *)&v26->__shared_weak_owners_;
    do
      v45 = __ldxr(v44);
    while (__stxr(v45 + 1, v44));
  }
  v73 = 0;
  v46 = operator new(0x20uLL);
  *v46 = &off_1E78C5580;
  v46[1] = this;
  v46[2] = v27;
  v46[3] = v26;
  v73 = v46;
  SipSessionInterface::stack(v31, &v65);
  v47 = (ImsPrefs *)SipStack::prefs(v65);
  WPSCSFBDelayTimeoutKey = ImsPrefs::getWPSCSFBDelayTimeoutKey(v47);
  v49 = ImsPrefs::prefWithKey(v47, (void **)WPSCSFBDelayTimeoutKey);
  if (v49)
    v50 = (*(uint64_t (**)(void *))(*(_QWORD *)v49 + 56))(v49);
  else
    v50 = *((_DWORD *)WPSCSFBDelayTimeoutKey + 15);
  SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)"WPSCSFBDelayTimer", (uint64_t)v72, v50, 0);
  v51 = v66;
  if (v66)
  {
    v52 = (unint64_t *)&v66->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v73;
  if (v73 == v72)
  {
    v55 = 4;
    v54 = v72;
  }
  else
  {
    if (!v73)
      goto LABEL_63;
    v55 = 5;
  }
  (*(void (**)(_QWORD *))(*v54 + 8 * v55))(v54);
LABEL_63:
  if (v26)
  {
    std::__shared_weak_count::__release_weak(v26);
    std::__shared_weak_count::__release_weak(v26);
  }
  v56 = v69;
  if (v69)
  {
    v57 = (unint64_t *)&v69->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v21 = v71;
  if (v71)
    goto LABEL_71;
}

void sub_1BEF0AE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  ImsResult::~ImsResult((ImsResult *)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSCanceledState::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  unsigned __int8 *v8;
  uint64_t v9;
  const char *v10;
  const void *v11;
  uint64_t v12;

  v3 = a2[23];
  v4 = *((_QWORD *)a2 + 1);
  if ((v3 & 0x80u) == 0)
    v5 = a2[23];
  else
    v5 = *((_QWORD *)a2 + 1);
  v6 = qword_1ED70E658;
  if (byte_1ED70E667 >= 0)
    v6 = byte_1ED70E667;
  if (v5 != v6)
    goto LABEL_16;
  if (byte_1ED70E667 >= 0)
    v7 = &kWaitingForCancelResponseTimerName;
  else
    v7 = (uint64_t *)kWaitingForCancelResponseTimerName;
  if ((v3 & 0x80) != 0)
  {
    v11 = *(const void **)a2;
    if (memcmp(*(const void **)a2, v7, v4))
    {
      if (v4 != 17)
        return;
LABEL_28:
      if (memcmp(v11, "WPSCSFBDelayTimer", v4))
        return;
      goto LABEL_30;
    }
LABEL_26:
    v12 = 8;
LABEL_31:
    SipSessionClientCanceledState::terminateSession(a1, v12);
    return;
  }
  if (!a2[23])
    goto LABEL_26;
  v8 = a2;
  v9 = a2[23];
  while (*v8 == *(unsigned __int8 *)v7)
  {
    ++v8;
    v7 = (uint64_t *)((char *)v7 + 1);
    if (!--v9)
      goto LABEL_26;
  }
LABEL_16:
  if (v5 != 17)
    return;
  if ((v3 & 0x80) != 0)
  {
    v11 = *(const void **)a2;
    goto LABEL_28;
  }
  if (!a2[23])
  {
LABEL_30:
    v12 = 13;
    goto LABEL_31;
  }
  v10 = "WPSCSFBDelayTimer";
  while (*a2 == *(unsigned __int8 *)v10)
  {
    ++a2;
    ++v10;
    if (!--v3)
      goto LABEL_30;
  }
}

void SipSessionClientWPSCanceledState::handleResponse(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  unsigned __int8 *v6;
  uint64_t v7;
  uint64_t v8;
  const char *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  BambiCall *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  double v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  BambiCall *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  BambiCall *v30;
  unint64_t *p_shared_weak_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  BambiCall *v43[2];
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  BambiCall *v48;
  std::__shared_weak_count *v49;
  void *__p;
  uint64_t v51;
  unsigned int v52;
  char v53;
  uint64_t v54;
  std::__shared_weak_count *v55;

  v6 = (unsigned __int8 *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(*a3 + 288) + 112))(*(_QWORD *)(*a3 + 288));
  v7 = v6[23];
  if ((v7 & 0x80u) == 0)
    v8 = v6[23];
  else
    v8 = *((_QWORD *)v6 + 1);
  if (v8 != 6)
    return;
  if ((v7 & 0x80) != 0)
  {
    if (memcmp(*(const void **)v6, "INVITE", *((_QWORD *)v6 + 1)))
      return;
LABEL_12:
    v54 = 0;
    v55 = 0;
    v10 = *(std::__shared_weak_count **)(a1 + 216);
    if (v10)
    {
      v55 = std::__shared_weak_count::lock(v10);
      if (v55)
      {
        v11 = *(_QWORD *)(a1 + 208);
        v54 = v11;
        if (v11)
        {
          v12 = *(_DWORD *)(a2 + 88);
          if (v12 - 100 <= 0x63)
          {
            if (*(_BYTE *)(a1 + 224))
              goto LABEL_51;
            v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v13);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"received provisional response to INVITE.  Sending pending CANCEL request.", 73);
            *(_BYTE *)(v13 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v13 + 17) = 0;
            v14 = *(BambiCall **)(v11 + 240);
            v15 = *(std::__shared_weak_count **)(v11 + 248);
            v48 = v14;
            v49 = v15;
            if (v15)
            {
              p_shared_owners = (unint64_t *)&v15->__shared_owners_;
              do
                v17 = __ldxr(p_shared_owners);
              while (__stxr(v17 + 1, p_shared_owners));
            }
            v18 = (std::__shared_weak_count *)a3[1];
            v46 = *a3;
            v47 = v18;
            if (v18)
            {
              v19 = (unint64_t *)&v18->__shared_owners_;
              do
                v20 = __ldxr(v19);
              while (__stxr(v20 + 1, v19));
            }
            v21 = SipDialog::cancelInviteRequest(v14, &v46, *(const std::string **)(v11 + 1552), (uint64_t)&__p);
            *(_BYTE *)(a1 + 224) = (*(uint64_t (**)(uint64_t, _QWORD, double))(*(_QWORD *)v51 + 24))(v51, v52, v21) ^ 1;
            ImsResult::~ImsResult((ImsResult *)&__p);
            v22 = v47;
            if (v47)
            {
              v23 = (unint64_t *)&v47->__shared_owners_;
              do
                v24 = __ldaxr(v23);
              while (__stlxr(v24 - 1, v23));
              if (!v24)
              {
                ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
                std::__shared_weak_count::__release_weak(v22);
              }
            }
            v25 = (BambiCall *)v49;
            if (!v49)
              goto LABEL_51;
            v26 = (unint64_t *)&v49->__shared_owners_;
            do
              v27 = __ldaxr(v26);
            while (__stlxr(v27 - 1, v26));
            goto LABEL_47;
          }
          if (v12 >= 0x12C)
          {
            v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 64))(v11);
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v11 + 16))(v11, v28);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v28 + 8), (uint64_t)"recieved error response to cancel while in WPS cleanup state - ending all other calls in preparation for CSFB", 109);
            *(_BYTE *)(v28 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v28 + 17) = 0;
            v29 = *(std::__shared_weak_count **)(v11 + 776);
            if (v29)
            {
              v30 = *(BambiCall **)(v11 + 768);
              p_shared_weak_owners = (unint64_t *)&v29->__shared_weak_owners_;
              do
                v32 = __ldxr(p_shared_weak_owners);
              while (__stxr(v32 + 1, p_shared_weak_owners));
              v33 = std::__shared_weak_count::lock(v29);
              v49 = v33;
              if (!v33)
              {
                v39 = v29;
LABEL_50:
                std::__shared_weak_count::__release_weak(v39);
                goto LABEL_51;
              }
              v25 = (BambiCall *)v33;
              v48 = v30;
              std::__shared_weak_count::__release_weak(v29);
              if (v30)
              {
                v34 = BambiCall::bambiClient(v30);
                std::string::basic_string[abi:ne180100]<0>(&__p, "EstablishingAnotherCall");
                v44 = 0;
                v45 = 0;
                v35 = (std::__shared_weak_count *)*((_QWORD *)v30 + 45);
                if (v35)
                {
                  v45 = std::__shared_weak_count::lock(v35);
                  if (v45)
                    v44 = *((_QWORD *)v30 + 44);
                }
                v43[0] = v30;
                v43[1] = v25;
                v36 = (unint64_t *)((char *)v25 + 8);
                do
                  v37 = __ldxr(v36);
                while (__stxr(v37 + 1, v36));
                BambiClient::endOtherCalls(v34, (uint64_t)&__p, &v44, v43);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v43);
                std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v44);
                if (v53 < 0)
                  operator delete(__p);
              }
              v38 = (unint64_t *)((char *)v25 + 8);
              do
                v27 = __ldaxr(v38);
              while (__stlxr(v27 - 1, v38));
LABEL_47:
              if (v27)
                goto LABEL_51;
              (*(void (**)(BambiCall *))(*(_QWORD *)v25 + 16))(v25);
              v39 = (std::__shared_weak_count *)v25;
              goto LABEL_50;
            }
          }
        }
      }
    }
LABEL_51:
    v40 = v55;
    if (v55)
    {
      v41 = (unint64_t *)&v55->__shared_owners_;
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      if (!v42)
      {
        ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
        std::__shared_weak_count::__release_weak(v40);
      }
    }
    return;
  }
  if (!v6[23])
    goto LABEL_12;
  v9 = "INVITE";
  while (*v6 == *(unsigned __int8 *)v9)
  {
    ++v6;
    ++v9;
    if (!--v7)
      goto LABEL_12;
  }
}

void sub_1BEF0B464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  if (a23 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 48);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSNetworkTerminatedState::enterState(SipSessionClientWPSNetworkTerminatedState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  ImsPrefs *v11;
  void *WPSCSFBDelayTimeoutKey;
  void *v13;
  unsigned int v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *shared_owners;
  BambiCall *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  BambiCall *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  BambiCall *v39[2];
  uint64_t v40;
  std::__shared_weak_count *v41;
  void *__p;
  std::__shared_weak_count *v43;
  char v44;
  BambiCall *v45;
  BambiCall *v46;
  std::__shared_weak_count *v47;
  std::__shared_weak_count *v48;
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v51 = *MEMORY[0x1E0C80C00];
  v47 = 0;
  v48 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (!v2)
    goto LABEL_52;
  v48 = std::__shared_weak_count::lock(v2);
  if (!v48)
    goto LABEL_52;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 26);
  v47 = v3;
  if (!v3)
    goto LABEL_52;
  v5 = *((_QWORD *)this + 24);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v4)
  {
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    do
      v8 = __ldxr(p_shared_weak_owners);
    while (__stxr(v8 + 1, p_shared_weak_owners));
    do
      v9 = __ldxr(p_shared_weak_owners);
    while (__stxr(v9 + 1, p_shared_weak_owners));
  }
  v10 = operator new(0x20uLL);
  *v10 = &off_1E78C5600;
  v10[1] = this;
  v10[2] = v5;
  v10[3] = v4;
  v50 = v10;
  SipSessionInterface::stack(v3, &__p);
  v11 = (ImsPrefs *)SipStack::prefs((SipStack *)__p);
  WPSCSFBDelayTimeoutKey = ImsPrefs::getWPSCSFBDelayTimeoutKey(v11);
  v13 = ImsPrefs::prefWithKey(v11, (void **)WPSCSFBDelayTimeoutKey);
  if (v13)
    v14 = (*(uint64_t (**)(void *))(*(_QWORD *)v13 + 56))(v13);
  else
    v14 = *((_DWORD *)WPSCSFBDelayTimeoutKey + 15);
  SipTimerContainer::startTimer((_QWORD *)this + 3, (uint64_t)"WPSCSFBDelayTimer", (uint64_t)v49, v14, 0);
  v15 = v43;
  if (v43)
  {
    p_shared_owners = (unint64_t *)&v43->__shared_owners_;
    do
      v17 = __ldaxr(p_shared_owners);
    while (__stlxr(v17 - 1, p_shared_owners));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v50;
  if (v50 == v49)
  {
    v19 = 4;
    v18 = v49;
  }
  else
  {
    if (!v50)
      goto LABEL_22;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_22:
  shared_owners = (std::__shared_weak_count *)v47[32].__shared_owners_;
  if (shared_owners)
  {
    v21 = (BambiCall *)v47[32].__vftable;
    v22 = (unint64_t *)&shared_owners->__shared_weak_owners_;
    do
      v23 = __ldxr(v22);
    while (__stxr(v23 + 1, v22));
    v24 = std::__shared_weak_count::lock(shared_owners);
    v46 = (BambiCall *)v24;
    if (v24)
    {
      v25 = (BambiCall *)v24;
      v45 = v21;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (v21)
      {
        v26 = BambiCall::bambiClient(v21);
        std::string::basic_string[abi:ne180100]<0>(&__p, "EstablishingAnotherCall");
        v40 = 0;
        v41 = 0;
        v27 = (std::__shared_weak_count *)*((_QWORD *)v21 + 45);
        if (v27)
        {
          v41 = std::__shared_weak_count::lock(v27);
          if (v41)
            v40 = *((_QWORD *)v21 + 44);
        }
        v39[0] = v21;
        v39[1] = v25;
        v28 = (unint64_t *)((char *)v25 + 8);
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
        BambiClient::endOtherCalls(v26, (uint64_t)&__p, &v40, v39);
        do
          v30 = __ldaxr(v28);
        while (__stlxr(v30 - 1, v28));
        if (!v30)
        {
          (*(void (**)(BambiCall *))(*(_QWORD *)v25 + 16))(v25);
          std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
        }
        v31 = v41;
        if (v41)
        {
          v32 = (unint64_t *)&v41->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        if (v44 < 0)
          operator delete(__p);
        v25 = v46;
        if (!v46)
          goto LABEL_50;
      }
      v34 = (unint64_t *)((char *)v25 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (v35)
        goto LABEL_50;
      (*(void (**)(BambiCall *))(*(_QWORD *)v25 + 16))(v25);
    }
    else
    {
      v25 = (BambiCall *)shared_owners;
    }
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v25);
  }
LABEL_50:
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
LABEL_52:
  v36 = v48;
  if (v48)
  {
    v37 = (unint64_t *)&v48->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
}

void sub_1BEF0B82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,char a21)
{
  std::__shared_weak_count *v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  if (a18 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  if (v21)
  {
    std::__shared_weak_count::__release_weak(v21);
    std::__shared_weak_count::__release_weak(v21);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void SipSessionClientWPSNetworkTerminatedState::handleTimer(SipSessionState *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  const char *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *shared_owners;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  const SipResponse *v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[74];
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::__shared_weak_count *v36;
  std::__shared_weak_count *v37;

  v2 = a2[23];
  if ((v2 & 0x80u) == 0)
    v3 = a2[23];
  else
    v3 = *((_QWORD *)a2 + 1);
  if (v3 != 17)
    return;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, "WPSCSFBDelayTimer", *((_QWORD *)a2 + 1)))
      return;
LABEL_12:
    v6 = (std::__shared_weak_count *)*((_QWORD *)a1 + 27);
    if (!v6)
      return;
    v7 = std::__shared_weak_count::lock(v6);
    v37 = v7;
    if (!v7)
      return;
    v8 = (std::__shared_weak_count *)*((_QWORD *)a1 + 26);
    v36 = v8;
    if (!v8)
    {
      v14 = v7;
      goto LABEL_46;
    }
    shared_owners = (std::__shared_weak_count *)v8[32].__shared_owners_;
    if (shared_owners)
    {
      v10 = (uint64_t)v8[32].__vftable;
      p_shared_weak_owners = (unint64_t *)&shared_owners->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
      v34 = 0;
      v13 = std::__shared_weak_count::lock(shared_owners);
      v35 = v13;
      if (v13)
        v34 = v10;
      else
        v10 = 0;
      std::__shared_weak_count::__release_weak(shared_owners);
      if (v8[65].__shared_owners_ && v10)
      {
        bzero(v33, 0x250uLL);
        v31 = v10;
        v32 = v13;
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v16 = __ldxr(p_shared_owners);
          while (__stxr(v16 + 1, p_shared_owners));
        }
        BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(v33, &v31);
        v17 = v32;
        if (v32)
        {
          v18 = (unint64_t *)&v32->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v20 = (const SipResponse *)v36[65].__shared_owners_;
        SipSessionInterface::stack(v36, &v29);
        BambiCallSessionTerminationBaseEvent::setReasonFromIncomingResponse((BambiCallSessionTerminationBaseEvent *)v33, v20, (const BambiCallIncomingTerminationReasons *)(v29 + 2392));
        v21 = v30;
        if (v30)
        {
          v22 = (unint64_t *)&v30->__shared_owners_;
          do
            v23 = __ldaxr(v22);
          while (__stlxr(v23 - 1, v22));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        SipSessionState::terminateSessionWithEvent(a1, (BambiCallEvent *)v33);
        BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v33);
        v13 = v35;
LABEL_40:
        if (v13)
        {
          v25 = (unint64_t *)&v13->__shared_owners_;
          do
            v26 = __ldaxr(v25);
          while (__stlxr(v26 - 1, v25));
          if (!v26)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v14 = v37;
        if (!v37)
          return;
LABEL_46:
        v27 = (unint64_t *)&v14->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
        return;
      }
    }
    else
    {
      v13 = 0;
      v34 = 0;
      v35 = 0;
    }
    v24 = (*(uint64_t (**)(SipSessionState *))(*(_QWORD *)a1 + 32))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, 13);
    goto LABEL_40;
  }
  if (!a2[23])
    goto LABEL_12;
  v5 = "WPSCSFBDelayTimer";
  while (*a2 == *(unsigned __int8 *)v5)
  {
    ++a2;
    ++v5;
    if (!--v2)
      goto LABEL_12;
  }
}

void sub_1BEF0BB78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 64);
  _Unwind_Resume(a1);
}

void SipSessionClientUnconfirmedState::~SipSessionClientUnconfirmedState(SipSessionClientUnconfirmedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionState::id(SipSessionState *this)
{
  return 0;
}

void `non-virtual thunk to'SipSessionClientUnconfirmedState::~SipSessionClientUnconfirmedState(SipSessionClientUnconfirmedState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientUnconfirmedState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientUnconfirmedState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientInviteState::~SipSessionClientInviteState(SipSessionClientInviteState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionClientInviteState::id(SipSessionClientInviteState *this)
{
  return 1;
}

void `non-virtual thunk to'SipSessionClientInviteState::~SipSessionClientInviteState(SipSessionClientInviteState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientInviteState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientInviteState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientReceivedTryingResponseState::~SipSessionClientReceivedTryingResponseState(SipSessionClientReceivedTryingResponseState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionClientReceivedTryingResponseState::id(SipSessionClientReceivedTryingResponseState *this)
{
  return 2;
}

void `non-virtual thunk to'SipSessionClientReceivedTryingResponseState::~SipSessionClientReceivedTryingResponseState(SipSessionClientReceivedTryingResponseState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientReceivedTryingResponseState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientReceivedTryingResponseState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientCanceledState::~SipSessionClientCanceledState(SipSessionClientCanceledState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionClientCanceledState::id(SipSessionClientCanceledState *this)
{
  return 8;
}

void `non-virtual thunk to'SipSessionClientCanceledState::~SipSessionClientCanceledState(SipSessionClientCanceledState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientCanceledState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientCanceledState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientWPSNetworkTerminatedState::~SipSessionClientWPSNetworkTerminatedState(SipSessionClientWPSNetworkTerminatedState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionClientWPSNetworkTerminatedState::id(SipSessionClientWPSNetworkTerminatedState *this)
{
  return 15;
}

uint64_t SipSessionClientWPSNetworkTerminatedState::isConfirmed(SipSessionClientWPSNetworkTerminatedState *this)
{
  return 0;
}

void `non-virtual thunk to'SipSessionClientWPSNetworkTerminatedState::~SipSessionClientWPSNetworkTerminatedState(SipSessionClientWPSNetworkTerminatedState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientWPSNetworkTerminatedState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientWPSNetworkTerminatedState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

void SipSessionClientWPSCanceledState::~SipSessionClientWPSCanceledState(SipSessionClientWPSCanceledState *this)
{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipSessionClientWPSCanceledState::id(SipSessionClientWPSCanceledState *this)
{
  return 14;
}

void `non-virtual thunk to'SipSessionClientWPSCanceledState::~SipSessionClientWPSCanceledState(SipSessionClientWPSCanceledState *this)
{
  SipSessionState::~SipSessionState((SipSessionClientWPSCanceledState *)((char *)this - 8));
}

{
  SipSessionState::~SipSessionState((SipSessionClientWPSCanceledState *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

_QWORD *BambiCallSessionTerminatedEvent::BambiCallSessionTerminatedEvent(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v3 = a2[1];
  v10 = *a2;
  v11 = (std::__shared_weak_count *)v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)a1, 15, &v10);
  v6 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  *a1 = &off_1E78BD2A8;
  return a1;
}

void sub_1BEF0BF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent(uint64_t a1, int a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v9[2];

  v4 = (std::__shared_weak_count *)a3[1];
  v9[0] = *a3;
  v9[1] = (uint64_t)v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    BambiCallEvent::BambiCallEvent(a1, a2, v9);
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    BambiCallEvent::BambiCallEvent(a1, a2, v9);
  }
  *(_QWORD *)a1 = &off_1E78C91A8;
  *(_DWORD *)(a1 + 40) = 10;
  *(_QWORD *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 144) = 0x10000;
  *(_BYTE *)(a1 + 148) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_WORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 248) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 256) = a1 + 264;
  *(_BYTE *)(a1 + 281) = 1;
  *(_QWORD *)(a1 + 184) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 192) = &off_1E78D08F8;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 512) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = a1 + 528;
  *(_QWORD *)(a1 + 552) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 568) = 0;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 560) = a1 + 568;
  *(_BYTE *)(a1 + 280) = 1;
  *(_WORD *)(a1 + 544) = 257;
  *(_WORD *)(a1 + 584) = 257;
  *(_BYTE *)(a1 + 504) = 0;
  return a1;
}

_BYTE *BambiCallEmergencySessionRequiredEvent::clone(BambiCallEmergencySessionRequiredEvent *this)
{
  _BYTE *v2;

  v2 = (_BYTE *)operator new();
  BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)v2, this);
  *(_QWORD *)v2 = &off_1E78C5440;
  SipUri::SipUri((SipUri *)(v2 + 592), (BambiCallEmergencySessionRequiredEvent *)((char *)this + 592));
  v2[1000] = *((_BYTE *)this + 1000);
  return v2;
}

void sub_1BEF0C174(_Unwind_Exception *a1)
{
  BambiCallSessionTerminationBaseEvent *v1;

  BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent(v1);
  MEMORY[0x1C3B87100](v1, 0x10B3C40FA0B94BELL);
  _Unwind_Resume(a1);
}

uint64_t SipTimer::log(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 32))(a2, a1 + 8);
  return a2;
}

std::string *SipTimer::loggableName@<X0>(SipTimer *this@<X0>, std::string *a2@<X8>)
{
  return LoggableString::LoggableString(a2, (const std::string *)((char *)this + 8));
}

void SipSessionState::~SipSessionState(SipSessionState *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78E7EC0;
  *((_QWORD *)this + 1) = &unk_1E78E7F68;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 27);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 25);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  SipState::~SipState(this);
}

{
  SipSessionState::~SipSessionState(this);
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C5480;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C5480;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C5480;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C5480;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF0C460(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientInviteState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientInviteState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C5500;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C5500;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C5500;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C5500;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF0C6C8(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C5580;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C5580;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C5580;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C5580;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF0C930(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSCanceledState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C5600;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C5600;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C5600;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C5600;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 152))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF0CB98(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0,std::allocator<SipSessionClientWPSNetworkTerminatedState::enterState(unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

uint64_t _GLOBAL__sub_I_SipSessionClientStates_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kWaitingForCancelResponseTimerName, "WaitingForCancelResponse");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &kWaitingForCancelResponseTimerName, &dword_1BEDF4000);
}

void SipPAssertedIdentityHeader::~SipPAssertedIdentityHeader(void **this)
{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
}

{
  *this = off_1E78C3C20;
  SipRouteSet::~SipRouteSet((SipRouteSet *)(this + 8));
  SipHeader::~SipHeader(this);
  JUMPOUT(0x1C3B87100);
}

SipRouteSetHeader *SipPAssertedIdentityHeader::clone(SipPAssertedIdentityHeader *this)
{
  SipRouteSetHeader *v2;

  v2 = (SipRouteSetHeader *)operator new();
  SipRouteSetHeader::SipRouteSetHeader(v2, this);
  *(_QWORD *)v2 = &off_1E78C5C70;
  return v2;
}

void sub_1BEF0CD24(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x1093C40B808BD88);
  _Unwind_Resume(a1);
}

uint64_t SipStringParameterHeader::SipStringParameterHeader(uint64_t a1, const std::string *a2, const std::string *a3)
{
  uint64_t v5;

  v5 = SipHeader::SipHeader(a1, a2);
  *(_QWORD *)(v5 + 88) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  *(_QWORD *)(v5 + 64) = &off_1E78B82D8;
  *(_QWORD *)(v5 + 72) = v5 + 80;
  *(_WORD *)(v5 + 96) = 256;
  *(_QWORD *)v5 = off_1E78C5CF8;
  *(_QWORD *)(v5 + 104) = 0;
  *(_QWORD *)(v5 + 112) = 0;
  *(_QWORD *)(v5 + 120) = 0;
  *(_DWORD *)(v5 + 128) = 0;
  std::string::operator=((std::string *)(v5 + 104), a3);
  return a1;
}

void sub_1BEF0CDC0(_Unwind_Exception *a1)
{
  char *v1;
  void **v2;

  if (v1[127] < 0)
    operator delete(*v2);
  SipParameterHeader::~SipParameterHeader((SipParameterHeader *)v1);
  _Unwind_Resume(a1);
}

void SipParameterHeader::~SipParameterHeader(SipParameterHeader *this)
{
  *(_QWORD *)this = off_1E78E5828;
  *((_QWORD *)this + 8) = &off_1E78B82D8;
  std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::destroy((uint64_t)this + 72, *((_QWORD **)this + 10));
  SipHeader::~SipHeader((void **)this);
}

void SipStringParameterHeader::SipStringParameterHeader(SipStringParameterHeader *this, const SipStringParameterHeader *a2)
{
  _QWORD *v4;
  std::string *v5;
  __int128 v6;

  SipParameterHeader::SipParameterHeader(this, a2);
  *v4 = off_1E78C5CF8;
  v5 = (std::string *)(v4 + 13);
  if (*((char *)a2 + 127) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *((const std::string::value_type **)a2 + 13), *((_QWORD *)a2 + 14));
  }
  else
  {
    v6 = *(_OWORD *)((char *)a2 + 104);
    v5->__r_.__value_.__r.__words[2] = *((_QWORD *)a2 + 15);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  *((_DWORD *)this + 32) = 0;
}

void sub_1BEF0CE88(_Unwind_Exception *a1)
{
  SipParameterHeader *v1;

  SipParameterHeader::~SipParameterHeader(v1);
  _Unwind_Resume(a1);
}

uint64_t SipStringParameterHeader::encodeValue(SipStringParameterHeader *this, ImsOutStream *a2)
{
  int v4;
  std::string v6;
  void *__p;
  char v8;

  if (!ImsOutStream::isRedacting(a2) || (v4 = *((_DWORD *)this + 32)) == 0)
  {
    (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 104);
    return 1;
  }
  if (v4 == 1)
  {
    ObfuscatedString::ObfuscatedString((uint64_t)&v6, (const std::string *)((char *)this + 104));
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 56))(a2, &v6);
    if (v8 < 0)
      operator delete(__p);
  }
  else
  {
    if (v4 != 2)
      return 1;
    LoggableString::LoggableString(&v6, (const std::string *)((char *)this + 104));
    (*(void (**)(ImsOutStream *, std::string *))(*(_QWORD *)a2 + 40))(a2, &v6);
  }
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEF0CF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  ims::AccessNetwork::~AccessNetwork(&__p);
  _Unwind_Resume(a1);
}

uint64_t SipStringParameterHeader::valueAsString(uint64_t a1, std::string *this)
{
  std::string::operator=(this, (const std::string *)(a1 + 104));
  return 1;
}

uint64_t SipStringParameterHeader::setValueFromString(uint64_t a1, const std::string *a2)
{
  std::string::operator=((std::string *)(a1 + 104), a2);
  return 1;
}

uint64_t IMSSecurityAssociation::IMSSecurityAssociation(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ipsec");
  ImsLogContainer::ImsLogContainer(a1, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)a1 = &off_1E78C5D98;
  *(_QWORD *)(a1 + 104) = a2;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 124) = 0;
  *(_WORD *)(a1 + 128) = 0;
  v4 = *(_QWORD *)(a2 + 16);
  v5 = *(_DWORD *)(v4 + 128);
  *(_DWORD *)(v4 + 128) = v5 + 1;
  *(_DWORD *)(a1 + 120) = v5;
  return a1;
}

void sub_1BEF0D060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSSecurityAssociation::~IMSSecurityAssociation(void **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  *this = &off_1E78C5D98;
  v2 = ImsLogContainer::debugStream((ImsLogContainer *)this);
  (*((void (**)(void **, uint64_t))*this + 2))(this, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"deleting SA with spi ", 21);
  *(_BYTE *)(v2 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (*((_DWORD *)this + 28))
  {
    if (!IPSecDBDeleteSA(*(_QWORD *)(*((_QWORD *)this[13] + 2) + 120)))
    {
      v3 = (*((uint64_t (**)(void **))*this + 7))(this);
      (*((void (**)(void **, uint64_t))*this + 2))(this, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"delete SA failed for spi ", 25);
      *(_BYTE *)(v3 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v3 + 17) = 0;
    }
    *((_DWORD *)this + 28) = 0;
  }
  if (*((_DWORD *)this + 29))
  {
    if (!IPSecDBDeleteSA(*(_QWORD *)(*((_QWORD *)this[13] + 2) + 120)))
    {
      v4 = (*((uint64_t (**)(void **))*this + 7))(this);
      (*((void (**)(void **, uint64_t))*this + 2))(this, v4);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"delete policy failed for spi ", 29);
      *(_BYTE *)(v4 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v4 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v4 + 17) = 0;
    }
    *((_DWORD *)this + 29) = 0;
  }
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  IMSSecurityAssociation::~IMSSecurityAssociation(this);
  JUMPOUT(0x1C3B87100);
}

void IMSSecurityAssociation::logPrefix(IMSSecurityAssociation *this, ImsOutStream *a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  std::string::size_type v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  void *v31[2];
  char v32;
  std::string __p;
  __int128 v34;
  __int128 v35;
  uint64_t v36;

  v36 = 0;
  v34 = 0u;
  v35 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v34, 1);
  if (*((_DWORD *)this + 31))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)"[SA ", 4);
    BYTE1(v35) = 0;
    *(_DWORD *)(*((_QWORD *)&v34 + 1) + *(_QWORD *)(**((_QWORD **)&v34 + 1) - 24) + 8) = *(_DWORD *)(*((_QWORD *)&v34 + 1) + *(_QWORD *)(**((_QWORD **)&v34 + 1) - 24) + 8) & 0xFFFFFFB5 | 8;
    BYTE1(v35) = 0;
    std::ostream::operator<<();
    BYTE1(v35) = 0;
    v4 = *((_QWORD *)this + 13);
    if (*(_QWORD *)(v4 + 192))
    {
      if (*(char *)(v4 + 223) < 0)
      {
        if (!*(_QWORD *)(v4 + 208))
          goto LABEL_12;
      }
      else if (!*(_BYTE *)(v4 + 223))
      {
        goto LABEL_12;
      }
      if (*(_QWORD *)(v4 + 224))
      {
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)" ", 1);
        BYTE1(v35) = 0;
        LoggableString::LoggableString(&__p, (const std::string *)(*((_QWORD *)this + 13) + 200));
        (*(void (**)(__int128 *, std::string *))(v34 + 40))(&v34, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)" ", 1);
        BYTE1(v35) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v4 = *((_QWORD *)this + 13);
      }
    }
LABEL_12:
    v6 = *(_QWORD *)(v4 + 24);
    v5 = *(std::__shared_weak_count **)(v4 + 32);
    if (!v5)
      goto LABEL_17;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v6)
        goto LABEL_47;
    }
    else
    {
LABEL_17:
      if (!v6)
        goto LABEL_47;
    }
    v10 = *((_QWORD *)this + 13);
    v11 = *(_QWORD *)(v10 + 24);
    v12 = *(std::__shared_weak_count **)(v10 + 32);
    __p.__r_.__value_.__r.__words[0] = v11;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v12;
    if (v12)
    {
      v13 = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v11 + 40))(v11, &v34);
    if (v12)
    {
      v15 = (unint64_t *)&v12->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    if (*((_BYTE *)this + 128))
      v17 = " <-- ";
    else
      v17 = " --> ";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)v17, 5);
    BYTE1(v35) = 0;
    v18 = *((_QWORD *)this + 13);
    v20 = *(_QWORD *)(v18 + 40);
    v19 = *(std::__shared_weak_count **)(v18 + 48);
    if (!v19)
      goto LABEL_34;
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
    do
      v23 = __ldaxr(v21);
    while (__stlxr(v23 - 1, v21));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
      if (v20)
        goto LABEL_35;
    }
    else
    {
LABEL_34:
      if (v20)
      {
LABEL_35:
        v24 = *((_QWORD *)this + 13);
        v25 = *(_QWORD *)(v24 + 40);
        v26 = *(std::__shared_weak_count **)(v24 + 48);
        __p.__r_.__value_.__r.__words[0] = v25;
        __p.__r_.__value_.__l.__size_ = (std::string::size_type)v26;
        if (v26)
        {
          v27 = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v25 + 40))(v25, &v34);
        if (v26)
        {
          v29 = (unint64_t *)&v26->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        goto LABEL_47;
      }
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)"???", 3);
    BYTE1(v35) = 0;
LABEL_47:
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)"]", 1);
    goto LABEL_48;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v34 + 1), (uint64_t)"[Uninitialized SA]", 18);
LABEL_48:
  BYTE1(v35) = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v35 + 1) + 8, v31);
  *(_QWORD *)&v34 = &off_1E78D7A10;
  if ((_BYTE)v35 && *((_QWORD *)&v34 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v34 + 1) + 8))(*((_QWORD *)&v34 + 1));
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 32))(a2, v31);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v32 < 0)
    operator delete(v31[0]);
}

void sub_1BEF0D624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a23)
  {
    if (a22)
      (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

void IMSSecurityAssociation::fillDictionaryWithAddress(const void *a1, IpAddress **a2, int a3)
{
  const __CFString *v5;
  unsigned int v6;
  const __CFString *v7;
  unsigned int v8;
  const __CFString *v9;
  void *__p[2];
  char v11;
  _QWORD v12[2];

  v12[1] = a1;
  if (a1)
    CFRetain(a1);
  v12[0] = &off_1E78B8138;
  IpAddress::asString(*a2, 0, __p);
  if (a3)
    v5 = CFSTR("LocalAddress");
  else
    v5 = CFSTR("RemoteAddress");
  ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v12, v5, (char *)__p);
  if (v11 < 0)
    operator delete(__p[0]);
  v6 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*a2 + 192))(*a2);
  if (a3)
    v7 = CFSTR("LocalPrefix");
  else
    v7 = CFSTR("RemotePrefix");
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v12, v7, v6);
  v8 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*a2 + 56))(*a2);
  if (a3)
    v9 = CFSTR("LocalPort");
  else
    v9 = CFSTR("RemotePort");
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v12, v9, v8);
  ims::CFType::~CFType((ims::CFType *)v12);
}

void sub_1BEF0D794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  ims::CFType::~CFType((ims::CFType *)&a16);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::fillDictionaryWithCommonFields(IMSSecurityAssociation *this, __CFDictionary *a2, CFMutableDictionaryRef theDict, uint64_t a4)
{
  uint64_t v8;
  void **v9;
  __int128 *v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  size_t v16;
  char *v17;
  const char *v18;
  uint64_t v19;
  const __CFString *v20;
  int v21;
  const __CFString *v22;
  int v23;
  const char *v24;
  void **v25;
  __int128 *v26;
  uint64_t v27;
  std::string *v28;
  uint64_t v29;
  size_t size;
  std::string::size_type v31;
  size_t v32;
  char *v33;
  std::string *v34;
  uint64_t v35;
  int v36;
  std::string *v37;
  uint64_t v38;
  void **v39;
  __int128 *v40;
  uint64_t v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  void **v67;
  __int128 *v68;
  uint64_t v69;
  const ImsResult *v70;
  __CFDictionary *v71;
  void **v72;
  void (**v73)(ImsResult *__hidden);
  uint64_t *v74;
  int v75;
  __int128 v76;
  __int128 v77;
  __int128 v78;

  if (!a4)
  {
    v22 = CFSTR("ESP");
    v20 = CFSTR("Transport");
    goto LABEL_72;
  }
  v8 = a4 + 40;
  v9 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(a4 + 40, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  v10 = (__int128 *)(v9 + 7);
  v71 = theDict;
  v72 = (void **)(a4 + 48);
  if ((void **)(a4 + 48) == v9)
    v10 = &ims::kEmptyString;
  v11 = *((unsigned __int8 *)v10 + 23);
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v10 + 1);
  if (v11)
    v12 = (const char *)v10;
  else
    v12 = "trans";
  v13 = *((unsigned __int8 *)v12 + 23);
  v14 = *((_QWORD *)v12 + 1);
  if ((v13 & 0x80u) == 0)
    v15 = *((unsigned __int8 *)v12 + 23);
  else
    v15 = *((_QWORD *)v12 + 1);
  v16 = v15;
  if (v15 == 3)
  {
    if ((v13 & 0x80) == 0)
    {
      if (v12[23])
      {
        v17 = &SipIPSec3gppSecurityMechanism::kModeTunneling;
        v18 = v12;
        v19 = *((unsigned __int8 *)v12 + 23);
        v20 = CFSTR("Tunnel");
        while (*(unsigned __int8 *)v18 == *v17)
        {
          ++v18;
          ++v17;
          if (!--v19)
          {
            v21 = 0;
            goto LABEL_33;
          }
        }
        goto LABEL_22;
      }
LABEL_29:
      v21 = 0;
      v20 = CFSTR("Tunnel");
      goto LABEL_33;
    }
    v23 = memcmp(*(const void **)v12, &SipIPSec3gppSecurityMechanism::kModeTunneling, *((_QWORD *)v12 + 1));
    v16 = v14;
    if (!v23)
      goto LABEL_29;
  }
  if (!v16)
    goto LABEL_32;
LABEL_22:
  if (v15 != 5)
    goto LABEL_31;
  if ((v13 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)v12, "trans", v14))
      goto LABEL_32;
LABEL_31:
    v20 = 0;
    v21 = 1;
    goto LABEL_33;
  }
  if ((_DWORD)v13)
  {
    v24 = "trans";
    while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v24)
    {
      ++v12;
      ++v24;
      if (!--v13)
        goto LABEL_32;
    }
    goto LABEL_31;
  }
LABEL_32:
  v21 = 0;
  v20 = CFSTR("Transport");
LABEL_33:
  v25 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v8, (void **)"prot");
  v26 = (__int128 *)(v25 + 7);
  if (v72 == v25)
    v26 = &ims::kEmptyString;
  v27 = *((unsigned __int8 *)v26 + 23);
  if ((v27 & 0x80u) != 0)
    v27 = *((_QWORD *)v26 + 1);
  if (v27)
    v28 = (std::string *)v26;
  else
    v28 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
  v29 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  size = v28->__r_.__value_.__l.__size_;
  if ((v29 & 0x80u) == 0)
    v31 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  else
    v31 = v28->__r_.__value_.__l.__size_;
  v32 = v31;
  if (v31 != 2)
    goto LABEL_52;
  if ((v29 & 0x80) != 0)
  {
    v36 = memcmp(v28->__r_.__value_.__l.__data_, &SipIPSec3gppSecurityMechanism::kProtocolAH, v28->__r_.__value_.__l.__size_);
    v32 = size;
    if (!v36)
    {
LABEL_60:
      LODWORD(v32) = 0;
      v22 = CFSTR("AH");
      if (!v21)
        goto LABEL_64;
      goto LABEL_105;
    }
LABEL_52:
    if (!v32)
      goto LABEL_104;
    goto LABEL_53;
  }
  if (!*((_BYTE *)&v28->__r_.__value_.__s + 23))
    goto LABEL_60;
  v33 = &SipIPSec3gppSecurityMechanism::kProtocolAH;
  v34 = v28;
  v35 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
  v22 = CFSTR("AH");
  while (v34->__r_.__value_.__s.__data_[0] == *v33)
  {
    v34 = (std::string *)((char *)v34 + 1);
    ++v33;
    if (!--v35)
    {
      LODWORD(v32) = 0;
      if (!v21)
        goto LABEL_64;
      goto LABEL_105;
    }
  }
LABEL_53:
  if (v31 != 3)
    goto LABEL_63;
  if ((v29 & 0x80) != 0)
  {
    if (memcmp(v28->__r_.__value_.__l.__data_, &SipIPSec3gppSecurityMechanism::kProtocolESP, size))
      goto LABEL_63;
  }
  else if ((_DWORD)v29)
  {
    v37 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
    while (v28->__r_.__value_.__s.__data_[0] == v37->__r_.__value_.__s.__data_[0])
    {
      v28 = (std::string *)((char *)v28 + 1);
      v37 = (std::string *)((char *)v37 + 1);
      if (!--v29)
        goto LABEL_103;
    }
LABEL_63:
    v22 = 0;
    LODWORD(v32) = 1;
    if (!v21)
      goto LABEL_64;
    goto LABEL_105;
  }
LABEL_103:
  LODWORD(v32) = 0;
LABEL_104:
  v22 = CFSTR("ESP");
  if (!v21)
  {
LABEL_64:
    theDict = v71;
    if ((_DWORD)v32)
    {
      v76 = 0u;
      v77 = 0u;
      v78 = 0u;
      v73 = &off_1E78B7238;
      v74 = &_bambiDomain;
      v75 = 1073741825;
      v38 = ImsResult::operator<<<char [18]>((uint64_t)&v73, "Unknown protocol ");
      v39 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v8, (void **)"prot");
      v40 = (__int128 *)(v39 + 7);
      if (v72 == v39)
        v40 = &ims::kEmptyString;
      v41 = *((unsigned __int8 *)v40 + 23);
      if ((v41 & 0x80u) != 0)
        v41 = *((_QWORD *)v40 + 1);
      if (v41)
        v42 = (std::string *)v40;
      else
        v42 = &SipIPSec3gppSecurityMechanism::kProtocolESP;
      goto LABEL_112;
    }
LABEL_72:
    CFDictionarySetValue(theDict, CFSTR("Mode"), v20);
    CFDictionarySetValue(theDict, CFSTR("IPSecProtocol"), v22);
    v43 = *((_QWORD *)a2 + 13);
    v44 = *(_QWORD *)(v43 + 24);
    v45 = *(std::__shared_weak_count **)(v43 + 32);
    if (!v45)
      goto LABEL_77;
    p_shared_owners = (unint64_t *)&v45->__shared_owners_;
    do
      v47 = __ldxr(p_shared_owners);
    while (__stxr(v47 + 1, p_shared_owners));
    do
      v48 = __ldaxr(p_shared_owners);
    while (__stlxr(v48 - 1, p_shared_owners));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
      if (!v44)
        goto LABEL_87;
    }
    else
    {
LABEL_77:
      if (!v44)
        goto LABEL_87;
    }
    v49 = *((_QWORD *)a2 + 13);
    v50 = *(std::__shared_weak_count **)(v49 + 32);
    v73 = *(void (***)(ImsResult *__hidden))(v49 + 24);
    v74 = (uint64_t *)v50;
    if (v50)
    {
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldxr(v51);
      while (__stxr(v52 + 1, v51));
    }
    IMSSecurityAssociation::fillDictionaryWithAddress(theDict, (IpAddress **)&v73, 1);
    if (v50)
    {
      v53 = (unint64_t *)&v50->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
      }
    }
LABEL_87:
    v55 = *((_QWORD *)a2 + 13);
    v56 = *(_QWORD *)(v55 + 40);
    v57 = *(std::__shared_weak_count **)(v55 + 48);
    if (!v57)
      goto LABEL_92;
    v58 = (unint64_t *)&v57->__shared_owners_;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    do
      v60 = __ldaxr(v58);
    while (__stlxr(v60 - 1, v58));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
      if (v56)
        goto LABEL_93;
    }
    else
    {
LABEL_92:
      if (v56)
      {
LABEL_93:
        v61 = *((_QWORD *)a2 + 13);
        v62 = *(std::__shared_weak_count **)(v61 + 48);
        v73 = *(void (***)(ImsResult *__hidden))(v61 + 40);
        v74 = (uint64_t *)v62;
        if (v62)
        {
          v63 = (unint64_t *)&v62->__shared_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
        }
        IMSSecurityAssociation::fillDictionaryWithAddress(theDict, (IpAddress **)&v73, 0);
        if (v62)
        {
          v65 = (unint64_t *)&v62->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
            std::__shared_weak_count::__release_weak(v62);
          }
        }
      }
    }
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    return;
  }
LABEL_105:
  v76 = 0u;
  v77 = 0u;
  v78 = 0u;
  v73 = &off_1E78B7238;
  v74 = &_bambiDomain;
  v75 = 1073741825;
  v38 = ImsResult::operator<<<char [14]>((uint64_t)&v73, "Unknown mode ");
  v67 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>(v8, (void **)&SipIPSec3gppSecurityMechanism::kParameterMode);
  v68 = (__int128 *)(v67 + 7);
  if (v72 == v67)
    v68 = &ims::kEmptyString;
  v69 = *((unsigned __int8 *)v68 + 23);
  if ((v69 & 0x80u) != 0)
    v69 = *((_QWORD *)v68 + 1);
  if (v69)
    v42 = (std::string *)v68;
  else
    v42 = (std::string *)"trans";
LABEL_112:
  v70 = (const ImsResult *)ImsResult::operator<<<std::string>(v38, (uint64_t)v42);
  ImsResult::ImsResult(this, v70);
  ImsResult::~ImsResult((ImsResult *)&v73);
}

void sub_1BEF0DE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [14]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF0DEB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [18]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF0DF58(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::fillDictionaryWithUniqueId(IMSSecurityAssociation *this, CFTypeRef cf)
{
  _QWORD v3[2];

  v3[1] = cf;
  if (cf)
    CFRetain(cf);
  v3[0] = &off_1E78B8138;
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v3, CFSTR("UniqueID"), *((_DWORD *)this + 30));
  ims::CFType::~CFType((ims::CFType *)v3);
}

void sub_1BEF0DFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::fillDictionaryWithTemporarySAFields(IMSSecurityAssociation *this, __CFDictionary *a2, __CFDictionary *a3, const SipIPSec3gppSecurityMechanism *a4, uint64_t a5)
{
  int v5;
  uint64_t v9;
  const __CFString *v10;
  _QWORD v11[2];
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v5 = (int)a4;
  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  v12 = 0u;
  v13 = 0u;
  IMSSecurityAssociation::fillDictionaryWithCommonFields((IMSSecurityAssociation *)&v12, a2, a3, a5);
  if (!(*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v12 + 1) + 24))(*((_QWORD *)&v12 + 1), v13))
  {
    v11[1] = a3;
    if (a3)
      CFRetain(a3);
    v11[0] = &off_1E78B8138;
    ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v11, CFSTR("LifeTimeinSeconds"), 0);
    v9 = *((_QWORD *)a2 + 13);
    if (!*(_QWORD *)(v9 + 192))
      goto LABEL_15;
    if (*(char *)(v9 + 223) < 0)
    {
      if (!*(_QWORD *)(v9 + 208))
        goto LABEL_15;
    }
    else if (!*(_BYTE *)(v9 + 223))
    {
      goto LABEL_15;
    }
    if (*(_QWORD *)(v9 + 224))
    {
      ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v11, CFSTR("IPSecInterface"), (char *)(v9 + 200));
      if (v5)
        v10 = CFSTR("InternalInterface");
      else
        v10 = CFSTR("OutgoingInterface");
      ims::CFMutableDictionary::setStringValue((ims::CFMutableDictionary *)v11, v10, (char *)(*((_QWORD *)a2 + 13) + 56));
      goto LABEL_16;
    }
LABEL_15:
    IMSSecurityAssociation::fillDictionaryWithUniqueId(a2, a3);
LABEL_16:
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    ims::CFType::~CFType((ims::CFType *)v11);
    goto LABEL_17;
  }
  ImsResult::ImsResult((uint64_t)this, (uint64_t)&v12);
LABEL_17:
  ImsResult::~ImsResult((ImsResult *)&v12);
}

void sub_1BEF0E14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  ims::CFType::~CFType((ims::CFType *)&a9);
  ImsResult::~ImsResult((ImsResult *)&a11);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::fillDictionaryWithPermanentSAFields(IMSSecurityAssociation *this, __CFDictionary *a2, __CFDictionary *a3, const SipIPSec3gppSecurityMechanism *a4, const unsigned __int8 (*a5)[16], unsigned __int8 (*a6)[16], _QWORD *a7)
{
  const unsigned __int8 *v13;
  void **v14;
  __int128 *v15;
  uint64_t v16;
  size_t v17;
  uint64_t v18;
  const char *v19;
  int v20;
  int v21;
  _BOOL4 v22;
  const char *v23;
  int v24;
  const __CFString *v25;
  void **v26;
  __int128 *v27;
  uint64_t v28;
  const char *v29;
  uint64_t v30;
  size_t v31;
  size_t v32;
  size_t v33;
  const char *v34;
  const char *v35;
  uint64_t v36;
  const __CFString *v37;
  const char *v38;
  const char *v39;
  uint64_t v40;
  char v41;
  const __CFString *v42;
  int v43;
  int v44;
  const char *v45;
  uint64_t v46;
  void **v47;
  __int128 *v48;
  void **v49;
  __int128 *v50;
  uint64_t v51;
  const ImsResult *v52;
  uint64_t v53;
  double v54;
  _QWORD *v55;
  uint64_t v56;
  void **v57;
  __int128 *v58;
  uint64_t v59;
  const std::string *v60;
  int v61;
  char v62;
  _QWORD *v63;
  const __CFString *value;
  const unsigned __int8 *v65;
  __CFDictionary *v66;
  _QWORD v67[2];
  int v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  void *__p[2];
  char v78;
  std::string v79;
  void *v80[2];
  char v81;
  void *v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[2];
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89[12];

  v76 = 0;
  v74 = 0u;
  v75 = 0u;
  v72 = 0u;
  v73 = 0u;
  IMSSecurityAssociation::fillDictionaryWithTemporarySAFields((IMSSecurityAssociation *)&v72, a2, a3, a4, (uint64_t)a5);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v72 + 1) + 24))(*((_QWORD *)&v72 + 1), v73) & 1) != 0)goto LABEL_86;
  v63 = a7;
  v13 = &(*a5)[40];
  v14 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&(*a5)[40], (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
  v15 = (__int128 *)(v14 + 7);
  if (&(*a5)[48] == (const unsigned __int8 *)v14)
    v15 = &ims::kEmptyString;
  v16 = *((unsigned __int8 *)v15 + 23);
  v17 = *((_QWORD *)v15 + 1);
  if ((v16 & 0x80u) == 0)
    v18 = *((unsigned __int8 *)v15 + 23);
  else
    v18 = *((_QWORD *)v15 + 1);
  if (v18 == 13)
  {
    if ((v16 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v15, "hmac-sha-1-96", v17))
        goto LABEL_26;
    }
    else if (*((_BYTE *)v15 + 23))
    {
      v23 = "hmac-sha-1-96";
      while (*(unsigned __int8 *)v15 == *(unsigned __int8 *)v23)
      {
        v15 = (__int128 *)((char *)v15 + 1);
        ++v23;
        if (!--v16)
          goto LABEL_27;
      }
      goto LABEL_26;
    }
LABEL_27:
    v22 = 0;
    v25 = CFSTR("SHA1-96");
LABEL_29:
    value = v25;
    goto LABEL_30;
  }
  if (v18 != 11)
  {
LABEL_26:
    value = 0;
    v22 = 1;
    goto LABEL_30;
  }
  if ((v16 & 0x80) != 0)
  {
    v24 = memcmp(*(const void **)v15, "hmac-md5-96", v17);
    v22 = v24 != 0;
    if (v24)
      v25 = 0;
    else
      v25 = CFSTR("MD5-96");
    goto LABEL_29;
  }
  if (!*((_BYTE *)v15 + 23))
  {
    v22 = 0;
    v25 = CFSTR("MD5-96");
    goto LABEL_29;
  }
  v19 = "hmac-md5-96";
  value = CFSTR("MD5-96");
  while (1)
  {
    v20 = *(unsigned __int8 *)v15;
    v21 = *(unsigned __int8 *)v19;
    v22 = v20 != v21;
    if (v20 != v21)
      break;
    v15 = (__int128 *)((char *)v15 + 1);
    ++v19;
    if (!--v16)
      goto LABEL_30;
  }
  value = 0;
LABEL_30:
  v26 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&(*a5)[40], (void **)"ealg");
  v65 = &(*a5)[48];
  v66 = a2;
  v27 = (__int128 *)(v26 + 7);
  if (&(*a5)[48] == (const unsigned __int8 *)v26)
    v27 = &ims::kEmptyString;
  v28 = *((unsigned __int8 *)v27 + 23);
  if ((v28 & 0x80u) != 0)
    v28 = *((_QWORD *)v27 + 1);
  if (v28)
    v29 = (const char *)v27;
  else
    v29 = "null";
  v30 = *((unsigned __int8 *)v29 + 23);
  v31 = *((_QWORD *)v29 + 1);
  if ((v30 & 0x80u) == 0)
    v32 = *((unsigned __int8 *)v29 + 23);
  else
    v32 = *((_QWORD *)v29 + 1);
  if (v32 == 12)
  {
    if ((v30 & 0x80) != 0)
    {
      v44 = memcmp(*(const void **)v29, "des-ede3-cbc", *((_QWORD *)v29 + 1));
      v33 = v31;
      if (v44)
      {
LABEL_58:
        if (!v33)
        {
LABEL_71:
          v42 = CFSTR("NULL");
          v41 = 1;
          goto LABEL_72;
        }
LABEL_59:
        if (v32 == 4)
        {
          if ((v30 & 0x80) == 0)
          {
            if ((_DWORD)v30)
            {
              v45 = "null";
              while (*(unsigned __int8 *)v29 == *(unsigned __int8 *)v45)
              {
                ++v29;
                ++v45;
                if (!--v30)
                  goto LABEL_70;
              }
              goto LABEL_69;
            }
            goto LABEL_70;
          }
          if (!memcmp(*(const void **)v29, "null", v31))
          {
LABEL_70:
            LODWORD(v33) = 0;
            goto LABEL_71;
          }
        }
LABEL_69:
        v41 = 0;
        v42 = 0;
        LODWORD(v33) = 1;
        goto LABEL_72;
      }
    }
    else if (v29[23])
    {
      v38 = "des-ede3-cbc";
      v39 = v29;
      v40 = *((unsigned __int8 *)v29 + 23);
      v37 = CFSTR("3DES");
      while (*(unsigned __int8 *)v39 == *(unsigned __int8 *)v38)
      {
        ++v39;
        ++v38;
        if (!--v40)
        {
LABEL_53:
          LODWORD(v33) = 0;
          v41 = 0;
          v42 = v37;
          goto LABEL_72;
        }
      }
      goto LABEL_59;
    }
    LODWORD(v33) = 0;
    v41 = 0;
    v42 = CFSTR("3DES");
    goto LABEL_72;
  }
  v33 = v32;
  if (v32 != 7)
    goto LABEL_58;
  if ((v30 & 0x80) == 0)
  {
    if (!v29[23])
    {
      LODWORD(v33) = 0;
      v41 = 0;
      v42 = CFSTR("AES-128");
      goto LABEL_72;
    }
    v34 = "aes-cbc";
    v35 = v29;
    v36 = *((unsigned __int8 *)v29 + 23);
    v37 = CFSTR("AES-128");
    while (*(unsigned __int8 *)v35 == *(unsigned __int8 *)v34)
    {
      ++v35;
      ++v34;
      if (!--v36)
        goto LABEL_53;
    }
    goto LABEL_59;
  }
  v42 = CFSTR("AES-128");
  v43 = memcmp(*(const void **)v29, "aes-cbc", *((_QWORD *)v29 + 1));
  v41 = 0;
  LODWORD(v33) = v43 != 0;
  if (v43)
    v42 = 0;
LABEL_72:
  if (v22)
  {
    memset(&v89[3], 0, 48);
    v89[0] = &off_1E78B7238;
    v89[1] = &_bambiDomain;
    LODWORD(v89[2]) = 1073741825;
    v46 = ImsResult::operator<<<char [24]>((uint64_t)v89, "Unknown auth algorithm ");
    v47 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v13, (void **)&SipIPSec3gppSecurityMechanism::kParameterAlgorithm);
    if (v65 == (const unsigned __int8 *)v47)
      v48 = &ims::kEmptyString;
    else
      v48 = (__int128 *)(v47 + 7);
LABEL_84:
    v52 = (const ImsResult *)ImsResult::operator<<<std::string>(v46, (uint64_t)v48);
    ImsResult::ImsResult((ImsResult *)v67, v52);
    ImsResult::~ImsResult((ImsResult *)v89);
    goto LABEL_85;
  }
  if ((_DWORD)v33)
  {
    memset(&v89[3], 0, 48);
    v89[0] = &off_1E78B7238;
    v89[1] = &_bambiDomain;
    LODWORD(v89[2]) = 1073741825;
    v46 = ImsResult::operator<<<char [30]>((uint64_t)v89, "Unknown encryption algorithm ");
    v49 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)v13, (void **)"ealg");
    v50 = (__int128 *)(v49 + 7);
    if (v65 == (const unsigned __int8 *)v49)
      v50 = &ims::kEmptyString;
    v51 = *((unsigned __int8 *)v50 + 23);
    if ((v51 & 0x80u) != 0)
      v51 = *((_QWORD *)v50 + 1);
    if (v51)
      v48 = v50;
    else
      v48 = (__int128 *)"null";
    goto LABEL_84;
  }
  v86 = 0;
  v87 = 0;
  v88 = 0;
  if (!a6)
  {
    std::string::basic_string[abi:ne180100]<0>(v89, "ipsec");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v53 = ImsLogger::debug(ims::_logger, (uint64_t)v89, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"no IK provided.  Using dummy auth key.", 38);
    *(_BYTE *)(v53 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v53 + 17) = 0;
    if (v78 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v89[2]) < 0)
      operator delete(v89[0]);
    a6 = (unsigned __int8 (*)[16])&_MergedGlobals;
  }
  memset(v89, 0, 72);
  v54 = SipIPSec3gppSecurityMechanism::fillIPSecAuthKey((uint64_t)a5, a6, (unint64_t *)&v86, (uint64_t)v89);
  if ((*(unsigned int (**)(void *, _QWORD, double))(*(_QWORD *)v89[1] + 24))(v89[1], LODWORD(v89[2]), v54))
  {
    ImsResult::ImsResult((uint64_t)v67, (uint64_t)v89);
  }
  else
  {
    v85[0] = off_1E78EAB00;
    v85[1] = a3;
    if (a3)
      CFRetain(a3);
    v85[0] = &off_1E78B8138;
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v85, CFSTR("AuthAlgorithm"), value);
    ims::CFMutableDictionary::setDataValue((ims::CFMutableDictionary *)v85, CFSTR("AuthKey"), (uint64_t)&v86);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)v85, CFSTR("EncryptionAlgorithm"), v42);
    if ((v41 & 1) != 0)
      goto LABEL_123;
    v82 = 0;
    v83 = 0;
    v84 = 0;
    v55 = v63;
    if (!v63)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "ipsec");
      std::string::basic_string[abi:ne180100]<0>(v80, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v56 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v80);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"no CK provided but encryption algorithm is ", 43);
      *(_BYTE *)(v56 + 17) = 0;
      v57 = std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&(*a5)[40], (void **)"ealg");
      v58 = (__int128 *)(v57 + 7);
      if (v65 == (const unsigned __int8 *)v57)
        v58 = &ims::kEmptyString;
      v59 = *((unsigned __int8 *)v58 + 23);
      if ((v59 & 0x80u) != 0)
        v59 = *((_QWORD *)v58 + 1);
      if (v59)
        v60 = (const std::string *)v58;
      else
        v60 = (const std::string *)"null";
      LoggableString::LoggableString(&v79, v60);
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v56 + 40))(v56, &v79);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)".  Using dummy encryption key.", 30);
      *(_BYTE *)(v56 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v56 + 17) = 0;
      if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v79.__r_.__value_.__l.__data_);
      if (v81 < 0)
        operator delete(v80[0]);
      if (v78 < 0)
        operator delete(__p[0]);
      v55 = &unk_1ED703178;
    }
    SipIPSec3gppSecurityMechanism::fillIPSecEncryptionKey((uint64_t)a5, v55, (unint64_t *)&v82, (uint64_t)__p);
    ImsResult::operator=((uint64_t)v89, (uint64_t)__p);
    ImsResult::~ImsResult((ImsResult *)__p);
    v61 = (*(uint64_t (**)(void *, _QWORD))(*(_QWORD *)v89[1] + 24))(v89[1], LODWORD(v89[2]));
    v62 = v61;
    if (v61)
      ImsResult::ImsResult((uint64_t)v67, (uint64_t)v89);
    else
      ims::CFMutableDictionary::setDataValue((ims::CFMutableDictionary *)v85, CFSTR("EncryptionKey"), (uint64_t)&v82);
    if (v82)
    {
      v83 = v82;
      operator delete(v82);
    }
    if ((v62 & 1) == 0)
    {
LABEL_123:
      v69 = 0u;
      v70 = 0u;
      v71 = 0u;
      v67[0] = &off_1E78B7238;
      v67[1] = &_bambiDomain;
      v68 = 0;
    }
    ims::CFType::~CFType((ims::CFType *)v85);
  }
  ImsResult::~ImsResult((ImsResult *)v89);
  if (v86)
  {
    v87 = v86;
    operator delete(v86);
  }
LABEL_85:
  ImsResult::operator=((uint64_t)&v72, (uint64_t)v67);
  ImsResult::~ImsResult((ImsResult *)v67);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v72 + 1) + 24))(*((_QWORD *)&v72 + 1), v73))
  {
LABEL_86:
    ImsResult::ImsResult((uint64_t)this, (uint64_t)&v72);
    goto LABEL_90;
  }
  v89[1] = a3;
  if (a3)
    CFRetain(a3);
  v89[0] = &off_1E78B8138;
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v89, CFSTR("ReplayWindowSize"), 2u);
  ims::CFMutableDictionary::setUintValue((ims::CFMutableDictionary *)v89, CFSTR("SPIValue"), *((_DWORD *)v66 + 31));
  *(_OWORD *)((char *)this + 24) = 0u;
  *(_OWORD *)((char *)this + 40) = 0u;
  *(_OWORD *)((char *)this + 56) = 0u;
  *(_QWORD *)this = &off_1E78B7238;
  *((_QWORD *)this + 1) = &_bambiDomain;
  *((_DWORD *)this + 4) = 0;
  ims::CFType::~CFType((ims::CFType *)v89);
LABEL_90:
  ImsResult::~ImsResult((ImsResult *)&v72);
}

void sub_1BEF0EA8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,void *a50,uint64_t a51,int a52,__int16 a53,char a54,char a55)
{
  uint64_t v55;
  void *v57;
  void *v58;

  if (a37 < 0)
    operator delete(__p);
  v57 = *(void **)(v55 - 240);
  if (v57)
  {
    *(_QWORD *)(v55 - 232) = v57;
    operator delete(v57);
  }
  ims::CFType::~CFType((ims::CFType *)(v55 - 216));
  ImsResult::~ImsResult((ImsResult *)(v55 - 176));
  v58 = *(void **)(v55 - 200);
  if (v58)
  {
    *(_QWORD *)(v55 - 192) = v58;
    operator delete(v58);
  }
  ImsResult::~ImsResult((ImsResult *)&a23);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::createTemporary(IMSSecurityAssociation *this@<X0>, const SipIPSec3gppSecurityMechanism *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  int v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  const ImsResult *v13;
  void *__p[2];
  char v15;
  void *v16[2];
  int v17;
  char v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  void (**v27)(ims::CFMutableDictionary *__hidden);
  __CFDictionary *v28;

  *((_BYTE *)this + 128) = (_BYTE)a2;
  *((_BYTE *)this + 129) = 1;
  v27 = &off_1E78B8138;
  v28 = 0;
  ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v27);
  v26 = 0;
  v24 = 0u;
  v25 = 0u;
  v22 = 0u;
  v23 = 0u;
  IMSSecurityAssociation::fillDictionaryWithTemporarySAFields((IMSSecurityAssociation *)&v22, this, v28, a2, 0);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v22 + 1) + 24))(*((_QWORD *)&v22 + 1), v23))
  {
    ImsResult::ImsResult(a3, (uint64_t)&v22);
  }
  else
  {
    v6 = (*(uint64_t (**)(IMSSecurityAssociation *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IMSSecurityAssociation *, uint64_t))(*(_QWORD *)this + 16))(this, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"creating temporary SA with dict: ", 33);
    *(_BYTE *)(v6 + 17) = 0;
    v7 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v27[2])(&v27, v6);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v7[17] = 0;
    v8 = IPSecDBAddLarvalSA(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 16) + 120), v28, (char *)this + 124);
    *((_DWORD *)this + 28) = v8;
    if (v8)
    {
      v9 = (_BYTE *)(*(uint64_t (**)(IMSSecurityAssociation *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(IMSSecurityAssociation *, _BYTE *))(*(_QWORD *)this + 16))(this, v9);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v9[17] = 0;
      std::string::basic_string[abi:ne180100]<0>(v16, "ipsec");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v10 = ImsLogger::debug(ims::_logger, (uint64_t)v16, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"created temporary SA with id = ", 31);
      *(_BYTE *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)", spi = ", 8);
      *(_BYTE *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" (", 2);
      *(_BYTE *)(v10 + 17) = 0;
      v11 = *(_QWORD *)(v10 + 8) + *(_QWORD *)(**(_QWORD **)(v10 + 8) - 24);
      *(_DWORD *)(v11 + 8) = *(_DWORD *)(v11 + 8) & 0xFFFFFFB5 | 8;
      *(_BYTE *)(v10 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v10 + 17) = 0;
      v12 = *(_QWORD **)(v10 + 8);
      *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 2;
      *(_BYTE *)(v10 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)")", 1);
      *(_BYTE *)(v10 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v10 + 17) = 0;
      if (v15 < 0)
        operator delete(__p[0]);
      if (v18 < 0)
        operator delete(v16[0]);
      *(_OWORD *)(a3 + 24) = 0u;
      *(_OWORD *)(a3 + 40) = 0u;
      *(_OWORD *)(a3 + 56) = 0u;
      *(_QWORD *)a3 = &off_1E78B7238;
      *(_QWORD *)(a3 + 8) = &_bambiDomain;
      *(_DWORD *)(a3 + 16) = 0;
    }
    else
    {
      v19 = 0u;
      v20 = 0u;
      v21 = 0u;
      v16[0] = &off_1E78B7238;
      v16[1] = &_bambiDomain;
      v17 = 0x40000000;
      v13 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)v16, "NEIPSecDBAddLarvalSA failed");
      ImsResult::ImsResult((ImsResult *)a3, v13);
      ImsResult::~ImsResult((ImsResult *)v16);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v22);
  ims::CFType::~CFType((ims::CFType *)&v27);
}

void sub_1BEF0EF2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  uint64_t v27;

  if (a20 < 0)
    operator delete(__p);
  ImsResult::~ImsResult((ImsResult *)&a27);
  ims::CFType::~CFType((ims::CFType *)(v27 - 48));
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [16]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF0F018(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociation::createPolicy(IMSSecurityAssociation *this, const SipIPSec3gppSecurityMechanism *a2, uint64_t a3)
{
  uint64_t v6;
  const __CFString *v7;
  _BYTE *v8;
  uint64_t v9;
  _BYTE *v10;
  int v11;
  const ImsResult *v12;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  void (**v23)(ims::CFMutableDictionary *__hidden);
  __CFDictionary *v24;

  v6 = *((_QWORD *)a2 + 13);
  if (!*(_QWORD *)(v6 + 192))
    goto LABEL_8;
  if (*(char *)(v6 + 223) < 0)
  {
    if (!*(_QWORD *)(v6 + 208))
      goto LABEL_8;
  }
  else if (!*(_BYTE *)(v6 + 223))
  {
    goto LABEL_8;
  }
  if (*(_QWORD *)(v6 + 224))
  {
    *(_OWORD *)((char *)this + 24) = 0u;
    *(_OWORD *)((char *)this + 40) = 0u;
    *(_OWORD *)((char *)this + 56) = 0u;
    *(_QWORD *)this = &off_1E78B7238;
    *((_QWORD *)this + 1) = &_bambiDomain;
    *((_DWORD *)this + 4) = 0;
    return;
  }
LABEL_8:
  v23 = &off_1E78B8138;
  v24 = 0;
  ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v23);
  v22 = 0;
  v20 = 0u;
  v21 = 0u;
  v18 = 0u;
  v19 = 0u;
  IMSSecurityAssociation::fillDictionaryWithCommonFields((IMSSecurityAssociation *)&v18, a2, v24, a3);
  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v18 + 1) + 24))(*((_QWORD *)&v18 + 1), v19))
  {
    ImsLogContainer::logResult(a2, (ImsResult *)&v18);
    ImsResult::ImsResult(this, (const ImsResult *)&v18);
  }
  else
  {
    if (*((_BYTE *)a2 + 128))
      v7 = CFSTR("In");
    else
      v7 = CFSTR("Out");
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v23, CFSTR("Direction"), v7);
    ims::CFMutableDictionary::setValue((ims::CFMutableDictionary *)&v23, CFSTR("Level"), CFSTR("Unique"));
    IMSSecurityAssociation::fillDictionaryWithUniqueId(a2, v24);
    v8 = (_BYTE *)(*(uint64_t (**)(const SipIPSec3gppSecurityMechanism *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(const SipIPSec3gppSecurityMechanism *, _BYTE *))(*(_QWORD *)a2 + 16))(a2, v8);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v8[17] = 0;
    v9 = (*(uint64_t (**)(const SipIPSec3gppSecurityMechanism *))(*(_QWORD *)a2 + 64))(a2);
    (*(void (**)(const SipIPSec3gppSecurityMechanism *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"creating policy with dictionary: ", 33);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v23[2])(&v23, v9);
    (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v10[17] = 0;
    v11 = IPSecDBAddPolicy(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)a2 + 13) + 16) + 120), v24);
    *((_DWORD *)a2 + 29) = v11;
    if (v11)
    {
      *(_OWORD *)((char *)this + 24) = 0uLL;
      *(_OWORD *)((char *)this + 40) = 0uLL;
      *(_OWORD *)((char *)this + 56) = 0uLL;
      *(_QWORD *)this = &off_1E78B7238;
      *((_QWORD *)this + 1) = &_bambiDomain;
      *((_DWORD *)this + 4) = 0;
    }
    else
    {
      v15 = 0uLL;
      v16 = 0uLL;
      v17 = 0uLL;
      v13[0] = &off_1E78B7238;
      v13[1] = &_bambiDomain;
      v14 = 0x40000000;
      v12 = (const ImsResult *)ImsResult::operator<<<char [20]>((uint64_t)v13, "Create Policy error");
      ImsResult::ImsResult(this, v12);
      ImsResult::~ImsResult((ImsResult *)v13);
    }
  }
  ImsResult::~ImsResult((ImsResult *)&v18);
  ims::CFType::~CFType((ims::CFType *)&v23);
}

void sub_1BEF0F2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult((ImsResult *)va1);
  ims::CFType::~CFType((ims::CFType *)(v2 - 48));
  _Unwind_Resume(a1);
}

uint64_t IMSSecurityAssociationPair::IMSSecurityAssociationPair(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a1 + 24) = 0u;
  *(_QWORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  IMSVirtualInterface::IMSVirtualInterface((IMSVirtualInterface *)(a1 + 88));
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a2;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)a1 = 0;
  return a1;
}

void sub_1BEF0F368(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*(char *)(v1 + 79) < 0)
    operator delete(*(void **)(v1 + 56));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1 + 40);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociationPair::~IMSSecurityAssociationPair(void **this)
{
  IMSSecurityAssociationPair::destroy((IMSSecurityAssociationPair *)this);
  IMSVirtualInterface::~IMSVirtualInterface(this + 11);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 5));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 3));
}

void IMSSecurityAssociationPair::destroy(IMSSecurityAssociationPair *this)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _BYTE v5[72];

  v2 = *(_QWORD *)this;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = 0;
  v3 = *((_QWORD *)this + 1);
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  *((_QWORD *)this + 1) = 0;
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 3);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 5);
  v4 = *((_DWORD *)this + 20);
  if (v4)
  {
    IMSNetworkPolicySession::deletePolicy((IMSNetworkPolicySession *)(*((_QWORD *)this + 2) + 200), v4, (uint64_t)v5);
    ImsResult::~ImsResult((ImsResult *)v5);
    *((_DWORD *)this + 20) = 0;
  }
  (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 2) + 72))(*((_QWORD *)this + 2), (char *)this + 200);
  (*(void (**)(_QWORD))(**((_QWORD **)this + 2) + 48))(*((_QWORD *)this + 2));
  IMSVirtualInterface::deinitialize((IMSSecurityAssociationPair *)((char *)this + 88));
}

void IMSSecurityAssociationPair::setLocalAddress(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 32))(&v6);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 24, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void IMSSecurityAssociationPair::setRemoteAddress(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  unint64_t *v4;
  unint64_t v5;
  __int128 v6;

  (*(void (**)(__int128 *__return_ptr))(**(_QWORD **)a2 + 32))(&v6);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 40, &v6);
  v3 = (std::__shared_weak_count *)*((_QWORD *)&v6 + 1);
  if (*((_QWORD *)&v6 + 1))
  {
    v4 = (unint64_t *)(*((_QWORD *)&v6 + 1) + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void IMSSecurityAssociationPair::createTemporary(std::string *__str@<X3>, uint64_t a2@<X0>, IpAddress **a3@<X1>, uint64_t a4@<X2>, uint64_t a5@<X4>, _QWORD *a6@<X8>)
{
  IMSSecurityAssociation *v12;
  _BYTE v13[72];

  a6[2] = 0;
  a6[3] = 0;
  a6[8] = 0;
  a6[6] = 0;
  a6[7] = 0;
  *a6 = &off_1E78B7238;
  a6[1] = &_bambiDomain;
  a6[4] = 0;
  a6[5] = 0;
  std::string::operator=((std::string *)(a2 + 56), __str);
  if (!*(_QWORD *)(*(_QWORD *)(a2 + 16) + 304)
    || (IMSVirtualInterface::initialize((IMSVirtualInterface *)(a2 + 88), a3, a5, (uint64_t)__str, (uint64_t)v13),
        ImsResult::operator=((uint64_t)a6, (uint64_t)v13),
        ImsResult::~ImsResult((ImsResult *)v13),
        ((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a6[1] + 24))(a6[1], *((unsigned int *)a6 + 4)) & 1) == 0))
  {
    IMSSecurityAssociationPair::setLocalAddress(a2, (uint64_t)a3);
    IMSSecurityAssociationPair::setRemoteAddress(a2, a4);
    v12 = (IMSSecurityAssociation *)operator new();
    IMSSecurityAssociation::IMSSecurityAssociation((uint64_t)v12, a2);
    IMSSecurityAssociation::createTemporary(v12, (const SipIPSec3gppSecurityMechanism *)1, (uint64_t)v13);
    ImsResult::operator=((uint64_t)a6, (uint64_t)v13);
    ImsResult::~ImsResult((ImsResult *)v13);
    if ((*(unsigned int (**)(_QWORD, _QWORD))(*(_QWORD *)a6[1] + 24))(a6[1], *((unsigned int *)a6 + 4)))
      IMSVirtualInterface::deinitialize((IMSVirtualInterface *)(a2 + 88));
    else
      *(_QWORD *)a2 = v12;
  }
}

void sub_1BEF0F6E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  ImsResult *v2;
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  ImsResult::~ImsResult(v2);
  _Unwind_Resume(a1);
}

void IMSSecurityAssociationPair::update(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const unsigned __int8 (*a4)[16]@<X3>, unsigned __int8 (*a5)[16]@<X4>, _QWORD *a6@<X5>, int a7@<W6>, ImsResult *a8@<X8>)
{
  uint64_t v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  const ImsResult *v22;
  ImsResult *v23;
  const ImsResult *v24;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  _BYTE *v28;
  int v29;
  int v30;
  uint64_t v31;
  _BYTE *v32;
  ImsResult *v33;
  const ImsResult *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  const ImsResult *v38;
  const ImsResult *v39;
  void (**v40)(ims::CFMutableDictionary *__hidden);
  BOOL v41[8];
  __int128 v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  void (**v47)(ImsResult *__hidden);
  uint64_t *v48;
  int v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  _QWORD v54[7];
  void (**v55)(ims::CFMutableDictionary *__hidden);
  __CFDictionary *v56;

  if (*(_QWORD *)a1)
  {
    IMSSecurityAssociationPair::setLocalAddress(a1, a2);
    IMSSecurityAssociationPair::setRemoteAddress(a1, a3);
    v46 = 0;
    v44 = 0u;
    v45 = 0u;
    v42 = 0u;
    v43 = 0u;
    v15 = *(_QWORD *)a1;
    if (!*(_BYTE *)(*(_QWORD *)a1 + 129))
    {
      memset(&v54[1], 0, 48);
      *(_QWORD *)&v53 = &off_1E78B7238;
      *((_QWORD *)&v53 + 1) = &_bambiDomain;
      LODWORD(v54[0]) = 0x40000000;
      v24 = (const ImsResult *)ImsResult::operator<<<char [28]>((uint64_t)&v53, "can't update a permanent SA");
      ImsResult::ImsResult((ImsResult *)&v42, v24);
      ImsResult::~ImsResult((ImsResult *)&v53);
LABEL_11:
      if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v42 + 1) + 24))(*((_QWORD *)&v42 + 1), v43))
      {
        goto LABEL_30;
      }
      v25 = operator new();
      IMSSecurityAssociation::IMSSecurityAssociation(v25, a1);
      *(_DWORD *)(v25 + 124) = a7;
      *(_BYTE *)(v25 + 128) = 0;
      v55 = &off_1E78B8138;
      v56 = 0;
      ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v55);
      memset(v54, 0, sizeof(v54));
      v53 = 0u;
      IMSSecurityAssociation::fillDictionaryWithPermanentSAFields((IMSSecurityAssociation *)&v53, (__CFDictionary *)v25, v56, 0, a4, a5, a6);
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v53 + 1) + 24))(*((_QWORD *)&v53 + 1), LODWORD(v54[0])) & 1) != 0)goto LABEL_16;
      v26 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25);
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 16))(v25, v26);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v26[17] = 0;
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 64))(v25);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v27);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"creating SA with dictionary: ", 29);
      *(_BYTE *)(v27 + 17) = 0;
      v28 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v55[2])(&v55, v27);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v28 + 64))(v28, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v28[17] = 0;
      v29 = IPSecDBAddSA(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 104) + 16) + 120), v56);
      *(_DWORD *)(v25 + 112) = v29;
      if (v29)
      {
        IMSSecurityAssociation::createPolicy((IMSSecurityAssociation *)&v47, (const SipIPSec3gppSecurityMechanism *)v25, (uint64_t)a4);
        ImsResult::operator=((uint64_t)&v53, (uint64_t)&v47);
        ImsResult::~ImsResult((ImsResult *)&v47);
        v30 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v53 + 1) + 24))(*((_QWORD *)&v53 + 1), LODWORD(v54[0]));
        v31 = *(_QWORD *)v25;
        if (v30)
        {
          v32 = (_BYTE *)(*(uint64_t (**)(uint64_t))(v31 + 56))(v25);
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v25 + 16))(v25, v32);
          (*(void (**)(__int128 *, _BYTE *))(v53 + 16))(&v53, v32);
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v32[17] = 0;
          IPSecDBDeleteSA(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v25 + 104) + 16) + 120));
          *(_DWORD *)(v25 + 112) = 0;
LABEL_16:
          ImsLogContainer::logResult((ImsLogContainer *)v25, (ImsResult *)&v53);
          ImsResult::ImsResult((ImsResult *)&v40, (const ImsResult *)&v53);
          goto LABEL_20;
        }
        v35 = (*(uint64_t (**)(uint64_t))(v31 + 64))(v25);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v25 + 16))(v25, v35);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)"created SA with id = ", 21);
        *(_BYTE *)(v35 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v35 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)", spi = ", 8);
        *(_BYTE *)(v35 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v35 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v35 + 8), (uint64_t)" (", 2);
        *(_BYTE *)(v35 + 17) = 0;
        v36 = *(_QWORD *)(v35 + 8) + *(_QWORD *)(**(_QWORD **)(v35 + 8) - 24);
        *(_DWORD *)(v36 + 8) = *(_DWORD *)(v36 + 8) & 0xFFFFFFB5 | 8;
        *(_BYTE *)(v35 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v35 + 17) = 0;
        v37 = *(_QWORD **)(v35 + 8);
        *(_DWORD *)((char *)v37 + *(_QWORD *)(*v37 - 24) + 8) = *(_DWORD *)((_BYTE *)v37 + *(_QWORD *)(*v37 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 2;
        *(_BYTE *)(v35 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v37, (uint64_t)")", 1);
        *(_BYTE *)(v35 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v35 + 64))(v35, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v35 + 17) = 0;
        ImsResult::ImsResult((uint64_t)&v40, (uint64_t)&v53);
      }
      else
      {
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v47 = &off_1E78B7238;
        v48 = &_bambiDomain;
        v49 = 0x40000000;
        v34 = (const ImsResult *)ImsResult::operator<<<char [22]>((uint64_t)&v47, "NEIPSecDBAddSA failed");
        ImsResult::ImsResult((ImsResult *)&v40, v34);
        ImsResult::~ImsResult((ImsResult *)&v47);
      }
LABEL_20:
      ImsResult::~ImsResult((ImsResult *)&v53);
      ims::CFType::~CFType((ims::CFType *)&v55);
      ImsResult::operator=((uint64_t)&v42, (uint64_t)&v40);
      ImsResult::~ImsResult((ImsResult *)&v40);
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v42 + 1) + 24))(*((_QWORD *)&v42 + 1), v43) & 1) != 0)goto LABEL_30;
      *(_QWORD *)(a1 + 8) = v25;
      if (!*(_QWORD *)(a1 + 192))
        goto LABEL_30;
      if (*(char *)(a1 + 223) < 0)
      {
        if (!*(_QWORD *)(a1 + 208))
          goto LABEL_30;
      }
      else if (!*(_BYTE *)(a1 + 223))
      {
        goto LABEL_30;
      }
      if (*(_QWORD *)(a1 + 224))
      {
        if (*(_QWORD *)(a1 + 24))
        {
          if (*(_QWORD *)(a1 + 40))
          {
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 16) + 64))(&v53, *(_QWORD *)(a1 + 16), a1 + 200);
            ImsResult::operator=((uint64_t)&v42, (uint64_t)&v53);
            ImsResult::~ImsResult((ImsResult *)&v53);
            if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v42 + 1) + 24))(*((_QWORD *)&v42 + 1), v43) & 1) == 0)
            {
              IMSNetworkPolicySession::addPolicy((ImsLogContainer *)(*(_QWORD *)(a1 + 16) + 200), (IpAddress **)(a1 + 24), (IpAddress **)(a1 + 40), (char *)(a1 + 200), (char *)(a1 + 56), (_DWORD *)(a1 + 80), (uint64_t)a8);
              goto LABEL_31;
            }
            goto LABEL_30;
          }
          memset(&v54[1], 0, 48);
          *(_QWORD *)&v53 = &off_1E78B7238;
          *((_QWORD *)&v53 + 1) = &_bambiDomain;
          LODWORD(v54[0]) = 1073741826;
          v39 = (const ImsResult *)ImsResult::operator<<<char [18]>((uint64_t)&v53, "no remote address");
          ImsResult::ImsResult(a8, v39);
        }
        else
        {
          memset(&v54[1], 0, 48);
          *(_QWORD *)&v53 = &off_1E78B7238;
          *((_QWORD *)&v53 + 1) = &_bambiDomain;
          LODWORD(v54[0]) = 1073741826;
          v38 = (const ImsResult *)ImsResult::operator<<<char [17]>((uint64_t)&v53, "no local address");
          ImsResult::ImsResult(a8, v38);
        }
        ImsResult::~ImsResult((ImsResult *)&v53);
        goto LABEL_31;
      }
LABEL_30:
      ImsResult::ImsResult((uint64_t)a8, (uint64_t)&v42);
LABEL_31:
      v23 = (ImsResult *)&v42;
      goto LABEL_32;
    }
    *(_BYTE *)(v15 + 129) = 0;
    v40 = &off_1E78B8138;
    *(_QWORD *)v41 = 0;
    ims::CFMutableDictionary::create((ims::CFMutableDictionary *)&v40);
    memset(v54, 0, sizeof(v54));
    v53 = 0u;
    IMSSecurityAssociation::fillDictionaryWithPermanentSAFields((IMSSecurityAssociation *)&v53, (__CFDictionary *)v15, *(__CFDictionary **)v41, (const SipIPSec3gppSecurityMechanism *)*(unsigned __int8 *)(v15 + 128), a4, a5, a6);
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v53 + 1) + 24))(*((_QWORD *)&v53 + 1), LODWORD(v54[0])) & 1) == 0)
    {
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v16);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"updating SA with dictionary: ", 29);
      *(_BYTE *)(v16 + 17) = 0;
      v17 = (_BYTE *)((uint64_t (*)(void (***)(ims::CFMutableDictionary *__hidden), uint64_t))v40[2])(&v40, v16);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v17[17] = 0;
      if (!IPSecDBUpdateSA(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v15 + 104) + 16) + 120), *(unsigned int *)(v15 + 112), *(_QWORD *)v41))
      {
        v50 = 0u;
        v51 = 0u;
        v52 = 0u;
        v47 = &off_1E78B7238;
        v48 = &_bambiDomain;
        v49 = 0x40000000;
        v33 = (ImsResult *)ImsResult::operator<<<char [16]>((uint64_t)&v47, "UpdateSA failed");
        ImsLogContainer::logResult((ImsLogContainer *)v15, v33);
        ImsResult::ImsResult((ImsResult *)&v42, v33);
        ImsResult::~ImsResult((ImsResult *)&v47);
        goto LABEL_8;
      }
      IMSSecurityAssociation::createPolicy((IMSSecurityAssociation *)&v47, (const SipIPSec3gppSecurityMechanism *)v15, (uint64_t)a4);
      ImsResult::operator=((uint64_t)&v53, (uint64_t)&v47);
      ImsResult::~ImsResult((ImsResult *)&v47);
      if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v53 + 1) + 24))(*((_QWORD *)&v53 + 1), LODWORD(v54[0])) & 1) == 0)
      {
        v18 = (_BYTE *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v15 + 16))(v15, v18);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v18[17] = 0;
        v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 64))(v15);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v19);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"updated SA with id = ", 21);
        *(_BYTE *)(v19 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v19 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)", spi=", 6);
        *(_BYTE *)(v19 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v19 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" (", 2);
        *(_BYTE *)(v19 + 17) = 0;
        v20 = *(_QWORD *)(v19 + 8) + *(_QWORD *)(**(_QWORD **)(v19 + 8) - 24);
        *(_DWORD *)(v20 + 8) = *(_DWORD *)(v20 + 8) & 0xFFFFFFB5 | 8;
        *(_BYTE *)(v19 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v19 + 17) = 0;
        v21 = *(_QWORD **)(v19 + 8);
        *(_DWORD *)((char *)v21 + *(_QWORD *)(*v21 - 24) + 8) = *(_DWORD *)((_BYTE *)v21 + *(_QWORD *)(*v21 - 24)
                                                                                           + 8) & 0xFFFFFFB5 | 2;
        *(_BYTE *)(v19 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v21, (uint64_t)")", 1);
        *(_BYTE *)(v19 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v19 + 17) = 0;
      }
    }
    ImsResult::ImsResult((uint64_t)&v42, (uint64_t)&v53);
LABEL_8:
    ImsResult::~ImsResult((ImsResult *)&v53);
    ims::CFType::~CFType((ims::CFType *)&v40);
    goto LABEL_11;
  }
  memset(&v54[1], 0, 48);
  *(_QWORD *)&v53 = &off_1E78B7238;
  *((_QWORD *)&v53 + 1) = &_bambiDomain;
  LODWORD(v54[0]) = 1073741826;
  v22 = (const ImsResult *)ImsResult::operator<<<char [29]>((uint64_t)&v53, "SAPair update: no inbound SA");
  ImsResult::ImsResult(a8, v22);
  v23 = (ImsResult *)&v53;
LABEL_32:
  ImsResult::~ImsResult(v23);
}

void sub_1BEF100F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)(v11 - 192));
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [29]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF10260(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [17]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF10304(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void SipDigestAuthScheme::~SipDigestAuthScheme(void **this)
{
  void **v2;

  *this = &off_1E78C92F0;
  v2 = this + 20;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 151) < 0)
    operator delete(this[16]);
  if (*((char *)this + 127) < 0)
    operator delete(this[13]);
  v2 = this + 10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  *this = off_1E78D92D8;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)(this + 1));
}

double SipAkaDigestAuthScheme::clear(SipAkaDigestAuthScheme *this)
{
  double result;

  SipDigestAuthScheme::clear(this);
  result = 0.0;
  *(_OWORD *)((char *)this + 246) = 0u;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 216) = 0u;
  *(_OWORD *)((char *)this + 200) = 0u;
  *(_OWORD *)((char *)this + 184) = 0u;
  *((_QWORD *)this + 34) = *((_QWORD *)this + 33);
  *((_QWORD *)this + 37) = *((_QWORD *)this + 36);
  *((_DWORD *)this + 78) = 0;
  *((_BYTE *)this + 316) = 0;
  return result;
}

uint64_t SipAkaDigestAuthScheme::parseNonce(uint64_t a1, uint64_t *a2)
{
  _OWORD *v4;
  _OWORD *v5;
  _OWORD *v6;
  char *v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  size_t v12;
  unint64_t v13;
  char *v14;
  _QWORD *v15;
  uint64_t v16;
  size_t v17;
  _BYTE *v18;
  size_t v19;
  char *v20;
  char *v21;
  void *__p[2];
  char v24;
  void *v25[2];
  char v26;
  void *v27;
  char *v28;
  uint64_t v29;

  *(_OWORD *)(a1 + 184) = 0u;
  v4 = (_OWORD *)(a1 + 184);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 288);
  *(_BYTE *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 200) = 0u;
  v5 = (_OWORD *)(a1 + 200);
  v27 = 0;
  v28 = 0;
  v29 = 0;
  if (!base64Decode(a2, (unint64_t *)&v27))
  {
    std::string::basic_string[abi:ne180100]<0>(v25, "auth");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::error(ims::_logger, (uint64_t)v25, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Base64 decode failed for nonce: ", 32);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 32))(v9, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    goto LABEL_5;
  }
  v6 = v27;
  v7 = v28;
  v8 = v28 - (_BYTE *)v27;
  if ((unint64_t)(v28 - (_BYTE *)v27) > 0x1F)
  {
    *v4 = *(_OWORD *)v27;
    *v5 = v6[1];
    if (v8 == 32)
    {
LABEL_31:
      v10 = 1;
      *(_BYTE *)(a1 + 312) = 1;
      goto LABEL_32;
    }
    v11 = (char *)(v6 + 2);
    v12 = v7 - (char *)(v6 + 2);
    v13 = *(_QWORD *)(a1 + 304);
    v14 = *(char **)(a1 + 288);
    if (v13 - (unint64_t)v14 >= v12)
    {
      v18 = *(_BYTE **)(a1 + 296);
      v19 = v18 - v14;
      if (v18 - v14 < v12)
      {
        v20 = &v11[v19];
        if (v18 != v14)
        {
          memmove(*(void **)(a1 + 288), v11, v19);
          v14 = *(char **)(a1 + 296);
        }
        if (v7 != v20)
          memmove(v14, v20, v7 - v20);
        v21 = &v14[v7 - v20];
        goto LABEL_30;
      }
    }
    else
    {
      v15 = (_QWORD *)v4 + 13;
      if (v14)
      {
        *(_QWORD *)(a1 + 296) = v14;
        operator delete(v14);
        v13 = 0;
        *v15 = 0;
        v15[1] = 0;
        v15[2] = 0;
      }
      if ((v12 & 0x8000000000000000) != 0)
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      v16 = 2 * v13;
      if (2 * v13 <= v12)
        v16 = v12;
      if (v13 >= 0x3FFFFFFFFFFFFFFFLL)
        v17 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v17 = v16;
      std::vector<unsigned char>::__vallocate[abi:ne180100](v15, v17);
      v14 = *(char **)(a1 + 296);
    }
    if (v7 != v11)
      memmove(v14, v11, v12);
    v21 = &v14[v12];
LABEL_30:
    *(_QWORD *)(a1 + 296) = v21;
    goto LABEL_31;
  }
  std::string::basic_string[abi:ne180100]<0>(v25, "auth");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v9 = ImsLogger::error(ims::_logger, (uint64_t)v25, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Decoded nonce data is only ", 27);
  *(_BYTE *)(v9 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v9 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" bytes for nonce: ", 18);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 32))(v9, a2);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_5:
  *(_BYTE *)(v9 + 17) = 0;
  if (v24 < 0)
    operator delete(__p[0]);
  if (v26 < 0)
    operator delete(v25[0]);
  v10 = 0;
LABEL_32:
  if (v27)
  {
    v28 = (char *)v27;
    operator delete(v27);
  }
  return v10;
}

void sub_1BEF10724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipAkaDigestAuthScheme::encodeNonce(uint64_t a1, uint64_t a2)
{
  char *v4;
  _BYTE *v5;
  _BYTE *v6;
  uint64_t v7;
  void *__p;
  _BYTE *v10;
  uint64_t v11;

  if (*(_BYTE *)(a1 + 312))
  {
    __p = 0;
    v10 = 0;
    v11 = 0;
    std::vector<unsigned char>::__append((unint64_t *)&__p, *(_QWORD *)(a1 + 296) - *(_QWORD *)(a1 + 288) + 32);
    *(_OWORD *)__p = *(_OWORD *)(a1 + 184);
    v4 = (char *)__p;
    *((_OWORD *)__p + 1) = *(_OWORD *)(a1 + 200);
    v5 = *(_BYTE **)(a1 + 288);
    v6 = *(_BYTE **)(a1 + 296);
    if (v6 != v5)
      memmove(v4 + 32, v5, v6 - v5);
    v7 = base64Encode((uint64_t)v4, v10 - v4, (std::string *)a2);
    if (__p)
    {
      v10 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v7 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
  }
  return v7;
}

void sub_1BEF1085C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SipAkaDigestAuthScheme::encodeDirectives(uint64_t a1, uint64_t a2, int a3)
{
  _QWORD *v6;
  std::string *v7;
  std::string::size_type size;
  _QWORD *v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  __int128 v13;
  uint64_t v14;
  _OWORD v15[4];
  void *__p[2];
  __int128 v17;
  __int128 v18;
  _BYTE v19[144];
  uint64_t v20;
  std::string v21;
  const char *v22;

  SipDigestAuthScheme::encodeDirectives(a1, a2, a3);
  if (a3 && *(_BYTE *)(a1 + 313))
  {
    memset(&v21, 0, sizeof(v21));
    if (base64Encode(a1 + 216, 14, &v21))
    {
      v20 = 0;
      memset(v19, 0, sizeof(v19));
      v17 = 0u;
      v18 = 0u;
      *(_OWORD *)__p = 0u;
      memset(v15, 0, sizeof(v15));
      std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v15);
      LOBYTE(v13) = 34;
      v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)&v13, 1);
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v7 = &v21;
      else
        v7 = (std::string *)v21.__r_.__value_.__r.__words[0];
      if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v21.__r_.__value_.__r.__words[2]);
      else
        size = v21.__r_.__value_.__l.__size_;
      v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, (uint64_t)v7, size);
      LOBYTE(v13) = 34;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)&v13, 1);
      std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v15 + 8, &v13);
      v22 = "auts";
      v10 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, "auts", (uint64_t)&std::piecewise_construct, (__int128 **)&v22);
      v11 = v10 + 40;
      if ((char)v10[63] < 0)
        operator delete(*(void **)v11);
      *(_OWORD *)v11 = v13;
      *((_QWORD *)v11 + 2) = v14;
      *(_QWORD *)&v15[0] = *MEMORY[0x1E0DE4F60];
      *(_QWORD *)((char *)v15 + *(_QWORD *)(*(_QWORD *)&v15[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
      *((_QWORD *)&v15[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
      if (SHIBYTE(v17) < 0)
        operator delete(__p[1]);
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      MEMORY[0x1C3B8707C](v19);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
  }
  return 1;
}

void sub_1BEF10A2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v16;

  if (a15 < 0)
    operator delete(__p);
  std::ostringstream::~ostringstream((uint64_t)&a16);
  if (*(char *)(v16 - 49) < 0)
    operator delete(*(void **)(v16 - 72));
  _Unwind_Resume(a1);
}

uint64_t SipAkaDigestAuthScheme::hasValidNonce(SipAkaDigestAuthScheme *this)
{
  return *((unsigned __int8 *)this + 312);
}

uint64_t SipAkaDigestAuthScheme::parseAlgorithm(uint64_t a1, std::string *this)
{
  std::string::size_type size;
  std::string *v6;
  void **v7;
  std::string v8;
  char v9;

  size = HIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) != 0)
    size = this->__r_.__value_.__l.__size_;
  if (size)
  {
    if (std::string::compare(this, 0, 3uLL, "AKA"))
      return 0;
    if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0)
    {
      if (this->__r_.__value_.__l.__size_ < 7)
        return 0;
      v6 = (std::string *)this->__r_.__value_.__r.__words[0];
    }
    else
    {
      v6 = this;
      if (HIBYTE(this->__r_.__value_.__r.__words[2]) < 7u)
        return 0;
    }
    *(_DWORD *)(a1 + 320) = v6->__r_.__value_.__s.__data_[4] - 48;
    std::string::basic_string(&v8, this, 6uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v9);
    v7 = (void **)(a1 + 128);
    if (*(char *)(a1 + 151) < 0)
      operator delete(*v7);
    *(_OWORD *)v7 = *(_OWORD *)&v8.__r_.__value_.__l.__data_;
    *(_QWORD *)(a1 + 144) = *((_QWORD *)&v8.__r_.__value_.__l + 2);
  }
  else
  {
    *(_DWORD *)(a1 + 320) = 2;
    if (*(char *)(a1 + 151) < 0)
    {
      **(_BYTE **)(a1 + 128) = 0;
      *(_QWORD *)(a1 + 136) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 128) = 0;
      *(_BYTE *)(a1 + 151) = 0;
    }
  }
  return 1;
}

uint64_t SipAkaDigestAuthScheme::encodeAlgorithm(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  _OWORD v11[4];
  void *__p[2];
  __int128 v13;
  __int128 v14;
  _BYTE v15[144];
  uint64_t v16;

  v3 = result;
  if (*(char *)(result + 151) < 0)
  {
    if (*(_QWORD *)(result + 136))
      goto LABEL_3;
LABEL_15:
    if (*(char *)(a2 + 23) < 0)
    {
      **(_BYTE **)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    else
    {
      *(_BYTE *)a2 = 0;
      *(_BYTE *)(a2 + 23) = 0;
    }
    return result;
  }
  if (!*(_BYTE *)(result + 151))
    goto LABEL_15;
LABEL_3:
  v16 = 0;
  memset(v15, 0, sizeof(v15));
  v13 = 0u;
  v14 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v11, 0, sizeof(v11));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)"AKAv", 4);
  v4 = (_QWORD *)std::ostream::operator<<();
  LOBYTE(v9) = 45;
  v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)&v9, 1);
  v6 = *(char *)(v3 + 151);
  if (v6 >= 0)
    v7 = v3 + 128;
  else
    v7 = *(_QWORD *)(v3 + 128);
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v3 + 151);
  else
    v8 = *(_QWORD *)(v3 + 136);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, v7, v8);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v11 + 8, &v9);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  *(_OWORD *)a2 = v9;
  *(_QWORD *)(a2 + 16) = v10;
  *(_QWORD *)&v11[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v11 + *(_QWORD *)(*(_QWORD *)&v11[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v11[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x1C3B8707C](v15);
}

void sub_1BEF10D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  std::ostringstream::~ostringstream((uint64_t)va);
  _Unwind_Resume(a1);
}

char **SipAkaDigestAuthScheme::setRes(char **result, char **a2)
{
  char *v3;
  char *v4;
  char **v6;

  v3 = *a2;
  v4 = a2[1];
  if ((unint64_t)(v4 - v3 - 17) >= 0xFFFFFFFFFFFFFFF3)
  {
    v6 = result;
    result += 33;
    if (result != a2)
      result = (char **)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>(result, v3, v4, v4 - v3);
    *(_WORD *)((char *)v6 + 313) = 256;
  }
  return result;
}

uint64_t SipAkaDigestAuthScheme::computeResponse(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = (*(uint64_t (**)(_QWORD *))(*a2 + 112))(a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD *, _QWORD))(*(_QWORD *)a1 + 144))(a1, v4, a2 + 14, a2[9]);
}

uint64_t SipAkaDigestAuthScheme::computeResponse(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  void *__p[2];
  char v11;
  void *v12[2];
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;

  v16 = 0;
  v14 = 0u;
  v15 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v14, 1);
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a3 + 40))(a3, &v14);
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  if (a4)
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a4 + 80))(a4, v12);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v15 + 1) + 8, __p);
  v8 = (*(uint64_t (**)(uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 152))(a1, a2, __p, v12);
  if (v11 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v13) < 0)
    operator delete(v12[0]);
  *(_QWORD *)&v14 = &off_1E78D7A10;
  if ((_BYTE)v15 && *((_QWORD *)&v14 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v14 + 1) + 8))(*((_QWORD *)&v14 + 1));
  return v8;
}

void sub_1BEF10EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a20 < 0)
    operator delete(__p);
  if (a23)
  {
    if (a22)
      (*(void (**)(uint64_t))(*(_QWORD *)a22 + 8))(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t SipAkaDigestAuthScheme::computeResponse(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4)
{
  uint64_t v8;
  std::string::size_type size;
  unsigned __int8 *v11;
  uint64_t v12;
  _BYTE *v13;
  _BYTE *v14;
  char *v15;
  uint64_t v16;
  _BYTE *v17;
  _BYTE *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  std::string *v22;
  size_t v23;
  uint64_t v24;
  _BYTE *v25;
  void *v26[2];
  char v27;
  std::string v28;
  void *__p;
  _BYTE *v30;
  uint64_t v31;
  void *v32;
  _BYTE *v33;
  uint64_t v34;
  _OWORD v35[2];
  uint64_t v36;
  std::string v37;

  if (*(_BYTE *)(a1 + 313))
  {
    LOBYTE(v35[0]) = 0;
    return SipDigestAuthScheme::_computeResponse(a1, a2, a3, a4, v35, 0);
  }
  else
  {
    if (!*(_BYTE *)(a1 + 314))
      return 0;
    if (*(_DWORD *)(a1 + 320) == 1)
      return SipDigestAuthScheme::_computeResponse(a1, a2, a3, a4, *(void **)(a1 + 264), *(_QWORD *)(a1 + 272) - *(_QWORD *)(a1 + 264));
    if (*(_BYTE *)(a1 + 316) && *(_BYTE *)(a1 + 315))
    {
      memset(&v37, 0, sizeof(v37));
      if (*(char *)(a1 + 151) < 0)
        std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(a1 + 128), *(_QWORD *)(a1 + 136));
      else
        v37 = *(std::string *)(a1 + 128);
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
      if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        size = v37.__r_.__value_.__l.__size_;
      if (!size)
        std::string::operator=(&v37, (const std::string *)SipDigestAlgorithm::kAlgorithmMD5);
      v36 = 0;
      memset(v35, 0, sizeof(v35));
      SipDigestAlgorithmManager::SipDigestAlgorithmManager((SipDigestAlgorithmManager *)v35);
      v11 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v35, (unsigned __int8 *)&v37);
      if (v11 && (v12 = *((_QWORD *)v11 + 5)) != 0)
      {
        v32 = 0;
        v33 = 0;
        v34 = 0;
        v13 = *(_BYTE **)(a1 + 264);
        v14 = *(_BYTE **)(a1 + 272);
        if (v14 - v13 == -32)
        {
          v15 = 0;
        }
        else
        {
          std::vector<unsigned char>::__append((unint64_t *)&v32, v14 - v13 + 32);
          v13 = *(_BYTE **)(a1 + 264);
          v14 = *(_BYTE **)(a1 + 272);
          v15 = (char *)v32;
        }
        if (v14 == v13)
        {
          v18 = v14;
        }
        else
        {
          memmove(v15, v13, v14 - v13);
          v14 = *(_BYTE **)(a1 + 264);
          v18 = *(_BYTE **)(a1 + 272);
          v15 = (char *)v32;
        }
        v19 = v18 - v14;
        *(_OWORD *)&v15[v19] = *(_OWORD *)(a1 + 246);
        *(_OWORD *)((char *)v32 + v19 + 16) = *(_OWORD *)(a1 + 230);
        __p = 0;
        v30 = 0;
        v31 = 0;
        if (byte_1ED70E5A7 >= 0)
          v20 = &kAKAv2Password;
        else
          v20 = (uint64_t *)kAKAv2Password;
        if (byte_1ED70E5A7 >= 0)
          v21 = byte_1ED70E5A7;
        else
          v21 = unk_1ED70E598;
        if (((*(uint64_t (**)(uint64_t, void *, int64_t, uint64_t *, uint64_t, void **))(*(_QWORD *)v12 + 32))(v12, v32, v33 - (_BYTE *)v32, v20, v21, &__p) & 1) != 0)
        {
          memset(&v28, 0, sizeof(v28));
          base64Encode((uint64_t)__p, v30 - (_BYTE *)__p, &v28);
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v22 = &v28;
          else
            v22 = (std::string *)v28.__r_.__value_.__r.__words[0];
          if ((v28.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v23 = HIBYTE(v28.__r_.__value_.__r.__words[2]);
          else
            v23 = v28.__r_.__value_.__l.__size_;
          v8 = SipDigestAuthScheme::_computeResponse(a1, a2, a3, a4, v22, v23);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v28, "auth");
          std::string::basic_string[abi:ne180100]<0>(v26, "");
          v24 = ims::error((uint64_t)&v28, (uint64_t)v26);
          v25 = (_BYTE *)ImsOutStream::operator<<(v24, "Unable to generate AKAv2 password");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v25[17] = 0;
          if (v27 < 0)
            operator delete(v26[0]);
          if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v28.__r_.__value_.__l.__data_);
          v8 = 0;
        }
        if (__p)
        {
          v30 = __p;
          operator delete(__p);
        }
        if (v32)
        {
          v33 = v32;
          operator delete(v32);
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v32, "auth");
        std::string::basic_string[abi:ne180100]<0>(&__p, "");
        v16 = ims::info((uint64_t)&v32, (uint64_t)&__p);
        v17 = (_BYTE *)ImsOutStream::operator<<(v16, "Invalid Authorization header: unsupported algorithm ");
        (*(void (**)(_BYTE *, std::string *))(*(_QWORD *)v17 + 32))(v17, &v37);
        (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        v17[17] = 0;
        if (SHIBYTE(v31) < 0)
          operator delete(__p);
        if (SHIBYTE(v34) < 0)
          operator delete(v32);
        v8 = 0;
      }
      SipDigestAlgorithmManager::~SipDigestAlgorithmManager((SipDigestAlgorithmManager *)v35);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
    }
    else
    {
      return 0;
    }
  }
  return v8;
}

void sub_1BEF112D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  uint64_t v33;

  if (a20 < 0)
    operator delete(__p);
  if (a21)
    operator delete(a21);
  if (a27)
    operator delete(a27);
  SipDigestAlgorithmManager::~SipDigestAlgorithmManager((SipDigestAlgorithmManager *)&a33);
  if (*(char *)(v33 - 57) < 0)
    operator delete(*(void **)(v33 - 80));
  _Unwind_Resume(a1);
}

ImsOutStream *SipAkaDigestAuthScheme::log(SipAkaDigestAuthScheme *this, ImsOutStream *a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;

  SipAuthScheme::log(this, a2);
  if (*((_BYTE *)this + 314))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  RES:", 6);
    *((_BYTE *)a2 + 17) = 0;
    if (*((_QWORD *)this + 34) != *((_QWORD *)this + 33))
    {
      v4 = 0;
      do
      {
        v5 = (_QWORD *)*((_QWORD *)a2 + 1);
        v17 = 32;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)&v17, 1);
        *((_BYTE *)a2 + 17) = 0;
        v6 = (_QWORD *)*((_QWORD *)a2 + 1);
        *(_DWORD *)((char *)v6 + *(_QWORD *)(*v6 - 24) + 8) = *(_DWORD *)((_BYTE *)v6 + *(_QWORD *)(*v6 - 24) + 8) & 0xFFFFFFB5 | 8;
        *((_BYTE *)a2 + 17) = 0;
        v18 = 48;
        std::operator<<[abi:ne180100]<std::char_traits<char>>(v6, &v18);
        *(_QWORD *)(*((_QWORD *)a2 + 1) + *(_QWORD *)(**((_QWORD **)a2 + 1) - 24) + 24) = 2;
        std::ostream::operator<<();
        *((_BYTE *)a2 + 17) = 0;
        ++v4;
      }
      while (v4 < *((_QWORD *)this + 34) - *((_QWORD *)this + 33));
    }
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (*((_BYTE *)this + 315))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  CK:", 5);
    v7 = 0;
    *((_BYTE *)a2 + 17) = 0;
    do
    {
      v8 = (_QWORD *)*((_QWORD *)a2 + 1);
      v19 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)&v19, 1);
      *((_BYTE *)a2 + 17) = 0;
      v9 = (_QWORD *)*((_QWORD *)a2 + 1);
      *(_DWORD *)((char *)v9 + *(_QWORD *)(*v9 - 24) + 8) = *(_DWORD *)((_BYTE *)v9 + *(_QWORD *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 8;
      *((_BYTE *)a2 + 17) = 0;
      v20 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v9, &v20);
      *(_QWORD *)(*((_QWORD *)a2 + 1) + *(_QWORD *)(**((_QWORD **)a2 + 1) - 24) + 24) = 2;
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      ++v7;
    }
    while (v7 != 16);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (*((_BYTE *)this + 316))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  IK:", 5);
    v10 = 0;
    *((_BYTE *)a2 + 17) = 0;
    do
    {
      v11 = (_QWORD *)*((_QWORD *)a2 + 1);
      v21 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v11, (uint64_t)&v21, 1);
      *((_BYTE *)a2 + 17) = 0;
      v12 = (_QWORD *)*((_QWORD *)a2 + 1);
      *(_DWORD *)((char *)v12 + *(_QWORD *)(*v12 - 24) + 8) = *(_DWORD *)((_BYTE *)v12 + *(_QWORD *)(*v12 - 24) + 8) & 0xFFFFFFB5 | 8;
      *((_BYTE *)a2 + 17) = 0;
      v22 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v12, &v22);
      *(_QWORD *)(*((_QWORD *)a2 + 1) + *(_QWORD *)(**((_QWORD **)a2 + 1) - 24) + 24) = 2;
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      ++v10;
    }
    while (v10 != 16);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  if (*((_BYTE *)this + 313))
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"  AUTS:", 7);
    v13 = 0;
    *((_BYTE *)a2 + 17) = 0;
    do
    {
      v14 = (_QWORD *)*((_QWORD *)a2 + 1);
      v23 = 32;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v14, (uint64_t)&v23, 1);
      *((_BYTE *)a2 + 17) = 0;
      v15 = (_QWORD *)*((_QWORD *)a2 + 1);
      *(_DWORD *)((char *)v15 + *(_QWORD *)(*v15 - 24) + 8) = *(_DWORD *)((_BYTE *)v15 + *(_QWORD *)(*v15 - 24) + 8) & 0xFFFFFFB5 | 8;
      *((_BYTE *)a2 + 17) = 0;
      v24 = 48;
      std::operator<<[abi:ne180100]<std::char_traits<char>>(v15, &v24);
      *(_QWORD *)(*((_QWORD *)a2 + 1) + *(_QWORD *)(**((_QWORD **)a2 + 1) - 24) + 24) = 2;
      std::ostream::operator<<();
      *((_BYTE *)a2 + 17) = 0;
      ++v13;
    }
    while (v13 != 14);
    (*(void (**)(ImsOutStream *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)a2 + 64))(a2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *((_BYTE *)a2 + 17) = 0;
  }
  return a2;
}

SipAkaAuthChallenge *SipAkaDigestAuthScheme::createChallenge(SipAkaDigestAuthScheme *this)
{
  SipAkaAuthChallenge *v2;

  v2 = (SipAkaAuthChallenge *)operator new();
  SipAkaAuthChallenge::SipAkaAuthChallenge(v2, this);
  return v2;
}

void sub_1BEF11760(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

SipAkaAuthResponse *SipAkaDigestAuthScheme::createResponse(SipAkaDigestAuthScheme *this)
{
  SipAkaAuthResponse *v2;

  v2 = (SipAkaAuthResponse *)operator new();
  SipAkaAuthResponse::SipAkaAuthResponse(v2, this);
  return v2;
}

void sub_1BEF117C8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40E7B9B157);
  _Unwind_Resume(a1);
}

void SipAkaDigestAuthScheme::~SipAkaDigestAuthScheme(SipAkaDigestAuthScheme *this)
{
  SipAkaDigestAuthScheme::~SipAkaDigestAuthScheme(this);
  JUMPOUT(0x1C3B87100);
}

{
  void *v2;
  void *v3;
  void **v4;

  *(_QWORD *)this = &off_1E78C5E10;
  v2 = (void *)*((_QWORD *)this + 36);
  if (v2)
  {
    *((_QWORD *)this + 37) = v2;
    operator delete(v2);
  }
  v3 = (void *)*((_QWORD *)this + 33);
  if (v3)
  {
    *((_QWORD *)this + 34) = v3;
    operator delete(v3);
  }
  *(_QWORD *)this = &off_1E78C92F0;
  v4 = (void **)((char *)this + 160);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 151) < 0)
    operator delete(*((void **)this + 16));
  if (*((char *)this + 127) < 0)
    operator delete(*((void **)this + 13));
  v4 = (void **)((char *)this + 80);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v4);
  if (*((char *)this + 79) < 0)
    operator delete(*((void **)this + 7));
  *(_QWORD *)this = off_1E78D92D8;
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 8);
}

uint64_t SipAkaDigestAuthScheme::clone(SipAkaDigestAuthScheme *this)
{
  uint64_t v2;

  v2 = operator new();
  SipDigestAuthScheme::SipDigestAuthScheme((SipDigestAuthScheme *)v2, this);
  *(_QWORD *)v2 = &off_1E78C5E10;
  *(_OWORD *)(v2 + 264) = 0u;
  *(_OWORD *)(v2 + 280) = 0u;
  *(_OWORD *)(v2 + 296) = 0u;
  *(_OWORD *)(v2 + 184) = *(_OWORD *)((char *)this + 184);
  *(_OWORD *)(v2 + 200) = *(_OWORD *)((char *)this + 200);
  *(_QWORD *)(v2 + 216) = *((_QWORD *)this + 27);
  *(_QWORD *)(v2 + 222) = *(_QWORD *)((char *)this + 222);
  *(_OWORD *)(v2 + 230) = *(_OWORD *)((char *)this + 230);
  *(_OWORD *)(v2 + 246) = *(_OWORD *)((char *)this + 246);
  if ((SipAkaDigestAuthScheme *)v2 != this)
  {
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 264), *((char **)this + 33), *((char **)this + 34), *((_QWORD *)this + 34) - *((_QWORD *)this + 33));
    std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char *,unsigned char *>((_QWORD *)(v2 + 288), *((char **)this + 36), *((char **)this + 37), *((_QWORD *)this + 37) - *((_QWORD *)this + 36));
  }
  *(_BYTE *)(v2 + 316) = *((_BYTE *)this + 316);
  *(_DWORD *)(v2 + 312) = *((_DWORD *)this + 78);
  *(_DWORD *)(v2 + 320) = *((_DWORD *)this + 80);
  return v2;
}

void sub_1BEF118F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C4074E51C00);
  _Unwind_Resume(a1);
}

const char *SipDigestAuthScheme::name(SipDigestAuthScheme *this)
{
  return "Digest";
}

uint64_t SipDigestAuthScheme::isValid(SipDigestAuthScheme *this)
{
  return (*(uint64_t (**)(SipDigestAuthScheme *))(*(_QWORD *)this + 88))(this);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table(uint64_t a1)
{
  void *v2;

  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(a1, *(_QWORD **)(a1 + 16));
  v2 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v2)
    operator delete(v2);
  return a1;
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__deallocate_node(uint64_t a1, _QWORD *a2)
{
  _QWORD *v2;
  _QWORD *v3;

  if (a2)
  {
    v2 = a2;
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char v15;

  v5 = (char *)a1[1];
  v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    v6 = *a1;
    v7 = &v5[-*a1];
    v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0)
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL)
      v10 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
      v11 = (unint64_t)operator new(v10);
    else
      v11 = 0;
    v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
      operator delete(v5);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, uint64_t a3, __int128 **a4)
{
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint8x8_t v11;
  unint64_t v12;
  unint64_t v13;
  unsigned __int8 **v14;
  unsigned __int8 *i;
  unint64_t v16;
  float v17;
  float v18;
  _BOOL8 v19;
  unint64_t v20;
  unint64_t v21;
  size_t v22;
  _QWORD *v23;
  unint64_t v24;
  _QWORD v26[3];

  v7 = (_QWORD *)(a1 + 24);
  v8 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v9 = v8;
  v10 = *(_QWORD *)(a1 + 8);
  if (v10)
  {
    v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    v12 = v11.u32[0];
    if (v11.u32[0] > 1uLL)
    {
      v13 = v8;
      if (v8 >= v10)
        v13 = v8 % v10;
    }
    else
    {
      v13 = (v10 - 1) & v8;
    }
    v14 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v13);
    if (v14)
    {
      for (i = *v14; i; i = *(unsigned __int8 **)i)
      {
        v16 = *((_QWORD *)i + 1);
        if (v16 == v9)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v12 > 1)
          {
            if (v16 >= v10)
              v16 %= v10;
          }
          else
          {
            v16 &= v10 - 1;
          }
          if (v16 != v13)
            break;
        }
      }
    }
  }
  else
  {
    v13 = 0;
  }
  memset(v26, 0, sizeof(v26));
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1, v9, a4, v26);
  v17 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v18 = *(float *)(a1 + 32);
  if (!v10 || (float)(v18 * (float)v10) < v17)
  {
    v19 = 1;
    if (v10 >= 3)
      v19 = (v10 & (v10 - 1)) != 0;
    v20 = v19 | (2 * v10);
    v21 = vcvtps_u32_f32(v17 / v18);
    if (v20 <= v21)
      v22 = v21;
    else
      v22 = v20;
    std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipClientTransaction>>>>::__rehash<true>(a1, v22);
    v10 = *(_QWORD *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10)
        v13 = v9 % v10;
      else
        v13 = v9;
    }
    else
    {
      v13 = (v10 - 1) & v9;
    }
  }
  v23 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v13);
  if (v23)
  {
    *(_QWORD *)v26[0] = *v23;
    *v23 = v26[0];
  }
  else
  {
    *(_QWORD *)v26[0] = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v26[0];
    *(_QWORD *)(*(_QWORD *)a1 + 8 * v13) = a1 + 16;
    if (*(_QWORD *)v26[0])
    {
      v24 = *(_QWORD *)(*(_QWORD *)v26[0] + 8);
      if ((v10 & (v10 - 1)) != 0)
      {
        if (v24 >= v10)
          v24 %= v10;
      }
      else
      {
        v24 &= v10 - 1;
      }
      *(_QWORD *)(*(_QWORD *)a1 + 8 * v24) = v26[0];
    }
  }
  i = (unsigned __int8 *)v26[0];
  v26[0] = 0;
  ++*v7;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v26, 0);
  return i;
}

void sub_1BEF11E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__construct_node_hash<std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1@<X0>, uint64_t a2@<X1>, __int128 **a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  std::string *v9;
  __int128 *v10;
  __int128 v11;

  v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((_BYTE *)a4 + 16) = 0;
  *v8 = 0;
  v8[1] = a2;
  v9 = (std::string *)(v8 + 2);
  v10 = *a3;
  if (*((char *)*a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v10, *((_QWORD *)v10 + 1));
  }
  else
  {
    v11 = *v10;
    v8[4] = *((_QWORD *)v10 + 2);
    *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v11;
  }
  v8[5] = 0;
  v8[6] = 0;
  v8[7] = 0;
  *((_BYTE *)a4 + 16) = 1;
}

void sub_1BEF11EF0(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](v1, 0);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  void *v2;

  v2 = *(void **)a1;
  *(_QWORD *)a1 = a2;
  if (v2)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>((uint64_t)v2 + 16);
    operator delete(v2);
  }
}

uint64_t _GLOBAL__sub_I_SipAkaDigestAuthScheme_cpp()
{
  std::string::basic_string[abi:ne180100]<0>(&kAKAv2Password, "http-digest-akav2-password");
  return __cxa_atexit(MEMORY[0x1E0DE44D0], &kAKAv2Password, &dword_1BEDF4000);
}

void SipGenericXmlBody::SipGenericXmlBody(SipGenericXmlBody *this, const SipGenericXmlBody *a2)
{
  __int128 v4;

  *(_QWORD *)this = off_1E78D24E0;
  if (*((char *)a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)((char *)this + 8), *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
  }
  else
  {
    v4 = *(_OWORD *)((char *)a2 + 8);
    *((_QWORD *)this + 3) = *((_QWORD *)a2 + 3);
    *(_OWORD *)((char *)this + 8) = v4;
  }
  *(_QWORD *)this = off_1E78C5ED8;
  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  XmlParserGenericItem::XmlParserGenericItem((SipGenericXmlBody *)((char *)this + 56), (const SipGenericXmlBody *)((char *)a2 + 56));
  std::string::operator=((std::string *)((char *)this + 32), (const std::string *)((char *)a2 + 32));
}

void sub_1BEF12034(_Unwind_Exception *a1)
{
  void **v1;
  uint64_t v2;
  void **v3;
  XmlParserGenericItem *v4;
  uint64_t v5;

  XmlParserGenericItem::~XmlParserGenericItem(v4);
  if (*(char *)(v2 + 55) < 0)
    operator delete(*v3);
  *(_QWORD *)v2 = v5;
  if (*(char *)(v2 + 31) < 0)
    operator delete(*v1);
  _Unwind_Resume(a1);
}

_QWORD *SipGenericXmlBody::SipGenericXmlBody(_QWORD *a1, const std::string *a2, uint64_t a3)
{
  std::string *v6;
  void *v8[9];
  void *__p[2];
  char v10;

  a1[1] = 0;
  a1[4] = 0;
  v6 = (std::string *)(a1 + 4);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_1E78C5ED8;
  a1[5] = 0;
  a1[6] = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, "root");
  XmlParserGenericItem::XmlParserGenericItem((uint64_t)(a1 + 7), (__int128 *)__p);
  if (v10 < 0)
    operator delete(__p[0]);
  std::string::operator=(v6, a2);
  (*(void (**)(void **__return_ptr, _QWORD *, uint64_t))(*a1 + 120))(v8, a1, a3);
  ImsResult::~ImsResult((ImsResult *)v8);
  return a1;
}

void sub_1BEF12134(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  uint64_t v23;
  void **v24;
  void **v25;

  if (a23 < 0)
    operator delete(__p);
  if (*(char *)(v23 + 55) < 0)
    operator delete(*v24);
  *(_QWORD *)v23 = off_1E78D24E0;
  if (*(char *)(v23 + 31) < 0)
    operator delete(*v25);
  _Unwind_Resume(exception_object);
}

void SipGenericXmlBody::generateXml(SipGenericXmlBody *this@<X0>, std::string *a2@<X8>)
{
  _OWORD v3[11];
  uint64_t v4;

  v4 = 0;
  memset(v3, 0, sizeof(v3));
  XmlParserGenericItem::XmlParserGenericItem((XmlParserGenericItem *)v3, (SipGenericXmlBody *)((char *)this + 56));
  bambi::XmlTreeItem::encode((bambi::XmlTreeItem *)((char *)v3 + 8), 0, 1, a2);
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)v3);
}

void sub_1BEF12204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  XmlParserGenericItem::~XmlParserGenericItem((XmlParserGenericItem *)&a9);
  _Unwind_Resume(a1);
}

void SipGenericXmlBody::setContent(uint64_t a1@<X0>, bambi::XmlParser *a2@<X1>, uint64_t a3@<X2>, bambi::XmlParserItem *a4@<X3>, uint64_t a5@<X8>)
{
  const ImsResult *v6;
  _QWORD v7[2];
  int v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;

  if ((bambi::XmlParser::parseXml(a2, a1 + 56, a3, a4) & 1) != 0)
  {
    *(_OWORD *)(a5 + 24) = 0uLL;
    *(_OWORD *)(a5 + 40) = 0uLL;
    *(_OWORD *)(a5 + 56) = 0uLL;
    *(_QWORD *)a5 = &off_1E78B7238;
    *(_QWORD *)(a5 + 8) = &_bambiDomain;
    *(_DWORD *)(a5 + 16) = 0;
  }
  else
  {
    v9 = 0uLL;
    v10 = 0uLL;
    v11 = 0uLL;
    v7[0] = &off_1E78B7238;
    v7[1] = &_bambiDomain;
    v8 = 0x40000000;
    v6 = (const ImsResult *)ImsResult::operator<<<char [16]>((uint64_t)v7, "XML parse error");
    ImsResult::ImsResult((ImsResult *)a5, v6);
    ImsResult::~ImsResult((ImsResult *)v7);
  }
}

void sub_1BEF122BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

SipGenericXmlBody *SipGenericXmlBody::clone(SipGenericXmlBody *this)
{
  SipGenericXmlBody *v2;

  v2 = (SipGenericXmlBody *)operator new();
  SipGenericXmlBody::SipGenericXmlBody(v2, this);
  return v2;
}

void sub_1BEF123DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40FEE257C6);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionHandover::MediaSessionHandover(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t *a4, _QWORD *a5, uint64_t a6, dispatch_object_t *a7, int a8)
{
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  __int128 v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v45;
  void *__p[2];
  char v47;
  void *v48[2];
  char v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v16 = *a2;
  v15 = (std::__shared_weak_count *)a2[1];
  if (v15)
  {
    p_shared_weak_owners = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  v19 = *a4;
  v20 = (std::__shared_weak_count *)a4[1];
  v45 = v20;
  if (v20)
  {
    p_shared_owners = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldxr(p_shared_owners);
    while (__stxr(v22 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_1E78C63A8;
    v50 = v19;
    v51 = v20;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)a1 = &off_1E78C63A8;
    v50 = v19;
    v51 = 0;
  }
  MediaSessionInterface::MediaSessionInterface(a1 + 24, a3, &v50, (__int128 *)a6, a7);
  v24 = v51;
  if (v51)
  {
    v25 = (unint64_t *)&v51->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  *(_QWORD *)a1 = &off_1E78DEC60;
  *(_QWORD *)(a1 + 24) = &unk_1E78DED60;
  *(_QWORD *)(a1 + 112) = a1 + 112;
  *(_QWORD *)(a1 + 120) = a1 + 112;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = v16;
  *(_QWORD *)(a1 + 144) = v15;
  if (v15)
  {
    v27 = (unint64_t *)&v15->__shared_weak_owners_;
    do
      v28 = __ldxr(v27);
    while (__stxr(v28 + 1, v27));
  }
  *(_DWORD *)(a1 + 152) = 4;
  std::string::basic_string[abi:ne180100]<0>(v48, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v29 = ImsLogger::debug(ims::_logger, (uint64_t)v48, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"MediaSessionQueue", 17);
  *(_BYTE *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v29 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v29 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" stackId=", 9);
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v29 + 32))(v29, a6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v29 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v29 + 17) = 0;
  if (v47 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  if (v45)
  {
    v30 = (unint64_t *)&v45->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  if (v15)
    std::__shared_weak_count::__release_weak(v15);
  *(_QWORD *)(a1 + 168) = &unk_1E78C61D8;
  *(_QWORD *)a1 = &off_1E78C5F80;
  *(_QWORD *)(a1 + 24) = &unk_1E78C60C0;
  *(_QWORD *)(a1 + 160) = &unk_1E78C6198;
  *(_QWORD *)(a1 + 176) = *a5;
  v32 = a5[1];
  *(_QWORD *)(a1 + 184) = v32;
  if (v32)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
  }
  if (*(char *)(a6 + 23) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 192), *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  }
  else
  {
    v35 = *(_OWORD *)a6;
    *(_QWORD *)(a1 + 208) = *(_QWORD *)(a6 + 16);
    *(_OWORD *)(a1 + 192) = v35;
  }
  *(_QWORD *)(a1 + 224) = *a4;
  *(_DWORD *)(a1 + 216) = 0;
  v36 = a4[1];
  *(_QWORD *)(a1 + 232) = v36;
  if (v36)
  {
    v37 = (unint64_t *)(v36 + 8);
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  *(_QWORD *)(a1 + 240) = *a7;
  if (*a7)
    dispatch_retain(*a7);
  *(_DWORD *)(a1 + 248) = a8;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 256));
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 0;
  *(_QWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) = 1;
  *(_QWORD *)(a1 + 432) = a3;
  *(_WORD *)(a1 + 440) = 0;
  *(_QWORD *)(a1 + 448) = *a2;
  v39 = a2[1];
  *(_QWORD *)(a1 + 456) = v39;
  if (v39)
  {
    v40 = (unint64_t *)(v39 + 8);
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 489) = 0u;
  std::string::basic_string[abi:ne180100]<0>(v48, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v42 = ImsLogger::debug(ims::_logger, (uint64_t)v48, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"MediaSessionHandover", 20);
  *(_BYTE *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)" [timeout=", 10);
  *(_BYTE *)(v42 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v42 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v42 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v42 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v42 + 64))(v42, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v42 + 17) = 0;
  if (v47 < 0)
    operator delete(__p[0]);
  if (v49 < 0)
    operator delete(v48[0]);
  *(_QWORD *)(a1 + 360) = a1 + 168;
  return a1;
}

void sub_1BEF128C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, MediaSessionInterface *a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  MediaSessionQueue *v25;
  uint64_t v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v26);
  MediaSessionQueue::~MediaSessionQueue(v25);
  _Unwind_Resume(a1);
}

void MediaSessionQueue::~MediaSessionQueue(MediaSessionQueue *this)
{
  void **v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  *(_QWORD *)this = &off_1E78DEC60;
  *((_QWORD *)this + 3) = &unk_1E78DED60;
  v2 = (void **)((char *)this + 24);
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.queue");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::info(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"~MediaSessionQueue", 18);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear((uint64_t *)this + 14);
  MediaSessionInterface::~MediaSessionInterface(v2);
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
}

{
  MediaSessionQueue::~MediaSessionQueue(this);
  JUMPOUT(0x1C3B87100);
}

void MediaSessionHandover::~MediaSessionHandover(MediaSessionHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  size_t v4;
  NSObject *v5;
  void *__p[2];
  char v7;
  void *v8[2];
  char v9;

  *(_QWORD *)this = &off_1E78C5F80;
  *((_QWORD *)this + 3) = &unk_1E78C60C0;
  *((_QWORD *)this + 20) = &unk_1E78C6198;
  *((_QWORD *)this + 21) = &unk_1E78C61D8;
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"~MediaSessionHandover", 21);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  std::string::basic_string[abi:ne180100]<0>(v8, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v8, (uint64_t)__p);
  v4 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v4);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"cancelAllTimers", 15);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v7 < 0)
    operator delete(__p[0]);
  if (v9 < 0)
    operator delete(v8[0]);
  SipTimerContainer::cancelAllTimers((MediaSessionHandover *)((char *)this + 256));
  *((_BYTE *)this + 504) = 0;
  if (*((char *)this + 503) < 0)
    operator delete(*((void **)this + 60));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 464);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 448);
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  SipTimerContainer::~SipTimerContainer((MediaSessionHandover *)((char *)this + 256));
  v5 = *((_QWORD *)this + 30);
  if (v5)
    dispatch_release(v5);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 224);
  if (*((char *)this + 215) < 0)
    operator delete(*((void **)this + 24));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 176);
  MediaSessionQueue::~MediaSessionQueue(this);
}

{
  MediaSessionHandover::~MediaSessionHandover(this);
  JUMPOUT(0x1C3B87100);
}

void sub_1BEF12D6C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  __clang_call_terminate(a1);
}

void `non-virtual thunk to'MediaSessionHandover::~MediaSessionHandover(MediaSessionHandover *this)
{
  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 24));
}

{
  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 168));
}

{
  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

{
  MediaSessionHandover::~MediaSessionHandover((MediaSessionHandover *)((char *)this - 168));
  JUMPOUT(0x1C3B87100);
}

uint64_t MediaSessionHandover::terminate(MediaSessionHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  NSObject *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  void *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD v22[5];
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  void *v26;
  std::__shared_weak_count *v27;
  char v28;

  std::string::basic_string[abi:ne180100]<0>(&v26, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v26, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"terminate", 9);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v28 < 0)
    operator delete(v26);
  *((_BYTE *)this + 424) = 1;
  v26 = 0;
  v27 = 0;
  RTPSharedPointerBase::getShared<MediaSessionHandover>(&v26, (uint64_t)this);
  v6 = *((_QWORD *)this + 30);
  v22[0] = MEMORY[0x1E0C809B0];
  v22[1] = 1174405120;
  v22[2] = ___ZN20MediaSessionHandover9terminateEb_block_invoke;
  v22[3] = &__block_descriptor_tmp_10;
  v22[4] = v26;
  v23 = v27;
  if (v27)
  {
    p_shared_owners = (unint64_t *)&v27->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  dispatch_async(v6, v22);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v9)
  {
    v10 = std::__shared_weak_count::lock(v9);
    __p[1] = v10;
    if (v10)
    {
      v11 = v10;
      v12 = (void *)*((_QWORD *)this + 17);
      __p[0] = v12;
      if (v12)
        (*(void (**)(void *, _QWORD))(*(_QWORD *)v12 + 24))(v12, 0);
      v13 = (unint64_t *)&v11->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
        std::__shared_weak_count::__release_weak(v11);
      }
    }
  }
  v15 = v23;
  if (v23)
  {
    v16 = (unint64_t *)&v23->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v27;
  if (v27)
  {
    v19 = (unint64_t *)&v27->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  return 1;
}

void sub_1BEF130F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v22 = v20;
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v22);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 56);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::getShared<MediaSessionHandover>(void **p_lpsrc, uint64_t a2)
{
  void *v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  void *lpsrc;
  std::__shared_weak_count *v9;

  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)(a2 + 8));
  if (lpsrc)
  {
    if (v3)
    {
      v4 = v9;
      *p_lpsrc = v3;
      p_lpsrc[1] = v4;
      p_lpsrc = &lpsrc;
    }
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v5 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
}

void ___ZN20MediaSessionHandover9terminateEb_block_invoke(uint64_t a1)
{
  MediaSessionHandover::handoverComplete(*(_QWORD *)(a1 + 32), 9);
}

void MediaSessionHandover::handoverComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handoverComplete", 16);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" Handover completed [sessionId=", 31);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  std::ostream::operator<<();
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if ((_DWORD)a2 == 9 || !(_DWORD)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"cancelTimerForSessionHandover", 29);
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" [sessionId=", 12);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
    std::ostream::operator<<();
    *(_BYTE *)(v8 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 256), (std::string *)(a1 + 400));
  }
  v10 = *(_QWORD *)(a1 + 224);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 176))(a1);
  RTPManager::handoverComplete(v10, v11, a2, *(_DWORD *)(*(_QWORD *)(a1 + 176) + 40), (unsigned __int8 *)(a1 + 192));
}

void sub_1BEF134E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c48_ZTSNSt3__110shared_ptrI20MediaSessionHandoverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(result + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

uint64_t __destroy_helper_block_e8_32c48_ZTSNSt3__110shared_ptrI20MediaSessionHandoverEE(uint64_t a1)
{
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

uint64_t `non-virtual thunk to'MediaSessionHandover::terminate(MediaSessionHandover *this)
{
  MediaSessionHandover::terminate((MediaSessionHandover *)((char *)this - 24));
  return 1;
}

void MediaSessionHandover::handover(MediaSessionHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  size_t v7;
  std::string *v8;
  std::string::size_type v9;
  char v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::string::size_type v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::string *v20;
  std::string *p_p;
  uint64_t v22;
  NSObject *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  _QWORD block[5];
  std::__shared_weak_count *v33;
  void *v34;
  std::__shared_weak_count *v35;
  uint64_t v36;
  std::string __p;
  std::string *v38;
  _BYTE v39[15];
  char v40;
  uint64_t v41;

  v41 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v39, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v39);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"handover", 8);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v40 < 0)
    operator delete(*(void **)v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v34 = 0;
  v35 = 0;
  RTPSharedPointerBase::getShared<MediaSessionHandover>(&v34, (uint64_t)this);
  *((_BYTE *)this + 424) = 0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v39, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v39);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"startTimerForSessionHandover", 28);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v40 < 0)
    operator delete(*(void **)v39);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v36 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  ims::detail::to_string_impl<unsigned long long,std::integral_constant<BOOL,false>>::operator()(&__p);
  v8 = std::string::insert(&__p, 0, "Handover timer for session ", 0x1BuLL);
  v9 = v8->__r_.__value_.__r.__words[0];
  *(_QWORD *)v39 = v8->__r_.__value_.__l.__size_;
  *(_QWORD *)&v39[7] = *(std::string::size_type *)((char *)&v8->__r_.__value_.__r.__words[1] + 7);
  v10 = HIBYTE(v8->__r_.__value_.__r.__words[2]);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  if (*((char *)this + 423) < 0)
    operator delete(*((void **)this + 50));
  v11 = *(_QWORD *)v39;
  *((_QWORD *)this + 50) = v9;
  *((_QWORD *)this + 51) = v11;
  *(_QWORD *)((char *)this + 415) = *(_QWORD *)&v39[7];
  *((_BYTE *)this + 423) = v10;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v13 = *((_QWORD *)this + 1);
  v12 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v12)
  {
    p_shared_weak_owners = (unint64_t *)&v12->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    do
      v16 = __ldxr(p_shared_weak_owners);
    while (__stxr(v16 + 1, p_shared_weak_owners));
  }
  if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 33, (unsigned __int8 *)this + 400))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(v39, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v17 = ImsLogger::warn(ims::_logger, (uint64_t)&__p, (uint64_t)v39);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Handover timer for [sessionId=", 30);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
    std::ostream::operator<<();
    *(_BYTE *)(v17 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"] already exists.", 17);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    if (v40 < 0)
      operator delete(*(void **)v39);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    if (v12)
    {
      v18 = (unint64_t *)&v12->__shared_weak_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    v38 = 0;
    v20 = (std::string *)operator new(0x20uLL);
    v20->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C6298;
    v20->__r_.__value_.__l.__size_ = (std::string::size_type)this;
    v20->__r_.__value_.__r.__words[2] = v13;
    v20[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v12;
    v38 = v20;
    SipTimerContainer::startTimer((_QWORD *)this + 32, (uint64_t)this + 400, (uint64_t)&__p, *((_DWORD *)this + 62), 0);
    p_p = v38;
    if (v38 == &__p)
    {
      v22 = 4;
      p_p = &__p;
    }
    else
    {
      if (!v38)
        goto LABEL_31;
      v22 = 5;
    }
    (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v22))();
  }
LABEL_31:
  if (v12)
  {
    std::__shared_weak_count::__release_weak(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  v23 = *((_QWORD *)this + 30);
  block[0] = MEMORY[0x1E0C809B0];
  block[1] = 1174405120;
  block[2] = ___ZN20MediaSessionHandover8handoverEv_block_invoke;
  block[3] = &__block_descriptor_tmp_7;
  block[4] = v34;
  v33 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldxr(p_shared_owners);
    while (__stxr(v25 + 1, p_shared_owners));
  }
  dispatch_async(v23, block);
  v26 = v33;
  if (v33)
  {
    v27 = (unint64_t *)&v33->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v35;
  if (v35)
  {
    v30 = (unint64_t *)&v35->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_1BEF13B5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void **a25)
{
  std::__shared_weak_count *v25;
  void **v26;
  void **p_p;
  uint64_t v29;

  p_p = a25;
  if (a25 == v26)
  {
    v29 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a25)
      goto LABEL_6;
    v29 = 5;
  }
  (*((void (**)(void))*p_p + v29))();
LABEL_6:
  if (v25)
  {
    std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void ___ZN20MediaSessionHandover8handoverEv_block_invoke(uint64_t a1)
{
  MediaSessionHandover *v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  std::__shared_weak_count *v9;
  const void *v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  size_t v15;
  _BYTE *v16;
  _BYTE *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  int v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  char *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char *v33;
  std::__shared_weak_count *v34;
  void *__p[2];
  char v36;
  void *v37;
  std::__shared_weak_count *v38;
  char v39;

  v1 = *(MediaSessionHandover **)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
  if (!v1)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"handoverSession", 15);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId=", 12);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(_QWORD *)v1 + 176))(v1);
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v36 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v37);
  if (*((_BYTE *)v1 + 424))
  {
    std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Session handover was cancelled [sessionId=", 42);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(MediaSessionHandover *))(*(_QWORD *)v1 + 176))(v1);
    std::ostream::operator<<();
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v36 < 0)
      operator delete(__p[0]);
    if (v39 < 0)
      operator delete(v37);
    return;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v7 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
  v8 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v8);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"switchStacks", 12);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v36 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v37);
  v9 = (std::__shared_weak_count *)*((_QWORD *)v1 + 18);
  if (!v9)
  {
    v13 = 0;
    goto LABEL_29;
  }
  v10 = (const void *)*((_QWORD *)v1 + 17);
  p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
  do
    v12 = __ldxr(p_shared_weak_owners);
  while (__stxr(v12 + 1, p_shared_weak_owners));
  v13 = std::__shared_weak_count::lock(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!v13 || !v10)
  {
LABEL_29:
    MediaSessionHandover::handoverComplete((uint64_t)v1, 9);
    if (!v13)
      return;
    goto LABEL_30;
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v14 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
  v15 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v15);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"switchStacks", 12);
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" starting handover stack switcher [sessionId=", 45);
  *(_BYTE *)(v14 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v14 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (v36 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v37);
  v17 = v16;
  if (v16)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v19 = __ldxr(p_shared_owners);
    while (__stxr(v19 + 1, p_shared_owners));
    v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)v16 + 240))(v16) ^ 1;
    v21 = v13;
  }
  else
  {
    v21 = 0;
    v20 = 0;
  }
  RTPSharedPointerBase::getShared<MediaSessionHandover>(&v37, (uint64_t)v1);
  v24 = v38;
  if (v37)
    v25 = (char *)v37 + 160;
  else
    v25 = 0;
  v33 = v25;
  v34 = v38;
  if (v38)
  {
    v26 = (unint64_t *)&v38->__shared_weak_owners_;
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  (*(void (**)(const void *, char **))(*(_QWORD *)v10 + 160))(v10, &v33);
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  if (v24)
  {
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v37, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v30 = ImsLogger::debug(ims::_logger, (uint64_t)&v37, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"switchStacks", 12);
  *(_BYTE *)(v30 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" [transactionPending=", 21);
  *(_BYTE *)(v30 + 17) = 0;
  (*(void (**)(const void *))(*(_QWORD *)v10 + 72))(v10);
  std::ostream::operator<<();
  *(_BYTE *)(v30 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" initialized=", 13);
  *(_BYTE *)(v30 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v30 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)" delayedStart=", 14);
  *(_BYTE *)(v30 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v30 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v30 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v30 + 17) = 0;
  if (v36 < 0)
    operator delete(__p[0]);
  if (v39 < 0)
    operator delete(v37);
  if (v17 && (v17[137] & 0xFE) != 4
    || ((*(unsigned int (**)(const void *))(*(_QWORD *)v10 + 72))(v10) ^ 1 | v20) == 1)
  {
    MediaSessionHandover::createNewSession(v1);
  }
  else
  {
    MediaSessionHandover::setHandoverState((uint64_t)v1, 1u);
  }
  if (v21)
  {
    v31 = (unint64_t *)&v21->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
LABEL_30:
  v22 = (unint64_t *)&v13->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1BEF14420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;

  if (a22 < 0)
    operator delete(__p);
  if (v23)
  {
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldaxr(p_shared_owners);
    while (__stlxr(v26 - 1, p_shared_owners));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v27 = (unint64_t *)&v22->__shared_owners_;
  do
    v28 = __ldaxr(v27);
  while (__stlxr(v28 - 1, v27));
  if (!v28)
  {
    ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

void MediaSessionHandover::handleTimer(MediaSessionHandover *a1, unsigned __int8 *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  uint64_t v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  int v24;
  uint64_t v25;
  NSObject *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD v35[5];
  std::__shared_weak_count *v36;
  uint64_t v37;
  std::string v38;
  int v39;
  void *__p;
  std::__shared_weak_count *v41;
  char v42;
  std::string v43;

  std::string::basic_string[abi:ne180100]<0>(&v43, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)&v43, (uint64_t)&__p);
  if (!a1)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"handleTimer", 11);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" [timerId=", 10);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v5 + 32))(v5, a2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v42 < 0)
    operator delete(__p);
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v43.__r_.__value_.__l.__data_);
  v8 = a2[23];
  v9 = *((_QWORD *)a2 + 1);
  if ((v8 & 0x80u) == 0)
    v10 = a2[23];
  else
    v10 = *((_QWORD *)a2 + 1);
  v11 = *((unsigned __int8 *)a1 + 423);
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)a1 + 51);
  if (v10 != v11)
    goto LABEL_22;
  if (v12 >= 0)
    v13 = (unsigned __int8 *)a1 + 400;
  else
    v13 = (unsigned __int8 *)*((_QWORD *)a1 + 50);
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v13, *((_QWORD *)a2 + 1)))
      goto LABEL_22;
LABEL_33:
    std::string::basic_string[abi:ne180100]<0>(&v43, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v19 = ImsLogger::error(ims::_logger, (uint64_t)&v43, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Handover timer fired for [sessionId=", 36);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(MediaSessionHandover *))(*(_QWORD *)a1 + 176))(a1);
    std::ostream::operator<<();
    *(_BYTE *)(v19 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v19 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v19 + 17) = 0;
    if (v42 < 0)
      operator delete(__p);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v21 = (void *)*((_QWORD *)a1 + 28);
    v20 = (std::__shared_weak_count *)*((_QWORD *)a1 + 29);
    __p = v21;
    v41 = v20;
    if (v20)
    {
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v23 = __ldxr(p_shared_owners);
      while (__stxr(v23 + 1, p_shared_owners));
    }
    v24 = *(_DWORD *)(*((_QWORD *)a1 + 22) + 40);
    v25 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)a1 + 176))(a1);
    memset(&v43, 0, sizeof(v43));
    if (*((char *)a1 + 215) < 0)
      std::string::__init_copy_ctor_external(&v43, *((const std::string::value_type **)a1 + 24), *((_QWORD *)a1 + 25));
    else
      v43 = *(std::string *)((_BYTE *)a1 + 8);
    v26 = *((_QWORD *)a1 + 30);
    v35[0] = MEMORY[0x1E0C809B0];
    v35[1] = 1174405120;
    v35[2] = ___ZN20MediaSessionHandover11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke;
    v35[3] = &__block_descriptor_tmp_15_0;
    v35[4] = v21;
    v36 = v20;
    if (v20)
    {
      v27 = (unint64_t *)&v20->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
    }
    v37 = v25;
    v39 = v24;
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v38, v43.__r_.__value_.__l.__data_, v43.__r_.__value_.__l.__size_);
    else
      v38 = v43;
    dispatch_async(v26, v35);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    v29 = v36;
    if (v36)
    {
      v30 = (unint64_t *)&v36->__shared_owners_;
      do
        v31 = __ldaxr(v30);
      while (__stlxr(v31 - 1, v30));
      if (!v31)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
    }
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    v32 = v41;
    if (v41)
    {
      v33 = (unint64_t *)&v41->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
    return;
  }
  if (!a2[23])
    goto LABEL_33;
  v14 = a2;
  v15 = a2[23];
  while (*v14 == *v13)
  {
    ++v14;
    ++v13;
    if (!--v15)
      goto LABEL_33;
  }
LABEL_22:
  v16 = *((unsigned __int8 *)a1 + 503);
  v17 = (char)v16;
  if ((v16 & 0x80u) != 0)
    v16 = *((_QWORD *)a1 + 61);
  if (v10 != v16)
    return;
  if (v17 >= 0)
    v18 = (unsigned __int8 *)a1 + 480;
  else
    v18 = (unsigned __int8 *)*((_QWORD *)a1 + 60);
  if ((v8 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a2, v18, v9))
      return;
LABEL_43:
    MediaSessionHandover::completeDelayedStackSwitch(a1);
    return;
  }
  if (!(_DWORD)v8)
    goto LABEL_43;
  while (*a2 == *v18)
  {
    ++a2;
    ++v18;
    if (!--v8)
      goto LABEL_43;
  }
}

void sub_1BEF14A60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;
  uint64_t v26;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v25);
  if (*(char *)(v26 - 57) < 0)
    operator delete(*(void **)(v26 - 80));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20MediaSessionHandover11handleTimerERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE_block_invoke(uint64_t a1)
{
  RTPManager::handoverComplete(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), 10, *(_DWORD *)(a1 + 80), (unsigned __int8 *)(a1 + 56));
  return (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 32) + 104))(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 48), 10);
}

void __copy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10RTPManagerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  std::string *v5;
  __int128 v6;

  v2 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 40) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  v5 = (std::string *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 56), *(_QWORD *)(a2 + 64));
  }
  else
  {
    v6 = *(_OWORD *)(a2 + 56);
    v5->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 72);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
}

void sub_1BEF14B84(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __destroy_helper_block_e8_32c38_ZTSNSt3__110shared_ptrI10RTPManagerEE56c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  return std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 32);
}

void MediaSessionHandover::completeDelayedStackSwitch(MediaSessionHandover *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  size_t v5;
  RTPManager *v6;
  uint64_t v7;
  uint64_t v8;
  RTPManager *v9;
  uint64_t v10;
  uint64_t v11;
  RTPManager *v12;
  uint64_t v13;
  RTPManager *v14;
  uint64_t v15;
  uint64_t v16;
  RTPManager *v17;
  uint64_t v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  void *__p;
  std::__shared_weak_count *v32;
  char v33;
  void *v34[2];
  char v35;
  void *v36[2];
  char v37;

  std::string::basic_string[abi:ne180100]<0>(v36, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v34, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)v36, (uint64_t)v34);
  if (!this)
    __cxa_bad_typeid();
  v3 = v2;
  v4 = *(_QWORD **)(v2 + 8);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"completeDelayedStackSwitch", 26);
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" [sessionId()=", 14);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" direction=", 11);
  *(_BYTE *)(v3 + 17) = 0;
  ims::toString<MediaDirection>((unsigned int *)this + 127, &__p);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v3 + 32))(v3, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" start?=", 8);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v33 < 0)
    operator delete(__p);
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  __p = 0;
  v32 = 0;
  v6 = (RTPManager *)*((_QWORD *)this + 28);
  v7 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  RTPManager::addressForSession(v6, v7, &__p);
  v8 = *((_QWORD *)this + 58);
  v9 = (RTPManager *)*((_QWORD *)this + 28);
  v10 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  v11 = RTPManager::sessionMobileOriginated(v9, v10);
  v12 = (RTPManager *)*((_QWORD *)this + 28);
  v13 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  RTPManager::interfaceForSession(v12, v13, v36);
  v14 = (RTPManager *)*((_QWORD *)this + 28);
  v15 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  RTPManager::awdCallIdForSession(v14, v15, v34);
  v16 = *((unsigned int *)this + 127);
  v17 = (RTPManager *)*((_QWORD *)this + 28);
  v18 = (*(uint64_t (**)(MediaSessionHandover *))(*(_QWORD *)this + 176))(this);
  RTPManager::sdpSessionForSession(v17, v18, &v27);
  v29 = v27;
  v30 = v28;
  if (v28)
  {
    p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v20 = __ldxr(p_shared_weak_owners);
    while (__stxr(v20 + 1, p_shared_weak_owners));
  }
  (*(void (**)(uint64_t, void **, uint64_t, void **, void **, uint64_t, uint64_t *))(*(_QWORD *)v8 + 16))(v8, &__p, v11, v36, v34, v16, &v29);
  if (v30)
    std::__shared_weak_count::__release_weak(v30);
  v21 = v28;
  if (v28)
  {
    p_shared_owners = (unint64_t *)&v28->__shared_owners_;
    do
      v23 = __ldaxr(p_shared_owners);
    while (__stlxr(v23 - 1, p_shared_owners));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  if (v35 < 0)
    operator delete(v34[0]);
  if (v37 < 0)
    operator delete(v36[0]);
  (*(void (**)(_QWORD, char *, _QWORD))(**((_QWORD **)this + 58) + 48))(*((_QWORD *)this + 58), (char *)this + 508, 0);
  if (*((_BYTE *)this + 512))
    (*(void (**)(_QWORD, _QWORD))(**((_QWORD **)this + 58) + 32))(*((_QWORD *)this + 58), 0);
  v24 = v32;
  if (v32)
  {
    v25 = (unint64_t *)&v32->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
}

void sub_1BEF14F8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  uint64_t v25;

  if (a13)
    std::__shared_weak_count::__release_weak(a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  if (a25 < 0)
    operator delete(__p);
  if (*(char *)(v25 - 49) < 0)
    operator delete(*(void **)(v25 - 72));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void MediaSessionHandover::handleMediaSessionInitialized(MediaSessionHandover *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned int v18;
  std::__shared_weak_count *v19;
  void *v20;
  unint64_t *p_shared_weak_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  void *__p[2];
  char v30;
  void *v31[2];
  char v32;
  void *v33[2];
  char v34;

  std::string::basic_string[abi:ne180100]<0>(v33, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(v31, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v33, (uint64_t)v31);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaSessionInitialized", 29);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"[session=", 9);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error=", 7);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" _handoverState=", 16);
  *(_BYTE *)(v7 + 17) = 0;
  MediaSessionHandover::nameForHandoverState(__p, *((_DWORD *)a1 + 54));
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v7 + 32))(v7, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" _sessionConfigured=", 20);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v30 < 0)
    operator delete(__p[0]);
  if (v32 < 0)
    operator delete(v31[0]);
  if (v34 < 0)
    operator delete(v33[0]);
  v10 = *((_DWORD *)a1 + 54);
  if (v10 == 1)
  {
    (*(void (**)(MediaSessionHandover *, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0);
    return;
  }
  if ((_DWORD)a3 || !v10)
  {
    v11 = *((_QWORD *)a1 + 28);
    v12 = (std::__shared_weak_count *)a2[1];
    v27 = *a2;
    v28 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v11 + 56))(v11, &v27, a3);
    v15 = v28;
    if (v28)
    {
      v16 = (unint64_t *)&v28->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  if (*((_DWORD *)a1 + 54))
  {
    if (!*((_BYTE *)a1 + 440) || !*((_BYTE *)a1 + 441))
    {
      MediaSessionHandover::handoverComplete((uint64_t)a1, 0);
      if (*((_DWORD *)a1 + 54) == 4)
        v18 = 5;
      else
        v18 = 3;
      MediaSessionHandover::setHandoverState((uint64_t)a1, v18);
    }
    return;
  }
  v19 = (std::__shared_weak_count *)*((_QWORD *)a1 + 18);
  if (!v19)
    return;
  v20 = (void *)*((_QWORD *)a1 + 17);
  p_shared_weak_owners = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v22 = __ldxr(p_shared_weak_owners);
  while (__stxr(v22 + 1, p_shared_weak_owners));
  v23 = std::__shared_weak_count::lock(v19);
  v33[1] = v23;
  if (!v23)
  {
    v24 = v19;
    goto LABEL_39;
  }
  v24 = v23;
  v33[0] = v20;
  std::__shared_weak_count::__release_weak(v19);
  if (v20 && ((*(uint64_t (**)(void *))(*(_QWORD *)v20 + 72))(v20) & 1) == 0)
    MediaSessionHandover::createNewSession(a1);
  v25 = (unint64_t *)&v24->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
LABEL_39:
    std::__shared_weak_count::__release_weak(v24);
  }
}

void sub_1BEF153C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  _Unwind_Resume(a1);
}

_QWORD *MediaSessionHandover::nameForHandoverState(_QWORD *a1, unsigned int a2)
{
  char *v2;

  if (a2 > 5)
    v2 = "Unknown";
  else
    v2 = off_1E78C6400[a2];
  return std::string::basic_string[abi:ne180100]<0>(a1, v2);
}

void MediaSessionHandover::setHandoverState(uint64_t a1, unsigned int a2)
{
  uint64_t v4;
  size_t v5;
  uint64_t v6;
  size_t v7;
  void *v8[2];
  char v9;
  void *v10[2];
  char v11;
  void *__p[2];
  char v13;
  void *v14[2];
  char v15;

  std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)__p);
  v5 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v5);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"setHandoverState", 16);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" [oldState=", 11);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" newState=", 10);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  if (v13 < 0)
    operator delete(__p[0]);
  if (v15 < 0)
    operator delete(v14[0]);
  if (*(_DWORD *)(a1 + 216) != a2)
  {
    std::string::basic_string[abi:ne180100]<0>(v14, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::info(ims::_logger, (uint64_t)v14, (uint64_t)__p);
    v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"::", 2);
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"setHandoverState", 16);
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" Handover state changed from ", 29);
    *(_BYTE *)(v6 + 17) = 0;
    MediaSessionHandover::nameForHandoverState(v10, *(_DWORD *)(a1 + 216));
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v10);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" to ", 4);
    *(_BYTE *)(v6 + 17) = 0;
    MediaSessionHandover::nameForHandoverState(v8, a2);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v8);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v9 < 0)
      operator delete(v8[0]);
    if (v11 < 0)
      operator delete(v10[0]);
    if (v13 < 0)
      operator delete(__p[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    *(_DWORD *)(a1 + 216) = a2;
  }
}

void sub_1BEF1575C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a20 < 0)
    operator delete(__p);
  if (a26 < 0)
    operator delete(a21);
  if (a32 < 0)
    operator delete(a27);
  _Unwind_Resume(exception_object);
}

void MediaSessionHandover::createNewSession(MediaSessionHandover *this)
{
  uint64_t v2;
  size_t v3;
  std::__shared_weak_count *v4;
  std::string::size_type v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  _QWORD *v8;
  std::__shared_weak_count *size;
  unint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  int v13;
  _BYTE *v14;
  uint64_t v15;
  size_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  const void *v22;
  MediaSessionStateMachine *v23;
  MediaSessionStateMachine *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  int v28;
  uint64_t v29;
  size_t v30;
  char v31;
  uint64_t v32;
  size_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  NSObject *v43;
  _QWORD *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  std::__shared_weak_count *v53;
  ImsPrefs *v54;
  void **UseRTPDetectionAutoStartKey;
  void *v56;
  int v57;
  unint64_t *v58;
  unint64_t v59;
  const void *v60;
  _BYTE *v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  MediaSessionStateMachine *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  int v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *v82;
  unint64_t v83;
  std::string::size_type v84;
  int v85;
  int v86;
  unint64_t *v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  unint64_t *v96;
  std::__shared_weak_count *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  size_t v102;
  unsigned int v103;
  std::string *v104;
  std::string::size_type v105;
  char v106;
  uint64_t v107;
  uint64_t v108;
  std::__shared_weak_count *v109;
  std::string::size_type v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  std::string *v115;
  std::string *p_p;
  uint64_t v117;
  const void *v118;
  uint64_t v119;
  const char *v120;
  size_t v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  BOOL v128;
  int v129;
  uint64_t v130;
  std::__shared_weak_count *v131;
  uint64_t v132;
  std::__shared_weak_count *v133;
  uint64_t v134;
  std::__shared_weak_count *v135;
  dispatch_object_t object;
  std::__shared_weak_count *v137;
  const void *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  uint64_t v142;
  std::__shared_weak_count *v143;
  MediaSessionStateMachine *v144;
  std::__shared_weak_count *v145;
  uint64_t v146;
  std::__shared_weak_count *v147;
  std::string __p;
  std::string *v149;
  __int128 v150;
  char v151;
  uint64_t v152;

  v152 = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(&v150, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
  v3 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v3);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v2 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"createNewSession", 16);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v151 < 0)
    operator delete((void *)v150);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v146 = 0;
  v147 = 0;
  RTPManager::sdpSessionForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &v146);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 18);
  if (v4)
  {
    v5 = *((_QWORD *)this + 17);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    __p.__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)std::__shared_weak_count::lock(v4);
    if (__p.__r_.__value_.__l.__size_)
      __p.__r_.__value_.__r.__words[0] = v5;
  }
  else
  {
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  }
  v8 = (_QWORD *)((char *)this + 448);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 448, (__int128 *)&__p);
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v10 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  MediaSessionHandover::setHandoverState((uint64_t)this, 2u);
  v12 = (_BYTE *)v146;
  if (v146)
  {
    v13 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 104))(*v8);
    if (v13 == 2)
    {
      if (v12[584])
      {
        v14 = v12 + 152;
        goto LABEL_36;
      }
    }
    else if (v13 == 6 && v12[1856])
    {
      v14 = v12 + 1496;
      goto LABEL_36;
    }
    v21 = v12[1328];
    if (!v21)
    {
LABEL_37:
      *((_BYTE *)this + 440) = v21;
      v22 = (const void *)*((_QWORD *)this + 56);
      if (v22
      {
        v24 = v23;
        v25 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
        v144 = v23;
        v145 = v25;
        if (v25)
        {
          p_shared_owners = (unint64_t *)&v25->__shared_owners_;
          do
            v27 = __ldxr(p_shared_owners);
          while (__stxr(v27 + 1, p_shared_owners));
        }
        v28 = (*(uint64_t (**)(MediaSessionStateMachine *))(*(_QWORD *)v23 + 240))(v23) ^ 1;
      }
      else
      {
        v24 = 0;
        v28 = 0;
        v144 = 0;
        v145 = 0;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
      std::string::basic_string[abi:ne180100]<0>(&v150, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v29 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
      v30 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v30);
      *(_BYTE *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"::", 2);
      *(_BYTE *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"createNewSession", 16);
      *(_BYTE *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" [isAutoStart=", 14);
      *(_BYTE *)(v29 + 17) = 0;
      if (*((_BYTE *)v24 + 301) && *((_BYTE *)v24 + 302))
        (*(void (**)(MediaSessionStateMachine *))(*(_QWORD *)v24 + 144))(v24);
      std::ostream::operator<<();
      *(_BYTE *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" oldSessionActive=", 18);
      *(_BYTE *)(v29 + 17) = 0;
      (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 80))(*v8);
      std::ostream::operator<<();
      *(_BYTE *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)" isDelayedStart=", 16);
      *(_BYTE *)(v29 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v29 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v29 + 8), (uint64_t)"]", 1);
      *(_BYTE *)(v29 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v29 + 64))(v29, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v29 + 17) = 0;
      if (v151 < 0)
        operator delete((void *)v150);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(__p.__r_.__value_.__l.__data_);
        if (!v28)
          goto LABEL_56;
      }
      else if (!v28)
      {
        goto LABEL_56;
      }
      if (!*((_BYTE *)v24 + 301)
        || !*((_BYTE *)v24 + 302)
        || (*(unsigned int (**)(MediaSessionStateMachine *))(*(_QWORD *)v24 + 144))(v24) != 2)
      {
        v31 = *((_BYTE *)v24 + 136) == 2;
LABEL_58:
        *((_BYTE *)this + 441) = v31;
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(&v150, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v32 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
        v33 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v33);
        *(_BYTE *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"createNewSession", 16);
        *(_BYTE *)(v32 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" creating new RTP session on destination stack", 46);
        *(_BYTE *)(v32 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v32 + 17) = 0;
        if (v151 < 0)
          operator delete((void *)v150);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v34 = *((_QWORD *)this + 22);
        RTPSharedPointerBase::getShared<MediaSessionHandover>((void **)&v150, (uint64_t)this);
        if ((_QWORD)v150)
          v35 = v150 + 160;
        else
          v35 = 0;
        v142 = v35;
        v143 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
        if (*((_QWORD *)&v150 + 1))
        {
          v36 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 16);
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        v38 = *((_QWORD *)this + 54);
        v140 = v146;
        v141 = v147;
        if (v147)
        {
          v39 = (unint64_t *)&v147->__shared_weak_owners_;
          do
            v40 = __ldxr(v39);
          while (__stxr(v40 + 1, v39));
        }
        v41 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 104))(*v8);
        v42 = *v8;
        v43 = *(NSObject **)(*v8 + 48);
        object = v43;
        if (v43)
          dispatch_retain(v43);
        (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t *, uint64_t, uint64_t *, uint64_t, uint64_t, dispatch_object_t *))(*(_QWORD *)v34 + 40))(&__p, v34, &v142, v38, &v140, v41, v42 + 56, &object);
        v44 = (_QWORD *)((char *)this + 464);
        std::shared_ptr<MediaSessionInterface>::operator=[abi:ne180100]<MediaSessionStateMachine,void>((uint64_t *)this + 58, &__p);
        v45 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v46 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        if (object)
          dispatch_release(object);
        if (v141)
          std::__shared_weak_count::__release_weak(v141);
        if (v143)
          std::__shared_weak_count::__release_weak(v143);
        v48 = (std::__shared_weak_count *)*((_QWORD *)&v150 + 1);
        if (*((_QWORD *)&v150 + 1))
        {
          v49 = (unint64_t *)(*((_QWORD *)&v150 + 1) + 8);
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        v51 = v146;
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
        v52 = *(std::__shared_weak_count **)(v146 + 128);
        if (v52)
        {
          v52 = std::__shared_weak_count::lock(v52);
          v53 = v52;
          __p.__r_.__value_.__l.__size_ = (std::string::size_type)v52;
          if (v52)
          {
            v52 = *(std::__shared_weak_count **)(v51 + 120);
            __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v52;
          }
        }
        else
        {
          v53 = 0;
        }
        v54 = (ImsPrefs *)SipStack::prefs((SipStack *)v52);
        UseRTPDetectionAutoStartKey = (void **)ImsPrefs::getUseRTPDetectionAutoStartKey(v54);
        v56 = ImsPrefs::prefWithKey(v54, UseRTPDetectionAutoStartKey);
        if (v56)
        {
          v57 = (*(uint64_t (**)(void *))(*(_QWORD *)v56 + 40))(v56);
          if (!v53)
            goto LABEL_101;
        }
        else
        {
          v57 = *((_BYTE *)UseRTPDetectionAutoStartKey + 57) != 0;
          if (!v53)
            goto LABEL_101;
        }
        v58 = (unint64_t *)&v53->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (!v59)
        {
          ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
          std::__shared_weak_count::__release_weak(v53);
        }
LABEL_101:
        v60 = (const void *)*v44;
        if (v57)
        {
          if (v60)
          {
            if (v61)
            {
              v62 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
              __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
              __p.__r_.__value_.__l.__size_ = (std::string::size_type)v62;
              if (v62)
              {
                v63 = (unint64_t *)&v62->__shared_owners_;
                do
                  v64 = __ldxr(v63);
                while (__stxr(v64 + 1, v63));
              }
              v61[316] = MediaSessionStateMachine::startConditionsMet(v144);
              if (v62)
              {
                v65 = (unint64_t *)&v62->__shared_owners_;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if (!v66)
                {
                  ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
                  std::__shared_weak_count::__release_weak(v62);
                }
              }
            }
          }
          v60 = (const void *)*v44;
        }
        v67 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
        v138 = v60;
        v139 = v67;
        if (v67)
        {
          v68 = (unint64_t *)&v67->__shared_weak_owners_;
          do
            v69 = __ldxr(v68);
          while (__stxr(v69 + 1, v68));
        }
        MediaSessionQueue::setQueuedInterface(this, (uint64_t *)&v138);
        if (v139)
          std::__shared_weak_count::__release_weak(v139);
        v70 = v144;
        if (*((_BYTE *)v144 + 301)
          && *((_BYTE *)v144 + 302)
          && (*(unsigned int (**)(MediaSessionStateMachine *))(*(_QWORD *)v144 + 144))(v144) == 2
          && (!*((_BYTE *)v70 + 301)
           || !*((_BYTE *)v70 + 302)
           || (*(unsigned int (**)(MediaSessionStateMachine *))(*(_QWORD *)v70 + 144))(v70) != 2
           || !*((_BYTE *)this + 441)))
        {
          goto LABEL_217;
        }
        if (*(_DWORD *)(*((_QWORD *)this + 22) + 40) == 1)
        {
          object = 0;
          v137 = 0;
          RTPManager::addressForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &object);
          v71 = *((_QWORD *)this + 58);
          v72 = RTPManager::sessionMobileOriginated(*((RTPManager **)this + 28), *((_QWORD *)this + 54));
          RTPManager::interfaceForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &__p);
          RTPManager::awdCallIdForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &v150);
          v73 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 96))(*v8);
          v134 = v146;
          v135 = v147;
          if (v147)
          {
            v74 = (unint64_t *)&v147->__shared_weak_owners_;
            do
              v75 = __ldxr(v74);
            while (__stxr(v75 + 1, v74));
          }
          (*(void (**)(uint64_t, dispatch_object_t *, uint64_t, std::string *, __int128 *, uint64_t, uint64_t *))(*(_QWORD *)v71 + 16))(v71, &object, v72, &__p, &v150, v73, &v134);
          if (v135)
            std::__shared_weak_count::__release_weak(v135);
          if (v151 < 0)
            operator delete((void *)v150);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v76 = v137;
          if (!v137)
            goto LABEL_217;
          v77 = (unint64_t *)&v137->__shared_owners_;
          do
            v78 = __ldaxr(v77);
          while (__stlxr(v78 - 1, v77));
LABEL_169:
          if (!v78)
          {
            ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
            v97 = v76;
LABEL_216:
            std::__shared_weak_count::__release_weak(v97);
            goto LABEL_217;
          }
          goto LABEL_217;
        }
        v79 = *((unsigned __int8 *)this + 441);
        v81 = *((_QWORD *)this + 56);
        v80 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
        v132 = v81;
        v133 = v80;
        if (v80)
        {
          v82 = (unint64_t *)&v80->__shared_owners_;
          do
            v83 = __ldxr(v82);
          while (__stxr(v83 + 1, v82));
        }
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 28) + 168)
                                                                           + 80))(&__p, *(_QWORD *)(*((_QWORD *)this + 28) + 168), v81 + 56);
        v84 = __p.__r_.__value_.__r.__words[2];
        std::__list_imp<unsigned long long>::clear(&__p);
        if (v84 == 1)
          goto LABEL_143;
        (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 28) + 168)
                                                                           + 80))(&__p, *(_QWORD *)(*((_QWORD *)this + 28) + 168), v81 + 56);
        v98 = __p.__r_.__value_.__r.__words[2];
        std::__list_imp<unsigned long long>::clear(&__p);
        if (v98 < 3)
        {
          if (!v79 && !(*(unsigned int (**)(uint64_t))(*(_QWORD *)v81 + 88))(v81))
            goto LABEL_143;
        }
        else
        {
          if (!v79)
          {
            v86 = 0;
            v85 = 2;
            goto LABEL_144;
          }
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 88))(v81) & 1) != 0)
            goto LABEL_143;
          if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 88))(v81) & 1) == 0)
          {
LABEL_188:
            v86 = 0;
            v85 = 1;
            goto LABEL_144;
          }
        }
        if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v81 + 88))(v81) & 1) == 0)
        {
          (*(void (**)(std::string *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(*((_QWORD *)this + 28)
                                                                                           + 168)
                                                                             + 80))(&__p, *(_QWORD *)(*((_QWORD *)this + 28) + 168), v81 + 56);
          v100 = __p.__r_.__value_.__r.__words[2];
          std::__list_imp<unsigned long long>::clear(&__p);
          if (v100 < 2 || RTPManager::sessionsThatCanChangeMediaStack(*((_QWORD *)this + 28)) != 1)
            goto LABEL_188;
        }
LABEL_143:
        v85 = 0;
        v86 = 1;
LABEL_144:
        if (v80)
        {
          v87 = (unint64_t *)&v80->__shared_owners_;
          do
            v88 = __ldaxr(v87);
          while (__stlxr(v88 - 1, v87));
          if (!v88)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(&v150, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v89 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)"Making a decision to init/config/start the session on BB stack [sessionId=", 74);
        *(_BYTE *)(v89 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v89 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)" switchingPriority=", 19);
        *(_BYTE *)(v89 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v89 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)" _sessionActive=", 16);
        *(_BYTE *)(v89 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v89 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)" paused=", 8);
        *(_BYTE *)(v89 + 17) = 0;
        (*(void (**)(_QWORD))(*(_QWORD *)*v8 + 88))(*v8);
        std::ostream::operator<<();
        *(_BYTE *)(v89 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v89 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v89 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v89 + 64))(v89, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v89 + 17) = 0;
        if (v151 < 0)
          operator delete((void *)v150);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if (v86)
            goto LABEL_153;
        }
        else if (v86)
        {
LABEL_153:
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
          std::string::basic_string[abi:ne180100]<0>(&v150, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v90 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v90 + 8), (uint64_t)"Switch stack immediately", 24);
          *(_BYTE *)(v90 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v90 + 64))(v90, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v90 + 17) = 0;
          if (v151 < 0)
            operator delete((void *)v150);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          object = 0;
          v137 = 0;
          RTPManager::addressForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &object);
          v91 = *((_QWORD *)this + 58);
          v92 = RTPManager::sessionMobileOriginated(*((RTPManager **)this + 28), *((_QWORD *)this + 54));
          RTPManager::interfaceForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &__p);
          RTPManager::awdCallIdForSession(*((RTPManager **)this + 28), *((_QWORD *)this + 54), &v150);
          v93 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 96))(*v8);
          v130 = v146;
          v131 = v147;
          if (v147)
          {
            v94 = (unint64_t *)&v147->__shared_weak_owners_;
            do
              v95 = __ldxr(v94);
            while (__stxr(v95 + 1, v94));
          }
          (*(void (**)(uint64_t, dispatch_object_t *, uint64_t, std::string *, __int128 *, uint64_t, uint64_t *))(*(_QWORD *)v91 + 16))(v91, &object, v92, &__p, &v150, v93, &v130);
          if (v131)
            std::__shared_weak_count::__release_weak(v131);
          if (v151 < 0)
            operator delete((void *)v150);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          v76 = v137;
          if (!v137)
            goto LABEL_217;
          v96 = (unint64_t *)&v137->__shared_owners_;
          do
            v78 = __ldaxr(v96);
          while (__stlxr(v78 - 1, v96));
          goto LABEL_169;
        }
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(&v150, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v99 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v99 + 8), (uint64_t)"Delay stack switching", 21);
        *(_BYTE *)(v99 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v99 + 64))(v99, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v99 + 17) = 0;
        if (v151 < 0)
          operator delete((void *)v150);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        v129 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 96))(*v8);
        if (*((_BYTE *)this + 441))
          v128 = *(_DWORD *)(*((_QWORD *)this + 22) + 40) == 2;
        else
          v128 = 0;
        object = (dispatch_object_t)*((_QWORD *)this + 54);
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(&v150, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v101 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
        v102 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v102);
        *(_BYTE *)(v101 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v101 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"startTimerForDelayedStackSwitch", 31);
        *(_BYTE *)(v101 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)" [sessionId=", 12);
        *(_BYTE *)(v101 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v101 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)" timeout=", 9);
        v103 = 1000 * v85;
        *(_BYTE *)(v101 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v101 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v101 + 8), (uint64_t)"]", 1);
        *(_BYTE *)(v101 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v101 + 64))(v101, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v101 + 17) = 0;
        if (v151 < 0)
          operator delete((void *)v150);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        ims::detail::to_string_impl<unsigned long long,std::integral_constant<BOOL,false>>::operator()(&__p);
        v104 = std::string::insert(&__p, 0, "DelayedStackSwitch timer for session ", 0x25uLL);
        v105 = v104->__r_.__value_.__r.__words[0];
        *(_QWORD *)&v150 = v104->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)&v150 + 7) = *(std::string::size_type *)((char *)&v104->__r_.__value_.__r.__words[1] + 7);
        v106 = HIBYTE(v104->__r_.__value_.__r.__words[2]);
        v104->__r_.__value_.__l.__size_ = 0;
        v104->__r_.__value_.__r.__words[2] = 0;
        v104->__r_.__value_.__r.__words[0] = 0;
        if (*((char *)this + 503) < 0)
          operator delete(*((void **)this + 60));
        v107 = v150;
        *((_QWORD *)this + 60) = v105;
        *((_QWORD *)this + 61) = v107;
        *(_QWORD *)((char *)this + 495) = *(_QWORD *)((char *)&v150 + 7);
        *((_BYTE *)this + 503) = v106;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)this + 33, (unsigned __int8 *)this + 480))
        {
          std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
          std::string::basic_string[abi:ne180100]<0>(&v150, "");
          pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
          v108 = ImsLogger::warn(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v108 + 8), (uint64_t)"Handover timer for [sessionId=", 30);
          *(_BYTE *)(v108 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v108 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v108 + 8), (uint64_t)"] already exists.", 17);
          *(_BYTE *)(v108 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v108 + 64))(v108, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v108 + 17) = 0;
          if (v151 < 0)
            operator delete((void *)v150);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_217;
        }
        *((_BYTE *)this + 504) = 1;
        *((_DWORD *)this + 127) = v129;
        *((_BYTE *)this + 512) = v128;
        v110 = *((_QWORD *)this + 1);
        v109 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
        if (v109)
        {
          v111 = (unint64_t *)&v109->__shared_weak_owners_;
          do
            v112 = __ldxr(v111);
          while (__stxr(v112 + 1, v111));
          do
            v113 = __ldxr(v111);
          while (__stxr(v113 + 1, v111));
          do
            v114 = __ldxr(v111);
          while (__stxr(v114 + 1, v111));
        }
        v149 = 0;
        v115 = (std::string *)operator new(0x20uLL);
        v115->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C6318;
        v115->__r_.__value_.__l.__size_ = (std::string::size_type)this;
        v115->__r_.__value_.__r.__words[2] = v110;
        v115[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v109;
        v149 = v115;
        SipTimerContainer::startTimer((_QWORD *)this + 32, (uint64_t)this + 480, (uint64_t)&__p, v103, 0);
        p_p = v149;
        if (v149 == &__p)
        {
          v117 = 4;
          p_p = &__p;
        }
        else
        {
          if (!v149)
            goto LABEL_214;
          v117 = 5;
        }
        (*(void (**)(void))(p_p->__r_.__value_.__r.__words[0] + 8 * v117))();
LABEL_214:
        if (v109)
        {
          std::__shared_weak_count::__release_weak(v109);
          v97 = v109;
          goto LABEL_216;
        }
LABEL_217:
        v118 = (const void *)*v44;
        LODWORD(__p.__r_.__value_.__l.__data_) = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 96))(*v8);
        (*(void (**)(const void *, std::string *, _QWORD))(*(_QWORD *)v118 + 48))(v118, &__p, 0);
        if (*((_BYTE *)this + 441) && *(_DWORD *)(*((_QWORD *)this + 22) + 40) == 2)
          (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v44 + 32))(*v44, 0);
        std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
        std::string::basic_string[abi:ne180100]<0>(&v150, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v119 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
        v120 = (const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL);
        v121 = strlen(v120);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)v120, v121);
        *(_BYTE *)(v119 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)"::", 2);
        *(_BYTE *)(v119 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)"createNewSession", 16);
        *(_BYTE *)(v119 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v119 + 8), (uint64_t)" terminating old session", 24);
        *(_BYTE *)(v119 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v119 + 64))(v119, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v119 + 17) = 0;
        if (v151 < 0)
          operator delete((void *)v150);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        (*(void (**)(_QWORD, _QWORD))(*(_QWORD *)*v8 + 24))(*v8, 0);
        v122 = v145;
        if (v145)
        {
          v123 = (unint64_t *)&v145->__shared_owners_;
          do
            v124 = __ldaxr(v123);
          while (__stlxr(v124 - 1, v123));
          if (!v124)
          {
            ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
            v20 = v122;
            goto LABEL_229;
          }
        }
        goto LABEL_230;
      }
LABEL_56:
      v31 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v8 + 80))(*v8);
      goto LABEL_58;
    }
    v14 = v12 + 1032;
LABEL_36:
    v21 = *((unsigned __int16 *)v14 + 15) != 255;
    goto LABEL_37;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(&v150, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v15 = ImsLogger::warn(ims::_logger, (uint64_t)&__p, (uint64_t)&v150);
  v16 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), *(_QWORD *)(*(_QWORD *)(*(_QWORD *)this - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v16);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"createNewSession", 16);
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" No SDP session found [sessionId=", 33);
  *(_BYTE *)(v15 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v15 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
  if (v151 < 0)
    operator delete((void *)v150);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  MediaSessionHandover::handoverComplete((uint64_t)this, 12);
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  *((_QWORD *)this + 56) = 0;
  *((_QWORD *)this + 57) = 0;
  if (v17)
  {
    v18 = (unint64_t *)&v17->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      v20 = v17;
LABEL_229:
      std::__shared_weak_count::__release_weak(v20);
    }
  }
LABEL_230:
  v125 = v147;
  if (v147)
  {
    v126 = (unint64_t *)&v147->__shared_owners_;
    do
      v127 = __ldaxr(v126);
    while (__stlxr(v127 - 1, v126));
    if (!v127)
    {
      ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
      std::__shared_weak_count::__release_weak(v125);
    }
  }
}

void sub_1BEF16DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, dispatch_object_t object, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,char a24,uint64_t a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,void **a34)
{
  std::__shared_weak_count *v34;
  void **v35;
  void **p_p;
  uint64_t v38;

  p_p = a34;
  if (a34 == v35)
  {
    v38 = 4;
    p_p = &__p;
  }
  else
  {
    if (!a34)
      goto LABEL_6;
    v38 = 5;
  }
  (*((void (**)(void))*p_p + v38))();
LABEL_6:
  if (v34)
  {
    std::__shared_weak_count::__release_weak(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionHandover::handleMediaSessionInitialized(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  MediaSessionHandover::handleMediaSessionInitialized((MediaSessionHandover *)(a1 - 160), a2, a3);
}

void MediaSessionHandover::handleMediaSessionTerminated(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  int v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  void *__p[2];
  char v25;
  void *v26[2];
  char v27;

  std::string::basic_string[abi:ne180100]<0>(v26, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v26, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaSessionTerminated", 28);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error=", 7);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v25 < 0)
    operator delete(__p[0]);
  if (v27 < 0)
    operator delete(v26[0]);
  v10 = *(_DWORD *)(a1 + 216);
  if (v10)
  {
    if (v10 == 1)
    {
      (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 32))(a1, 0);
      return;
    }
  }
  else
  {
    v11 = *(_QWORD *)(a1 + 224);
    v12 = (std::__shared_weak_count *)a2[1];
    v22 = *a2;
    v23 = v12;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v11 + 64))(v11, &v22, a3);
    v15 = v23;
    if (v23)
    {
      v16 = (unint64_t *)&v23->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    if (!*(_DWORD *)(a1 + 216))
    {
      MediaSessionHandover::handoverComplete(a1, 0);
      return;
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a1 + 176) + 40) == 1 && *(_QWORD *)(a1 + 464))
  {
    std::string::basic_string[abi:ne180100]<0>(v26, "rtp.handover");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v18 = ImsLogger::debug(ims::_logger, (uint64_t)v26, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"Making a decision to start the session on AVC stack [sessionId=", 63);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(_QWORD))(*(_QWORD *)*a2 + 176))(*a2);
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" _sessionActive=", 16);
    *(_BYTE *)(v18 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)" paused=", 8);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 464) + 88))(*(_QWORD *)(a1 + 464));
    std::ostream::operator<<();
    *(_BYTE *)(v18 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v18 + 8), (uint64_t)"]", 1);
    *(_BYTE *)(v18 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v18 + 17) = 0;
    if (v25 < 0)
      operator delete(__p[0]);
    if (v27 < 0)
      operator delete(v26[0]);
    (*(void (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 464) + 32))(*(_QWORD *)(a1 + 464), 0);
    if (!*(_BYTE *)(a1 + 441))
    {
      std::string::basic_string[abi:ne180100]<0>(v26, "rtp.handover");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v19 = ImsLogger::debug(ims::_logger, (uint64_t)v26, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Pausing inactive session", 24);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      if (v25 < 0)
        operator delete(__p[0]);
      if (v27 < 0)
        operator delete(v26[0]);
      v20 = *(_QWORD *)(a1 + 464);
      LODWORD(v26[0]) = 4;
      (*(void (**)(uint64_t, void **, _QWORD))(*(_QWORD *)v20 + 48))(v20, v26, 0);
    }
  }
  if (*(_DWORD *)(a1 + 216) == 3)
    v21 = 5;
  else
    v21 = 4;
  MediaSessionHandover::setHandoverState(a1, v21);
}

void sub_1BEF174FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'MediaSessionHandover::handleMediaSessionTerminated(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  MediaSessionHandover::handleMediaSessionTerminated(a1 - 160, a2, a3);
}

void MediaSessionHandover::handleMediaSessionConfigured(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;

  std::string::basic_string[abi:ne180100]<0>(v30, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaSessionConfigured", 28);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error=", 7);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((_DWORD)a3)
      goto LABEL_9;
  }
  else if ((_DWORD)a3)
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 216))
  {
LABEL_18:
    if (!*(_BYTE *)(a1 + 441))
    {
      MediaSessionHandover::handoverComplete(a1, 0);
      if (*(_DWORD *)(a1 + 216) == 4)
        v17 = 5;
      else
        v17 = 3;
      MediaSessionHandover::setHandoverState(a1, v17);
    }
    return;
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 224);
  v11 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 72))(v10, &v26, a3);
  v14 = v27;
  if (v27)
  {
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*(_DWORD *)(a1 + 216))
    goto LABEL_18;
  v18 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v18)
    return;
  v19 = *(void **)(a1 + 136);
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = std::__shared_weak_count::lock(v18);
  v30[1] = v22;
  if (!v22)
  {
    v23 = v18;
    goto LABEL_36;
  }
  v23 = v22;
  v30[0] = v19;
  std::__shared_weak_count::__release_weak(v18);
  if (v19 && ((*(uint64_t (**)(void *))(*(_QWORD *)v19 + 72))(v19) & 1) == 0)
    MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
LABEL_36:
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1BEF1784C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionHandover::handleMediaSessionConfigured(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  MediaSessionHandover::handleMediaSessionConfigured(a1 - 160, a2, a3);
}

void MediaSessionHandover::handleMediaSessionActivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unsigned int v17;
  std::__shared_weak_count *v18;
  void *v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *__p[2];
  char v29;
  void *v30[2];
  char v31;

  std::string::basic_string[abi:ne180100]<0>(v30, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v30, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaSessionActivated", 27);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error=", 7);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v29 < 0)
    operator delete(__p[0]);
  if (v31 < 0)
  {
    operator delete(v30[0]);
    if ((_DWORD)a3)
      goto LABEL_9;
  }
  else if ((_DWORD)a3)
  {
    goto LABEL_9;
  }
  if (*(_DWORD *)(a1 + 216))
  {
LABEL_18:
    MediaSessionHandover::handoverComplete(a1, 0);
    if (*(_DWORD *)(a1 + 216) == 4)
      v17 = 5;
    else
      v17 = 3;
    MediaSessionHandover::setHandoverState(a1, v17);
    return;
  }
LABEL_9:
  v10 = *(_QWORD *)(a1 + 224);
  v11 = (std::__shared_weak_count *)a2[1];
  v26 = *a2;
  v27 = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 80))(v10, &v26, a3);
  v14 = v27;
  if (v27)
  {
    v15 = (unint64_t *)&v27->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (*(_DWORD *)(a1 + 216))
    goto LABEL_18;
  v18 = *(std::__shared_weak_count **)(a1 + 144);
  if (!v18)
    return;
  v19 = *(void **)(a1 + 136);
  p_shared_weak_owners = (unint64_t *)&v18->__shared_weak_owners_;
  do
    v21 = __ldxr(p_shared_weak_owners);
  while (__stxr(v21 + 1, p_shared_weak_owners));
  v22 = std::__shared_weak_count::lock(v18);
  v30[1] = v22;
  if (!v22)
  {
    v23 = v18;
    goto LABEL_35;
  }
  v23 = v22;
  v30[0] = v19;
  std::__shared_weak_count::__release_weak(v18);
  if (v19 && ((*(uint64_t (**)(void *))(*(_QWORD *)v19 + 72))(v19) & 1) == 0)
    MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
  v24 = (unint64_t *)&v23->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
LABEL_35:
    std::__shared_weak_count::__release_weak(v23);
  }
}

void sub_1BEF17B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionHandover::handleMediaSessionActivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  MediaSessionHandover::handleMediaSessionActivated(a1 - 160, a2, a3);
}

void MediaSessionHandover::handleMediaSessionDeactivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  void *v18;
  unint64_t *p_shared_weak_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  void *__p[2];
  char v28;
  void *v29[2];
  char v30;

  std::string::basic_string[abi:ne180100]<0>(v29, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v29, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaSessionDeactivated", 29);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error=", 7);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v28 < 0)
    operator delete(__p[0]);
  if (v30 < 0)
    operator delete(v29[0]);
  if (!*(_DWORD *)(a1 + 216))
  {
    v10 = *(_QWORD *)(a1 + 224);
    v11 = (std::__shared_weak_count *)a2[1];
    v25 = *a2;
    v26 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 88))(v10, &v25, a3);
    v14 = v26;
    if (v26)
    {
      v15 = (unint64_t *)&v26->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v17 = *(std::__shared_weak_count **)(a1 + 144);
    if (v17)
    {
      v18 = *(void **)(a1 + 136);
      p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
      do
        v20 = __ldxr(p_shared_weak_owners);
      while (__stxr(v20 + 1, p_shared_weak_owners));
      v21 = std::__shared_weak_count::lock(v17);
      v29[1] = v21;
      if (!v21)
      {
        v22 = v17;
        goto LABEL_28;
      }
      v22 = v21;
      v29[0] = v18;
      std::__shared_weak_count::__release_weak(v17);
      if (v18 && ((*(uint64_t (**)(void *))(*(_QWORD *)v18 + 72))(v18) & 1) == 0)
        MediaSessionHandover::createNewSession((MediaSessionHandover *)a1);
      v23 = (unint64_t *)&v22->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
LABEL_28:
        std::__shared_weak_count::__release_weak(v22);
      }
    }
  }
}

void sub_1BEF17E94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionHandover::handleMediaSessionDeactivated(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  MediaSessionHandover::handleMediaSessionDeactivated(a1 - 160, a2, a3);
}

void MediaSessionHandover::handleMediaSessionMediaError(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  size_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  void *__p[2];
  char v20;
  void *v21[2];
  char v22;

  std::string::basic_string[abi:ne180100]<0>(v21, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)__p);
  if (!a1)
    __cxa_bad_typeid();
  v7 = v6;
  v8 = *(_QWORD **)(v6 + 8);
  v9 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, *(_QWORD *)(*(_QWORD *)(*a1 - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v9);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"handleMediaSessionMediaError", 28);
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" [session=", 10);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" error=", 7);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  if (v20 < 0)
    operator delete(__p[0]);
  if (v22 < 0)
    operator delete(v21[0]);
  if (*a2 == a1[58])
  {
    v10 = a1[28];
    v11 = (std::__shared_weak_count *)a2[1];
    v17 = *a2;
    v18 = v11;
    if (v11)
    {
      p_shared_owners = (unint64_t *)&v11->__shared_owners_;
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v10 + 96))(v10, &v17, a3);
    v14 = v18;
    if (v18)
    {
      v15 = (unint64_t *)&v18->__shared_owners_;
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    MediaSessionHandover::handoverComplete((uint64_t)a1, 9);
  }
}

void sub_1BEF18110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MediaSessionHandover::handleMediaSessionMediaError(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  MediaSessionHandover::handleMediaSessionMediaError((_QWORD *)(a1 - 160), a2, a3);
}

uint64_t *std::shared_ptr<MediaSessionInterface>::operator=[abi:ne180100]<MediaSessionStateMachine,void>(uint64_t *a1, _QWORD *a2)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v3 = a2[1];
  if (*a2)
    v4 = *a2 + 24;
  else
    v4 = 0;
  *a2 = 0;
  a2[1] = 0;
  v5 = (std::__shared_weak_count *)a1[1];
  *a1 = v4;
  a1[1] = v3;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  return a1;
}

void MediaSessionHandover::cancelTimerForDelayedStackSwitch(std::string *this, int a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  size_t v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  std::string::basic_string[abi:ne180100]<0>(v10, "rtp.handover");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v4 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
  if (!this)
    __cxa_bad_typeid();
  v5 = v4;
  v6 = *(_QWORD **)(v4 + 8);
  v7 = strlen((const char *)(*(_QWORD *)(*(_QWORD *)(this->__r_.__value_.__r.__words[0] - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL));
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, *(_QWORD *)(*(_QWORD *)(this->__r_.__value_.__r.__words[0] - 8) + 8) & 0x7FFFFFFFFFFFFFFFLL, v7);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"::", 2);
  *(_BYTE *)(v5 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"cancelTimerForDelayedStackSwitch", 32);
  *(_BYTE *)(v5 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v5 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
  SipTimerContainer::cancelTimer((SipTimerContainer *)&this[10].__r_.__value_.__r.__words[2], this + 20);
  this[21].__r_.__value_.__s.__data_[0] = 0;
  if (a2)
    MediaSessionHandover::completeDelayedStackSwitch((MediaSessionHandover *)this);
}

void sub_1BEF18314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t MediaSessionQueue::isAudioReady(std::__shared_weak_count **this)
{
  MediaSessionQueue *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  _BOOL4 v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v1 = (MediaSessionQueue *)this;
  v2 = this[18];
  if (v2 && (v3 = std::__shared_weak_count::lock(v2)) != 0)
  {
    v4 = v3;
    v5 = *((_QWORD *)v1 + 17);
    v6 = v5 == 0;
    if (v5)
      LODWORD(v1) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 120))(v5);
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v6 = 1;
  }
  return (v6 | v1) & 1;
}

void sub_1BEF183F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t MediaSessionHandover::sessionId(MediaSessionHandover *this)
{
  return *((_QWORD *)this + 54);
}

uint64_t MediaSessionQueue::size(MediaSessionQueue *this)
{
  return *((_QWORD *)this + 16);
}

uint64_t MediaSessionHandover::canChangeMediaStack(MediaSessionHandover *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 56);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
  else
    return 1;
}

void MediaSessionHandover::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "rtp.handover");
}

uint64_t `non-virtual thunk to'MediaSessionQueue::isAudioReady(std::__shared_weak_count **this)
{
  return MediaSessionQueue::isAudioReady(this - 3);
}

uint64_t `non-virtual thunk to'MediaSessionHandover::sessionId(MediaSessionHandover *this)
{
  return *((_QWORD *)this + 51);
}

uint64_t `non-virtual thunk to'MediaSessionHandover::canChangeMediaStack(MediaSessionHandover *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 53);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 184))(v1);
  else
    return 1;
}

void `non-virtual thunk to'MediaSessionHandover::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "rtp.handover");
}

uint64_t MediaSessionInterface::MediaSessionInterface(uint64_t a1, uint64_t a2, _QWORD *a3, __int128 *a4, dispatch_object_t *a5)
{
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string *v10;
  __int128 v11;

  *(_QWORD *)a1 = off_1E78BC870;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a2;
  v7 = a3[1];
  *(_QWORD *)(a1 + 32) = *a3;
  *(_QWORD *)(a1 + 40) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 48) = *a5;
  if (*a5)
    dispatch_retain(*a5);
  v10 = (std::string *)(a1 + 56);
  if (*((char *)a4 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v11 = *a4;
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a4 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_WORD *)(a1 + 80) = 1;
  return a1;
}

void sub_1BEF18528(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  NSObject *v4;
  std::__shared_weak_count *v5;

  v4 = *(NSObject **)(v1 + 48);
  if (v4)
    dispatch_release(v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2);
  v5 = *(std::__shared_weak_count **)(v1 + 16);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  _Unwind_Resume(a1);
}

void RTPSharedPointerBase::~RTPSharedPointerBase(RTPSharedPointerBase *this)
{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

{
  std::__shared_weak_count *v1;

  v1 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

void std::__list_imp<std::pair<MediaSessionQueue::Action,std::weak_ptr<MediaSessionInterface>>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        v6 = (std::__shared_weak_count *)v3[4];
        if (v6)
          std::__shared_weak_count::__release_weak(v6);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t ims::detail::to_string_impl<unsigned long long,std::integral_constant<BOOL,false>>::operator()(_QWORD *a1)
{
  uint64_t result;
  __int128 v3;
  __int128 v4;
  uint64_t v5;

  v5 = 0;
  v3 = 0u;
  v4 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v3, 1);
  std::ostream::operator<<();
  BYTE1(v4) = 0;
  result = std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v4 + 1) + 8, a1);
  *(_QWORD *)&v3 = &off_1E78D7A10;
  if ((_BYTE)v4)
  {
    result = *((_QWORD *)&v3 + 1);
    if (*((_QWORD *)&v3 + 1))
      return (*(uint64_t (**)(_QWORD))(**((_QWORD **)&v3 + 1) + 8))(*((_QWORD *)&v3 + 1));
  }
  return result;
}

void sub_1BEF186BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a11)
  {
    if (a10)
      (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C6298;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C6298;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C6298;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C6298;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 240))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF188D4(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MediaSessionHandover::startTimerForSessionHandover(void)::$_0,std::allocator<MediaSessionHandover::startTimerForSessionHandover(void)::$_0>,void ()(std::string &)>::target_type()
{
}

_QWORD *std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C6318;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C6318;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C6318;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C6318;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 240))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF18B3C(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0,std::allocator<MediaSessionHandover::startTimerForDelayedStackSwitch(unsigned long long,MediaDirection,BOOL,unsigned int)::$_0>,void ()(std::string &)>::target_type()
{
}

void `non-virtual thunk to'BambiTransferTargetParticipant::~BambiTransferTargetParticipant(BambiTransferTargetParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 8));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 16));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 24));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransferTargetParticipant *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void BambiTransferTargetParticipant::~BambiTransferTargetParticipant(BambiTransferTargetParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant(this);
  JUMPOUT(0x1C3B87100);
}

double BambiTransferTargetParticipant::refer@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;

  BambiCallParticipant::setState(a1, 6, 1);
  result = 0.0;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_QWORD *)a2 = &off_1E78B7238;
  *(_QWORD *)(a2 + 8) = &_bambiDomain;
  *(_DWORD *)(a2 + 16) = 0;
  return result;
}

_QWORD *BambiTransferTargetParticipant::logPrefix(BambiTransferTargetParticipant *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"TransferTargetParticipant: ", 27);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'BambiTransferTargetParticipant::logPrefix(BambiTransferTargetParticipant *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"TransferTargetParticipant: ", 27);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void `non-virtual thunk to'BambiTransfereeParticipant::~BambiTransfereeParticipant(BambiTransfereeParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 8));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 16));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 24));
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  BambiCallParticipant::~BambiCallParticipant((BambiTransfereeParticipant *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

void BambiTransfereeParticipant::~BambiTransfereeParticipant(BambiTransfereeParticipant *this)
{
  BambiCallParticipant::~BambiCallParticipant(this);
  JUMPOUT(0x1C3B87100);
}

void BambiTransfereeParticipant::handleSessionTerminationEvent(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;

  if (*(int *)(a1 + 240) >= 4)
  {
    v3 = *(std::__shared_weak_count **)(a1 + 152);
    if (v3)
    {
      v5 = std::__shared_weak_count::lock(v3);
      if (v5)
      {
        v6 = v5;
        if (a2)
        {
          v7 = *(_QWORD *)(a1 + 144);
          if (v7)
          {
            if (*(int *)(a2 + 40) <= 9)
            {
              v8 = *(std::__shared_weak_count **)(a2 + 24);
              if (v8)
              {
                v9 = *(_QWORD *)(a2 + 16);
                p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
                do
                  v11 = __ldxr(p_shared_weak_owners);
                while (__stxr(v11 + 1, p_shared_weak_owners));
                v12 = std::__shared_weak_count::lock(v8);
                if (v12)
                {
                  v13 = v12;
                  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
                  do
                    v15 = __ldaxr(p_shared_owners);
                  while (__stlxr(v15 - 1, p_shared_owners));
                  if (!v15)
                  {
                    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
                    std::__shared_weak_count::__release_weak(v13);
                  }
                  std::__shared_weak_count::__release_weak(v8);
                  if (v9 == v7 && *(_DWORD *)(v7 + 1808) <= 1u)
                    *(_DWORD *)(v7 + 1808) = 2;
                }
                else
                {
                  std::__shared_weak_count::__release_weak(v8);
                }
              }
            }
          }
        }
        v16 = (unint64_t *)&v6->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
  }
}

_QWORD *BambiTransfereeParticipant::logPrefix(BambiTransfereeParticipant *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"TransfereeParticipant: ", 23);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'BambiTransfereeParticipant::logPrefix(BambiTransfereeParticipant *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"TransfereeParticipant: ", 23);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

uint64_t BambiTransferHandler::BambiTransferHandler(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  std::string __p;
  std::string v12;

  *(_QWORD *)a1 = off_1E78C6A50;
  *(_QWORD *)(a1 + 8) = off_1E78C6A80;
  std::string::basic_string[abi:ne180100]<0>(&v12, "bambi.ect");
  v6 = *a2;
  if (*(char *)(*a2 + 4159) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v6 + 4136), *(_QWORD *)(v6 + 4144));
  else
    __p = *(std::string *)(v6 + 4136);
  ImsLogContainer::ImsLogContainer(a1 + 16, &v12, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 120) = &unk_1E78C69A0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)a1 = &off_1E78C68D0;
  *(_QWORD *)(a1 + 8) = &unk_1E78C6918;
  *(_QWORD *)(a1 + 16) = &unk_1E78C6940;
  *(_QWORD *)(a1 + 144) = *a2;
  v7 = a2[1];
  *(_QWORD *)(a1 + 152) = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 16);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  *(_QWORD *)(a1 + 168) = &off_1E78C6AA8;
  *(_QWORD *)(a1 + 160) = a3;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_QWORD *)(a1 + 208) = 0;
  *(_DWORD *)(a1 + 216) = 1065353216;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 272));
  *(_QWORD *)(a1 + 416) = 0;
  *(_QWORD *)(a1 + 424) = 0;
  *(_QWORD *)(a1 + 432) = 0;
  *(_QWORD *)(a1 + 376) = a1 + 120;
  return a1;
}

void sub_1BEF190F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void BambiTransferStateMachine::~BambiTransferStateMachine(BambiTransferStateMachine *this)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78C6AA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine((uint64_t)this);
}

{
  std::__shared_weak_count *v2;

  *(_QWORD *)this = &off_1E78C6AA8;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine((uint64_t)this);
  JUMPOUT(0x1C3B87100);
}

void BambiTransferHandler::constructStateMachine(BambiTransferHandler *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  char *v7;
  unint64_t *p_shared_weak_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  char v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  _QWORD *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  _QWORD *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  unint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  std::__shared_weak_count *v97;
  unint64_t *v98;
  unint64_t v99;
  unint64_t *p_shared_owners;
  unint64_t v101;
  uint64_t v102[2];
  uint64_t v103[2];
  std::string v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107[2];
  uint64_t v108;
  std::__shared_weak_count *v109;
  uint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  std::__shared_weak_count *v113;

  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v2)
    return;
  v3 = std::__shared_weak_count::lock(v2);
  v111 = v3;
  if (!v3)
    return;
  v110 = *((_QWORD *)this + 18);
  if (!v110)
  {
    v23 = v3;
LABEL_144:
    p_shared_owners = (unint64_t *)&v23->__shared_owners_;
    do
      v101 = __ldaxr(p_shared_owners);
    while (__stlxr(v101 - 1, p_shared_owners));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
    return;
  }
  v5 = *((_QWORD *)this + 16);
  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  v108 = v5;
  if (!v4 || (v6 = std::__shared_weak_count::lock(v4), (v109 = v6) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v7 = (char *)this + 168;
  p_shared_weak_owners = (unint64_t *)&v6->__shared_weak_owners_;
  do
    v9 = __ldxr(p_shared_weak_owners);
  while (__stxr(v9 + 1, p_shared_weak_owners));
  v10 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  *((_QWORD *)this + 32) = v5;
  *((_QWORD *)this + 33) = v6;
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  v11 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (!v11)
  {
    v16 = 0;
LABEL_25:
    v12 = 0;
    v22 = 1;
    goto LABEL_26;
  }
  v12 = *((_QWORD *)this + 16);
  v13 = (unint64_t *)&v11->__shared_weak_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v15 = std::__shared_weak_count::lock(v11);
  v16 = v15;
  if (!v15)
  {
    std::__shared_weak_count::__release_weak(v11);
    goto LABEL_25;
  }
  v17 = (unint64_t *)&v15->__shared_weak_owners_;
  do
    v18 = __ldxr(v17);
  while (__stxr(v18 + 1, v17));
  std::__shared_weak_count::__release_weak(v11);
  v19 = (unint64_t *)&v16->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  do
    v21 = __ldxr(v17);
  while (__stxr(v21 + 1, v17));
  v22 = 0;
LABEL_26:
  v24 = (std::__shared_weak_count *)*((_QWORD *)this + 31);
  *((_QWORD *)this + 30) = v12;
  *((_QWORD *)this + 31) = v16;
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if ((v22 & 1) == 0)
    std::__shared_weak_count::__release_weak(v16);
  if (*(char *)(v110 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v110 + 4136), *(_QWORD *)(v110 + 4144));
  else
    v104 = *(std::string *)(v110 + 4136);
  v26 = v108;
  v25 = v109;
  v27 = (std::__shared_weak_count *)operator new(0x160uLL);
  v28 = v27;
  v27->__shared_owners_ = 0;
  v29 = (unint64_t *)&v27->__shared_owners_;
  v27->__shared_weak_owners_ = 0;
  v27->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6CA8;
  v30 = &v27[1].__vftable;
  v112 = v26;
  v113 = v25;
  if (v25)
  {
    v31 = (unint64_t *)&v25->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  BambiTransferWaitingForHoldState::BambiTransferWaitingForHoldState((SipState *)&v27[1], &v112, &v104);
  if (v25)
  {
    v33 = (unint64_t *)&v25->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  v105 = (uint64_t)v30;
  v106 = (uint64_t)v28;
  shared_weak_owners = (std::__shared_weak_count *)v28[13].__shared_weak_owners_;
  if (shared_weak_owners)
  {
    if (shared_weak_owners->__shared_owners_ != -1)
      goto LABEL_54;
    do
      v36 = __ldxr(v29);
    while (__stxr(v36 + 1, v29));
    v37 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
    v28[13].__shared_owners_ = (uint64_t)v30;
    v28[13].__shared_weak_owners_ = (uint64_t)v28;
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  else
  {
    do
      v39 = __ldxr(v29);
    while (__stxr(v39 + 1, v29));
    v40 = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
    v28[13].__shared_owners_ = (uint64_t)v30;
    v28[13].__shared_weak_owners_ = (uint64_t)v28;
  }
  do
    v42 = __ldaxr(v29);
  while (__stlxr(v42 - 1, v29));
  if (!v42)
  {
    ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
    std::__shared_weak_count::__release_weak(v28);
  }
LABEL_54:
  v43 = (std::__shared_weak_count *)v106;
  v107[0] = v105;
  v107[1] = v106;
  v105 = 0;
  v106 = 0;
  SipTypedStateMachine<BambiTransferState>::addState((uint64_t)v7, v107);
  if (v43)
  {
    v44 = (unint64_t *)&v43->__shared_owners_;
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
  v46 = (std::__shared_weak_count *)v106;
  if (v106)
  {
    v47 = (unint64_t *)(v106 + 8);
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (*(char *)(v110 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v110 + 4136), *(_QWORD *)(v110 + 4144));
  else
    v104 = *(std::string *)(v110 + 4136);
  v50 = v108;
  v49 = v109;
  v51 = (std::__shared_weak_count *)operator new(0x160uLL);
  v52 = v51;
  v51->__shared_owners_ = 0;
  v53 = (unint64_t *)&v51->__shared_owners_;
  v51->__shared_weak_owners_ = 0;
  v51->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6CF8;
  v54 = &v51[1].__vftable;
  v112 = v50;
  v113 = v49;
  if (v49)
  {
    v55 = (unint64_t *)&v49->__shared_owners_;
    do
      v56 = __ldxr(v55);
    while (__stxr(v56 + 1, v55));
  }
  BambiTransferTransferRequestedState::BambiTransferTransferRequestedState((SipState *)&v51[1], &v112, &v104);
  if (v49)
  {
    v57 = (unint64_t *)&v49->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v105 = (uint64_t)v54;
  v106 = (uint64_t)v52;
  v59 = (std::__shared_weak_count *)v52[13].__shared_weak_owners_;
  if (v59)
  {
    if (v59->__shared_owners_ != -1)
      goto LABEL_90;
    do
      v60 = __ldxr(v53);
    while (__stxr(v60 + 1, v53));
    v61 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v62 = __ldxr(v61);
    while (__stxr(v62 + 1, v61));
    v52[13].__shared_owners_ = (uint64_t)v54;
    v52[13].__shared_weak_owners_ = (uint64_t)v52;
    std::__shared_weak_count::__release_weak(v59);
  }
  else
  {
    do
      v63 = __ldxr(v53);
    while (__stxr(v63 + 1, v53));
    v64 = (unint64_t *)&v52->__shared_weak_owners_;
    do
      v65 = __ldxr(v64);
    while (__stxr(v65 + 1, v64));
    v52[13].__shared_owners_ = (uint64_t)v54;
    v52[13].__shared_weak_owners_ = (uint64_t)v52;
  }
  do
    v66 = __ldaxr(v53);
  while (__stlxr(v66 - 1, v53));
  if (!v66)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
  }
LABEL_90:
  v67 = (std::__shared_weak_count *)v106;
  v103[0] = v105;
  v103[1] = v106;
  v105 = 0;
  v106 = 0;
  SipTypedStateMachine<BambiTransferState>::addState((uint64_t)v7, v103);
  if (v67)
  {
    v68 = (unint64_t *)&v67->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (std::__shared_weak_count *)v106;
  if (v106)
  {
    v71 = (unint64_t *)(v106 + 8);
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  if (*(char *)(v110 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v104, *(const std::string::value_type **)(v110 + 4136), *(_QWORD *)(v110 + 4144));
  else
    v104 = *(std::string *)(v110 + 4136);
  v74 = v108;
  v73 = v109;
  v75 = (std::__shared_weak_count *)operator new(0x160uLL);
  v76 = v75;
  v75->__shared_owners_ = 0;
  v77 = (unint64_t *)&v75->__shared_owners_;
  v75->__shared_weak_owners_ = 0;
  v75->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6D48;
  v78 = &v75[1].__vftable;
  v112 = v74;
  v113 = v73;
  if (v73)
  {
    v79 = (unint64_t *)&v73->__shared_owners_;
    do
      v80 = __ldxr(v79);
    while (__stxr(v80 + 1, v79));
  }
  BambiTransferTransferCompleteState::BambiTransferTransferCompleteState((SipState *)&v75[1], &v112, &v104);
  if (v73)
  {
    v81 = (unint64_t *)&v73->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
  v105 = (uint64_t)v78;
  v106 = (uint64_t)v76;
  v83 = (std::__shared_weak_count *)v76[13].__shared_weak_owners_;
  if (v83)
  {
    if (v83->__shared_owners_ != -1)
      goto LABEL_126;
    do
      v84 = __ldxr(v77);
    while (__stxr(v84 + 1, v77));
    v85 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v86 = __ldxr(v85);
    while (__stxr(v86 + 1, v85));
    v76[13].__shared_owners_ = (uint64_t)v78;
    v76[13].__shared_weak_owners_ = (uint64_t)v76;
    std::__shared_weak_count::__release_weak(v83);
  }
  else
  {
    do
      v87 = __ldxr(v77);
    while (__stxr(v87 + 1, v77));
    v88 = (unint64_t *)&v76->__shared_weak_owners_;
    do
      v89 = __ldxr(v88);
    while (__stxr(v89 + 1, v88));
    v76[13].__shared_owners_ = (uint64_t)v78;
    v76[13].__shared_weak_owners_ = (uint64_t)v76;
  }
  do
    v90 = __ldaxr(v77);
  while (__stlxr(v90 - 1, v77));
  if (!v90)
  {
    ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
    std::__shared_weak_count::__release_weak(v76);
  }
LABEL_126:
  v91 = (std::__shared_weak_count *)v106;
  v102[0] = v105;
  v102[1] = v106;
  v105 = 0;
  v106 = 0;
  SipTypedStateMachine<BambiTransferState>::addState((uint64_t)v7, v102);
  if (v91)
  {
    v92 = (unint64_t *)&v91->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
  v94 = (std::__shared_weak_count *)v106;
  if (v106)
  {
    v95 = (unint64_t *)(v106 + 8);
    do
      v96 = __ldaxr(v95);
    while (__stlxr(v96 - 1, v95));
    if (!v96)
    {
      ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
      std::__shared_weak_count::__release_weak(v94);
    }
  }
  if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v104.__r_.__value_.__l.__data_);
  v97 = v109;
  if (v109)
  {
    v98 = (unint64_t *)&v109->__shared_owners_;
    do
      v99 = __ldaxr(v98);
    while (__stlxr(v99 - 1, v98));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v97->__on_zero_shared)(v97);
      std::__shared_weak_count::__release_weak(v97);
    }
  }
  v23 = v111;
  if (v111)
    goto LABEL_144;
}

void sub_1BEF19964(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 80);
  _Unwind_Resume(a1);
}

void sub_1BEF19A14()
{
  JUMPOUT(0x1BEF19A04);
}

_QWORD *SipTypedStateMachine<BambiTransferState>::addState(uint64_t a1, uint64_t *a2)
{
  _QWORD *result;
  unsigned int v5;
  unsigned int v6;
  unint64_t v7;
  unint64_t v8;
  uint8x8_t v9;
  unint64_t v10;
  uint64_t **v11;
  uint64_t *i;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  float v16;
  float v17;
  _BOOL8 v18;
  unint64_t v19;
  unint64_t v20;
  int8x8_t prime;
  void *v22;
  void *v23;
  uint64_t v24;
  _QWORD *v25;
  unint64_t v26;
  uint8x8_t v27;
  unint64_t v28;
  uint8x8_t v29;
  uint64_t v30;
  _QWORD *v31;
  unint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  void *v36;
  _QWORD v37[3];

  result = (_QWORD *)*a2;
  if (!*a2)
    return result;
  v5 = (*(uint64_t (**)(_QWORD *))(*result + 48))(result);
  v6 = v5;
  v7 = v5;
  v8 = *(_QWORD *)(a1 + 24);
  if (v8)
  {
    v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      v10 = v5;
      if (v8 <= v5)
        v10 = v5 % v8;
    }
    else
    {
      v10 = ((_DWORD)v8 - 1) & v5;
    }
    v11 = *(uint64_t ***)(*(_QWORD *)(a1 + 16) + 8 * v10);
    if (v11)
    {
      for (i = *v11; i; i = (uint64_t *)*i)
      {
        v13 = i[1];
        if (v13 == v5)
        {
          if (*((_DWORD *)i + 4) == v5)
            return std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
        }
        else
        {
          if (v9.u32[0] > 1uLL)
          {
            if (v13 >= v8)
              v13 %= v8;
          }
          else
          {
            v13 &= v8 - 1;
          }
          if (v13 != v10)
            break;
        }
      }
    }
  }
  else
  {
    v10 = 0;
  }
  v14 = (_QWORD *)(a1 + 32);
  v37[2] = 1;
  v15 = operator new(0x28uLL);
  v37[0] = v15;
  v37[1] = a1 + 32;
  *v15 = 0;
  v15[1] = v7;
  *((_DWORD *)v15 + 4) = v6;
  v15[3] = 0;
  v15[4] = 0;
  v16 = (float)(unint64_t)(*(_QWORD *)(a1 + 40) + 1);
  v17 = *(float *)(a1 + 48);
  if (v8 && (float)(v17 * (float)v8) >= v16)
  {
    v7 = v10;
    goto LABEL_66;
  }
  v18 = 1;
  if (v8 >= 3)
    v18 = (v8 & (v8 - 1)) != 0;
  v19 = v18 | (2 * v8);
  v20 = vcvtps_u32_f32(v16 / v17);
  if (v19 <= v20)
    prime = (int8x8_t)v20;
  else
    prime = (int8x8_t)v19;
  if (*(_QWORD *)&prime == 1)
  {
    prime = (int8x8_t)2;
  }
  else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
  {
    prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    v8 = *(_QWORD *)(a1 + 24);
  }
  if (*(_QWORD *)&prime <= v8)
  {
    if (*(_QWORD *)&prime >= v8)
      goto LABEL_62;
    v28 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 40) / *(float *)(a1 + 48));
    if (v8 < 3 || (v29 = (uint8x8_t)vcnt_s8((int8x8_t)v8), v29.i16[0] = vaddlv_u8(v29), v29.u32[0] > 1uLL))
    {
      v28 = std::__next_prime(v28);
    }
    else
    {
      v30 = 1 << -(char)__clz(v28 - 1);
      if (v28 >= 2)
        v28 = v30;
    }
    if (*(_QWORD *)&prime <= v28)
      prime = (int8x8_t)v28;
    if (*(_QWORD *)&prime >= v8)
    {
      v8 = *(_QWORD *)(a1 + 24);
      goto LABEL_62;
    }
    if (!*(_QWORD *)&prime)
    {
      v36 = *(void **)(a1 + 16);
      *(_QWORD *)(a1 + 16) = 0;
      if (v36)
        operator delete(v36);
      v8 = 0;
      *(_QWORD *)(a1 + 24) = 0;
      goto LABEL_62;
    }
  }
  if (*(_QWORD *)&prime >> 61)
    std::__throw_bad_array_new_length[abi:ne180100]();
  v22 = operator new(8 * *(_QWORD *)&prime);
  v23 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = v22;
  if (v23)
    operator delete(v23);
  v24 = 0;
  *(int8x8_t *)(a1 + 24) = prime;
  do
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v24++) = 0;
  while (*(_QWORD *)&prime != v24);
  v25 = (_QWORD *)*v14;
  if (*v14)
  {
    v26 = v25[1];
    v27 = (uint8x8_t)vcnt_s8(prime);
    v27.i16[0] = vaddlv_u8(v27);
    if (v27.u32[0] > 1uLL)
    {
      if (v26 >= *(_QWORD *)&prime)
        v26 %= *(_QWORD *)&prime;
    }
    else
    {
      v26 &= *(_QWORD *)&prime - 1;
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v26) = v14;
    v31 = (_QWORD *)*v25;
    if (*v25)
    {
      do
      {
        v32 = v31[1];
        if (v27.u32[0] > 1uLL)
        {
          if (v32 >= *(_QWORD *)&prime)
            v32 %= *(_QWORD *)&prime;
        }
        else
        {
          v32 &= *(_QWORD *)&prime - 1;
        }
        if (v32 != v26)
        {
          v33 = *(_QWORD *)(a1 + 16);
          if (!*(_QWORD *)(v33 + 8 * v32))
          {
            *(_QWORD *)(v33 + 8 * v32) = v25;
            goto LABEL_58;
          }
          *v25 = *v31;
          *v31 = **(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v32);
          **(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v32) = v31;
          v31 = v25;
        }
        v32 = v26;
LABEL_58:
        v25 = v31;
        v31 = (_QWORD *)*v31;
        v26 = v32;
      }
      while (v31);
    }
  }
  v8 = (unint64_t)prime;
LABEL_62:
  if ((v8 & (v8 - 1)) != 0)
  {
    if (v8 <= v7)
      v7 %= v8;
  }
  else
  {
    v7 = ((_DWORD)v8 - 1) & v7;
  }
LABEL_66:
  v34 = *(_QWORD **)(*(_QWORD *)(a1 + 16) + 8 * v7);
  i = (uint64_t *)v37[0];
  if (v34)
  {
    *(_QWORD *)v37[0] = *v34;
  }
  else
  {
    *(_QWORD *)v37[0] = *(_QWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 32) = i;
    *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v7) = v14;
    if (!*i)
      goto LABEL_75;
    v35 = *(_QWORD *)(*i + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v35 >= v8)
        v35 %= v8;
    }
    else
    {
      v35 &= v8 - 1;
    }
    v34 = (_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * v35);
  }
  *v34 = i;
LABEL_75:
  v37[0] = 0;
  ++*(_QWORD *)(a1 + 40);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)v37);
  return std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](i + 3, *a2, a2[1]);
}

void sub_1BEF19E58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void BambiTransferHandler::create(_QWORD *a1@<X0>, uint64_t a2@<X1>, BambiTransferHandler **a3@<X8>)
{
  uint64_t v4;

  v4 = a2;
  *a3 = 0;
  a3[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiTransferHandler,std::allocator<BambiTransferHandler>,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,void>(a1, &v4, a3);
  BambiTransferHandler::constructStateMachine(*a3);
}

void sub_1BEF19EB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiTransferHandler::~BambiTransferHandler(BambiTransferHandler *this)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count *v9;

  *(_QWORD *)this = &off_1E78C68D0;
  *((_QWORD *)this + 1) = &unk_1E78C6918;
  *((_QWORD *)this + 2) = &unk_1E78C6940;
  v2 = (char *)this + 16;
  *((_QWORD *)this + 15) = &unk_1E78C69A0;
  v3 = ImsLogContainer::debugStream((BambiTransferHandler *)((char *)this + 16));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"BambiTransferHandler::~BambiTransferHandler", 43);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  BambiTransferHandler::removeParticipant(this, 0);
  BambiTransferHandler::removeParticipant(this, 1u);
  v4 = *((_QWORD *)this + 52);
  if (v4)
  {
    v5 = *((_QWORD *)this + 53);
    v6 = (void *)*((_QWORD *)this + 52);
    if (v5 != v4)
    {
      do
        v5 = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v5 - 16);
      while (v5 != v4);
      v6 = (void *)*((_QWORD *)this + 52);
    }
    *((_QWORD *)this + 53) = v4;
    operator delete(v6);
  }
  SipTimerContainer::~SipTimerContainer((BambiTransferHandler *)((char *)this + 272));
  *((_QWORD *)this + 21) = &off_1E78C6AA8;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 33);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine((uint64_t)this + 168);
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v8)
    std::__shared_weak_count::__release_weak(v8);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
  if (v9)
    std::__shared_weak_count::__release_weak(v9);
  *((_QWORD *)this + 2) = off_1E78CFE68;
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  BambiTransferHandler::~BambiTransferHandler(this);
  JUMPOUT(0x1C3B87100);
}

void BambiTransferHandler::removeParticipant(BambiTransferHandler *this, unsigned int a2)
{
  const char *v4;
  __int128 v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *p_shared_weak_owners;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;

  if (a2)
    v4 = "TransferTarget";
  else
    v4 = "Transferee";
  v5 = *(_OWORD *)(*((_QWORD *)this + 52) + 16 * a2);
  v26 = (std::__shared_weak_count *)*((_QWORD *)&v5 + 1);
  v6 = *(std::__shared_weak_count **)(*((_QWORD *)this + 52) + 16 * a2 + 8);
  if (*((_QWORD *)&v5 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v5 + 1) + 8);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  v9 = v5;
  if ((_QWORD)v5)
  {
    v10 = *(std::__shared_weak_count **)(v5 + 152);
    if (v10)
    {
      v11 = *(_QWORD *)(v5 + 144);
      p_shared_weak_owners = (unint64_t *)&v10->__shared_weak_owners_;
      do
        v13 = __ldxr(p_shared_weak_owners);
      while (__stxr(v13 + 1, p_shared_weak_owners));
      v25 = std::__shared_weak_count::lock(v10);
      if (v25)
      {
        std::__shared_weak_count::__release_weak(v10);
        if (!v11)
          goto LABEL_29;
        v14 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 2) + 16))((char *)this + 16, v14);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Removing ", 9);
        *(_BYTE *)(v14 + 17) = 0;
        if (a2)
          v15 = 14;
        else
          v15 = 10;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)v4, v15);
        *(_BYTE *)(v14 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" reference from call and transfer handler", 41);
        *(_BYTE *)(v14 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v14 + 17) = 0;
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v17 = __ldxr(p_shared_owners);
          while (__stxr(v17 + 1, p_shared_owners));
        }
        if (*(_QWORD *)(v11 + 1472) == v9)
          std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(v11 + 1472));
        if (!v6)
          goto LABEL_29;
        v18 = (unint64_t *)&v6->__shared_owners_;
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (v19)
          goto LABEL_29;
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        v20 = v6;
      }
      else
      {
        v20 = v10;
      }
      std::__shared_weak_count::__release_weak(v20);
    }
    else
    {
      v25 = 0;
    }
LABEL_29:
    if (v25)
    {
      v21 = (unint64_t *)&v25->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(*((_QWORD *)this + 52) + 16 * a2));
    v6 = v26;
  }
  if (v6)
  {
    v23 = (unint64_t *)&v6->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_1BEF1A298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiTransferHandler::~BambiTransferHandler(BambiTransferHandler *this)
{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 8));
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 16));
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 120));
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  BambiTransferHandler::~BambiTransferHandler((BambiTransferHandler *)((char *)this - 120));
  JUMPOUT(0x1C3B87100);
}

char *BambiTransferHandler::nameForStateId(BambiTransferHandler *this, unsigned int a2)
{
  unsigned int v2;

  if (a2 <= 4)
    v2 = a2;
  else
    v2 = 0;
  return &BambiTransferHandler::nameForStateIdconst::stateNames[24 * v2];
}

void BambiTransferHandler::handleParticipantStateChange(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  unint64_t v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  unsigned __int8 *v27;
  _BOOL4 v29;
  _QWORD *v30;
  int v31;
  uint64_t *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  std::string::size_type v35;
  unint64_t *p_shared_weak_owners;
  unint64_t v37;
  std::__shared_weak_count *v38;
  std::__shared_weak_count *v39;
  uint64_t v40;
  _BYTE *v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  std::string __p;
  uint64_t v49;
  std::__shared_weak_count *v50;
  void *v51[2];
  uint64_t v52;

  v51[0] = 0;
  v51[1] = 0;
  v52 = 0;
  if (**(_QWORD **)(a1 + 416) == *a2)
    v8 = "Transferee";
  else
    v8 = "TransferTarget";
  std::string::basic_string[abi:ne180100]<0>(v51, v8);
  v9 = a1 + 16;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 16) + 16))(a1 + 16, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"BambiTransferHandler::handleParticipantStateChange for ", 55);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v10 + 32))(v10, v51);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v10 + 17) = 0;
  v11 = *(_QWORD *)(a1 + 224);
  v12 = *(std::__shared_weak_count **)(a1 + 232);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (v15)
    {
      if (!v11)
        goto LABEL_30;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
      if (!v11)
        goto LABEL_30;
    }
    v11 = *(_QWORD *)(a1 + 224);
    v16 = *(_QWORD *)(a1 + 232);
    __p.__r_.__value_.__r.__words[0] = v11;
    __p.__r_.__value_.__l.__size_ = v16;
    if (v16)
    {
      v17 = (unint64_t *)(v16 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
  }
  else
  {
    if (!v11)
      goto LABEL_30;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(unint64_t *)(a1 + 224);
  }
  v19 = (std::__shared_weak_count *)a2[1];
  v49 = *a2;
  v50 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  (*(void (**)(std::string::size_type, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v11 + 72))(v11, &v49, a3, a4);
  v22 = v50;
  if (v50)
  {
    v23 = (unint64_t *)&v50->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (__p.__r_.__value_.__l.__size_)
  {
    v25 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)__p.__r_.__value_.__l.__size_ + 16))(__p.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)__p.__r_.__value_.__l.__size_);
    }
  }
LABEL_30:
  std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForHangup");
  v27 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 280), (unsigned __int8 *)&__p);
  v29 = (_DWORD)a4 == 7 && v27 != 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v29)
      goto LABEL_38;
LABEL_42:
    v32 = *(uint64_t **)(a1 + 416);
    if ((_DWORD)a3 == 6 && (_DWORD)a4 == 7 && v32[2] == *a2)
    {
      BambiTransferHandler::removeParticipant((BambiTransferHandler *)a1, 1u);
      goto LABEL_76;
    }
    v33 = *v32;
    if (!v33)
      goto LABEL_76;
    if (v33 != *a2)
      goto LABEL_76;
    v34 = *(std::__shared_weak_count **)(v33 + 152);
    if (!v34)
      goto LABEL_76;
    v35 = *(_QWORD *)(v33 + 144);
    p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
    do
      v37 = __ldxr(p_shared_weak_owners);
    while (__stxr(v37 + 1, p_shared_weak_owners));
    v38 = std::__shared_weak_count::lock(v34);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v38;
    if (!v38)
    {
      v39 = v34;
LABEL_75:
      std::__shared_weak_count::__release_weak(v39);
      goto LABEL_76;
    }
    v39 = v38;
    __p.__r_.__value_.__r.__words[0] = v35;
    std::__shared_weak_count::__release_weak(v34);
    if (v35)
    {
      switch((_DWORD)a4)
      {
        case 3:
          v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v45);
          v41 = (_BYTE *)ImsOutStream::operator<<(v45, "Transfer Initialized");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v42 = 1;
          goto LABEL_67;
        case 6:
          v42 = 2;
LABEL_69:
          if (*(_DWORD *)(v35 + 1808) <= 1u)
            *(_DWORD *)(v35 + 1808) = v42;
          break;
        case 0xA:
          v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(v9);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(v9, v40);
          v41 = (_BYTE *)ImsOutStream::operator<<(v40, "Transfer Failed");
          (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v41 + 64))(v41, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          v42 = 3;
LABEL_67:
          v41[17] = 0;
          goto LABEL_69;
      }
    }
    v46 = (unint64_t *)&v39->__shared_owners_;
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (v47)
      goto LABEL_76;
    ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
    goto LABEL_75;
  }
  if (!v29)
    goto LABEL_42;
LABEL_38:
  v30 = *(_QWORD **)(a1 + 416);
  if (!*v30 || *v30 == *a2)
  {
    BambiTransferHandler::removeParticipant((BambiTransferHandler *)a1, 0);
    v30 = *(_QWORD **)(a1 + 416);
    v31 = 1;
  }
  else
  {
    v31 = 0;
  }
  v43 = v30[2];
  if (!v43 || v43 == *a2)
  {
    BambiTransferHandler::removeParticipant((BambiTransferHandler *)a1, 1u);
    if (v31)
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "WaitingForHangup");
      SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 272), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (*(_QWORD *)(a1 + 160))
      {
        v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 64))(a1 + 16);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 16))(a1 + 16, v44);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Transfer complete", 17);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v44 + 17) = 0;
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 160) + 16))(*(_QWORD *)(a1 + 160));
      }
    }
  }
LABEL_76:
  if (SHIBYTE(v52) < 0)
    operator delete(v51[0]);
}

void sub_1BEF1A894(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<BambiTransferState>::currentState@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  v2 = *(_QWORD *)(result + 64);
  *a2 = *(_QWORD *)(result + 56);
  a2[1] = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void `non-virtual thunk to'BambiTransferHandler::handleParticipantStateChange(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  BambiTransferHandler::handleParticipantStateChange(a1 - 8, a2, a3, a4);
}

void BambiTransferHandler::handleStateTransition(BambiTransferHandler *this, uint64_t a2, uint64_t a3)
{
  char *v5;
  uint64_t v6;
  const std::string *v7;
  const std::string *v8;
  std::string __p;
  std::string v10;

  v5 = (char *)this + 16;
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 2) + 64))((char *)this + 16);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"state transition [", 18);
  *(_BYTE *)(v6 + 17) = 0;
  v5 += 152;
  v7 = (const std::string *)SipSimpleStateMachine<BambiTransferState>::nameForStateId((uint64_t)v5, a2);
  LoggableString::LoggableString(&v10, v7);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" --> ", 5);
  *(_BYTE *)(v6 + 17) = 0;
  v8 = (const std::string *)SipSimpleStateMachine<BambiTransferState>::nameForStateId((uint64_t)v5, a3);
  LoggableString::LoggableString(&__p, v8);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"]", 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1BEF1AA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

const char *SipSimpleStateMachine<BambiTransferState>::nameForStateId(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (!v3)
    return "Unknown";
  v5 = std::__shared_weak_count::lock(v3);
  if (!v5)
    return "Unknown";
  v6 = v5;
  v7 = *(_QWORD *)(a1 + 72);
  if (v7)
  {
    a2 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a2);
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (v9)
      return (const char *)a2;
  }
  else
  {
    v10 = (unint64_t *)&v5->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (v11)
      return "Unknown";
  }
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  if (!v7)
    return "Unknown";
  return (const char *)a2;
}

void sub_1BEF1AB68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BambiTransferHandler *BambiTransferHandler::handleTimer(BambiTransferHandler *result, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BambiTransferHandler *v8;

  v2 = *(unsigned __int8 *)(a2 + 23);
  v3 = (char)v2;
  if ((v2 & 0x80u) != 0)
    v2 = *(_QWORD *)(a2 + 8);
  if (v2 == 16)
  {
    if (v3 >= 0)
      v4 = (uint64_t *)a2;
    else
      v4 = *(uint64_t **)a2;
    v6 = *v4;
    v5 = v4[1];
    if (v6 == 0x46676E6974696157 && v5 == 0x7075676E6148726FLL)
    {
      v8 = result;
      BambiTransferHandler::endAllCalls(result);
      result = (BambiTransferHandler *)*((_QWORD *)v8 + 20);
      if (result)
        return (BambiTransferHandler *)(*(uint64_t (**)(BambiTransferHandler *))(*(_QWORD *)result + 16))(result);
    }
  }
  return result;
}

void BambiTransferHandler::endAllCalls(BambiTransferHandler *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_weak_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  BambiCall *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  BambiCall *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  _BYTE v36[72];
  void *__p[2];
  char v38;
  _BYTE v39[72];
  BambiCall *v40;
  std::__shared_weak_count *v41;

  v2 = **((_QWORD **)this + 52);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 152);
    if (v3)
    {
      v4 = *(_QWORD *)(v2 + 144);
      p_shared_weak_owners = (unint64_t *)&v3->__shared_weak_owners_;
      do
        v6 = __ldxr(p_shared_weak_owners);
      while (__stxr(v6 + 1, p_shared_weak_owners));
      v7 = std::__shared_weak_count::lock(v3);
      if (!v7)
        goto LABEL_26;
      v8 = v7;
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v10 = __ldaxr(p_shared_owners);
      while (__stlxr(v10 - 1, p_shared_owners));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v8);
      }
      std::__shared_weak_count::__release_weak(v3);
      if (v4)
      {
        v11 = **((_QWORD **)this + 52);
        v12 = *(std::__shared_weak_count **)(v11 + 152);
        if (v12)
        {
          v13 = *(BambiCall **)(v11 + 144);
          v14 = (unint64_t *)&v12->__shared_weak_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
          v40 = 0;
          v41 = std::__shared_weak_count::lock(v12);
          if (v41)
            v40 = v13;
          else
            v13 = 0;
          std::__shared_weak_count::__release_weak(v12);
        }
        else
        {
          v13 = 0;
          v40 = 0;
          v41 = 0;
        }
        std::string::basic_string[abi:ne180100]<0>(__p, "TransferredToOtherDevice");
        BambiCall::endWithReason(v13, (uint64_t)__p, (uint64_t)v39);
        ImsResult::~ImsResult((ImsResult *)v39);
        if (v38 < 0)
          operator delete(__p[0]);
        v3 = v41;
        if (v41)
        {
          v16 = (unint64_t *)&v41->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
LABEL_26:
            std::__shared_weak_count::__release_weak(v3);
          }
        }
      }
    }
  }
  v18 = *(_QWORD *)(*((_QWORD *)this + 52) + 16);
  if (!v18)
    return;
  v19 = *(std::__shared_weak_count **)(v18 + 152);
  if (!v19)
    return;
  v20 = *(_QWORD *)(v18 + 144);
  v21 = (unint64_t *)&v19->__shared_weak_owners_;
  do
    v22 = __ldxr(v21);
  while (__stxr(v22 + 1, v21));
  v23 = std::__shared_weak_count::lock(v19);
  if (!v23)
  {
    v32 = v19;
LABEL_43:
    std::__shared_weak_count::__release_weak(v32);
    return;
  }
  v24 = v23;
  v25 = (unint64_t *)&v23->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (!v26)
  {
    ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
    std::__shared_weak_count::__release_weak(v24);
  }
  std::__shared_weak_count::__release_weak(v19);
  if (v20)
  {
    v27 = *(_QWORD *)(*((_QWORD *)this + 52) + 16);
    v28 = *(std::__shared_weak_count **)(v27 + 152);
    if (v28)
    {
      v29 = *(BambiCall **)(v27 + 144);
      v30 = (unint64_t *)&v28->__shared_weak_owners_;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      v40 = 0;
      v41 = std::__shared_weak_count::lock(v28);
      if (v41)
        v40 = v29;
      else
        v29 = 0;
      std::__shared_weak_count::__release_weak(v28);
    }
    else
    {
      v29 = 0;
      v40 = 0;
      v41 = 0;
    }
    std::string::basic_string[abi:ne180100]<0>(__p, "TransferredToOtherDevice");
    BambiCall::endWithReason(v29, (uint64_t)__p, (uint64_t)v36);
    ImsResult::~ImsResult((ImsResult *)v36);
    if (v38 < 0)
      operator delete(__p[0]);
    v33 = v41;
    if (v41)
    {
      v34 = (unint64_t *)&v41->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      if (!v35)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        v32 = v33;
        goto LABEL_43;
      }
    }
  }
}

void sub_1BEF1AED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

uint64_t BambiTransferHandler::start(uint64_t a1, SipStack **a2, SipStack **a3)
{
  char *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  unint64_t *p_shared_weak_owners;
  unint64_t v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  void (**v34)(ImsResult *__hidden);
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  SipStack *v40;
  std::__shared_weak_count *v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *shared_weak_owners;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t v62;
  unint64_t *v63;
  unint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  _QWORD *v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  uint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  std::__shared_weak_count *v86;
  void (**v87)(ImsResult *__hidden);
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  SipStack *v93;
  std::__shared_weak_count *v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _QWORD *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  unint64_t v118;
  _QWORD *v119;
  uint64_t v120;
  std::__shared_weak_count *v121;
  std::__shared_weak_count *v122;
  unint64_t *v123;
  unint64_t v124;
  std::__shared_weak_count *v125;
  unint64_t *v126;
  unint64_t v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  std::__shared_weak_count *v135;
  SipStack *v136;
  uint64_t v137;
  ImsPrefs *v138;
  void **HoldTransferTargetSessionKey;
  void *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  unint64_t *v146;
  unint64_t v147;
  void (**v149)(ImsResult *__hidden);
  std::__shared_weak_count *v150;
  int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  uint64_t v159;
  SipStack *v160;
  std::__shared_weak_count *v161;
  SipStack *v162;
  std::__shared_weak_count *v163;
  _QWORD *v164;
  std::__shared_weak_count *v165;
  SipStack *v166;
  std::__shared_weak_count *v167;

  if (*a2 && *a3)
  {
    v7 = *(char **)(a1 + 416);
    v6 = *(char **)(a1 + 424);
    v8 = v6 - v7;
    if ((unint64_t)(v6 - v7) > 0x1F)
    {
      if (v8 != 32)
      {
        v24 = v7 + 32;
        while (v6 != v24)
        {
          v6 -= 16;
          std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v6);
        }
        *(_QWORD *)(a1 + 424) = v24;
      }
    }
    else
    {
      v9 = 2 - (v8 >> 4);
      v10 = *(_QWORD *)(a1 + 432);
      if (v9 <= (v10 - (uint64_t)v6) >> 4)
      {
        bzero(*(void **)(a1 + 424), 16 * v9);
        *(_QWORD *)(a1 + 424) = &v6[16 * v9];
      }
      else
      {
        v11 = v10 - (_QWORD)v7;
        v12 = v11 >> 3;
        if ((unint64_t)(v11 >> 3) <= 2)
          v12 = 2;
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
          v13 = 0xFFFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        if (v13 >> 60)
          std::__throw_bad_array_new_length[abi:ne180100]();
        v14 = v8 >> 4;
        v15 = (char *)operator new(16 * v13);
        v16 = &v15[16 * v14];
        v17 = &v15[16 * v13];
        bzero(v16, 16 * v9);
        v18 = &v16[16 * v9];
        if (v6 == v7)
        {
          *(_QWORD *)(a1 + 416) = v16;
          *(_QWORD *)(a1 + 424) = v18;
          *(_QWORD *)(a1 + 432) = v17;
        }
        else
        {
          do
          {
            v19 = *((_OWORD *)v6 - 1);
            v6 -= 16;
            *((_OWORD *)v16 - 1) = v19;
            v16 -= 16;
            *(_QWORD *)v6 = 0;
            *((_QWORD *)v6 + 1) = 0;
          }
          while (v6 != v7);
          v6 = *(char **)(a1 + 416);
          v20 = *(_QWORD *)(a1 + 424);
          *(_QWORD *)(a1 + 416) = v16;
          *(_QWORD *)(a1 + 424) = v18;
          *(_QWORD *)(a1 + 432) = v17;
          while ((char *)v20 != v6)
            v20 = std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v20 - 16);
        }
        if (v6)
          operator delete(v6);
      }
    }
    v25 = (std::__shared_weak_count *)a2[1];
    v162 = *a2;
    v163 = v25;
    if (v25)
    {
      p_shared_owners = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldxr(p_shared_owners);
      while (__stxr(v27 + 1, p_shared_owners));
    }
    v28 = *(std::__shared_weak_count **)(a1 + 136);
    if (!v28)
    {
      v34 = 0;
      v33 = 0;
      goto LABEL_45;
    }
    v29 = *(_QWORD *)(a1 + 128);
    p_shared_weak_owners = (unint64_t *)&v28->__shared_weak_owners_;
    do
      v31 = __ldxr(p_shared_weak_owners);
    while (__stxr(v31 + 1, p_shared_weak_owners));
    v32 = std::__shared_weak_count::lock(v28);
    v33 = v32;
    if (v32)
    {
      if (v29)
        v34 = (void (**)(ImsResult *__hidden))(v29 + 8);
      else
        v34 = 0;
      v35 = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      std::__shared_weak_count::__release_weak(v28);
      v37 = (unint64_t *)&v33->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      if (v38)
      {
LABEL_45:
        v40 = v162;
        v39 = v163;
        v164 = 0;
        v165 = 0;
        v41 = (std::__shared_weak_count *)operator new(0x110uLL);
        v42 = v41;
        v41->__shared_owners_ = 0;
        v43 = (unint64_t *)&v41->__shared_owners_;
        v41->__shared_weak_owners_ = 0;
        v41->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6C58;
        v166 = v40;
        v167 = v39;
        if (v39)
        {
          v44 = (unint64_t *)&v39->__shared_owners_;
          do
            v45 = __ldxr(v44);
          while (__stxr(v45 + 1, v44));
        }
        if (v33)
        {
          v46 = (unint64_t *)&v33->__shared_weak_owners_;
          do
            v47 = __ldxr(v46);
          while (__stxr(v47 + 1, v46));
        }
        v48 = &v41[1].__vftable;
        *(_QWORD *)&v155 = v40;
        *((_QWORD *)&v155 + 1) = v39;
        if (v39)
        {
          v49 = (unint64_t *)&v39->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        v149 = v34;
        v150 = v33;
        if (v33)
        {
          v51 = (unint64_t *)&v33->__shared_weak_owners_;
          do
            v52 = __ldxr(v51);
          while (__stxr(v52 + 1, v51));
        }
        BambiCallParticipant::BambiCallParticipant((uint64_t)&v41[1], &v155, &v149);
        if (v150)
          std::__shared_weak_count::__release_weak(v150);
        v53 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
        if (*((_QWORD *)&v155 + 1))
        {
          v54 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
        v42[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6688;
        v42[1].__shared_owners_ = (uint64_t)&unk_1E78C6708;
        v42[1].__shared_weak_owners_ = (uint64_t)&unk_1E78C6840;
        v42[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C6870;
        if (v33)
          std::__shared_weak_count::__release_weak(v33);
        if (v39)
        {
          v56 = (unint64_t *)&v39->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        v164 = v48;
        v165 = v42;
        shared_weak_owners = (std::__shared_weak_count *)v42[6].__shared_weak_owners_;
        if (shared_weak_owners)
        {
          if (shared_weak_owners->__shared_owners_ != -1)
            goto LABEL_84;
          do
            v59 = __ldxr(v43);
          while (__stxr(v59 + 1, v43));
          v60 = (unint64_t *)&v42->__shared_weak_owners_;
          do
            v61 = __ldxr(v60);
          while (__stxr(v61 + 1, v60));
          v42[6].__shared_owners_ = (uint64_t)v48;
          v42[6].__shared_weak_owners_ = (uint64_t)v42;
          std::__shared_weak_count::__release_weak(shared_weak_owners);
        }
        else
        {
          do
            v62 = __ldxr(v43);
          while (__stxr(v62 + 1, v43));
          v63 = (unint64_t *)&v42->__shared_weak_owners_;
          do
            v64 = __ldxr(v63);
          while (__stxr(v64 + 1, v63));
          v42[6].__shared_owners_ = (uint64_t)v48;
          v42[6].__shared_weak_owners_ = (uint64_t)v42;
        }
        do
          v65 = __ldaxr(v43);
        while (__stlxr(v65 - 1, v43));
        if (!v65)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
LABEL_84:
        v66 = v164;
        (*(void (**)(_QWORD *))(*v164 + 80))(v164);
        v67 = *(_QWORD **)(a1 + 416);
        v68 = v165;
        v164 = 0;
        v165 = 0;
        v69 = (std::__shared_weak_count *)v67[1];
        *v67 = v66;
        v67[1] = v68;
        if (v69)
        {
          v70 = (unint64_t *)&v69->__shared_owners_;
          do
            v71 = __ldaxr(v70);
          while (__stlxr(v71 - 1, v70));
          if (!v71)
          {
            ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
            std::__shared_weak_count::__release_weak(v69);
          }
        }
        v72 = v165;
        if (v165)
        {
          v73 = (unint64_t *)&v165->__shared_owners_;
          do
            v74 = __ldaxr(v73);
          while (__stlxr(v74 - 1, v73));
          if (!v74)
          {
            ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
            std::__shared_weak_count::__release_weak(v72);
          }
        }
        if (v33)
          std::__shared_weak_count::__release_weak(v33);
        v75 = v163;
        if (v163)
        {
          v76 = (unint64_t *)&v163->__shared_owners_;
          do
            v77 = __ldaxr(v76);
          while (__stlxr(v77 - 1, v76));
          if (!v77)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        v78 = (std::__shared_weak_count *)a3[1];
        v160 = *a3;
        v161 = v78;
        if (v78)
        {
          v79 = (unint64_t *)&v78->__shared_owners_;
          do
            v80 = __ldxr(v79);
          while (__stxr(v80 + 1, v79));
        }
        v81 = *(std::__shared_weak_count **)(a1 + 136);
        if (!v81)
        {
          v87 = 0;
          v86 = 0;
          goto LABEL_120;
        }
        v82 = *(_QWORD *)(a1 + 128);
        v83 = (unint64_t *)&v81->__shared_weak_owners_;
        do
          v84 = __ldxr(v83);
        while (__stxr(v84 + 1, v83));
        v85 = std::__shared_weak_count::lock(v81);
        v86 = v85;
        if (v85)
        {
          if (v82)
            v87 = (void (**)(ImsResult *__hidden))(v82 + 8);
          else
            v87 = 0;
          v88 = (unint64_t *)&v85->__shared_weak_owners_;
          do
            v89 = __ldxr(v88);
          while (__stxr(v89 + 1, v88));
          std::__shared_weak_count::__release_weak(v81);
          v90 = (unint64_t *)&v86->__shared_owners_;
          do
            v91 = __ldaxr(v90);
          while (__stlxr(v91 - 1, v90));
          if (v91)
          {
LABEL_120:
            v93 = v160;
            v92 = v161;
            v164 = 0;
            v165 = 0;
            v94 = (std::__shared_weak_count *)operator new(0x110uLL);
            v95 = v94;
            v94->__shared_owners_ = 0;
            v96 = (unint64_t *)&v94->__shared_owners_;
            v94->__shared_weak_owners_ = 0;
            v94->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6C08;
            v166 = v93;
            v167 = v92;
            if (v92)
            {
              v97 = (unint64_t *)&v92->__shared_owners_;
              do
                v98 = __ldxr(v97);
              while (__stxr(v98 + 1, v97));
            }
            if (v86)
            {
              v99 = (unint64_t *)&v86->__shared_weak_owners_;
              do
                v100 = __ldxr(v99);
              while (__stxr(v100 + 1, v99));
            }
            v101 = &v94[1].__vftable;
            *(_QWORD *)&v155 = v93;
            *((_QWORD *)&v155 + 1) = v92;
            if (v92)
            {
              v102 = (unint64_t *)&v92->__shared_owners_;
              do
                v103 = __ldxr(v102);
              while (__stxr(v103 + 1, v102));
            }
            v149 = v87;
            v150 = v86;
            if (v86)
            {
              v104 = (unint64_t *)&v86->__shared_weak_owners_;
              do
                v105 = __ldxr(v104);
              while (__stxr(v105 + 1, v104));
            }
            BambiCallParticipant::BambiCallParticipant((uint64_t)&v94[1], &v155, &v149);
            if (v150)
              std::__shared_weak_count::__release_weak(v150);
            v106 = (std::__shared_weak_count *)*((_QWORD *)&v155 + 1);
            if (*((_QWORD *)&v155 + 1))
            {
              v107 = (unint64_t *)(*((_QWORD *)&v155 + 1) + 8);
              do
                v108 = __ldaxr(v107);
              while (__stlxr(v108 - 1, v107));
              if (!v108)
              {
                ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                std::__shared_weak_count::__release_weak(v106);
              }
            }
            v95[1].__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6440;
            v95[1].__shared_owners_ = (uint64_t)&unk_1E78C64C0;
            v95[1].__shared_weak_owners_ = (uint64_t)&unk_1E78C65F8;
            v95[2].__vftable = (std::__shared_weak_count_vtbl *)&unk_1E78C6628;
            if (v86)
              std::__shared_weak_count::__release_weak(v86);
            if (v92)
            {
              v109 = (unint64_t *)&v92->__shared_owners_;
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                std::__shared_weak_count::__release_weak(v92);
              }
            }
            v164 = v101;
            v165 = v95;
            v111 = (std::__shared_weak_count *)v95[6].__shared_weak_owners_;
            if (v111)
            {
              if (v111->__shared_owners_ != -1)
                goto LABEL_159;
              do
                v112 = __ldxr(v96);
              while (__stxr(v112 + 1, v96));
              v113 = (unint64_t *)&v95->__shared_weak_owners_;
              do
                v114 = __ldxr(v113);
              while (__stxr(v114 + 1, v113));
              v95[6].__shared_owners_ = (uint64_t)v101;
              v95[6].__shared_weak_owners_ = (uint64_t)v95;
              std::__shared_weak_count::__release_weak(v111);
            }
            else
            {
              do
                v115 = __ldxr(v96);
              while (__stxr(v115 + 1, v96));
              v116 = (unint64_t *)&v95->__shared_weak_owners_;
              do
                v117 = __ldxr(v116);
              while (__stxr(v117 + 1, v116));
              v95[6].__shared_owners_ = (uint64_t)v101;
              v95[6].__shared_weak_owners_ = (uint64_t)v95;
            }
            do
              v118 = __ldaxr(v96);
            while (__stlxr(v118 - 1, v96));
            if (!v118)
            {
              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
              std::__shared_weak_count::__release_weak(v95);
            }
LABEL_159:
            v119 = v164;
            (*(void (**)(_QWORD *))(*v164 + 80))(v164);
            v120 = *(_QWORD *)(a1 + 416);
            v121 = v165;
            v164 = 0;
            v165 = 0;
            v122 = *(std::__shared_weak_count **)(v120 + 24);
            *(_QWORD *)(v120 + 16) = v119;
            *(_QWORD *)(v120 + 24) = v121;
            if (v122)
            {
              v123 = (unint64_t *)&v122->__shared_owners_;
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
              if (!v124)
              {
                ((void (*)(std::__shared_weak_count *))v122->__on_zero_shared)(v122);
                std::__shared_weak_count::__release_weak(v122);
              }
            }
            v125 = v165;
            if (v165)
            {
              v126 = (unint64_t *)&v165->__shared_owners_;
              do
                v127 = __ldaxr(v126);
              while (__stlxr(v127 - 1, v126));
              if (!v127)
              {
                ((void (*)(std::__shared_weak_count *))v125->__on_zero_shared)(v125);
                std::__shared_weak_count::__release_weak(v125);
              }
            }
            if (v86)
              std::__shared_weak_count::__release_weak(v86);
            v128 = v161;
            if (v161)
            {
              v129 = (unint64_t *)&v161->__shared_owners_;
              do
                v130 = __ldaxr(v129);
              while (__stlxr(v130 - 1, v129));
              if (!v130)
              {
                ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
                std::__shared_weak_count::__release_weak(v128);
              }
            }
            SipTypedStateMachine<BambiTransferState>::transitionToState((_QWORD *)(a1 + 168), 1);
            v159 = 0;
            v157 = 0u;
            v158 = 0u;
            v155 = 0u;
            v156 = 0u;
            (*(void (**)(__int128 *__return_ptr, _QWORD, uint64_t))(***(_QWORD ***)(a1 + 416) + 96))(&v155, **(_QWORD **)(a1 + 416), 1);
            if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v155 + 1) + 24))(*((_QWORD *)&v155 + 1), v156))
            {
              v132 = *(_QWORD *)(a1 + 16);
              v131 = a1 + 16;
              v133 = (*(uint64_t (**)(uint64_t))(v132 + 56))(v131);
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v131 + 16))(v131, v133);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v133 + 8), (uint64_t)"Unable to prepare transferee for transfer: ", 43);
              *(_BYTE *)(v133 + 17) = 0;
              (*(void (**)(__int128 *, uint64_t))(v155 + 16))(&v155, v133);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v133 + 64))(v133, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              v23 = 0;
              *(_BYTE *)(v133 + 17) = 0;
LABEL_194:
              ImsResult::~ImsResult((ImsResult *)&v155);
              return v23;
            }
            v166 = 0;
            v167 = 0;
            v134 = *(std::__shared_weak_count **)(a1 + 152);
            if (v134)
            {
              v135 = std::__shared_weak_count::lock(v134);
              v167 = v135;
              if (v135)
              {
                v136 = *(SipStack **)(a1 + 144);
                v166 = v136;
                if (v136)
                {
                  v137 = *(_QWORD *)(*(_QWORD *)(a1 + 416) + 16);
                  v138 = (ImsPrefs *)SipStack::prefs(v136);
                  HoldTransferTargetSessionKey = (void **)ImsPrefs::getHoldTransferTargetSessionKey(v138);
                  v140 = ImsPrefs::prefWithKey(v138, HoldTransferTargetSessionKey);
                  if (v140)
                    v141 = (*(uint64_t (**)(void *))(*(_QWORD *)v140 + 40))(v140);
                  else
                    v141 = *((_BYTE *)HoldTransferTargetSessionKey + 57) != 0;
                  (*(void (**)(void (***__return_ptr)(ImsResult *__hidden), uint64_t, uint64_t))(*(_QWORD *)v137 + 96))(&v149, v137, v141);
                  ImsResult::operator=((uint64_t)&v155, (uint64_t)&v149);
                  ImsResult::~ImsResult((ImsResult *)&v149);
                  if ((*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v155 + 1) + 24))(*((_QWORD *)&v155 + 1), v156))
                  {
                    v144 = *(_QWORD *)(a1 + 16);
                    v143 = a1 + 16;
                    v145 = (*(uint64_t (**)(uint64_t))(v144 + 56))(v143);
                    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v143 + 16))(v143, v145);
                    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v145 + 8), (uint64_t)"Unable to prepare transfer target for transfer: ", 48);
                    *(_BYTE *)(v145 + 17) = 0;
                    (*(void (**)(__int128 *, uint64_t))(v155 + 16))(&v155, v145);
                    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v145 + 64))(v145, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                    *(_BYTE *)(v145 + 17) = 0;
                  }
                  v23 = (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)&v155 + 1) + 24))(*((_QWORD *)&v155 + 1), v156) ^ 1;
                  goto LABEL_190;
                }
              }
            }
            else
            {
              v135 = 0;
            }
            v152 = 0u;
            v153 = 0u;
            v154 = 0u;
            v149 = &off_1E78B7238;
            v150 = (std::__shared_weak_count *)&_bambiDomain;
            v151 = 0x40000000;
            v142 = (*(uint64_t (**)(void))(_bambiDomain + 24))();
            ImsResult::~ImsResult((ImsResult *)&v149);
            v23 = v142 ^ 1u;
            if (!v135)
              goto LABEL_194;
LABEL_190:
            v146 = (unint64_t *)&v135->__shared_owners_;
            do
              v147 = __ldaxr(v146);
            while (__stlxr(v147 - 1, v146));
            if (!v147)
            {
              ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
              std::__shared_weak_count::__release_weak(v135);
            }
            goto LABEL_194;
          }
          ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
          v81 = v86;
        }
        else
        {
          v87 = 0;
        }
        std::__shared_weak_count::__release_weak(v81);
        goto LABEL_120;
      }
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      v28 = v33;
    }
    else
    {
      v34 = 0;
    }
    std::__shared_weak_count::__release_weak(v28);
    goto LABEL_45;
  }
  v21 = a1 + 16;
  v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 56))(a1 + 16);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v21 + 16))(v21, v22);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Transferee and transfer target must be valid objects.", 53);
  *(_BYTE *)(v22 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v23 = 0;
  *(_BYTE *)(v22 + 17) = 0;
  return v23;
}

void sub_1BEF1BA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  uint64_t v19;

  ImsResult::~ImsResult((ImsResult *)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v19 - 96);
  ImsResult::~ImsResult((ImsResult *)&a19);
  _Unwind_Resume(a1);
}

uint64_t SipTypedStateMachine<BambiTransferState>::transitionToState(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  uint8x8_t v5;
  unint64_t v6;
  uint64_t **v7;
  uint64_t *i;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const std::string *v12;
  std::string::size_type v14;
  _QWORD *v15;
  std::string::size_type v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  std::string::size_type v36;
  std::__shared_weak_count *v37;
  std::string __p;

  v4 = a1[3];
  if (v4)
  {
    v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      v6 = a2;
      if (v4 <= a2)
        v6 = a2 % v4;
    }
    else
    {
      v6 = ((_DWORD)v4 - 1) & a2;
    }
    v7 = *(uint64_t ***)(a1[2] + 8 * v6);
    if (v7)
    {
      for (i = *v7; i; i = (uint64_t *)*i)
      {
        v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == (_DWORD)a2)
          {
            v14 = a1[7];
            v16 = a1[8];
            v15 = a1 + 7;
            __p.__r_.__value_.__r.__words[0] = v14;
            __p.__r_.__value_.__l.__size_ = v16;
            if (v16)
            {
              v17 = (unint64_t *)(v16 + 8);
              do
                v18 = __ldxr(v17);
              while (__stxr(v18 + 1, v17));
            }
            if (v14)
            {
              v19 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v14 + 48))(v14);
              (*(void (**)(std::string::size_type, uint64_t))(*(_QWORD *)v14 + 64))(v14, a2);
            }
            else
            {
              v19 = 0;
            }
            std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100](a1 + 7, i[3], i[4]);
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v15 + 56))(*v15, v19);
            v36 = v14;
            v37 = (std::__shared_weak_count *)v16;
            if (v16)
            {
              v20 = (unint64_t *)(v16 + 8);
              do
                v21 = __ldxr(v20);
              while (__stxr(v21 + 1, v20));
            }
            v22 = (std::__shared_weak_count *)a1[8];
            v34 = a1[7];
            v35 = v22;
            if (v22)
            {
              p_shared_owners = (unint64_t *)&v22->__shared_owners_;
              do
                v24 = __ldxr(p_shared_owners);
              while (__stxr(v24 + 1, p_shared_owners));
            }
            (*(void (**)(_QWORD *, std::string::size_type *, uint64_t *))(*a1 + 56))(a1, &v36, &v34);
            v25 = v35;
            if (v35)
            {
              v26 = (unint64_t *)&v35->__shared_owners_;
              do
                v27 = __ldaxr(v26);
              while (__stlxr(v27 - 1, v26));
              if (!v27)
              {
                ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
                std::__shared_weak_count::__release_weak(v25);
              }
            }
            v28 = v37;
            if (v37)
            {
              v29 = (unint64_t *)&v37->__shared_owners_;
              do
                v30 = __ldaxr(v29);
              while (__stlxr(v30 - 1, v29));
              if (!v30)
              {
                ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
                std::__shared_weak_count::__release_weak(v28);
              }
            }
            size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
            if (__p.__r_.__value_.__l.__size_)
            {
              v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
              do
                v33 = __ldaxr(v32);
              while (__stlxr(v33 - 1, v32));
              if (!v33)
              {
                ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                std::__shared_weak_count::__release_weak(size);
              }
            }
            return 1;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4)
              v9 %= v4;
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6)
            break;
        }
      }
    }
  }
  v10 = a1[1];
  if (v10)
  {
    v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 56))(a1[1]);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 16))(v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"transitionToState: no such state ", 33);
    *(_BYTE *)(v11 + 17) = 0;
    v12 = (const std::string *)(*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, a2);
    LoggableString::LoggableString(&__p, v12);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v11 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  return 0;
}

void sub_1BEF1BE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  _Unwind_Resume(a1);
}

void BambiTransferHandler::endTransfer(_QWORD *a1, const ImsResult *a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[5];
  _BYTE v7[72];

  if (a1[52] != a1[53])
  {
    v4 = a1 + 2;
    v5 = (*(uint64_t (**)(_QWORD *))(a1[2] + 64))(a1 + 2);
    (*(void (**)(_QWORD *, uint64_t))(*v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"End transfer requested due to ", 30);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(const ImsResult *, uint64_t))(*(_QWORD *)a2 + 16))(a2, v5);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    v6[0] = MEMORY[0x1E0C809B0];
    v6[1] = 1174405120;
    v6[2] = ___ZN20BambiTransferHandler11endTransferE9ImsResult_block_invoke;
    v6[3] = &__block_descriptor_tmp_11;
    v6[4] = a1;
    ImsResult::ImsResult((ImsResult *)v7, a2);
    ims::performBlock((IMSClientManager *)v6);
    ImsResult::~ImsResult((ImsResult *)v7);
  }
}

void sub_1BEF1BFC4(_Unwind_Exception *a1)
{
  ImsResult *v1;

  ImsResult::~ImsResult(v1);
  _Unwind_Resume(a1);
}

void ___ZN20BambiTransferHandler11endTransferE9ImsResult_block_invoke(uint64_t a1)
{
  BambiTransferHandler *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  SipStack *v7;
  ImsPrefs *v8;
  void **TransferorShouldSendByeRequestKey;
  void *v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *p_shared_weak_owners;
  unint64_t v14;
  unint64_t v15;
  ImsPrefs *v16;
  void *TransferHangupTimeoutKey;
  void *v18;
  unsigned int v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  unint64_t *p_shared_owners;
  unint64_t v27;
  _BYTE v28[72];
  void *__p[2];
  char v30;
  SipStack *v31;
  std::__shared_weak_count *v32;
  _BYTE v33[24];
  _BYTE *v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v2 = *(BambiTransferHandler **)(a1 + 32);
  if (((*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56)) & 1) != 0)
  {
    if ((*(unsigned int (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 48) + 24))(*(_QWORD *)(a1 + 48), *(unsigned int *)(a1 + 56)))
    {
      v3 = *((_QWORD *)v2 + 20);
      if (v3)
      {
        ImsResult::ImsResult((ImsResult *)v28, (const ImsResult *)(a1 + 40));
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 24))(v3, v28);
        ImsResult::~ImsResult((ImsResult *)v28);
      }
    }
    return;
  }
  v4 = (std::__shared_weak_count *)*((_QWORD *)v2 + 19);
  if (!v4)
    return;
  v5 = std::__shared_weak_count::lock(v4);
  v32 = v5;
  if (!v5)
    return;
  v6 = v5;
  v7 = (SipStack *)*((_QWORD *)v2 + 18);
  v31 = v7;
  if (v7)
  {
    v8 = (ImsPrefs *)SipStack::prefs(v7);
    TransferorShouldSendByeRequestKey = (void **)ImsPrefs::getTransferorShouldSendByeRequestKey(v8);
    v10 = ImsPrefs::prefWithKey(v8, TransferorShouldSendByeRequestKey);
    if (v10)
    {
      if (!(*(unsigned int (**)(void *))(*(_QWORD *)v10 + 40))(v10))
        goto LABEL_10;
    }
    else if (!*((_BYTE *)TransferorShouldSendByeRequestKey + 57))
    {
LABEL_10:
      v12 = *((_QWORD *)v2 + 16);
      v11 = (std::__shared_weak_count *)*((_QWORD *)v2 + 17);
      if (v11)
      {
        p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v14 = __ldxr(p_shared_weak_owners);
        while (__stxr(v14 + 1, p_shared_weak_owners));
        do
          v15 = __ldxr(p_shared_weak_owners);
        while (__stxr(v15 + 1, p_shared_weak_owners));
      }
      v16 = (ImsPrefs *)SipStack::prefs(v7);
      TransferHangupTimeoutKey = ImsPrefs::getTransferHangupTimeoutKey(v16);
      v18 = ImsPrefs::prefWithKey(v16, (void **)TransferHangupTimeoutKey);
      if (v18)
        v19 = (*(uint64_t (**)(void *))(*(_QWORD *)v18 + 56))(v18);
      else
        v19 = *((_DWORD *)TransferHangupTimeoutKey + 15);
      std::string::basic_string[abi:ne180100]<0>(__p, "WaitingForHangup");
      if (v11)
      {
        v21 = (unint64_t *)&v11->__shared_weak_owners_;
        do
          v22 = __ldxr(v21);
        while (__stxr(v22 + 1, v21));
      }
      v34 = 0;
      v23 = operator new(0x20uLL);
      *v23 = &off_1E78C6DE8;
      v23[1] = v2;
      v23[2] = v12;
      v23[3] = v11;
      v34 = v23;
      SipTimerContainer::startTimer((_QWORD *)v2 + 34, (uint64_t)__p, (uint64_t)v33, v19, 0);
      v24 = v34;
      if (v34 == v33)
      {
        v25 = 4;
        v24 = v33;
      }
      else
      {
        if (!v34)
        {
LABEL_28:
          if (v30 < 0)
            operator delete(__p[0]);
          if (v11)
          {
            std::__shared_weak_count::__release_weak(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
          goto LABEL_32;
        }
        v25 = 5;
      }
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_28;
    }
    BambiTransferHandler::endAllCalls(v2);
    v20 = *((_QWORD *)v2 + 20);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
  }
LABEL_32:
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  do
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_1BEF1C270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  std::__shared_weak_count *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v29;
  uint64_t v30;

  v29 = *(_QWORD **)(v27 - 64);
  if (v29 == v26)
  {
    v30 = 4;
    v29 = (_QWORD *)(v27 - 88);
  }
  else
  {
    if (!v29)
      goto LABEL_6;
    v30 = 5;
  }
  (*(void (**)(void))(*v29 + 8 * v30))();
LABEL_6:
  if (a24 < 0)
    operator delete(__p);
  if (v25)
  {
    std::__shared_weak_count::__release_weak(v25);
    std::__shared_weak_count::__release_weak(v25);
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void __copy_helper_block_e8_40c14_ZTS9ImsResult(uint64_t a1, uint64_t a2)
{
  ImsResult::ImsResult((ImsResult *)(a1 + 40), (const ImsResult *)(a2 + 40));
}

void __destroy_helper_block_e8_40c14_ZTS9ImsResult(uint64_t a1)
{
  ImsResult::~ImsResult((ImsResult *)(a1 + 40));
}

uint64_t BambiCallParticipant::determineIncomingMessageCategory(BambiCallParticipant *this)
{
  return 2;
}

void BambiTransferHandler::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "TransferHandler");
}

void `non-virtual thunk to'BambiTransferHandler::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "TransferHandler");
}

uint64_t SipTypedStateMachine<BambiTransferState>::currentStateId(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 56);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 48))(result);
  return result;
}

void SipStateMachine::stateMachineName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "UnknownStateMachine");
}

void SipSimpleStateMachine<BambiTransferState>::handleStateTransition(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *p_shared_owners;
  unint64_t v13;

  v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4)
  {
    v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      v8 = v7;
      v9 = *(_QWORD *)(a1 + 72);
      if (v9)
      {
        if (*a2)
          v10 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
        else
          v10 = 0;
        v11 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 48))(*a3);
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 24))(v9, v10, v11);
      }
      p_shared_owners = (unint64_t *)&v8->__shared_owners_;
      do
        v13 = __ldaxr(p_shared_owners);
      while (__stlxr(v13 - 1, p_shared_owners));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
  }
}

void sub_1BEF1C4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine(uint64_t a1)
{
  SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine(a1);
  JUMPOUT(0x1C3B87100);
}

__int128 *SipStateMachine::nameForStateId(SipStateMachine *this)
{
  return &ims::kEmptyString;
}

uint64_t SipSimpleStateMachine<BambiTransferState>::~SipSimpleStateMachine(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t i;
  void *v5;

  *(_QWORD *)a1 = &off_1E78C6B58;
  v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)a1 = off_1E78C6BB0;
  if (*(_QWORD *)(a1 + 40))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(_QWORD **)(a1 + 32));
    *(_QWORD *)(a1 + 32) = 0;
    v3 = *(_QWORD *)(a1 + 24);
    if (v3)
    {
      for (i = 0; i != v3; ++i)
        *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8 * i) = 0;
    }
    *(_QWORD *)(a1 + 40) = 0;
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 56);
  std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(*(_QWORD **)(a1 + 32));
  v5 = *(void **)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v5)
    operator delete(v5);
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>>>::__deallocate_node(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;

  if (a1)
  {
    v1 = a1;
    do
    {
      v2 = (_QWORD *)*v1;
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(v1 + 3));
      operator delete(v1);
      v1 = v2;
    }
    while (v2);
  }
}

void std::__shared_ptr_emplace<BambiTransferTargetParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6C08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferTargetParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6C08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiTransferTargetParticipant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiTransfereeParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransfereeParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6C58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiTransfereeParticipant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::shared_ptr<BambiTransferState>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)v1 + 24);
    operator delete(v1);
  }
}

void std::__shared_ptr_emplace<BambiTransferWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6CA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferWaitingForHoldState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6CA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiTransferWaitingForHoldState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiTransferTransferRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6CF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferTransferRequestedState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6CF8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiTransferTransferRequestedState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::__shared_ptr_emplace<BambiTransferTransferCompleteState>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6D48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferTransferCompleteState>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6D48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiTransferTransferCompleteState>::__on_zero_shared(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 8))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<BambiTransferHandler,std::allocator<BambiTransferHandler>,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,void>(_QWORD *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v6;

  v6 = operator new(0x1D0uLL);
  std::__shared_ptr_emplace<BambiTransferHandler>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,std::allocator<BambiTransferHandler>,0>(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a3, v6 + 19, (uint64_t)(v6 + 3));
}

void sub_1BEF1C834(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BambiTransferHandler>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,std::allocator<BambiTransferHandler>,0>(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78C6D98;
  std::construct_at[abi:ne180100]<BambiTransferHandler,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,BambiTransferHandler*>((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1BEF1C87C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiTransferHandler>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6D98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiTransferHandler>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C6D98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiTransferHandler>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<BambiTransferHandler,std::shared_ptr<SipStack> &,BambiTransferHandlerDelegate *&,BambiTransferHandler*>(uint64_t a1, _QWORD *a2, uint64_t *a3)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD v10[2];

  v4 = (std::__shared_weak_count *)a2[1];
  v10[0] = *a2;
  v10[1] = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  BambiTransferHandler::BambiTransferHandler(a1, v10, *a3);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  return a1;
}

void sub_1BEF1C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *_ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEED1Ev(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C6DE8;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEED0Ev(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C6DE8;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *_ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE7__cloneEv(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C6DE8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE7__cloneEPNS0_6__baseISD_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C6DE8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE7destroyEv(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE18destroy_deallocateEv(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void _ZNSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEEclESC_(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 48))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF1CB64(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t _ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:ne180100](a2, (uint64_t)&_ZTIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0NS_9allocatorIS4_EEFvRNS_12basic_stringIcNS_11char_traitsIcEENS5_IcEEEEEE11target_typeEv()
{
  return &_ZTIZZN20BambiTransferHandler11endTransferE9ImsResultEUb_E3__0;
}

_QWORD *SipTransport::SipTransport(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1E78C6EE0;
  v5 = *a2;
  v6 = a2[1];
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v9 = (std::__shared_weak_count *)a1[2];
    a1[1] = v5;
    a1[2] = v6;
    if (v9)
      std::__shared_weak_count::__release_weak(v9);
  }
  else
  {
    a1[1] = v5;
    a1[2] = 0;
  }
  a1[3] = a3;
  return a1;
}

void SipTransport::processIncomingMessage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  std::__shared_weak_count *v8;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;

  v27 = 0;
  v28 = 0;
  v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    v28 = std::__shared_weak_count::lock(v8);
    if (v28)
    {
      v15 = *(_QWORD *)(a1 + 8);
      v27 = v15;
      if (v15)
      {
        v16 = (std::__shared_weak_count *)a7[1];
        v25 = *a7;
        v26 = v16;
        if (v16)
        {
          p_shared_owners = (unint64_t *)&v16->__shared_owners_;
          do
            v18 = __ldxr(p_shared_owners);
          while (__stxr(v18 + 1, p_shared_owners));
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v15 + 256))(v15, a2, a3, a4, a5, a6, a1, &v25);
        v19 = v26;
        if (v26)
        {
          v20 = (unint64_t *)&v26->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
      }
    }
  }
  v22 = v28;
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
}

void sub_1BEF1CD84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void SipTransport::transportLayer(SipTransport *this@<X0>, _QWORD *a2@<X8>)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_weak_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v4 && (v5 = std::__shared_weak_count::lock(v4)) != 0)
  {
    v6 = v5;
    v7 = *((_QWORD *)this + 1);
    if (v7 && (v8 = *(std::__shared_weak_count **)(v7 + 200)) != 0)
    {
      v9 = *(_QWORD *)(v7 + 192);
      p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
      do
        v11 = __ldxr(p_shared_weak_owners);
      while (__stxr(v11 + 1, p_shared_weak_owners));
      *a2 = 0;
      v12 = std::__shared_weak_count::lock(v8);
      a2[1] = v12;
      if (v12)
        *a2 = v9;
      std::__shared_weak_count::__release_weak(v8);
    }
    else
    {
      *a2 = 0;
      a2[1] = 0;
    }
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v14 = __ldaxr(p_shared_owners);
    while (__stlxr(v14 - 1, p_shared_owners));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
  }
}

void IMSDialogEventManager::IMSDialogEventManager(IMSDialogEventManager *this)
{
  char *v2;
  std::string __p;

  *(_QWORD *)this = &unk_1E78BA6B8;
  *((_QWORD *)this + 1) = &off_1E78C7050;
  v2 = (char *)this + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "sip.dialog-event");
  ImsLogContainer::ImsLogContainer((uint64_t)v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = off_1E78C6F30;
  *((_QWORD *)this + 1) = &unk_1E78C6F70;
  *((_QWORD *)this + 2) = &unk_1E78C6F98;
}

void sub_1BEF1CEFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSDialogEventManager::~IMSDialogEventManager(IMSDialogEventManager *this)
{
  *((_QWORD *)this + 2) = off_1E78CFE68;
  if (*((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  if (*((char *)this + 47) < 0)
    operator delete(*((void **)this + 3));
}

{
  IMSDialogEventManager::~IMSDialogEventManager(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'IMSDialogEventManager::~IMSDialogEventManager(IMSDialogEventManager *this)
{
  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 8));
}

{
  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 16));
}

{
  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  IMSDialogEventManager::~IMSDialogEventManager((IMSDialogEventManager *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

void IMSDialogEventManager::handleDialogEvent(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  int v10;
  std::string::size_type v11;
  int v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  std::string __p;

  if (a3 && *(int *)(a3 + 248) >= 4)
  {
    v5 = a1 + 16;
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 16) + 64))(a1 + 16);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Sending Thumper call ", 21);
    *(_BYTE *)(v6 + 17) = 0;
    if (*(_BYTE *)(a3 + 289))
      v7 = "register";
    else
      v7 = "deregister";
    if (*(_BYTE *)(a3 + 289))
      v8 = 8;
    else
      v8 = 10;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, v8);
    *(_BYTE *)(v6 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" for ID ", 8);
    *(_BYTE *)(v6 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)a3);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v6 + 40))(v6, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (*(char *)(a3 + 23) < 0)
    {
      v11 = *(_QWORD *)(a3 + 8);
      if (v11)
      {
        v12 = *(unsigned __int8 *)(a3 + 289);
        v10 = *(_DWORD *)(a3 + 248);
        memset(&__p, 0, sizeof(__p));
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, v11);
        if (!v12)
          goto LABEL_20;
        goto LABEL_17;
      }
    }
    else if (*(_BYTE *)(a3 + 23))
    {
      v9 = *(unsigned __int8 *)(a3 + 289);
      v10 = *(_DWORD *)(a3 + 248);
      __p = *(std::string *)a3;
      if (!v9)
        goto LABEL_20;
LABEL_17:
      if (v10 == 4)
      {
        v13 = (_QWORD *)IMSClientManager::delegateForStack(a2);
        v14 = 20;
        goto LABEL_21;
      }
LABEL_20:
      v13 = (_QWORD *)IMSClientManager::delegateForStack(a2);
      v14 = 21;
LABEL_21:
      (*(void (**)(void))(*v13 + 8 * v14))();
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      return;
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 56))(v5);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 16))(v5, v15);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Event notification: ID of thumper call is empty", 47);
    *(_BYTE *)(v15 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v15 + 17) = 0;
  }
}

void sub_1BEF1D208(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void `non-virtual thunk to'IMSDialogEventManager::handleDialogEvent(uint64_t a1, void **a2, uint64_t a3)
{
  IMSDialogEventManager::handleDialogEvent(a1 - 8, a2, a3);
}

_QWORD *IMSDialogEventManager::logPrefix(IMSDialogEventManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"DialogEventManager: ", 20);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

_QWORD *`non-virtual thunk to'IMSDialogEventManager::logPrefix(IMSDialogEventManager *this, ImsOutStream *a2)
{
  _QWORD *result;

  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"DialogEventManager: ", 20);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void BambiDialogEventDelegate::~BambiDialogEventDelegate(BambiDialogEventDelegate *this)
{
  JUMPOUT(0x1C3B87100);
}

double ims::analytics::RegistrationAttemptEvent::createRegistrationAttempt@<D0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  void *v13;
  uint64_t v14;
  void *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  const char *v22;
  xpc_object_t v23;
  _BOOL4 v24;
  const char *v25;
  uint64_t v26;
  const char *v27;
  const char *v28;
  uint64_t v29;
  const char *v30;
  unint64_t *v32;
  unint64_t v33;
  double result;
  std::__shared_weak_count *v35;
  __int128 v36;
  xpc_object_t v37;
  xpc_object_t v38;
  xpc_object_t v39;
  xpc_object_t v40;
  xpc_object_t v41;
  xpc_object_t v42;
  xpc_object_t object;
  uint64_t v44;
  const char *v45;
  xpc_object_t v46;
  xpc_object_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  xpc_object_t v50;
  xpc_object_t v51;

  v36 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_128RegistrationAttemptEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(&v36);
  v8 = v36;
  v10 = *a1;
  v9 = (std::__shared_weak_count *)a1[1];
  v35 = v9;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  v15 = *(void **)(v8 + 112);
  v14 = v8 + 112;
  v13 = v15;
  v50 = v15;
  if (v15)
    xpc_retain(v13);
  else
    v50 = xpc_null_create();
  v48 = v10;
  v49 = v9;
  if (v9)
  {
    v16 = (unint64_t *)&v9->__shared_owners_;
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
  }
  ims::analytics::populateCellularInfo(&v50, (uint64_t)&v48);
  v18 = v49;
  if (v49)
  {
    v19 = (unint64_t *)&v49->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
  xpc_release(v50);
  v50 = 0;
  if (a3)
  {
    v21 = time(0);
    v46 = xpc_int64_create((v21 - a3));
    if (!v46)
      v46 = xpc_null_create();
    v44 = v14;
    v45 = "timeafterlastreg";
    xpc::dict::object_proxy::operator=((uint64_t)&v44, &v46, &v47);
    xpc_release(v47);
    v47 = 0;
    xpc_release(v46);
    v46 = 0;
  }
  if (*(_BYTE *)(a2 + 88))
    v22 = "ATM_REG_RE";
  else
    v22 = "ATM_REG_INIT";
  v42 = xpc_string_create(v22);
  if (!v42)
    v42 = xpc_null_create();
  v44 = v14;
  v45 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v44, &v42, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v42);
  v42 = 0;
  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_WORD *)(a2 + 90))
    {
      v40 = xpc_string_create("ATM_REG_DE_Others1");
      if (!v40)
        v40 = xpc_null_create();
    }
    else
    {
      v40 = xpc_string_create("ATM_REG_DE_UE");
      if (!v40)
        v40 = xpc_null_create();
    }
  }
  else
  {
    if (!*(_WORD *)(a2 + 90))
      goto LABEL_36;
    v40 = xpc_string_create("ATM_REG_RE_A");
    if (!v40)
      v40 = xpc_null_create();
  }
  v44 = v14;
  v45 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v44, &v40, &v41);
  xpc_release(v41);
  v41 = 0;
  xpc_release(v40);
  v40 = 0;
LABEL_36:
  v44 = v14;
  v45 = "type";
  v51 = 0;
  xpc::dict::object_proxy::operator xpc::object((uint64_t)&v44, &v51);
  v23 = xpc_string_create("ATM_REG_RE");
  if (!v23)
    v23 = xpc_null_create();
  v24 = xpc_equal(v51, v23);
  xpc_release(v23);
  xpc_release(v51);
  if (v24)
  {
    v27 = *(const char **)(a2 + 96);
    v26 = a2 + 96;
    v25 = v27;
    if (*(char *)(v26 + 23) >= 0)
      v28 = (const char *)v26;
    else
      v28 = v25;
    v39 = xpc_string_create(v28);
    if (!v39)
      v39 = xpc_null_create();
    v44 = v14;
    v45 = "rereg_reason";
    xpc::dict::object_proxy::operator=((uint64_t)&v44, &v39, &v51);
    xpc_release(v51);
    v51 = 0;
    xpc_release(v39);
    v39 = 0;
  }
  if (*(char *)(v10 + 3231) < 0)
    v29 = *(_QWORD *)(v10 + 3216);
  else
    v29 = *(unsigned __int8 *)(v10 + 3231);
  v30 = (const char *)(v10 + 3136);
  if (v29)
  {
    if (*(char *)(v10 + 3255) < 0 ? *(_QWORD *)(v10 + 3240) : *(unsigned __int8 *)(v10 + 3255))
      v30 = (const char *)(v10 + 3208);
  }
  if (v30[23] < 0)
    v30 = *(const char **)v30;
  v37 = xpc_string_create(v30);
  if (!v37)
    v37 = xpc_null_create();
  v44 = v14;
  v45 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&v44, &v37, &v38);
  xpc_release(v38);
  v38 = 0;
  xpc_release(v37);
  if (v35)
  {
    v32 = (unint64_t *)&v35->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  result = *(double *)&v36;
  *a4 = v36;
  return result;
}

void sub_1BEF1D740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  void *v11;
  uint64_t v12;

  xpc_release(v11);
  xpc_release(*(xpc_object_t *)(v12 - 56));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_128RegistrationAttemptEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(_QWORD *a1)
{
  _QWORD *v2;
  xpc_object_t v3;
  xpc_object_t v4;
  xpc_object_t v5;
  std::string __p;

  v2 = operator new(0x90uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_1E78C7078;
  v2[3] = off_1E78C71B0;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.ca.regattempt");
  ImsLogContainer::ImsLogContainer((uint64_t)(v2 + 4), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v2[3] = off_1E78C70C8;
  v2[4] = &unk_1E78C7100;
  v3 = xpc_dictionary_create(0, 0, 0);
  v4 = v3;
  if (v3)
  {
    v2[17] = v3;
  }
  else
  {
    v4 = xpc_null_create();
    v2[17] = v4;
    if (!v4)
    {
      v5 = xpc_null_create();
      v4 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C3B87B98](v4) != MEMORY[0x1E0C812F8])
  {
    v5 = xpc_null_create();
LABEL_10:
    v2[17] = v5;
    goto LABEL_11;
  }
  xpc_retain(v4);
LABEL_11:
  xpc_release(v4);
  *a1 = v2 + 3;
  a1[1] = v2;
}

void sub_1BEF1D8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  void *v17;

  if (a15 < 0)
    operator delete(__p);
  std::__shared_weak_count::~__shared_weak_count(v15);
  operator delete(v17);
  _Unwind_Resume(a1);
}

double ims::analytics::RegistrationAttemptEvent::createDeregistrationAttempt@<D0>(uint64_t *a1@<X0>, _OWORD *a2@<X8>)
{
  double v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  void *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  const char *v18;
  unint64_t *v20;
  unint64_t v21;
  double result;
  std::__shared_weak_count *v23;
  double v24[3];
  xpc_object_t v25;
  xpc_object_t v26;
  uint64_t v27;
  const char *v28;
  xpc_object_t object;
  xpc_object_t v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  xpc_object_t v33;

  *(_OWORD *)v24 = 0uLL;
  _ZNSt3__111make_sharedB8ne180100IN12_GLOBAL__N_128RegistrationAttemptEventImplEJEvEENS_10shared_ptrIT_EEDpOT0_(v24);
  v4 = v24[0];
  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v23 = v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  v11 = *(void **)(*(_QWORD *)&v4 + 112);
  v10 = *(_QWORD *)&v4 + 112;
  v9 = v11;
  v33 = v11;
  if (v11)
    xpc_retain(v9);
  else
    v33 = xpc_null_create();
  v31 = v6;
  v32 = v5;
  if (v5)
  {
    v12 = (unint64_t *)&v5->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  ims::analytics::populateCellularInfo(&v33, (uint64_t)&v31);
  v14 = v32;
  if (v32)
  {
    v15 = (unint64_t *)&v32->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  xpc_release(v33);
  v33 = 0;
  object = xpc_string_create("ATM_REG_DE_UE");
  if (!object)
    object = xpc_null_create();
  v27 = v10;
  v28 = "type";
  xpc::dict::object_proxy::operator=((uint64_t)&v27, &object, &v30);
  xpc_release(v30);
  v30 = 0;
  xpc_release(object);
  object = 0;
  if (*(char *)(v6 + 3231) < 0)
    v17 = *(_QWORD *)(v6 + 3216);
  else
    v17 = *(unsigned __int8 *)(v6 + 3231);
  v18 = (const char *)(v6 + 3136);
  if (v17)
  {
    if (*(char *)(v6 + 3255) < 0 ? *(_QWORD *)(v6 + 3240) : *(unsigned __int8 *)(v6 + 3255))
      v18 = (const char *)(v6 + 3208);
  }
  if (v18[23] < 0)
    v18 = *(const char **)v18;
  v25 = xpc_string_create(v18);
  if (!v25)
    v25 = xpc_null_create();
  v27 = v10;
  v28 = "rat_info";
  xpc::dict::object_proxy::operator=((uint64_t)&v27, &v25, &v26);
  xpc_release(v26);
  v26 = 0;
  xpc_release(v25);
  if (v23)
  {
    v20 = (unint64_t *)&v23->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  result = v24[0];
  *a2 = *(_OWORD *)v24;
  return result;
}

void sub_1BEF1DB24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v11 - 56);
  xpc_release(*(xpc_object_t *)(v11 - 40));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<`anonymous namespace'::RegistrationAttemptEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::RegistrationAttemptEventImpl>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::RegistrationAttemptEventImpl>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void `anonymous namespace'::RegistrationAttemptEventImpl::~RegistrationAttemptEventImpl(_anonymous_namespace_::RegistrationAttemptEventImpl *this)
{
  *(_QWORD *)this = off_1E78C70C8;
  *((_QWORD *)this + 1) = &unk_1E78C7100;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
}

{
  *(_QWORD *)this = off_1E78C70C8;
  *((_QWORD *)this + 1) = &unk_1E78C7100;
  xpc_release(*((xpc_object_t *)this + 14));
  *((_QWORD *)this + 14) = 0;
  *((_QWORD *)this + 1) = off_1E78CFE68;
  if (*((char *)this + 63) < 0)
    operator delete(*((void **)this + 5));
  if (*((char *)this + 39) < 0)
    operator delete(*((void **)this + 2));
  JUMPOUT(0x1C3B87100);
}

xpc_object_t `anonymous namespace'::RegistrationAttemptEventImpl::getDict@<X0>(_anonymous_namespace_::RegistrationAttemptEventImpl *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  xpc_object_t result;

  v2 = (void *)*((_QWORD *)this + 14);
  *a2 = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

_QWORD *`anonymous namespace'::RegistrationAttemptEventImpl::getName@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:ne180100]<0>(a1, "atm_Registration_Attempt");
}

void `non-virtual thunk to'`anonymous namespace'::RegistrationAttemptEventImpl::~RegistrationAttemptEventImpl(_anonymous_namespace_::RegistrationAttemptEventImpl *this)
{
  *((_QWORD *)this - 1) = off_1E78C70C8;
  *(_QWORD *)this = &unk_1E78C7100;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  *((_QWORD *)this - 1) = off_1E78C70C8;
  *(_QWORD *)this = &unk_1E78C7100;
  xpc_release(*((xpc_object_t *)this + 13));
  *((_QWORD *)this + 13) = 0;
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
  JUMPOUT(0x1C3B87100);
}

void LazuliFailureReportHeader::create(const std::string *a1@<X0>, std::string **a2@<X8>)
{
  std::string *v4;
  unint64_t *p_size;
  std::string *v6;
  std::__shared_weak_count *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = (std::string *)operator new(0x70uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  p_size = &v4->__r_.__value_.__l.__size_;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C7260;
  v6 = v4 + 1;
  LazuliStringHeader::LazuliStringHeader(v4 + 1, &LazuliHeader::kHeaderFailureReport, a1);
  v4[4].__r_.__value_.__s.__data_[8] = 1;
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C72B0;
  v7 = (std::__shared_weak_count *)v4[1].__r_.__value_.__r.__words[2];
  if (v7)
  {
    if (v7->__shared_owners_ != -1)
      goto LABEL_14;
    do
      v8 = __ldxr(p_size);
    while (__stxr(v8 + 1, p_size));
    v9 = &v4->__r_.__value_.__r.__words[2];
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
    v4[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    v4[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    do
      v11 = __ldxr(p_size);
    while (__stxr(v11 + 1, p_size));
    v12 = &v4->__r_.__value_.__r.__words[2];
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
    v4[1].__r_.__value_.__l.__size_ = (std::string::size_type)v6;
    v4[1].__r_.__value_.__r.__words[2] = (std::string::size_type)v4;
  }
  do
    v14 = __ldaxr(p_size);
  while (__stlxr(v14 - 1, p_size));
  if (!v14)
  {
    (*(void (**)(std::string *))(v4->__r_.__value_.__r.__words[0] + 16))(v4);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v4);
  }
LABEL_14:
  *a2 = v6;
  a2[1] = v4;
}

void sub_1BEF1DEF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void LazuliFailureReportHeader::~LazuliFailureReportHeader(void **this)
{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

double LazuliFailureReportHeader::clone@<D0>(LazuliFailureReportHeader *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v4;
  double result;
  __int128 v6;

  v4 = operator new(0x70uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C7328;
  LazuliStringHeader::LazuliStringHeader((uint64_t)(v4 + 3), (uint64_t)this);
  v4[3] = off_1E78C71E8;
  *((_BYTE *)v4 + 104) = 1;
  *(_QWORD *)&v6 = v4 + 3;
  *((_QWORD *)&v6 + 1) = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v6, v4 + 4, (uint64_t)(v4 + 3));
  result = *(double *)&v6;
  *a2 = v6;
  return result;
}

void sub_1BEF1E020(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7260;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7260;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper,std::allocator<LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void LazuliFailureReportHeader::create(std::string const&)::HeaderWrapper::~HeaderWrapper(void **this)
{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
}

{
  *this = off_1E78E8B08;
  if (*((char *)this + 79) < 0)
    operator delete(this[7]);
  LazuliHeader::~LazuliHeader(this);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFailureReportHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliFailureReportHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t MessageSession::MessageSession(uint64_t a1, const std::string *a2)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "msg.session");
  ImsLogContainer::ImsLogContainer(a1, &__p, a2);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = &unk_1E78C74C0;
  *(_QWORD *)a1 = &off_1E78C7378;
  *(_QWORD *)(a1 + 104) = &unk_1E78C7438;
  *(_QWORD *)(a1 + 112) = &unk_1E78C7480;
  *(_BYTE *)(a1 + 144) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 152));
  *(_OWORD *)(a1 + 353) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 376) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_QWORD *)(a1 + 488) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 496) = 0;
  *(_WORD *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  *(_QWORD *)(a1 + 544) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 552) = a1 + 560;
  *(_BYTE *)(a1 + 577) = 1;
  *(_QWORD *)(a1 + 472) = 0;
  *(_QWORD *)(a1 + 480) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 648) = 0u;
  *(_OWORD *)(a1 + 664) = 0u;
  *(_OWORD *)(a1 + 680) = 0u;
  *(_OWORD *)(a1 + 696) = 0u;
  *(_OWORD *)(a1 + 712) = 0u;
  *(_OWORD *)(a1 + 728) = 0u;
  *(_QWORD *)(a1 + 792) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_QWORD *)(a1 + 808) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_QWORD *)(a1 + 816) = a1 + 824;
  *(_QWORD *)(a1 + 848) = &off_1E78B82D8;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_QWORD *)(a1 + 856) = a1 + 864;
  *(_BYTE *)(a1 + 576) = 1;
  *(_WORD *)(a1 + 840) = 257;
  *(_WORD *)(a1 + 880) = 257;
  *(_BYTE *)(a1 + 800) = 0;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_DWORD *)(a1 + 920) = 1065353216;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_DWORD *)(a1 + 944) = 0;
  *(_OWORD *)(a1 + 928) = 0u;
  *(_DWORD *)(a1 + 984) = 1065353216;
  *(_OWORD *)(a1 + 992) = 0u;
  *(_OWORD *)(a1 + 1008) = 0u;
  *(_DWORD *)(a1 + 1024) = 1065353216;
  *(_DWORD *)(a1 + 1064) = 1065353216;
  *(_QWORD *)(a1 + 256) = a1 + 136;
  *(_OWORD *)(a1 + 1032) = 0u;
  *(_OWORD *)(a1 + 1048) = 0u;
  std::string::operator=((std::string *)(a1 + 200), (const std::string *)(a1 + 8));
  std::string::operator=((std::string *)(a1 + 224), a2);
  return a1;
}

void sub_1BEF1E368(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, SipTimerContainer *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;
  std::__shared_weak_count *v23;

  v23 = *(std::__shared_weak_count **)(v21 + 128);
  if (v23)
    std::__shared_weak_count::__release_weak(v23);
  ImsLogContainer::~ImsLogContainer((void **)v21);
  _Unwind_Resume(a1);
}

void MessageSession::~MessageSession(MessageSession *this)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  SipSubscription *v11;
  uint64_t v12;
  int v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  std::__shared_weak_count *v22;
  void *__p;
  std::__shared_weak_count *v24;
  char v25;
  SipSubscription *v26;
  std::__shared_weak_count *v27;

  *(_QWORD *)this = &off_1E78C7378;
  *((_QWORD *)this + 13) = &unk_1E78C7438;
  *((_QWORD *)this + 14) = &unk_1E78C7480;
  *((_QWORD *)this + 17) = &unk_1E78C74C0;
  if (*((char *)this + 399) < 0)
    v2 = *((_QWORD *)this + 48);
  else
    v2 = *((unsigned __int8 *)this + 399);
  v3 = (void **)((char *)this + 376);
  if (v2)
  {
    v26 = 0;
    v27 = 0;
    v4 = *((_QWORD *)this + 40);
    v6 = *(_QWORD *)(v4 + 208);
    v5 = *(std::__shared_weak_count **)(v4 + 216);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    SipDialogManager::getSubscription(v6, (uint64_t)"conference", (uint64_t)this + 376, &__p, &v26);
    if (v25 < 0)
      operator delete(__p);
    if (v5)
    {
      v9 = (unint64_t *)&v5->__shared_owners_;
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v11 = v26;
    if (v26)
    {
      SipDialog::stack(*((std::__shared_weak_count **)this + 40), &__p);
      v12 = SipUserAgent::config(*((SipUserAgent **)__p + 18));
      v13 = SipTimers::timerValue((SipTimers *)(v12 + 512), (const SipTimer *)&SipTimers::kTimerT1, 0);
      SipSubscription::scheduleTermination(v11, 2 * v13, 0);
      v14 = v24;
      if (v24)
      {
        v15 = (unint64_t *)&v24->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    v17 = v27;
    if (v27)
    {
      v18 = (unint64_t *)&v27->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
  }
  std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::~__hash_table((uint64_t)this + 1032);
  std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::~__hash_table((uint64_t)this + 992);
  std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::~__hash_table((uint64_t)this + 952);
  std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::~__hash_table((uint64_t)this + 888);
  SipUri::~SipUri((MessageSession *)((char *)this + 480));
  v20 = (std::__shared_weak_count *)*((_QWORD *)this + 59);
  if (v20)
    std::__shared_weak_count::__release_weak(v20);
  v21 = (std::__shared_weak_count *)*((_QWORD *)this + 57);
  if (v21)
    std::__shared_weak_count::__release_weak(v21);
  __p = (char *)this + 424;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  __p = (char *)this + 400;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__p);
  if (*((char *)this + 399) < 0)
    operator delete(*v3);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 352);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 336);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)this + 320);
  if (*((char *)this + 319) < 0)
    operator delete(*((void **)this + 37));
  SipTimerContainer::~SipTimerContainer((MessageSession *)((char *)this + 152));
  v22 = (std::__shared_weak_count *)*((_QWORD *)this + 16);
  if (v22)
    std::__shared_weak_count::__release_weak(v22);
  *(_QWORD *)this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(*((void **)this + 4));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

{
  MessageSession::~MessageSession(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'MessageSession::~MessageSession(MessageSession *this)
{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 104));
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 112));
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 136));
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 104));
  JUMPOUT(0x1C3B87100);
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 112));
  JUMPOUT(0x1C3B87100);
}

{
  MessageSession::~MessageSession((MessageSession *)((char *)this - 136));
  JUMPOUT(0x1C3B87100);
}

void MessageSession::logPrefix(MessageSession *this, ImsOutStream *a2)
{
  void *__p[2];
  char v4;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)this + 80))(__p);
  (*(void (**)(ImsOutStream *, void **))(*(_QWORD *)a2 + 40))(a2, __p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_1BEF1E800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MessageSession::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "MessageSession");
}

void `non-virtual thunk to'MessageSession::loggableName(LoggableString *a1@<X8>)
{
  LoggableString::LoggableString(a1, "MessageSession");
}

void MessageSession::initialize(std::chrono::steady_clock::time_point *a1, uint64_t *a2, uint64_t *a3, uint64_t a4, const std::string *a5)
{
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v11;
  uint64_t v12;
  uint64_t v13;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v14;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *rep;
  uint64_t v21;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v22;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t v29;
  uint64_t v30;
  std::__shared_weak_count **v31;
  std::string::size_type v32;
  std::string::size_type v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  char *v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *size;
  unint64_t *v42;
  unint64_t v43;
  ImsPrefs *v44;
  void **LazuliConferenceFactoryKey;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t p_shared_weak_owners;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  int v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::__shared_weak_count *v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  const void *v72;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v73;
  std::__shared_weak_count *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  LazuliRouteSet *v78;
  LazuliUri **v79;
  LazuliUri *v80;
  uint64_t v81;
  uint64_t v82;
  unsigned __int16 v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  std::__shared_weak_count *v93;
  unint64_t *v94;
  unint64_t v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *p_shared_owners;
  unint64_t v100;
  _QWORD v101[2];
  uint64_t v102;
  std::__shared_weak_count *v103;
  uint64_t v104;
  std::__shared_weak_count *v105;
  SipStack *v106;
  std::__shared_weak_count *v107;
  std::string __p;
  void **v109[10];
  uint64_t v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  uint64_t v126;
  void (**v127)(SipParameterMap *__hidden);
  _QWORD *v128;
  _QWORD v129[5];
  _QWORD v130[3];
  std::string v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  void (**v137)(SipParameterMap *__hidden);
  uint64_t *v138;
  uint64_t v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  __int128 v144;
  __int128 v145;
  __int128 v146;
  __int128 v147;
  __int128 v148;
  __int128 v149;
  __int128 v150;
  __int128 v151;
  __int128 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  void (**v156)(SipParameterMap *__hidden);
  _QWORD *v157;
  _QWORD v158[5];
  _QWORD v159[4];
  LazuliUri ***v160;
  std::__shared_weak_count *v161;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v162;
  std::__shared_weak_count *v163;
  uint64_t v164;
  std::__shared_weak_count *v165;

  v6 = (std::__shared_weak_count *)a2[1];
  if (!v6)
    return;
  v11 = std::__shared_weak_count::lock(v6);
  v165 = v11;
  if (!v11)
    return;
  v12 = *a2;
  v164 = v12;
  if (!v12)
  {
    v67 = v11;
LABEL_128:
    p_shared_owners = (unint64_t *)&v67->__shared_owners_;
    do
      v100 = __ldaxr(p_shared_owners);
    while (__stlxr(v100 - 1, p_shared_owners));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
    return;
  }
  if (*(_BYTE *)(v12 + 1856))
    v13 = v12 + 1496;
  else
    v13 = 0;
  v14 = *(_QWORD *)(v13 + 328);
  v15 = *(_QWORD *)(v13 + 336);
  v162 = v14;
  v163 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    v16 = (unint64_t *)(v15 + 8);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (unint64_t *)(v15 + 16);
    do
      v19 = __ldxr(v18);
    while (__stxr(v19 + 1, v18));
  }
  rep = (std::__shared_weak_count *)a1[57].__d_.__rep_;
  a1[56].__d_.__rep_ = v14;
  a1[57].__d_.__rep_ = v15;
  if (rep)
    std::__shared_weak_count::__release_weak(rep);
  if (*(_BYTE *)(v12 + 1856))
    v21 = v12 + 1496;
  else
    v21 = 0;
  v22 = *(_QWORD *)(v21 + 344);
  v23 = *(_QWORD *)(v21 + 352);
  v160 = (LazuliUri ***)v22;
  v161 = (std::__shared_weak_count *)v23;
  if (v23)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = (unint64_t *)(v23 + 16);
    do
      v27 = __ldxr(v26);
    while (__stxr(v27 + 1, v26));
  }
  v28 = (std::__shared_weak_count *)a1[59].__d_.__rep_;
  a1[58].__d_.__rep_ = v22;
  a1[59].__d_.__rep_ = v23;
  if (v28)
    std::__shared_weak_count::__release_weak(v28);
  if (*(_BYTE *)(v12 + 1856))
    v29 = v12 + 1496;
  else
    v29 = 0;
  memset(&v131, 0, sizeof(v131));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, *(__int128 **)(v29 + 280), *(__int128 **)(v29 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v29 + 288) - *(_QWORD *)(v29 + 280)) >> 3));
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&a1[50]);
  *(std::string *)&a1[50].__d_.__rep_ = v131;
  memset(&v131, 0, sizeof(v131));
  v109[0] = (void **)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v109);
  if (*(_BYTE *)(v12 + 1856))
    v30 = v12 + 1496;
  else
    v30 = 0;
  memset(&v131, 0, sizeof(v131));
  std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(&v131, *(__int128 **)(v30 + 304), *(__int128 **)(v30 + 312), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v30 + 312) - *(_QWORD *)(v30 + 304)) >> 3));
  std::vector<std::string>::__vdeallocate((std::vector<std::string> *)&a1[53]);
  *(std::string *)&a1[53].__d_.__rep_ = v131;
  memset(&v131, 0, sizeof(v131));
  v109[0] = (void **)&v131;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](v109);
  v31 = (std::__shared_weak_count **)&a1[40];
  std::shared_ptr<IpAddress>::operator=[abi:ne180100](&a1[40].__d_.__rep_, a3);
  std::string::operator=((std::string *)&a1[37], a5);
  v32 = *(_QWORD *)(a1[40].__d_.__rep_ + 208);
  v33 = *(_QWORD *)(a1[40].__d_.__rep_ + 216);
  v131.__r_.__value_.__r.__words[0] = v32;
  v131.__r_.__value_.__l.__size_ = v33;
  if (v33)
  {
    v34 = (unint64_t *)(v33 + 8);
    do
      v35 = __ldxr(v34);
    while (__stxr(v35 + 1, v34));
  }
  v36 = *(_QWORD *)(*(_QWORD *)(v32 + 136) + 224);
  v37 = (char *)operator new(0x88uLL);
  *((_QWORD *)v37 + 1) = 0;
  *((_QWORD *)v37 + 2) = 0;
  *((_QWORD *)v37 + 3) = v36;
  *(_QWORD *)v37 = &off_1E78C7568;
  *((_OWORD *)v37 + 2) = 0u;
  *((_OWORD *)v37 + 3) = 0u;
  v37[64] = 0;
  *(_OWORD *)(v37 + 72) = 0u;
  *(_OWORD *)(v37 + 88) = 0u;
  *(_OWORD *)(v37 + 104) = 0u;
  *(_OWORD *)(v37 + 120) = 0u;
  v38 = (std::__shared_weak_count *)a1[45].__d_.__rep_;
  a1[44].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)(v37 + 24);
  a1[45].__d_.__rep_ = (std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep)v37;
  if (v38)
  {
    v39 = (unint64_t *)&v38->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  size = (std::__shared_weak_count *)v131.__r_.__value_.__l.__size_;
  if (v131.__r_.__value_.__l.__size_)
  {
    v42 = (unint64_t *)(v131.__r_.__value_.__l.__size_ + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v159[2] = 257;
  v158[2] = 257;
  v155 = 0;
  v140 = 0u;
  v134 = 0;
  v136 = 0;
  v135 = 0;
  v133 = 0;
  v131.__r_.__value_.__l.__size_ = (std::string::size_type)&off_1E78D08F8;
  v131.__r_.__value_.__r.__words[2] = 0;
  v132 = 0;
  *(_QWORD *)&v140 = 0;
  v139 = 0;
  v137 = &off_1E78B82D8;
  v138 = &v139;
  v131.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BFCE8;
  v151 = 0u;
  v152 = 0u;
  v153 = 0u;
  v141 = 0u;
  v142 = 0u;
  v143 = 0u;
  v144 = 0u;
  v145 = 0u;
  v146 = 0u;
  v147 = 0u;
  v148 = 0u;
  v149 = 0u;
  v150 = 0u;
  v154 = 0;
  v156 = &off_1E78B82D8;
  v158[1] = 0;
  v158[0] = 0;
  v157 = v158;
  v159[1] = 0;
  v159[0] = 0;
  v158[3] = &off_1E78B82D8;
  v158[4] = v159;
  WORD4(v140) = 257;
  v130[2] = 257;
  v129[2] = 257;
  v126 = 0;
  v111 = 0u;
  v109[1] = (void **)&off_1E78D08F8;
  memset(&v109[2], 0, 48);
  v110 = 0;
  *(_QWORD *)&v111 = 0;
  v109[8] = (void **)&off_1E78B82D8;
  v109[9] = (void **)&v110;
  v109[0] = (void **)&off_1E78BFCE8;
  v122 = 0u;
  v123 = 0u;
  v124 = 0u;
  v112 = 0u;
  v113 = 0u;
  v114 = 0u;
  v115 = 0u;
  v116 = 0u;
  v117 = 0u;
  v118 = 0u;
  v119 = 0u;
  v120 = 0u;
  v121 = 0u;
  v125 = 0;
  v129[0] = 0;
  v129[1] = 0;
  v127 = &off_1E78B82D8;
  v128 = v129;
  v130[0] = 0;
  v130[1] = 0;
  v129[3] = &off_1E78B82D8;
  v129[4] = v130;
  WORD4(v111) = 257;
  SipDialog::stack(*v31, &v106);
  v44 = (ImsPrefs *)SipStack::prefs(v106);
  LazuliConferenceFactoryKey = (void **)ImsPrefs::getLazuliConferenceFactoryKey(v44);
  ImsPrefs::stringValue(v44, LazuliConferenceFactoryKey);
  SipUri::fromString((uint64_t)&v131, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v46 = v107;
  if (v107)
  {
    v47 = (unint64_t *)&v107->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  if (SipUri::matches((SipUri *)&(*v31)[9].__shared_owners_, (const SipUri *)&v131)
    && SipUri::isValidUri((SipUri *)&(*v31)[45].__shared_weak_owners_))
  {
    p_shared_weak_owners = (uint64_t)&(*v31)[45].__shared_weak_owners_;
  }
  else
  {
    p_shared_weak_owners = (uint64_t)&(*v31)[9].__shared_owners_;
  }
  SipUri::operator=((SipUri *)&a1[60], p_shared_weak_owners);
  v106 = 0;
  v107 = 0;
  (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v160[1] + 32))(&__p);
  (*(void (**)(SipStack **__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))(&v106);
  v50 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v51 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  v104 = 0;
  v105 = 0;
  (*(void (**)(std::string *__return_ptr))(***(_QWORD ***)(v162 + 8) + 32))(&__p);
  (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)__p.__r_.__value_.__l.__data_ + 32))(&v104);
  v53 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v54 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  v56 = v164;
  v57 = *(std::__shared_weak_count **)(v164 + 128);
  if (v57 && (v58 = std::__shared_weak_count::lock(v57)) != 0)
  {
    v59 = v58;
    v60 = *(unsigned __int8 *)(*(_QWORD *)(v56 + 120) + 2665);
    v61 = (unint64_t *)&v58->__shared_owners_;
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  else
  {
    v60 = MEMORY[0xA69];
  }
  memset(&__p, 0, sizeof(__p));
  v63 = v164;
  v102 = 0;
  v103 = 0;
  v64 = *(std::__shared_weak_count **)(v164 + 128);
  if (v64)
  {
    v65 = std::__shared_weak_count::lock(v64);
    v103 = v65;
    if (v65)
    {
      v66 = *(_QWORD *)(v63 + 120);
      v102 = v66;
      goto LABEL_77;
    }
  }
  else
  {
    v65 = 0;
  }
  v66 = 0;
LABEL_77:
  if (*(char *)(v66 + 2695) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)(v66 + 2672), *(_QWORD *)(v66 + 2680));
  else
    __p = *(std::string *)(v66 + 2672);
  if (v65)
  {
    v68 = (unint64_t *)&v65->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v70 = v164;
  v71 = *(unsigned __int8 *)(v164 + 146);
  v72 = *(const void **)(a4 + 8);
  v101[0] = off_1E78EAB00;
  v101[1] = v72;
  if (v72)
    CFRetain(v72);
  v101[0] = &off_1E78B7BD8;
  (*(void (**)(std::chrono::steady_clock::time_point *, SipStack **, uint64_t *, BOOL, BOOL, _QWORD *, std::string *))(a1->__d_.__rep_ + 144))(a1, &v106, &v104, v60 != 0, v71 != 0, v101, &__p);
  ims::CFType::~CFType((ims::CFType *)v101);
  v73 = a1[42].__d_.__rep_;
  if (!v73)
  {
    v82 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 56))(a1);
    (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v82);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v82 + 8), (uint64_t)"Transport failure", 17);
    *(_BYTE *)(v82 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v82 + 64))(v82, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v82 + 17) = 0;
    goto LABEL_105;
  }
  v75 = *(_QWORD *)(v73 + 32);
  v74 = *(std::__shared_weak_count **)(v73 + 40);
  v102 = v75;
  v103 = v74;
  if (v74)
  {
    v76 = (unint64_t *)&v74->__shared_owners_;
    do
      v77 = __ldxr(v76);
    while (__stxr(v77 + 1, v76));
  }
  if (v75 && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v75 + 88))(v75))
  {
    v78 = (LazuliRouteSet *)v160;
    v79 = v160[1];
    if (v79 == v160[2])
      v80 = 0;
    else
      v80 = *v79;
    v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 56))(v75);
    LazuliUri::setHostPort(v80, v83);
    v84 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 64))(a1);
    (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v84);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"Set localpath to ", 17);
    *(_BYTE *)(v84 + 17) = 0;
    LazuliRouteSet::toStream(v78, (ImsOutStream *)v84);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v84 + 17) = 0;
    *(_WORD *)(v70 + 144) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v75 + 56))(v75);
    if (v74)
    {
LABEL_100:
      v85 = (unint64_t *)&v74->__shared_owners_;
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
  }
  else
  {
    v81 = (*(uint64_t (**)(std::chrono::steady_clock::time_point *))(a1->__d_.__rep_ + 56))(a1);
    (*(void (**)(std::chrono::steady_clock::time_point *, uint64_t))(a1->__d_.__rep_ + 16))(a1, v81);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v81 + 8), (uint64_t)"local port info unavailable!", 28);
    *(_BYTE *)(v81 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v81 + 64))(v81, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v81 + 17) = 0;
    if (v74)
      goto LABEL_100;
  }
  a1[116].__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
LABEL_105:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v87 = v105;
  if (v105)
  {
    v88 = (unint64_t *)&v105->__shared_owners_;
    do
      v89 = __ldaxr(v88);
    while (__stlxr(v89 - 1, v88));
    if (!v89)
    {
      ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
      std::__shared_weak_count::__release_weak(v87);
    }
  }
  v90 = v107;
  if (v107)
  {
    v91 = (unint64_t *)&v107->__shared_owners_;
    do
      v92 = __ldaxr(v91);
    while (__stlxr(v92 - 1, v91));
    if (!v92)
    {
      ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
      std::__shared_weak_count::__release_weak(v90);
    }
  }
  SipUri::~SipUri((SipUri *)v109);
  SipUri::~SipUri((SipUri *)&v131);
  v93 = v161;
  if (v161)
  {
    v94 = (unint64_t *)&v161->__shared_owners_;
    do
      v95 = __ldaxr(v94);
    while (__stlxr(v95 - 1, v94));
    if (!v95)
    {
      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
      std::__shared_weak_count::__release_weak(v93);
    }
  }
  v96 = v163;
  if (v163)
  {
    v97 = (unint64_t *)&v163->__shared_owners_;
    do
      v98 = __ldaxr(v97);
    while (__stlxr(v98 - 1, v97));
    if (!v98)
    {
      ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
      std::__shared_weak_count::__release_weak(v96);
    }
  }
  v67 = v165;
  if (v165)
    goto LABEL_128;
}

void sub_1BEF1F330(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a71;
  uint64_t v71;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  SipUri::~SipUri((SipUri *)&a20);
  SipUri::~SipUri((SipUri *)&a71);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v71 - 128);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v71 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v71 - 96);
  _Unwind_Resume(a1);
}

void MessageSession::createTransport(_QWORD *a1, uint64_t *a2, _QWORD *a3, int a4, int a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  void (**v18)(ImsResult *__hidden);
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  const void *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  const void *v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  uint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  uint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  std::__shared_weak_count *v102;
  unint64_t *v103;
  unint64_t v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  unint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  std::__shared_weak_count *v116;
  uint64_t v117;
  std::__shared_weak_count *v118;
  _QWORD v119[2];
  uint64_t v120;
  std::__shared_weak_count *v121;
  uint64_t v122;
  std::__shared_weak_count *v123;
  uint64_t v124;
  std::__shared_weak_count *v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  std::__shared_weak_count *v129;
  _QWORD v130[2];
  uint64_t v131;
  std::__shared_weak_count *v132;
  uint64_t v133;
  std::__shared_weak_count *v134;
  uint64_t v135;
  std::__shared_weak_count *v136;
  void (**v137)(ImsResult *__hidden);
  std::__shared_weak_count *v138;
  __int128 v139;

  v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v14);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"MessageSession::createTransport", 31);
  *(_BYTE *)(v14 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v14 + 17) = 0;
  if (a5)
  {
    if (a4)
    {
      v15 = (std::__shared_weak_count *)a1[16];
      if (v15)
      {
        v16 = a1[15];
        v17 = std::__shared_weak_count::lock(v15);
        if (v17)
        {
          v18 = (void (**)(ImsResult *__hidden))(v16 + 104);
          if (!v16)
            v18 = 0;
          v137 = v18;
          v138 = v17;
          v135 = 0;
          v136 = 0;
          v19 = a2[1];
          v133 = *a2;
          v134 = (std::__shared_weak_count *)v19;
          if (v19)
          {
            v20 = (unint64_t *)(v19 + 8);
            do
              v21 = __ldxr(v20);
            while (__stxr(v21 + 1, v20));
          }
          v22 = (std::__shared_weak_count *)a3[1];
          v131 = *a3;
          v132 = v22;
          if (v22)
          {
            p_shared_owners = (unint64_t *)&v22->__shared_owners_;
            do
              v24 = __ldxr(p_shared_owners);
            while (__stxr(v24 + 1, p_shared_owners));
          }
          v25 = *(const void **)(a6 + 8);
          v130[0] = off_1E78EAB00;
          v130[1] = v25;
          if (v25)
            CFRetain(v25);
          v130[0] = &off_1E78B7BD8;
          MsrpTransportTls::createConnection(&v137, &v133, &v131, (uint64_t)v130, a7, (uint64_t)&v139);
          std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 42), &v139);
          v26 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1))
          {
            v27 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v28 = __ldaxr(v27);
            while (__stlxr(v28 - 1, v27));
            if (!v28)
            {
              ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
              std::__shared_weak_count::__release_weak(v26);
            }
          }
          ims::CFType::~CFType((ims::CFType *)v130);
          v29 = v132;
          if (v132)
          {
            v30 = (unint64_t *)&v132->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
          v32 = v134;
          if (v134)
          {
            v33 = (unint64_t *)&v134->__shared_owners_;
            do
              v34 = __ldaxr(v33);
            while (__stlxr(v34 - 1, v33));
            if (!v34)
            {
              ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
              std::__shared_weak_count::__release_weak(v32);
            }
          }
          v35 = v138;
          if (v138)
          {
            v36 = (unint64_t *)&v138->__shared_owners_;
            do
              v37 = __ldaxr(v36);
            while (__stlxr(v37 - 1, v36));
            if (!v37)
            {
              ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
              std::__shared_weak_count::__release_weak(v35);
            }
          }
          v38 = v136;
          if (v136)
          {
            v39 = (unint64_t *)&v136->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            goto LABEL_101;
          }
          goto LABEL_103;
        }
      }
    }
    else
    {
      v61 = (std::__shared_weak_count *)a1[16];
      if (v61)
      {
        v62 = a1[15];
        v63 = std::__shared_weak_count::lock(v61);
        if (v63)
        {
          v64 = v62 + 104;
          if (!v62)
            v64 = 0;
          v128 = v64;
          v129 = v63;
          v135 = 0;
          v136 = 0;
          v65 = a2[1];
          v126 = *a2;
          v127 = (std::__shared_weak_count *)v65;
          if (v65)
          {
            v66 = (unint64_t *)(v65 + 8);
            do
              v67 = __ldxr(v66);
            while (__stxr(v67 + 1, v66));
          }
          v68 = (std::__shared_weak_count *)a3[1];
          v124 = *a3;
          v125 = v68;
          if (v68)
          {
            v69 = (unint64_t *)&v68->__shared_owners_;
            do
              v70 = __ldxr(v69);
            while (__stxr(v70 + 1, v69));
          }
          MsrpTransportTcp::createConnection(&v128, &v126, &v124, (uint64_t)&v139);
          std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 42), &v139);
          v71 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          if (*((_QWORD *)&v139 + 1))
          {
            v72 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
            do
              v73 = __ldaxr(v72);
            while (__stlxr(v73 - 1, v72));
            if (!v73)
            {
              ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
              std::__shared_weak_count::__release_weak(v71);
            }
          }
          v74 = v125;
          if (v125)
          {
            v75 = (unint64_t *)&v125->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v77 = v127;
          if (v127)
          {
            v78 = (unint64_t *)&v127->__shared_owners_;
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = v129;
          if (v129)
          {
            v81 = (unint64_t *)&v129->__shared_owners_;
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          v38 = v136;
          if (v136)
          {
            v83 = (unint64_t *)&v136->__shared_owners_;
            do
              v40 = __ldaxr(v83);
            while (__stlxr(v40 - 1, v83));
LABEL_101:
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
LABEL_103:
          if (a1[42])
          {
            v84 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v84);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)"MessageSession MO-MSRP ", 23);
            *(_BYTE *)(v84 + 17) = 0;
            v85 = a1[42];
            v86 = *(_QWORD *)(v85 + 32);
            v87 = *(std::__shared_weak_count **)(v85 + 40);
            *(_QWORD *)&v139 = v86;
            *((_QWORD *)&v139 + 1) = v87;
            if (v87)
            {
              v88 = (unint64_t *)&v87->__shared_owners_;
              do
                v89 = __ldxr(v88);
              while (__stxr(v89 + 1, v88));
            }
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v86 + 40))(v86, v84);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v84 + 8), (uint64_t)" --> ", 5);
            *(_BYTE *)(v84 + 17) = 0;
            (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a3 + 40))(*a3, v84);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v84 + 64))(v84, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v84 + 17) = 0;
            if (v87)
            {
              v90 = (unint64_t *)&v87->__shared_owners_;
              do
                v91 = __ldaxr(v90);
              while (__stlxr(v91 - 1, v90));
LABEL_145:
              if (!v91)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
              return;
            }
          }
          return;
        }
      }
    }
LABEL_148:
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  if (a4)
  {
    v41 = (std::__shared_weak_count *)a1[16];
    if (!v41)
      goto LABEL_148;
    v42 = a1[15];
    v43 = std::__shared_weak_count::lock(v41);
    if (!v43)
      goto LABEL_148;
    v44 = v42 + 104;
    if (!v42)
      v44 = 0;
    v122 = v44;
    v123 = v43;
    v135 = 0;
    v136 = 0;
    v45 = a2[1];
    v120 = *a2;
    v121 = (std::__shared_weak_count *)v45;
    if (v45)
    {
      v46 = (unint64_t *)(v45 + 8);
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
    }
    v48 = *(const void **)(a6 + 8);
    v119[0] = off_1E78EAB00;
    v119[1] = v48;
    if (v48)
      CFRetain(v48);
    v119[0] = &off_1E78B7BD8;
    MsrpTransportTls::createListener(&v122, &v120, 1, (uint64_t)v119, a7, (uint64_t)&v139);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 42), &v139);
    v49 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1))
    {
      v50 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    ims::CFType::~CFType((ims::CFType *)v119);
    v52 = v121;
    if (v121)
    {
      v53 = (unint64_t *)&v121->__shared_owners_;
      do
        v54 = __ldaxr(v53);
      while (__stlxr(v54 - 1, v53));
      if (!v54)
      {
        ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
        std::__shared_weak_count::__release_weak(v52);
      }
    }
    v55 = v123;
    if (v123)
    {
      v56 = (unint64_t *)&v123->__shared_owners_;
      do
        v57 = __ldaxr(v56);
      while (__stlxr(v57 - 1, v56));
      if (!v57)
      {
        ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
        std::__shared_weak_count::__release_weak(v55);
      }
    }
    v58 = v136;
    if (v136)
    {
      v59 = (unint64_t *)&v136->__shared_owners_;
      do
        v60 = __ldaxr(v59);
      while (__stlxr(v60 - 1, v59));
      goto LABEL_136;
    }
  }
  else
  {
    v92 = (std::__shared_weak_count *)a1[16];
    if (!v92)
      goto LABEL_148;
    v93 = a1[15];
    v94 = std::__shared_weak_count::lock(v92);
    if (!v94)
      goto LABEL_148;
    v95 = v93 + 104;
    if (!v93)
      v95 = 0;
    v117 = v95;
    v118 = v94;
    v135 = 0;
    v136 = 0;
    v96 = a2[1];
    v115 = *a2;
    v116 = (std::__shared_weak_count *)v96;
    if (v96)
    {
      v97 = (unint64_t *)(v96 + 8);
      do
        v98 = __ldxr(v97);
      while (__stxr(v98 + 1, v97));
    }
    MsrpTransportTcp::createListener(&v117, &v115, (uint64_t)&v139);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)(a1 + 42), &v139);
    v99 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
    if (*((_QWORD *)&v139 + 1))
    {
      v100 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 - 1, v100));
      if (!v101)
      {
        ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
        std::__shared_weak_count::__release_weak(v99);
      }
    }
    v102 = v116;
    if (v116)
    {
      v103 = (unint64_t *)&v116->__shared_owners_;
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 - 1, v103));
      if (!v104)
      {
        ((void (*)(std::__shared_weak_count *))v102->__on_zero_shared)(v102);
        std::__shared_weak_count::__release_weak(v102);
      }
    }
    v105 = v118;
    if (v118)
    {
      v106 = (unint64_t *)&v118->__shared_owners_;
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 - 1, v106));
      if (!v107)
      {
        ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
        std::__shared_weak_count::__release_weak(v105);
      }
    }
    v58 = v136;
    if (v136)
    {
      v108 = (unint64_t *)&v136->__shared_owners_;
      do
        v60 = __ldaxr(v108);
      while (__stlxr(v60 - 1, v108));
LABEL_136:
      if (!v60)
      {
        ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
        std::__shared_weak_count::__release_weak(v58);
      }
    }
  }
  if (a1[42])
  {
    v109 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v109);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v109 + 8), (uint64_t)"MessageSession MT-MSRP listening on ", 36);
    *(_BYTE *)(v109 + 17) = 0;
    v110 = a1[42];
    v111 = *(_QWORD *)(v110 + 32);
    v87 = *(std::__shared_weak_count **)(v110 + 40);
    *(_QWORD *)&v139 = v111;
    *((_QWORD *)&v139 + 1) = v87;
    if (v87)
    {
      v112 = (unint64_t *)&v87->__shared_owners_;
      do
        v113 = __ldxr(v112);
      while (__stxr(v113 + 1, v112));
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v111 + 40))(v111, v109);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v109 + 64))(v109, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v109 + 17) = 0;
    if (v87)
    {
      v114 = (unint64_t *)&v87->__shared_owners_;
      do
        v91 = __ldaxr(v114);
      while (__stlxr(v91 - 1, v114));
      goto LABEL_145;
    }
  }
}

void sub_1BEF1FCA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  va_list va1;

  va_start(va1, a7);
  va_start(va, a7);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v7 - 128);
  _Unwind_Resume(a1);
}

void MessageSession::terminate(uint64_t a1, uint64_t a2)
{
  std::string __p;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    __p = *(std::string *)a2;
  MessageSession::logMessageSessionEnd(a1, 200, (uint64_t)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)(a1 + 336));
}

void sub_1BEF1FDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void MessageSession::logMessageSessionEnd(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  std::string::size_type v9;
  char v10;
  xpc_object_t v11;
  std::chrono::steady_clock::time_point v12;
  uint64_t v13;
  int v14;
  int v15;
  signed int v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::string::value_type *__s;
  char v25;
  std::string __p;
  std::string v27;
  std::string v28;
  xpc_object_t object;
  std::__shared_weak_count *v30;
  _BYTE v31[7];
  char v32;
  _DWORD v33[2];
  uint64_t v34;
  std::__shared_weak_count *v35;

  v34 = 0;
  v35 = 0;
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v34);
  v6 = v34;
  if (v34)
  {
    object = 0;
    SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &object);
    v7 = MEMORY[0x1C3B87B98](object);
    xpc_release(object);
    v8 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 320) + 1792);
    memset(v33, 0, 7);
    if (v8)
    {
      SipUri::asString(a1 + 480, 2, &object);
      v9 = (std::string::size_type)v30;
      __s = (std::string::value_type *)object;
      v33[0] = *(_DWORD *)v31;
      *(_DWORD *)((char *)v33 + 3) = *(_DWORD *)&v31[3];
      v10 = v32;
    }
    else
    {
      __s = 0;
      v9 = 0;
      v10 = 0;
    }
    v23 = v7;
    v25 = v10;
    (*(void (**)(xpc_object_t *__return_ptr))(**(_QWORD **)(v6 + 136) + 104))(&object);
    v11 = object;
    v12.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    v13 = *(_QWORD *)(a1 + 928);
    v14 = *(_DWORD *)(a1 + 940);
    v15 = *(_DWORD *)(a1 + 936);
    if (v25 < 0)
    {
      std::string::__init_copy_ctor_external(&v28, __s, v9);
    }
    else
    {
      v28.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v28.__r_.__value_.__l.__size_ = v9;
      LODWORD(v28.__r_.__value_.__r.__words[2]) = v33[0];
      *(_DWORD *)((char *)&v28.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v33 + 3);
      *((_BYTE *)&v28.__r_.__value_.__s + 23) = v25;
    }
    if (*(char *)(a3 + 23) < 0)
      std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *(_QWORD *)(a3 + 8));
    else
      v27 = *(std::string *)a3;
    v16 = *(_DWORD *)(a1 + 944);
    IMSMetricsManager::logLazuliMessageSessionEnd((uint64_t)v11, ((double)(uint64_t)((double)(v12.__d_.__rep_ - v13) / 1000000.0) / 1000.0), (v15 + v14), v23 == MEMORY[0x1E0C812F8], v8 != 0, (uint64_t)&v28, a2, (uint64_t)&v27, v16, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    v17 = v30;
    if (!v30)
      goto LABEL_21;
    p_shared_owners = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (v19)
    {
LABEL_21:
      if ((v25 & 0x80) == 0)
        goto LABEL_23;
      goto LABEL_22;
    }
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
    if (v25 < 0)
LABEL_22:
      operator delete(__s);
  }
LABEL_23:
  v20 = v35;
  if (v35)
  {
    v21 = (unint64_t *)&v35->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_1BEF20078(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, int a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,xpc_object_t object)
{
  uint64_t v34;

  if (a33 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&object);
  if (a14 < 0)
    operator delete(a12);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 104);
  _Unwind_Resume(a1);
}

void MessageSession::sendMessageRequest(_QWORD *a1, const std::string *a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7)
{
  std::__shared_weak_count *v14;
  const LazuliRouteSet *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  const LazuliRouteSet *v18;
  uint64_t v19;
  std::string::size_type v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  std::__shared_weak_count *size;
  unint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  std::string *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v63;
  std::string *v64;
  std::__shared_weak_count *v65;
  unint64_t *v66;
  unint64_t v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  std::__shared_weak_count *v91;
  unint64_t *v92;
  unint64_t v93;
  __int128 v94;
  __int128 v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  std::string __p;
  char v104;
  std::string __str;
  std::string v106;
  const LazuliRouteSet *v107;
  std::__shared_weak_count *v108;
  const LazuliRouteSet *v109;
  std::__shared_weak_count *v110;

  v109 = 0;
  v110 = 0;
  v14 = (std::__shared_weak_count *)a1[59];
  if (v14 && (v110 = std::__shared_weak_count::lock(v14)) != 0)
  {
    v15 = (const LazuliRouteSet *)a1[58];
    v109 = v15;
  }
  else
  {
    v15 = 0;
  }
  v107 = 0;
  v108 = 0;
  v16 = (std::__shared_weak_count *)a1[57];
  if (!v16)
  {
    v17 = 0;
    goto LABEL_117;
  }
  v17 = std::__shared_weak_count::lock(v16);
  v108 = v17;
  if (!v17 || (v18 = (const LazuliRouteSet *)a1[56], v107 = v18, !v15) || !v18)
  {
LABEL_117:
    v88 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v88);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v88 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(_BYTE *)(v88 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v88 + 64))(v88, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v88 + 17) = 0;
    if (!v17)
      goto LABEL_122;
    goto LABEL_118;
  }
  memset(&v106, 0, sizeof(v106));
  ImsUuid::generate((ImsUuid *)&__p);
  ImsUuid::asStringNoDashes((ImsUuid *)&__p, &__str);
  std::string::basic_string(&v106, &__str, 0, 0x1FuLL, (std::allocator<char> *)&v97);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C0288;
  if (v104 < 0)
    operator delete((void *)__p.__r_.__value_.__l.__size_);
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = 0uLL;
  v19 = a1[40];
  v20 = *(_QWORD *)(v19 + 208);
  v21 = *(std::__shared_weak_count **)(v19 + 216);
  __p.__r_.__value_.__r.__words[0] = v20;
  __p.__r_.__value_.__l.__size_ = (std::string::size_type)v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string const&,std::string const&,LazuliMessageEncodingMap *,void>((uint64_t *)&__str, (__int128 *)&v106, (__int128 *)"SEND", *(_QWORD *)(*(_QWORD *)(v20 + 136) + 224));
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v106;
  v26 = std::__hash_table<std::__hash_value_type<std::string,std::string>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::string>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::string>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::string>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)(a1 + 129), (unsigned __int8 *)&v106, (uint64_t)&std::piecewise_construct, (__int128 **)&__p);
  std::string::operator=((std::string *)(v26 + 40), a2);
  v27 = __str.__r_.__value_.__r.__words[0];
  std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(&__p, v107);
  v102 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v27, (__int128 *)"To-Path", (uint64_t *)&v102, 0);
  v28 = (std::__shared_weak_count *)*((_QWORD *)&v102 + 1);
  if (*((_QWORD *)&v102 + 1))
  {
    v29 = (unint64_t *)(*((_QWORD *)&v102 + 1) + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v32 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  v34 = __str.__r_.__value_.__r.__words[0];
  std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(&__p, v109);
  v101 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v34, (__int128 *)"From-Path", (uint64_t *)&v101, 0);
  v35 = (std::__shared_weak_count *)*((_QWORD *)&v101 + 1);
  if (*((_QWORD *)&v101 + 1))
  {
    v36 = (unint64_t *)(*((_QWORD *)&v101 + 1) + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v38 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v39 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  v41 = __str.__r_.__value_.__r.__words[0];
  std::allocate_shared[abi:ne180100]<LazuliMessageIdHeader,std::allocator<LazuliMessageIdHeader>,std::string const&,void>(&__p, a2);
  v100 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v41, (__int128 *)"Message-ID", (uint64_t *)&v100, 0);
  v42 = (std::__shared_weak_count *)*((_QWORD *)&v100 + 1);
  if (*((_QWORD *)&v100 + 1))
  {
    v43 = (unint64_t *)(*((_QWORD *)&v100 + 1) + 8);
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  v45 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v46 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 - 1, v46));
    if (!v47)
    {
      ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
      std::__shared_weak_count::__release_weak(v45);
    }
  }
  v48 = __str.__r_.__value_.__r.__words[0];
  std::allocate_shared[abi:ne180100]<LazuliByteRangeHeader,std::allocator<LazuliByteRangeHeader>,unsigned int &,unsigned int &,unsigned int &,void>(&__p, a5, a6, a7);
  v99 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
  LazuliMessage::addHeader(v48, (__int128 *)"Byte-Range", (uint64_t *)&v99, 0);
  v49 = (std::__shared_weak_count *)*((_QWORD *)&v99 + 1);
  if (*((_QWORD *)&v99 + 1))
  {
    v50 = (unint64_t *)(*((_QWORD *)&v99 + 1) + 8);
    do
      v51 = __ldaxr(v50);
    while (__stlxr(v51 - 1, v50));
    if (!v51)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  v52 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
  if (__p.__r_.__value_.__l.__size_)
  {
    v53 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
  v55 = __str.__r_.__value_.__r.__words[0];
  v56 = (std::string *)operator new(0x70uLL);
  v56->__r_.__value_.__l.__size_ = 0;
  v56->__r_.__value_.__r.__words[2] = 0;
  v56->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C1B90;
  std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
  LazuliStringHeader::LazuliStringHeader(v56 + 1, &LazuliHeader::kHeaderSuccessReport, &__p);
  v56[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C1A50;
  v56[4].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v97 = v56 + 1;
  *((_QWORD *)&v97 + 1) = v56;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v97, &v56[1].__r_.__value_.__l.__size_, (uint64_t)&v56[1]);
  v98 = v97;
  v97 = 0uLL;
  LazuliMessage::addHeader(v55, (__int128 *)&LazuliHeader::kHeaderSuccessReport, (uint64_t *)&v98, 0);
  v57 = (std::__shared_weak_count *)*((_QWORD *)&v98 + 1);
  if (*((_QWORD *)&v98 + 1))
  {
    v58 = (unint64_t *)(*((_QWORD *)&v98 + 1) + 8);
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v60 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v61 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
    }
  }
  v63 = __str.__r_.__value_.__r.__words[0];
  v64 = (std::string *)operator new(0x70uLL);
  v64->__r_.__value_.__l.__size_ = 0;
  v64->__r_.__value_.__r.__words[2] = 0;
  v64->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C7328;
  std::string::basic_string[abi:ne180100]<0>(&__p, "yes");
  LazuliStringHeader::LazuliStringHeader(v64 + 1, &LazuliHeader::kHeaderFailureReport, &__p);
  v64[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78C71E8;
  v64[4].__r_.__value_.__s.__data_[8] = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v97 = v64 + 1;
  *((_QWORD *)&v97 + 1) = v64;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v97, &v64[1].__r_.__value_.__l.__size_, (uint64_t)&v64[1]);
  v96 = v97;
  v97 = 0uLL;
  LazuliMessage::addHeader(v63, (__int128 *)&LazuliHeader::kHeaderFailureReport, (uint64_t *)&v96, 0);
  v65 = (std::__shared_weak_count *)*((_QWORD *)&v96 + 1);
  if (*((_QWORD *)&v96 + 1))
  {
    v66 = (unint64_t *)(*((_QWORD *)&v96 + 1) + 8);
    do
      v67 = __ldaxr(v66);
    while (__stlxr(v67 - 1, v66));
    if (!v67)
    {
      ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
      std::__shared_weak_count::__release_weak(v65);
    }
  }
  v68 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
  if (*((_QWORD *)&v97 + 1))
  {
    v69 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
    do
      v70 = __ldaxr(v69);
    while (__stlxr(v70 - 1, v69));
    if (!v70)
    {
      ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
      std::__shared_weak_count::__release_weak(v68);
    }
  }
  v71 = *(unsigned __int8 *)(a3 + 23);
  if ((v71 & 0x80u) != 0)
    v71 = *(_QWORD *)(a3 + 8);
  v72 = __str.__r_.__value_.__r.__words[0];
  if (v71)
  {
    v73 = operator new(0x90uLL);
    v73[1] = 0;
    v73[2] = 0;
    *v73 = &off_1E78C7E68;
    LazuliStringParameterHeader::LazuliStringParameterHeader((uint64_t)(v73 + 3), &LazuliHeader::kHeaderContentType, a4);
    v73[3] = off_1E78DC9D0;
    *((_BYTE *)v73 + 72) = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)(v73 + 3);
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
    std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&__p, v73 + 4, (uint64_t)(v73 + 3));
    v95 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
    LazuliMessage::addHeader(v72, (__int128 *)&LazuliHeader::kHeaderContentType, (uint64_t *)&v95, 0);
    v74 = (std::__shared_weak_count *)*((_QWORD *)&v95 + 1);
    if (*((_QWORD *)&v95 + 1))
    {
      v75 = (unint64_t *)(*((_QWORD *)&v95 + 1) + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
      if (!v76)
      {
        ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
        std::__shared_weak_count::__release_weak(v74);
      }
    }
    v77 = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
    if (__p.__r_.__value_.__l.__size_)
    {
      v78 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
      if (!v79)
      {
        ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
        std::__shared_weak_count::__release_weak(v77);
      }
    }
    v72 = __str.__r_.__value_.__r.__words[0];
  }
  std::string::operator=((std::string *)(v72 + 104), (const std::string *)a3);
  v94 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v80 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v81 = __ldxr(v80);
    while (__stxr(v81 + 1, v80));
  }
  (*(void (**)(_QWORD *, __int128 *, BOOL))(*a1 + 96))(a1, &v94, a6 == a7);
  v82 = (std::__shared_weak_count *)*((_QWORD *)&v94 + 1);
  if (*((_QWORD *)&v94 + 1))
  {
    v83 = (unint64_t *)(*((_QWORD *)&v94 + 1) + 8);
    do
      v84 = __ldaxr(v83);
    while (__stlxr(v84 - 1, v83));
    if (!v84)
    {
      ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
      std::__shared_weak_count::__release_weak(v82);
    }
  }
  v85 = (std::__shared_weak_count *)__str.__r_.__value_.__l.__size_;
  if (__str.__r_.__value_.__l.__size_)
  {
    v86 = (unint64_t *)(__str.__r_.__value_.__l.__size_ + 8);
    do
      v87 = __ldaxr(v86);
    while (__stlxr(v87 - 1, v86));
    if (!v87)
    {
      ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
      std::__shared_weak_count::__release_weak(v85);
    }
  }
  if (SHIBYTE(v106.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v106.__r_.__value_.__l.__data_);
  v17 = v108;
  if (v108)
  {
LABEL_118:
    v89 = (unint64_t *)&v17->__shared_owners_;
    do
      v90 = __ldaxr(v89);
    while (__stlxr(v90 - 1, v89));
    if (!v90)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_122:
  v91 = v110;
  if (v110)
  {
    v92 = (unint64_t *)&v110->__shared_owners_;
    do
      v93 = __ldaxr(v92);
    while (__stlxr(v93 - 1, v92));
    if (!v93)
    {
      ((void (*)(std::__shared_weak_count *))v91->__on_zero_shared)(v91);
      std::__shared_weak_count::__release_weak(v91);
    }
  }
}

void sub_1BEF20A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,char a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 160);
  if (*(char *)(v36 - 113) < 0)
    operator delete(*(void **)(v36 - 136));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v36 - 96);
  _Unwind_Resume(a1);
}

void MessageSession::sendReportRequest(_QWORD *a1, __int128 *a2, const std::string *a3, unsigned int a4, int a5, int a6, int a7)
{
  std::__shared_weak_count *v14;
  const LazuliRouteSet *v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  const LazuliRouteSet *v18;
  uint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  __int128 v78;
  __int128 v79;
  __int128 v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  const LazuliRouteSet *v86;
  std::__shared_weak_count *v87;
  const LazuliRouteSet *v88;
  std::__shared_weak_count *v89;

  v88 = 0;
  v89 = 0;
  v14 = (std::__shared_weak_count *)a1[59];
  if (v14 && (v89 = std::__shared_weak_count::lock(v14)) != 0)
  {
    v15 = (const LazuliRouteSet *)a1[58];
    v88 = v15;
  }
  else
  {
    v15 = 0;
  }
  v86 = 0;
  v87 = 0;
  v16 = (std::__shared_weak_count *)a1[57];
  if (!v16)
  {
    v17 = 0;
    goto LABEL_83;
  }
  v17 = std::__shared_weak_count::lock(v16);
  v87 = v17;
  if (!v17 || (v18 = (const LazuliRouteSet *)a1[56], v86 = v18, !v15) || !v18)
  {
LABEL_83:
    v70 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v70);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v70 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(_BYTE *)(v70 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v70 + 64))(v70, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v70 + 17) = 0;
    if (!v17)
      goto LABEL_88;
    goto LABEL_84;
  }
  v84 = 0;
  v85 = 0;
  v19 = a1[40];
  v20 = *(_QWORD *)(v19 + 208);
  v21 = *(std::__shared_weak_count **)(v19 + 216);
  *(_QWORD *)&v83 = v20;
  *((_QWORD *)&v83 + 1) = v21;
  if (v21)
  {
    p_shared_owners = (unint64_t *)&v21->__shared_owners_;
    do
      v23 = __ldxr(p_shared_owners);
    while (__stxr(v23 + 1, p_shared_owners));
  }
  std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string const&,std::string const&,LazuliMessageEncodingMap *,void>(&v84, a2, (__int128 *)"REPORT", *(_QWORD *)(*(_QWORD *)(v20 + 136) + 224));
  if (v21)
  {
    v24 = (unint64_t *)&v21->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v26 = v84;
  std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(&v83, v86);
  v82 = v83;
  v83 = 0uLL;
  LazuliMessage::addHeader(v26, (__int128 *)"To-Path", (uint64_t *)&v82, 0);
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v82 + 1);
  if (*((_QWORD *)&v82 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v82 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v31 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v33 = v84;
  std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(&v83, v88);
  v81 = v83;
  v83 = 0uLL;
  LazuliMessage::addHeader(v33, (__int128 *)"From-Path", (uint64_t *)&v81, 0);
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v81 + 1);
  if (*((_QWORD *)&v81 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v81 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v38 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  v40 = v84;
  std::allocate_shared[abi:ne180100]<LazuliMessageIdHeader,std::allocator<LazuliMessageIdHeader>,std::string const&,void>(&v83, a3);
  v80 = v83;
  v83 = 0uLL;
  LazuliMessage::addHeader(v40, (__int128 *)"Message-ID", (uint64_t *)&v80, 0);
  v41 = (std::__shared_weak_count *)*((_QWORD *)&v80 + 1);
  if (*((_QWORD *)&v80 + 1))
  {
    v42 = (unint64_t *)(*((_QWORD *)&v80 + 1) + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  v44 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v45 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
  v47 = v84;
  std::allocate_shared[abi:ne180100]<LazuliByteRangeHeader,std::allocator<LazuliByteRangeHeader>,unsigned int &,unsigned int &,unsigned int &,void>(&v83, a5, a6, a7);
  v79 = v83;
  v83 = 0uLL;
  LazuliMessage::addHeader(v47, (__int128 *)"Byte-Range", (uint64_t *)&v79, 0);
  v48 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
  if (*((_QWORD *)&v79 + 1))
  {
    v49 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
    if (!v50)
    {
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
    }
  }
  v51 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v52 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v54 = v84;
  v55 = operator new(0x70uLL);
  v55[1] = 0;
  v55[2] = 0;
  *v55 = &off_1E78C8028;
  LazuliStatusHeader::LazuliStatusHeader((LazuliStatusHeader *)(v55 + 3), a4);
  *(_QWORD *)&v83 = v55 + 3;
  *((_QWORD *)&v83 + 1) = v55;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)&v83, v55 + 4, (uint64_t)(v55 + 3));
  v78 = v83;
  v83 = 0uLL;
  LazuliMessage::addHeader(v54, (__int128 *)"Status", (uint64_t *)&v78, 0);
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v78 + 1);
  if (*((_QWORD *)&v78 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v78 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v59 = (std::__shared_weak_count *)*((_QWORD *)&v83 + 1);
  if (*((_QWORD *)&v83 + 1))
  {
    v60 = (unint64_t *)(*((_QWORD *)&v83 + 1) + 8);
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
      std::__shared_weak_count::__release_weak(v59);
    }
  }
  v76 = v84;
  v77 = v85;
  if (v85)
  {
    v62 = (unint64_t *)&v85->__shared_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v76, 1);
  v64 = v77;
  if (v77)
  {
    v65 = (unint64_t *)&v77->__shared_owners_;
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  v67 = v85;
  if (v85)
  {
    v68 = (unint64_t *)&v85->__shared_owners_;
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v17 = v87;
  if (v87)
  {
LABEL_84:
    v71 = (unint64_t *)&v17->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
LABEL_88:
  v73 = v89;
  if (v89)
  {
    v74 = (unint64_t *)&v89->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
      std::__shared_weak_count::__release_weak(v73);
    }
  }
}

void sub_1BEF211E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  uint64_t v23;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 112);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v23 - 96);
  _Unwind_Resume(a1);
}

void MessageSession::sendResponse(_QWORD *a1, __int128 *a2, void **a3, int a4)
{
  std::__shared_weak_count *v8;
  const LazuliRouteSet *v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  const LazuliRouteSet *v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  std::__shared_weak_count *v65;
  uint64_t v66;
  std::__shared_weak_count *v67;
  __int128 v68;
  __int128 v69;
  __int128 v70;
  uint64_t v71;
  std::__shared_weak_count *v72;
  const LazuliRouteSet *v73;
  std::__shared_weak_count *v74;
  const LazuliRouteSet *v75;
  std::__shared_weak_count *v76;

  v75 = 0;
  v76 = 0;
  v8 = (std::__shared_weak_count *)a1[59];
  if (v8 && (v76 = std::__shared_weak_count::lock(v8)) != 0)
  {
    v9 = (const LazuliRouteSet *)a1[58];
    v75 = v9;
  }
  else
  {
    v9 = 0;
  }
  v73 = 0;
  v74 = 0;
  v10 = (std::__shared_weak_count *)a1[57];
  if (!v10)
  {
    v11 = 0;
    goto LABEL_70;
  }
  v11 = std::__shared_weak_count::lock(v10);
  v74 = v11;
  if (!v11 || (v12 = (const LazuliRouteSet *)a1[56], v73 = v12, !v9) || !v12)
  {
LABEL_70:
    v59 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v59);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v59 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(_BYTE *)(v59 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v59 + 64))(v59, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v59 + 17) = 0;
    if (!v11)
      goto LABEL_75;
    goto LABEL_71;
  }
  v13 = a1[40];
  v14 = *(_QWORD *)(v13 + 208);
  v15 = *(std::__shared_weak_count **)(v13 + 216);
  *(_QWORD *)&v70 = v14;
  *((_QWORD *)&v70 + 1) = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *(_QWORD *)(*(_QWORD *)(v14 + 136) + 224);
  v19 = operator new(0xA0uLL);
  v19[1] = 0;
  v19[2] = 0;
  *v19 = &off_1E78C7F58;
  v20 = LazuliMessage::LazuliMessage((uint64_t)(v19 + 3), a2, v18);
  v19[3] = &off_1E78DA128;
  *((_DWORD *)v19 + 38) = a4;
  v71 = v20;
  v72 = (std::__shared_weak_count *)v19;
  if (v15)
  {
    v21 = (unint64_t *)&v15->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v23 = v71;
  std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(&v70, v73);
  v69 = v70;
  v70 = 0uLL;
  LazuliMessage::addHeader(v23, (__int128 *)"To-Path", (uint64_t *)&v69, 0);
  v24 = (std::__shared_weak_count *)*((_QWORD *)&v69 + 1);
  if (*((_QWORD *)&v69 + 1))
  {
    v25 = (unint64_t *)(*((_QWORD *)&v69 + 1) + 8);
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  v27 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v28 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
    }
  }
  v30 = v71;
  std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(&v70, v75);
  v68 = v70;
  v70 = 0uLL;
  LazuliMessage::addHeader(v30, (__int128 *)"From-Path", (uint64_t *)&v68, 0);
  v31 = (std::__shared_weak_count *)*((_QWORD *)&v68 + 1);
  if (*((_QWORD *)&v68 + 1))
  {
    v32 = (unint64_t *)(*((_QWORD *)&v68 + 1) + 8);
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
      std::__shared_weak_count::__release_weak(v31);
    }
  }
  v34 = (std::__shared_weak_count *)*((_QWORD *)&v70 + 1);
  if (*((_QWORD *)&v70 + 1))
  {
    v35 = (unint64_t *)(*((_QWORD *)&v70 + 1) + 8);
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v66 = v71;
  v67 = v72;
  if (v72)
  {
    v37 = (unint64_t *)&v72->__shared_owners_;
    do
      v38 = __ldxr(v37);
    while (__stxr(v38 + 1, v37));
  }
  (*(void (**)(_QWORD *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v66, 1);
  v39 = v67;
  if (v67)
  {
    v40 = (unint64_t *)&v67->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
    }
  }
  *((_DWORD *)a1 + 236) = a4;
  if (a4 != 200)
  {
    v42 = a1[40];
    v43 = *(_QWORD *)(v42 + 208);
    v44 = *(std::__shared_weak_count **)(v42 + 216);
    v65 = v44;
    if (v44)
    {
      v45 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v47 = *(_QWORD *)(v43 + 136);
    v48 = *(_QWORD *)(v47 + 208);
    v49 = *(std::__shared_weak_count **)(v47 + 216);
    *(_QWORD *)&v70 = v48;
    *((_QWORD *)&v70 + 1) = v49;
    if (v49)
    {
      v50 = (unint64_t *)&v49->__shared_owners_;
      do
        v51 = __ldxr(v50);
      while (__stxr(v51 + 1, v50));
    }
    SipLazuliManager::releasePowerAssertion(v48, a3);
    if (v49)
    {
      v52 = (unint64_t *)&v49->__shared_owners_;
      do
        v53 = __ldaxr(v52);
      while (__stlxr(v53 - 1, v52));
      if (!v53)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
    if (v65)
    {
      v54 = (unint64_t *)&v65->__shared_owners_;
      do
        v55 = __ldaxr(v54);
      while (__stlxr(v55 - 1, v54));
      if (!v55)
      {
        ((void (*)(std::__shared_weak_count *))v65->__on_zero_shared)(v65);
        std::__shared_weak_count::__release_weak(v65);
      }
    }
  }
  v56 = v72;
  if (v72)
  {
    v57 = (unint64_t *)&v72->__shared_owners_;
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v11 = v74;
  if (v74)
  {
LABEL_71:
    v60 = (unint64_t *)&v11->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_75:
  v62 = v76;
  if (v76)
  {
    v63 = (unint64_t *)&v76->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
      std::__shared_weak_count::__release_weak(v62);
    }
  }
}

void sub_1BEF21794(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21)
{
  uint64_t v21;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a19);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 80);
  _Unwind_Resume(a1);
}

uint64_t MessageSession::IncomingMessage::operator=(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  return a1;
}

void MessageSession::IncomingMessage::~IncomingMessage(void **this)
{
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 23) < 0)
    operator delete(*this);
}

void MessageSession::logSendReceiveEvent(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  int v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  xpc_object_t v27;
  uint64_t v28;
  char *v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::string::size_type __sz;
  std::string::value_type *__s;
  char v38;
  std::string v39;
  void *__p[2];
  char v41;
  std::string v42;
  xpc_object_t object;
  std::__shared_weak_count *v44;
  _BYTE v45[7];
  char v46;
  _DWORD v47[2];
  uint64_t v48;
  std::__shared_weak_count *v49;

  v48 = 0;
  v49 = 0;
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v48);
  if (v48)
  {
    SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &object);
    v11 = MEMORY[0x1C3B87B98](object);
    xpc_release(object);
    v12 = *(_QWORD *)(a1 + 320);
    v13 = *(unsigned __int8 *)(v12 + 1792);
    memset(v47, 0, 7);
    if (v13)
    {
      SipUri::asString(a1 + 480, 2, &object);
      __sz = (std::string::size_type)v44;
      __s = (std::string::value_type *)object;
      v47[0] = *(_DWORD *)v45;
      *(_DWORD *)((char *)v47 + 3) = *(_DWORD *)&v45[3];
      v38 = v46;
      v12 = *(_QWORD *)(a1 + 320);
    }
    else
    {
      __sz = 0;
      __s = 0;
      v38 = 0;
    }
    v14 = *(_QWORD *)(v12 + 208);
    v15 = *(std::__shared_weak_count **)(v12 + 216);
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldxr(p_shared_owners);
      while (__stxr(v17 + 1, p_shared_owners));
    }
    v18 = *(_QWORD *)(v14 + 136);
    v19 = *(_QWORD *)(v18 + 208);
    v20 = *(std::__shared_weak_count **)(v18 + 216);
    if (v20)
    {
      v21 = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
      v23 = *(unsigned __int8 *)(v19 + 404);
      do
        v24 = __ldaxr(v21);
      while (__stlxr(v24 - 1, v21));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    else
    {
      v23 = *(unsigned __int8 *)(v19 + 404);
    }
    if (v15)
    {
      v25 = (unint64_t *)&v15->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    (*(void (**)(xpc_object_t *__return_ptr))(**(_QWORD **)(v48 + 136) + 104))(&object);
    v27 = object;
    if (a2)
      v28 = (uint64_t)((double)(std::chrono::steady_clock::now().__d_.__rep_ - a4) / 1000000.0);
    else
      v28 = 0;
    if (*(char *)(a6 + 23) < 0)
      std::string::__init_copy_ctor_external(&v42, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
    else
      v42 = *(std::string *)a6;
    if (a2)
      v29 = "MO";
    else
      v29 = "MT";
    std::string::basic_string[abi:ne180100]<0>(__p, v29);
    if (v38 < 0)
    {
      std::string::__init_copy_ctor_external(&v39, __s, __sz);
    }
    else
    {
      v39.__r_.__value_.__r.__words[0] = (std::string::size_type)__s;
      v39.__r_.__value_.__l.__size_ = __sz;
      LODWORD(v39.__r_.__value_.__r.__words[2]) = v47[0];
      *(_DWORD *)((char *)&v39.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v47 + 3);
      *((_BYTE *)&v39.__r_.__value_.__s + 23) = v38;
    }
    IMSMetricsManager::logLazuliMessageSessionSendReceive((uint64_t)v27, (_DWORD)a5 == 200, v28, a5, (uint64_t)&v42, (uint64_t)__p, v11 == MEMORY[0x1E0C812F8], v13 != 0, (uint64_t)&v39, v23 != 0);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (v41 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v42.__r_.__value_.__l.__data_);
    v30 = v44;
    if (!v44)
      goto LABEL_43;
    v31 = (unint64_t *)&v44->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (v32)
    {
LABEL_43:
      if ((v38 & 0x80) == 0)
        goto LABEL_45;
      goto LABEL_44;
    }
    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
    std::__shared_weak_count::__release_weak(v30);
    if (v38 < 0)
LABEL_44:
      operator delete(__s);
  }
LABEL_45:
  v33 = v49;
  if (v49)
  {
    v34 = (unint64_t *)&v49->__shared_owners_;
    do
      v35 = __ldaxr(v34);
    while (__stlxr(v35 - 1, v34));
    if (!v35)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
}

void sub_1BEF21C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, int a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34)
{
  uint64_t v34;

  if (a27 < 0)
    operator delete(__p);
  if (a33 < 0)
    operator delete(a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a34);
  if (a15 < 0)
    operator delete(a13);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v34 - 104);
  _Unwind_Resume(a1);
}

void sub_1BEF21CAC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,xpc_object_t object)
{
  xpc_release(object);
  JUMPOUT(0x1BEF21C98);
}

std::string *`anonymous namespace'::loggableMsrpStatus(std::string *retstr, signed int __val)
{
  char *v2;

  if (__val <= 414)
  {
    if (__val <= 402)
    {
      if (__val == 200)
      {
        v2 = "OK";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      }
      if (__val == 400)
      {
        v2 = "Unintelligible";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      }
    }
    else
    {
      switch(__val)
      {
        case 403:
          v2 = "Not allowed";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
        case 408:
          v2 = "Did not complete";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
        case 413:
          v2 = "Undesired";
          return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      }
    }
  }
  else if (__val > 499)
  {
    switch(__val)
    {
      case 500:
        v2 = "Internal error";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 501:
        v2 = "Bad extension";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 506:
        v2 = "Invalid connection";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
    }
  }
  else
  {
    switch(__val)
    {
      case 415:
        v2 = "Not understood";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 423:
        v2 = "Out of bounds";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
      case 481:
        v2 = "No session";
        return (std::string *)std::string::basic_string[abi:ne180100]<0>(retstr, v2);
    }
  }
  return std::to_string(retstr, __val);
}

void std::unordered_map<std::string,MessageSession::IncomingMessage>::erase[abi:ne180100](_QWORD *a1, uint64_t *a2)
{
  int8x8_t v2;
  uint64_t v3;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t *v6;
  uint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD v11[2];
  char v12;

  v2 = (int8x8_t)a1[1];
  v3 = *a2;
  v4 = a2[1];
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v2)
      v4 %= *(_QWORD *)&v2;
  }
  else
  {
    v4 &= *(_QWORD *)&v2 - 1;
  }
  v6 = *(uint64_t **)(*a1 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (uint64_t *)*v6;
  }
  while (v6 != a2);
  if (v7 != a1 + 2)
  {
    v8 = v7[1];
    if (v5.u32[0] > 1uLL)
    {
      if (v8 >= *(_QWORD *)&v2)
        v8 %= *(_QWORD *)&v2;
    }
    else
    {
      v8 &= *(_QWORD *)&v2 - 1;
    }
    if (v8 == v4)
    {
LABEL_20:
      if (!v3)
        goto LABEL_27;
      goto LABEL_21;
    }
  }
  if (!v3)
    goto LABEL_19;
  v9 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v9 >= *(_QWORD *)&v2)
      v9 %= *(_QWORD *)&v2;
  }
  else
  {
    v9 &= *(_QWORD *)&v2 - 1;
  }
  if (v9 != v4)
  {
LABEL_19:
    *(_QWORD *)(*a1 + 8 * v4) = 0;
    v3 = *a2;
    goto LABEL_20;
  }
LABEL_21:
  v10 = *(_QWORD *)(v3 + 8);
  if (v5.u32[0] > 1uLL)
  {
    if (v10 >= *(_QWORD *)&v2)
      v10 %= *(_QWORD *)&v2;
  }
  else
  {
    v10 &= *(_QWORD *)&v2 - 1;
  }
  if (v10 != v4)
  {
    *(_QWORD *)(*a1 + 8 * v10) = v7;
    v3 = *a2;
  }
LABEL_27:
  *v7 = v3;
  *a2 = 0;
  --a1[3];
  v11[0] = a2;
  v11[1] = a1 + 2;
  v12 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
}

void MessageSession::processIncomingSendRequestBody(MessageSession *a1, __int128 *a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  std::regex_traits<char> *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t *v13;
  uint64_t *v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  _BYTE *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  void **v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  char v49;
  void **v50;
  _BOOL4 v51;
  void **v52;
  void *v53;
  void *v54;
  void *v55;
  BOOL v56;
  BOOL v57;
  unsigned int v58;
  void **v59;
  void *v60;
  uint64_t v61;
  char v63;
  uint64_t v64;
  MessageSession *v65;
  uint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *p_shared_owners;
  unint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  unint64_t *p_shared_weak_owners;
  unint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  BOOL v91;
  uint64_t v92;
  uint64_t v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  std::__shared_weak_count *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  char *v106;
  std::string *v107;
  _QWORD *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t v111;
  std::__shared_weak_count *v112;
  unint64_t *v113;
  unint64_t v114;
  std::__shared_weak_count *locale;
  unint64_t *v116;
  unint64_t v117;
  __int128 *v120;
  MessageSession *v121;
  std::string __p;
  char v123;
  std::__shared_weak_count *v124[2];
  uint64_t v125;
  std::__shared_weak_count *v126;
  __int128 v127;
  _QWORD v128[4];
  __int128 v129;
  _QWORD v130[4];
  _BYTE v131[24];
  __int128 v132;
  __int128 v133;
  __int128 v134;
  __int128 v135;
  __int128 v136;
  __int128 v137;
  __int128 v138;
  __int128 v139;
  __int128 v140;
  __int128 v141;
  __int128 v142;
  __int128 v143;
  uint64_t v144;
  char v145;
  void (**v146)(SipParameterMap *__hidden);
  _QWORD *v147;
  _QWORD v148[2];
  __int16 v149;
  void (**v150)(SipParameterMap *__hidden);
  _QWORD *v151;
  _QWORD v152[2];
  __int16 v153;
  MessageSession *v154;
  __int128 __s;
  __int128 v156;
  __int128 v157;
  void **v158;
  uint64_t v159;
  unint64_t v160;
  std::regex_traits<char> v161[3];
  _BYTE v162[24];
  _BYTE *v163;
  uint64_t v164;

  v164 = *MEMORY[0x1E0C80C00];
  memset(v161, 0, 64);
  v8 = std::regex_traits<char>::regex_traits(v161);
  memset((char *)&v161[1].__loc_.__locale_ + 4, 0, 36);
  LODWORD(v161[1].__loc_.__locale_) = 1;
  v120 = a3;
  if (std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>((uint64_t)v8, "(Content-Type: ([^ \r\n]*))", "") != "")std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>();
  *(_OWORD *)v131 = 0u;
  memset(v130, 0, sizeof(v130));
  v129 = 0u;
  v127 = 0u;
  memset(v128, 0, sizeof(v128));
  v9 = *(char *)(a5 + 23);
  if (v9 >= 0)
    v10 = a5;
  else
    v10 = *(_QWORD *)a5;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a5 + 23);
  else
    v11 = *(_QWORD *)(a5 + 8);
  v12 = (const char *)(v10 + v11);
  v128[1] = v10 + v11;
  v128[2] = v10 + v11;
  std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)&v127, (HIDWORD(v161[1].__loc_.__locale_) + 1), (std::vector<std::csub_match>::const_reference)&v128[1]);
  *(_QWORD *)&v129 = v10;
  *((_QWORD *)&v129 + 1) = v10;
  LOBYTE(v130[0]) = 0;
  *(_OWORD *)&v130[1] = *(_OWORD *)&v128[1];
  LOBYTE(v130[3]) = v128[3];
  *(_QWORD *)&v131[8] = v10;
  v131[0] = 1;
  if (std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>((uint64_t)v161, v10, (const char *)(v10 + v11), (uint64_t *)&v127, 0, 1))
  {
    v13 = (uint64_t *)*((_QWORD *)&v127 + 1);
    v14 = (uint64_t *)v127;
    if (*((_QWORD *)&v127 + 1) == (_QWORD)v127)
      v15 = &v128[1];
    else
      v15 = (_QWORD *)v127;
    *((_QWORD *)&v129 + 1) = *v15;
    v16 = v129;
    goto LABEL_27;
  }
  if (!v11)
    goto LABEL_26;
  v17 = v11 - 1;
  if (v17)
  {
    v18 = v10 + 1;
    do
    {
      std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)&v127, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 3), (std::vector<std::csub_match>::const_reference)&v128[1]);
      v19 = std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>((uint64_t)v161, v18, v12, (uint64_t *)&v127, 128, 0);
      v13 = (uint64_t *)*((_QWORD *)&v127 + 1);
      v14 = (uint64_t *)v127;
      if (v19)
        goto LABEL_20;
      std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)&v127, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 3), (std::vector<std::csub_match>::const_reference)&v128[1]);
      ++v18;
    }
    while (--v17);
  }
  std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)&v127, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v127 + 1) - v127) >> 3), (std::vector<std::csub_match>::const_reference)&v128[1]);
  if (!std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>((uint64_t)v161, (uint64_t)v12, v12, (uint64_t *)&v127, 128, 0))
  {
LABEL_26:
    v14 = (uint64_t *)v127;
    v16 = v129;
    v13 = (uint64_t *)v127;
    goto LABEL_27;
  }
  v13 = (uint64_t *)*((_QWORD *)&v127 + 1);
  v14 = (uint64_t *)v127;
LABEL_20:
  if (v13 == v14)
    v20 = &v128[1];
  else
    v20 = v14;
  v21 = *v20;
  *((_QWORD *)&v129 + 1) = v21;
  v16 = v129;
  v22 = v14 + 1;
  if (v13 == v14)
    v22 = &v128[2];
  LOBYTE(v130[0]) = (_QWORD)v129 != v21;
  v130[1] = *v22;
LABEL_27:
  if (*(char *)(a5 + 23) >= 0)
    v23 = a5;
  else
    v23 = *(_QWORD *)a5;
  v24 = (char *)v13 - (char *)v14;
  if (v13 == v14)
  {
    v29 = 0;
    v27 = 0;
    if (v14)
LABEL_46:
      operator delete(v14);
  }
  else
  {
    v25 = v24 / 24;
    if ((unint64_t)(v24 / 24) >= 0xAAAAAAAAAAAAAABLL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v26 = (char *)operator new(v24);
    v27 = v26;
    v28 = 0;
    v29 = &v26[24 * v25];
    do
    {
      v30 = &v26[v28];
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;
      v30[16] = 0;
      v28 += 24;
    }
    while (24 * v25 != v28);
    v31 = 0;
    v32 = 0;
    if (v25 <= 1)
      v33 = 1;
    else
      v33 = v25;
    do
    {
      v34 = (char *)&v14[v31];
      if (v25 <= v32)
        v35 = &v128[1];
      else
        v35 = &v14[v31];
      v36 = *v35;
      v37 = v34 + 8;
      if (v25 <= v32)
        v37 = &v128[2];
      v38 = v34 + 16;
      if (v25 <= v32)
        v38 = (char *)&v128[3];
      v39 = &v26[v31 * 8];
      *(_QWORD *)v39 = v23 + v36 - v16;
      *((_QWORD *)v39 + 1) = v23 + *v37 - v16;
      v39[16] = *v38;
      ++v32;
      v31 += 3;
    }
    while (v33 != v32);
    if (v14)
      goto LABEL_46;
  }
  if (v29 - v27 != 72)
  {
    v44 = (*(uint64_t (**)(MessageSession *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(MessageSession *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Unable to find Content-Type: - match size: ", 43);
    *(_BYTE *)(v44 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v44 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    goto LABEL_177;
  }
  v158 = 0;
  v159 = 0;
  v160 = 0;
  if (v27[64])
  {
    v40 = (char *)*((_QWORD *)v27 + 6);
    v41 = (char *)*((_QWORD *)v27 + 7);
    v42 = v41 - v40;
    if ((unint64_t)(v41 - v40) >= 0x7FFFFFFFFFFFFFF8)
      std::string::__throw_length_error[abi:ne180100]();
    if (v42 > 0x16)
    {
      v47 = (v42 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v42 | 7) != 0x17)
        v47 = v42 | 7;
      v48 = v47 + 1;
      v43 = (void **)operator new(v47 + 1);
      v159 = v41 - v40;
      v160 = v48 | 0x8000000000000000;
      v158 = v43;
    }
    else
    {
      HIBYTE(v160) = (_BYTE)v41 - (_BYTE)v40;
      v43 = (void **)&v158;
    }
    while (v40 != v41)
    {
      v49 = *v40++;
      *(_BYTE *)v43 = v49;
      v43 = (void **)((char *)v43 + 1);
    }
    *(_BYTE *)v43 = 0;
    v46 = HIBYTE(v160);
    v45 = v159;
  }
  else
  {
    v45 = 0;
    v46 = 0;
  }
  if ((v46 & 0x80u) == 0)
    v45 = v46;
  if (v45 == 16)
  {
    v51 = 0;
    v59 = (void **)&v158;
    if ((v46 & 0x80u) != 0)
      v59 = v158;
    v60 = *v59;
    v55 = v59[1];
    v57 = v60 == (void *)0x2F6567617373656DLL;
    v58 = 1852075369;
  }
  else
  {
    if (v45 != 30)
    {
      if (v45 == 37)
      {
        if ((v46 & 0x80u) == 0)
          v50 = (void **)&v158;
        else
          v50 = v158;
        v51 = memcmp(v50, "application/vnd.oma.cpm-groupdata+xml", 0x25uLL) == 0;
      }
      else
      {
        v51 = 0;
      }
      goto LABEL_90;
    }
    v51 = 0;
    v52 = (void **)&v158;
    if ((v46 & 0x80u) != 0)
      v52 = v158;
    v53 = v52[1];
    v56 = *v52 == (void *)0x746163696C707061;
    v54 = v52[2];
    v55 = *(void **)((char *)v52 + 22);
    v56 = v56 && v53 == (void *)0x692D6D692F6E6F69;
    v57 = v56 && v54 == (void *)0x69736F706D6F6373;
    v58 = 1735289203;
  }
  v61 = v58 | 0x6C6D782B00000000;
  if (v57 && v55 == (void *)v61)
  {
    v63 = 1;
    goto LABEL_111;
  }
LABEL_90:
  v64 = *((_QWORD *)a1 + 40);
  v65 = *(MessageSession **)(v64 + 208);
  v66 = *(_QWORD *)(v64 + 216);
  v154 = v65;
  *(_QWORD *)&__s = v66;
  if (v66)
  {
    v67 = (unint64_t *)(v66 + 8);
    do
      v68 = __ldxr(v67);
    while (__stxr(v68 + 1, v67));
  }
  v69 = *((_QWORD *)v65 + 17);
  v70 = *(_QWORD *)(v69 + 208);
  v71 = *(std::__shared_weak_count **)(v69 + 216);
  *(_QWORD *)&v127 = v70;
  *((_QWORD *)&v127 + 1) = v71;
  if (v71)
  {
    p_shared_owners = (unint64_t *)&v71->__shared_owners_;
    do
      v73 = __ldxr(p_shared_owners);
    while (__stxr(v73 + 1, p_shared_owners));
  }
  SipLazuliManager::createPowerAssertion(v70, v120, 1);
  if (v71)
  {
    v74 = (unint64_t *)&v71->__shared_owners_;
    do
      v75 = __ldaxr(v74);
    while (__stlxr(v75 - 1, v74));
    if (!v75)
    {
      ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
      std::__shared_weak_count::__release_weak(v71);
    }
  }
  v76 = (std::__shared_weak_count *)__s;
  if (!(_QWORD)__s)
    goto LABEL_105;
  v77 = (unint64_t *)(__s + 8);
  do
    v78 = __ldaxr(v77);
  while (__stlxr(v78 - 1, v77));
  if (v78)
  {
LABEL_105:
    if (v51)
      goto LABEL_106;
LABEL_110:
    v63 = 0;
LABEL_111:
    v81 = *((_QWORD *)a1 + 15);
    v80 = (std::__shared_weak_count *)*((_QWORD *)a1 + 16);
    if (v80)
    {
      p_shared_weak_owners = (unint64_t *)&v80->__shared_weak_owners_;
      do
        v83 = __ldxr(p_shared_weak_owners);
      while (__stxr(v83 + 1, p_shared_weak_owners));
    }
    v157 = 0u;
    v156 = 0u;
    __s = 0u;
    v154 = a1;
    if (*((char *)v120 + 23) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)&__s, *(const std::string::value_type **)v120, *((_QWORD *)v120 + 1));
    }
    else
    {
      __s = *v120;
      *(_QWORD *)&v156 = *((_QWORD *)v120 + 2);
    }
    BYTE8(v156) = v63;
    *(_QWORD *)&v157 = v81;
    *((_QWORD *)&v157 + 1) = v80;
    if (v80)
    {
      v84 = (unint64_t *)&v80->__shared_weak_owners_;
      do
        v85 = __ldxr(v84);
      while (__stxr(v85 + 1, v84));
    }
    if (v51)
    {
      v86 = *(unsigned __int8 *)(a4 + 23);
      v87 = (char)v86;
      if ((v86 & 0x80u) != 0)
        v86 = *(_QWORD *)(a4 + 8);
      if (v86 != 12
        || (v87 >= 0 ? (v88 = a4) : (v88 = *(_QWORD *)a4),
            (v89 = *(_QWORD *)v88, v90 = *(_DWORD *)(v88 + 8), v89 == 0x2F6567617373656DLL)
          ? (v91 = v90 == 1835626595)
          : (v91 = 0),
            !v91))
      {
        v129 = 0uLL;
        *((_QWORD *)&v127 + 1) = &off_1E78D08F8;
        memset(v128, 0, 26);
        v130[2] = 0;
        v130[3] = 0;
        v130[0] = &off_1E78B82D8;
        v130[1] = &v130[2];
        v131[1] = 1;
        *(_QWORD *)&v127 = &off_1E78BFCE8;
        v141 = 0u;
        v142 = 0u;
        v143 = 0u;
        *(_OWORD *)&v131[8] = 0u;
        v132 = 0u;
        v133 = 0u;
        v134 = 0u;
        v135 = 0u;
        v136 = 0u;
        v137 = 0u;
        v138 = 0u;
        v139 = 0u;
        v140 = 0u;
        v144 = 0;
        v148[0] = 0;
        v148[1] = 0;
        v146 = &off_1E78B82D8;
        v147 = v148;
        v152[0] = 0;
        v152[1] = 0;
        v150 = &off_1E78B82D8;
        v151 = v152;
        v131[0] = 1;
        v149 = 257;
        v153 = 257;
        v145 = 0;
        (*(void (**)(MessageSession *, __int128 *, uint64_t))(*(_QWORD *)a1 + 152))(a1, &v127, a5);
        SipUri::~SipUri((SipUri *)&v127);
LABEL_169:
        if (*((_QWORD *)&v157 + 1))
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v157 + 1));
        if (SBYTE7(v156) < 0)
          operator delete((void *)__s);
        if (v80)
          std::__shared_weak_count::__release_weak(v80);
        goto LABEL_175;
      }
    }
    v92 = *((_QWORD *)a1 + 40);
    v93 = *(_QWORD *)(v92 + 208);
    v94 = *(std::__shared_weak_count **)(v92 + 216);
    v125 = v93;
    v126 = v94;
    if (v94)
    {
      v95 = (unint64_t *)&v94->__shared_owners_;
      do
        v96 = __ldxr(v95);
      while (__stxr(v96 + 1, v95));
    }
    v97 = *(_QWORD *)(v93 + 136);
    v99 = *(_QWORD *)(v97 + 208);
    v98 = *(std::__shared_weak_count **)(v97 + 216);
    *(_QWORD *)&v127 = v99;
    *((_QWORD *)&v127 + 1) = v98;
    if (v98)
    {
      v100 = (unint64_t *)&v98->__shared_owners_;
      do
        v101 = __ldxr(v100);
      while (__stxr(v101 + 1, v100));
    }
    v102 = *((_QWORD *)a1 + 40);
    if (*(_QWORD *)(v102 + 632))
      v103 = *(_QWORD *)(v102 + 632);
    else
      v103 = v102 + 224;
    v121 = v154;
    if (SBYTE7(v156) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, (const std::string::value_type *)__s, *((std::string::size_type *)&__s + 1));
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = __s;
      __p.__r_.__value_.__r.__words[2] = v156;
    }
    v123 = BYTE8(v156);
    *(_OWORD *)v124 = v157;
    if (*((_QWORD *)&v157 + 1))
    {
      v104 = (unint64_t *)(*((_QWORD *)&v157 + 1) + 16);
      do
        v105 = __ldxr(v104);
      while (__stxr(v105 + 1, v104));
    }
    v163 = 0;
    v106 = (char *)operator new(0x40uLL);
    *(_QWORD *)v106 = off_1E78C7CD0;
    *((_QWORD *)v106 + 1) = v121;
    v107 = (std::string *)(v106 + 16);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(v107, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&v107->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *((_QWORD *)v106 + 4) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
    }
    v106[40] = v123;
    *((_OWORD *)v106 + 3) = *(_OWORD *)v124;
    v124[0] = 0;
    v124[1] = 0;
    v163 = v106;
    SipLazuliManager::handleIncomingMessage(v99, (uint64_t)a1 + 480, v103, v102 + 1648, v102 + 1704, a5, a4, (uint64_t)v162);
    v108 = v163;
    if (v163 == v162)
    {
      v109 = 4;
      v108 = v162;
    }
    else
    {
      if (!v163)
      {
LABEL_155:
        if (v124[1])
          std::__shared_weak_count::__release_weak(v124[1]);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (v98)
        {
          v110 = (unint64_t *)&v98->__shared_owners_;
          do
            v111 = __ldaxr(v110);
          while (__stlxr(v111 - 1, v110));
          if (!v111)
          {
            ((void (*)(std::__shared_weak_count *))v98->__on_zero_shared)(v98);
            std::__shared_weak_count::__release_weak(v98);
          }
        }
        v112 = v126;
        if (v126)
        {
          v113 = (unint64_t *)&v126->__shared_owners_;
          do
            v114 = __ldaxr(v113);
          while (__stlxr(v114 - 1, v113));
          if (!v114)
          {
            ((void (*)(std::__shared_weak_count *))v112->__on_zero_shared)(v112);
            std::__shared_weak_count::__release_weak(v112);
          }
        }
        goto LABEL_169;
      }
      v109 = 5;
    }
    (*(void (**)(_QWORD *))(*v108 + 8 * v109))(v108);
    goto LABEL_155;
  }
  ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
  std::__shared_weak_count::__release_weak(v76);
  if (!v51)
    goto LABEL_110;
LABEL_106:
  if (MessageSession::isGroupMgmtViaMSRP(a1))
  {
    v63 = 0;
    v51 = 1;
    goto LABEL_111;
  }
  v79 = (*(uint64_t (**)(MessageSession *))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(MessageSession *, uint64_t))(*(_QWORD *)a1 + 16))(a1, v79);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v79 + 8), (uint64_t)"Incoming SEND with group management info has not been negotiated.", 65);
  *(_BYTE *)(v79 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v79 + 64))(v79, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v79 + 17) = 0;
  MessageSession::sendResponse(a1, a2, (void **)v120, 403);
LABEL_175:
  if (SHIBYTE(v160) < 0)
    operator delete(v158);
LABEL_177:
  if (v27)
    operator delete(v27);
  locale = (std::__shared_weak_count *)v161[2].__loc_.__locale_;
  if (v161[2].__loc_.__locale_)
  {
    v116 = (unint64_t *)((char *)v161[2].__loc_.__locale_ + 8);
    do
      v117 = __ldaxr(v116);
    while (__stlxr(v117 - 1, v116));
    if (!v117)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(&v161[0].__loc_);
}

void sub_1BEF22A80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  void *v4;
  std::__shared_weak_count *v5;
  void *v6;
  uint64_t v7;
  uint64_t v9;
  va_list va;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  va_list va1;
  uint64_t v19;
  va_list va2;

  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  v9 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v17 = va_arg(va2, _QWORD);
  v19 = va_arg(va2, _QWORD);
  operator delete(v6);
  MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0::~$_0((uint64_t)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0::~$_0((uint64_t)&STACK[0x200]);
  if (v5)
    std::__shared_weak_count::__release_weak(v5);
  if (*(char *)(v7 - 209) < 0)
    operator delete(*(void **)(v7 - 232));
  if (v4)
    operator delete(v4);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v7 - 168);
  std::locale::~locale((std::locale *)(v7 - 208));
  _Unwind_Resume(a1);
}

BOOL MessageSession::isGroupMgmtViaMSRP(MessageSession *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v7;
  char v8;

  v2 = *((_QWORD *)this + 53);
  v3 = *((_QWORD *)this + 54);
  std::string::basic_string[abi:ne180100]<0>(__p, "application/vnd.oma.cpm-groupdata+xml");
  v8 = 0;
  v4 = std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(v2, v3, (unsigned __int8 **)__p);
  if (v7 < 0)
    operator delete(__p[0]);
  return v4 != *((_QWORD *)this + 54);
}

uint64_t MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0::~$_0(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void MessageSession::sendMessageBlob(uint64_t a1, uint64_t a2, const std::string *a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v8;
  std::string::size_type v9;
  std::string::size_type v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned int v22;
  std::string::size_type size;
  unsigned __int8 *v24;
  int v25;
  std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep rep;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  unint64_t v37;
  size_t v38;
  std::string *v39;
  const void *v40;
  const std::string::value_type *v41;
  std::string::size_type v42;
  std::string *v43;
  __int128 v44;
  std::string *v45;
  __int128 v46;
  void **v47;
  std::string::size_type v48;
  std::string *v49;
  __int128 v50;
  uint64_t v51;
  unint64_t *v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  unint64_t v64;
  size_t v65;
  std::string *v66;
  const void *v67;
  std::string *v68;
  std::string::size_type v69;
  std::string *v70;
  __int128 v71;
  std::string *v72;
  __int128 v73;
  const std::string::value_type *v74;
  std::string::size_type v75;
  std::string *v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  std::string::size_type v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  std::string::size_type v95;
  std::string::size_type v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  std::__shared_weak_count *v101;
  unint64_t *v102;
  unint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  void *__p[2];
  unsigned __int8 v113;
  void *v114;
  std::string::size_type v115;
  unsigned __int8 v116;
  std::string v117;
  std::string v118;
  std::string v119;
  std::string v120;
  int v121;
  std::string v122;
  std::string v123;
  int v124;
  _BYTE v125[24];
  _BYTE *v126;
  _BYTE v127[24];
  _BYTE *v128;
  uint64_t v129;

  v129 = *MEMORY[0x1E0C80C00];
  v124 = a5;
  ++*(_DWORD *)(a1 + 940);
  v8 = *(_QWORD *)(a1 + 320);
  v9 = *(_QWORD *)(v8 + 208);
  v10 = *(_QWORD *)(v8 + 216);
  v122.__r_.__value_.__r.__words[0] = v9;
  v122.__r_.__value_.__l.__size_ = v10;
  if (v10)
  {
    v11 = (unint64_t *)(v10 + 8);
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = *(_QWORD *)(v9 + 136);
  v14 = *(_QWORD *)(v13 + 208);
  v15 = *(std::__shared_weak_count **)(v13 + 216);
  v123.__r_.__value_.__r.__words[0] = v14;
  v123.__r_.__value_.__l.__size_ = (std::string::size_type)v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  SipLazuliManager::createPowerAssertion(v14, (__int128 *)a4, 0);
  if (v15)
  {
    v18 = (unint64_t *)&v15->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  if (v122.__r_.__value_.__l.__size_)
  {
    v20 = (unint64_t *)(v122.__r_.__value_.__l.__size_ + 8);
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      (*(void (**)(std::string::size_type))(*(_QWORD *)v122.__r_.__value_.__l.__size_ + 16))(v122.__r_.__value_.__l.__size_);
      std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v122.__r_.__value_.__l.__size_);
    }
  }
  MessageSession::sendEmptyMessage((MessageSession *)a1);
  if (*(char *)(a2 + 23) >= 0)
    v22 = *(unsigned __int8 *)(a2 + 23);
  else
    v22 = *(_DWORD *)(a2 + 8);
  memset(&v123, 0, sizeof(v123));
  if (*(char *)(a6 + 23) < 0)
    std::string::__init_copy_ctor_external(&v123, *(const std::string::value_type **)a6, *(_QWORD *)(a6 + 8));
  else
    v123 = *(std::string *)a6;
  size = HIBYTE(v123.__r_.__value_.__r.__words[2]);
  if ((v123.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v123.__r_.__value_.__l.__size_;
  if (!size)
  {
    v82 = *(_QWORD *)(a1 + 320);
    v83 = *(_QWORD *)(v82 + 208);
    v84 = *(std::__shared_weak_count **)(v82 + 216);
    v120.__r_.__value_.__r.__words[0] = v83;
    v120.__r_.__value_.__l.__size_ = (std::string::size_type)v84;
    if (v84)
    {
      v85 = (unint64_t *)&v84->__shared_owners_;
      do
        v86 = __ldxr(v85);
      while (__stxr(v86 + 1, v85));
    }
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(*(_QWORD *)(v83 + 136) + 592), 10, &v122);
    if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v123.__r_.__value_.__l.__data_);
    v123 = v122;
    *((_BYTE *)&v122.__r_.__value_.__s + 23) = 0;
    v122.__r_.__value_.__s.__data_[0] = 0;
    if (v84)
    {
      v87 = (unint64_t *)&v84->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  v24 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122);
  std::string::operator=((std::string *)(v24 + 40), (const std::string *)a4);
  v25 = v124;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122)+ 16) = v25;
  rep = std::chrono::steady_clock::now().__d_.__rep_;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  *((_QWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122)+ 10) = rep;
  if (v22 >= 0x2711)
  {
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v27);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"Processing blob in ", 19);
    *(_BYTE *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v27 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)" chunks with content size ", 26);
    *(_BYTE *)(v27 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v27 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v28 = 0;
    *(_BYTE *)(v27 + 17) = 0;
    v121 = 0;
    v29 = 1;
    v30 = 10000;
    while (1)
    {
      v31 = v30 - v29 + 1;
      memset(&v122, 0, sizeof(v122));
      std::string::basic_string(&v122, (const std::string *)a2, v29 - 1, v31, (std::allocator<char> *)&v120);
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v32);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)"Sending chunk ", 14);
      *(_BYTE *)(v32 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v32 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" of ", 4);
      *(_BYTE *)(v32 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v32 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" chunkSize ", 11);
      *(_BYTE *)(v32 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v32 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v32 + 8), (uint64_t)" bytes", 6);
      *(_BYTE *)(v32 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v32 + 64))(v32, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v32 + 17) = 0;
      MessageSession::sendMessageRequest((_QWORD *)a1, &v123, (uint64_t)&v122, (uint64_t)a3, v29, v30, v22);
      ++v121;
      v33 = *(_QWORD *)(a1 + 120);
      v34 = *(std::__shared_weak_count **)(a1 + 128);
      if (v34)
      {
        p_shared_weak_owners = (unint64_t *)&v34->__shared_weak_owners_;
        do
          v36 = __ldxr(p_shared_weak_owners);
        while (__stxr(v36 + 1, p_shared_weak_owners));
        do
          v37 = __ldxr(p_shared_weak_owners);
        while (__stxr(v37 + 1, p_shared_weak_owners));
      }
      memset(&v120, 0, sizeof(v120));
      if (*(char *)(a4 + 23) >= 0)
        v38 = *(unsigned __int8 *)(a4 + 23);
      else
        v38 = *(_QWORD *)(a4 + 8);
      memset(&v117, 0, sizeof(v117));
      std::string::basic_string[abi:ne180100]((uint64_t)&v117, v38 + 1);
      if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v39 = &v117;
      else
        v39 = (std::string *)v117.__r_.__value_.__r.__words[0];
      if (v38)
      {
        if (*(char *)(a4 + 23) >= 0)
          v40 = (const void *)a4;
        else
          v40 = *(const void **)a4;
        memmove(v39, v40, v38);
      }
      *(_WORD *)((char *)&v39->__r_.__value_.__l.__data_ + v38) = 32;
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v114);
      if ((v116 & 0x80u) == 0)
        v41 = (const std::string::value_type *)&v114;
      else
        v41 = (const std::string::value_type *)v114;
      if ((v116 & 0x80u) == 0)
        v42 = v116;
      else
        v42 = v115;
      v43 = std::string::append(&v117, v41, v42);
      v44 = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
      v118.__r_.__value_.__r.__words[2] = v43->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v118.__r_.__value_.__l.__data_ = v44;
      v43->__r_.__value_.__l.__size_ = 0;
      v43->__r_.__value_.__r.__words[2] = 0;
      v43->__r_.__value_.__r.__words[0] = 0;
      v45 = std::string::append(&v118, " ", 1uLL);
      v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
      v119.__r_.__value_.__r.__words[2] = v45->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v46;
      v45->__r_.__value_.__l.__size_ = 0;
      v45->__r_.__value_.__r.__words[2] = 0;
      v45->__r_.__value_.__r.__words[0] = 0;
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(__p);
      if ((v113 & 0x80u) == 0)
        v47 = __p;
      else
        v47 = (void **)__p[0];
      if ((v113 & 0x80u) == 0)
        v48 = v113;
      else
        v48 = (std::string::size_type)__p[1];
      v49 = std::string::append(&v119, (const std::string::value_type *)v47, v48);
      v50 = *(_OWORD *)&v49->__r_.__value_.__l.__data_;
      v120.__r_.__value_.__r.__words[2] = v49->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v50;
      v49->__r_.__value_.__l.__size_ = 0;
      v49->__r_.__value_.__r.__words[2] = 0;
      v49->__r_.__value_.__r.__words[0] = 0;
      if ((char)v113 < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v119.__r_.__value_.__l.__data_);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118.__r_.__value_.__l.__data_);
      if ((char)v116 < 0)
        operator delete(v114);
      if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v117.__r_.__value_.__l.__data_);
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)&v120))
      {
        v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v51);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)"Timer for message sequence ", 27);
        *(_BYTE *)(v51 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v51 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v51 + 8), (uint64_t)" already exists.", 16);
        *(_BYTE *)(v51 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v51 + 64))(v51, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v51 + 17) = 0;
        goto LABEL_75;
      }
      if (v34)
      {
        v52 = (unint64_t *)&v34->__shared_weak_owners_;
        do
          v53 = __ldxr(v52);
        while (__stxr(v53 + 1, v52));
      }
      v128 = 0;
      v54 = operator new(0x20uLL);
      *v54 = &off_1E78C7D50;
      v54[1] = a1;
      v54[2] = v33;
      v54[3] = v34;
      v128 = v54;
      SipTimerContainer::startTimer((_QWORD *)(a1 + 152), (uint64_t)&v120, (uint64_t)v127, 0x7530u, 0);
      v55 = v128;
      if (v128 == v127)
      {
        v55 = v127;
        v56 = 4;
      }
      else
      {
        if (!v128)
          goto LABEL_75;
        v56 = 5;
      }
      (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_75:
      if (v30 + 10000 >= v22)
        v30 = v22;
      else
        v30 += 10000;
      if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v120.__r_.__value_.__l.__data_);
        if (!v34)
          goto LABEL_81;
LABEL_80:
        std::__shared_weak_count::__release_weak(v34);
        std::__shared_weak_count::__release_weak(v34);
        goto LABEL_81;
      }
      if (v34)
        goto LABEL_80;
LABEL_81:
      if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v122.__r_.__value_.__l.__data_);
      v28 += v31;
      v29 += 10000;
      if (v29 > v22)
      {
        v79 = *(unsigned __int8 *)(a2 + 23);
        if ((v79 & 0x80u) != 0)
          v79 = *(_QWORD *)(a2 + 8);
        if (v79 != v28)
        {
          v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v80);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)"Expected ", 9);
          *(_BYTE *)(v80 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v80 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v80 + 8), (uint64_t)" bytes but sent ", 16);
          *(_BYTE *)(v80 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v80 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v80 + 64))(v80, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v80 + 17) = 0;
        }
        v81 = v121;
        v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
        *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122)+ 17) = v81;
        goto LABEL_153;
      }
    }
  }
  v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v57);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v57 + 8), (uint64_t)"Processing blob as one chunk with content size ", 47);
  *(_BYTE *)(v57 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v57 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v57 + 64))(v57, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v57 + 17) = 0;
  MessageSession::sendMessageRequest((_QWORD *)a1, &v123, a2, (uint64_t)a3, 1, v22, v22);
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122)+ 17) = 1;
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  v58 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122);
  std::string::operator=((std::string *)(v58 + 88), (const std::string *)a2);
  v122.__r_.__value_.__r.__words[0] = (std::string::size_type)&v123;
  v59 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)&v122);
  std::string::operator=((std::string *)(v59 + 112), a3);
  v61 = *(_QWORD *)(a1 + 120);
  v60 = *(std::__shared_weak_count **)(a1 + 128);
  if (v60)
  {
    v62 = (unint64_t *)&v60->__shared_weak_owners_;
    do
      v63 = __ldxr(v62);
    while (__stxr(v63 + 1, v62));
    do
      v64 = __ldxr(v62);
    while (__stxr(v64 + 1, v62));
  }
  memset(&v122, 0, sizeof(v122));
  if (*(char *)(a4 + 23) >= 0)
    v65 = *(unsigned __int8 *)(a4 + 23);
  else
    v65 = *(_QWORD *)(a4 + 8);
  memset(&v118, 0, sizeof(v118));
  std::string::basic_string[abi:ne180100]((uint64_t)&v118, v65 + 1);
  if ((v118.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v66 = &v118;
  else
    v66 = (std::string *)v118.__r_.__value_.__r.__words[0];
  if (v65)
  {
    if (*(char *)(a4 + 23) >= 0)
      v67 = (const void *)a4;
    else
      v67 = *(const void **)a4;
    memmove(v66, v67, v65);
  }
  *(_WORD *)((char *)&v66->__r_.__value_.__l.__data_ + v65) = 32;
  ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v117);
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v68 = &v117;
  else
    v68 = (std::string *)v117.__r_.__value_.__r.__words[0];
  if ((v117.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v69 = HIBYTE(v117.__r_.__value_.__r.__words[2]);
  else
    v69 = v117.__r_.__value_.__l.__size_;
  v70 = std::string::append(&v118, (const std::string::value_type *)v68, v69);
  v71 = *(_OWORD *)&v70->__r_.__value_.__l.__data_;
  v119.__r_.__value_.__r.__words[2] = v70->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v119.__r_.__value_.__l.__data_ = v71;
  v70->__r_.__value_.__l.__size_ = 0;
  v70->__r_.__value_.__r.__words[2] = 0;
  v70->__r_.__value_.__r.__words[0] = 0;
  v72 = std::string::append(&v119, " ", 1uLL);
  v73 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
  v120.__r_.__value_.__r.__words[2] = v72->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v120.__r_.__value_.__l.__data_ = v73;
  v72->__r_.__value_.__l.__size_ = 0;
  v72->__r_.__value_.__r.__words[2] = 0;
  v72->__r_.__value_.__r.__words[0] = 0;
  __p[0] = &v123;
  std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 992, (unsigned __int8 *)&v123, (__int128 **)__p);
  ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v114);
  if ((v116 & 0x80u) == 0)
    v74 = (const std::string::value_type *)&v114;
  else
    v74 = (const std::string::value_type *)v114;
  if ((v116 & 0x80u) == 0)
    v75 = v116;
  else
    v75 = v115;
  v76 = std::string::append(&v120, v74, v75);
  v77 = *(_OWORD *)&v76->__r_.__value_.__l.__data_;
  v122.__r_.__value_.__r.__words[2] = v76->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v122.__r_.__value_.__l.__data_ = v77;
  v76->__r_.__value_.__l.__size_ = 0;
  v76->__r_.__value_.__r.__words[2] = 0;
  v76->__r_.__value_.__r.__words[0] = 0;
  if ((char)v116 < 0)
    operator delete(v114);
  if (SHIBYTE(v120.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v120.__r_.__value_.__l.__data_);
  if (SHIBYTE(v119.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v119.__r_.__value_.__l.__data_);
  if (SHIBYTE(v117.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v117.__r_.__value_.__l.__data_);
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  if (!std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)(a1 + 160), (unsigned __int8 *)&v122))
  {
    if (v60)
    {
      v89 = (unint64_t *)&v60->__shared_weak_owners_;
      do
        v90 = __ldxr(v89);
      while (__stxr(v90 + 1, v89));
    }
    v126 = 0;
    v91 = operator new(0x20uLL);
    *v91 = &off_1E78C7DD0;
    v91[1] = a1;
    v91[2] = v61;
    v91[3] = v60;
    v126 = v91;
    SipTimerContainer::startTimer((_QWORD *)(a1 + 152), (uint64_t)&v122, (uint64_t)v125, 0x7530u, 0);
    v92 = v126;
    if (v126 == v125)
    {
      v93 = 4;
      v92 = v125;
    }
    else
    {
      if (!v126)
        goto LABEL_149;
      v93 = 5;
    }
    (*(void (**)(void))(*v92 + 8 * v93))();
    goto LABEL_149;
  }
  v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v78);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)"Timer for message sequence ", 27);
  *(_BYTE *)(v78 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v78 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v78 + 8), (uint64_t)" already exists.", 16);
  *(_BYTE *)(v78 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v78 + 64))(v78, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v78 + 17) = 0;
LABEL_149:
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v122.__r_.__value_.__l.__data_);
  if (v60)
  {
    std::__shared_weak_count::__release_weak(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
LABEL_153:
  v94 = *(_QWORD *)(a1 + 320);
  v95 = *(_QWORD *)(v94 + 208);
  v96 = *(_QWORD *)(v94 + 216);
  v120.__r_.__value_.__r.__words[0] = v95;
  v120.__r_.__value_.__l.__size_ = v96;
  if (v96)
  {
    v97 = (unint64_t *)(v96 + 8);
    do
      v98 = __ldxr(v97);
    while (__stxr(v98 + 1, v97));
  }
  v99 = *(_QWORD *)(v95 + 136);
  v100 = *(_QWORD *)(v99 + 208);
  v101 = *(std::__shared_weak_count **)(v99 + 216);
  v122.__r_.__value_.__r.__words[0] = v100;
  v122.__r_.__value_.__l.__size_ = (std::string::size_type)v101;
  if (v101)
  {
    v102 = (unint64_t *)&v101->__shared_owners_;
    do
      v103 = __ldxr(v102);
    while (__stxr(v103 + 1, v102));
  }
  SipLazuliManager::releasePowerAssertion(v100, (void **)a4);
  if (v101)
  {
    v104 = (unint64_t *)&v101->__shared_owners_;
    do
      v105 = __ldaxr(v104);
    while (__stlxr(v105 - 1, v104));
    if (!v105)
    {
      ((void (*)(std::__shared_weak_count *))v101->__on_zero_shared)(v101);
      std::__shared_weak_count::__release_weak(v101);
    }
  }
  v106 = (std::__shared_weak_count *)v120.__r_.__value_.__l.__size_;
  if (v120.__r_.__value_.__l.__size_)
  {
    v107 = (unint64_t *)(v120.__r_.__value_.__l.__size_ + 8);
    do
      v108 = __ldaxr(v107);
    while (__stlxr(v108 - 1, v107));
    if (!v108)
    {
      ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
      std::__shared_weak_count::__release_weak(v106);
    }
  }
  if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v123.__r_.__value_.__l.__data_);
}

void sub_1BEF23A00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,void *__p,uint64_t a56,int a57,__int16 a58,char a59,char a60)
{
  std::__shared_weak_count *v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v64;
  uint64_t v65;

  v64 = *(_QWORD **)(v62 - 144);
  if (v64 == v61)
  {
    v65 = 4;
    v64 = (_QWORD *)(v62 - 168);
  }
  else
  {
    if (!v64)
      goto LABEL_6;
    v65 = 5;
  }
  (*(void (**)(void))(*v64 + 8 * v65))();
LABEL_6:
  if (a60 < 0)
    operator delete(__p);
  if (v60)
  {
    std::__shared_weak_count::__release_weak(v60);
    std::__shared_weak_count::__release_weak(v60);
  }
  if (*(char *)(v62 - 185) < 0)
    operator delete(*(void **)(v62 - 208));
  _Unwind_Resume(exception_object);
}

void MessageSession::sendEmptyMessage(MessageSession *this)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  char *v10;
  void *__p[2];
  uint64_t v12;
  void *v13;
  std::__shared_weak_count *v14;
  uint64_t v15;
  std::string v16;

  if (!*((_BYTE *)this + 368))
  {
    v2 = (*(uint64_t (**)(MessageSession *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(MessageSession *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Sending empty message for session ", 34);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(*((_QWORD *)this + 40) + 1616) + 16))(*((_QWORD *)this + 40) + 1616, v2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    memset(&v16, 0, sizeof(v16));
    v3 = *((_QWORD *)this + 40);
    v4 = *(_QWORD **)(v3 + 208);
    v5 = *(std::__shared_weak_count **)(v3 + 216);
    v13 = v4;
    v14 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
    }
    ImsRandomStringGenerator::randomString((ImsRandomStringGenerator *)(v4[17] + 592), 10, &v16);
    if (v5)
    {
      v8 = (unint64_t *)&v5->__shared_owners_;
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v13 = 0;
    v14 = 0;
    v15 = 0;
    __p[0] = 0;
    __p[1] = 0;
    v12 = 0;
    MessageSession::sendMessageRequest(this, &v16, (uint64_t)&v13, (uint64_t)__p, 1, 0, 0);
    if (SHIBYTE(v12) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v15) < 0)
      operator delete(v13);
    *((_BYTE *)this + 368) = 1;
    v10 = (char *)this + 992;
    v13 = &v16;
    *((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (unsigned __int8 *)&v16, (__int128 **)&v13)+ 17) = 1;
    v13 = &v16;
    std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v10, (unsigned __int8 *)&v16, (__int128 **)&v13)[72] = 1;
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
}

void sub_1BEF23E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  if (a27 < 0)
    operator delete(a22);
  _Unwind_Resume(exception_object);
}

void MessageSession::sendMessage(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  void *__p[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v24 = 0;
  v22 = 0u;
  v23 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v22, 1);
  LazuliMessage::encode(*a2, (uint64_t)&v22, a3);
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v23 + 1) + 8, v20);
  __p[0] = 0;
  __p[1] = 0;
  v19 = 0;
  (*(void (**)(void **__return_ptr))(*(_QWORD *)*a2 + 40))(__p);
  if (a1[42])
  {
    v6 = *a2;
    v7 = (std::__shared_weak_count *)a2[1];
    v17[0] = v6;
    v17[1] = (uint64_t)v7;
    if (v7)
    {
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldxr(p_shared_owners);
      while (__stxr(v9 + 1, p_shared_owners));
    }
    MessageSession::dumpMessage((uint64_t)a1, v17, 1);
    if (v7)
    {
      v10 = (unint64_t *)&v7->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    (*(void (**)(_QWORD *, void **, void **))(*a1[42] + 24))(a1[42], v20, __p);
  }
  else
  {
    v14 = 0u;
    v15 = 0u;
    v16 = 0u;
    v12[0] = &off_1E78B7238;
    v12[1] = &_bambiDomain;
    v13 = 1073741840;
    ((void (*)(_QWORD **, void **, _QWORD *))(*a1)[16])(a1, __p, v12);
    ImsResult::~ImsResult((ImsResult *)v12);
  }
  if (SHIBYTE(v19) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21) < 0)
    operator delete(v20[0]);
  *(_QWORD *)&v22 = &off_1E78D7A10;
  if ((_BYTE)v23)
  {
    if (*((_QWORD *)&v22 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v22 + 1) + 8))(*((_QWORD *)&v22 + 1));
  }
}

void sub_1BEF24054(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  uint64_t v26;
  uint64_t v28;

  ImsResult::~ImsResult((ImsResult *)&a10);
  if (a26 < 0)
    operator delete(__p);
  if (*(char *)(v26 - 81) < 0)
    operator delete(*(void **)(v26 - 104));
  *(_QWORD *)(v26 - 80) = &off_1E78D7A10;
  if (*(_BYTE *)(v26 - 64))
  {
    v28 = *(_QWORD *)(v26 - 72);
    if (v28)
      (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  }
  _Unwind_Resume(a1);
}

void MessageSession::dumpMessage(uint64_t a1, uint64_t *a2, int a3)
{
  ctu::XpcJetsamAssertion *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  LazuliMessage *v20;
  int isChunk;
  uint64_t v22;
  void *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  const char *v27;
  uint64_t v28;
  std::string::size_type v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _BOOL4 v38;
  unint64_t v39;
  std::string::size_type v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::string v44;
  std::string v45;
  void *v46[2];
  __int128 v47;
  uint64_t v48;
  std::string v49;
  void *v50;
  unint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  void *v58[2];
  uint64_t v59;
  void *v60[2];
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  void *__p[2];
  __int128 v69;
  uint64_t v70;
  std::string v71;
  std::string v72;
  __int128 v73[4];
  void *v74[2];
  __int128 v75;
  __int128 v76;
  _OWORD v77[9];
  uint64_t v78;
  void *v79;
  char v80;
  uint64_t v81;
  std::__shared_weak_count *v82;

  v81 = 0;
  v82 = 0;
  v6 = (ctu::XpcJetsamAssertion *)pthread_mutex_lock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  v7 = (void *)qword_1EF57C590;
  if (!qword_1EF57C590)
  {
    ctu::XpcJetsamAssertion::create_default_global(v6);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)&qword_1EF57C590, v73);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v73[0] + 1);
    if (*((_QWORD *)&v73[0] + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v73[0] + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    v7 = (void *)qword_1EF57C590;
  }
  v11 = (std::__shared_weak_count *)off_1EF57C598;
  __p[0] = v7;
  __p[1] = off_1EF57C598;
  if (off_1EF57C598)
  {
    v12 = (unint64_t *)((char *)off_1EF57C598 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  pthread_mutex_unlock(&ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance);
  std::string::basic_string[abi:ne180100]<0>(&v79, "msrpDump");
  ctu::XpcJetsamAssertion::createActivity();
  if (v80 < 0)
    operator delete(v79);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v78 = 0;
  v76 = 0u;
  memset(v77, 0, sizeof(v77));
  *(_OWORD *)v74 = 0u;
  v75 = 0u;
  memset(v73, 0, sizeof(v73));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v73);
  memset(&v72, 0, sizeof(v72));
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), __p);
  if (*((char *)__p[0] + 4159) < 0)
    std::string::__init_copy_ctor_external(&v72, *((const std::string::value_type **)__p[0] + 517), *((_QWORD *)__p[0] + 518));
  else
    v72 = *(std::string *)((char *)__p[0] + 4136);
  v16 = (std::__shared_weak_count *)__p[1];
  if (__p[1])
  {
    v17 = (unint64_t *)((char *)__p[1] + 8);
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  memset(&v71, 0, sizeof(v71));
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v19 = ims::_logger;
  std::string::basic_string[abi:ne180100]<0>(__p, "msrp.dump");
  ImsLogger::getFacilityWithStackTag(v19, (uint64_t)__p, (uint64_t)&v72, &v71);
  if (SBYTE7(v69) < 0)
    operator delete(__p[0]);
  v70 = 0;
  *(_OWORD *)__p = 0u;
  v69 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)__p, 1);
  v67 = 0;
  v65 = 0u;
  v66 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v65, 1);
  v64 = 0;
  v62 = 0u;
  v63 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v62, 1);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)*a2 + 56))(*a2, __p);
  LazuliMessage::encodeHeaders(*a2, (uint64_t)__p);
  LazuliMessage::encodeBody(*a2, (uint64_t)&v65);
  v20 = (LazuliMessage *)*a2;
  isChunk = LazuliMessage::isChunk(v20);
  (*(void (**)(LazuliMessage *, __int128 *, _QWORD))(*(_QWORD *)v20 + 64))(v20, &v62, isChunk ^ 1u);
  v60[0] = 0;
  v60[1] = 0;
  v61 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v69 + 1) + 8, v60);
  v58[0] = 0;
  v58[1] = 0;
  v59 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v66 + 1) + 8, v58);
  v56[0] = 0;
  v56[1] = 0;
  v57 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v63 + 1) + 8, v56);
  v55 = 0;
  v53 = 0u;
  v54 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)&v53, 1);
  v22 = *(_QWORD *)(a1 + 336);
  v23 = *(void **)(v22 + 32);
  v24 = *(_QWORD *)(v22 + 40);
  v50 = v23;
  v51 = v24;
  if (v24)
  {
    v25 = (unint64_t *)(v24 + 8);
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  (*(void (**)(void *, __int128 *))(*(_QWORD *)v23 + 40))(v23, &v53);
  if (a3)
    v27 = " --> ";
  else
    v27 = " <-- ";
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v53 + 1), (uint64_t)v27, 5);
  BYTE1(v54) = 0;
  v28 = *(_QWORD *)(a1 + 336);
  v29 = *(_QWORD *)(v28 + 48);
  v30 = *(std::__shared_weak_count **)(v28 + 56);
  v49.__r_.__value_.__r.__words[0] = v29;
  v49.__r_.__value_.__l.__size_ = (std::string::size_type)v30;
  if (v30)
  {
    v31 = (unint64_t *)&v30->__shared_owners_;
    do
      v32 = __ldxr(v31);
    while (__stxr(v32 + 1, v31));
  }
  (*(void (**)(std::string::size_type, __int128 *))(*(_QWORD *)v29 + 40))(v29, &v53);
  LOBYTE(v46[0]) = 32;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v53 + 1), (uint64_t)v46, 1);
  BYTE1(v54) = 0;
  std::ostream::operator<<();
  BYTE1(v54) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v53 + 1), (uint64_t)" bytes (", 8);
  BYTE1(v54) = 0;
  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 336) + 40))(v46);
  (*(void (**)(__int128 *, void **))(v53 + 32))(&v53, v46);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)&v53 + 1), (uint64_t)")", 1);
  BYTE1(v54) = 0;
  if (SBYTE7(v47) < 0)
    operator delete(v46[0]);
  if (v30)
  {
    v33 = (unint64_t *)&v30->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
  v35 = (std::__shared_weak_count *)v51;
  if (v51)
  {
    v36 = (unint64_t *)(v51 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  v50 = 0;
  v51 = 0;
  v52 = 0;
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v54 + 1) + 8, &v50);
  memset(&v49, 0, sizeof(v49));
  v38 = HIBYTE(v52) > 0x5Fu;
  if (v52 >= 0)
    v39 = HIBYTE(v52);
  else
    v39 = v51;
  if (v52 < 0)
    v38 = v51 > 0x5F;
  if (v38)
    v40 = v39 + 10;
  else
    v40 = 100;
  std::string::append(&v49, ((v40 - v39) >> 1) - 1, 61);
  v48 = 0;
  *(_OWORD *)v46 = 0u;
  v47 = 0u;
  ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v46, 1);
  LoggableString::LoggableString(&v45, &v49);
  (*((void (**)(void **, std::string *))v46[0] + 5))(v46, &v45);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v46[1], (uint64_t)" ", 1);
  BYTE1(v47) = 0;
  (*((void (**)(void **, __int128 *))v46[0] + 10))(v46, &v53);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>((_QWORD *)v46[1], (uint64_t)" ", 1);
  BYTE1(v47) = 0;
  LoggableString::LoggableString(&v44, &v49);
  (*((void (**)(void **, std::string *))v46[0] + 5))(v46, &v44);
  (*((void (**)(void **, _QWORD *(*)(_QWORD *)))v46[0] + 8))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  BYTE1(v47) = 0;
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  memset(&v45, 0, sizeof(v45));
  std::string::append(&v45, v40, 61);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>(*((_QWORD *)&v47 + 1) + 8, &v44);
  ims::dumpMessage((uint64_t *)&v71, (uint64_t *)&v44, (uint64_t *)v60, (uint64_t)v58, (uint64_t)v56, (uint64_t)&v45, 1);
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v44.__r_.__value_.__l.__data_);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v45.__r_.__value_.__l.__data_);
  v46[0] = &off_1E78D7A10;
  if ((_BYTE)v47 && v46[1])
    (*(void (**)(void *))(*(_QWORD *)v46[1] + 8))(v46[1]);
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  if (SHIBYTE(v52) < 0)
    operator delete(v50);
  *(_QWORD *)&v53 = &off_1E78D7A10;
  if ((_BYTE)v54 && *((_QWORD *)&v53 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 8))(*((_QWORD *)&v53 + 1));
  if (SHIBYTE(v57) < 0)
    operator delete(v56[0]);
  if (SHIBYTE(v59) < 0)
    operator delete(v58[0]);
  if (SHIBYTE(v61) < 0)
    operator delete(v60[0]);
  *(_QWORD *)&v62 = &off_1E78D7A10;
  if ((_BYTE)v63 && *((_QWORD *)&v62 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v62 + 1) + 8))(*((_QWORD *)&v62 + 1));
  *(_QWORD *)&v65 = &off_1E78D7A10;
  if ((_BYTE)v66 && *((_QWORD *)&v65 + 1))
    (*(void (**)(_QWORD))(**((_QWORD **)&v65 + 1) + 8))(*((_QWORD *)&v65 + 1));
  __p[0] = &off_1E78D7A10;
  if ((_BYTE)v69 && __p[1])
    (*(void (**)(void *))(*(_QWORD *)__p[1] + 8))(__p[1]);
  if (SHIBYTE(v71.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v71.__r_.__value_.__l.__data_);
  if (SHIBYTE(v72.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v72.__r_.__value_.__l.__data_);
  *(_QWORD *)&v73[0] = *MEMORY[0x1E0DE4F60];
  *(_QWORD *)((char *)v73 + *(_QWORD *)(*(_QWORD *)&v73[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
  *((_QWORD *)&v73[0] + 1) = MEMORY[0x1E0DE4FB8] + 16;
  if (SHIBYTE(v75) < 0)
    operator delete(v74[1]);
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  MEMORY[0x1C3B8707C](v77);
  v41 = v82;
  if (v82)
  {
    v42 = (unint64_t *)&v82->__shared_owners_;
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
}

void sub_1BEF24970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  int a65;
  uint64_t v65;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a53);
  std::ostringstream::~ostringstream((uint64_t)&a65);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v65 - 72);
  _Unwind_Resume(a1);
}

void MessageSession::handleConnected(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  xpc_object_t v9;
  xpc_object_t v10;
  xpc_object_t v11;
  std::__shared_weak_count *size;
  unint64_t *v13;
  unint64_t v14;
  std::string *v15;
  uint64_t v16;
  std::string *p_object;
  uint64_t v18;
  std::string *v19;
  std::string *v20;
  int v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  LazuliDelegate *v25;
  uint64_t v26;
  IMSClientManager *v27;
  std::string *v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  LazuliDelegate *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t **v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  SipDialogManager *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  uint64_t v55;
  unint64_t *p_shared_weak_owners;
  unint64_t v57;
  std::__shared_weak_count *v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  unint64_t *v61;
  unint64_t v62;
  unint64_t *p_shared_owners;
  unint64_t v64;
  unint64_t v65;
  char v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  SipSubscription *v70;
  ImsOutStream *v71;
  const std::string *v72;
  std::__shared_weak_count *v73;
  unint64_t *v74;
  unint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  std::__shared_weak_count *v78;
  unint64_t *v79;
  unint64_t v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  xpc_object_t v87;
  xpc_object_t v88;
  xpc_object_t v89;
  xpc_object_t v90;
  xpc_object_t v91;
  xpc_object_t v92;
  xpc_object_t v93;
  xpc_object_t v94;
  std::string v95;
  xpc_object_t v96;
  xpc_object_t v97;
  const char *v98;
  std::string object;
  xpc_object_t v100;
  xpc_object_t v101;
  xpc_object_t v102;
  xpc_object_t v103;
  xpc_object_t v104;
  xpc_object_t v105;
  xpc_object_t *p_data;
  const char *v107;
  xpc_object_t v108;
  xpc_object_t v109;
  xpc_object_t v110;
  xpc_object_t v111;
  xpc_object_t v112;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"MessageSession::handleConnected to ", 35);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" for ", 5);
  *(_BYTE *)(v4 + 17) = 0;
  SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &object);
  v5 = MEMORY[0x1C3B87B98](object.__r_.__value_.__r.__words[0]);
  v6 = MEMORY[0x1E0C812F8];
  if (v5 == MEMORY[0x1E0C812F8])
    v7 = "group";
  else
    v7 = "cpm";
  if (v5 == MEMORY[0x1E0C812F8])
    v8 = 5;
  else
    v8 = 3;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v7, v8);
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" session", 8);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  xpc_release(object.__r_.__value_.__l.__data_);
  v96 = 0;
  v9 = xpc_dictionary_create(0, 0, 0);
  v10 = v9;
  if (v9)
  {
    v96 = v9;
  }
  else
  {
    v10 = xpc_null_create();
    v96 = v10;
    if (!v10)
    {
      v11 = xpc_null_create();
      v10 = 0;
      goto LABEL_14;
    }
  }
  if (MEMORY[0x1C3B87B98](v10) == v6)
  {
    xpc_retain(v10);
    goto LABEL_15;
  }
  v11 = xpc_null_create();
LABEL_14:
  v96 = v11;
LABEL_15:
  xpc_release(v10);
  memset(&v95, 0, sizeof(v95));
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &object);
  if (*(char *)(object.__r_.__value_.__r.__words[0] + 4159) < 0)
    std::string::__init_copy_ctor_external(&v95, *(const std::string::value_type **)(object.__r_.__value_.__r.__words[0] + 4136), *(_QWORD *)(object.__r_.__value_.__r.__words[0] + 4144));
  else
    v95 = *(std::string *)(object.__r_.__value_.__r.__words[0] + 4136);
  size = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
  if (object.__r_.__value_.__l.__size_)
  {
    v13 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  if ((v95.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v15 = &v95;
  else
    v15 = (std::string *)v95.__r_.__value_.__r.__words[0];
  v93 = xpc_string_create((const char *)v15);
  if (!v93)
    v93 = xpc_null_create();
  object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v96;
  object.__r_.__value_.__l.__size_ = (std::string::size_type)"kStackId";
  xpc::dict::object_proxy::operator=((uint64_t)&object, &v93, &v94);
  xpc_release(v94);
  v94 = 0;
  xpc_release(v93);
  v93 = 0;
  memset(&object, 0, sizeof(object));
  v16 = *(_QWORD *)(a1 + 320);
  if (*(char *)(v16 + 1671) < 0)
    std::string::__init_copy_ctor_external(&object, *(const std::string::value_type **)(v16 + 1648), *(_QWORD *)(v16 + 1656));
  else
    object = *(std::string *)(v16 + 1648);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!object.__r_.__value_.__l.__size_)
    {
LABEL_39:
      operator delete(object.__r_.__value_.__l.__data_);
      goto LABEL_40;
    }
    p_object = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&object.__r_.__value_.__s + 23))
      goto LABEL_40;
    p_object = &object;
  }
  v91 = xpc_string_create((const char *)p_object);
  if (!v91)
    v91 = xpc_null_create();
  p_data = &v96;
  v107 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&p_data, &v91, &v92);
  xpc_release(v92);
  v92 = 0;
  xpc_release(v91);
  v91 = 0;
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_39;
LABEL_40:
  memset(&object, 0, sizeof(object));
  v18 = *(_QWORD *)(a1 + 320);
  if (*(char *)(v18 + 1727) < 0)
    std::string::__init_copy_ctor_external(&object, *(const std::string::value_type **)(v18 + 1704), *(_QWORD *)(v18 + 1712));
  else
    object = *(std::string *)(v18 + 1704);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!object.__r_.__value_.__l.__size_)
    {
LABEL_51:
      operator delete(object.__r_.__value_.__l.__data_);
      goto LABEL_52;
    }
    v19 = (std::string *)object.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&object.__r_.__value_.__s + 23))
      goto LABEL_52;
    v19 = &object;
  }
  v89 = xpc_string_create((const char *)v19);
  if (!v89)
    v89 = xpc_null_create();
  p_data = &v96;
  v107 = "kContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&p_data, &v89, &v90);
  xpc_release(v90);
  v90 = 0;
  xpc_release(v89);
  v89 = 0;
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_51;
LABEL_52:
  if (*(_BYTE *)(*(_QWORD *)(a1 + 320) + 1920))
  {
    v88 = v96;
    if (v96)
      xpc_retain(v96);
    else
      v88 = xpc_null_create();
    v112 = 0;
    SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &v112);
    if (MEMORY[0x1C3B87B98](v112) != v6)
    {
      v110 = xpc_BOOL_create(0);
      if (!v110)
        v110 = xpc_null_create();
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
      xpc::dict::object_proxy::operator=((uint64_t)&object, &v110, &v111);
      xpc_release(v111);
      v111 = 0;
      xpc_release(v110);
      v110 = 0;
      v108 = xpc_BOOL_create(*(_BYTE *)(*(_QWORD *)(a1 + 320) + 1792));
      if (!v108)
        v108 = xpc_null_create();
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
      object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
      xpc::dict::object_proxy::operator=((uint64_t)&object, &v108, &v109);
      xpc_release(v109);
      v109 = 0;
      xpc_release(v108);
      v108 = 0;
      SipUri::asString(a1 + 480, 2, &object);
      if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = &object;
      else
        v20 = (std::string *)object.__r_.__value_.__r.__words[0];
      v104 = xpc_string_create((const char *)v20);
      if (!v104)
        v104 = xpc_null_create();
      p_data = &v88;
      v107 = "kRemoteUri";
      xpc::dict::object_proxy::operator=((uint64_t)&p_data, &v104, &v105);
      xpc_release(v105);
      v105 = 0;
      xpc_release(v104);
      v104 = 0;
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      v21 = 0;
LABEL_71:
      xpc_release(v112);
      p_data = 0;
      v107 = 0;
      SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v97);
      if (*((char *)v97 + 4159) < 0)
        std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v97 + 517), *((_QWORD *)v97 + 518));
      else
        object = *(std::string *)((char *)v97 + 4136);
      IMSClientManager::lazuliDelegateForStack((void **)&object.__r_.__value_.__l.__data_, &p_data);
      if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
        operator delete(object.__r_.__value_.__l.__data_);
      v22 = (std::__shared_weak_count *)v98;
      if (v98)
      {
        v23 = (unint64_t *)(v98 + 8);
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (!v24)
        {
          ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
          std::__shared_weak_count::__release_weak(v22);
        }
      }
      v25 = (LazuliDelegate *)p_data;
      if (p_data)
      {
        v97 = v88;
        if (v88)
          xpc_retain(v88);
        else
          v97 = xpc_null_create();
        LazuliDelegate::handleSessionReady(v25, (std::string::size_type)&v97);
        xpc_release(v97);
        v97 = 0;
        if (v21)
        {
          v112 = v88;
          if (v88)
            xpc_retain(v88);
          else
            v112 = xpc_null_create();
          LazuliDelegate::handleGroupChatCreated(v25, &v112);
          xpc_release(v112);
          v112 = 0;
        }
      }
      else
      {
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v26);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"No delegate for stackId ", 24);
        *(_BYTE *)(v26 + 17) = 0;
        SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v97);
        if (*((char *)v97 + 4159) < 0)
          std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v97 + 517), *((_QWORD *)v97 + 518));
        else
          object = *(std::string *)((char *)v97 + 4136);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 32))(v26, &object);
        v27 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v26 + 17) = 0;
        if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
          operator delete(object.__r_.__value_.__l.__data_);
        v34 = (std::__shared_weak_count *)v98;
        if (v98)
        {
          v35 = (unint64_t *)(v98 + 8);
          do
            v36 = __ldaxr(v35);
          while (__stlxr(v36 - 1, v35));
          if (!v36)
          {
            ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
            std::__shared_weak_count::__release_weak(v34);
          }
        }
      }
      v40 = (std::__shared_weak_count *)v107;
      if (v107)
      {
        v41 = (unint64_t *)(v107 + 8);
        do
          v42 = __ldaxr(v41);
        while (__stlxr(v42 - 1, v41));
        if (!v42)
        {
          ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
          std::__shared_weak_count::__release_weak(v40);
        }
      }
      IMSClientManager::instance(v27);
      IPTelephonyManager::getInstance((uint64_t *)&object);
      v43 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
      v44 = *(uint64_t ***)(object.__r_.__value_.__r.__words[0] + 200);
      if (object.__r_.__value_.__l.__size_)
      {
        v45 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
          std::__shared_weak_count::__release_weak(v43);
        }
      }
      IMSCallManager::handleMOSessionConnected(v44, (void **)(*(_QWORD *)(a1 + 320) + 1648));
      xpc_release(v88);
      v88 = 0;
      goto LABEL_163;
    }
    v110 = xpc_BOOL_create(1);
    if (!v110)
      v110 = xpc_null_create();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v110, &v111);
    xpc_release(v111);
    v111 = 0;
    xpc_release(v110);
    v110 = 0;
    v108 = xpc_BOOL_create(0);
    if (!v108)
      v108 = xpc_null_create();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v88;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v108, &v109);
    xpc_release(v109);
    v109 = 0;
    xpc_release(v108);
    v108 = 0;
    *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
    SipDialog::sipSession(*(SipDialog **)(a1 + 320), &object);
    if (object.__r_.__value_.__r.__words[0])
    {
      if (*(char *)(object.__r_.__value_.__r.__words[0] + 1295) < 0)
      {
        if (*(_QWORD *)(object.__r_.__value_.__r.__words[0] + 1280))
          goto LABEL_80;
      }
      else if (*(_BYTE *)(object.__r_.__value_.__r.__words[0] + 1295))
      {
LABEL_80:
        p_data = &v112;
        v107 = "kIsSuccess";
        v97 = &v88;
        v98 = "kIsSuccess";
        xpc::dict::object_proxy::operator=((uint64_t)&v97, (uint64_t)&p_data, &v105);
        xpc_release(v105);
        v105 = 0;
        p_data = &v112;
        v107 = "kTransactionId";
        v97 = &v88;
        v98 = "kTransactionId";
        xpc::dict::object_proxy::operator=((uint64_t)&v97, (uint64_t)&p_data, &v104);
        xpc_release(v104);
        v104 = 0;
        p_data = &v112;
        v107 = "kConferenceFocus";
        v97 = &v88;
        v98 = "kConferenceFocus";
        xpc::dict::object_proxy::operator=((uint64_t)&v97, (uint64_t)&p_data, &v103);
        xpc_release(v103);
        v103 = 0;
        v21 = 1;
LABEL_211:
        v81 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
        if (object.__r_.__value_.__l.__size_)
        {
          v82 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        goto LABEL_71;
      }
    }
    v21 = 0;
    goto LABEL_211;
  }
  v87 = v96;
  if (v96)
    xpc_retain(v96);
  else
    v87 = xpc_null_create();
  v97 = 0;
  SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &v97);
  if (MEMORY[0x1C3B87B98](v97) == v6)
  {
    v111 = xpc_BOOL_create(1);
    if (!v111)
      v111 = xpc_null_create();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v111, &v112);
    xpc_release(v112);
    v112 = 0;
    xpc_release(v111);
    v111 = 0;
    v109 = xpc_BOOL_create(0);
    if (!v109)
      v109 = xpc_null_create();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v109, &v110);
    xpc_release(v110);
    v110 = 0;
    xpc_release(v109);
    v109 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kConversationId";
    p_data = &v87;
    v107 = "kConversationId";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v108);
    xpc_release(v108);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kContributionId";
    p_data = &v87;
    v107 = "kContributionId";
    v108 = 0;
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v105);
    xpc_release(v105);
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kConferenceFocus";
    v105 = 0;
    p_data = &v87;
    v107 = "kConferenceFocus";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v104);
    xpc_release(v104);
    v104 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kSubject";
    p_data = &v87;
    v107 = "kSubject";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v103);
    xpc_release(v103);
    v103 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kReferredBy";
    p_data = &v87;
    v107 = "kReferredBy";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v102);
    xpc_release(v102);
    v102 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kRemoteUri";
    p_data = &v87;
    v107 = "kRemoteUri";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v101);
    xpc_release(v101);
    v101 = 0;
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v97;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kResourceXml";
    p_data = &v87;
    v107 = "kResourceXml";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, (uint64_t)&object, &v100);
    xpc_release(v100);
    v100 = 0;
  }
  else
  {
    v111 = xpc_BOOL_create(0);
    if (!v111)
      v111 = xpc_null_create();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsGroupChat";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v111, &v112);
    xpc_release(v112);
    v112 = 0;
    xpc_release(v111);
    v111 = 0;
    v109 = xpc_BOOL_create(*(_BYTE *)(*(_QWORD *)(a1 + 320) + 1792));
    if (!v109)
      v109 = xpc_null_create();
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
    object.__r_.__value_.__l.__size_ = (std::string::size_type)"kIsChatbot";
    xpc::dict::object_proxy::operator=((uint64_t)&object, &v109, &v110);
    xpc_release(v110);
    v110 = 0;
    xpc_release(v109);
    v109 = 0;
    SipUri::asString(a1 + 480, 2, &object);
    if ((object.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v28 = &object;
    else
      v28 = (std::string *)object.__r_.__value_.__r.__words[0];
    v105 = xpc_string_create((const char *)v28);
    if (!v105)
      v105 = xpc_null_create();
    p_data = &v87;
    v107 = "kRemoteUri";
    xpc::dict::object_proxy::operator=((uint64_t)&p_data, &v105, &v108);
    xpc_release(v108);
    v108 = 0;
    xpc_release(v105);
    v105 = 0;
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
  }
  xpc_release(v97);
  p_data = 0;
  v107 = 0;
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v97);
  if (*((char *)v97 + 4159) < 0)
    std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v97 + 517), *((_QWORD *)v97 + 518));
  else
    object = *(std::string *)((char *)v97 + 4136);
  IMSClientManager::lazuliDelegateForStack((void **)&object.__r_.__value_.__l.__data_, &p_data);
  if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
    operator delete(object.__r_.__value_.__l.__data_);
  v29 = (std::__shared_weak_count *)v98;
  if (v98)
  {
    v30 = (unint64_t *)(v98 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  v32 = (LazuliDelegate *)p_data;
  if (p_data)
  {
    object.__r_.__value_.__r.__words[0] = (std::string::size_type)v87;
    if (v87)
      xpc_retain(v87);
    else
      object.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
    LazuliDelegate::handleSessionReady(v32, (std::string::size_type)&object);
    xpc_release(object.__r_.__value_.__l.__data_);
    object.__r_.__value_.__r.__words[0] = 0;
    v97 = v87;
    if (v87)
      xpc_retain(v87);
    else
      v97 = xpc_null_create();
    LazuliDelegate::handleIncomingChat(v32, &v97);
    xpc_release(v97);
    v97 = 0;
  }
  else
  {
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v33);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v33 + 8), (uint64_t)"No delegate for stackId ", 24);
    *(_BYTE *)(v33 + 17) = 0;
    SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v97);
    if (*((char *)v97 + 4159) < 0)
      std::string::__init_copy_ctor_external(&object, *((const std::string::value_type **)v97 + 517), *((_QWORD *)v97 + 518));
    else
      object = *(std::string *)((char *)v97 + 4136);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v33 + 32))(v33, &object);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v33 + 64))(v33, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v33 + 17) = 0;
    if (SHIBYTE(object.__r_.__value_.__r.__words[2]) < 0)
      operator delete(object.__r_.__value_.__l.__data_);
    v84 = (std::__shared_weak_count *)v98;
    if (v98)
    {
      v85 = (unint64_t *)(v98 + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 - 1, v85));
      if (!v86)
      {
        ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
        std::__shared_weak_count::__release_weak(v84);
      }
    }
  }
  v37 = (std::__shared_weak_count *)v107;
  if (v107)
  {
    v38 = (unint64_t *)(v107 + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
      std::__shared_weak_count::__release_weak(v37);
    }
  }
  xpc_release(v87);
  v87 = 0;
LABEL_163:
  SipDialog::lazuliGroupParams(*(SipDialog **)(a1 + 320), &object);
  v47 = MEMORY[0x1C3B87B98](object.__r_.__value_.__r.__words[0]);
  xpc_release(object.__r_.__value_.__l.__data_);
  if (v47 != v6)
    goto LABEL_164;
  *(_OWORD *)&object.__r_.__value_.__l.__data_ = 0uLL;
  v48 = *(_QWORD *)(a1 + 320);
  v50 = *(SipDialogManager **)(v48 + 208);
  v49 = *(_QWORD *)(v48 + 216);
  p_data = (xpc_object_t *)v50;
  v107 = (const char *)v49;
  if (v49)
  {
    v51 = (unint64_t *)(v49 + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
  }
  v53 = operator new();
  v54 = *(std::__shared_weak_count **)(a1 + 128);
  if (v54)
  {
    v55 = *(_QWORD *)(a1 + 120);
    p_shared_weak_owners = (unint64_t *)&v54->__shared_weak_owners_;
    do
      v57 = __ldxr(p_shared_weak_owners);
    while (__stxr(v57 + 1, p_shared_weak_owners));
    v58 = std::__shared_weak_count::lock(v54);
    if (v58)
    {
      v59 = v58;
      if (v55)
        v60 = v55 + 112;
      else
        v60 = 0;
      v61 = (unint64_t *)&v58->__shared_weak_owners_;
      do
        v62 = __ldxr(v61);
      while (__stxr(v62 + 1, v61));
      std::__shared_weak_count::__release_weak(v54);
      p_shared_owners = (unint64_t *)&v59->__shared_owners_;
      do
        v64 = __ldaxr(p_shared_owners);
      while (__stlxr(v64 - 1, p_shared_owners));
      if (!v64)
      {
        ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
        std::__shared_weak_count::__release_weak(v59);
      }
      *(_QWORD *)(v53 + 16) = 0;
      *(_QWORD *)(v53 + 24) = 0;
      *(_QWORD *)v53 = &off_1E78DEE90;
      *(_QWORD *)(v53 + 8) = 0;
      *(_QWORD *)(v53 + 32) = v60;
      *(_QWORD *)(v53 + 40) = v59;
      do
        v65 = __ldxr(v61);
      while (__stxr(v65 + 1, v61));
      v66 = 0;
      goto LABEL_188;
    }
    std::__shared_weak_count::__release_weak(v54);
  }
  v59 = 0;
  *(_QWORD *)(v53 + 16) = 0;
  *(_QWORD *)(v53 + 24) = 0;
  *(_QWORD *)v53 = &off_1E78DEE90;
  *(_QWORD *)(v53 + 8) = 0;
  *(_QWORD *)(v53 + 32) = 0;
  *(_QWORD *)(v53 + 40) = 0;
  v66 = 1;
LABEL_188:
  *(_BYTE *)(v53 + 48) = 1;
  SipDialogManager::subscribeToEventPackage(v50, (SipEventPackage *)v53, (const SipUri *)(a1 + 480), &object);
  if ((v66 & 1) == 0)
    std::__shared_weak_count::__release_weak(v59);
  v67 = (std::__shared_weak_count *)v107;
  if (v107)
  {
    v68 = (unint64_t *)(v107 + 8);
    do
      v69 = __ldaxr(v68);
    while (__stlxr(v69 - 1, v68));
    if (!v69)
    {
      ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
      std::__shared_weak_count::__release_weak(v67);
    }
  }
  v70 = (SipSubscription *)object.__r_.__value_.__r.__words[0];
  if (object.__r_.__value_.__r.__words[0])
  {
    v71 = (ImsOutStream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 64))(a1);
    (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)a1 + 16))(a1, v71);
    SipSubscription::printSubscriptionInfo(v70, v71, 1);
    v72 = *(const std::string **)(object.__r_.__value_.__r.__words[0] + 232);
    v73 = *(std::__shared_weak_count **)(object.__r_.__value_.__r.__words[0] + 240);
    p_data = (xpc_object_t *)&v72->__r_.__value_.__l.__data_;
    v107 = (const char *)v73;
    if (v73)
    {
      v74 = (unint64_t *)&v73->__shared_owners_;
      do
        v75 = __ldxr(v74);
      while (__stxr(v75 + 1, v74));
    }
    std::string::operator=((std::string *)(a1 + 376), v72 + 64);
    if (v73)
    {
      v76 = (unint64_t *)&v73->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v73->__on_zero_shared)(v73);
        std::__shared_weak_count::__release_weak(v73);
      }
    }
  }
  v78 = (std::__shared_weak_count *)object.__r_.__value_.__l.__size_;
  if (object.__r_.__value_.__l.__size_)
  {
    v79 = (unint64_t *)(object.__r_.__value_.__l.__size_ + 8);
    do
      v80 = __ldaxr(v79);
    while (__stlxr(v80 - 1, v79));
    if (!v80)
    {
      ((void (*)(std::__shared_weak_count *))v78->__on_zero_shared)(v78);
      std::__shared_weak_count::__release_weak(v78);
    }
  }
LABEL_164:
  if (SHIBYTE(v95.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v95.__r_.__value_.__l.__data_);
  xpc_release(v96);
}

void sub_1BEF25E2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, xpc_object_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,xpc_object_t a23,xpc_object_t a24,uint64_t a25,xpc_object_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  uint64_t v31;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v31 - 120);
  xpc_release(object);
  if (a22 < 0)
    operator delete(__p);
  xpc_release(a23);
  _Unwind_Resume(a1);
}

xpc_object_t SipDialog::lazuliGroupParams@<X0>(SipDialog *this@<X0>, _QWORD *a2@<X8>)
{
  void *v2;
  xpc_object_t result;

  v2 = (void *)*((_QWORD *)this + 223);
  *a2 = v2;
  if (v2)
    return xpc_retain(v2);
  result = xpc_null_create();
  *a2 = result;
  return result;
}

void `non-virtual thunk to'MessageSession::handleConnected(uint64_t a1, _QWORD *a2)
{
  MessageSession::handleConnected(a1 - 104, a2);
}

void xpc::dict::object_proxy::operator=(uint64_t a1@<X0>, uint64_t a2@<X1>, xpc_object_t *a3@<X8>)
{
  xpc_object_t v5;
  xpc_object_t object;

  object = 0;
  xpc::dict::object_proxy::operator xpc::object(a2, &object);
  v5 = object;
  if (object)
    xpc_retain(object);
  else
    v5 = xpc_null_create();
  xpc::dict::object_proxy::operator=(a1, &v5, a3);
  xpc_release(v5);
  v5 = 0;
  xpc_release(object);
}

void MessageSession::handleDisconnected(_QWORD *a1)
{
  uint64_t v2;
  IMSClientManager *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  xpc_object_t object;
  void *__p;
  std::__shared_weak_count *v11;
  char v12;

  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v2);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"MessageSession::handleDisconnected", 34);
  *(_BYTE *)(v2 + 17) = 0;
  v3 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  IMSClientManager::instance(v3);
  IPTelephonyManager::getInstance((uint64_t *)&__p);
  v4 = v11;
  v5 = *((_QWORD *)__p + 25);
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v8 = a1[40];
  std::string::basic_string[abi:ne180100]<0>(&__p, "MediaError");
  object = xpc_null_create();
  IMSCallManager::terminateLazuli(v5, v8 + 1648, (uint64_t)&__p, &object);
  xpc_release(object);
  object = 0;
  if (v12 < 0)
    operator delete(__p);
}

void sub_1BEF26380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MessageSession::handleDisconnected(uint64_t a1)
{
  MessageSession::handleDisconnected((_QWORD *)(a1 - 104));
}

void MessageSession::handleDataReceived(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  std::string::size_type v5;
  std::string::size_type v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  char v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  char v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  std::string v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  char v33;
  char v34;

  v4 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
  (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"MessageSession::handleDataReceived decoding ", 44);
  *(_BYTE *)(v4 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v4 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" bytes", 6);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v33 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v5 = *(unsigned __int8 *)(a2 + 23);
  else
    v5 = *(_QWORD *)(a2 + 8);
  if (v5)
  {
    v6 = 0;
    do
    {
      v31 = 0;
      v32 = 0;
      memset(&v30, 0, sizeof(v30));
      std::string::basic_string(&v30, (const std::string *)a2, v6, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v34);
      v7 = LazuliMessageDecoder::decode(a1[44], (uint64_t)&v30, (uint64_t)&v31);
      v8 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
      (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v8);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"bytesDecoded ", 13);
      *(_BYTE *)(v8 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      v9 = *a1;
      if (v7)
      {
        v10 = (*(uint64_t (**)(uint64_t *))(v9 + 64))(a1);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v10);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"totalBytesDecoded ", 18);
        v6 += v7;
        *(_BYTE *)(v10 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v10 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v10 + 64))(v10, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v10 + 17) = 0;
        v11 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = HIBYTE(v30.__r_.__value_.__r.__words[2]);
        else
          size = v30.__r_.__value_.__l.__size_;
        if (v7 == size && *(_BYTE *)(a1[44] + 40))
        {
          v13 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"continue decoding oversized message", 35);
          *(_BYTE *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
        else
        {
          if ((*((_BYTE *)&v30.__r_.__value_.__s + 23) & 0x80) != 0)
          {
            v11 = v30.__r_.__value_.__l.__size_;
            if (v7 == v30.__r_.__value_.__l.__size_)
            {
LABEL_15:
              v14 = (*(uint64_t (**)(uint64_t *))(*a1 + 64))(a1);
              (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v14);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"done decoding ", 14);
              *(_BYTE *)(v14 + 17) = 0;
              v15 = (_BYTE *)(v14 + 17);
              std::ostream::operator<<();
              *(_BYTE *)(v14 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" bytes", 6);
              *(_BYTE *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_20:
              *v15 = 0;
              v28 = v31;
              v29 = v32;
              if (v32)
              {
                p_shared_owners = (unint64_t *)&v32->__shared_owners_;
                do
                  v19 = __ldxr(p_shared_owners);
                while (__stxr(v19 + 1, p_shared_owners));
              }
              (*(void (**)(uint64_t *, uint64_t *))(*a1 + 88))(a1, &v28);
              v20 = v29;
              if (v29)
              {
                v21 = (unint64_t *)&v29->__shared_owners_;
                do
                  v22 = __ldaxr(v21);
                while (__stlxr(v22 - 1, v21));
                if (!v22)
                {
                  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
                  std::__shared_weak_count::__release_weak(v20);
                }
              }
              v23 = 1;
              goto LABEL_31;
            }
          }
          else if (v7 == HIBYTE(v30.__r_.__value_.__r.__words[2]))
          {
            goto LABEL_15;
          }
          v16 = *a1;
          if (v7 < v11)
          {
            v17 = (*(uint64_t (**)(uint64_t *))(v16 + 64))(a1);
            (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v17);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"done decoding ", 14);
            *(_BYTE *)(v17 + 17) = 0;
            v15 = (_BYTE *)(v17 + 17);
            std::ostream::operator<<();
            *(_BYTE *)(v17 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" bytes but ", 11);
            *(_BYTE *)(v17 + 17) = 0;
            std::ostream::operator<<();
            *(_BYTE *)(v17 + 17) = 0;
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" remain undecoded", 17);
            *(_BYTE *)(v17 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            goto LABEL_20;
          }
          v13 = (*(uint64_t (**)(uint64_t *))(v16 + 56))(a1);
          (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v13);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"unable to decode ", 17);
          *(_BYTE *)(v13 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v13 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" bytes", 6);
          *(_BYTE *)(v13 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        }
      }
      else
      {
        v13 = (*(uint64_t (**)(uint64_t *))(v9 + 56))(a1);
        (*(void (**)(uint64_t *, uint64_t))(*a1 + 16))(a1, v13);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)"Decoder encountered an error. Discarding ", 41);
        *(_BYTE *)(v13 + 17) = 0;
        std::ostream::operator<<();
        *(_BYTE *)(v13 + 17) = 0;
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v13 + 8), (uint64_t)" bytes", 6);
        *(_BYTE *)(v13 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v13 + 64))(v13, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      }
      v23 = 0;
      *(_BYTE *)(v13 + 17) = 0;
LABEL_31:
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      v24 = v32;
      if (v32)
      {
        v25 = (unint64_t *)&v32->__shared_owners_;
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
        if (!v26)
        {
          ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
          std::__shared_weak_count::__release_weak(v24);
        }
      }
      if (v6 < v5)
        v27 = v23;
      else
        v27 = 0;
    }
    while ((v27 & 1) != 0);
  }
}

void sub_1BEF26984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  if (a16 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MessageSession::handleDataReceived(uint64_t a1, uint64_t a2)
{
  MessageSession::handleDataReceived((uint64_t *)(a1 - 104), a2);
}

void MessageSession::processMessageRequest(_QWORD *a1, uint64_t a2)
{
  const void *v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  const void *v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _OWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  void *v31;
  int v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  const void *v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  void *v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int v45;
  void *v47;
  int v48;
  void **v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  const void *v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned __int8 *v61;
  unsigned __int8 *v62;
  const void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  void *v67;
  unint64_t *v68;
  unint64_t v69;
  unint64_t *v70;
  unint64_t v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  const void *v74;
  std::__shared_weak_count *v75;
  unint64_t *v76;
  unint64_t v77;
  std::string::value_type *v78;
  unint64_t *v79;
  unint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  std::__shared_weak_count *v83;
  std::__shared_weak_count *v84;
  _QWORD *v85;
  unsigned __int8 *v86;
  unsigned __int8 *v87;
  const void *v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t v95;
  char v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  std::string::size_type v100;
  std::string::size_type v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  std::__shared_weak_count *v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  std::string::size_type v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 *v117;
  unsigned __int8 *v118;
  const void *v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  unint64_t v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  unint64_t v136;
  std::string::size_type v137;
  unsigned __int8 *v138;
  unsigned __int8 *v139;
  const void *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  const void **v144;
  unint64_t *v145;
  unint64_t v146;
  uint64_t v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::string::value_type *v151;
  unsigned int v152;
  unsigned int v153;
  std::string::size_type v154;
  BOOL v155;
  uint64_t v159;
  _QWORD *v160;
  _QWORD *v161;
  const std::string *v162;
  const void *v163;
  int v164;
  unsigned __int16 *v165;
  int v166;
  int v167;
  void *v169;
  unint64_t *v170;
  unint64_t v171;
  std::string *v172;
  unsigned __int8 *v173;
  std::string::size_type v174;
  uint64_t v175;
  int v176;
  uint64_t v177;
  std::string *v178;
  int v179;
  int v180;
  int v181;
  int v182;
  char v183;
  BOOL v184;
  uint64_t v185;
  std::string::size_type v186;
  uint64_t v187;
  std::string::size_type v188;
  int v189;
  unint64_t v190;
  int8x8_t v191;
  unint64_t v192;
  uint8x8_t v193;
  unint64_t v194;
  uint64_t *v195;
  uint64_t i;
  unint64_t v197;
  std::string::size_type v198;
  int v199;
  unsigned __int8 *v200;
  uint64_t *v201;
  unsigned __int8 *v202;
  std::string::size_type v203;
  unsigned __int8 *v204;
  uint64_t v205;
  unsigned __int8 *v206;
  unsigned __int8 *v207;
  const void *v208;
  std::__shared_weak_count *v209;
  unint64_t *v210;
  unint64_t v211;
  _QWORD *v212;
  unint64_t *v213;
  unint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  int v218;
  char *v219;
  char *v220;
  char *v221;
  char *v222;
  int v223;
  int v224;
  std::__shared_weak_count *v226;
  unint64_t *v227;
  unint64_t v228;
  std::__shared_weak_count *v229;
  unint64_t *v230;
  unint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  std::__shared_weak_count *v235;
  unint64_t *v236;
  unint64_t v237;
  unint64_t *v238;
  std::__shared_weak_count *v239;
  unint64_t *v240;
  unint64_t v241;
  _DWORD *v242;
  std::__shared_weak_count *v243;
  unint64_t *p_shared_owners;
  unint64_t v245;
  unint64_t v246;
  unint64_t *v247;
  unint64_t v248;
  _DWORD *v249;
  std::__shared_weak_count *v250;
  std::__shared_weak_count *v251;
  _QWORD *v252;
  unsigned __int8 *v253;
  unsigned __int8 *v254;
  const void *v255;
  std::__shared_weak_count *v256;
  unint64_t *v257;
  unint64_t v258;
  _QWORD *v259;
  unint64_t *v260;
  unint64_t v261;
  uint64_t v262;
  char v263;
  unint64_t *v264;
  unint64_t v265;
  std::__shared_weak_count *size;
  unint64_t *v267;
  unint64_t v268;
  unint64_t *v269;
  unint64_t v270;
  unsigned __int8 *v271;
  unsigned __int8 *v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  const std::string *v275;
  uint64_t v276;
  uint64_t v277;
  size_t v278;
  std::string *v279;
  const std::string *v280;
  const std::string::value_type *v281;
  std::string::size_type v282;
  std::string *v283;
  __int128 v284;
  std::string *v285;
  __int128 v286;
  const std::string::value_type *v287;
  std::string::size_type v288;
  std::string *v289;
  __int128 v290;
  int v291;
  _BOOL4 v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  std::string::size_type v300;
  std::string::size_type v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  unint64_t *v307;
  unint64_t v308;
  unint64_t *v309;
  unint64_t v310;
  std::__shared_weak_count *v311;
  unint64_t *v312;
  unint64_t v313;
  uint64_t v314;
  IMSClientManager *v315;
  int v316;
  std::__shared_weak_count *v318;
  uint64_t v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  std::string::size_type v325;
  std::string::size_type v326;
  unint64_t *v327;
  unint64_t v328;
  uint64_t v329;
  std::__shared_weak_count *v330;
  uint64_t v331;
  unint64_t *v332;
  unint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unint64_t *v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  unint64_t *v343;
  unint64_t v344;
  std::__shared_weak_count *v345;
  unint64_t *v346;
  unint64_t v347;
  int v348;
  uint64_t v349;
  uint64_t v350;
  std::string::value_type *v351;
  std::__shared_weak_count *v352;
  unint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  std::__shared_weak_count *v356;
  uint64_t v357;
  unint64_t *v358;
  unint64_t v359;
  uint64_t v360;
  uint64_t v361;
  unint64_t *v362;
  unint64_t v363;
  std::__shared_weak_count *v364;
  unint64_t *v365;
  unint64_t v366;
  uint64_t v367;
  std::string::size_type v368;
  std::string::size_type v369;
  unint64_t *v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t *v377;
  unint64_t v378;
  std::__shared_weak_count *v379;
  unint64_t *v380;
  unint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  std::string::size_type v385;
  int v386;
  uint64_t v387;
  std::string::size_type v388;
  int v389;
  int v390;
  unint64_t v391;
  _QWORD *v392;
  std::string *__str;
  void *v394;
  std::__shared_weak_count *v395;
  void *v396;
  std::__shared_weak_count *v397;
  _QWORD *v398;
  std::__shared_weak_count *v399;
  _DWORD *v400;
  std::__shared_weak_count *v401;
  std::string v402;
  _BYTE v403[72];
  const void **v404;
  std::__shared_weak_count *v405;
  unsigned __int8 v406;
  std::string::value_type *v407;
  std::__shared_weak_count *v408;
  unsigned __int8 v409;
  std::string v410;
  std::string v411;
  std::string v412;
  std::string v413;

  v4 = *(const void **)a2;
  if (!*(_QWORD *)a2
  {
    v398 = 0;
    v399 = 0;
    if (!v4)
      goto LABEL_560;
LABEL_399:
    if (!v242)
      goto LABEL_560;
    v243 = *(std::__shared_weak_count **)(a2 + 8);
    v400 = v242;
    v401 = v243;
    if (v243)
    {
      p_shared_owners = (unint64_t *)&v243->__shared_owners_;
      do
        v245 = __ldxr(p_shared_owners);
      while (__stxr(v245 + 1, p_shared_owners));
      v395 = v243;
      do
        v246 = __ldxr(p_shared_owners);
      while (__stxr(v246 + 1, p_shared_owners));
    }
    else
    {
      v395 = 0;
    }
    v394 = v242;
    MessageSession::dumpMessage((uint64_t)a1, (uint64_t *)&v394, 0);
    if (v243)
    {
      v247 = (unint64_t *)&v243->__shared_owners_;
      do
        v248 = __ldaxr(v247);
      while (__stlxr(v248 - 1, v247));
      if (!v248)
      {
        ((void (*)(std::__shared_weak_count *))v243->__on_zero_shared)(v243);
        std::__shared_weak_count::__release_weak(v243);
      }
    }
    v249 = v400;
    *(_OWORD *)v403 = 0uLL;
    v250 = (std::__shared_weak_count *)a1[57];
    if (v250)
    {
      v251 = std::__shared_weak_count::lock(v250);
      *(_QWORD *)&v403[8] = v251;
      if (v251)
      {
        v252 = (_QWORD *)a1[56];
        *(_QWORD *)v403 = v252;
        if (v252)
        {
          v253 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>((_QWORD *)v249 + 4, "From-Path");
          v254 = v253;
          if (!v253)
          {
            v263 = 0;
            *(_OWORD *)&v402.__r_.__value_.__l.__data_ = 0uLL;
            goto LABEL_438;
          }
          v255 = (const void *)*((_QWORD *)v253 + 5);
          v256 = (std::__shared_weak_count *)*((_QWORD *)v254 + 6);
          if (v256)
          {
            v257 = (unint64_t *)&v256->__shared_owners_;
            do
              v258 = __ldxr(v257);
            while (__stxr(v258 + 1, v257));
          }
          if (v255
          {
            v402.__r_.__value_.__r.__words[0] = (std::string::size_type)v259;
            v402.__r_.__value_.__l.__size_ = (std::string::size_type)v256;
            if (!v256)
            {
LABEL_435:
              v263 = LazuliRouteSet::operator==(v259 + 7, v252);
LABEL_438:
              size = (std::__shared_weak_count *)v402.__r_.__value_.__l.__size_;
              if (v402.__r_.__value_.__l.__size_)
              {
                v267 = (unint64_t *)(v402.__r_.__value_.__l.__size_ + 8);
                do
                  v268 = __ldaxr(v267);
                while (__stlxr(v268 - 1, v267));
                if (!v268)
                {
                  ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                  std::__shared_weak_count::__release_weak(size);
                }
              }
              v251 = *(std::__shared_weak_count **)&v403[8];
              if (!*(_QWORD *)&v403[8])
                goto LABEL_447;
              goto LABEL_444;
            }
            v260 = (unint64_t *)&v256->__shared_owners_;
            do
              v261 = __ldxr(v260);
            while (__stxr(v261 + 1, v260));
          }
          else
          {
            *(_OWORD *)&v402.__r_.__value_.__l.__data_ = 0uLL;
            if (!v256)
              goto LABEL_437;
          }
          v264 = (unint64_t *)&v256->__shared_owners_;
          do
            v265 = __ldaxr(v264);
          while (__stlxr(v265 - 1, v264));
          if (!v265)
          {
            ((void (*)(std::__shared_weak_count *))v256->__on_zero_shared)(v256);
            std::__shared_weak_count::__release_weak(v256);
          }
          v259 = (_QWORD *)v402.__r_.__value_.__r.__words[0];
          if (v402.__r_.__value_.__r.__words[0])
          {
            v252 = *(_QWORD **)v403;
            goto LABEL_435;
          }
LABEL_437:
          v263 = 0;
          goto LABEL_438;
        }
      }
    }
    else
    {
      v251 = 0;
    }
    v262 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v262);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v262 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(_BYTE *)(v262 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v262 + 64))(v262, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v263 = 0;
    *(_BYTE *)(v262 + 17) = 0;
    if (!v251)
      goto LABEL_447;
LABEL_444:
    v269 = (unint64_t *)&v251->__shared_owners_;
    do
      v270 = __ldaxr(v269);
    while (__stlxr(v270 - 1, v269));
    if (!v270)
    {
      ((void (*)(std::__shared_weak_count *))v251->__on_zero_shared)(v251);
      std::__shared_weak_count::__release_weak(v251);
      if ((v263 & 1) != 0)
      {
LABEL_448:
        memset(&v413, 0, sizeof(v413));
        memset(&v412, 0, sizeof(v412));
        (*(void (**)(std::string *__return_ptr, _DWORD *))(*(_QWORD *)v249 + 32))(&v412, v249);
        v271 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 129, (unsigned __int8 *)&v412);
        v272 = v271;
        if (v271)
        {
          std::string::operator=(&v413, (const std::string *)(v271 + 40));
          std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::remove(a1 + 129, v272, (uint64_t)v403);
          std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::string>,void *>>>>::reset[abi:ne180100]((uint64_t)v403, 0);
          v273 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 124, (unsigned __int8 *)&v413);
          if (v273)
          {
            v274 = v273;
            v275 = (const std::string *)(v273 + 40);
            v276 = *((unsigned int *)v273 + 17);
            v277 = *((_QWORD *)v273 + 10);
            if ((_DWORD)v276)
            {
              memset(v403, 0, 24);
              if ((v273[63] & 0x80u) == 0)
                v278 = v273[63];
              else
                v278 = *((_QWORD *)v273 + 6);
              memset(&v410, 0, sizeof(v410));
              v279 = &v410;
              std::string::basic_string[abi:ne180100]((uint64_t)&v410, v278 + 1);
              if ((v410.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v279 = (std::string *)v410.__r_.__value_.__r.__words[0];
              if (v278)
              {
                if ((v274[63] & 0x80u) == 0)
                  v280 = v275;
                else
                  v280 = (const std::string *)*((_QWORD *)v274 + 5);
                memmove(v279, v280, v278);
              }
              *(_WORD *)((char *)&v279->__r_.__value_.__l.__data_ + v278) = 32;
              ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(&v407);
              if ((v409 & 0x80u) == 0)
                v281 = (const std::string::value_type *)&v407;
              else
                v281 = v407;
              if ((v409 & 0x80u) == 0)
                v282 = v409;
              else
                v282 = (std::string::size_type)v408;
              v283 = std::string::append(&v410, v281, v282);
              v284 = *(_OWORD *)&v283->__r_.__value_.__l.__data_;
              v411.__r_.__value_.__r.__words[2] = v283->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v411.__r_.__value_.__l.__data_ = v284;
              v283->__r_.__value_.__l.__size_ = 0;
              v283->__r_.__value_.__r.__words[2] = 0;
              v283->__r_.__value_.__r.__words[0] = 0;
              v285 = std::string::append(&v411, " ", 1uLL);
              v286 = *(_OWORD *)&v285->__r_.__value_.__l.__data_;
              v402.__r_.__value_.__r.__words[2] = v285->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v402.__r_.__value_.__l.__data_ = v286;
              v285->__r_.__value_.__l.__size_ = 0;
              v285->__r_.__value_.__r.__words[2] = 0;
              v285->__r_.__value_.__r.__words[0] = 0;
              (*(void (**)(const void ***__return_ptr, _QWORD *, _QWORD))(*a1 + 168))(&v404, a1, *((unsigned int *)v274 + 17));
              if ((v406 & 0x80u) == 0)
                v287 = (const std::string::value_type *)&v404;
              else
                v287 = (const std::string::value_type *)v404;
              if ((v406 & 0x80u) == 0)
                v288 = v406;
              else
                v288 = (std::string::size_type)v405;
              v289 = std::string::append(&v402, v287, v288);
              v290 = *(_OWORD *)&v289->__r_.__value_.__l.__data_;
              *(_QWORD *)&v403[16] = *((_QWORD *)&v289->__r_.__value_.__l + 2);
              *(_OWORD *)v403 = v290;
              v289->__r_.__value_.__l.__size_ = 0;
              v289->__r_.__value_.__r.__words[2] = 0;
              v289->__r_.__value_.__r.__words[0] = 0;
              if ((char)v406 < 0)
                operator delete(v404);
              if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v402.__r_.__value_.__l.__data_);
              if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v411.__r_.__value_.__l.__data_);
              if ((char)v409 < 0)
                operator delete(v407);
              if (SHIBYTE(v410.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v410.__r_.__value_.__l.__data_);
              SipTimerContainer::cancelTimer((SipTimerContainer *)(a1 + 19), (std::string *)v403);
              v291 = *((_DWORD *)v274 + 17) - 1;
              *((_DWORD *)v274 + 17) = v291;
              v292 = v291 == 0;
              if ((v403[23] & 0x80000000) != 0)
                operator delete(*(void **)v403);
            }
            else
            {
              v292 = 0;
            }
            v296 = v249[32];
            *((_DWORD *)a1 + 236) = v296;
            v297 = *a1;
            if (v296 == 200)
            {
              v298 = (*(uint64_t (**)(_QWORD *))(v297 + 64))(a1);
              (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v298);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v298 + 8), (uint64_t)"success for MSRP Message-ID ", 28);
              *(_BYTE *)(v298 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v298 + 32))(v298, &v413);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v298 + 8), (uint64_t)" msrpTransactionId ", 19);
              *(_BYTE *)(v298 + 17) = 0;
              (*(void (**)(_BYTE *__return_ptr, _DWORD *))(*(_QWORD *)v249 + 32))(v403, v249);
              (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v298 + 32))(v298, v403);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v298 + 64))(v298, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v298 + 17) = 0;
              if ((v403[23] & 0x80000000) != 0)
                operator delete(*(void **)v403);
              v299 = a1[40];
              v300 = *(_QWORD *)(v299 + 208);
              v301 = *(_QWORD *)(v299 + 216);
              v402.__r_.__value_.__r.__words[0] = v300;
              v402.__r_.__value_.__l.__size_ = v301;
              if (v301)
              {
                v302 = (unint64_t *)(v301 + 8);
                do
                  v303 = __ldxr(v302);
                while (__stxr(v303 + 1, v302));
              }
              v304 = *(_QWORD *)(v300 + 136);
              v305 = *(_QWORD *)(v304 + 208);
              v306 = *(std::__shared_weak_count **)(v304 + 216);
              *(_QWORD *)v403 = v305;
              *(_QWORD *)&v403[8] = v306;
              if (v306)
              {
                v307 = (unint64_t *)&v306->__shared_owners_;
                do
                  v308 = __ldxr(v307);
                while (__stxr(v308 + 1, v307));
              }
              SipLazuliManager::handleOutgoingMessageSuccess(v305, (uint64_t)(a1 + 60), a1[40] + 1648, *((unsigned int *)v274 + 16), (uint64_t)v275, v274[72], v292);
              if (v306)
              {
                v309 = (unint64_t *)&v306->__shared_owners_;
                do
                  v310 = __ldaxr(v309);
                while (__stlxr(v310 - 1, v309));
                if (!v310)
                {
                  ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
                  std::__shared_weak_count::__release_weak(v306);
                }
              }
              v311 = (std::__shared_weak_count *)v402.__r_.__value_.__l.__size_;
              if (v402.__r_.__value_.__l.__size_)
              {
                v312 = (unint64_t *)(v402.__r_.__value_.__l.__size_ + 8);
                do
                  v313 = __ldaxr(v312);
                while (__stlxr(v313 - 1, v312));
                if (!v313)
                {
                  ((void (*)(std::__shared_weak_count *))v311->__on_zero_shared)(v311);
                  std::__shared_weak_count::__release_weak(v311);
                }
              }
              if (!v292)
                goto LABEL_551;
            }
            else
            {
              v314 = (*(uint64_t (**)(_QWORD *))(v297 + 56))(a1);
              (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v314);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v314 + 8), (uint64_t)"error code ", 11);
              *(_BYTE *)(v314 + 17) = 0;
              std::ostream::operator<<();
              *(_BYTE *)(v314 + 17) = 0;
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v314 + 8), (uint64_t)" received for MSRP Message-ID ", 30);
              *(_BYTE *)(v314 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v314 + 32))(v314, &v413);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v314 + 8), (uint64_t)" msrpTransactionId ", 19);
              *(_BYTE *)(v314 + 17) = 0;
              (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v314 + 32))(v314, &v412);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v314 + 8), (uint64_t)" ctTransactionId ", 17);
              *(_BYTE *)(v314 + 17) = 0;
              (*(void (**)(uint64_t, const std::string *))(*(_QWORD *)v314 + 32))(v314, v275);
              v315 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v314 + 64))(v314, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v314 + 17) = 0;
              v316 = v249[32];
              if (v316 == 481)
              {
                IMSClientManager::instance(v315);
                IPTelephonyManager::getInstance((uint64_t *)v403);
                v318 = *(std::__shared_weak_count **)&v403[8];
                v319 = *(_QWORD *)(*(_QWORD *)v403 + 200);
                if (*(_QWORD *)&v403[8])
                {
                  v320 = (unint64_t *)(*(_QWORD *)&v403[8] + 8);
                  do
                    v321 = __ldaxr(v320);
                  while (__stlxr(v321 - 1, v320));
                  if (!v321)
                  {
                    ((void (*)(std::__shared_weak_count *))v318->__on_zero_shared)(v318);
                    std::__shared_weak_count::__release_weak(v318);
                  }
                }
                v322 = a1[40];
                std::string::basic_string[abi:ne180100]<0>(v403, "MediaError");
                v407 = (std::string::value_type *)xpc_null_create();
                IMSCallManager::terminateLazuli(v319, v322 + 1648, (uint64_t)v403, (xpc_object_t *)&v407);
                xpc_release(v407);
                v407 = 0;
                if ((v403[23] & 0x80000000) != 0)
                  operator delete(*(void **)v403);
              }
              else if (v316 == 500 && !v274[136])
              {
                if ((char)v274[111] < 0 ? *((_QWORD *)v274 + 12) : v274[111])
                {
                  v323 = (char)v274[135] < 0 ? *((_QWORD *)v274 + 15) : v274[135];
                  if (v323 && !v274[72])
                  {
                    std::string::basic_string[abi:ne180100]<0>(v403, "Internal error");
                    MessageSession::logSendReceiveEvent((uint64_t)a1, 1, v276, v277, 500, (uint64_t)v403);
                    if ((v403[23] & 0x80000000) != 0)
                      operator delete(*(void **)v403);
                    ++v274[136];
                    v348 = *((_DWORD *)v274 + 16);
                    if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
                      std::string::__init_copy_ctor_external(&v402, v413.__r_.__value_.__l.__data_, v413.__r_.__value_.__l.__size_);
                    else
                      v402 = v413;
                    MessageSession::sendMessageBlob((uint64_t)a1, (uint64_t)(v274 + 88), (const std::string *)(v274 + 112), (uint64_t)v275, v348, (uint64_t)&v402);
                    if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v402.__r_.__value_.__l.__data_);
                    goto LABEL_551;
                  }
                }
              }
              *(_QWORD *)&v403[16] = 0x40000000;
              memset(&v403[24], 0, 48);
              *(_QWORD *)v403 = &off_1E78B7238;
              *(_QWORD *)&v403[8] = &_bambiDomain;
              std::string::operator=((std::string *)&v403[48], v275);
              v324 = a1[40];
              v325 = *(_QWORD *)(v324 + 208);
              v326 = *(_QWORD *)(v324 + 216);
              v410.__r_.__value_.__r.__words[0] = v325;
              v410.__r_.__value_.__l.__size_ = v326;
              if (v326)
              {
                v327 = (unint64_t *)(v326 + 8);
                do
                  v328 = __ldxr(v327);
                while (__stxr(v328 + 1, v327));
              }
              v329 = *(_QWORD *)(v325 + 136);
              v331 = *(_QWORD *)(v329 + 208);
              v330 = *(std::__shared_weak_count **)(v329 + 216);
              v411.__r_.__value_.__r.__words[0] = v331;
              v411.__r_.__value_.__l.__size_ = (std::string::size_type)v330;
              if (v330)
              {
                v332 = (unint64_t *)&v330->__shared_owners_;
                do
                  v333 = __ldxr(v332);
                while (__stxr(v333 + 1, v332));
              }
              v334 = a1[40];
              v335 = *((unsigned int *)v274 + 16);
              ImsResult::ImsResult((ImsResult *)&v402, (const ImsResult *)v403);
              SipLazuliManager::handleOutgoingMessageError(v331, (uint64_t)(a1 + 60), v334 + 1648, v335, (uint64_t)&v402);
              ImsResult::~ImsResult((ImsResult *)&v402);
              if (v330)
              {
                v336 = (unint64_t *)&v330->__shared_owners_;
                do
                  v337 = __ldaxr(v336);
                while (__stlxr(v337 - 1, v336));
                if (!v337)
                {
                  ((void (*)(std::__shared_weak_count *))v330->__on_zero_shared)(v330);
                  std::__shared_weak_count::__release_weak(v330);
                }
              }
              v338 = (std::__shared_weak_count *)v410.__r_.__value_.__l.__size_;
              if (v410.__r_.__value_.__l.__size_)
              {
                v339 = (unint64_t *)(v410.__r_.__value_.__l.__size_ + 8);
                do
                  v340 = __ldaxr(v339);
                while (__stlxr(v340 - 1, v339));
                if (!v340)
                {
                  ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
                  std::__shared_weak_count::__release_weak(v338);
                }
              }
              ImsResult::~ImsResult((ImsResult *)v403);
            }
            if (!v274[72])
            {
              v341 = v249[32];
              MessageSession::logSendReceiveEvent((uint64_t)a1, 1, v276, v277, v341, (uint64_t)&v411);
              if (SHIBYTE(v411.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v411.__r_.__value_.__l.__data_);
            }
            std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::remove((uint64_t)v403, a1 + 124, v274);
            std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v403);
          }
          else
          {
            v295 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
            (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v295);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v295 + 8), (uint64_t)"Dropping response for transaction ", 34);
            *(_BYTE *)(v295 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v295 + 32))(v295, &v412);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v295 + 8), (uint64_t)" MSRP Message-ID ", 17);
            *(_BYTE *)(v295 + 17) = 0;
            (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v295 + 32))(v295, &v413);
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v295 + 64))(v295, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v295 + 17) = 0;
          }
        }
        else
        {
          v294 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v294);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v294 + 8), (uint64_t)"Received response ", 18);
          *(_BYTE *)(v294 + 17) = 0;
          std::ostream::operator<<();
          *(_BYTE *)(v294 + 17) = 0;
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v294 + 8), (uint64_t)" for unknown transaction ", 25);
          *(_BYTE *)(v294 + 17) = 0;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v294 + 32))(v294, &v412);
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v294 + 64))(v294, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v294 + 17) = 0;
        }
LABEL_551:
        if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v412.__r_.__value_.__l.__data_);
        if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v413.__r_.__value_.__l.__data_);
        goto LABEL_555;
      }
LABEL_486:
      v293 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v293);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v293 + 8), (uint64_t)"Dropping response, because FromPath header does not match the one in SDP", 72);
      *(_BYTE *)(v293 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v293 + 64))(v293, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v293 + 17) = 0;
LABEL_555:
      v342 = v401;
      if (v401)
      {
        v343 = (unint64_t *)&v401->__shared_owners_;
        do
          v344 = __ldaxr(v343);
        while (__stlxr(v344 - 1, v343));
        if (!v344)
        {
          ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
          std::__shared_weak_count::__release_weak(v342);
        }
      }
      goto LABEL_560;
    }
LABEL_447:
    if ((v263 & 1) != 0)
      goto LABEL_448;
    goto LABEL_486;
  }
  v6 = *(std::__shared_weak_count **)(a2 + 8);
  v398 = v5;
  v399 = v6;
  if (v6)
  {
    v7 = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
    v397 = v6;
    do
      v9 = __ldxr(v7);
    while (__stxr(v9 + 1, v7));
  }
  else
  {
    v397 = 0;
  }
  v396 = v5;
  MessageSession::dumpMessage((uint64_t)a1, (uint64_t *)&v396, 0);
  if (v6)
  {
    v10 = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  v12 = v398;
  v13 = v398 + 4;
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v398 + 4, "Message-ID");
  v15 = v14;
  if (v14)
  {
    v16 = (const void *)*((_QWORD *)v14 + 5);
    v17 = (std::__shared_weak_count *)*((_QWORD *)v15 + 6);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldxr(v18);
      while (__stxr(v19 + 1, v18));
    }
    if (v16
    {
      v400 = v20;
      v401 = v17;
      if (!v17)
        goto LABEL_33;
      v21 = (unint64_t *)&v17->__shared_owners_;
      do
        v22 = __ldxr(v21);
      while (__stxr(v22 + 1, v21));
    }
    else
    {
      v400 = 0;
      v401 = 0;
      if (!v17)
        goto LABEL_33;
    }
    v23 = (unint64_t *)&v17->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  else
  {
    v400 = 0;
    v401 = 0;
  }
LABEL_33:
  v25 = v12 + 16;
  if (*((char *)v12 + 151) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)v403, (const std::string::value_type *)v12[16], v12[17]);
  }
  else
  {
    *(_OWORD *)v403 = *v25;
    *(_QWORD *)&v403[16] = v12[18];
  }
  if (v403[23] >= 0)
    v26 = v403[23];
  else
    v26 = *(_QWORD *)&v403[8];
  if (v26 != 4)
  {
    if ((v403[23] & 0x80) != 0)
      operator delete(*(void **)v403);
    goto LABEL_53;
  }
  if ((v403[23] & 0x80) != 0)
  {
    v31 = *(void **)v403;
    v32 = memcmp(*(const void **)v403, "SEND", *(size_t *)&v403[8]);
    operator delete(v31);
    if (!v32)
      goto LABEL_55;
LABEL_53:
    if (*((char *)v12 + 151) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)v403, (const std::string::value_type *)v12[16], v12[17]);
    }
    else
    {
      *(_OWORD *)v403 = *v25;
      *(_QWORD *)&v403[16] = v12[18];
    }
    if (v403[23] >= 0)
      v42 = v403[23];
    else
      v42 = *(_QWORD *)&v403[8];
    if (v42 == 6)
    {
      if ((v403[23] & 0x80) != 0)
      {
        v47 = *(void **)v403;
        v48 = memcmp(*(const void **)v403, "REPORT", *(size_t *)&v403[8]);
        operator delete(v47);
        if (!v48)
          goto LABEL_86;
      }
      else
      {
        if (!v403[23])
          goto LABEL_86;
        v43 = 0;
        do
        {
          v44 = v403[v43];
          v45 = LazuliRequest::kMethodReport[v43];
        }
        while (v44 == v45 && v403[23] - 1 != v43++);
        if (v44 == v45)
        {
LABEL_86:
          v50 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, "Message-ID");
          v51 = v50;
          if (!v50)
          {
            *(_OWORD *)&v411.__r_.__value_.__l.__data_ = 0uLL;
            goto LABEL_184;
          }
          v52 = (const void *)*((_QWORD *)v50 + 5);
          v53 = (std::__shared_weak_count *)*((_QWORD *)v51 + 6);
          if (v53)
          {
            v54 = (unint64_t *)&v53->__shared_owners_;
            do
              v55 = __ldxr(v54);
            while (__stxr(v55 + 1, v54));
          }
          if (v52
          {
            v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v56;
            v411.__r_.__value_.__l.__size_ = (std::string::size_type)v53;
            if (!v53)
            {
LABEL_156:
              v99 = a1[40];
              v100 = *(_QWORD *)(v99 + 208);
              v101 = *(_QWORD *)(v99 + 216);
              v402.__r_.__value_.__r.__words[0] = v100;
              v402.__r_.__value_.__l.__size_ = v101;
              if (v101)
              {
                v102 = (unint64_t *)(v101 + 8);
                do
                  v103 = __ldxr(v102);
                while (__stxr(v103 + 1, v102));
              }
              v104 = *(_QWORD *)(v100 + 136);
              v105 = *(_QWORD *)(v104 + 208);
              v106 = *(std::__shared_weak_count **)(v104 + 216);
              *(_QWORD *)v403 = v105;
              *(_QWORD *)&v403[8] = v106;
              if (v106)
              {
                v107 = (unint64_t *)&v106->__shared_owners_;
                do
                  v108 = __ldxr(v107);
                while (__stxr(v108 + 1, v107));
              }
              SipLazuliManager::createPowerAssertion(v105, (__int128 *)(v56 + 56), 1);
              if (v106)
              {
                v109 = (unint64_t *)&v106->__shared_owners_;
                do
                  v110 = __ldaxr(v109);
                while (__stlxr(v110 - 1, v109));
                if (!v110)
                {
                  ((void (*)(std::__shared_weak_count *))v106->__on_zero_shared)(v106);
                  std::__shared_weak_count::__release_weak(v106);
                }
              }
              v111 = (std::__shared_weak_count *)v402.__r_.__value_.__l.__size_;
              if (v402.__r_.__value_.__l.__size_)
              {
                v112 = (unint64_t *)(v402.__r_.__value_.__l.__size_ + 8);
                do
                  v113 = __ldaxr(v112);
                while (__stlxr(v113 - 1, v112));
                if (!v113)
                {
                  ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                  std::__shared_weak_count::__release_weak(v111);
                }
              }
              v114 = v411.__r_.__value_.__r.__words[0] + 56;
              v115 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 124, (unsigned __int8 *)(v411.__r_.__value_.__r.__words[0] + 56));
              if (v115)
              {
                v116 = v115;
                v117 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, "Status");
                v118 = v117;
                if (!v117)
                {
                  *(_OWORD *)&v410.__r_.__value_.__l.__data_ = 0uLL;
                  goto LABEL_291;
                }
                v119 = (const void *)*((_QWORD *)v117 + 5);
                v120 = (std::__shared_weak_count *)*((_QWORD *)v118 + 6);
                if (v120)
                {
                  v121 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v122 = __ldxr(v121);
                  while (__stxr(v122 + 1, v121));
                }
                if (v119
                {
                  v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v123;
                  v410.__r_.__value_.__l.__size_ = (std::string::size_type)v120;
                  if (!v120)
                  {
LABEL_272:
                    memset(&v412, 0, sizeof(v412));
                    v172 = std::string::basic_string(&v412, (const std::string *)(v123 + 56), 4uLL, 3uLL, (std::allocator<char> *)v403);
                    *((_DWORD *)a1 + 236) = std::stoul(v172, 0, 10);
                    std::to_string((std::string *)v403, 0xC8u);
                    if ((v412.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v174 = HIBYTE(v412.__r_.__value_.__r.__words[2]);
                    else
                      v174 = v412.__r_.__value_.__l.__size_;
                    v175 = v403[23];
                    v176 = v403[23];
                    if (v403[23] < 0)
                      v175 = *(_QWORD *)&v403[8];
                    if (v174 == v175)
                    {
                      if (v403[23] >= 0)
                        v173 = v403;
                      else
                        v173 = *(unsigned __int8 **)v403;
                      if ((*((_BYTE *)&v412.__r_.__value_.__s + 23) & 0x80) != 0)
                      {
                        v184 = memcmp(v412.__r_.__value_.__l.__data_, v173, v412.__r_.__value_.__l.__size_) == 0;
                      }
                      else if (*((_BYTE *)&v412.__r_.__value_.__s + 23))
                      {
                        v177 = HIBYTE(v412.__r_.__value_.__r.__words[2]) - 1;
                        v178 = &v412;
                        do
                        {
                          v180 = v178->__r_.__value_.__s.__data_[0];
                          v178 = (std::string *)((char *)v178 + 1);
                          v179 = v180;
                          v182 = *v173++;
                          v181 = v182;
                          v155 = v177-- != 0;
                          v183 = v155;
                          v184 = v179 == v181;
                        }
                        while (v179 == v181 && (v183 & 1) != 0);
                      }
                      else
                      {
                        v184 = 1;
                      }
                    }
                    else
                    {
                      v184 = 0;
                    }
                    if (v176 < 0)
                      operator delete(*(void **)v403);
                    if (!v184)
                    {
                      v349 = (*(uint64_t (**)(_QWORD *, unsigned __int8 *))(*a1 + 56))(a1, v173);
                      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v349);
                      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v349 + 8), (uint64_t)"Received error report for MSRP Message-ID ", 42);
                      *(_BYTE *)(v349 + 17) = 0;
                      (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v349 + 32))(v349, v411.__r_.__value_.__r.__words[0] + 56);
                      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v349 + 64))(v349, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                      *(_BYTE *)(v349 + 17) = 0;
                      *(_QWORD *)&v403[16] = 0x40000000;
                      memset(&v403[24], 0, 48);
                      *(_QWORD *)v403 = &off_1E78B7238;
                      *(_QWORD *)&v403[8] = &_bambiDomain;
                      std::string::operator=((std::string *)&v403[48], (const std::string *)(v116 + 40));
                      v350 = a1[40];
                      v351 = *(std::string::value_type **)(v350 + 208);
                      v352 = *(std::__shared_weak_count **)(v350 + 216);
                      v407 = v351;
                      v408 = v352;
                      if (v352)
                      {
                        v353 = (unint64_t *)&v352->__shared_owners_;
                        do
                          v354 = __ldxr(v353);
                        while (__stxr(v354 + 1, v353));
                      }
                      v355 = *((_QWORD *)v351 + 17);
                      v357 = *(_QWORD *)(v355 + 208);
                      v356 = *(std::__shared_weak_count **)(v355 + 216);
                      v413.__r_.__value_.__r.__words[0] = v357;
                      v413.__r_.__value_.__l.__size_ = (std::string::size_type)v356;
                      if (v356)
                      {
                        v358 = (unint64_t *)&v356->__shared_owners_;
                        do
                          v359 = __ldxr(v358);
                        while (__stxr(v359 + 1, v358));
                      }
                      v360 = a1[40];
                      v361 = *((unsigned int *)v116 + 16);
                      ImsResult::ImsResult((ImsResult *)&v402, (const ImsResult *)v403);
                      SipLazuliManager::handleOutgoingMessageError(v357, (uint64_t)(a1 + 60), v360 + 1648, v361, (uint64_t)&v402);
                      ImsResult::~ImsResult((ImsResult *)&v402);
                      if (v356)
                      {
                        v362 = (unint64_t *)&v356->__shared_owners_;
                        do
                          v363 = __ldaxr(v362);
                        while (__stlxr(v363 - 1, v362));
                        if (!v363)
                        {
                          ((void (*)(std::__shared_weak_count *))v356->__on_zero_shared)(v356);
                          std::__shared_weak_count::__release_weak(v356);
                        }
                      }
                      v364 = v408;
                      if (v408)
                      {
                        v365 = (unint64_t *)&v408->__shared_owners_;
                        do
                          v366 = __ldaxr(v365);
                        while (__stlxr(v366 - 1, v365));
                        if (!v366)
                        {
                          ((void (*)(std::__shared_weak_count *))v364->__on_zero_shared)(v364);
                          std::__shared_weak_count::__release_weak(v364);
                        }
                      }
                      std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::remove((uint64_t)&v413, a1 + 124, v116);
                      std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)&v413);
                      ImsResult::~ImsResult((ImsResult *)v403);
                    }
                    v367 = a1[40];
                    v368 = *(_QWORD *)(v367 + 208);
                    v369 = *(_QWORD *)(v367 + 216);
                    v413.__r_.__value_.__r.__words[0] = v368;
                    v413.__r_.__value_.__l.__size_ = v369;
                    if (v369)
                    {
                      v370 = (unint64_t *)(v369 + 8);
                      do
                        v371 = __ldxr(v370);
                      while (__stxr(v371 + 1, v370));
                    }
                    v372 = *(_QWORD *)(v368 + 136);
                    v373 = *(_QWORD *)(v372 + 208);
                    v374 = *(std::__shared_weak_count **)(v372 + 216);
                    *(_QWORD *)v403 = v373;
                    *(_QWORD *)&v403[8] = v374;
                    if (v374)
                    {
                      v375 = (unint64_t *)&v374->__shared_owners_;
                      do
                        v376 = __ldxr(v375);
                      while (__stxr(v376 + 1, v375));
                    }
                    SipLazuliManager::releasePowerAssertion(v373, (void **)(v411.__r_.__value_.__r.__words[0] + 56));
                    if (v374)
                    {
                      v377 = (unint64_t *)&v374->__shared_owners_;
                      do
                        v378 = __ldaxr(v377);
                      while (__stlxr(v378 - 1, v377));
                      if (!v378)
                      {
                        ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
                        std::__shared_weak_count::__release_weak(v374);
                      }
                    }
                    v379 = (std::__shared_weak_count *)v413.__r_.__value_.__l.__size_;
                    if (v413.__r_.__value_.__l.__size_)
                    {
                      v380 = (unint64_t *)(v413.__r_.__value_.__l.__size_ + 8);
                      do
                        v381 = __ldaxr(v380);
                      while (__stlxr(v381 - 1, v380));
                      if (!v381)
                      {
                        ((void (*)(std::__shared_weak_count *))v379->__on_zero_shared)(v379);
                        std::__shared_weak_count::__release_weak(v379);
                      }
                    }
                    if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v412.__r_.__value_.__l.__data_);
                    goto LABEL_610;
                  }
                  v124 = (unint64_t *)&v120->__shared_owners_;
                  do
                    v125 = __ldxr(v124);
                  while (__stxr(v125 + 1, v124));
                }
                else
                {
                  *(_OWORD *)&v410.__r_.__value_.__l.__data_ = 0uLL;
                  if (!v120)
                    goto LABEL_291;
                }
                v170 = (unint64_t *)&v120->__shared_owners_;
                do
                  v171 = __ldaxr(v170);
                while (__stlxr(v171 - 1, v170));
                if (!v171)
                {
                  ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
                  std::__shared_weak_count::__release_weak(v120);
                }
                v123 = (char *)v410.__r_.__value_.__r.__words[0];
                if (v410.__r_.__value_.__r.__words[0])
                  goto LABEL_272;
LABEL_291:
                v185 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
                (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v185);
                std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v185 + 8), (uint64_t)"Status header not found.  Dropping report for MSRP Message-ID ", 62);
                *(_BYTE *)(v185 + 17) = 0;
                (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v185 + 32))(v185, v411.__r_.__value_.__r.__words[0] + 56);
                (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v185 + 64))(v185, std::endl[abi:ne180100]<char,std::char_traits<char>>);
                *(_BYTE *)(v185 + 17) = 0;
LABEL_610:
                v382 = (std::__shared_weak_count *)v410.__r_.__value_.__l.__size_;
                if (v410.__r_.__value_.__l.__size_)
                {
                  v383 = (unint64_t *)(v410.__r_.__value_.__l.__size_ + 8);
                  do
                    v384 = __ldaxr(v383);
                  while (__stlxr(v384 - 1, v383));
                  if (!v384)
                  {
                    ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
                    std::__shared_weak_count::__release_weak(v382);
                  }
                }
                goto LABEL_186;
              }
              v126 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
              (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v126);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v126 + 8), (uint64_t)"Dropping report; unknown MSRP Message-ID ",
                41);
              *(_BYTE *)(v126 + 17) = 0;
              (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v126 + 32))(v126, v114);
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v126 + 64))(v126, std::endl[abi:ne180100]<char,std::char_traits<char>>);
LABEL_185:
              *(_BYTE *)(v126 + 17) = 0;
LABEL_186:
              v127 = (std::__shared_weak_count *)v411.__r_.__value_.__l.__size_;
              if (!v411.__r_.__value_.__l.__size_)
                goto LABEL_393;
              v128 = (unint64_t *)(v411.__r_.__value_.__l.__size_ + 8);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              goto LABEL_391;
            }
            v57 = (unint64_t *)&v53->__shared_owners_;
            do
              v58 = __ldxr(v57);
            while (__stxr(v58 + 1, v57));
          }
          else
          {
            *(_OWORD *)&v411.__r_.__value_.__l.__data_ = 0uLL;
            if (!v53)
              goto LABEL_184;
          }
          v97 = (unint64_t *)&v53->__shared_owners_;
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
          if (!v98)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
          v56 = (char *)v411.__r_.__value_.__r.__words[0];
          if (v411.__r_.__value_.__r.__words[0])
            goto LABEL_156;
LABEL_184:
          v126 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
          (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v126);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v126 + 8), (uint64_t)"Incoming REPORT is missing a Message-ID", 39);
          *(_BYTE *)(v126 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v126 + 64))(v126, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          goto LABEL_185;
        }
      }
    }
    else if ((v403[23] & 0x80) != 0)
    {
      operator delete(*(void **)v403);
    }
    v49 = (void **)v400;
    if (v400)
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
      MessageSession::sendResponse(a1, (__int128 *)v403, v49 + 7, 403);
      if ((v403[23] & 0x80000000) != 0)
        operator delete(*(void **)v403);
    }
    goto LABEL_393;
  }
  if (v403[23])
  {
    v27 = 0;
    do
    {
      v28 = v403[v27];
      v29 = LazuliRequest::kMethodSend[v27];
    }
    while (v28 == v29 && v403[23] - 1 != v27++);
    if (v28 != v29)
      goto LABEL_53;
  }
LABEL_55:
  v33 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, "Message-ID");
  v34 = v33;
  if (v33)
  {
    v35 = (const void *)*((_QWORD *)v33 + 5);
    v36 = (std::__shared_weak_count *)*((_QWORD *)v34 + 6);
    if (v36)
    {
      v37 = (unint64_t *)&v36->__shared_owners_;
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    if (v35
    {
      v411.__r_.__value_.__r.__words[0] = (std::string::size_type)v39;
      v411.__r_.__value_.__l.__size_ = (std::string::size_type)v36;
      if (!v36)
        goto LABEL_102;
      v40 = (unint64_t *)&v36->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
    }
    else
    {
      *(_OWORD *)&v411.__r_.__value_.__l.__data_ = 0uLL;
      if (!v36)
        goto LABEL_102;
    }
    v59 = (unint64_t *)&v36->__shared_owners_;
    do
      v60 = __ldaxr(v59);
    while (__stlxr(v60 - 1, v59));
    if (!v60)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  else
  {
    *(_OWORD *)&v411.__r_.__value_.__l.__data_ = 0uLL;
  }
LABEL_102:
  v61 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, (unsigned __int8 *)&LazuliHeader::kHeaderContentType);
  v62 = v61;
  if (v61)
  {
    v63 = (const void *)*((_QWORD *)v61 + 5);
    v64 = (std::__shared_weak_count *)*((_QWORD *)v62 + 6);
    if (v64)
    {
      v65 = (unint64_t *)&v64->__shared_owners_;
      do
        v66 = __ldxr(v65);
      while (__stxr(v66 + 1, v65));
    }
    if (v63
    {
      v410.__r_.__value_.__r.__words[0] = (std::string::size_type)v67;
      v410.__r_.__value_.__l.__size_ = (std::string::size_type)v64;
      if (!v64)
        goto LABEL_118;
      v68 = (unint64_t *)&v64->__shared_owners_;
      do
        v69 = __ldxr(v68);
      while (__stxr(v69 + 1, v68));
    }
    else
    {
      *(_OWORD *)&v410.__r_.__value_.__l.__data_ = 0uLL;
      if (!v64)
        goto LABEL_118;
    }
    v70 = (unint64_t *)&v64->__shared_owners_;
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
    }
  }
  else
  {
    *(_OWORD *)&v410.__r_.__value_.__l.__data_ = 0uLL;
  }
LABEL_118:
  v72 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, "Byte-Range");
  v73 = v72;
  if (v72)
  {
    v74 = (const void *)*((_QWORD *)v72 + 5);
    v75 = (std::__shared_weak_count *)*((_QWORD *)v73 + 6);
    if (v75)
    {
      v76 = (unint64_t *)&v75->__shared_owners_;
      do
        v77 = __ldxr(v76);
      while (__stxr(v77 + 1, v76));
    }
    if (v74
    {
      v407 = v78;
      v408 = v75;
      if (!v75)
        goto LABEL_134;
      v79 = (unint64_t *)&v75->__shared_owners_;
      do
        v80 = __ldxr(v79);
      while (__stxr(v80 + 1, v79));
    }
    else
    {
      v407 = 0;
      v408 = 0;
      if (!v75)
        goto LABEL_134;
    }
    v81 = (unint64_t *)&v75->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
      std::__shared_weak_count::__release_weak(v75);
    }
  }
  else
  {
    v407 = 0;
    v408 = 0;
  }
LABEL_134:
  *(_OWORD *)v403 = 0uLL;
  v83 = (std::__shared_weak_count *)a1[57];
  if (!v83)
  {
    v84 = 0;
    goto LABEL_148;
  }
  v84 = std::__shared_weak_count::lock(v83);
  *(_QWORD *)&v403[8] = v84;
  if (!v84 || (v85 = (_QWORD *)a1[56], (*(_QWORD *)v403 = v85) == 0))
  {
LABEL_148:
    v95 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v95);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v95 + 8), (uint64_t)"MSRP path is unavailable.", 25);
    *(_BYTE *)(v95 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v95 + 64))(v95, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    v96 = 0;
    *(_BYTE *)(v95 + 17) = 0;
    if (!v84)
      goto LABEL_211;
    goto LABEL_207;
  }
  v86 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, "From-Path");
  v87 = v86;
  if (!v86)
  {
    v96 = 0;
    *(_OWORD *)&v402.__r_.__value_.__l.__data_ = 0uLL;
    goto LABEL_201;
  }
  v88 = (const void *)*((_QWORD *)v86 + 5);
  v89 = (std::__shared_weak_count *)*((_QWORD *)v87 + 6);
  if (v89)
  {
    v90 = (unint64_t *)&v89->__shared_owners_;
    do
      v91 = __ldxr(v90);
    while (__stxr(v91 + 1, v90));
  }
  if (!v88
  {
    *(_OWORD *)&v402.__r_.__value_.__l.__data_ = 0uLL;
    if (!v89)
      goto LABEL_200;
    goto LABEL_191;
  }
  v402.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
  v402.__r_.__value_.__l.__size_ = (std::string::size_type)v89;
  if (v89)
  {
    v93 = (unint64_t *)&v89->__shared_owners_;
    do
      v94 = __ldxr(v93);
    while (__stxr(v94 + 1, v93));
LABEL_191:
    v130 = (unint64_t *)&v89->__shared_owners_;
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
    if (!v131)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
    v92 = (_QWORD *)v402.__r_.__value_.__r.__words[0];
    if (v402.__r_.__value_.__r.__words[0])
    {
      v85 = *(_QWORD **)v403;
      goto LABEL_197;
    }
LABEL_200:
    v96 = 0;
    goto LABEL_201;
  }
LABEL_197:
  v96 = LazuliRouteSet::operator==(v92 + 7, v85);
LABEL_201:
  v132 = (std::__shared_weak_count *)v402.__r_.__value_.__l.__size_;
  if (v402.__r_.__value_.__l.__size_)
  {
    v133 = (unint64_t *)(v402.__r_.__value_.__l.__size_ + 8);
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
      std::__shared_weak_count::__release_weak(v132);
    }
  }
  v84 = *(std::__shared_weak_count **)&v403[8];
  if (*(_QWORD *)&v403[8])
  {
LABEL_207:
    v135 = (unint64_t *)&v84->__shared_owners_;
    do
      v136 = __ldaxr(v135);
    while (__stlxr(v136 - 1, v135));
    if (!v136)
    {
      ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
      std::__shared_weak_count::__release_weak(v84);
    }
  }
LABEL_211:
  if ((v96 & 1) == 0)
  {
    v147 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v147);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v147 + 8), (uint64_t)"Incoming SEND FromPath header does not match the one in SDP", 59);
    *(_BYTE *)(v147 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v147 + 64))(v147, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v147 + 17) = 0;
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
    MessageSession::sendResponse(a1, (__int128 *)v403, (void **)(v411.__r_.__value_.__r.__words[0] + 56), 403);
    goto LABEL_227;
  }
  v137 = v411.__r_.__value_.__r.__words[0];
  if (!v411.__r_.__value_.__r.__words[0] || !v410.__r_.__value_.__r.__words[0] || !v407)
  {
    v148 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v148);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v148 + 8), (uint64_t)"Incoming SEND required header is missing.", 41);
    *(_BYTE *)(v148 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v148 + 64))(v148, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v148 + 17) = 0;
    (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
    MessageSession::sendResponse(a1, (__int128 *)v403, (void **)(v137 + 56), 403);
LABEL_227:
    if ((v403[23] & 0x80000000) != 0)
      operator delete(*(void **)v403);
    goto LABEL_378;
  }
  v138 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, (unsigned __int8 *)&LazuliHeader::kHeaderFailureReport);
  v139 = v138;
  if (v138)
  {
    v140 = (const void *)*((_QWORD *)v138 + 5);
    v141 = (std::__shared_weak_count *)*((_QWORD *)v139 + 6);
    if (v141)
    {
      v142 = (unint64_t *)&v141->__shared_owners_;
      do
        v143 = __ldxr(v142);
      while (__stxr(v143 + 1, v142));
    }
    if (v140
    {
      v404 = v144;
      v405 = v141;
      if (v141)
      {
        v145 = (unint64_t *)&v141->__shared_owners_;
        do
          v146 = __ldxr(v145);
        while (__stxr(v146 + 1, v145));
LABEL_230:
        v149 = (unint64_t *)&v141->__shared_owners_;
        do
          v150 = __ldaxr(v149);
        while (__stlxr(v150 - 1, v149));
        if (!v150)
        {
          ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
          std::__shared_weak_count::__release_weak(v141);
        }
      }
    }
    else
    {
      v404 = 0;
      v405 = 0;
      if (v141)
        goto LABEL_230;
    }
  }
  else
  {
    v404 = 0;
    v405 = 0;
  }
  v151 = v407;
  v153 = *((_DWORD *)v407 + 13);
  v152 = *((_DWORD *)v407 + 14);
  v154 = *((unsigned int *)v407 + 15);
  v155 = v152 <= v153 || v153 >= v154;
  if (!v155 && v153 != 0 && v152 <= v154 && v154 < 0x3D091)
  {
    memset(&v402, 0, sizeof(v402));
    v389 = v152;
    v390 = v153;
    if (*((char *)v12 + 127) < 0)
      std::string::__init_copy_ctor_external(&v402, (const std::string::value_type *)v12[13], v12[14]);
    else
      v402 = *(std::string *)(v12 + 13);
    v186 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
    if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      v186 = v402.__r_.__value_.__l.__size_;
    if (v186 != v152 - v153 + 1)
    {
      v187 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
      (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v187);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v187 + 8), (uint64_t)"Incoming Byte-Range size is ", 28);
      *(_BYTE *)(v187 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v187 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v187 + 8), (uint64_t)" but body size is ", 18);
      *(_BYTE *)(v187 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v187 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v187 + 64))(v187, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v187 + 17) = 0;
    }
    if (*((_DWORD *)v151 + 13) == 1 && *((_DWORD *)v151 + 14) == *((_DWORD *)v151 + 15))
    {
      (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
      v188 = v411.__r_.__value_.__r.__words[0];
      MessageSession::processIncomingSendRequestBody((MessageSession *)a1, (__int128 *)v403, (__int128 *)(v411.__r_.__value_.__r.__words[0] + 56), v410.__r_.__value_.__r.__words[0] + 96, (uint64_t)&v402);
      if ((v403[23] & 0x80000000) != 0)
        operator delete(*(void **)v403);
      ++*((_DWORD *)a1 + 234);
      std::string::basic_string[abi:ne180100]<0>(v403, "OK");
      v388 = v188;
      MessageSession::logSendReceiveEvent((uint64_t)a1, 0, 1, 0, 200, (uint64_t)v403);
      v189 = v154;
      if ((v403[23] & 0x80000000) != 0)
LABEL_330:
        operator delete(*(void **)v403);
    }
    else
    {
      v388 = v411.__r_.__value_.__r.__words[0];
      v392 = a1 + 119;
      __str = (std::string *)(v411.__r_.__value_.__r.__words[0] + 56);
      v190 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 122), v411.__r_.__value_.__r.__words[0] + 56);
      v191 = (int8x8_t)a1[120];
      if (v191)
      {
        v192 = v190;
        v193 = (uint8x8_t)vcnt_s8(v191);
        v193.i16[0] = vaddlv_u8(v193);
        v391 = v193.u32[0];
        if (v193.u32[0] > 1uLL)
        {
          v194 = v190;
          if (v190 >= *(_QWORD *)&v191)
            v194 = v190 % *(_QWORD *)&v191;
        }
        else
        {
          v194 = (*(_QWORD *)&v191 - 1) & v190;
        }
        v195 = *(uint64_t **)(*v392 + 8 * v194);
        if (v195)
        {
          for (i = *v195; i; i = *(_QWORD *)i)
          {
            v197 = *(_QWORD *)(i + 8);
            if (v197 == v192)
            {
              if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 123), (unsigned __int8 *)(i + 16), (unsigned __int8 *)__str) & 1) != 0)
              {
                v189 = v154;
                if (*(_DWORD *)(i + 64) == (_DWORD)v154)
                {
                  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v385 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
                  else
                    v385 = v402.__r_.__value_.__l.__size_;
                  std::string::replace((std::string *)(i + 72), (v390 - 1), v385, &v402, 0, 0xFFFFFFFFFFFFFFFFLL);
                  v202 = (unsigned __int8 *)__str;
                  v386 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
                  if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                    v386 = v402.__r_.__value_.__r.__words[1];
                  *(_DWORD *)(i + 68) += v386;
                  ++*(_DWORD *)(i + 96);
                  v201 = (uint64_t *)i;
                  goto LABEL_326;
                }
                (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
                MessageSession::sendResponse(a1, (__int128 *)v403, (void **)&__str->__r_.__value_.__l.__data_, 403);
                if ((v403[23] & 0x80000000) != 0)
                  operator delete(*(void **)v403);
                if (std::operator==[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v404 + 7, "yes"))
                {
                  (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
                  MessageSession::sendReportRequest(a1, (__int128 *)v403, __str, 0x193u, v390, v389, v154);
                  if ((v403[23] & 0x80000000) != 0)
                    operator delete(*(void **)v403);
                }
                v387 = (*(_DWORD *)(i + 96) + 1);
                *(_DWORD *)(i + 96) = v387;
                std::string::basic_string[abi:ne180100]<0>(v403, "Not allowed");
                MessageSession::logSendReceiveEvent((uint64_t)a1, 0, v387, 0, 403, (uint64_t)v403);
                if ((v403[23] & 0x80000000) != 0)
                  operator delete(*(void **)v403);
                std::unordered_map<std::string,MessageSession::IncomingMessage>::erase[abi:ne180100](v392, (uint64_t *)i);
LABEL_370:
                if (SHIBYTE(v402.__r_.__value_.__r.__words[2]) < 0)
                {
                  v169 = (void *)v402.__r_.__value_.__r.__words[0];
LABEL_372:
                  operator delete(v169);
                }
                goto LABEL_373;
              }
            }
            else
            {
              if (v391 > 1)
              {
                if (v197 >= *(_QWORD *)&v191)
                  v197 %= *(_QWORD *)&v191;
              }
              else
              {
                v197 &= *(_QWORD *)&v191 - 1;
              }
              if (v197 != v194)
                break;
            }
          }
        }
      }
      memset(v403, 0, 64);
      std::string::operator=((std::string *)v403, __str);
      v189 = v154;
      *(_DWORD *)&v403[24] = v154;
      std::string::insert((std::string *)&v403[32], 0, v154, 32);
      if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v198 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
      else
        v198 = v402.__r_.__value_.__l.__size_;
      std::string::replace((std::string *)&v403[32], (v390 - 1), v198, &v402, 0, 0xFFFFFFFFFFFFFFFFLL);
      v199 = HIBYTE(v402.__r_.__value_.__r.__words[2]);
      if ((v402.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
        v199 = v402.__r_.__value_.__r.__words[1];
      *(_DWORD *)&v403[28] += v199;
      ++*(_DWORD *)&v403[56];
      v413.__r_.__value_.__r.__words[0] = (std::string::size_type)__str;
      v200 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v392, (unsigned __int8 *)__str, (__int128 **)&v413);
      MessageSession::IncomingMessage::operator=((uint64_t)(v200 + 40), (uint64_t)v403);
      MessageSession::IncomingMessage::~IncomingMessage((void **)v403);
      v201 = 0;
      i = 0;
      v202 = (unsigned __int8 *)__str;
LABEL_326:
      *(_QWORD *)v403 = v202;
      if (*((_DWORD *)std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v392, v202, (__int128 **)v403)+ 17) >= *((_DWORD *)v151 + 15))
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
        v203 = v410.__r_.__value_.__r.__words[0];
        v413.__r_.__value_.__r.__words[0] = (std::string::size_type)v202;
        v204 = std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t)v392, v202, (__int128 **)&v413);
        MessageSession::processIncomingSendRequestBody((MessageSession *)a1, (__int128 *)v403, (__int128 *)v202, v203 + 96, (uint64_t)(v204 + 72));
        if ((v403[23] & 0x80000000) != 0)
          operator delete(*(void **)v403);
        std::unordered_map<std::string,MessageSession::IncomingMessage>::erase[abi:ne180100](v392, v201);
        ++*((_DWORD *)a1 + 234);
        v205 = *(unsigned int *)(i + 96);
        std::string::basic_string[abi:ne180100]<0>(v403, "OK");
        MessageSession::logSendReceiveEvent((uint64_t)a1, 0, v205, 0, 200, (uint64_t)v403);
        if ((v403[23] & 0x80000000) != 0)
          goto LABEL_330;
      }
    }
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v12 + 32))(&v413, v12);
    (*(void (**)(std::string *__return_ptr, _QWORD *))(*v12 + 40))(&v412, v12);
    MessageSession::sendResponse(a1, (__int128 *)&v413, (void **)&v412.__r_.__value_.__l.__data_, 200);
    if (SHIBYTE(v412.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v412.__r_.__value_.__l.__data_);
    if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v413.__r_.__value_.__l.__data_);
    v206 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>>>::find<std::string>(v13, (unsigned __int8 *)&LazuliHeader::kHeaderSuccessReport);
    v207 = v206;
    if (v206)
    {
      v208 = (const void *)*((_QWORD *)v206 + 5);
      v209 = (std::__shared_weak_count *)*((_QWORD *)v207 + 6);
      if (v209)
      {
        v210 = (unint64_t *)&v209->__shared_owners_;
        do
          v211 = __ldxr(v210);
        while (__stxr(v211 + 1, v210));
      }
      if (v208)
      {
        if (v212)
        {
          v412.__r_.__value_.__r.__words[0] = (std::string::size_type)v212;
          v412.__r_.__value_.__l.__size_ = (std::string::size_type)v209;
          if (!v209)
          {
LABEL_351:
            v217 = *((unsigned __int8 *)v212 + 79);
            v218 = (char)v217;
            if ((v217 & 0x80u) != 0)
              v217 = v212[8];
            if (v217 == 3)
            {
              v221 = (char *)v212[7];
              v219 = (char *)(v212 + 7);
              v220 = v221;
              v222 = v218 >= 0 ? v219 : v220;
              v223 = *(unsigned __int16 *)v222;
              v224 = v222[2];
              if (v223 == 25977 && v224 == 115)
              {
                (*(void (**)(std::string *__return_ptr, _QWORD *))(*v12 + 32))(&v413, v12);
                MessageSession::sendReportRequest(a1, (__int128 *)&v413, (const std::string *)(v388 + 56), 0xC8u, v390, v389, v189);
                if (SHIBYTE(v413.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v413.__r_.__value_.__l.__data_);
              }
            }
            goto LABEL_365;
          }
          v213 = (unint64_t *)&v209->__shared_owners_;
          do
            v214 = __ldxr(v213);
          while (__stxr(v214 + 1, v213));
LABEL_346:
          v215 = (unint64_t *)&v209->__shared_owners_;
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v209->__on_zero_shared)(v209);
            std::__shared_weak_count::__release_weak(v209);
          }
          v212 = (_QWORD *)v412.__r_.__value_.__r.__words[0];
          if (!v412.__r_.__value_.__r.__words[0])
            goto LABEL_365;
          goto LABEL_351;
        }
      }
      *(_OWORD *)&v412.__r_.__value_.__l.__data_ = 0uLL;
      if (v209)
        goto LABEL_346;
    }
    else
    {
      *(_OWORD *)&v412.__r_.__value_.__l.__data_ = 0uLL;
    }
LABEL_365:
    v226 = (std::__shared_weak_count *)v412.__r_.__value_.__l.__size_;
    if (v412.__r_.__value_.__l.__size_)
    {
      v227 = (unint64_t *)(v412.__r_.__value_.__l.__size_ + 8);
      do
        v228 = __ldaxr(v227);
      while (__stlxr(v228 - 1, v227));
      if (!v228)
      {
        ((void (*)(std::__shared_weak_count *))v226->__on_zero_shared)(v226);
        std::__shared_weak_count::__release_weak(v226);
      }
    }
    goto LABEL_370;
  }
  v159 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v159);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v159 + 8), (uint64_t)"Incoming range issue ", 21);
  *(_BYTE *)(v159 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v159 + 17) = 0;
  v160 = *(_QWORD **)(v159 + 8);
  v403[0] = 45;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v160, (uint64_t)v403, 1);
  *(_BYTE *)(v159 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v159 + 17) = 0;
  v161 = *(_QWORD **)(v159 + 8);
  v403[0] = 47;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v161, (uint64_t)v403, 1);
  *(_BYTE *)(v159 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v159 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v159 + 64))(v159, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v159 + 17) = 0;
  (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
  v162 = (const std::string *)(v411.__r_.__value_.__r.__words[0] + 56);
  MessageSession::sendResponse(a1, (__int128 *)v403, (void **)(v411.__r_.__value_.__r.__words[0] + 56), 403);
  if ((v403[23] & 0x80000000) != 0)
    operator delete(*(void **)v403);
  if (v404)
  {
    v163 = (const void *)*((unsigned __int8 *)v404 + 79);
    v164 = (char)v163;
    if ((char)v163 < 0)
      v163 = v404[8];
    if (v163 == (const void *)3)
    {
      v165 = (unsigned __int16 *)(v404 + 7);
      if (v164 < 0)
        v165 = (unsigned __int16 *)v404[7];
      v166 = *v165;
      v167 = *((unsigned __int8 *)v165 + 2);
      if (v166 == 25977 && v167 == 115)
      {
        (*(void (**)(_BYTE *__return_ptr, _QWORD *))(*v12 + 32))(v403, v12);
        MessageSession::sendReportRequest(a1, (__int128 *)v403, v162, 0x193u, v153, v152, v154);
        if ((v403[23] & 0x80000000) != 0)
        {
          v169 = *(void **)v403;
          goto LABEL_372;
        }
      }
    }
  }
LABEL_373:
  v229 = v405;
  if (v405)
  {
    v230 = (unint64_t *)&v405->__shared_owners_;
    do
      v231 = __ldaxr(v230);
    while (__stlxr(v231 - 1, v230));
    if (!v231)
    {
      ((void (*)(std::__shared_weak_count *))v229->__on_zero_shared)(v229);
      std::__shared_weak_count::__release_weak(v229);
    }
  }
LABEL_378:
  v232 = v408;
  if (v408)
  {
    v233 = (unint64_t *)&v408->__shared_owners_;
    do
      v234 = __ldaxr(v233);
    while (__stlxr(v234 - 1, v233));
    if (!v234)
    {
      ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
      std::__shared_weak_count::__release_weak(v232);
    }
  }
  v235 = (std::__shared_weak_count *)v410.__r_.__value_.__l.__size_;
  if (v410.__r_.__value_.__l.__size_)
  {
    v236 = (unint64_t *)(v410.__r_.__value_.__l.__size_ + 8);
    do
      v237 = __ldaxr(v236);
    while (__stlxr(v237 - 1, v236));
    if (!v237)
    {
      ((void (*)(std::__shared_weak_count *))v235->__on_zero_shared)(v235);
      std::__shared_weak_count::__release_weak(v235);
    }
  }
  v127 = (std::__shared_weak_count *)v411.__r_.__value_.__l.__size_;
  if (v411.__r_.__value_.__l.__size_)
  {
    v238 = (unint64_t *)(v411.__r_.__value_.__l.__size_ + 8);
    do
      v129 = __ldaxr(v238);
    while (__stlxr(v129 - 1, v238));
LABEL_391:
    if (!v129)
    {
      ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
      std::__shared_weak_count::__release_weak(v127);
    }
  }
LABEL_393:
  v239 = v401;
  if (v401)
  {
    v240 = (unint64_t *)&v401->__shared_owners_;
    do
      v241 = __ldaxr(v240);
    while (__stlxr(v241 - 1, v240));
    if (!v241)
    {
      ((void (*)(std::__shared_weak_count *))v239->__on_zero_shared)(v239);
      std::__shared_weak_count::__release_weak(v239);
    }
  }
  v4 = *(const void **)a2;
  if (*(_QWORD *)a2)
    goto LABEL_399;
LABEL_560:
  v345 = v399;
  if (v399)
  {
    v346 = (unint64_t *)&v399->__shared_owners_;
    do
      v347 = __ldaxr(v346);
    while (__stlxr(v347 - 1, v346));
    if (!v347)
    {
      ((void (*)(std::__shared_weak_count *))v345->__on_zero_shared)(v345);
      std::__shared_weak_count::__release_weak(v345);
    }
  }
}

void sub_1BEF291C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, char a19, uint64_t a20,char a21,uint64_t a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  uint64_t v43;

  if (a43 < 0)
    operator delete(__p);
  if (a30 < 0)
    operator delete(a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 248);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 224);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 200);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v43 - 176);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a23);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void MessageSession::handleSendError(_QWORD *a1, unsigned __int8 *a2, std::string *a3)
{
  uint64_t v6;
  _QWORD *v7;
  IMSClientManager *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  _QWORD *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  _BYTE v33[72];
  uint64_t v34;
  std::__shared_weak_count *v35;
  xpc_object_t v36;
  _QWORD *v37;
  std::__shared_weak_count *v38;
  char v39;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"MessageSession::handleSendError for MSRP Message-ID ", 52);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v6 + 32))(v6, a2);
  v7 = *(_QWORD **)(v6 + 8);
  LOBYTE(v37) = 58;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v7, (uint64_t)&v37, 1);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(std::string *, uint64_t))(a3->__r_.__value_.__r.__words[0] + 16))(a3, v6);
  v8 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  IMSClientManager::instance(v8);
  IPTelephonyManager::getInstance((uint64_t *)&v37);
  v9 = v38;
  v10 = v37[25];
  if (v38)
  {
    p_shared_owners = (unint64_t *)&v38->__shared_owners_;
    do
      v12 = __ldaxr(p_shared_owners);
    while (__stlxr(v12 - 1, p_shared_owners));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v13 = a1[40];
  std::string::basic_string[abi:ne180100]<0>(&v37, "MediaError");
  v36 = xpc_null_create();
  IMSCallManager::terminateLazuli(v10, v13 + 1648, (uint64_t)&v37, &v36);
  xpc_release(v36);
  v36 = 0;
  if (v39 < 0)
    operator delete(v37);
  v14 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<SipDialog>>>>::find<std::string>(a1 + 124, a2);
  v15 = (uint64_t)v14;
  if (v14)
  {
    std::string::operator=(a3 + 2, (const std::string *)(v14 + 40));
    v15 = *(unsigned int *)(v15 + 64);
  }
  else
  {
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No ctTransactionId for MSRP Message-ID ", 39);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, unsigned __int8 *))(*(_QWORD *)v16 + 32))(v16, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
  }
  v17 = a1[40];
  v18 = *(_QWORD *)(v17 + 208);
  v19 = *(std::__shared_weak_count **)(v17 + 216);
  v34 = v18;
  v35 = v19;
  if (v19)
  {
    v20 = (unint64_t *)&v19->__shared_owners_;
    do
      v21 = __ldxr(v20);
    while (__stxr(v21 + 1, v20));
  }
  v22 = *(_QWORD *)(v18 + 136);
  v24 = *(_QWORD **)(v22 + 208);
  v23 = *(std::__shared_weak_count **)(v22 + 216);
  v37 = v24;
  v38 = v23;
  if (v23)
  {
    v25 = (unint64_t *)&v23->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  v27 = a1[40];
  ImsResult::ImsResult((ImsResult *)v33, (const ImsResult *)a3);
  SipLazuliManager::handleOutgoingMessageError((uint64_t)v24, (uint64_t)(a1 + 60), v27 + 1648, v15, (uint64_t)v33);
  ImsResult::~ImsResult((ImsResult *)v33);
  if (v23)
  {
    v28 = (unint64_t *)&v23->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v30 = v35;
  if (v35)
  {
    v31 = (unint64_t *)&v35->__shared_owners_;
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 - 1, v31));
    if (!v32)
    {
      ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
      std::__shared_weak_count::__release_weak(v30);
    }
  }
}

void sub_1BEF298DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  ImsResult::~ImsResult((ImsResult *)va);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v2 - 72);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_1BEF2990C()
{
  uint64_t v0;

  xpc_release(*(xpc_object_t *)(v0 - 80));
  *(_QWORD *)(v0 - 80) = 0;
  if (*(char *)(v0 - 49) < 0)
    operator delete(*(void **)(v0 - 72));
  JUMPOUT(0x1BEF29900);
}

void `non-virtual thunk to'MessageSession::handleSendError(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  MessageSession::handleSendError((_QWORD *)(a1 - 104), a2, a3);
}

void MessageSession::handleConferenceNotification(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  xpc_object_t v7;
  xpc_object_t v8;
  xpc_object_t v9;
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  const char *v13;
  const char *p_p;
  const char *v15;
  LazuliDelegate *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  xpc_object_t v20;
  xpc_object_t v21;
  xpc_object_t v22;
  _QWORD v23[2];
  void *__p;
  const char *v25;
  char v26;
  xpc_object_t v27;
  xpc_object_t v28;
  xpc_object_t object;
  xpc_object_t v30;
  xpc_object_t v31;
  xpc_object_t v32;
  xpc_object_t v33;
  LazuliDelegate *v34;
  std::__shared_weak_count *v35;

  v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 64))(a1);
  (*(void (**)(_QWORD *, uint64_t))(*a1 + 16))(a1, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Got conference update from ", 27);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 40))(a2, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)": ", 2);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 32))(v6, a3);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v34 = 0;
  v35 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)(a1[40] + 112), &v34);
  if (!v34)
    goto LABEL_34;
  v33 = 0;
  v7 = xpc_dictionary_create(0, 0, 0);
  v8 = v7;
  if (v7)
  {
    v33 = v7;
  }
  else
  {
    v8 = xpc_null_create();
    v33 = v8;
    if (!v8)
    {
      v9 = xpc_null_create();
      v8 = 0;
      goto LABEL_9;
    }
  }
  if (MEMORY[0x1C3B87B98](v8) != MEMORY[0x1E0C812F8])
  {
    v9 = xpc_null_create();
LABEL_9:
    v33 = v9;
    goto LABEL_10;
  }
  xpc_retain(v8);
LABEL_10:
  xpc_release(v8);
  v10 = a1[40];
  v11 = (const char *)(v10 + 1648);
  if (*(char *)(v10 + 1671) < 0)
    v11 = *(const char **)v11;
  v31 = xpc_string_create(v11);
  if (!v31)
    v31 = xpc_null_create();
  __p = &v33;
  v25 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v31, &v32);
  xpc_release(v32);
  v32 = 0;
  xpc_release(v31);
  v31 = 0;
  v12 = a1[40];
  v13 = (const char *)(v12 + 1704);
  if (*(char *)(v12 + 1727) < 0)
    v13 = *(const char **)v13;
  object = xpc_string_create(v13);
  if (!object)
    object = xpc_null_create();
  __p = &v33;
  v25 = "kContributionId";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &object, &v30);
  xpc_release(v30);
  v30 = 0;
  xpc_release(object);
  object = 0;
  SipUri::asString(a2, 2, &__p);
  if (v26 >= 0)
    p_p = (const char *)&__p;
  else
    p_p = (const char *)__p;
  v27 = xpc_string_create(p_p);
  if (!v27)
    v27 = xpc_null_create();
  v23[0] = &v33;
  v23[1] = "kConferenceFocus";
  xpc::dict::object_proxy::operator=((uint64_t)v23, &v27, &v28);
  xpc_release(v28);
  v28 = 0;
  xpc_release(v27);
  v27 = 0;
  if (v26 < 0)
    operator delete(__p);
  if (*(char *)(a3 + 23) >= 0)
    v15 = (const char *)a3;
  else
    v15 = *(const char **)a3;
  v21 = xpc_string_create(v15);
  if (!v21)
    v21 = xpc_null_create();
  __p = &v33;
  v25 = "kResourceXml";
  xpc::dict::object_proxy::operator=((uint64_t)&__p, &v21, &v22);
  xpc_release(v22);
  v22 = 0;
  xpc_release(v21);
  v16 = v34;
  v20 = v33;
  v21 = 0;
  if (v33)
    xpc_retain(v33);
  else
    v20 = xpc_null_create();
  LazuliDelegate::handleGroupChatUpdate(v16, &v20);
  xpc_release(v20);
  v20 = 0;
  xpc_release(v33);
LABEL_34:
  v17 = v35;
  if (v35)
  {
    p_shared_owners = (unint64_t *)&v35->__shared_owners_;
    do
      v19 = __ldaxr(p_shared_owners);
    while (__stlxr(v19 - 1, p_shared_owners));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
}

void sub_1BEF29CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  uint64_t v10;

  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v10 - 56));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v10 - 48);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'MessageSession::handleConferenceNotification(uint64_t a1, uint64_t a2, uint64_t a3)
{
  MessageSession::handleConferenceNotification((_QWORD *)(a1 - 112), a2, a3);
}

void MessageSession::addParticipant(uint64_t a1, unsigned __int8 *a2, const SipUri *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v30 = v5;
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4), (v31 = v8) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = 0;
  v35 = 0;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  v32 = v5;
  v33 = v8;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v27);
  if (*(char *)(v27 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v27 + 4136), *(_QWORD *)(v27 + 4144));
  else
    v29 = *(std::string *)(v27 + 4136);
  v11 = *(std::__shared_weak_count **)(a1 + 328);
  v26[0] = *(_QWORD *)(a1 + 320);
  v26[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  LazuliGroupParticipant::addParticipant(&v32, &v29, (uint64_t)a2, a3, v26, &v34);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 888, a2, (__int128 **)&v29);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v22 + 5, v34, (uint64_t)v35);
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEF29F58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::__release_weak(v20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void MessageSession::removeParticipant(uint64_t a1, unsigned __int8 *a2, const SipUri *a3)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_weak_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 *v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  std::__shared_weak_count *v35;

  v5 = *(_QWORD *)(a1 + 120);
  v4 = *(std::__shared_weak_count **)(a1 + 128);
  v30 = v5;
  if (!v4 || (v8 = std::__shared_weak_count::lock(v4), (v31 = v8) == 0))
    std::__throw_bad_weak_ptr[abi:ne180100]();
  v34 = 0;
  v35 = 0;
  p_shared_weak_owners = (unint64_t *)&v8->__shared_weak_owners_;
  v32 = v5;
  v33 = v8;
  do
    v10 = __ldxr(p_shared_weak_owners);
  while (__stxr(v10 + 1, p_shared_weak_owners));
  SipDialog::stack(*(std::__shared_weak_count **)(a1 + 320), &v27);
  if (*(char *)(v27 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v29, *(const std::string::value_type **)(v27 + 4136), *(_QWORD *)(v27 + 4144));
  else
    v29 = *(std::string *)(v27 + 4136);
  v11 = *(std::__shared_weak_count **)(a1 + 328);
  v26[0] = *(_QWORD *)(a1 + 320);
  v26[1] = v11;
  if (v11)
  {
    p_shared_owners = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
  }
  LazuliGroupParticipant::removeParticipant(&v32, &v29, (uint64_t)a2, a3, v26, &v34);
  if (v11)
  {
    v14 = (unint64_t *)&v11->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  v16 = v28;
  if (v28)
  {
    v17 = (unint64_t *)&v28->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
      std::__shared_weak_count::__release_weak(v16);
    }
  }
  if (v33)
    std::__shared_weak_count::__release_weak(v33);
  v19 = v31;
  if (v31)
  {
    v20 = (unint64_t *)&v31->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v29.__r_.__value_.__r.__words[0] = (std::string::size_type)a2;
  v22 = std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a1 + 888, a2, (__int128 **)&v29);
  std::shared_ptr<SipLazuliManager::OutgoingPager>::operator=[abi:ne180100]((_QWORD *)v22 + 5, v34, (uint64_t)v35);
  v23 = v35;
  if (v35)
  {
    v24 = (unint64_t *)&v35->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
}

void sub_1BEF2A1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  std::__shared_weak_count *v20;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::__shared_weak_count::__release_weak(v20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void MessageSession::handleParticipantStateChange(SipDialog **a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  xpc_object_t v17;
  xpc_object_t v18;
  xpc_object_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::string *v23;
  const char *v24;
  LazuliDelegate *v25;
  uint64_t v26;
  _BYTE *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  SipDialog *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  char v42;
  uint64_t v43;
  std::__shared_weak_count *size;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string __p;
  _QWORD v58[2];
  _BYTE v59[7];
  char v60;
  uint64_t v61[2];
  xpc_object_t v62;
  xpc_object_t v63;
  xpc_object_t v64;
  xpc_object_t *v65;
  const char *v66;
  xpc_object_t v67;
  xpc_object_t v68;
  xpc_object_t v69;
  xpc_object_t v70;
  xpc_object_t v71;
  xpc_object_t v72;
  xpc_object_t object;
  xpc_object_t *v74;
  const char *v75;
  std::string v76;
  xpc_object_t v77;
  xpc_object_t v78;

  v78 = 0;
  SipDialog::lazuliGroupParams(a1[40], &v78);
  v14 = MEMORY[0x1C3B87B98](v78);
  v15 = MEMORY[0x1E0C812F8];
  if (v14 != MEMORY[0x1E0C812F8])
  {
    v16 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
    (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"No group params for refer ", 26);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 32))(v16, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    goto LABEL_46;
  }
  v77 = 0;
  v17 = xpc_dictionary_create(0, 0, 0);
  v18 = v17;
  if (v17)
  {
    v77 = v17;
  }
  else
  {
    v18 = xpc_null_create();
    v77 = v18;
    if (!v18)
    {
      v19 = xpc_null_create();
      v18 = 0;
      goto LABEL_10;
    }
  }
  if (MEMORY[0x1C3B87B98](v18) == v15)
  {
    xpc_retain(v18);
    goto LABEL_11;
  }
  v19 = xpc_null_create();
LABEL_10:
  v77 = v19;
LABEL_11:
  xpc_release(v18);
  memset(&v76, 0, sizeof(v76));
  SipDialog::stack((std::__shared_weak_count *)a1[40], &v74);
  if (*((char *)v74 + 4159) < 0)
    std::string::__init_copy_ctor_external(&v76, (const std::string::value_type *)v74[517], (std::string::size_type)v74[518]);
  else
    v76 = *(std::string *)(v74 + 517);
  v20 = (std::__shared_weak_count *)v75;
  if (v75)
  {
    v21 = (unint64_t *)(v75 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v23 = &v76;
  else
    v23 = (std::string *)v76.__r_.__value_.__r.__words[0];
  v72 = xpc_string_create((const char *)v23);
  if (!v72)
    v72 = xpc_null_create();
  v74 = &v77;
  v75 = "kStackId";
  xpc::dict::object_proxy::operator=((uint64_t)&v74, &v72, &object);
  xpc_release(object);
  object = 0;
  xpc_release(v72);
  v72 = 0;
  v70 = xpc_BOOL_create(a4 == 2);
  if (!v70)
    v70 = xpc_null_create();
  v74 = &v77;
  v75 = "kIsSuccess";
  xpc::dict::object_proxy::operator=((uint64_t)&v74, &v70, &v71);
  xpc_release(v71);
  v71 = 0;
  xpc_release(v70);
  v70 = 0;
  if (*(char *)(a2 + 23) >= 0)
    v24 = (const char *)a2;
  else
    v24 = *(const char **)a2;
  v68 = xpc_string_create(v24);
  if (!v68)
    v68 = xpc_null_create();
  v74 = &v77;
  v75 = "kTransactionId";
  xpc::dict::object_proxy::operator=((uint64_t)&v74, &v68, &v69);
  xpc_release(v69);
  v69 = 0;
  xpc_release(v68);
  v68 = 0;
  v74 = &v78;
  v75 = "kConversationId";
  v65 = &v77;
  v66 = "kConversationId";
  xpc::dict::object_proxy::operator=((uint64_t)&v65, (uint64_t)&v74, &v67);
  xpc_release(v67);
  v74 = &v78;
  v75 = "kContributionId";
  v65 = &v77;
  v66 = "kContributionId";
  v67 = 0;
  xpc::dict::object_proxy::operator=((uint64_t)&v65, (uint64_t)&v74, &v64);
  xpc_release(v64);
  v64 = 0;
  v74 = 0;
  v75 = 0;
  IMSClientManager::lazuliDelegateForStack((void **)&v76.__r_.__value_.__l.__data_, &v74);
  v25 = (LazuliDelegate *)v74;
  if (v74)
  {
    if (a3 == 2)
    {
      v62 = v77;
      if (v77)
        xpc_retain(v77);
      else
        v62 = xpc_null_create();
      LazuliDelegate::handleParticipantRemoved(v25, &v62);
      xpc_release(v62);
      v62 = 0;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__erase_unique<std::string>(a1 + 111, (unsigned __int8 *)a2))
      {
        goto LABEL_38;
      }
      v56 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
      (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v56);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v56 + 8), (uint64_t)"Unable to erase removed participant for ", 40);
      *(_BYTE *)(v56 + 17) = 0;
      v27 = (_BYTE *)(v56 + 17);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v56 + 32))(v56, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v56 + 64))(v56, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
    else
    {
      if (a3 != 1)
        goto LABEL_38;
      v63 = v77;
      if (v77)
        xpc_retain(v77);
      else
        v63 = xpc_null_create();
      LazuliDelegate::handleParticipantAdded(v25, &v63);
      xpc_release(v63);
      v63 = 0;
      if (std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__erase_unique<std::string>(a1 + 111, (unsigned __int8 *)a2))
      {
        goto LABEL_38;
      }
      v55 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
      (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v55);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v55 + 8), (uint64_t)"Unable to erase added participant for ", 38);
      *(_BYTE *)(v55 + 17) = 0;
      v27 = (_BYTE *)(v55 + 17);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v55 + 32))(v55, a2);
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v55 + 64))(v55, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    }
  }
  else
  {
    v26 = (*((uint64_t (**)(SipDialog **))*a1 + 7))(a1);
    (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"No delegate for refer ", 22);
    *(_BYTE *)(v26 + 17) = 0;
    v27 = (_BYTE *)(v26 + 17);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v26 + 32))(v26, a2);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *v27 = 0;
LABEL_38:
  v28 = (std::__shared_weak_count *)v75;
  if (v75)
  {
    v29 = (unint64_t *)(v75 + 8);
    do
      v30 = __ldaxr(v29);
    while (__stlxr(v30 - 1, v29));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v76.__r_.__value_.__l.__data_);
  xpc_release(v77);
LABEL_46:
  xpc_release(v78);
  v31 = (*((uint64_t (**)(SipDialog **))*a1 + 8))(a1);
  (*((void (**)(SipDialog **, uint64_t))*a1 + 2))(a1, v31);
  std::ostream::operator<<();
  *(_BYTE *)(v31 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v31 + 8), (uint64_t)" ongoing refers", 15);
  *(_BYTE *)(v31 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v31 + 64))(v31, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v31 + 17) = 0;
  *(_OWORD *)&v76.__r_.__value_.__l.__data_ = 0uLL;
  v32 = a1[40];
  v33 = (std::__shared_weak_count *)*((_QWORD *)v32 + 231);
  v34 = (std::__shared_weak_count *)*((_QWORD *)v32 + 232);
  v74 = (xpc_object_t *)&v33->__vftable;
  v75 = (const char *)v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  SipSessionInterface::stack(v33, &v76);
  if (v34)
  {
    v37 = (unint64_t *)&v34->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v39 = v76.__r_.__value_.__r.__words[0];
  if (v76.__r_.__value_.__r.__words[0])
  {
    if (a3 == 1)
      v40 = 0x455449564E49;
    else
      v40 = 4544834;
    if (a3 == 1)
      v41 = &qword_1BF2979B8;
    else
      v41 = &qword_1BF297940;
    LODWORD(v65) = *(_DWORD *)v41;
    *(_DWORD *)((char *)&v65 + 3) = *(_DWORD *)((char *)v41 + 3);
    if (a3 == 1)
      v42 = 6;
    else
      v42 = 3;
    (*(void (**)(xpc_object_t **__return_ptr))(**(_QWORD **)(v76.__r_.__value_.__r.__words[0] + 136) + 104))(&v74);
    v43 = (uint64_t)v74;
    size = (std::__shared_weak_count *)v76.__r_.__value_.__l.__size_;
    v61[0] = v39;
    v61[1] = v76.__r_.__value_.__l.__size_;
    if (v76.__r_.__value_.__l.__size_)
    {
      v45 = (unint64_t *)(v76.__r_.__value_.__l.__size_ + 8);
      do
        v46 = __ldxr(v45);
      while (__stxr(v46 + 1, v45));
    }
    v58[0] = v40;
    v58[1] = 0;
    *(_DWORD *)v59 = (_DWORD)v65;
    *(_DWORD *)&v59[3] = *(_DWORD *)((char *)&v65 + 3);
    v60 = v42;
    if (*(char *)(a7 + 23) < 0)
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a7, *(_QWORD *)(a7 + 8));
    else
      __p = *(std::string *)a7;
    IMSMetricsManager::logLazuliRefer(v43, v61, (uint64_t)v58, a4 == 2, a5, a6, (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (size)
    {
      v47 = (unint64_t *)&size->__shared_owners_;
      do
        v48 = __ldaxr(v47);
      while (__stlxr(v48 - 1, v47));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
        std::__shared_weak_count::__release_weak(size);
      }
    }
    v49 = (std::__shared_weak_count *)v75;
    if (v75)
    {
      v50 = (unint64_t *)(v75 + 8);
      do
        v51 = __ldaxr(v50);
      while (__stlxr(v51 - 1, v50));
      if (!v51)
      {
        ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
        std::__shared_weak_count::__release_weak(v49);
      }
    }
  }
  v52 = (std::__shared_weak_count *)v76.__r_.__value_.__l.__size_;
  if (v76.__r_.__value_.__l.__size_)
  {
    v53 = (unint64_t *)(v76.__r_.__value_.__l.__size_ + 8);
    do
      v54 = __ldaxr(v53);
    while (__stlxr(v54 - 1, v53));
    if (!v54)
    {
      ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
      std::__shared_weak_count::__release_weak(v52);
    }
  }
}

void sub_1BEF2AA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, xpc_object_t object,xpc_object_t a21)
{
  uint64_t v21;

  xpc_release(object);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v21 - 144);
  if (*(char *)(v21 - 105) < 0)
    operator delete(*(void **)(v21 - 128));
  xpc_release(*(xpc_object_t *)(v21 - 96));
  xpc_release(*(xpc_object_t *)(v21 - 88));
  _Unwind_Resume(a1);
}

void MessageSession::handleTimer(uint64_t a1, const std::string *a2)
{
  char v4;
  int64_t size;
  const std::string *v6;
  char *v7;
  std::string *v8;
  char *v9;
  std::string::size_type v10;
  std::string *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  _QWORD v29[10];
  std::__shared_weak_count *v30;
  uint64_t v31;
  std::__shared_weak_count *v32;
  _QWORD v33[3];
  __int128 v34;
  _QWORD v35[4];
  std::string v36;
  std::string __str;

  v4 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  if (v4 >= 0)
    size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  else
    size = a2->__r_.__value_.__l.__size_;
  if (v4 >= 0)
    v6 = a2;
  else
    v6 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  v7 = (char *)v6 + size;
  if (size >= 1)
  {
    v8 = (std::string *)v6;
    do
    {
      v9 = (char *)memchr(v8, 32, size);
      if (!v9)
        break;
      if (*v9 == 32)
        goto LABEL_13;
      v8 = (std::string *)(v9 + 1);
      size = v7 - (char *)v8;
    }
    while (v7 - (char *)v8 > 0);
  }
  v9 = v7;
LABEL_13:
  if (v9 == v7)
    v10 = -1;
  else
    v10 = v9 - (char *)v6;
  memset(&__str, 0, sizeof(__str));
  std::string::basic_string(&__str, a2, 0, v10, (std::allocator<char> *)v33);
  memset(&v36, 0, sizeof(v36));
  v11 = std::string::basic_string(&v36, a2, v10 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v33);
  v12 = std::stoul(v11, 0, 10);
  v34 = 0u;
  memset(v35, 0, sizeof(v35));
  v33[0] = &off_1E78B7238;
  v33[1] = &_bambiDomain;
  v33[2] = 1073741831;
  std::string::operator=((std::string *)&v35[1], &__str);
  v13 = *(_QWORD *)(a1 + 320);
  v14 = *(_QWORD *)(v13 + 208);
  v15 = *(std::__shared_weak_count **)(v13 + 216);
  v29[9] = v14;
  v30 = v15;
  if (v15)
  {
    p_shared_owners = (unint64_t *)&v15->__shared_owners_;
    do
      v17 = __ldxr(p_shared_owners);
    while (__stxr(v17 + 1, p_shared_owners));
  }
  v18 = *(_QWORD *)(v14 + 136);
  v20 = *(_QWORD *)(v18 + 208);
  v19 = *(std::__shared_weak_count **)(v18 + 216);
  v31 = v20;
  v32 = v19;
  if (v19)
  {
    v21 = (unint64_t *)&v19->__shared_owners_;
    do
      v22 = __ldxr(v21);
    while (__stxr(v22 + 1, v21));
  }
  v23 = *(_QWORD *)(a1 + 320);
  ImsResult::ImsResult((ImsResult *)v29, (const ImsResult *)v33);
  SipLazuliManager::handleOutgoingMessageError(v20, a1 + 480, v23 + 1648, v12, (uint64_t)v29);
  ImsResult::~ImsResult((ImsResult *)v29);
  if (v19)
  {
    v24 = (unint64_t *)&v19->__shared_owners_;
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
    if (!v25)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  v26 = v30;
  if (v30)
  {
    v27 = (unint64_t *)&v30->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  ImsResult::~ImsResult((ImsResult *)v33);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v36.__r_.__value_.__l.__data_);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void sub_1BEF2ADC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, char a20,uint64_t a21,char a22)
{
  uint64_t v22;

  ImsResult::~ImsResult((ImsResult *)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a18);
  ImsResult::~ImsResult((ImsResult *)&a22);
  if (*(char *)(v22 - 73) < 0)
    operator delete(*(void **)(v22 - 96));
  if (*(char *)(v22 - 49) < 0)
    operator delete(*(void **)(v22 - 72));
  _Unwind_Resume(a1);
}

void MessageSession::stackId(MessageSession *this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this + 55) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 4), *((_QWORD *)this + 5));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 2);
    a2->__r_.__value_.__r.__words[2] = *((_QWORD *)this + 6);
  }
}

uint64_t MessageSession::toTimerIdString@<X0>(_QWORD *a1@<X8>)
{
  return ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(a1);
}

void `non-virtual thunk to'MessageSession::stackId(const std::string::value_type **this@<X0>, std::string *a2@<X8>)
{
  if (*((char *)this - 49) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *(this - 9), (std::string::size_type)*(this - 8));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)(this - 9);
    a2->__r_.__value_.__r.__words[2] = (std::string::size_type)*(this - 7);
  }
}

uint64_t std::__find_impl[abi:ne180100]<std::string const*,std::string const*,std::string,std::__identity>(uint64_t a1, uint64_t a2, unsigned __int8 **a3)
{
  uint64_t v3;
  char v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  uint64_t v10;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *((_BYTE *)a3 + 23);
    if (v5 >= 0)
      v6 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
    else
      v6 = a3[1];
    if (v5 >= 0)
      v7 = (unsigned __int8 *)a3;
    else
      v7 = *a3;
    do
    {
      v8 = *(unsigned __int8 *)(v3 + 23);
      if ((v8 & 0x80u) == 0)
        v9 = (unsigned __int8 *)*(unsigned __int8 *)(v3 + 23);
      else
        v9 = *(unsigned __int8 **)(v3 + 8);
      if (v9 == v6)
      {
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v3, v7, *(_QWORD *)(v3 + 8)))
            return v3;
        }
        else
        {
          if (!*(_BYTE *)(v3 + 23))
            return v3;
          v10 = 0;
          while (*(unsigned __int8 *)(v3 + v10) == v7[v10])
          {
            if (v8 == ++v10)
              return v3;
          }
        }
      }
      v3 += 24;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::IncomingMessage>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::IncomingMessage>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0)
    operator delete(*(void **)(a1 + 56));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::~__hash_table(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  v2 = *(_QWORD **)(a1 + 16);
  if (v2)
  {
    do
    {
      v3 = (_QWORD *)*v2;
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::SentMessageInfo>,0>((uint64_t)(v2 + 2));
      operator delete(v2);
      v2 = v3;
    }
    while (v3);
  }
  v4 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
    operator delete(v4);
  return a1;
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::SentMessageInfo>,0>(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0)
    operator delete(*(void **)(a1 + 96));
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

void std::__shared_ptr_emplace<LazuliMessageDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliMessageDecoder>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

void std::__shared_ptr_emplace<LazuliMessageDecoder>::__on_zero_shared(uint64_t a1)
{
  LazuliMessageDecoder::~LazuliMessageDecoder((void **)(a1 + 24));
}

uint64_t std::allocate_shared[abi:ne180100]<LazuliRequest,std::allocator<LazuliRequest>,std::string const&,std::string const&,LazuliMessageEncodingMap *,void>(uint64_t *a1, __int128 *a2, __int128 *a3, uint64_t a4)
{
  _QWORD *v8;
  uint64_t result;

  v8 = operator new(0xB0uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_1E78C7F08;
  result = LazuliRequest::LazuliRequest((uint64_t)(v8 + 3), a2, a3, a4);
  *a1 = result;
  a1[1] = (uint64_t)v8;
  return result;
}

void sub_1BEF2B198(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliRequest>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7F08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliRequest>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7F08;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliRequest>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<LazuliToPathHeader,std::allocator<LazuliToPathHeader>,LazuliRouteSet &,void>(_QWORD *a1, const LazuliRouteSet *a2)
{
  _QWORD *v4;

  v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C8078;
  LazuliToPathHeader::LazuliToPathHeader((LazuliToPathHeader *)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1BEF2B264(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliToPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C8078;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliToPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C8078;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliToPathHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<LazuliFromPathHeader,std::allocator<LazuliFromPathHeader>,LazuliRouteSet &,void>(_QWORD *a1, const LazuliRouteSet *a2)
{
  _QWORD *v4;

  v4 = operator new(0x88uLL);
  v4[1] = 0;
  v4[2] = 0;
  *v4 = &off_1E78C7EB8;
  LazuliFromPathHeader::LazuliFromPathHeader((LazuliFromPathHeader *)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, v4 + 4, (uint64_t)(v4 + 3));
}

void sub_1BEF2B330(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7EB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliFromPathHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7EB8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliFromPathHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<LazuliMessageIdHeader,std::allocator<LazuliMessageIdHeader>,std::string const&,void>(_QWORD *a1, const std::string *a2)
{
  std::string *v4;

  v4 = (std::string *)operator new(0x70uLL);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78C7FC0;
  LazuliStringHeader::LazuliStringHeader(v4 + 1, (const std::string *)"Message-ID", a2);
  v4[1].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78DA690;
  v4[4].__r_.__value_.__s.__data_[8] = 1;
  *a1 = v4 + 1;
  a1[1] = v4;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, &v4[1].__r_.__value_.__l.__size_, (uint64_t)&v4[1]);
}

void sub_1BEF2B418(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7FC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliMessageIdHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7FC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliMessageIdHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::allocate_shared[abi:ne180100]<LazuliByteRangeHeader,std::allocator<LazuliByteRangeHeader>,unsigned int &,unsigned int &,unsigned int &,void>(_QWORD *a1, int a2, int a3, int a4)
{
  std::string *v8;

  v8 = (std::string *)operator new(0x58uLL);
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BE7F0;
  LazuliHeader::LazuliHeader(v8 + 1, (const std::string *)"Byte-Range");
  v8[1].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78BE778;
  HIDWORD(v8[3].__r_.__value_.__r.__words[0]) = a2;
  LODWORD(v8[3].__r_.__value_.__r.__words[1]) = a3;
  HIDWORD(v8[3].__r_.__value_.__r.__words[1]) = a4;
  *a1 = v8 + 1;
  a1[1] = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a1, &v8[1].__r_.__value_.__l.__size_, (uint64_t)&v8[1]);
}

void sub_1BEF2B50C(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7E68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliContentTypeHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7E68;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliContentTypeHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<LazuliStatusHeader>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C8028;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliStatusHeader>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C8028;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliStatusHeader>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void std::__shared_ptr_emplace<LazuliResponse>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7F58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<LazuliResponse>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C7F58;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<LazuliResponse>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::IncomingMessage>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::IncomingMessage>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  __int128 *v16;
  _QWORD *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  uint64_t v43;

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v16 = *a3;
  v17 = (_QWORD *)(a1 + 16);
  v43 = 0;
  v18 = (char *)operator new(0x68uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v8;
  v19 = (std::string *)(v18 + 16);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v20 = *v16;
    *((_QWORD *)v18 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  LOBYTE(v43) = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v17;
          if (*v17)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v17;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v17;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9)
        v39 %= v9;
    }
    else
    {
      v39 &= v9 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1BEF2BA80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::IncomingMessage>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::IncomingMessage>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

std::regex_traits<char> *__cdecl std::regex_traits<char>::regex_traits(std::regex_traits<char> *this)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x1C3B87040]();
  this->__ct_ = (const std::ctype<char> *)std::locale::use_facet(v2, MEMORY[0x1E0DE4A90]);
  this->__col_ = (const std::collate<char> *)std::locale::use_facet(&this->__loc_, MEMORY[0x1E0DE4C08]);
  return this;
}

void sub_1BEF2BB24(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(uint64_t a1, char *a2, char *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__owns_one_state<char> *v12;
  unsigned int v13;
  char *v14;
  char *v15;
  char *v17;
  char *v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  char *v23;
  std::__owns_one_state<char> *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  std::__owns_one_state<char> *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;

  v6 = (_QWORD *)operator new();
  *v6 = &off_1E78C75B8;
  v7 = (_QWORD *)operator new();
  v7[1] = v6;
  v8 = (_QWORD *)operator new();
  *v8 = &off_1E78C7610;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  v9 = *(std::__shared_weak_count **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = v7;
  *(_QWORD *)(a1 + 48) = v8;
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  v12 = *(std::__owns_one_state<char> **)(a1 + 40);
  *(_QWORD *)(a1 + 56) = v12;
  v13 = *(_DWORD *)(a1 + 24) & 0x1F0;
  if (v13 > 0x3F)
  {
    switch(v13)
    {
      case 0x40u:
        return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
      case 0x80u:
        v17 = (char *)memchr(a2, 10, a3 - a2);
        if (v17)
          v18 = v17;
        else
          v18 = a3;
        if (v18 == a2)
        {
          v28 = (_QWORD *)operator new();
          v29 = *(_QWORD *)(a1 + 56);
          v30 = *(_QWORD *)(v29 + 8);
          v28[1] = v30;
          *(_QWORD *)(v29 + 8) = v28;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, v18);
        }
        if (v18 != a3)
          ++v18;
        while (v18 != a3)
        {
          v31 = (char *)memchr(v18, 10, a3 - v18);
          if (v31)
            v32 = v31;
          else
            v32 = a3;
          v33 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v32 == v18)
          {
            v34 = (_QWORD *)operator new();
            v35 = *(_QWORD *)(a1 + 56);
            v36 = *(_QWORD *)(v35 + 8);
            v34[1] = v36;
            *(_QWORD *)(v35 + 8) = v34;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, v18, v32);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v12, v33);
          if (v32 == a3)
            v18 = v32;
          else
            v18 = v32 + 1;
        }
        break;
      case 0x100u:
        v14 = (char *)memchr(a2, 10, a3 - a2);
        if (v14)
          v15 = v14;
        else
          v15 = a3;
        if (v15 == a2)
        {
          v19 = (_QWORD *)operator new();
          v20 = *(_QWORD *)(a1 + 56);
          v21 = *(_QWORD *)(v20 + 8);
          v19[1] = v21;
          *(_QWORD *)(v20 + 8) = v19;
          *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, v15);
        }
        if (v15 != a3)
          ++v15;
        while (v15 != a3)
        {
          v22 = (char *)memchr(v15, 10, a3 - v15);
          if (v22)
            v23 = v22;
          else
            v23 = a3;
          v24 = *(std::__owns_one_state<char> **)(a1 + 56);
          if (v23 == v15)
          {
            v25 = (_QWORD *)operator new();
            v26 = *(_QWORD *)(a1 + 56);
            v27 = *(_QWORD *)(v26 + 8);
            v25[1] = v27;
            *(_QWORD *)(v26 + 8) = v25;
            *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, v15, v23);
          }
          std::basic_regex<char,std::regex_traits<char>>::__push_alternation((std::basic_regex<char> *)a1, v12, v24);
          if (v23 == a3)
            v15 = v23;
          else
            v15 = v23 + 1;
        }
        break;
      default:
        goto LABEL_54;
    }
    return a3;
  }
  else if (v13)
  {
    if (v13 != 16)
    {
      if (v13 != 32)
LABEL_54:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>();
      return std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>((std::basic_regex<char> *)a1, a2, a3);
    }
    return std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(a1, a2, a3);
  }
  else
  {
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)a2, a3);
  }
}

void sub_1BEF2BEE4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)17>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 17);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2BF50(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__node<char> *v9;
  std::__owns_one_state<char> *v10;
  std::__node<char> *first;
  std::__owns_one_state<char> *v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  std::__node<char> *v15;
  std::__owns_one_state<char> *v16;
  std::__node<char> *v17;

  end = a1->__end_;
  v7 = a2;
  do
  {
    v8 = v7;
    v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v7, a3);
  }
  while (v7 != v8);
  if (v8 == a2)
  {
    v9 = (std::__node<char> *)operator new();
    v10 = a1->__end_;
    first = v10->__first_;
    v9[1].__vftable = (std::__node<char>_vtbl *)first;
    v10->__first_ = v9;
    a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
  }
  while (v8 != (unsigned __int8 *)a3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v12 = a1->__end_;
    v13 = v8 + 1;
    v14 = v8 + 1;
    do
    {
      v8 = v14;
      v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(a1, v14, a3);
    }
    while (v14 != v8);
    if (v8 == v13)
    {
      v15 = (std::__node<char> *)operator new();
      v16 = a1->__end_;
      v17 = v16->__first_;
      v15[1].__vftable = (std::__node<char>_vtbl *)v17;
      v16->__first_ = v15;
      a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
    }
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v12);
  }
  return a3;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_basic_reg_exp<char const*>(uint64_t a1, char *a2, char *a3)
{
  char *v3;
  char *v4;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;

  v3 = a2;
  if (a2 == a3)
    return a2;
  v4 = a3;
  if (*a2 == 94)
  {
    v6 = operator new();
    v7 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
    v8 = *(_QWORD *)(a1 + 56);
    v9 = *(_QWORD *)(v8 + 8);
    *(_QWORD *)v6 = &off_1E78C7730;
    *(_QWORD *)(v6 + 8) = v9;
    *(_BYTE *)(v6 + 16) = v7;
    *(_QWORD *)(v8 + 8) = v6;
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    ++v3;
  }
  if (v3 != v4)
  {
    do
    {
      v10 = v3;
      v3 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>((std::basic_regex<char> *)a1, v3, v4);
    }
    while (v3 != v10);
    if (v10 != v4)
    {
      if (v10 + 1 != v4 || *v10 != 36)
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
      v11 = operator new();
      v12 = (*(_DWORD *)(a1 + 24) & 0x5F0) == 1024;
      v13 = *(_QWORD *)(a1 + 56);
      v14 = *(_QWORD *)(v13 + 8);
      *(_QWORD *)v11 = &off_1E78C7778;
      *(_QWORD *)(v11 + 8) = v14;
      *(_BYTE *)(v11 + 16) = v12;
      *(_QWORD *)(v13 + 8) = v11;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    }
  }
  return v4;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  std::__owns_one_state<char> *v9;
  unsigned __int8 *v10;

  v3 = a3;
  end = a1->__end_;
  v7 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, a2, a3);
  if (v7 == (unsigned __int8 *)a2)
LABEL_9:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  v8 = v7;
  while (v8 != (unsigned __int8 *)v3)
  {
    if (*v8 != 124)
      return (char *)v8;
    v9 = a1->__end_;
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(a1, (char *)v8 + 1, v3);
    if (v10 == v8 + 1)
      goto LABEL_9;
    v8 = v10;
    std::basic_regex<char,std::regex_traits<char>>::__push_alternation(a1, end, v9);
  }
  return v3;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)14>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 14);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2C2BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__end_state<char>::~__end_state()
{
  JUMPOUT(0x1C3B87100);
}

void std::__end_state<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t std::__shared_ptr_pointer<std::__empty_state<char> *,std::shared_ptr<std::__empty_state<char>>::__shared_ptr_default_delete<std::__empty_state<char>,std::__empty_state<char>>,std::allocator<std::__empty_state<char>>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void (__cdecl ***std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__empty_state<char>::~__empty_state(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

void std::__empty_state<char>::__exec(const std::__empty_state<char> *this, std::__empty_state<char>::__state *a2)
{
  a2->__do_ = -994;
  a2->__node_ = this->__first_;
}

void std::__owns_one_state<char>::~__owns_one_state(std::__owns_one_state<char> *this)
{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
}

{
  std::__node<char> *first;

  first = this->__first_;
  if (first)
    ((void (*)(std::__node<char> *))first->~__node_0)(first);
  JUMPOUT(0x1C3B87100);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_alternation(std::basic_regex<char> *this, std::__owns_one_state<char> *__sa, std::__owns_one_state<char> *__sb)
{
  std::__node<char> *v6;
  std::__node<char> *first;
  std::__node<char> *v8;
  std::__node<char> *v9;
  std::__node<char> *v10;
  std::__node<char> *v11;

  v6 = (std::__node<char> *)operator new();
  first = __sb->__first_;
  v6[1].__vftable = (std::__node<char>_vtbl *)__sa->__first_;
  v6[2].__vftable = (std::__node<char>_vtbl *)first;
  v6->__vftable = (std::__node<char>_vtbl *)&off_1E78C7BF8;
  __sa->__first_ = v6;
  __sb->__first_ = 0;
  v8 = (std::__node<char> *)operator new();
  v9 = this->__end_->__first_;
  v8[1].__vftable = (std::__node<char>_vtbl *)v9;
  __sb->__first_ = v8;
  this->__end_->__first_ = 0;
  v10 = (std::__node<char> *)operator new();
  v11 = __sb->__first_;
  v10->__vftable = (std::__node<char>_vtbl *)&off_1E78C7C40;
  v10[1].__vftable = (std::__node<char>_vtbl *)v11;
  this->__end_->__first_ = v10;
  this->__end_ = (std::__owns_one_state<char> *)__sb->__first_;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_term<char const*>(std::basic_regex<char> *this, unsigned __int8 *a2, char *a3)
{
  int v6;
  int v7;
  char *v8;
  BOOL v9;
  char *v10;
  int v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  BOOL v16;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t (**v19)();
  unsigned __int8 *result;
  int v21;
  BOOL v22;
  unsigned int marked_count;
  std::__owns_one_state<char> *v24;
  unsigned int v25;
  int *p_open_count;
  char *v27;
  char *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  int v32;
  unsigned int v33;
  std::__node<char> *v34;
  std::__owns_one_state<char> *v35;
  std::__node<char> *v36;
  unsigned int v37;
  char *v38;
  int v39;
  std::basic_regex<char> *v40;
  BOOL v41;
  std::basic_regex<char> *v42;
  BOOL v43;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  int v45;
  std::__bracket_expression<char, std::regex_traits<char>> *v46;
  unsigned __int8 *v47;
  std::basic_regex<char> *v48;
  BOOL v49;
  std::basic_regex<char> v50;

  if (a2 == (unsigned __int8 *)a3)
    return a2;
  v6 = (char)*a2;
  v7 = *a2;
  if (v6 > 91)
  {
    if (v6 == 92)
    {
      if (a2 + 1 == (unsigned __int8 *)a3)
        goto LABEL_32;
      v21 = a2[1];
      if (v21 == 66)
      {
        v22 = 1;
      }
      else
      {
        if (v21 != 98)
          goto LABEL_32;
        v22 = 0;
      }
      std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(this, v22);
      return a2 + 2;
    }
    if (v6 != 94)
      goto LABEL_32;
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_1E78C7730;
LABEL_21:
    *(_QWORD *)v15 = v19;
    *(_QWORD *)(v15 + 8) = first;
    *(_BYTE *)(v15 + 16) = v16;
    end->__first_ = (std::__node<char> *)v15;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
    return a2 + 1;
  }
  if (v6 == 36)
  {
    v15 = operator new();
    v16 = (this->__flags_ & 0x5F0) == 1024;
    end = this->__end_;
    first = end->__first_;
    v19 = &off_1E78C7778;
    goto LABEL_21;
  }
  v9 = v6 == 40;
  v8 = (char *)(a2 + 1);
  v9 = !v9 || v8 == a3;
  if (!v9)
  {
    v9 = *v8 == 63;
    v10 = (char *)(a2 + 2);
    if (v9 && v10 != a3)
    {
      v12 = *v10;
      if (v12 == 33)
      {
        memset(&v50, 0, sizeof(v50));
        std::regex_traits<char>::regex_traits(&v50.__traits_);
        memset(&v50.__flags_, 0, 40);
        v50.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v50, a2 + 3, a3);
        marked_count = v50.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v50, 1, this->__marked_count_);
        this->__marked_count_ += marked_count;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      else
      {
        if (v12 != 61)
          goto LABEL_32;
        memset(&v50, 0, sizeof(v50));
        std::regex_traits<char>::regex_traits(&v50.__traits_);
        memset(&v50.__flags_, 0, 40);
        v50.__flags_ = this->__flags_;
        v13 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse<char const*>(&v50, a2 + 3, a3);
        v14 = v50.__marked_count_;
        std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(this, &v50, 0, this->__marked_count_);
        this->__marked_count_ += v14;
        if (v13 == a3 || *v13 != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      }
      std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&v50.__start_);
      std::locale::~locale(&v50.__traits_.__loc_);
      result = (unsigned __int8 *)(v13 + 1);
      if (v13 + 1 != (char *)a2)
        return result;
      v7 = *a2;
    }
  }
LABEL_32:
  v24 = this->__end_;
  v25 = this->__marked_count_;
  if ((char)v7 <= 91)
  {
    result = a2;
    switch((char)v7)
    {
      case '$':
      case ')':
        return result;
      case '%':
      case '&':
      case '\'':
      case ',':
      case '-':
        goto LABEL_60;
      case '(':
        if (a2 + 1 == (unsigned __int8 *)a3)
          goto LABEL_98;
        if (a2 + 2 != (unsigned __int8 *)a3 && a2[1] == 63 && a2[2] == 58)
        {
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 3, a3);
          if (v27 == a3)
            goto LABEL_98;
          v28 = v27;
          if (*v27 != 41)
            goto LABEL_98;
        }
        else
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
          v37 = this->__marked_count_;
          p_open_count = &this->__open_count_;
          ++this->__open_count_;
          v38 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_ecma_exp<char const*>(this, a2 + 1, a3);
          if (v38 == a3 || (v28 = v38, *v38 != 41))
LABEL_98:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
          std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v37);
        }
        --*p_open_count;
        v30 = (unsigned __int8 *)(v28 + 1);
        goto LABEL_57;
      case '*':
      case '+':
        goto LABEL_64;
      case '.':
        v34 = (std::__node<char> *)operator new();
        v35 = this->__end_;
        v36 = v35->__first_;
        v34->__vftable = (std::__node<char>_vtbl *)&off_1E78C7850;
        v34[1].__vftable = (std::__node<char>_vtbl *)v36;
        v35->__first_ = v34;
        this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
        goto LABEL_61;
      default:
        if ((char)v7 == 91)
        {
          v30 = (unsigned __int8 *)std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, (char *)a2, a3);
          goto LABEL_57;
        }
        if ((char)v7 != 63)
          goto LABEL_60;
        goto LABEL_64;
    }
  }
  v29 = ((char)v7 - 92);
  if (v29 > 0x21)
  {
LABEL_60:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v7);
LABEL_61:
    v30 = a2 + 1;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if (((1 << (v7 - 92)) & 0x300000006) != 0)
    return a2;
  if ((char)v7 != 92)
  {
    if (v29 == 31)
LABEL_64:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>();
    goto LABEL_60;
  }
  if (v7 != 92)
    return a2;
  v31 = a2 + 1;
  if (a2 + 1 == (unsigned __int8 *)a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v32 = *v31;
  v33 = v32 - 48;
  if (v32 == 48)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v33);
LABEL_97:
    v30 = a2 + 2;
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  }
  if ((v32 - 49) > 8)
  {
LABEL_77:
    if ((char)v32 > 99)
    {
      if ((char)v32 == 119)
      {
        v40 = this;
        v41 = 0;
        goto LABEL_89;
      }
      if ((char)v32 == 115)
      {
        v48 = this;
        v49 = 0;
LABEL_95:
        started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v48, v49);
        v45 = started->__mask_ | 0x4000;
        goto LABEL_96;
      }
      if ((char)v32 != 100)
      {
LABEL_90:
        v47 = std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(this, a2 + 1, (unsigned __int8 *)a3, 0);
        if (v47 == v31)
          v30 = a2;
        else
          v30 = v47;
        goto LABEL_57;
      }
      v42 = this;
      v43 = 0;
    }
    else
    {
      if ((char)v32 != 68)
      {
        if ((char)v32 != 83)
        {
          if ((char)v32 == 87)
          {
            v40 = this;
            v41 = 1;
LABEL_89:
            v46 = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v40, v41);
            v46->__mask_ |= 0x500u;
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)v46, 95);
            goto LABEL_97;
          }
          goto LABEL_90;
        }
        v48 = this;
        v49 = 1;
        goto LABEL_95;
      }
      v42 = this;
      v43 = 1;
    }
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(v42, v43);
    v45 = started->__mask_ | 0x400;
LABEL_96:
    started->__mask_ = v45;
    goto LABEL_97;
  }
  v30 = a2 + 2;
  if (a2 + 2 == (unsigned __int8 *)a3)
  {
    v30 = (unsigned __int8 *)a3;
  }
  else
  {
    while (1)
    {
      v39 = *v30;
      if ((v39 - 48) > 9)
        break;
      if (v33 >= 0x19999999)
        goto LABEL_99;
      ++v30;
      v33 = v39 + 10 * v33 - 48;
      if (v30 == (unsigned __int8 *)a3)
      {
        v30 = (unsigned __int8 *)a3;
        break;
      }
    }
    if (!v33)
LABEL_99:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  }
  if (v33 > v25)
    goto LABEL_99;
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, v33);
  if (v30 == v31)
  {
    LOBYTE(v32) = *v31;
    goto LABEL_77;
  }
LABEL_57:
  result = a2;
  if (v30 != a2)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v30, (unsigned __int8 *)a3, v24, v25 + 1, this->__marked_count_ + 1);
  return result;
}

void sub_1BEF2CBC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a14);
  std::locale::~locale(&a9);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, std::__owns_one_state<char> *__s, size_t a5, size_t a6)
{
  unsigned int v6;
  unsigned int v7;
  uint64_t v10;
  int v11;
  int v12;
  unsigned __int8 *v13;
  size_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  int v17;
  size_t v18;
  BOOL v19;
  BOOL v20;
  std::__owns_one_state<char> *v21;
  BOOL v22;
  unsigned __int8 *v23;
  unsigned __int8 *v25;
  int v26;
  int v27;
  size_t __max;

  if (a2 == a3)
    return a2;
  v6 = a6;
  v7 = a5;
  v10 = a1;
  v11 = *(_DWORD *)(a1 + 24) & 0x1F0;
  v12 = (char)*a2;
  if (v12 > 62)
  {
    if (v12 == 63)
    {
      v13 = a2 + 1;
      if (v11)
        v20 = 1;
      else
        v20 = v13 == a3;
      if (!v20 && *v13 == 63)
      {
        v13 = a2 + 2;
        a5 = a5;
        a6 = a6;
        v14 = 0;
        v18 = 1;
        goto LABEL_33;
      }
      a5 = a5;
      a6 = a6;
      v14 = 0;
      v18 = 1;
      goto LABEL_45;
    }
    if (v12 != 123)
      return a2;
    LODWORD(__max) = 0;
    v15 = a2 + 1;
    v16 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(a2 + 1, a3, (int *)&__max);
    if (v16 != v15)
    {
      if (v16 != a3)
      {
        v17 = (char)*v16;
        if (v17 != 44)
        {
          if (v17 == 125)
          {
            v13 = v16 + 1;
            if (!v11 && v13 != a3 && *v13 == 63)
            {
              v13 = v16 + 2;
              v14 = (int)__max;
              a5 = v7;
              a6 = v6;
              a1 = v10;
              v18 = (int)__max;
LABEL_33:
              v21 = __s;
              v22 = 0;
LABEL_46:
              std::basic_regex<char,std::regex_traits<char>>::__push_loop((std::basic_regex<char> *)a1, v14, v18, v21, a5, a6, v22);
              return v13;
            }
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v18 = (int)__max;
LABEL_45:
            v21 = __s;
            v22 = 1;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
        v23 = v16 + 1;
        if (v16 + 1 == a3)
          goto LABEL_58;
        if (*v23 == 125)
        {
          v13 = v16 + 2;
          if (!v11 && v13 != a3 && *v13 == 63)
          {
            v13 = v16 + 3;
            v14 = (int)__max;
            a5 = v7;
            a6 = v6;
            a1 = v10;
            goto LABEL_26;
          }
          v14 = (int)__max;
          a5 = v7;
          a6 = v6;
          a1 = v10;
LABEL_36:
          v18 = -1;
          goto LABEL_45;
        }
        v27 = -1;
        v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v16 + 1, a3, &v27);
        if (v25 != v23 && v25 != a3 && *v25 == 125)
        {
          v18 = v27;
          v14 = (int)__max;
          if (v27 >= (int)__max)
          {
            v13 = v25 + 1;
            v22 = 1;
            if (!v11 && v13 != a3)
            {
              v26 = v25[1];
              v22 = v26 != 63;
              if (v26 == 63)
                v13 = v25 + 2;
            }
            a5 = v7;
            a6 = v6;
            a1 = v10;
            v21 = __s;
            goto LABEL_46;
          }
          goto LABEL_58;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
LABEL_58:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
  }
  if (v12 == 42)
  {
    v13 = a2 + 1;
    if (v11)
      v19 = 1;
    else
      v19 = v13 == a3;
    if (!v19 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 0;
      goto LABEL_26;
    }
    a5 = a5;
    a6 = a6;
    v14 = 0;
    goto LABEL_36;
  }
  if (v12 == 43)
  {
    v13 = a2 + 1;
    if (!v11 && v13 != a3 && *v13 == 63)
    {
      v13 = a2 + 2;
      a5 = a5;
      a6 = a6;
      v14 = 1;
LABEL_26:
      v18 = -1;
      goto LABEL_33;
    }
    a5 = a5;
    a6 = a6;
    v14 = 1;
    goto LABEL_36;
  }
  return a2;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_word_boundary(std::basic_regex<char> *this, BOOL a2)
{
  uint64_t v4;
  std::__node<char> *first;

  v4 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v4 = &off_1E78C77C0;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_BYTE *)(v4 + 40) = a2;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_lookahead(std::basic_regex<char> *this, const std::basic_regex<char> *a2, BOOL a3, unsigned int a4)
{
  uint64_t v8;
  std::__node<char> *first;
  std::__shared_weak_count *cntrl;
  unint64_t *p_shared_owners;
  unint64_t v12;

  v8 = operator new();
  first = this->__end_->__first_;
  *(_QWORD *)v8 = &off_1E78C7808;
  *(_QWORD *)(v8 + 8) = first;
  std::locale::locale((std::locale *)(v8 + 16), &a2->__traits_.__loc_);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)&a2->__traits_.__ct_;
  *(_OWORD *)(v8 + 40) = *(_OWORD *)&a2->__flags_;
  cntrl = a2->__start_.__cntrl_;
  *(_QWORD *)(v8 + 56) = a2->__start_.__ptr_;
  *(_QWORD *)(v8 + 64) = cntrl;
  if (cntrl)
  {
    p_shared_owners = (unint64_t *)&cntrl->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
  }
  *(_QWORD *)(v8 + 72) = a2->__end_;
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  this->__end_->__first_ = (std::__node<char> *)v8;
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 6);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2D064(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__l_anchor_multiline<char>::~__l_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__l_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v4;

  if (*(_BYTE *)(a2 + 92))
  {
    if (*(_QWORD *)(a2 + 16) != *(_QWORD *)(a2 + 8) || (*(_BYTE *)(a2 + 88) & 1) != 0)
    {
LABEL_12:
      v4 = 0;
      *(_DWORD *)a2 = -993;
      goto LABEL_13;
    }
  }
  else
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
  }
  *(_DWORD *)a2 = -994;
  v4 = *(_QWORD *)(result + 8);
LABEL_13:
  *(_QWORD *)(a2 + 80) = v4;
  return result;
}

void (__cdecl ***std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__r_anchor_multiline<char>::~__r_anchor_multiline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__r_anchor_multiline<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    v5 = *(_QWORD *)(result + 8);
  }
  else
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C77C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__word_boundary<char,std::regex_traits<char>>::~__word_boundary(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C77C0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__word_boundary<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  int v11;
  uint64_t v12;
  int v13;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_17;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 == v3)
  {
    if ((*(_BYTE *)(a2 + 88) & 8) == 0)
    {
      v6 = *(v3 - 1);
      goto LABEL_13;
    }
LABEL_17:
    v10 = 0;
    goto LABEL_25;
  }
  if (v4 == v2)
  {
    v5 = *(_DWORD *)(a2 + 88);
    if ((v5 & 0x80) == 0)
    {
      if ((v5 & 4) == 0)
      {
        v6 = *v2;
LABEL_13:
        if (v6 == 95
          || (v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
        {
          v10 = 1;
          goto LABEL_25;
        }
        goto LABEL_17;
      }
      goto LABEL_17;
    }
  }
  v7 = *(v4 - 1);
  v8 = *v4;
  v9 = v7 == 95 || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0;
  v11 = (_DWORD)v8 == 95
     || (v8 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) != 0;
  v10 = v9 != v11;
LABEL_25:
  if (*(unsigned __int8 *)(result + 40) == v10)
  {
    v12 = 0;
    v13 = -993;
  }
  else
  {
    v12 = *(_QWORD *)(result + 8);
    v13 = -994;
  }
  *(_DWORD *)a2 = v13;
  *(_QWORD *)(a2 + 80) = v12;
  return result;
}

void (__cdecl ***std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7808;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__lookahead<char,std::regex_traits<char>>::~__lookahead(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  std::locale *v2;
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7808;
  v2 = (std::locale *)(a1 + 2);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(a1 + 7));
  std::locale::~locale(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B87100);
}

void std::__lookahead<char,std::regex_traits<char>>::__exec(uint64_t a1, uint64_t a2)
{
  std::vector<std::csub_match>::size_type v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  char v8;
  char *v9;
  unint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  void *__p[2];
  _OWORD v18[2];
  __int128 v19;
  _OWORD v20[2];
  __int128 v21;

  v21 = 0u;
  v19 = 0u;
  memset(v20, 0, sizeof(v20));
  memset(v18, 0, sizeof(v18));
  *(_OWORD *)__p = 0u;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v5 = *(_QWORD *)(a2 + 16);
  *((_QWORD *)&v18[0] + 1) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)&v18[1] = *((_QWORD *)&v18[0] + 1);
  std::vector<std::sub_match<char const*>>::assign((std::vector<std::csub_match> *)__p, v4, (std::vector<std::csub_match>::const_reference)((char *)v18 + 8));
  *(_QWORD *)&v19 = v5;
  *((_QWORD *)&v19 + 1) = v5;
  LOBYTE(v20[0]) = 0;
  *(_OWORD *)((char *)v20 + 8) = *(_OWORD *)((char *)v18 + 8);
  BYTE8(v20[1]) = BYTE8(v18[1]);
  *((_QWORD *)&v21 + 1) = v5;
  LOBYTE(v21) = 1;
  v6 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v7 = v6 == *(_QWORD *)(a2 + 8);
  else
    v7 = 0;
  v8 = v7;
  if (*(unsigned __int8 *)(a1 + 84) == std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1 + 16, v6, *(const char **)(a2 + 24), (uint64_t *)__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v8))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v9 = (char *)__p[0];
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v9 = (char *)__p[0];
  v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
  if (v10 < 2)
  {
LABEL_13:
    if (!v9)
      return;
    goto LABEL_14;
  }
  v11 = 0;
  v12 = *(_DWORD *)(a1 + 80);
  v13 = *(_QWORD *)(a2 + 32);
  v14 = 1;
  do
  {
    v15 = &v9[24 * v14];
    v16 = v13 + 24 * (v12 + v11);
    *(_OWORD *)v16 = *(_OWORD *)v15;
    *(_BYTE *)(v16 + 16) = v15[16];
    v14 = (v11 + 2);
    ++v11;
  }
  while (v10 > v14);
LABEL_14:
  operator delete(v9);
}

void sub_1BEF2D640(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  _OWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  unsigned int v32;
  uint64_t v33;
  char v34;
  uint64_t *v36;
  _OWORD v38[6];
  std::vector<std::csub_match>::value_type __x;
  int64x2_t v40;
  unint64_t v41;

  v40 = 0uLL;
  v41 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    __x.second = a3;
    *(_QWORD *)&__x.matched = 0;
    __x.first = a3;
    LODWORD(v38[0]) = 0;
    memset((char *)v38 + 8, 0, 80);
    *(_QWORD *)((char *)&v38[5] + 5) = 0;
    v40.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v40, (uint64_t)v38);
    if (*((_QWORD *)&v38[3] + 1))
      operator delete(*((void **)&v38[3] + 1));
    if (*(_QWORD *)&v38[2])
      operator delete(*(void **)&v38[2]);
    v36 = a4;
    v12 = v40.i64[1];
    *(_DWORD *)(v40.i64[1] - 96) = 0;
    *(_QWORD *)(v12 - 88) = a2;
    *(_QWORD *)(v12 - 80) = a2;
    *(_QWORD *)(v12 - 72) = a3;
    std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v12 - 64), *(unsigned int *)(a1 + 28), &__x);
    std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v40.i64[1] - 40), *(unsigned int *)(a1 + 32));
    v13 = v40.i64[1];
    *(_QWORD *)(v40.i64[1] - 16) = v6;
    *(_DWORD *)(v13 - 8) = a5;
    *(_BYTE *)(v13 - 4) = a6;
    v14 = 1;
    while (2)
    {
      if ((v14 & 0xFFF) != 0 || (int)(v14 >> 12) < (int)a3 - (int)a2)
      {
        v16 = (_QWORD *)(v13 - 16);
        v15 = *(_QWORD *)(v13 - 16);
        v17 = (_OWORD *)(v13 - 96);
        if (v15)
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 16))(v15, v13 - 96);
        switch(*(_DWORD *)v17)
        {
          case 0xFFFFFC18:
            v18 = *(_QWORD *)(v13 - 80);
            if ((a5 & 0x20) != 0 && v18 == a2)
              goto LABEL_14;
            v27 = *v36;
            *(_QWORD *)v27 = a2;
            *(_QWORD *)(v27 + 8) = v18;
            *(_BYTE *)(v27 + 16) = 1;
            v28 = *(_QWORD *)(v13 - 64);
            v29 = *(_QWORD *)(v13 - 56) - v28;
            if (v29)
            {
              v30 = 0xAAAAAAAAAAAAAAABLL * (v29 >> 3);
              v31 = (_BYTE *)(v28 + 16);
              v32 = 1;
              do
              {
                v33 = v27 + 24 * v32;
                *(_OWORD *)v33 = *((_OWORD *)v31 - 1);
                v34 = *v31;
                v31 += 24;
                *(_BYTE *)(v33 + 16) = v34;
              }
              while (v30 > v32++);
            }
            v25 = 1;
            goto LABEL_23;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_21;
          case 0xFFFFFC1F:
LABEL_14:
            v19 = v40.i64[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(v40.i64[1] - 96));
            v40.i64[1] = v19;
            goto LABEL_21;
          case 0xFFFFFC20:
            memset(v38, 0, sizeof(v38));
            v20 = *(_OWORD *)(v13 - 80);
            v38[0] = *v17;
            v38[1] = v20;
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char *)&v38[2], *(__int128 **)(v13 - 64), *(__int128 **)(v13 - 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v13 - 56) - *(_QWORD *)(v13 - 64)) >> 3));
            memset((char *)&v38[3] + 8, 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v38[3] + 8, *(__int128 **)(v13 - 40), *(__int128 **)(v13 - 32), (uint64_t)(*(_QWORD *)(v13 - 32) - *(_QWORD *)(v13 - 40)) >> 4);
            v21 = *v16;
            *(_QWORD *)((char *)&v38[5] + 5) = *(_QWORD *)(v13 - 11);
            *(_QWORD *)&v38[5] = v21;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v16 + 24))(*v16, 1, v13 - 96);
            (*(void (**)(_QWORD, _QWORD, _OWORD *))(**(_QWORD **)&v38[5] + 24))(*(_QWORD *)&v38[5], 0, v38);
            v22 = v40.i64[1];
            if (v40.i64[1] >= v41)
            {
              v40.i64[1] = (uint64_t)std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(&v40, (uint64_t)v38);
              if (*((_QWORD *)&v38[3] + 1))
              {
                *(_QWORD *)&v38[4] = *((_QWORD *)&v38[3] + 1);
                operator delete(*((void **)&v38[3] + 1));
              }
            }
            else
            {
              v23 = v38[1];
              *(_OWORD *)v40.i64[1] = v38[0];
              *(_OWORD *)(v22 + 16) = v23;
              *(_QWORD *)(v22 + 32) = 0;
              *(_QWORD *)(v22 + 40) = 0;
              *(_QWORD *)(v22 + 48) = 0;
              *(_QWORD *)(v22 + 56) = 0;
              *(_OWORD *)(v22 + 32) = v38[2];
              *(_QWORD *)(v22 + 48) = *(_QWORD *)&v38[3];
              memset(&v38[2], 0, 24);
              *(_QWORD *)(v22 + 64) = 0;
              *(_QWORD *)(v22 + 72) = 0;
              *(_OWORD *)(v22 + 56) = *(_OWORD *)((char *)&v38[3] + 8);
              *(_QWORD *)(v22 + 72) = *((_QWORD *)&v38[4] + 1);
              memset((char *)&v38[3] + 8, 0, 24);
              v24 = *(_QWORD *)&v38[5];
              *(_QWORD *)(v22 + 85) = *(_QWORD *)((char *)&v38[5] + 5);
              *(_QWORD *)(v22 + 80) = v24;
              v40.i64[1] = v22 + 96;
            }
            if (*(_QWORD *)&v38[2])
            {
              *((_QWORD *)&v38[2] + 1) = *(_QWORD *)&v38[2];
              operator delete(*(void **)&v38[2]);
            }
LABEL_21:
            v13 = v40.i64[1];
            ++v14;
            if (v40.i64[0] == v40.i64[1])
              goto LABEL_22;
            continue;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
      }
      break;
    }
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
  }
LABEL_22:
  v25 = 0;
LABEL_23:
  *(_QWORD *)&v38[0] = &v40;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v38);
  return v25;
}

void sub_1BEF2D9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  uint64_t v16;

  std::__state<char>::~__state(&a11);
  a11 = v16 - 112;
  std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
  _Unwind_Resume(a1);
}

void std::vector<std::sub_match<char const*>>::assign(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __n, std::vector<std::csub_match>::const_reference __u)
{
  std::sub_match<const char *> *value;
  std::sub_match<const char *> *begin;
  unint64_t v8;
  std::vector<std::csub_match>::size_type v9;
  unint64_t v10;
  std::vector<std::csub_match>::pointer v11;
  std::sub_match<const char *> *v12;
  std::vector<std::csub_match>::size_type v13;
  std::pair<const char *, const char *> v14;
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::size_type v16;
  std::vector<std::csub_match>::size_type v17;
  std::vector<std::csub_match>::value_type *v18;
  std::sub_match<const char *> *v19;
  std::vector<std::csub_match>::size_type v20;
  std::pair<const char *, const char *> v21;

  value = this->__end_cap_.__value_;
  begin = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= __n)
  {
    end = this->__end_;
    v16 = end - begin;
    if (v16 >= __n)
      v17 = __n;
    else
      v17 = end - begin;
    if (v17)
    {
      v18 = begin;
      do
      {
        *v18++ = *__u;
        --v17;
      }
      while (v17);
    }
    if (__n <= v16)
    {
      this->__end_ = &begin[__n];
    }
    else
    {
      v19 = &end[__n - v16];
      v20 = 24 * __n - 24 * v16;
      do
      {
        v21 = __u->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__u->matched;
        end->std::pair<const char *, const char *> = v21;
        ++end;
        v20 -= 24;
      }
      while (v20);
      this->__end_ = v19;
    }
  }
  else
  {
    if (begin)
    {
      this->__end_ = begin;
      operator delete(begin);
      value = 0;
      this->__begin_ = 0;
      this->__end_ = 0;
      this->__end_cap_.__value_ = 0;
    }
    if (__n > 0xAAAAAAAAAAAAAAALL)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= __n)
      v9 = __n;
    if (v8 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v9;
    std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](this, v10);
    v11 = this->__end_;
    v12 = &v11[__n];
    v13 = 24 * __n;
    do
    {
      v14 = __u->std::pair<const char *, const char *>;
      *(_QWORD *)&v11->matched = *(_QWORD *)&__u->matched;
      v11->std::pair<const char *, const char *> = v14;
      ++v11;
      v13 -= 24;
    }
    while (v13);
    this->__end_ = v12;
  }
}

char *std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >= 0xAAAAAAAAAAAAAABLL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]()
{
  std::__throw_length_error[abi:ne180100]("vector");
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(24 * a1);
}

_QWORD *std::__state<char>::~__state(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void std::vector<std::sub_match<char const*>>::resize(std::vector<std::csub_match> *this, std::vector<std::csub_match>::size_type __sz, std::vector<std::csub_match>::const_reference __x)
{
  std::vector<std::csub_match>::pointer end;
  std::vector<std::csub_match>::pointer begin;
  unint64_t v7;
  unint64_t v8;
  std::sub_match<const char *> *value;
  unint64_t v11;
  std::vector<std::csub_match>::size_type v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  std::sub_match<const char *> *v16;
  std::sub_match<const char *> *v17;
  std::pair<const char *, const char *> *v18;
  std::vector<std::csub_match>::size_type v19;
  std::pair<const char *, const char *> v20;
  std::sub_match<const char *> *v21;
  std::sub_match<const char *> *v22;
  std::vector<std::csub_match>::pointer v23;
  std::pair<const char *, const char *> v24;
  std::sub_match<const char *> *v25;
  std::vector<std::csub_match>::size_type v26;
  std::pair<const char *, const char *> v27;

  begin = this->__begin_;
  end = this->__end_;
  v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)this->__begin_) >> 3);
  v8 = __sz - v7;
  if (__sz <= v7)
  {
    if (__sz < v7)
      this->__end_ = &begin[__sz];
  }
  else
  {
    value = this->__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)end) >> 3) >= v8)
    {
      v25 = &end[v8];
      v26 = 24 * __sz - 8 * (((char *)end - (char *)this->__begin_) >> 3);
      do
      {
        v27 = __x->std::pair<const char *, const char *>;
        *(_QWORD *)&end->matched = *(_QWORD *)&__x->matched;
        end->std::pair<const char *, const char *> = v27;
        ++end;
        v26 -= 24;
      }
      while (v26);
      this->__end_ = v25;
    }
    else
    {
      if (__sz > 0xAAAAAAAAAAAAAAALL)
        std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
      v11 = 0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3);
      v12 = 2 * v11;
      if (2 * v11 <= __sz)
        v12 = __sz;
      if (v11 >= 0x555555555555555)
        v13 = 0xAAAAAAAAAAAAAAALL;
      else
        v13 = v12;
      v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v13);
      v16 = (std::sub_match<const char *> *)&v14[24 * v7];
      v17 = (std::sub_match<const char *> *)&v14[24 * __sz];
      v18 = v16;
      v19 = 24 * __sz - 24 * v7;
      do
      {
        v20 = __x->std::pair<const char *, const char *>;
        v18[1].first = *(const char **)&__x->matched;
        *v18 = v20;
        v18 = (std::pair<const char *, const char *> *)((char *)v18 + 24);
        v19 -= 24;
      }
      while (v19);
      v21 = (std::sub_match<const char *> *)&v14[24 * v15];
      v23 = this->__begin_;
      v22 = this->__end_;
      if (v22 != this->__begin_)
      {
        do
        {
          v24 = v22[-1].std::pair<const char *, const char *>;
          *(_QWORD *)&v16[-1].matched = *(_QWORD *)&v22[-1].matched;
          v16[-1].std::pair<const char *, const char *> = v24;
          --v16;
          --v22;
        }
        while (v22 != v23);
        v22 = this->__begin_;
      }
      this->__begin_ = v16;
      this->__end_ = v17;
      this->__end_cap_.__value_ = v21;
      if (v22)
        operator delete(v22);
    }
  }
}

void std::vector<std::pair<unsigned long,char const*>>::resize(std::vector<std::pair<unsigned long, const char *>> *this, std::vector<std::pair<unsigned long, const char *>>::size_type __sz)
{
  std::vector<std::pair<unsigned long, const char *>>::pointer begin;
  std::vector<std::pair<unsigned long, const char *>>::pointer end;
  std::vector<std::pair<unsigned long, const char *>>::size_type v5;
  std::vector<std::pair<unsigned long, const char *>>::size_type v6;
  std::pair<unsigned long, const char *> *value;
  uint64_t v8;
  std::vector<std::pair<unsigned long, const char *>>::size_type v9;
  unint64_t v10;
  char *v11;
  std::pair<unsigned long, const char *> *v12;
  uint64_t v13;
  std::pair<unsigned long, const char *> *v14;
  std::pair<unsigned long, const char *> *v15;
  std::pair<unsigned long, const char *> *v16;
  std::vector<std::pair<unsigned long, const char *>>::pointer v17;
  std::pair<unsigned long, const char *> *v18;

  begin = this->__begin_;
  end = this->__end_;
  v5 = end - this->__begin_;
  if (__sz <= v5)
  {
    if (__sz >= v5)
      return;
    v18 = &begin[__sz];
    goto LABEL_17;
  }
  v6 = __sz - v5;
  value = this->__end_cap_.__value_;
  if (__sz - v5 <= value - end)
  {
    bzero(this->__end_, 16 * v6);
    v18 = &end[v6];
LABEL_17:
    this->__end_ = v18;
    return;
  }
  if (__sz >> 60)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  v8 = (char *)value - (char *)begin;
  v9 = v8 >> 3;
  if (v8 >> 3 <= __sz)
    v9 = __sz;
  if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
    v10 = 0xFFFFFFFFFFFFFFFLL;
  else
    v10 = v9;
  v11 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v10);
  v12 = (std::pair<unsigned long, const char *> *)&v11[16 * v5];
  v14 = (std::pair<unsigned long, const char *> *)&v11[16 * v13];
  bzero(v12, 16 * v6);
  v15 = &v12[v6];
  v17 = this->__begin_;
  v16 = this->__end_;
  if (v16 != this->__begin_)
  {
    do
    {
      v12[-1] = v16[-1];
      --v12;
      --v16;
    }
    while (v16 != v17);
    v16 = this->__begin_;
  }
  this->__begin_ = v12;
  this->__end_ = v15;
  this->__end_cap_.__value_ = v14;
  if (v16)
    operator delete(v16);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 12);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2DF38(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 16);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2DF84(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>(int64x2_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  uint64_t v24;
  int64x2_t v25;
  char *v26;
  int64x2_t *v27;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 5);
  v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5) > v3)
    v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v3;
  v27 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v2];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v25.i64[1] = (uint64_t)(v9 + 96);
  v26 = v10;
  v15 = a1->i64[0];
  v14 = a1->u64[1];
  if (v14 == a1->i64[0])
  {
    v21 = vdupq_n_s64(v14);
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = v14 + v16;
      v19 = *(_OWORD *)(v14 + v16 - 80);
      *((_OWORD *)v17 - 6) = *(_OWORD *)(v14 + v16 - 96);
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_QWORD *)v17 - 8) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)(v14 + v16 - 64);
      *((_QWORD *)v17 - 6) = *(_QWORD *)(v14 + v16 - 48);
      *(_QWORD *)(v18 - 64) = 0;
      *(_QWORD *)(v18 - 56) = 0;
      *(_QWORD *)(v18 - 48) = 0;
      *((_QWORD *)v17 - 5) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)(v14 + v16 - 40);
      *((_QWORD *)v17 - 3) = *(_QWORD *)(v14 + v16 - 24);
      *(_QWORD *)(v18 - 40) = 0;
      *(_QWORD *)(v18 - 32) = 0;
      *(_QWORD *)(v18 - 24) = 0;
      v20 = *(_QWORD *)(v14 + v16 - 16);
      *(_QWORD *)(v17 - 11) = *(_QWORD *)(v14 + v16 - 11);
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (v14 + v16 != v15);
    v21 = *a1;
    v9 += v16;
    v13 = (char *)v25.i64[1];
    v10 = v26;
  }
  a1->i64[0] = (uint64_t)v9;
  a1->i64[1] = (uint64_t)v13;
  v25 = v21;
  v22 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v10;
  v26 = v22;
  v24 = v21.i64[0];
  std::__split_buffer<std::__state<char>>::~__split_buffer((uint64_t)&v24);
  return v13;
}

void std::__destroy_at[abi:ne180100]<std::__state<char>,0>(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
}

uint64_t std::__split_buffer<std::__state<char>>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

char *std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  uint64_t v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::sub_match<char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = *((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *(_QWORD *)(v7 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v7 = v8;
      v7 += 24;
      a2 = (__int128 *)((char *)a2 + 24);
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BEF2E24C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>(char *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  char *v6;
  _OWORD *v7;
  __int128 v8;

  if (a4)
  {
    v6 = result;
    result = std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](result, a4);
    v7 = (_OWORD *)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2++;
      *v7++ = v8;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

void sub_1BEF2E2BC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)v1;
  if (*(_QWORD *)v1)
  {
    *(_QWORD *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<std::pair<unsigned long,char const*>>::__vallocate[abi:ne180100](_QWORD *a1, unint64_t a2)
{
  char *result;
  uint64_t v4;

  if (a2 >> 60)
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 12;
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>(uint64_t a1, char *a2, char *a3)
{
  uint64_t v5;
  std::__bracket_expression<char, std::regex_traits<char>> *started;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  void *v11;
  void *v12;
  int v13;
  char *j;
  unint64_t i;
  int v16;
  char *v17;
  char *v18;
  char *v19;
  int v20;
  uint64_t v21;
  __int128 *v22;
  const char *v23;
  std::regex_traits<char>::char_class_type classname;
  char v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  void **v30;
  uint64_t v31;
  __int128 *v32;
  std::string::value_type *v33;
  std::string::value_type **v34;
  int v35;
  void **v36;
  _BYTE *v37;
  char *v38;
  uint64_t v39;
  std::string::value_type *v40;
  unint64_t v41;
  __int128 v42;
  uint64_t v43;
  __int128 *v44;
  uint64_t v45;
  __int128 *v46;
  BOOL v47;
  void *v48;
  unint64_t v49;
  void **v50;
  char v51;
  void **v52;
  void *v53;
  BOOL v54;
  void *v55;
  unint64_t v56;
  void **v57;
  char v58;
  void **v59;
  void *v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  void *v65;
  void *v66;
  void *v67;
  void **v68;
  char v69;
  void **v70;
  void **v71;
  char v72;
  void **v73;
  void **v75;
  uint64_t v76;
  char *v77;
  void *v78[2];
  uint64_t v79;
  void *v80[2];
  uint64_t v81;
  void *v82[2];
  uint64_t v83;
  void *__p[2];
  uint64_t v85;
  std::string::value_type *__s[2];
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  __int128 v90;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;

  if (a2 != a3 && *a2 == 91)
  {
    if (a2 + 1 == a3)
      goto LABEL_231;
    v5 = (uint64_t)(a2[1] == 94 ? a2 + 2 : a2 + 1);
    started = std::basic_regex<char,std::regex_traits<char>>::__start_matching_list((std::basic_regex<char> *)a1, a2[1] == 94);
    if ((char *)v5 == a3)
      goto LABEL_231;
    v7 = (uint64_t)started;
    if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0 && *(_BYTE *)v5 == 93)
    {
      std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100]((uint64_t)started, 93);
      ++v5;
    }
    if ((char *)v5 == a3)
      goto LABEL_231;
    v75 = (void **)(v7 + 88);
    v76 = v7 + 16;
    v77 = a3 - 4;
    while (1)
    {
      v8 = (char *)v5;
      v9 = a3;
      if ((char *)v5 == a3)
        goto LABEL_140;
      v10 = *(unsigned __int8 *)v5;
      v9 = (char *)v5;
      if (v10 == 93)
        goto LABEL_140;
      v11 = 0;
      __p[0] = 0;
      __p[1] = 0;
      v85 = 0;
      v12 = 0;
      v9 = (char *)v5;
      if ((char *)(v5 + 1) != a3 && v10 == 91)
      {
        v13 = *(unsigned __int8 *)(v5 + 1);
        switch(v13)
        {
          case '.':
            v9 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, (char *)(v5 + 2), a3, (uint64_t)__p);
            v12 = (void *)HIBYTE(v85);
            v11 = __p[1];
            break;
          case ':':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_230;
            for (i = 0; *(_BYTE *)(v5 + i + 2) != 58 || *(_BYTE *)(v5 + i + 3) != 93; ++i)
            {
              if (&v77[-v5] == (char *)i)
                goto LABEL_230;
            }
            v19 = (char *)(v5 + i + 2);
            if (v19 == a3)
LABEL_230:
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
            v20 = *(_DWORD *)(a1 + 24);
            v90 = 0uLL;
            v91 = 0;
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v90, (char *)(v5 + 2), v19, i);
            v21 = HIBYTE(v91);
            if (v91 >= 0)
              v22 = &v90;
            else
              v22 = (__int128 *)v90;
            if (v91 < 0)
              v21 = *((_QWORD *)&v90 + 1);
            (*(void (**)(_QWORD, __int128 *, char *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v22, (char *)v22 + v21);
            if (v91 >= 0)
              v23 = (const char *)&v90;
            else
              v23 = (const char *)v90;
            classname = std::__get_classname(v23, v20 & 1);
            if (SHIBYTE(v91) < 0)
              operator delete((void *)v90);
            if (!classname)
              std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>();
            v25 = 0;
            *(_DWORD *)(v7 + 160) |= classname;
            v26 = v5 + i;
            goto LABEL_136;
          case '=':
            if ((uint64_t)&a3[-v5 - 2] < 2)
              goto LABEL_230;
            for (j = 0; j[v5 + 2] != 61 || j[v5 + 3] != 93; ++j)
            {
              if (&v77[-v5] == j)
                goto LABEL_230;
            }
            v27 = &j[v5 + 2];
            if (v27 == a3)
              goto LABEL_230;
            v88 = 0uLL;
            v89 = 0;
            std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v88, a1, (char *)(v5 + 2), v27);
            if (SHIBYTE(v89) < 0)
            {
              v28 = *((_QWORD *)&v88 + 1);
              if (!*((_QWORD *)&v88 + 1))
LABEL_232:
                std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
              __s[0] = 0;
              __s[1] = 0;
              v87 = 0;
              v29 = (char *)v88;
            }
            else
            {
              v28 = HIBYTE(v89);
              if (!HIBYTE(v89))
                goto LABEL_232;
              __s[0] = 0;
              __s[1] = 0;
              v29 = (char *)&v88;
              v87 = 0;
            }
            v90 = 0uLL;
            v91 = 0;
            std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v90, v29, &v29[v28], v28);
            __s[0] = 0;
            __s[1] = 0;
            v87 = 0;
            v31 = HIBYTE(v91);
            if (v91 >= 0)
              v32 = &v90;
            else
              v32 = (__int128 *)v90;
            if (v91 < 0)
              v31 = *((_QWORD *)&v90 + 1);
            (*(void (**)(std::string::value_type **__return_ptr, _QWORD, __int128 *, char *))(**(_QWORD **)(a1 + 16) + 32))(__s, *(_QWORD *)(a1 + 16), v32, (char *)v32 + v31);
            v33 = (std::string::value_type *)HIBYTE(v87);
            if (v87 < 0)
              v33 = __s[1];
            if (v33 != (std::string::value_type *)1)
            {
              if (v33 == (std::string::value_type *)12)
              {
                v34 = __s;
                if (v87 < 0)
                  v34 = (std::string::value_type **)__s[0];
                *((_BYTE *)v34 + 11) = *((_BYTE *)v34 + 3);
              }
              else if (SHIBYTE(v87) < 0)
              {
                *__s[0] = 0;
                __s[1] = 0;
              }
              else
              {
                LOBYTE(__s[0]) = 0;
                HIBYTE(v87) = 0;
              }
            }
            if (SHIBYTE(v91) < 0)
              operator delete((void *)v90);
            v40 = (std::string::value_type *)HIBYTE(v87);
            if (v87 < 0)
              v40 = __s[1];
            if (v40)
            {
              v41 = *(_QWORD *)(v7 + 144);
              if (v41 >= *(_QWORD *)(v7 + 152))
              {
                v45 = std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)(v7 + 136), (__int128 *)__s);
              }
              else
              {
                if (SHIBYTE(v87) < 0)
                {
                  std::string::__init_copy_ctor_external(*(std::string **)(v7 + 144), __s[0], (std::string::size_type)__s[1]);
                }
                else
                {
                  v42 = *(_OWORD *)__s;
                  *(_QWORD *)(v41 + 16) = v87;
                  *(_OWORD *)v41 = v42;
                }
                v45 = v41 + 24;
                *(_QWORD *)(v7 + 144) = v41 + 24;
              }
              *(_QWORD *)(v7 + 144) = v45;
            }
            else
            {
              v43 = HIBYTE(v89);
              if (v89 < 0)
                v43 = *((_QWORD *)&v88 + 1);
              if (v43 == 2)
              {
                v46 = &v88;
                if (v89 < 0)
                  v46 = (__int128 *)v88;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v46, *((char *)v46 + 1));
              }
              else
              {
                if (v43 != 1)
                  std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
                v44 = &v88;
                if (v89 < 0)
                  v44 = (__int128 *)v88;
                std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v44);
              }
            }
            if (SHIBYTE(v87) < 0)
              operator delete(__s[0]);
            if (SHIBYTE(v89) < 0)
              operator delete((void *)v88);
            v25 = 0;
            v26 = (unint64_t)&j[v5];
LABEL_136:
            v5 = v26 + 4;
            v38 = v8;
            goto LABEL_137;
          default:
            v11 = 0;
            v12 = 0;
            v9 = (char *)v5;
            break;
        }
      }
      v5 = *(_DWORD *)(a1 + 24) & 0x1F0;
      if ((char)v12 >= 0)
        v11 = v12;
      if (!v11)
      {
        if ((*(_DWORD *)(a1 + 24) & 0x1B0 | 0x40) == 0x40)
        {
          v16 = *v9;
          if (v16 == 92)
          {
            v17 = v9 + 1;
            if ((*(_DWORD *)(a1 + 24) & 0x1F0) != 0)
              v18 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v17, a3, (uint64_t *)__p);
            else
              v18 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v17, (unsigned __int8 *)a3, (uint64_t)__p, v7);
            v9 = v18;
            goto LABEL_81;
          }
        }
        else
        {
          LOBYTE(v16) = *v9;
        }
        if ((char)v12 < 0)
        {
          v30 = (void **)__p[0];
          __p[1] = (void *)1;
        }
        else
        {
          HIBYTE(v85) = 1;
          v30 = __p;
        }
        *(_BYTE *)v30 = v16;
        *((_BYTE *)v30 + 1) = 0;
        ++v9;
      }
LABEL_81:
      if (v9 != a3)
      {
        v35 = *v9;
        if (v35 != 93)
        {
          v37 = v9 + 1;
          if (v9 + 1 != a3 && v35 == 45 && *v37 != 93)
          {
            v38 = v9 + 2;
            v82[0] = 0;
            v82[1] = 0;
            v83 = 0;
            if (v9 + 2 != a3 && *v37 == 91 && *v38 == 46)
            {
              v39 = std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(a1, v9 + 3, a3, (uint64_t)v82);
              goto LABEL_144;
            }
            if ((v5 | 0x40) == 0x40)
            {
              LODWORD(v37) = *v37;
              if ((_DWORD)v37 == 92)
              {
                if ((_DWORD)v5)
                  v39 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>((std::basic_regex<char> *)a1, v9 + 2, a3, (uint64_t *)v82);
                else
                  v39 = (uint64_t)std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>((std::basic_regex<char> *)a1, (unsigned __int8 *)v9 + 2, (unsigned __int8 *)a3, (uint64_t)v82, v7);
LABEL_144:
                v38 = (char *)v39;
LABEL_145:
                *(_OWORD *)v80 = *(_OWORD *)__p;
                v81 = v85;
                __p[1] = 0;
                v85 = 0;
                *(_OWORD *)v78 = *(_OWORD *)v82;
                v79 = v83;
                v82[0] = 0;
                v82[1] = 0;
                v83 = 0;
                __p[0] = 0;
                if (*(_BYTE *)(v7 + 170))
                {
                  if (*(_BYTE *)(v7 + 169))
                  {
                    v47 = v81 < 0;
                    v48 = (void *)HIBYTE(v81);
                    if (v81 < 0)
                      v48 = v80[1];
                    if (v48)
                    {
                      v49 = 0;
                      do
                      {
                        if (v47)
                          v50 = (void **)v80[0];
                        else
                          v50 = v80;
                        v51 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *((char *)v50 + v49));
                        if (v81 >= 0)
                          v52 = v80;
                        else
                          v52 = (void **)v80[0];
                        *((_BYTE *)v52 + v49++) = v51;
                        v47 = v81 < 0;
                        v53 = (void *)HIBYTE(v81);
                        if (v81 < 0)
                          v53 = v80[1];
                      }
                      while (v49 < (unint64_t)v53);
                    }
                    v54 = v79 < 0;
                    v55 = (void *)HIBYTE(v79);
                    if (v79 < 0)
                      v55 = v78[1];
                    if (v55)
                    {
                      v56 = 0;
                      do
                      {
                        if (v54)
                          v57 = (void **)v78[0];
                        else
                          v57 = v78;
                        v58 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *((char *)v57 + v56));
                        if (v79 >= 0)
                          v59 = v78;
                        else
                          v59 = (void **)v78[0];
                        *((_BYTE *)v59 + v56++) = v58;
                        v54 = v79 < 0;
                        v60 = (void *)HIBYTE(v79);
                        if (v79 < 0)
                          v60 = v78[1];
                      }
                      while (v56 < (unint64_t)v60);
                    }
                  }
                  v61 = (char *)HIBYTE(v81);
                  if (v81 >= 0)
                    v62 = (char *)v80;
                  else
                    v62 = (char *)v80[0];
                  if (v81 < 0)
                    v61 = (char *)v80[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)&v88, v76, v62, &v61[(_QWORD)v62]);
                  v63 = (char *)HIBYTE(v79);
                  if (v79 >= 0)
                    v64 = (char *)v78;
                  else
                    v64 = (char *)v78[0];
                  if (v79 < 0)
                    v63 = (char *)v78[1];
                  std::regex_traits<char>::transform<std::__wrap_iter<char *>>((uint64_t)__s, v76, v64, &v63[(_QWORD)v64]);
                  v90 = v88;
                  v91 = v89;
                  v89 = 0;
                  v88 = 0uLL;
                  v92 = *(_OWORD *)__s;
                  v93 = v87;
                  __s[0] = 0;
                  __s[1] = 0;
                  v87 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v75, &v90);
                  if (SHIBYTE(v93) < 0)
                    operator delete((void *)v92);
                  if (SHIBYTE(v91) < 0)
                    operator delete((void *)v90);
                  if (SHIBYTE(v87) < 0)
                    operator delete(__s[0]);
                  if (SHIBYTE(v89) < 0)
                  {
                    v65 = (void *)v88;
                    goto LABEL_215;
                  }
                }
                else
                {
                  v66 = (void *)HIBYTE(v81);
                  if (v81 < 0)
                    v66 = v80[1];
                  if (v66 != (void *)1)
                    goto LABEL_234;
                  v67 = (void *)HIBYTE(v79);
                  if (v79 < 0)
                    v67 = v78[1];
                  if (v67 != (void *)1)
LABEL_234:
                    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>();
                  if (*(_BYTE *)(v7 + 169))
                  {
                    if (v81 >= 0)
                      v68 = v80;
                    else
                      v68 = (void **)v80[0];
                    v69 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v68);
                    if (v81 >= 0)
                      v70 = v80;
                    else
                      v70 = (void **)v80[0];
                    *(_BYTE *)v70 = v69;
                    if (v79 >= 0)
                      v71 = v78;
                    else
                      v71 = (void **)v78[0];
                    v72 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)v71);
                    if (v79 >= 0)
                      v73 = v78;
                    else
                      v73 = (void **)v78[0];
                    *(_BYTE *)v73 = v72;
                  }
                  v90 = *(_OWORD *)v80;
                  v91 = v81;
                  v80[0] = 0;
                  v80[1] = 0;
                  v81 = 0;
                  v92 = *(_OWORD *)v78;
                  v93 = v79;
                  v78[0] = 0;
                  v78[1] = 0;
                  v79 = 0;
                  std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](v75, &v90);
                  if (SHIBYTE(v93) < 0)
                    operator delete((void *)v92);
                  if (SHIBYTE(v91) < 0)
                  {
                    v65 = (void *)v90;
LABEL_215:
                    operator delete(v65);
                  }
                }
                if (SHIBYTE(v79) < 0)
                  operator delete(v78[0]);
                if (SHIBYTE(v81) < 0)
                  operator delete(v80[0]);
                if (SHIBYTE(v83) < 0)
                  operator delete(v82[0]);
                v25 = 1;
LABEL_137:
                if (SHIBYTE(v85) < 0)
                  operator delete(__p[0]);
                v9 = v38;
                if ((v25 & 1) == 0)
                  goto LABEL_141;
                goto LABEL_140;
              }
            }
            else
            {
              LOBYTE(v37) = *v37;
            }
            HIBYTE(v83) = 1;
            LOWORD(v82[0]) = v37;
            goto LABEL_145;
          }
        }
      }
      if (SHIBYTE(v85) < 0)
      {
        if (__p[1])
        {
          if (__p[1] == (void *)1)
          {
            v36 = (void **)__p[0];
LABEL_90:
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, *(char *)v36);
LABEL_100:
            v25 = 1;
            v38 = v9;
            goto LABEL_137;
          }
          v36 = (void **)__p[0];
LABEL_99:
          std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](v7, *(char *)v36, *((char *)v36 + 1));
          goto LABEL_100;
        }
        operator delete(__p[0]);
      }
      else if (HIBYTE(v85))
      {
        v36 = __p;
        if (HIBYTE(v85) == 1)
          goto LABEL_90;
        goto LABEL_99;
      }
LABEL_140:
      v5 = (uint64_t)v9;
LABEL_141:
      if ((char *)v5 == v8)
      {
        if (v8 != a3)
        {
          if (*v8 == 45)
          {
            std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](v7, 45);
            ++v8;
          }
          if (v8 != a3 && *v8 == 93)
            return v8 + 1;
        }
LABEL_231:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
      }
    }
  }
  return a2;
}

void sub_1BEF2EDFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;

  *(_QWORD *)(v46 + 144) = v47;
  if (a46 < 0)
    operator delete(__p);
  if (*(char *)(v48 - 145) < 0)
    operator delete(*(void **)(v48 - 168));
  if (a40 < 0)
    operator delete(a35);
  _Unwind_Resume(exception_object);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(std::basic_regex<char> *this)
{
  uint64_t v2;
  unsigned int v3;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v2 = operator new();
    v3 = this->__marked_count_ + 1;
    this->__marked_count_ = v3;
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v2 = &off_1E78C7A90;
    *(_QWORD *)(v2 + 8) = first;
    *(_DWORD *)(v2 + 16) = v3;
    end->__first_ = (std::__node<char> *)v2;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(std::basic_regex<char> *this, unsigned int a2)
{
  uint64_t v4;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;

  if ((this->__flags_ & 2) == 0)
  {
    v4 = operator new();
    end = this->__end_;
    first = end->__first_;
    *(_QWORD *)v4 = &off_1E78C7AD8;
    *(_QWORD *)(v4 + 8) = first;
    *(_DWORD *)(v4 + 16) = a2;
    end->__first_ = (std::__node<char> *)v4;
    this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
  }
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)11>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 11);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2F02C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any_but_newline<char>::~__match_any_but_newline(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 3);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2F108(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t *a4)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::basic_regex<char>::value_type v6;
  int v7;
  int v8;
  unsigned __int8 v9;
  char v10;
  unsigned __int8 v11;
  char v12;
  std::basic_regex<char>::value_type v13;
  unsigned __int8 v14;
  std::basic_regex<char>::value_type v15;
  __int16 v16;

  v4 = a2;
  if (a2 != a3)
  {
    v5 = *a2;
    v6 = v5;
    if ((char)v5 > 109)
    {
      switch((char)v5)
      {
        case 'n':
          if (!a4)
          {
            v6 = 10;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 10;
          goto LABEL_79;
        case 'r':
          if (!a4)
          {
            v6 = 13;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 13;
          goto LABEL_79;
        case 't':
          if (!a4)
          {
            v6 = 9;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 9;
          goto LABEL_79;
        case 'u':
          if (v4 + 1 != a3)
          {
            v7 = v4[1];
            if ((v7 & 0xF8) == 0x30 || (v7 & 0xFE) == 0x38 || (v7 | 0x20u) - 97 < 6)
            {
              v4 += 2;
              if (v4 != a3)
              {
                v8 = *v4;
                if ((v8 & 0xF8) == 0x30 || (v8 & 0xFE) == 0x38 || (v8 | 0x20u) - 97 < 6)
                  goto LABEL_27;
              }
            }
          }
          goto LABEL_89;
        case 'v':
          if (!a4)
          {
            v6 = 11;
            goto LABEL_67;
          }
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 11;
          break;
        case 'x':
LABEL_27:
          if (v4 + 1 == a3)
            goto LABEL_89;
          v9 = v4[1];
          v10 = -48;
          if ((v9 & 0xF8) == 0x30 || (v9 & 0xFE) == 0x38)
            goto LABEL_32;
          v9 |= 0x20u;
          if ((v9 - 97) >= 6u)
            goto LABEL_89;
          v10 = -87;
LABEL_32:
          if (v4 + 2 == a3)
            goto LABEL_89;
          v11 = v4[2];
          v12 = -48;
          if ((v11 & 0xF8) == 0x30 || (v11 & 0xFE) == 0x38)
            goto LABEL_37;
          v11 |= 0x20u;
          if ((v11 - 97) >= 6u)
            goto LABEL_89;
          v12 = -87;
LABEL_37:
          v13 = v11 + 16 * (v9 + v10) + v12;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            *(_BYTE *)a4 = v13;
            *((_BYTE *)a4 + 1) = 0;
          }
          else
          {
            std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v13);
          }
          v4 += 3;
          return v4;
        default:
          goto LABEL_51;
      }
      goto LABEL_79;
    }
    if ((char)v5 == 48)
    {
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_WORD *)a4 = 0;
        return ++v4;
      }
      v6 = 0;
      goto LABEL_67;
    }
    if ((char)v5 != 99)
    {
      if ((char)v5 == 102)
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          v16 = 12;
LABEL_79:
          *(_WORD *)a4 = v16;
          return ++v4;
        }
        v6 = 12;
LABEL_67:
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v6);
        return ++v4;
      }
LABEL_51:
      if ((char)v5 != 95 && ((char)v5 < 0 || (a1->__traits_.__ct_->__tab_[v5] & 0x500) == 0))
      {
        if (a4)
        {
          if (*((char *)a4 + 23) < 0)
          {
            a4[1] = 1;
            a4 = (uint64_t *)*a4;
          }
          else
          {
            *((_BYTE *)a4 + 23) = 1;
          }
          *(_BYTE *)a4 = v5;
          *((_BYTE *)a4 + 1) = 0;
          return ++v4;
        }
        goto LABEL_67;
      }
LABEL_89:
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
    }
    if (v4 + 1 == a3)
      goto LABEL_89;
    v14 = v4[1];
    if (((v14 & 0xDF) - 65) > 0x19u)
      goto LABEL_89;
    v15 = v14 & 0x1F;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      *(_BYTE *)a4 = v15;
      *((_BYTE *)a4 + 1) = 0;
    }
    else
    {
      std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v15);
    }
    v4 += 2;
  }
  return v4;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_char(std::basic_regex<char> *this, std::basic_regex<char>::value_type __c)
{
  uint64_t v2;
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  uint64_t v8;
  std::__node<char> *first;
  std::__node<char> *v10;

  v2 = __c;
  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = operator new();
    first = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E78C7898;
    *(_QWORD *)(v8 + 8) = first;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = ((uint64_t (*)(const std::ctype<char> *, uint64_t))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v2);
LABEL_6:
    this->__end_->__first_ = (std::__node<char> *)v8;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = operator new();
    v10 = this->__end_->__first_;
    *(_QWORD *)v8 = &off_1E78C78E0;
    *(_QWORD *)(v8 + 8) = v10;
    std::locale::locale((std::locale *)(v8 + 16), &this->__traits_.__loc_);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)&this->__traits_.__ct_;
    *(_BYTE *)(v8 + 40) = v2;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E78C7928;
  *(_QWORD *)(v5 + 8) = v7;
  *(_BYTE *)(v5 + 16) = v2;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

void sub_1BEF2F5F8(_Unwind_Exception *a1)
{
  void (__cdecl ***v1)(std::__owns_one_state<char> *__hidden);
  std::locale *v2;
  void (__cdecl **v4)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale(v2);
  v4 = v1[1];
  if (v4)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v4 + 1))(v4);
  MEMORY[0x1C3B87100](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 4);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF2F67C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(std::basic_regex<char> *this, int __i)
{
  std::basic_regex<_CharT, _Traits>::flag_type flags;
  uint64_t v5;
  std::__owns_one_state<char> *end;
  std::__node<char> *v7;
  std::locale *v8;
  std::locale *v9;
  std::__node<char> *first;
  uint64_t (**v11)();

  flags = this->__flags_;
  if ((flags & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E78C7970;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)v11;
    v8[1].__locale_ = (std::locale::__imp *)first;
    std::locale::locale(v8 + 2, &this->__traits_.__loc_);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)&this->__traits_.__ct_;
    LODWORD(v9[5].__locale_) = __i;
    this->__end_->__first_ = (std::__node<char> *)v9;
    goto LABEL_7;
  }
  if ((flags & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    first = this->__end_->__first_;
    v11 = &off_1E78C79B8;
    goto LABEL_6;
  }
  v5 = operator new();
  end = this->__end_;
  v7 = end->__first_;
  *(_QWORD *)v5 = &off_1E78C7A00;
  *(_QWORD *)(v5 + 8) = v7;
  *(_DWORD *)(v5 + 16) = __i;
  end->__first_ = (std::__node<char> *)v5;
LABEL_7:
  this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
}

std::locale *std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C7898;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_icase<char,std::regex_traits<char>>::~__match_char_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C7898;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__match_char_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    v5 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    v5 = *(_QWORD *)(v4 + 8);
  }
  *(_QWORD *)(a2 + 80) = v5;
  return result;
}

std::locale *std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C78E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__match_char_collate<char,std::regex_traits<char>>::~__match_char_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C78E0;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__match_char_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

void (__cdecl ***std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_char<char>::~__match_char(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__match_char<char>::__exec(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  uint64_t v3;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

std::locale *std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C7970;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_icase<char,std::regex_traits<char>>::~__back_ref_icase(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C7970;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__back_ref_icase<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (*(_BYTE *)(v3 + 16))
  {
    v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3;
    v5 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v5 >= v4)
    {
      v7 = result;
      if (v4 < 1)
      {
LABEL_9:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v5 + v4;
        v6 = *(_QWORD *)(v7 + 8);
        goto LABEL_10;
      }
      v8 = 0;
      while (1)
      {
        v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)v3 + v8));
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v7 + 24) + 40))(*(_QWORD *)(v7 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v8));
        if (v9 != (_DWORD)result)
          break;
        if (v4 == ++v8)
        {
          v5 = *(_QWORD *)(a2 + 16);
          goto LABEL_9;
        }
      }
    }
  }
  v6 = 0;
  *(_DWORD *)a2 = -993;
LABEL_10:
  *(_QWORD *)(a2 + 80) = v6;
  return result;
}

std::locale *std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C79B8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void std::__back_ref_collate<char,std::regex_traits<char>>::~__back_ref_collate(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&off_1E78C79B8;
  std::locale::~locale(a1 + 2);
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__back_ref_collate<char,std::regex_traits<char>>::__exec(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  int v12;
  int v13;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (*(_BYTE *)(v3 + 24 * v2 + 16))
  {
    v4 = (unsigned __int8 **)(v3 + 24 * v2);
    v5 = *v4;
    v6 = v4[1] - *v4;
    v7 = *(_QWORD *)(a2 + 16);
    if (*(_QWORD *)(a2 + 24) - v7 >= v6)
    {
      if (v6 < 1)
      {
LABEL_8:
        *(_DWORD *)a2 = -994;
        *(_QWORD *)(a2 + 16) = v7 + v6;
        v8 = *(_QWORD *)(result + 8);
        goto LABEL_9;
      }
      v9 = v6;
      v10 = *(unsigned __int8 **)(a2 + 16);
      while (1)
      {
        v12 = *v5++;
        v11 = v12;
        v13 = *v10++;
        if (v11 != v13)
          break;
        if (!--v9)
          goto LABEL_8;
      }
    }
  }
  v8 = 0;
  *(_DWORD *)a2 = -993;
LABEL_9:
  *(_QWORD *)(a2 + 80) = v8;
  return result;
}

void (__cdecl ***std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__back_ref<char>::~__back_ref(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

unsigned int *std::__back_ref<char>::__exec(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    v10 = *((_QWORD *)v6 + 1);
  }
  else
  {
    v10 = 0;
    *(_DWORD *)a2 = -993;
  }
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::__bracket_expression<char, std::regex_traits<char>> *__cdecl std::basic_regex<char,std::regex_traits<char>>::__start_matching_list(std::basic_regex<char> *this, BOOL __negate)
{
  uint64_t v4;
  std::__node<char> *first;
  unsigned int flags_low;
  char v7;
  int v8;
  std::string::size_type size;
  std::string *v10;
  BOOL v11;
  std::locale v13;
  std::string v14;

  v4 = operator new();
  first = this->__end_->__first_;
  flags_low = LOBYTE(this->__flags_);
  v7 = flags_low & 1;
  v8 = (flags_low >> 3) & 1;
  *(_QWORD *)(v4 + 8) = first;
  std::locale::locale((std::locale *)(v4 + 16), &this->__traits_.__loc_);
  *(_OWORD *)(v4 + 24) = *(_OWORD *)&this->__traits_.__ct_;
  *(_OWORD *)(v4 + 40) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_BYTE *)(v4 + 168) = __negate;
  *(_BYTE *)(v4 + 169) = v7;
  *(_BYTE *)(v4 + 170) = v8;
  std::locale::locale(&v13, (const std::locale *)(v4 + 16));
  std::locale::name(&v14, &v13);
  size = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v14.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v10 = (std::string *)v14.__r_.__value_.__r.__words[0];
    if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v10 = &v14;
    v11 = v10->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v11 = 1;
    if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v14.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v13);
  *(_BYTE *)(v4 + 171) = v11;
  this->__end_->__first_ = (std::__node<char> *)v4;
  this->__end_ = (std::__owns_one_state<char> *)v4;
  return (std::__bracket_expression<char, std::regex_traits<char>> *)v4;
}

void sub_1BEF2FFEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _QWORD *a10)
{
  void (__cdecl ***v10)(std::__owns_one_state<char> *__hidden);
  std::locale *v11;
  void **v12;
  void (__cdecl **v14)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v15)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v16)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v17)(std::__owns_one_state<char> *__hidden);

  std::locale::~locale((std::locale *)&a9);
  a10 = v10 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v14 = v10[14];
  if (v14)
  {
    v10[15] = v14;
    operator delete(v14);
  }
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&a10);
  v15 = v10[8];
  if (v15)
  {
    v10[9] = v15;
    operator delete(v15);
  }
  v16 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))*v12;
  if (*v12)
  {
    v10[6] = v16;
    operator delete(v16);
  }
  std::locale::~locale(v11);
  v17 = v10[1];
  if (v17)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v17 + 1))(v17);
  MEMORY[0x1C3B87100](v10, 0x10F1C4061CF1F02);
  _Unwind_Resume(a1);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  unint64_t *v6;
  unint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  unint64_t v14;
  _BYTE *v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  _BYTE *v22;
  char v23;
  unint64_t v24;
  _BYTE *v25;
  unint64_t v26;
  unint64_t v27;
  size_t v28;
  _BYTE *v29;
  char v30;
  _BYTE *v31;
  char v32;

  v2 = a2;
  if (*(_BYTE *)(a1 + 169))
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v5 = *(_BYTE **)(a1 + 48);
    v4 = *(_QWORD *)(a1 + 56);
    if ((unint64_t)v5 >= v4)
    {
      v6 = (unint64_t *)(a1 + 40);
      v7 = *(_QWORD *)(a1 + 40);
      v8 = &v5[-v7];
      v9 = (uint64_t)&v5[-v7 + 1];
      if (v9 >= 0)
      {
        v10 = v4 - v7;
        if (2 * v10 > v9)
          v9 = 2 * v10;
        if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
          v11 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v11 = v9;
        if (v11)
          v12 = operator new(v11);
        else
          v12 = 0;
        v20 = &v8[(_QWORD)v12];
        v21 = (char *)v12 + v11;
        v8[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v8[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v7)
        {
          v22 = &v5[~v7];
          do
          {
            v23 = *--v5;
            (v22--)[(_QWORD)v12] = v23;
          }
          while (v5 != (_BYTE *)v7);
LABEL_45:
          v5 = (_BYTE *)*v6;
          goto LABEL_47;
        }
        goto LABEL_46;
      }
LABEL_50:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    goto LABEL_22;
  }
  v6 = (unint64_t *)(a1 + 40);
  v5 = *(_BYTE **)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  if (!*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v5 >= v13)
    {
      v24 = *v6;
      v25 = &v5[-*v6];
      v26 = (unint64_t)(v25 + 1);
      if ((uint64_t)(v25 + 1) >= 0)
      {
        v27 = v13 - v24;
        if (2 * v27 > v26)
          v26 = 2 * v27;
        if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
          v28 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v28 = v26;
        if (v28)
          v12 = operator new(v28);
        else
          v12 = 0;
        v20 = &v25[(_QWORD)v12];
        v21 = (char *)v12 + v28;
        v25[(_QWORD)v12] = v2;
        v19 = (uint64_t)&v25[(_QWORD)v12 + 1];
        if (v5 != (_BYTE *)v24)
        {
          v31 = &v5[~v24];
          do
          {
            v32 = *--v5;
            (v31--)[(_QWORD)v12] = v32;
          }
          while (v5 != (_BYTE *)v24);
          goto LABEL_45;
        }
        goto LABEL_46;
      }
      goto LABEL_50;
    }
LABEL_22:
    *v5 = v2;
    v19 = (uint64_t)(v5 + 1);
    goto LABEL_49;
  }
  if ((unint64_t)v5 < v13)
    goto LABEL_22;
  v14 = *v6;
  v15 = &v5[-*v6];
  v16 = (unint64_t)(v15 + 1);
  if ((uint64_t)(v15 + 1) < 0)
    goto LABEL_50;
  v17 = v13 - v14;
  if (2 * v17 > v16)
    v16 = 2 * v17;
  if (v17 >= 0x3FFFFFFFFFFFFFFFLL)
    v18 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v18 = v16;
  if (v18)
    v12 = operator new(v18);
  else
    v12 = 0;
  v20 = &v15[(_QWORD)v12];
  v21 = (char *)v12 + v18;
  v15[(_QWORD)v12] = v2;
  v19 = (uint64_t)&v15[(_QWORD)v12 + 1];
  if (v5 != (_BYTE *)v14)
  {
    v29 = &v5[~v14];
    do
    {
      v30 = *--v5;
      (v29--)[(_QWORD)v12] = v30;
    }
    while (v5 != (_BYTE *)v14);
    goto LABEL_45;
  }
LABEL_46:
  v12 = v20;
LABEL_47:
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v19;
  *(_QWORD *)(a1 + 56) = v21;
  if (v5)
    operator delete(v5);
LABEL_49:
  *(_QWORD *)(a1 + 48) = v19;
}

std::locale *std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return a1;
}

uint64_t std::__bracket_expression<char,std::regex_traits<char>>::~__bracket_expression(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale *v7;

  v7 = a1 + 17;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  locale = a1[14].__locale_;
  if (locale)
  {
    a1[15].__locale_ = locale;
    operator delete(locale);
  }
  v7 = a1 + 11;
  std::vector<bambi::XmlParserNamespace>::__destroy_vector::operator()[abi:ne180100]((void ***)&v7);
  v3 = a1[8].__locale_;
  if (v3)
  {
    a1[9].__locale_ = v3;
    operator delete(v3);
  }
  v4 = a1[5].__locale_;
  if (v4)
  {
    a1[6].__locale_ = v4;
    operator delete(v4);
  }
  std::locale::~locale(a1 + 2);
  v5 = a1[1].__locale_;
  if (v5)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v5 + 8))(v5);
  return MEMORY[0x1C3B87100](a1, 0x10F1C4061CF1F02);
}

void std::__bracket_expression<char,std::regex_traits<char>>::__exec(const std::__bracket_expression<char, std::regex_traits<char>> *this, std::__bracket_expression<char, std::regex_traits<char>>::__state *a2)
{
  char *current;
  char *last;
  char v6;
  char v7;
  std::string::size_type size;
  int v9;
  uint64_t v10;
  _BOOL4 negate;
  std::string::size_type v12;
  std::string *p_s;
  std::vector<std::pair<char, char>>::pointer begin;
  uint64_t v15;
  uint64_t v16;
  char *p_second;
  std::pair<std::string, std::string> *v19;
  unint64_t v20;
  uint64_t v21;
  char v22;
  std::string::size_type v23;
  unsigned __int8 v24;
  std::vector<char>::pointer v25;
  unint64_t v26;
  int v27;
  std::regex_traits<char>::char_class_type v28;
  char v29;
  int v30;
  std::vector<char>::pointer end;
  std::vector<char>::pointer v32;
  char *v33;
  std::vector<std::pair<std::string, std::string>>::pointer v34;
  std::vector<std::pair<std::string, std::string>>::pointer v35;
  unint64_t v36;
  uint64_t v37;
  char v38;
  std::vector<std::string>::pointer v39;
  uint64_t v40;
  int64_t v41;
  unint64_t v42;
  unint64_t v43;
  const void *v44;
  size_t v45;
  std::string::size_type v46;
  uint64_t v47;
  BOOL j;
  std::string *v49;
  std::string::size_type v50;
  int v51;
  std::string *v52;
  uint64_t v53;
  const void *v54;
  size_t v55;
  std::vector<std::string>::pointer v56;
  uint64_t v57;
  int64_t v58;
  unint64_t v59;
  unint64_t v60;
  const void *v61;
  size_t v62;
  std::string::size_type v63;
  uint64_t v64;
  BOOL i;
  std::string *v66;
  std::string::size_type v67;
  int v68;
  std::string *v69;
  uint64_t v70;
  std::string *v71;
  const void *v72;
  size_t v73;
  std::regex_traits<char>::char_class_type mask;
  const std::ctype_base::mask *tab;
  std::ctype_base::mask v76;
  std::regex_traits<char>::char_class_type neg_mask;
  int v78;
  std::regex_traits<char>::char_class_type v79;
  int v80;
  std::__node<char> *first;
  int v82;
  BOOL v83;
  std::string *v84;
  uint64_t v85;
  BOOL v86;
  int v87;
  std::string __p;
  unsigned __int16 v89;
  std::string v90;
  std::string __s;

  current = a2->__current_;
  last = a2->__last_;
  if (current == last)
  {
    v10 = 0;
    negate = this->__negate_;
LABEL_176:
    v87 = negate;
    goto LABEL_177;
  }
  if (!this->__might_have_digraph_ || current + 1 == last)
    goto LABEL_35;
  v6 = *current;
  LOBYTE(v89) = *current;
  v7 = current[1];
  HIBYTE(v89) = v7;
  if (this->__icase_)
  {
    LOBYTE(v89) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v6);
    HIBYTE(v89) = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, v7);
  }
  __s.__r_.__value_.__r.__words[2] = 0x200000000000000;
  *(_OWORD *)&__s.__r_.__value_.__l.__data_ = v89;
  std::__get_collation_name(&v90, (const char *)&__s);
  __p = v90;
  size = HIBYTE(v90.__r_.__value_.__r.__words[2]);
  v9 = SHIBYTE(v90.__r_.__value_.__r.__words[2]);
  if ((v90.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v90.__r_.__value_.__l.__size_;
  if (size)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    v12 = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    v12 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      goto LABEL_15;
    p_s = &__s;
  }
  (*(void (**)(std::string *__return_ptr, const std::collate<char> *, std::string *, char *))(*(_QWORD *)this->__traits_.__col_ + 32))(&v90, this->__traits_.__col_, p_s, (char *)p_s + v12);
  if (v9 < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  __p = v90;
  if ((SHIBYTE(v90.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (HIBYTE(v90.__r_.__value_.__r.__words[2]) != 12 && HIBYTE(v90.__r_.__value_.__r.__words[2]) != 1)
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_111;
  }
  if (__p.__r_.__value_.__l.__size_ == 1 || __p.__r_.__value_.__l.__size_ == 12)
  {
LABEL_111:
    std::string::operator=(&__p, &__s);
    goto LABEL_9;
  }
  *__p.__r_.__value_.__l.__data_ = 0;
  __p.__r_.__value_.__l.__size_ = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
LABEL_15:
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
      goto LABEL_17;
LABEL_35:
    v87 = 0;
    v10 = 1;
    goto LABEL_36;
  }
  v23 = __p.__r_.__value_.__l.__size_;
  operator delete(__p.__r_.__value_.__l.__data_);
  if (!v23)
    goto LABEL_35;
LABEL_17:
  begin = this->__digraphs_.__begin_;
  v15 = (char *)this->__digraphs_.__end_ - (char *)begin;
  if (v15)
  {
    v16 = v15 >> 1;
    if ((unint64_t)(v15 >> 1) <= 1)
      v16 = 1;
    p_second = &begin->second;
    do
    {
      if (v89 == *(p_second - 1) && HIBYTE(v89) == *p_second)
        goto LABEL_184;
      p_second += 2;
      --v16;
    }
    while (v16);
  }
  if (!this->__collate_ || this->__ranges_.__begin_ == this->__ranges_.__end_)
  {
    v87 = 0;
LABEL_118:
    if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
      goto LABEL_148;
    memset(&__s, 0, sizeof(__s));
    std::regex_traits<char>::__transform_primary<char *>((uint64_t *)&__s, (uint64_t)&this->__traits_, (char *)&v89, (char *)&v90);
    v56 = this->__equivalences_.__begin_;
    v57 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    v58 = (char *)this->__equivalences_.__end_ - (char *)v56;
    if (!v58)
    {
LABEL_146:
      if ((v57 & 0x80) != 0)
LABEL_147:
        operator delete(__s.__r_.__value_.__l.__data_);
      goto LABEL_148;
    }
    v59 = 0;
    v60 = v58 / 24;
    v62 = __s.__r_.__value_.__l.__size_;
    v61 = (const void *)__s.__r_.__value_.__r.__words[0];
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v63 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    else
      v63 = __s.__r_.__value_.__l.__size_;
    if (v60 <= 1)
      v64 = 1;
    else
      v64 = v58 / 24;
    for (i = 1; ; i = v59 < v60)
    {
      v66 = &v56[v59];
      v67 = HIBYTE(v66->__r_.__value_.__r.__words[2]);
      v68 = (char)v67;
      if ((v67 & 0x80u) != 0)
        v67 = v66->__r_.__value_.__l.__size_;
      if (v63 != v67)
        goto LABEL_139;
      v69 = v68 >= 0 ? &v56[v59] : (std::string *)v66->__r_.__value_.__r.__words[0];
      if ((v57 & 0x80) == 0)
        break;
      v86 = i;
      v71 = v56;
      v72 = v61;
      v73 = v62;
      if (!memcmp(v61, v69, v62))
      {
        operator delete(__s.__r_.__value_.__l.__data_);
        if (v86)
          goto LABEL_184;
LABEL_145:
        v87 = 1;
LABEL_148:
        if ((char)v89 < 0)
        {
          neg_mask = this->__neg_mask_;
          goto LABEL_161;
        }
        mask = this->__mask_;
        tab = this->__traits_.__ct_->__tab_;
        v76 = tab[v89];
        if ((v76 & mask) == 0 && (v89 != 95 || (mask & 0x80) == 0)
          || SHIBYTE(v89) < 0
          || (tab[HIBYTE(v89)] & mask) == 0 && ((mask & 0x80) == 0 || HIBYTE(v89) != 95))
        {
          neg_mask = this->__neg_mask_;
          if ((neg_mask & v76) != 0 || v89 == 95 && (neg_mask & 0x80) != 0)
            goto LABEL_165;
LABEL_161:
          if (SHIBYTE(v89) < 0)
            goto LABEL_184;
          if ((this->__traits_.__ct_->__tab_[HIBYTE(v89)] & neg_mask) != 0
            || (v78 = 1, HIBYTE(v89) == 95) && (neg_mask & 0x80) != 0)
          {
LABEL_165:
            v78 = v87;
          }
LABEL_185:
          v87 = v78;
LABEL_186:
          v10 = 2;
          goto LABEL_177;
        }
LABEL_184:
        v78 = 1;
        goto LABEL_185;
      }
      ++v59;
      v62 = v73;
      v61 = v72;
      v56 = v71;
      if (v59 == v64)
        goto LABEL_147;
LABEL_143:
      ;
    }
    if (!(_DWORD)v57)
    {
LABEL_144:
      if (i)
        goto LABEL_184;
      goto LABEL_145;
    }
    v70 = 0;
    while (__s.__r_.__value_.__s.__data_[v70] == v69->__r_.__value_.__s.__data_[v70])
    {
      if (v57 == ++v70)
        goto LABEL_144;
    }
LABEL_139:
    if (++v59 == v64)
      goto LABEL_146;
    goto LABEL_143;
  }
  memset(&__s, 0, sizeof(__s));
  std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v89, (char *)&v90);
  v19 = this->__ranges_.__begin_;
  if (this->__ranges_.__end_ == v19)
  {
LABEL_33:
    v87 = 0;
    v22 = 1;
  }
  else
  {
    v20 = 0;
    v21 = 3;
    while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v19->first.__r_.__value_.__r.__words[v21 - 3], (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_ + v21 * 8)) << 24) >= 0x1000000)
    {
      ++v20;
      v19 = this->__ranges_.__begin_;
      v21 += 6;
      if (v20 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v19) >> 4))
        goto LABEL_33;
    }
    v22 = 0;
    v87 = 1;
  }
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  if ((v87 & 1) == 0)
    goto LABEL_118;
  if ((v22 & 1) == 0)
    goto LABEL_186;
  v10 = 2;
LABEL_36:
  v24 = *a2->__current_;
  v90.__r_.__value_.__s.__data_[0] = v24;
  if (this->__icase_)
  {
    v24 = ((uint64_t (*)(const std::ctype<char> *, _QWORD))this->__traits_.__ct_->do_tolower)(this->__traits_.__ct_, (char)v24);
    v90.__r_.__value_.__s.__data_[0] = v24;
  }
  v25 = this->__chars_.__begin_;
  v26 = this->__chars_.__end_ - v25;
  if (v26)
  {
    if (v26 <= 1)
      v26 = 1;
    do
    {
      v27 = *v25++;
      if (v27 == v24)
        goto LABEL_175;
    }
    while (--v26);
  }
  v28 = this->__neg_mask_;
  if (v28 || this->__neg_chars_.__begin_ != this->__neg_chars_.__end_)
  {
    if ((v24 & 0x80) != 0 || (this->__traits_.__ct_->__tab_[v24] & v28) == 0)
    {
      v30 = (v28 >> 7) & 1;
      v29 = v24 == 95 ? v30 : 0;
    }
    else
    {
      v29 = 1;
    }
    end = this->__neg_chars_.__end_;
    v32 = (std::vector<char>::pointer)memchr(this->__neg_chars_.__begin_, (char)v24, end - this->__neg_chars_.__begin_);
    v33 = v32 ? v32 : end;
    if ((v29 & 1) == 0 && v33 == end)
    {
LABEL_175:
      negate = 1;
      goto LABEL_176;
    }
  }
  v34 = this->__ranges_.__begin_;
  v35 = this->__ranges_.__end_;
  if (v34 != v35)
  {
    memset(&__s, 0, sizeof(__s));
    if (this->__collate_)
    {
      std::regex_traits<char>::transform<char *>((uint64_t)&__s, (uint64_t)&this->__traits_, (char *)&v90, &v90.__r_.__value_.__s.__data_[1]);
      v34 = this->__ranges_.__begin_;
      v35 = this->__ranges_.__end_;
    }
    else
    {
      *((_BYTE *)&__s.__r_.__value_.__s + 23) = 1;
      LOWORD(__s.__r_.__value_.__l.__data_) = v24;
    }
    if (v35 == v34)
    {
LABEL_66:
      v38 = 0;
    }
    else
    {
      v36 = 0;
      v37 = 3;
      while ((int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v34->first.__r_.__value_.__r.__words[v37 - 3], (void **)&__s.__r_.__value_.__l.__data_) << 24) > 0xFFFFFF|| (int)(std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&__s, (void **)((char *)&this->__ranges_.__begin_->first.__r_.__value_.__l.__data_+ v37 * 8)) << 24) >= 0x1000000)
      {
        ++v36;
        v34 = this->__ranges_.__begin_;
        v37 += 6;
        if (v36 >= 0xAAAAAAAAAAAAAAABLL * (((char *)this->__ranges_.__end_ - (char *)v34) >> 4))
          goto LABEL_66;
      }
      v38 = 1;
      v87 = 1;
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    if ((v38 & 1) != 0)
      goto LABEL_177;
  }
  if (this->__equivalences_.__begin_ == this->__equivalences_.__end_)
  {
LABEL_170:
    if (v90.__r_.__value_.__s.__data_[0] < 0)
      goto LABEL_177;
    v79 = this->__mask_;
    if ((this->__traits_.__ct_->__tab_[v90.__r_.__value_.__s.__data_[0]] & v79) == 0)
    {
      v80 = (v79 >> 7) & 1;
      if (v90.__r_.__value_.__s.__data_[0] != 95)
        v80 = 0;
      if (v80 != 1)
        goto LABEL_177;
    }
    goto LABEL_175;
  }
  memset(&__s, 0, sizeof(__s));
  std::regex_traits<char>::__transform_primary<char *>((uint64_t *)&__s, (uint64_t)&this->__traits_, (char *)&v90, &v90.__r_.__value_.__s.__data_[1]);
  v39 = this->__equivalences_.__begin_;
  v40 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  v41 = (char *)this->__equivalences_.__end_ - (char *)v39;
  if (!v41)
  {
    if ((*((_BYTE *)&__s.__r_.__value_.__s + 23) & 0x80) != 0)
      operator delete(__s.__r_.__value_.__l.__data_);
    goto LABEL_170;
  }
  v85 = v10;
  v42 = 0;
  v43 = v41 / 24;
  v45 = __s.__r_.__value_.__l.__size_;
  v44 = (const void *)__s.__r_.__value_.__r.__words[0];
  if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v46 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
  else
    v46 = __s.__r_.__value_.__l.__size_;
  if (v43 <= 1)
    v47 = 1;
  else
    v47 = v41 / 24;
  for (j = 1; ; j = v42 < v43)
  {
    v49 = &v39[v42];
    v50 = HIBYTE(v49->__r_.__value_.__r.__words[2]);
    v51 = (char)v50;
    if ((v50 & 0x80u) != 0)
      v50 = v49->__r_.__value_.__l.__size_;
    if (v46 == v50)
      break;
LABEL_100:
    if (++v42 == v47)
    {
      if ((v40 & 0x80) != 0)
LABEL_168:
        operator delete(__s.__r_.__value_.__l.__data_);
      v10 = v85;
      goto LABEL_170;
    }
LABEL_104:
    ;
  }
  if (v51 >= 0)
    v52 = &v39[v42];
  else
    v52 = (std::string *)v49->__r_.__value_.__r.__words[0];
  if ((v40 & 0x80) == 0)
  {
    if (!(_DWORD)v40)
    {
LABEL_105:
      v87 = 1;
      v10 = v85;
      if (!j)
        goto LABEL_170;
      goto LABEL_177;
    }
    v53 = 0;
    while (__s.__r_.__value_.__s.__data_[v53] == v52->__r_.__value_.__s.__data_[v53])
    {
      if (v40 == ++v53)
        goto LABEL_105;
    }
    goto LABEL_100;
  }
  v83 = j;
  v84 = v39;
  v54 = v44;
  v55 = v45;
  if (memcmp(v44, v52, v45))
  {
    ++v42;
    v45 = v55;
    v44 = v54;
    v39 = v84;
    if (v42 == v47)
      goto LABEL_168;
    goto LABEL_104;
  }
  operator delete(__s.__r_.__value_.__l.__data_);
  v87 = 1;
  v10 = v85;
  if (!v83)
    goto LABEL_170;
LABEL_177:
  if (v87 == this->__negate_)
  {
    first = 0;
    v82 = -993;
  }
  else
  {
    a2->__current_ += v10;
    first = this->__first_;
    v82 = -995;
  }
  a2->__do_ = v82;
  a2->__node_ = first;
}

void sub_1BEF30D08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::transform<char *>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v5;
  char *p_p;
  void *__p;
  uint64_t v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a3, a4, a4 - a3);
  v5 = HIBYTE(v9);
  if (v9 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if (v9 < 0)
    v5 = v8;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), p_p, &p_p[v5]);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
}

void sub_1BEF30DD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::regex_traits<char>::__transform_primary<char *>(uint64_t *a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v6;
  char *p_p;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  void *__p;
  uint64_t v12;
  uint64_t v13;

  __p = 0;
  v12 = 0;
  v13 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a3, a4, a4 - a3);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = HIBYTE(v13);
  if (v13 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if (v13 < 0)
    v6 = v12;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), p_p, &p_p[v6]);
  v8 = *((unsigned __int8 *)a1 + 23);
  v9 = (char)v8;
  if ((v8 & 0x80u) != 0)
    v8 = a1[1];
  if (v8 != 1)
  {
    if (v8 == 12)
    {
      if (v9 >= 0)
        v10 = a1;
      else
        v10 = (uint64_t *)*a1;
      *((_BYTE *)v10 + 11) = *((_BYTE *)v10 + 3);
    }
    else if (v9 < 0)
    {
      *(_BYTE *)*a1 = 0;
      a1[1] = 0;
    }
    else
    {
      *(_BYTE *)a1 = 0;
      *((_BYTE *)a1 + 23) = 0;
    }
  }
  if (SHIBYTE(v13) < 0)
    operator delete(__p);
}

void sub_1BEF30EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 5);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF30F3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__parse_collating_symbol<char const*>(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t i;
  unint64_t v7;
  unint64_t v8;
  __int128 v10;
  unint64_t v11;

  if (a3 - a2 < 2 || a3 - 1 == a2)
    goto LABEL_15;
  for (i = 0; a2[i] != 46 || a2[i + 1] != 93; ++i)
  {
    if (a3 - a2 - 2 == i)
      goto LABEL_15;
  }
  if (&a2[i] == a3)
LABEL_15:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)5>();
  std::regex_traits<char>::__lookup_collatename<char const*>((uint64_t)&v10, a1, a2, &a2[i]);
  if (*(char *)(a4 + 23) < 0)
    operator delete(*(void **)a4);
  *(_OWORD *)a4 = v10;
  v7 = v11;
  *(_QWORD *)(a4 + 16) = v11;
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a4 + 8);
  if (v8 - 1 >= 2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>();
  return (uint64_t)&a2[i + 2];
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_class_escape<char const*>(std::basic_regex<char> *a1, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  int v7;
  int v8;
  int v9;
  char v10;
  char v11;
  unint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  unint64_t *v16;
  unint64_t v17;
  _BYTE *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  unint64_t v22;
  size_t v23;
  void *v24;
  unint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unint64_t v28;
  size_t v29;
  _BYTE *v30;
  uint64_t v31;
  char *v32;
  _BYTE *v33;
  char v34;
  unint64_t v35;
  _BYTE *v36;
  unint64_t v37;
  unint64_t v38;
  size_t v39;
  char *v40;
  char *v41;
  _BYTE *v42;
  char v43;
  _BYTE *v44;
  char v45;

  if (a2 == a3)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v7 = (char)*a2;
  if (v7 <= 97)
  {
    if (v7 <= 82)
    {
      if (!*a2)
      {
        if (*(char *)(a4 + 23) < 0)
        {
          *(_QWORD *)(a4 + 8) = 1;
          a4 = *(_QWORD *)a4;
        }
        else
        {
          *(_BYTE *)(a4 + 23) = 1;
        }
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 1) = 0;
        return a2 + 1;
      }
      if (v7 == 68)
      {
        v8 = *(_DWORD *)(a5 + 164) | 0x400;
LABEL_24:
        *(_DWORD *)(a5 + 164) = v8;
        return a2 + 1;
      }
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    }
    if (v7 == 83)
    {
      v8 = *(_DWORD *)(a5 + 164) | 0x4000;
      goto LABEL_24;
    }
    if (v7 != 87)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    *(_DWORD *)(a5 + 164) |= 0x500u;
    if (*(_BYTE *)(a5 + 169))
    {
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a5 + 24) + 40))(*(_QWORD *)(a5 + 24), 95);
      v11 = v10;
      v13 = *(_BYTE **)(a5 + 72);
      v12 = *(_QWORD *)(a5 + 80);
      if ((unint64_t)v13 < v12)
      {
        *v13 = v10;
        v14 = (uint64_t)(v13 + 1);
LABEL_60:
        *(_QWORD *)(a5 + 72) = v14;
        return a2 + 1;
      }
      v25 = *(_QWORD *)(a5 + 64);
      v26 = &v13[-v25];
      v27 = (uint64_t)&v13[-v25 + 1];
      if (v27 >= 0)
      {
        v28 = v12 - v25;
        if (2 * v28 > v27)
          v27 = 2 * v28;
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL)
          v29 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v29 = v27;
        if (v29)
          v30 = operator new(v29);
        else
          v30 = 0;
        v32 = &v30[v29];
        v26[(_QWORD)v30] = v11;
        v14 = (uint64_t)&v26[(_QWORD)v30 + 1];
        if (v13 == (_BYTE *)v25)
        {
          v30 = &v26[(_QWORD)v30];
        }
        else
        {
          v33 = &v13[~v25];
          do
          {
            v34 = *--v13;
            (v33--)[(_QWORD)v30] = v34;
          }
          while (v13 != (_BYTE *)v25);
          v13 = *(_BYTE **)(a5 + 64);
        }
        *(_QWORD *)(a5 + 64) = v30;
        *(_QWORD *)(a5 + 72) = v14;
        *(_QWORD *)(a5 + 80) = v32;
        if (v13)
          operator delete(v13);
        goto LABEL_60;
      }
LABEL_85:
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    }
    v16 = (unint64_t *)(a5 + 64);
    v18 = *(_BYTE **)(a5 + 72);
    v17 = *(_QWORD *)(a5 + 80);
    if (*(_BYTE *)(a5 + 170))
    {
      if ((unint64_t)v18 >= v17)
      {
        v19 = *v16;
        v20 = &v18[-*v16];
        v21 = (unint64_t)(v20 + 1);
        if ((uint64_t)(v20 + 1) < 0)
          goto LABEL_85;
        v22 = v17 - v19;
        if (2 * v22 > v21)
          v21 = 2 * v22;
        if (v22 >= 0x3FFFFFFFFFFFFFFFLL)
          v23 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v23 = v21;
        if (v23)
          v24 = operator new(v23);
        else
          v24 = 0;
        v40 = &v20[(_QWORD)v24];
        v41 = (char *)v24 + v23;
        v20[(_QWORD)v24] = 95;
        v31 = (uint64_t)&v20[(_QWORD)v24 + 1];
        if (v18 != (_BYTE *)v19)
        {
          v42 = &v18[~v19];
          do
          {
            v43 = *--v18;
            (v42--)[(_QWORD)v24] = v43;
          }
          while (v18 != (_BYTE *)v19);
LABEL_78:
          v18 = (_BYTE *)*v16;
          goto LABEL_80;
        }
        goto LABEL_79;
      }
    }
    else if ((unint64_t)v18 >= v17)
    {
      v35 = *v16;
      v36 = &v18[-*v16];
      v37 = (unint64_t)(v36 + 1);
      if ((uint64_t)(v36 + 1) < 0)
        goto LABEL_85;
      v38 = v17 - v35;
      if (2 * v38 > v37)
        v37 = 2 * v38;
      if (v38 >= 0x3FFFFFFFFFFFFFFFLL)
        v39 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v39 = v37;
      if (v39)
        v24 = operator new(v39);
      else
        v24 = 0;
      v40 = &v36[(_QWORD)v24];
      v41 = (char *)v24 + v39;
      v36[(_QWORD)v24] = 95;
      v31 = (uint64_t)&v36[(_QWORD)v24 + 1];
      if (v18 != (_BYTE *)v35)
      {
        v44 = &v18[~v35];
        do
        {
          v45 = *--v18;
          (v44--)[(_QWORD)v24] = v45;
        }
        while (v18 != (_BYTE *)v35);
        goto LABEL_78;
      }
LABEL_79:
      v24 = v40;
LABEL_80:
      *(_QWORD *)(a5 + 64) = v24;
      *(_QWORD *)(a5 + 72) = v31;
      *(_QWORD *)(a5 + 80) = v41;
      if (v18)
        operator delete(v18);
      goto LABEL_82;
    }
    *v18 = 95;
    v31 = (uint64_t)(v18 + 1);
LABEL_82:
    *(_QWORD *)(a5 + 72) = v31;
    return a2 + 1;
  }
  if (v7 <= 114)
  {
    if (v7 == 98)
    {
      if (*(char *)(a4 + 23) < 0)
      {
        *(_QWORD *)(a4 + 8) = 1;
        a4 = *(_QWORD *)a4;
      }
      else
      {
        *(_BYTE *)(a4 + 23) = 1;
      }
      *(_WORD *)a4 = 8;
      return a2 + 1;
    }
    if (v7 != 100)
      return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
    v9 = *(_DWORD *)(a5 + 160) | 0x400;
LABEL_26:
    *(_DWORD *)(a5 + 160) = v9;
    return a2 + 1;
  }
  if (v7 == 115)
  {
    v9 = *(_DWORD *)(a5 + 160) | 0x4000;
    goto LABEL_26;
  }
  if (v7 != 119)
    return std::basic_regex<char,std::regex_traits<char>>::__parse_character_escape<char const*>(a1, a2, a3, (uint64_t *)a4);
  *(_DWORD *)(a5 + 160) |= 0x500u;
  std::__bracket_expression<char,std::regex_traits<char>>::__add_char[abi:ne180100](a5, 95);
  return a2 + 1;
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(std::basic_regex<char> *a1, char *a2, char *a3, uint64_t *a4)
{
  int v5;
  std::basic_regex<char>::value_type v6;
  std::basic_regex<char>::value_type v7;
  std::basic_regex<char>::value_type v8;
  char *v9;
  char v10;
  int v11;
  std::basic_regex<char>::value_type v12;
  __int16 v13;

  if (a2 == a3)
LABEL_80:
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)3>();
  v5 = *a2;
  v6 = *a2;
  if (v5 > 97)
  {
    switch(*a2)
    {
      case 'n':
        if (!a4)
        {
          v7 = 10;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 10;
        goto LABEL_77;
      case 'o':
      case 'p':
      case 'q':
      case 's':
      case 'u':
        goto LABEL_25;
      case 'r':
        if (!a4)
        {
          v7 = 13;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 13;
        goto LABEL_77;
      case 't':
        if (!a4)
        {
          v7 = 9;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 9;
        goto LABEL_77;
      case 'v':
        if (!a4)
        {
          v7 = 11;
          break;
        }
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        v13 = 11;
        goto LABEL_77;
      default:
        if (v5 == 98)
        {
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 8;
            goto LABEL_77;
          }
          v7 = 8;
        }
        else
        {
          if (v5 != 102)
            goto LABEL_25;
          if (a4)
          {
            if (*((char *)a4 + 23) < 0)
            {
              a4[1] = 1;
              a4 = (uint64_t *)*a4;
            }
            else
            {
              *((_BYTE *)a4 + 23) = 1;
            }
            v13 = 12;
            goto LABEL_77;
          }
          v7 = 12;
        }
        break;
    }
LABEL_62:
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v7);
    return a2 + 1;
  }
  if (v5 > 91)
  {
    if (v5 == 92)
    {
LABEL_16:
      if (a4)
      {
        if (*((char *)a4 + 23) < 0)
        {
          a4[1] = 1;
          a4 = (uint64_t *)*a4;
        }
        else
        {
          *((_BYTE *)a4 + 23) = 1;
        }
        *(_BYTE *)a4 = v6;
        *((_BYTE *)a4 + 1) = 0;
        return a2 + 1;
      }
      v7 = *a2;
      goto LABEL_62;
    }
    if (v5 != 97)
      goto LABEL_25;
    if (a4)
    {
      if (*((char *)a4 + 23) < 0)
      {
        a4[1] = 1;
        a4 = (uint64_t *)*a4;
      }
      else
      {
        *((_BYTE *)a4 + 23) = 1;
      }
      v13 = 7;
LABEL_77:
      *(_WORD *)a4 = v13;
      return a2 + 1;
    }
    v7 = 7;
    goto LABEL_62;
  }
  if (v5 == 34 || v5 == 47)
    goto LABEL_16;
LABEL_25:
  if ((v6 & 0xF8) != 0x30)
    goto LABEL_80;
  v8 = v5 - 48;
  v9 = a2 + 1;
  if (a2 + 1 != a3)
  {
    if ((*v9 & 0xF8) != 0x30)
      goto LABEL_49;
    v8 = *v9 + 8 * v8 - 48;
    if (a2 + 2 != a3)
    {
      v10 = a2[2];
      v11 = v10 & 0xF8;
      v12 = v10 + 8 * v8 - 48;
      if (v11 == 48)
        v9 = a2 + 3;
      else
        v9 = a2 + 2;
      if (v11 == 48)
        v8 = v12;
      goto LABEL_49;
    }
  }
  v9 = a3;
LABEL_49:
  if (a4)
  {
    if (*((char *)a4 + 23) < 0)
    {
      a4[1] = 1;
      a4 = (uint64_t *)*a4;
    }
    else
    {
      *((_BYTE *)a4 + 23) = 1;
    }
    *(_BYTE *)a4 = v8;
    *((_BYTE *)a4 + 1) = 0;
  }
  else
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
  }
  return v9;
}

void std::__bracket_expression<char,std::regex_traits<char>>::__add_digraph[abi:ne180100](uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  _WORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _WORD *v24;
  _WORD *v25;
  uint64_t v26;
  char *v27;
  char *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  __int16 v38;
  char *v39;
  __int16 v40;

  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
    v8 = *(_WORD **)(a1 + 120);
    v16 = *(_QWORD *)(a1 + 128);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v17 = *(_QWORD *)(a1 + 112);
      v18 = (uint64_t)v8 - v17;
      if ((uint64_t)v8 - v17 > -3)
      {
        v19 = v18 >> 1;
        v20 = v16 - v17;
        if (v20 <= (v18 >> 1) + 1)
          v21 = v19 + 1;
        else
          v21 = v20;
        if (v20 >= 0x7FFFFFFFFFFFFFFELL)
          v22 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        if (v22)
          v22 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v22);
        else
          v23 = 0;
        v25 = (_WORD *)(v22 + 2 * v19);
        v26 = v22 + 2 * v23;
        *v25 = v6;
        v24 = v25 + 1;
        v37 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v37)
          goto LABEL_46;
        do
        {
          v38 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v38;
        }
        while (v27 != v37);
        goto LABEL_45;
      }
    }
    else
    {
      if ((unint64_t)v8 < v16)
        goto LABEL_24;
      v30 = *(_QWORD *)(a1 + 112);
      v31 = (uint64_t)v8 - v30;
      if ((uint64_t)v8 - v30 > -3)
      {
        v32 = v31 >> 1;
        v33 = v16 - v30;
        if (v33 <= (v31 >> 1) + 1)
          v34 = v32 + 1;
        else
          v34 = v33;
        if (v33 >= 0x7FFFFFFFFFFFFFFELL)
          v35 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        if (v35)
          v35 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v35);
        else
          v36 = 0;
        v25 = (_WORD *)(v35 + 2 * v32);
        v26 = v35 + 2 * v36;
        *v25 = v6;
        v24 = v25 + 1;
        v39 = *(char **)(a1 + 112);
        v27 = *(char **)(a1 + 120);
        if (v27 == v39)
          goto LABEL_46;
        do
        {
          v40 = *((_WORD *)v27 - 1);
          v27 -= 2;
          *--v25 = v40;
        }
        while (v27 != v39);
        goto LABEL_45;
      }
    }
LABEL_49:
    std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
  }
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
  v8 = *(_WORD **)(a1 + 120);
  v7 = *(_QWORD *)(a1 + 128);
  if ((unint64_t)v8 < v7)
  {
LABEL_24:
    *v8 = v6;
    v24 = v8 + 1;
    goto LABEL_48;
  }
  v9 = *(_QWORD *)(a1 + 112);
  v10 = (uint64_t)v8 - v9;
  if ((uint64_t)v8 - v9 <= -3)
    goto LABEL_49;
  v11 = v10 >> 1;
  v12 = v7 - v9;
  if (v12 <= (v10 >> 1) + 1)
    v13 = v11 + 1;
  else
    v13 = v12;
  if (v12 >= 0x7FFFFFFFFFFFFFFELL)
    v14 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v14 = v13;
  if (v14)
    v14 = (uint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(v14);
  else
    v15 = 0;
  v25 = (_WORD *)(v14 + 2 * v11);
  v26 = v14 + 2 * v15;
  *v25 = v6;
  v24 = v25 + 1;
  v28 = *(char **)(a1 + 112);
  v27 = *(char **)(a1 + 120);
  if (v27 == v28)
    goto LABEL_46;
  do
  {
    v29 = *((_WORD *)v27 - 1);
    v27 -= 2;
    *--v25 = v29;
  }
  while (v27 != v28);
LABEL_45:
  v27 = *(char **)(a1 + 112);
LABEL_46:
  *(_QWORD *)(a1 + 112) = v25;
  *(_QWORD *)(a1 + 120) = v24;
  *(_QWORD *)(a1 + 128) = v26;
  if (v27)
    operator delete(v27);
LABEL_48:
  *(_QWORD *)(a1 + 120) = v24;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)1>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 1);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF31914(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::regex_traits<char>::__lookup_collatename<char const*>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  std::string *p_s;
  unint64_t v7;
  unint64_t v8;
  std::string::size_type size;
  std::string *v10;
  int v11;
  uint64_t v12;
  std::string v13;
  std::string __s;

  memset(&__s, 0, sizeof(__s));
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__s, a3, a4, a4 - a3);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!__s.__r_.__value_.__l.__size_)
      goto LABEL_9;
    p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    if (!*((_BYTE *)&__s.__r_.__value_.__s + 23))
      return;
    p_s = &__s;
  }
  std::__get_collation_name(&v13, (const char *)p_s);
  *(_OWORD *)a1 = *(_OWORD *)&v13.__r_.__value_.__l.__data_;
  v7 = v13.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a1 + 16) = *((_QWORD *)&v13.__r_.__value_.__l + 2);
  v8 = HIBYTE(v7);
  if ((v8 & 0x80u) != 0)
    v8 = *(_QWORD *)(a1 + 8);
  if (v8)
    goto LABEL_9;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
  {
    size = __s.__r_.__value_.__l.__size_;
    if (__s.__r_.__value_.__l.__size_ >= 3)
      goto LABEL_9;
    v10 = (std::string *)__s.__r_.__value_.__r.__words[0];
  }
  else
  {
    size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if (HIBYTE(__s.__r_.__value_.__r.__words[2]) >= 3u)
      return;
    v10 = &__s;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD, std::string *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v13, *(_QWORD *)(a2 + 16), v10, (char *)v10 + size);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  *(std::string *)a1 = v13;
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    v11 = *(unsigned __int8 *)(a1 + 23);
    if (v11 != 12 && v11 != 1)
    {
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 23) = 0;
      goto LABEL_9;
    }
    goto LABEL_25;
  }
  v12 = *(_QWORD *)(a1 + 8);
  if (v12 == 1 || v12 == 12)
  {
LABEL_25:
    std::string::operator=((std::string *)a1, &__s);
    goto LABEL_9;
  }
  **(_BYTE **)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
LABEL_9:
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
}

void sub_1BEF31A9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
    operator delete(*(void **)v17);
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)2>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 2);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF31B08(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::vector<std::pair<std::string,std::string>>::push_back[abi:ne180100](void **a1, __int128 *a2)
{
  char *v4;
  char *v5;
  __int128 v6;
  __int128 v7;
  char *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  __int128 v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  if (v4 >= v5)
  {
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a1) >> 4);
    v10 = v9 + 1;
    if (v9 + 1 > 0x555555555555555)
      std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
    v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 4);
    if (2 * v11 > v10)
      v10 = 2 * v11;
    if (v11 >= 0x2AAAAAAAAAAAAAALL)
      v12 = 0x555555555555555;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 > 0x555555555555555)
        std::__throw_bad_array_new_length[abi:ne180100]();
      v13 = (char *)operator new(48 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[48 * v9];
    *(_OWORD *)v14 = *a2;
    *((_QWORD *)v14 + 2) = *((_QWORD *)a2 + 2);
    v15 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)a2 + 2) = 0;
    *((_QWORD *)a2 + 3) = 0;
    *(_QWORD *)a2 = 0;
    *((_QWORD *)a2 + 1) = 0;
    *(_OWORD *)(v14 + 24) = v15;
    *((_QWORD *)v14 + 5) = *((_QWORD *)a2 + 5);
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    v16 = (char *)*a1;
    v17 = (char *)a1[1];
    if (v17 == *a1)
    {
      v8 = v14 + 48;
      *a1 = v14;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
    }
    else
    {
      v18 = &v13[48 * v9];
      do
      {
        v19 = *((_OWORD *)v17 - 3);
        *((_QWORD *)v18 - 4) = *((_QWORD *)v17 - 4);
        *((_OWORD *)v18 - 3) = v19;
        *((_QWORD *)v17 - 5) = 0;
        *((_QWORD *)v17 - 4) = 0;
        *((_QWORD *)v17 - 6) = 0;
        v20 = *(_OWORD *)(v17 - 24);
        *((_QWORD *)v18 - 1) = *((_QWORD *)v17 - 1);
        *(_OWORD *)(v18 - 24) = v20;
        v18 -= 48;
        *((_QWORD *)v17 - 2) = 0;
        *((_QWORD *)v17 - 1) = 0;
        *((_QWORD *)v17 - 3) = 0;
        v17 -= 48;
      }
      while (v17 != v16);
      v17 = (char *)*a1;
      v21 = (uint64_t)a1[1];
      v8 = v14 + 48;
      *a1 = v18;
      a1[1] = v14 + 48;
      a1[2] = &v13[48 * v12];
      while ((char *)v21 != v17)
      {
        v21 -= 48;
        std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::string>,0>(v21);
      }
    }
    if (v17)
      operator delete(v17);
  }
  else
  {
    v6 = *a2;
    *((_QWORD *)v4 + 2) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v4 = v6;
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v7 = *(__int128 *)((char *)a2 + 24);
    *((_QWORD *)v4 + 5) = *((_QWORD *)a2 + 5);
    *(_OWORD *)(v4 + 24) = v7;
    *((_QWORD *)a2 + 4) = 0;
    *((_QWORD *)a2 + 5) = 0;
    *((_QWORD *)a2 + 3) = 0;
    v8 = v4 + 48;
  }
  a1[1] = v8;
}

void std::regex_traits<char>::transform<std::__wrap_iter<char *>>(uint64_t a1, uint64_t a2, char *a3, char *a4)
{
  uint64_t v5;
  char *p_p;
  void *__p;
  uint64_t v8;
  uint64_t v9;

  __p = 0;
  v8 = 0;
  v9 = 0;
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a3, a4, a4 - a3);
  v5 = HIBYTE(v9);
  if (v9 >= 0)
    p_p = (char *)&__p;
  else
    p_p = (char *)__p;
  if (v9 < 0)
    v5 = v8;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), p_p, &p_p[v5]);
  if (SHIBYTE(v9) < 0)
    operator delete(__p);
}

void sub_1BEF31D7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)9>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 9);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF31DD0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<std::pair<char,char>>>(uint64_t a1)
{
  if (a1 < 0)
    std::__throw_bad_array_new_length[abi:ne180100]();
  return operator new(2 * a1);
}

void (__cdecl ***std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__begin_marked_subexpression<char>::~__begin_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__begin_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__end_marked_subexpression<char>::~__end_marked_subexpression(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__end_marked_subexpression<char>::__exec(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::basic_regex<char,std::regex_traits<char>>::__push_loop(std::basic_regex<char> *this, size_t __min, size_t __max, std::__owns_one_state<char> *__s, size_t __mexp_begin, size_t __mexp_end, BOOL __greedy)
{
  int v8;
  int v9;
  _QWORD *v14;
  std::__owns_one_state<char> *end;
  std::__node<char> *first;
  uint64_t v17;
  unsigned int loop_count;
  std::__node<char> *v19;
  std::__node<char> *v20;

  v8 = __mexp_end;
  v9 = __mexp_begin;
  v14 = (_QWORD *)operator new();
  end = this->__end_;
  first = end->__first_;
  v14[1] = first;
  end->__first_ = 0;
  v17 = operator new();
  loop_count = this->__loop_count_;
  v19 = __s->__first_;
  *(_QWORD *)v17 = &off_1E78C7B20;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = __min;
  *(_QWORD *)(v17 + 32) = __max;
  *(_DWORD *)(v17 + 40) = loop_count;
  *(_DWORD *)(v17 + 44) = v9;
  *(_DWORD *)(v17 + 48) = v8;
  *(_BYTE *)(v17 + 52) = __greedy;
  __s->__first_ = 0;
  v20 = (std::__node<char> *)operator new();
  v20->__vftable = (std::__node<char>_vtbl *)&off_1E78C7BB0;
  v20[1].__vftable = (std::__node<char>_vtbl *)v17;
  this->__end_->__first_ = v20;
  this->__end_ = *(std::__owns_one_state<char> **)(v17 + 16);
  __s->__first_ = (std::__node<char> *)v17;
  ++this->__loop_count_;
}

void sub_1BEF320B0(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(unsigned __int8 *result, unsigned __int8 *a2, int *a3)
{
  int v3;
  int v4;
  int v5;

  if (result != a2)
  {
    v3 = *result;
    if ((v3 & 0xF8) == 0x30 || (v3 & 0xFE) == 0x38)
    {
      v4 = v3 - 48;
      *a3 = v4;
      if (++result == a2)
      {
        return a2;
      }
      else
      {
        while (1)
        {
          v5 = *result;
          if ((v5 & 0xF8) != 0x30 && (v5 & 0xFE) != 0x38)
            break;
          if (v4 >= 214748364)
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
          v4 = v5 + 10 * v4 - 48;
          *a3 = v4;
          if (++result == a2)
            return a2;
        }
      }
    }
  }
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 8);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF321A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 7);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF321F4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void (__cdecl ***std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7B80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__loop<char>::~__loop(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7B80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B87100);
}

unsigned int *std::__loop<char>::__exec(unsigned int *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  uint64_t v10;

  v2 = result[10];
  v3 = a2[7];
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 == -991)
  {
    v5 = *v4 + 1;
    *v4 = v5;
    v6 = *((_QWORD *)result + 3);
    v7 = *((_QWORD *)result + 4);
    v8 = v5 < v7;
    if (v5 < v7 && v5 >= v6)
    {
      v10 = *(_QWORD *)(v3 + 16 * v2 + 8);
      v8 = v5 < v7 && v10 != a2[2];
    }
    if (!v8 || v5 < v6)
    {
      *(_DWORD *)a2 = -994;
      if (!v8)
        goto LABEL_25;
LABEL_22:
      a2[10] = *((_QWORD *)result + 1);
      return std::__loop<char>::__init_repeat[abi:ne180100](result, a2);
    }
    goto LABEL_23;
  }
  *v4 = 0;
  if (*((_QWORD *)result + 4))
  {
    if (*((_QWORD *)result + 3))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_22;
    }
LABEL_23:
    *(_DWORD *)a2 = -992;
    return result;
  }
  *(_DWORD *)a2 = -994;
LABEL_25:
  a2[10] = *((_QWORD *)result + 2);
  return result;
}

unsigned int *std::__loop<char>::__exec_split(unsigned int *result, int a2, _QWORD *a3)
{
  *(_DWORD *)a3 = -994;
  if (*((unsigned __int8 *)result + 52) == a2)
  {
    a3[10] = *((_QWORD *)result + 2);
  }
  else
  {
    a3[10] = *((_QWORD *)result + 1);
    return std::__loop<char>::__init_repeat[abi:ne180100](result, a3);
  }
  return result;
}

void (__cdecl ***std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7B80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__owns_two_states<char>::~__owns_two_states(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7B80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B87100);
}

unsigned int *std::__loop<char>::__init_repeat[abi:ne180100](unsigned int *result, _QWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;

  v2 = result[11];
  *(_QWORD *)(a2[7] + 16 * result[10] + 8) = a2[2];
  v3 = result[12];
  if (v2 != v3)
  {
    v4 = v2 - 1;
    v5 = a2[3];
    v6 = v3 - 1 - v4;
    v7 = (_BYTE *)(a2[4] + 24 * v4 + 16);
    do
    {
      *((_QWORD *)v7 - 2) = v5;
      *((_QWORD *)v7 - 1) = v5;
      *v7 = 0;
      v7 += 24;
      --v6;
    }
    while (v6);
  }
  return result;
}

void std::__repeat_one_loop<char>::~__repeat_one_loop()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__repeat_one_loop<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void (__cdecl ***std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7B80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  return a1;
}

void std::__alternate<char>::~__alternate(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);
  void (__cdecl **v3)(std::__owns_one_state<char> *__hidden);

  *a1 = (void (__cdecl **)(std::__owns_one_state<char> *__hidden))&off_1E78C7B80;
  v2 = a1[2];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  v3 = a1[1];
  if (v3)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v3 + 1))(v3);
  JUMPOUT(0x1C3B87100);
}

void std::__alternate<char>::__exec(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t std::__alternate<char>::__exec_split(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void std::__empty_non_own_state<char>::~__empty_non_own_state()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__empty_non_own_state<char>::__exec(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x1C3B86D88](exception, 15);
  __cxa_throw(exception, MEMORY[0x1E0DE4E20], MEMORY[0x1E0DE43B8]);
}

void sub_1BEF3266C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  char *v3;
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  unsigned __int8 *v9;
  char *v10;
  char *v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  char *v15;
  int v17;
  std::__node<char> *v18;
  std::__owns_one_state<char> *v19;
  std::__node<char> *first;
  _BOOL4 v21;
  uint64_t v22;
  size_t v23;
  int v24;
  unsigned __int8 *v25;
  char *v26;
  int v27;
  unsigned __int8 *v28;
  size_t v29;
  size_t v30;
  std::basic_regex<char> *v31;
  int v33;
  int v34;

  v3 = a2;
  if (a2 != a3)
  {
    end = a1->__end_;
    marked_count = a1->__marked_count_;
    v9 = (unsigned __int8 *)(a2 + 1);
    v8 = *a2;
    if (a2 + 1 != a3 || v8 != 36)
    {
      if ((v8 - 46) > 0x2E || ((1 << (v8 - 46)) & 0x600000000001) == 0)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v8);
        goto LABEL_32;
      }
      if (v9 == (unsigned __int8 *)a3 || v8 != 92)
      {
        if (v8 == 46)
        {
          v18 = (std::__node<char> *)operator new();
          v19 = a1->__end_;
          first = v19->__first_;
          v18->__vftable = (std::__node<char>_vtbl *)&off_1E78C7C88;
          v18[1].__vftable = (std::__node<char>_vtbl *)first;
          v19->__first_ = v18;
          a1->__end_ = (std::__owns_one_state<char> *)a1->__end_->__first_;
          goto LABEL_32;
        }
      }
      else
      {
        v17 = (char)*v9;
        if ((v17 - 36) <= 0x3A && ((1 << (v17 - 36)) & 0x580000000000441) != 0)
        {
          std::basic_regex<char,std::regex_traits<char>>::__push_char(a1, v17);
          v9 = (unsigned __int8 *)(v3 + 2);
          goto LABEL_32;
        }
      }
    }
    v10 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)a1, a2, a3);
    v11 = v10;
    if (v10 == v3 && v10 != a3)
    {
      if (v9 == (unsigned __int8 *)a3 || *v3 != 92)
        return v3;
      v12 = *v9;
      if (v12 == 40)
      {
        v13 = (uint64_t)(v3 + 2);
        std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(a1);
        v14 = a1->__marked_count_;
        do
        {
          v15 = (char *)v13;
          v13 = std::basic_regex<char,std::regex_traits<char>>::__parse_simple_RE<char const*>(a1, v13, a3);
        }
        while ((char *)v13 != v15);
        if (v15 == a3 || v15 + 1 == a3 || *v15 != 92 || v15[1] != 41)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
        v11 = v15 + 2;
        std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(a1, v14);
      }
      else
      {
        v21 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(a1, v12);
        v22 = 2;
        if (!v21)
          v22 = 0;
        v11 = &v3[v22];
      }
    }
    v9 = (unsigned __int8 *)v11;
    if (v11 != v3)
    {
LABEL_32:
      if (v9 == (unsigned __int8 *)a3)
        return a3;
      v23 = a1->__marked_count_ + 1;
      v24 = *v9;
      if (v24 == 42)
      {
        std::basic_regex<char,std::regex_traits<char>>::__push_loop(a1, 0, 0xFFFFFFFFFFFFFFFFLL, end, marked_count + 1, a1->__marked_count_ + 1, 1);
        return (char *)(v9 + 1);
      }
      if (v9 + 1 == (unsigned __int8 *)a3 || v24 != 92 || v9[1] != 123)
        return (char *)v9;
      v34 = 0;
      v25 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v9 + 2, (unsigned __int8 *)a3, &v34);
      if (v25 == v9 + 2)
LABEL_48:
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)8>();
      if (v25 != (unsigned __int8 *)a3)
      {
        v26 = (char *)(v25 + 1);
        v27 = *v25;
        if (v27 == 44)
        {
          v33 = -1;
          v28 = std::basic_regex<char,std::regex_traits<char>>::__parse_DUP_COUNT<char const*>(v25 + 1, (unsigned __int8 *)a3, &v33);
          if (v28 != (unsigned __int8 *)a3 && v28 + 1 != (unsigned __int8 *)a3 && *v28 == 92 && v28[1] == 125)
          {
            v30 = v33;
            v29 = v34;
            if (v33 == -1)
            {
              v30 = -1;
            }
            else if (v33 < v34)
            {
              goto LABEL_48;
            }
            v3 = (char *)&v28[2 * (v28[1] == 125)];
            v31 = a1;
LABEL_56:
            std::basic_regex<char,std::regex_traits<char>>::__push_loop(v31, v29, v30, end, marked_count + 1, v23, 1);
            return v3;
          }
        }
        else if (v26 != a3 && v27 == 92 && *v26 == 125)
        {
          v3 = (char *)(v25 + 2);
          v29 = v34;
          v31 = a1;
          v30 = v34;
          goto LABEL_56;
        }
      }
      std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)7>();
    }
  }
  return v3;
}

void (__cdecl ***std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this)))(std::__owns_one_state<char> *__hidden this)
{
  void (__cdecl **v2)(std::__owns_one_state<char> *__hidden);

  v2 = a1[1];
  if (v2)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v2 + 1))(v2);
  return a1;
}

void std::__match_any<char>::~__match_any(void (__cdecl ***a1)(std::__owns_one_state<char> *__hidden this))
{
  void (__cdecl **v1)(std::__owns_one_state<char> *__hidden);

  v1 = a1[1];
  if (v1)
    (*((void (**)(void (__cdecl **)(std::__owns_one_state<char> *__hidden)))*v1 + 1))(v1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__match_any<char>::__exec(uint64_t result, uint64_t a2)
{
  _BYTE *v2;
  uint64_t v3;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    v3 = 0;
    *(_DWORD *)a2 = -993;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    v3 = *(_QWORD *)(result + 8);
  }
  *(_QWORD *)(a2 + 80) = v3;
  return result;
}

BOOL std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(std::basic_regex<char> *this, char a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > this->__marked_count_)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)4>();
  std::basic_regex<char,std::regex_traits<char>>::__push_back_ref(this, a2 - 48);
  return 1;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_branch<char const*>(std::basic_regex<char> *a1, char *a2, char *a3)
{
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, a2, a3);
  if (v6 == (unsigned __int8 *)a2)
    std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)15>();
  do
  {
    v7 = v6;
    v6 = std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(a1, (char *)v6, a3);
  }
  while (v6 != v7);
  return v7;
}

unsigned __int8 *std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_expression<char const*>(std::basic_regex<char> *this, char *a2, char *a3)
{
  std::__owns_one_state<char> *end;
  unsigned int marked_count;
  int v8;
  int v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  std::basic_regex<char>::value_type v13;
  char *v14;
  _BOOL4 v15;
  uint64_t v16;
  std::__node<char> *v17;
  std::__owns_one_state<char> *v18;
  std::__node<char> *first;
  int v20;
  uint64_t v21;
  BOOL v22;
  std::__owns_one_state<char> *v23;
  std::__node<char> *v24;
  uint64_t (**v25)();
  unsigned int v26;
  char *v27;
  char *v28;

  end = this->__end_;
  marked_count = this->__marked_count_;
  if (a2 == a3)
  {
LABEL_24:
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_bracket_expression<char const*>((uint64_t)this, a2, a3);
    goto LABEL_25;
  }
  v8 = *a2;
  v9 = *a2;
  v10 = (v8 - 36);
  if (v10 > 0x3A)
    goto LABEL_13;
  if (((1 << (v8 - 36)) & 0x5800000080004D1) == 0)
  {
    if (v10 == 5)
    {
      if (this->__open_count_)
        goto LABEL_4;
LABEL_14:
      std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v9);
LABEL_33:
      v11 = (unsigned __int8 *)(a2 + 1);
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v11, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
LABEL_13:
    if ((v8 - 123) < 2)
      goto LABEL_4;
    goto LABEL_14;
  }
LABEL_4:
  v11 = (unsigned __int8 *)(a2 + 1);
  if (a2 + 1 == a3 || v9 != 92)
  {
LABEL_22:
    if (v9 == 46)
    {
      v17 = (std::__node<char> *)operator new();
      v18 = this->__end_;
      first = v18->__first_;
      v17->__vftable = (std::__node<char>_vtbl *)&off_1E78C7C88;
      v17[1].__vftable = (std::__node<char>_vtbl *)first;
      v18->__first_ = v17;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v11, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
    }
    goto LABEL_24;
  }
  v12 = (char)*v11;
  v13 = *v11;
  if ((v12 - 36) <= 0x3A && ((1 << (v12 - 36)) & 0x5800000080004F1) != 0
    || (v12 - 123) < 3)
  {
    std::basic_regex<char,std::regex_traits<char>>::__push_char(this, v13);
    v11 = (unsigned __int8 *)(a2 + 2);
    return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v11, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
  }
  if ((this->__flags_ & 0x1F0) == 0x40)
  {
    v14 = std::basic_regex<char,std::regex_traits<char>>::__parse_awk_escape<char const*>(this, a2 + 1, a3, 0);
  }
  else
  {
    v15 = std::basic_regex<char,std::regex_traits<char>>::__test_back_ref(this, v13);
    v16 = 2;
    if (!v15)
      v16 = 0;
    v14 = &a2[v16];
  }
  if (v14 == a2)
  {
    v9 = *a2;
    goto LABEL_22;
  }
LABEL_25:
  if (v14 != a2 || v14 == a3)
    goto LABEL_37;
  v20 = *a2;
  switch(v20)
  {
    case '$':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_1E78C7778;
      goto LABEL_32;
    case '(':
      std::basic_regex<char,std::regex_traits<char>>::__push_begin_marked_subexpression(this);
      v26 = this->__marked_count_;
      ++this->__open_count_;
      v27 = (char *)std::basic_regex<char,std::regex_traits<char>>::__parse_extended_reg_exp<char const*>(this, a2 + 1, a3);
      if (v27 == a3 || (v28 = v27, *v27 != 41))
        std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)6>();
      std::basic_regex<char,std::regex_traits<char>>::__push_end_marked_subexpression(this, v26);
      --this->__open_count_;
      v14 = v28 + 1;
LABEL_37:
      v11 = (unsigned __int8 *)v14;
      if (v14 != a2)
        return std::basic_regex<char,std::regex_traits<char>>::__parse_ERE_dupl_symbol<char const*>((uint64_t)this, v11, (unsigned __int8 *)a3, end, marked_count + 1, this->__marked_count_ + 1);
      return (unsigned __int8 *)a2;
    case '^':
      v21 = operator new();
      v22 = (this->__flags_ & 0x5F0) == 1024;
      v23 = this->__end_;
      v24 = v23->__first_;
      v25 = &off_1E78C7730;
LABEL_32:
      *(_QWORD *)v21 = v25;
      *(_QWORD *)(v21 + 8) = v24;
      *(_BYTE *)(v21 + 16) = v22;
      v23->__first_ = (std::__node<char> *)v21;
      this->__end_ = (std::__owns_one_state<char> *)this->__end_->__first_;
      goto LABEL_33;
  }
  return (unsigned __int8 *)a2;
}

uint64_t std::basic_regex<char,std::regex_traits<char>>::__match_at_start<std::allocator<std::sub_match<char const*>>>(uint64_t a1, uint64_t a2, const char *a3, uint64_t *a4, int a5, char a6)
{
  int v7;
  uint64_t v10;
  uint64_t v12;
  _QWORD *v13;
  const char *v14;
  char v15;
  unsigned int v16;
  const char *v17;
  _DWORD *v18;
  BOOL v19;
  uint64_t v20;
  _QWORD *v21;
  _OWORD *v22;
  uint64_t v23;
  char *v24;
  __int128 v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  const char *v30;
  char *v31;
  __int128 *v32;
  __int128 *v33;
  unint64_t v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  char *v40;
  __int128 v41;
  __int128 *v42;
  char *v43;
  char *v44;
  char *v45;
  __int128 v46;
  int64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  unint64_t v52;
  char *v53;
  uint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  __int128 v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  char *v64;
  __int128 v65;
  int64_t v66;
  char *v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  uint64_t v72;
  void *v73;
  _BYTE *v74;
  unsigned int v75;
  uint64_t v76;
  char v77;
  uint64_t v79;
  _QWORD *v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  _QWORD *v88;
  unint64_t v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t v92;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  const char *v102;
  void **v103;
  _BYTE *v104;
  _QWORD *v105;
  _QWORD *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t v109;
  char *v110;
  char *v111;
  unint64_t v112;
  uint64_t v113;
  __int128 v114;
  uint64_t v115;
  unint64_t v116;
  uint64_t v117;
  uint64_t *v118;
  char *v119;
  void *v120;
  char *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  size_t v125;
  void *v126;
  char *v127;
  unint64_t v128;
  char *v129;
  uint64_t v130;
  BOOL v131;
  uint64_t v132;
  uint64_t v133;
  char *v134;
  uint64_t v135;
  uint64_t v136;
  void *v137;
  uint64_t v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  char *v142;
  unint64_t v143;
  uint64_t v144;
  __int128 v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  uint64_t *v150;
  char *v151;
  uint64_t v152;
  uint64_t v153;
  char *v154;
  char *v155;
  const char *v156;
  uint64_t v157;
  uint64_t v158;
  char *v159;
  int64_t v160;
  char v161;
  char v162;
  const char *v163;
  void *v164[2];
  __int128 v165;
  int64x2_t v166;
  _OWORD v167[6];
  std::vector<std::csub_match>::value_type __x;

  v7 = a5;
  v10 = a2;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
    return std::basic_regex<char,std::regex_traits<char>>::__match_at_start_ecma<std::allocator<std::sub_match<char const*>>>(a1, a2, a3, a4, a5, a6);
  v162 = a5;
  if (*(_DWORD *)(a1 + 28))
  {
    v164[0] = 0;
    v164[1] = 0;
    *(_QWORD *)&v165 = 0;
    v12 = *(_QWORD *)(a1 + 40);
    if (v12)
    {
      __x.second = a3;
      *(_QWORD *)&__x.matched = 0;
      __x.first = a3;
      LODWORD(v167[0]) = 0;
      memset((char *)v167 + 8, 0, 80);
      *(_QWORD *)((char *)&v167[5] + 5) = 0;
      v164[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v164, (uint64_t)v167);
      if (*((_QWORD *)&v167[3] + 1))
        operator delete(*((void **)&v167[3] + 1));
      if (*(_QWORD *)&v167[2])
        operator delete(*(void **)&v167[2]);
      v149 = a4;
      v13 = v164[1];
      *((_DWORD *)v164[1] - 24) = 0;
      *(v13 - 11) = v10;
      *(v13 - 10) = v10;
      *(v13 - 9) = a3;
      std::vector<std::sub_match<char const*>>::resize((std::vector<std::csub_match> *)(v13 - 8), *(unsigned int *)(a1 + 28), &__x);
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)((char *)v164[1] - 40), *(unsigned int *)(a1 + 32));
      v154 = 0;
      v155 = 0;
      v157 = v10;
      v159 = 0;
      v153 = 0;
      v151 = 0;
      v152 = 0;
      v14 = 0;
      v15 = 0;
      v16 = 0;
      v17 = &a3[-v10];
      v18 = v164[1];
      *((_QWORD *)v164[1] - 2) = v12;
      *(v18 - 2) = v7;
      *((_BYTE *)v18 - 4) = a6;
      do
      {
        v19 = (++v16 & 0xFFF) != 0 || (int)(v16 >> 12) < (int)v17;
        if (!v19)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v21 = v18 - 4;
        v20 = *((_QWORD *)v18 - 2);
        v22 = v18 - 24;
        if (v20)
          (*(void (**)(uint64_t, _DWORD *))(*(_QWORD *)v20 + 16))(v20, v18 - 24);
        switch(*(_DWORD *)v22)
        {
          case 0xFFFFFC18:
            v23 = *((_QWORD *)v18 - 10);
            if ((v162 & 0x20) != 0 && v23 == v157)
              goto LABEL_19;
            v30 = (const char *)(v23 - *((_QWORD *)v18 - 11));
            if ((v15 & ((uint64_t)v14 >= (uint64_t)v30)) != 0)
            {
              v31 = v159;
            }
            else
            {
              v33 = (__int128 *)*((_QWORD *)v18 - 8);
              v32 = (__int128 *)*((_QWORD *)v18 - 7);
              v34 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v33) >> 3);
              v35 = v159;
              if (0xAAAAAAAAAAAAAAABLL * ((v153 - (uint64_t)v155) >> 3) >= v34)
              {
                if (0xAAAAAAAAAAAAAAABLL * ((v159 - v155) >> 3) >= v34)
                {
                  if (v33 == v32)
                  {
                    v49 = v155;
                  }
                  else
                  {
                    v48 = v155;
                    v49 = v155;
                    do
                    {
                      *(_OWORD *)v48 = *v33;
                      v48[16] = *((_BYTE *)v33 + 16);
                      v49 += 24;
                      v33 = (__int128 *)((char *)v33 + 24);
                      v48 += 24;
                    }
                    while (v33 != v32);
                  }
                  v47 = v49 - v155;
                  v35 = v155;
                }
                else
                {
                  v42 = (__int128 *)((char *)v33 + 8 * ((v159 - v155) >> 3));
                  if (v159 != v155)
                  {
                    v43 = v155;
                    do
                    {
                      *(_OWORD *)v43 = *v33;
                      v43[16] = *((_BYTE *)v33 + 16);
                      v33 = (__int128 *)((char *)v33 + 24);
                      v43 += 24;
                    }
                    while (v33 != v42);
                  }
                  v44 = v159;
                  if (v42 != v32)
                  {
                    v45 = v159;
                    do
                    {
                      v46 = *v42;
                      *((_QWORD *)v45 + 2) = *((_QWORD *)v42 + 2);
                      *(_OWORD *)v45 = v46;
                      v45 += 24;
                      v42 = (__int128 *)((char *)v42 + 24);
                      v44 += 24;
                    }
                    while (v42 != v32);
                  }
                  v47 = v44 - v159;
                }
              }
              else
              {
                if (v155)
                {
                  operator delete(v155);
                  v153 = 0;
                }
                if (v34 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_203;
                v36 = 0x5555555555555556 * (v153 >> 3);
                if (v36 <= v34)
                  v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v32 - (char *)v33) >> 3);
                v37 = 0xAAAAAAAAAAAAAAABLL * (v153 >> 3) >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v36;
                if (v37 > 0xAAAAAAAAAAAAAAALL)
LABEL_203:
                  std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::sub_match<char const*>>>(v37);
                v35 = v38;
                v40 = v38;
                while (v33 != v32)
                {
                  v41 = *v33;
                  *((_QWORD *)v40 + 2) = *((_QWORD *)v33 + 2);
                  *(_OWORD *)v40 = v41;
                  v40 += 24;
                  v33 = (__int128 *)((char *)v33 + 24);
                }
                v153 = (uint64_t)&v38[24 * v39];
                v47 = v40 - v38;
                v155 = v38;
              }
              v51 = (char *)*((_QWORD *)v18 - 5);
              v50 = (char *)*((_QWORD *)v18 - 4);
              v52 = (v50 - v51) >> 4;
              if (v52 <= (v152 - (uint64_t)v154) >> 4)
              {
                v60 = (v151 - v154) >> 4;
                if (v60 >= v52)
                {
                  if (v51 == v50)
                  {
                    v68 = v154;
                  }
                  else
                  {
                    v67 = v154;
                    v68 = v154;
                    do
                    {
                      *(_QWORD *)v67 = *(_QWORD *)v51;
                      *((_QWORD *)v67 + 1) = *((_QWORD *)v51 + 1);
                      v68 += 16;
                      v51 += 16;
                      v67 += 16;
                    }
                    while (v51 != v50);
                  }
                  v66 = v68 - v154;
                  v56 = v154;
                }
                else
                {
                  v61 = &v51[16 * v60];
                  if (v151 != v154)
                  {
                    v62 = v154;
                    do
                    {
                      *(_QWORD *)v62 = *(_QWORD *)v51;
                      *((_QWORD *)v62 + 1) = *((_QWORD *)v51 + 1);
                      v51 += 16;
                      v62 += 16;
                    }
                    while (v51 != v61);
                  }
                  if (v61 == v50)
                  {
                    v56 = v151;
                    v63 = v151;
                  }
                  else
                  {
                    v56 = v151;
                    v63 = v151;
                    v64 = v151;
                    do
                    {
                      v65 = *(_OWORD *)v61;
                      v61 += 16;
                      *(_OWORD *)v64 = v65;
                      v64 += 16;
                      v63 += 16;
                    }
                    while (v61 != v50);
                  }
                  v66 = v63 - v56;
                }
              }
              else
              {
                v160 = v47;
                v53 = v35;
                if (v154)
                {
                  operator delete(v154);
                  v152 = 0;
                }
                if (v50 - v51 < 0)
                  goto LABEL_202;
                v54 = v152 >> 3;
                if (v152 >> 3 <= v52)
                  v54 = (v50 - v51) >> 4;
                v55 = (unint64_t)v152 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v54;
                if (v55 >> 60)
LABEL_202:
                  std::vector<std::sub_match<char const*>>::__throw_length_error[abi:ne180100]();
                v56 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::shared_ptr<BambiCallAction>>>(v55);
                v58 = v56;
                while (v51 != v50)
                {
                  v59 = *(_OWORD *)v51;
                  v51 += 16;
                  *(_OWORD *)v58 = v59;
                  v58 += 16;
                }
                v152 = (uint64_t)&v56[16 * v57];
                v66 = v58 - v56;
                v154 = v56;
                v35 = v53;
                v47 = v160;
              }
              v31 = &v35[v47];
              v151 = &v56[v66];
              v14 = v30;
            }
            v159 = v31;
            v69 = v164[1];
            if (v14 == v17)
            {
              v70 = v164[0];
              while (v69 != v70)
              {
                v69 -= 12;
                std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v69);
              }
              v164[1] = v70;
              v15 = 1;
              v14 = v17;
            }
            else
            {
              v71 = (char *)v164[1] - 96;
              std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v164[1] - 12);
              v164[1] = v71;
              v15 = 1;
            }
            break;
          case 0xFFFFFC1D:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            break;
          case 0xFFFFFC1F:
LABEL_19:
            v24 = (char *)v164[1] - 96;
            std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)v164[1] - 12);
            v164[1] = v24;
            break;
          case 0xFFFFFC20:
            memset(v167, 0, sizeof(v167));
            v25 = *((_OWORD *)v18 - 5);
            v167[0] = *v22;
            v167[1] = v25;
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char *)&v167[2], *((__int128 **)v18 - 8), *((__int128 **)v18 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v18 - 7) - *((_QWORD *)v18 - 8)) >> 3));
            memset((char *)&v167[3] + 8, 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v167[3] + 8, *((__int128 **)v18 - 5), *((__int128 **)v18 - 4), (uint64_t)(*((_QWORD *)v18 - 4) - *((_QWORD *)v18 - 5)) >> 4);
            v26 = *v21;
            *(_QWORD *)((char *)&v167[5] + 5) = *(_QWORD *)((char *)v18 - 11);
            *(_QWORD *)&v167[5] = v26;
            (*(void (**)(_QWORD, uint64_t, _DWORD *))(*(_QWORD *)*v21 + 24))(*v21, 1, v18 - 24);
            (*(void (**)(_QWORD, _QWORD, _OWORD *))(**(_QWORD **)&v167[5] + 24))(*(_QWORD *)&v167[5], 0, v167);
            v27 = (char *)v164[1];
            if (v164[1] >= (void *)v165)
            {
              v164[1] = std::vector<std::__state<char>>::__push_back_slow_path<std::__state<char>>((int64x2_t *)v164, (uint64_t)v167);
              if (*((_QWORD *)&v167[3] + 1))
              {
                *(_QWORD *)&v167[4] = *((_QWORD *)&v167[3] + 1);
                operator delete(*((void **)&v167[3] + 1));
              }
            }
            else
            {
              v28 = v167[1];
              *(_OWORD *)v164[1] = v167[0];
              *((_OWORD *)v27 + 1) = v28;
              *((_QWORD *)v27 + 4) = 0;
              *((_QWORD *)v27 + 5) = 0;
              *((_QWORD *)v27 + 6) = 0;
              *((_QWORD *)v27 + 7) = 0;
              *((_OWORD *)v27 + 2) = v167[2];
              *((_QWORD *)v27 + 6) = *(_QWORD *)&v167[3];
              memset(&v167[2], 0, 24);
              *((_QWORD *)v27 + 8) = 0;
              *((_QWORD *)v27 + 9) = 0;
              *(_OWORD *)(v27 + 56) = *(_OWORD *)((char *)&v167[3] + 8);
              *((_QWORD *)v27 + 9) = *((_QWORD *)&v167[4] + 1);
              memset((char *)&v167[3] + 8, 0, 24);
              v29 = *(_QWORD *)&v167[5];
              *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v167[5] + 5);
              *((_QWORD *)v27 + 10) = v29;
              v164[1] = v27 + 96;
            }
            if (*(_QWORD *)&v167[2])
            {
              *((_QWORD *)&v167[2] + 1) = *(_QWORD *)&v167[2];
              operator delete(*(void **)&v167[2]);
            }
            break;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        v18 = v164[1];
      }
      while (v164[0] != v164[1]);
      if ((v15 & 1) != 0)
      {
        v72 = *v149;
        v73 = v155;
        *(_QWORD *)v72 = v157;
        *(_QWORD *)(v72 + 8) = &v14[v157];
        *(_BYTE *)(v72 + 16) = 1;
        if (v159 != v155)
        {
          v74 = v155 + 16;
          v75 = 1;
          do
          {
            v76 = v72 + 24 * v75;
            *(_OWORD *)v76 = *((_OWORD *)v74 - 1);
            v77 = *v74;
            v74 += 24;
            *(_BYTE *)(v76 + 16) = v77;
            v19 = 0xAAAAAAAAAAAAAAABLL * ((v159 - v155) >> 3) > v75++;
          }
          while (v19);
        }
      }
      else
      {
        v73 = v155;
      }
      if (v154)
        operator delete(v154);
      if (v73)
        operator delete(v73);
    }
    else
    {
      v15 = 0;
    }
    *(_QWORD *)&v167[0] = v164;
    std::vector<std::__state<char>>::__destroy_vector::operator()[abi:ne180100]((void ***)v167);
  }
  else
  {
    v165 = 0u;
    v166 = 0u;
    *(_OWORD *)v164 = 0u;
    v79 = *(_QWORD *)(a1 + 40);
    if (v79)
    {
      LODWORD(v167[0]) = 0;
      *(_OWORD *)((char *)v167 + 8) = 0uLL;
      *(_OWORD *)((char *)&v167[1] + 8) = 0uLL;
      *(_OWORD *)((char *)&v167[2] + 8) = 0uLL;
      *(_OWORD *)((char *)&v167[3] + 8) = 0uLL;
      *(_OWORD *)((char *)&v167[4] + 8) = 0uLL;
      *(_QWORD *)((char *)&v167[5] + 5) = 0;
      std::deque<std::__state<char>>::push_back(v164, (uint64_t)v167);
      if (*((_QWORD *)&v167[3] + 1))
        operator delete(*((void **)&v167[3] + 1));
      if (*(_QWORD *)&v167[2])
        operator delete(*(void **)&v167[2]);
      v150 = a4;
      v80 = v164[1];
      v81 = v166.i64[1] + v166.i64[0] - 1;
      v82 = v81 / 0x2A;
      v83 = *((_QWORD *)v164[1] + v81 / 0x2A);
      v84 = 3 * (v81 % 0x2A);
      v85 = v83 + 32 * v84;
      *(_DWORD *)v85 = 0;
      *(_QWORD *)(v85 + 8) = v10;
      *(_QWORD *)(v80[v82] + 32 * v84 + 16) = v10;
      *(_QWORD *)(v80[v82] + 32 * v84 + 24) = a3;
      std::vector<std::pair<unsigned long,char const*>>::resize((std::vector<std::pair<unsigned long, const char *>> *)(v80[v82] + 32 * v84 + 56), *(unsigned int *)(a1 + 32));
      v156 = 0;
      v161 = 0;
      v86 = 0;
      v87 = v166.i64[1];
      v88 = v164[1];
      v89 = v166.i64[1] + v166.i64[0] - 1;
      v90 = v89 / 0x2A;
      v91 = 3 * (v89 % 0x2A);
      *(_QWORD *)(*((_QWORD *)v164[1] + v90) + 32 * v91 + 80) = v79;
      v163 = &a3[-v10];
      v92 = v88[v90] + 32 * v91;
      *(_DWORD *)(v92 + 88) = v7;
      *(_BYTE *)(v92 + 92) = a6;
      while (2)
      {
        if ((++v86 & 0xFFF) == 0 && (int)(v86 >> 12) >= (int)v163)
          std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)12>();
        v94 = v87 + v166.i64[0] - 1;
        v95 = *((_QWORD *)v164[1] + v94 / 0x2A);
        v96 = v94 % 0x2A;
        v97 = v95 + 96 * (v94 % 0x2A);
        v99 = (_QWORD *)(v97 + 80);
        v98 = *(_QWORD *)(v97 + 80);
        if (v98)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v98 + 16))(v98, v95 + 96 * v96);
        switch(*(_DWORD *)v97)
        {
          case 0xFFFFFC18:
            v100 = *(_QWORD *)(v95 + 96 * v96 + 16);
            if ((v7 & 0x20) != 0 && v100 == v10)
              goto LABEL_186;
            v101 = v100 - *(_QWORD *)(v95 + 96 * v96 + 8);
            v102 = v156;
            if ((v161 & ((uint64_t)v156 >= v101)) == 0)
              v102 = (const char *)v101;
            if (v102 != v163)
            {
              v156 = v102;
              std::deque<std::__state<char>>::pop_back(v164);
              v161 = 1;
              goto LABEL_187;
            }
            v103 = (void **)v164[1];
            v104 = (_BYTE *)v165;
            if ((void *)v165 == v164[1])
            {
              v104 = v164[1];
            }
            else
            {
              v105 = (char *)v164[1] + 8 * (v166.i64[0] / 0x2AuLL);
              v106 = (_QWORD *)(*v105 + 96 * (v166.i64[0] % 0x2AuLL));
              v107 = *((_QWORD *)v164[1] + (v166.i64[1] + v166.i64[0]) / 0x2AuLL)
                   + 96 * ((v166.i64[1] + v166.i64[0]) % 0x2AuLL);
              if (v106 != (_QWORD *)v107)
              {
                do
                {
                  std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v106);
                  v106 += 12;
                  if ((_QWORD *)((char *)v106 - *v105) == (_QWORD *)4032)
                  {
                    v108 = (_QWORD *)v105[1];
                    ++v105;
                    v106 = v108;
                  }
                }
                while (v106 != (_QWORD *)v107);
                v103 = (void **)v164[1];
                v104 = (_BYTE *)v165;
              }
            }
            v166.i64[1] = 0;
            v139 = v104 - (_BYTE *)v103;
            if (v139 >= 0x11)
            {
              do
              {
                operator delete(*v103);
                v103 = (void **)((char *)v164[1] + 8);
                v164[1] = v103;
                v139 = v165 - (_QWORD)v103;
              }
              while ((_QWORD)v165 - (_QWORD)v103 > 0x10uLL);
            }
            if (v139 >> 3 == 1)
            {
              v140 = 21;
            }
            else
            {
              if (v139 >> 3 != 2)
                goto LABEL_174;
              v140 = 42;
            }
            v166.i64[0] = v140;
LABEL_174:
            v161 = 1;
            v156 = v163;
LABEL_187:
            v87 = v166.i64[1];
            if (v166.i64[1])
              continue;
            if ((v161 & 1) == 0)
              goto LABEL_190;
            v148 = *v150;
            *(_QWORD *)v148 = v10;
            *(_QWORD *)(v148 + 8) = &v156[v10];
            v15 = 1;
            *(_BYTE *)(v148 + 16) = 1;
            break;
          case 0xFFFFFC19:
          case 0xFFFFFC1E:
          case 0xFFFFFC21:
            goto LABEL_187;
          case 0xFFFFFC1D:
            v109 = v166.i64[0];
            v110 = (char *)v164[1];
            v111 = (char *)v165;
            if (!v166.i64[0])
            {
              v112 = (uint64_t)(v165 - (unint64_t)v164[1]) >> 3;
              v113 = 42 * v112 - 1;
              if ((void *)v165 == v164[1])
                v113 = 0;
              if ((unint64_t)(v113 - v166.i64[1]) < 0x2A)
              {
                if (v112 >= (uint64_t)(*((_QWORD *)&v165 + 1) - (unint64_t)v164[0]) >> 3)
                {
                  if (*((void **)&v165 + 1) == v164[0])
                    v116 = 1;
                  else
                    v116 = (uint64_t)(*((_QWORD *)&v165 + 1) - (unint64_t)v164[0]) >> 2;
                  *(_QWORD *)&v167[2] = (char *)&v165 + 8;
                  *(_QWORD *)&v167[0] = std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v116);
                  *((_QWORD *)&v167[0] + 1) = *(_QWORD *)&v167[0];
                  *(_QWORD *)&v167[1] = *(_QWORD *)&v167[0];
                  *((_QWORD *)&v167[1] + 1) = *(_QWORD *)&v167[0] + 8 * v117;
                  v158 = v10;
                  __x.first = (const char *)operator new(0xFC0uLL);
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v167, &__x);
                  v118 = (uint64_t *)v164[1];
                  v119 = *(char **)&v167[1];
                  for (LOBYTE(v7) = v162; v118 != (uint64_t *)v165; *(_QWORD *)&v167[1] += 8)
                  {
                    if (v119 == *((char **)&v167[1] + 1))
                    {
                      v121 = (char *)*((_QWORD *)&v167[0] + 1);
                      v120 = *(void **)&v167[0];
                      if (*((_QWORD *)&v167[0] + 1) <= *(_QWORD *)&v167[0])
                      {
                        if (v119 == *(char **)&v167[0])
                          v128 = 1;
                        else
                          v128 = (uint64_t)&v119[-*(_QWORD *)&v167[0]] >> 2;
                        v129 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v128);
                        v132 = v119 - v121;
                        v131 = v119 == v121;
                        v119 = &v129[8 * (v128 >> 2)];
                        if (!v131)
                        {
                          v119 = &v129[8 * (v128 >> 2) + (v132 & 0xFFFFFFFFFFFFFFF8)];
                          v133 = 8 * (v132 >> 3);
                          v134 = &v129[8 * (v128 >> 2)];
                          do
                          {
                            v135 = *(_QWORD *)v121;
                            v121 += 8;
                            *(_QWORD *)v134 = v135;
                            v134 += 8;
                            v133 -= 8;
                          }
                          while (v133);
                        }
                        *(_QWORD *)&v167[0] = v129;
                        *((_QWORD *)&v167[0] + 1) = &v129[8 * (v128 >> 2)];
                        *(_QWORD *)&v167[1] = v119;
                        *((_QWORD *)&v167[1] + 1) = &v129[8 * v130];
                        if (v120)
                          operator delete(v120);
                        LOBYTE(v7) = v162;
                      }
                      else
                      {
                        v122 = (uint64_t)(*((_QWORD *)&v167[0] + 1) - *(_QWORD *)&v167[0]) >> 3;
                        if (v122 >= -1)
                          v123 = v122 + 1;
                        else
                          v123 = v122 + 2;
                        v124 = *((_QWORD *)&v167[0] + 1) - 8 * (v123 >> 1);
                        v125 = (size_t)&v119[-*((_QWORD *)&v167[0] + 1)];
                        if (v119 != *((char **)&v167[0] + 1))
                        {
                          v126 = (void *)(*((_QWORD *)&v167[0] + 1) - 8 * (v123 >> 1));
                          memmove(v126, *((const void **)&v167[0] + 1), v125);
                          v124 = (uint64_t)v126;
                          v119 = v121;
                        }
                        v127 = &v119[-8 * (v123 >> 1)];
                        v119 = (char *)(v124 + v125);
                        *((_QWORD *)&v167[0] + 1) = v127;
                        *(_QWORD *)&v167[1] = v124 + v125;
                        LOBYTE(v7) = v162;
                      }
                    }
                    v136 = *v118++;
                    *(_QWORD *)v119 = v136;
                    v119 = (char *)(*(_QWORD *)&v167[1] + 8);
                  }
                  v137 = v164[0];
                  *(_OWORD *)v164 = v167[0];
                  *(_QWORD *)&v165 = v119;
                  *((_QWORD *)&v165 + 1) = *((_QWORD *)&v167[1] + 1);
                  v138 = 21;
                  if (&v119[-*((_QWORD *)&v167[0] + 1)] != (char *)8)
                    v138 = v166.i64[0] + 42;
                  v166.i64[0] = v138;
                  v10 = v158;
                  if (v137)
                    operator delete(v137);
                }
                else
                {
                  if (v164[1] == v164[0])
                  {
                    *(_QWORD *)&v167[0] = operator new(0xFC0uLL);
                    std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(v164, v167);
                    *(_QWORD *)&v167[0] = *(_QWORD *)(v165 - 8);
                    *(_QWORD *)&v165 = v165 - 8;
                  }
                  else
                  {
                    *(_QWORD *)&v167[0] = operator new(0xFC0uLL);
                  }
                  std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v164, v167);
                  v141 = 21;
                  if ((_QWORD)v165 - (unint64_t)v164[1] != 8)
                    v141 = v166.i64[0] + 42;
                  v166.i64[0] = v141;
                }
              }
              else
              {
                v166.i64[0] = 42;
                *(_QWORD *)&v167[0] = *(_QWORD *)(v165 - 8);
                *(_QWORD *)&v165 = v165 - 8;
                std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)v164, v167);
              }
              v109 = v166.i64[0];
              v110 = (char *)v164[1];
              v111 = (char *)v165;
            }
            v142 = &v110[8 * (v109 / 0x2A)];
            v143 = *(_QWORD *)v142 + 96 * (v109 % 0x2A);
            if (v111 == v110)
              v144 = 0;
            else
              v144 = v143;
            if (v144 == *(_QWORD *)v142)
              v144 = *((_QWORD *)v142 - 1) + 4032;
            v145 = *(_OWORD *)(v97 + 16);
            *(_OWORD *)(v144 - 96) = *(_OWORD *)v97;
            *(_OWORD *)(v144 - 80) = v145;
            v146 = v95 + 96 * v96;
            *(_QWORD *)(v144 - 56) = 0;
            *(_QWORD *)(v144 - 48) = 0;
            *(_QWORD *)(v144 - 64) = 0;
            *(_OWORD *)(v144 - 64) = *(_OWORD *)(v146 + 32);
            *(_QWORD *)(v144 - 48) = *(_QWORD *)(v146 + 48);
            *(_QWORD *)(v146 + 32) = 0;
            *(_QWORD *)(v146 + 40) = 0;
            *(_QWORD *)(v146 + 48) = 0;
            *(_QWORD *)(v144 - 40) = 0;
            *(_QWORD *)(v144 - 32) = 0;
            *(_QWORD *)(v144 - 24) = 0;
            *(_OWORD *)(v144 - 40) = *(_OWORD *)(v146 + 56);
            *(_QWORD *)(v144 - 24) = *(_QWORD *)(v146 + 72);
            *(_QWORD *)(v146 + 56) = 0;
            *(_QWORD *)(v146 + 64) = 0;
            *(_QWORD *)(v146 + 72) = 0;
            v147 = *v99;
            *(_QWORD *)(v144 - 11) = *(_QWORD *)(v97 + 85);
            *(_QWORD *)(v144 - 16) = v147;
            v166 = vaddq_s64(v166, (int64x2_t)xmmword_1BF29FE80);
            goto LABEL_186;
          case 0xFFFFFC1F:
LABEL_186:
            std::deque<std::__state<char>>::pop_back(v164);
            goto LABEL_187;
          case 0xFFFFFC20:
            memset(v167, 0, sizeof(v167));
            v114 = *(_OWORD *)(v97 + 16);
            v167[0] = *(_OWORD *)v97;
            v167[1] = v114;
            std::vector<std::sub_match<char const*>>::__init_with_size[abi:ne180100]<std::sub_match<char const*>*,std::sub_match<char const*>*>((char *)&v167[2], *(__int128 **)(v95 + 96 * v96 + 32), *(__int128 **)(v95 + 96 * v96 + 40), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(_QWORD *)(v95 + 96 * v96 + 40) - *(_QWORD *)(v95 + 96 * v96 + 32)) >> 3));
            memset((char *)&v167[3] + 8, 0, 24);
            std::vector<std::pair<unsigned long,char const*>>::__init_with_size[abi:ne180100]<std::pair<unsigned long,char const*>*,std::pair<unsigned long,char const*>*>((char *)&v167[3] + 8, *(__int128 **)(v95 + 96 * v96 + 56), *(__int128 **)(v95 + 96 * v96 + 64), (uint64_t)(*(_QWORD *)(v95 + 96 * v96 + 64) - *(_QWORD *)(v95 + 96 * v96 + 56)) >> 4);
            v115 = *v99;
            *(_QWORD *)((char *)&v167[5] + 5) = *(_QWORD *)(v97 + 85);
            *(_QWORD *)&v167[5] = v115;
            (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v99 + 24))(*v99, 1, v97);
            (*(void (**)(_QWORD, _QWORD, _OWORD *))(**(_QWORD **)&v167[5] + 24))(*(_QWORD *)&v167[5], 0, v167);
            std::deque<std::__state<char>>::push_back(v164, (uint64_t)v167);
            if (*((_QWORD *)&v167[3] + 1))
            {
              *(_QWORD *)&v167[4] = *((_QWORD *)&v167[3] + 1);
              operator delete(*((void **)&v167[3] + 1));
            }
            if (*(_QWORD *)&v167[2])
            {
              *((_QWORD *)&v167[2] + 1) = *(_QWORD *)&v167[2];
              operator delete(*(void **)&v167[2]);
            }
            goto LABEL_187;
          default:
            std::__throw_regex_error[abi:ne180100]<(std::regex_constants::error_type)16>();
        }
        break;
      }
    }
    else
    {
LABEL_190:
      v15 = 0;
    }
    std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)v164);
  }
  return v15 & 1;
}

void sub_1BEF33E0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37)
{
  void *v37;

  operator delete(v37);
  if (__p)
    operator delete(__p);
  std::deque<std::__state<char>>::~deque[abi:ne180100]((uint64_t)&a23);
  _Unwind_Resume(a1);
}

__n128 std::deque<std::__state<char>>::push_back(_QWORD *a1, uint64_t a2)
{
  char *v4;
  char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  char *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  char *v58;
  _QWORD *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  __int128 v64;
  __n128 result;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  int64_t v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  void *v82;
  char *v83;
  char *v84;
  char *v85;
  char *v86;
  _QWORD *v87;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = (v5 - v4) >> 3;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = 42 * v6 - 1;
  v8 = a1[4];
  v9 = a1[5] + v8;
  if (v7 == v9)
  {
    if (v8 < 0x2A)
    {
      v23 = (char *)a1[3];
      v24 = (uint64_t)&v23[-*a1];
      if (v6 >= v24 >> 3)
      {
        if (v23 == (char *)*a1)
          v25 = 1;
        else
          v25 = v24 >> 2;
        v87 = a1 + 3;
        v83 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v25);
        v84 = &v83[8 * v6];
        v85 = v84;
        v86 = &v83[8 * v26];
        v82 = operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(&v83, &v82);
        v28 = v83;
        v27 = v84;
        v29 = v85;
        v30 = v86;
        v31 = a1[2];
        if (v31 == a1[1])
        {
          v47 = v84;
        }
        else
        {
          do
          {
            if (v27 == v28)
            {
              if (v29 >= v30)
              {
                if (v30 == v27)
                  v37 = 1;
                else
                  v37 = (v30 - v27) >> 2;
                v38 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v37);
                v28 = v38;
                v32 = &v38[(2 * v37 + 6) & 0xFFFFFFFFFFFFFFF8];
                v41 = v29 - v27;
                v40 = v29 == v27;
                v29 = v32;
                if (!v40)
                {
                  v29 = &v32[v41 & 0xFFFFFFFFFFFFFFF8];
                  v42 = 8 * (v41 >> 3);
                  v43 = v32;
                  v44 = v27;
                  do
                  {
                    v45 = *(_QWORD *)v44;
                    v44 += 8;
                    *(_QWORD *)v43 = v45;
                    v43 += 8;
                    v42 -= 8;
                  }
                  while (v42);
                }
                v30 = &v38[8 * v39];
                if (v27)
                  operator delete(v27);
              }
              else
              {
                v33 = (v30 - v29) >> 3;
                if (v33 >= -1)
                  v34 = v33 + 1;
                else
                  v34 = v33 + 2;
                v35 = v34 >> 1;
                v32 = &v27[8 * (v34 >> 1)];
                v36 = v27;
                if (v29 != v27)
                {
                  memmove(v32, v27, v29 - v27);
                  v36 = v29;
                }
                v29 = &v36[8 * v35];
                v28 = v27;
              }
            }
            else
            {
              v32 = v27;
            }
            v46 = *(_QWORD *)(v31 - 8);
            v31 -= 8;
            *((_QWORD *)v32 - 1) = v46;
            v47 = v32 - 8;
            v27 = v47;
          }
          while (v31 != a1[1]);
        }
        v62 = (char *)*a1;
        *a1 = v28;
        a1[1] = v47;
        a1[2] = v29;
        a1[3] = v30;
        if (v62)
          operator delete(v62);
        goto LABEL_54;
      }
      if (v23 != v5)
      {
        v83 = (char *)operator new(0xFC0uLL);
        std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(a1, &v83);
LABEL_54:
        v4 = (char *)a1[1];
        v9 = a1[5] + a1[4];
        goto LABEL_55;
      }
      v83 = (char *)operator new(0xFC0uLL);
      std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front((uint64_t)a1, &v83);
      v59 = (_QWORD *)a1[1];
      v5 = (char *)a1[2];
      v61 = *v59;
      v60 = (char *)(v59 + 1);
      v11 = v61;
      a1[1] = v60;
      if (v5 == (char *)a1[3])
      {
        v67 = (uint64_t)&v60[-*a1];
        if ((unint64_t)v60 > *a1)
        {
          v68 = v67 >> 3;
          v15 = v67 >> 3 < -1;
          v69 = (v67 >> 3) + 2;
          if (v15)
            v70 = v69;
          else
            v70 = v68 + 1;
          v71 = -(v70 >> 1);
          v72 = v70 >> 1;
          v73 = &v60[-8 * v72];
          v74 = v5 - v60;
          if (v5 != v60)
          {
            memmove(&v60[-8 * v72], v60, v5 - v60);
            v60 = (char *)a1[1];
          }
          v5 = &v73[v74];
          v22 = &v60[8 * v71];
          goto LABEL_14;
        }
        if (v5 == (char *)*a1)
          v75 = 1;
        else
          v75 = (uint64_t)&v5[-*a1] >> 2;
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v75);
        v50 = &v49[8 * (v75 >> 2)];
        v52 = &v49[8 * v76];
        v77 = (uint64_t *)a1[1];
        v5 = v50;
        v78 = a1[2] - (_QWORD)v77;
        if (v78)
        {
          v5 = &v50[v78 & 0xFFFFFFFFFFFFFFF8];
          v79 = 8 * (v78 >> 3);
          v80 = &v49[8 * (v75 >> 2)];
          do
          {
            v81 = *v77++;
            *(_QWORD *)v80 = v81;
            v80 += 8;
            v79 -= 8;
          }
          while (v79);
        }
LABEL_47:
        v58 = (char *)*a1;
        *a1 = v49;
        a1[1] = v50;
        a1[2] = v5;
        a1[3] = v52;
        if (v58)
        {
          operator delete(v58);
          v5 = (char *)a1[2];
        }
      }
    }
    else
    {
      a1[4] = v8 - 42;
      v12 = *(_QWORD *)v4;
      v10 = v4 + 8;
      v11 = v12;
      a1[1] = v10;
      if (v5 == (char *)a1[3])
      {
        v13 = (uint64_t)&v10[-*a1];
        if ((unint64_t)v10 > *a1)
        {
          v14 = v13 >> 3;
          v15 = v13 >> 3 < -1;
          v16 = (v13 >> 3) + 2;
          if (v15)
            v17 = v16;
          else
            v17 = v14 + 1;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v10[-8 * v19];
          v21 = v5 - v10;
          if (v5 != v10)
          {
            memmove(&v10[-8 * v19], v10, v5 - v10);
            v5 = (char *)a1[1];
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
LABEL_14:
          a1[1] = v22;
          a1[2] = v5;
          goto LABEL_50;
        }
        if (v5 == (char *)*a1)
          v48 = 1;
        else
          v48 = (uint64_t)&v5[-*a1] >> 2;
        v49 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v48);
        v50 = &v49[8 * (v48 >> 2)];
        v52 = &v49[8 * v51];
        v53 = (uint64_t *)a1[1];
        v5 = v50;
        v54 = a1[2] - (_QWORD)v53;
        if (v54)
        {
          v5 = &v50[v54 & 0xFFFFFFFFFFFFFFF8];
          v55 = 8 * (v54 >> 3);
          v56 = &v49[8 * (v48 >> 2)];
          do
          {
            v57 = *v53++;
            *(_QWORD *)v56 = v57;
            v56 += 8;
            v55 -= 8;
          }
          while (v55);
        }
        goto LABEL_47;
      }
    }
LABEL_50:
    *(_QWORD *)v5 = v11;
    a1[2] += 8;
    goto LABEL_54;
  }
LABEL_55:
  v63 = *(_QWORD *)&v4[8 * (v9 / 0x2A)] + 96 * (v9 % 0x2A);
  v64 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v63 = *(_OWORD *)a2;
  *(_OWORD *)(v63 + 16) = v64;
  *(_QWORD *)(v63 + 40) = 0;
  *(_QWORD *)(v63 + 48) = 0;
  *(_QWORD *)(v63 + 32) = 0;
  *(_OWORD *)(v63 + 32) = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(v63 + 48) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(v63 + 56) = 0;
  *(_QWORD *)(v63 + 64) = 0;
  *(_QWORD *)(v63 + 72) = 0;
  result = *(__n128 *)(a2 + 56);
  *(__n128 *)(v63 + 56) = result;
  *(_QWORD *)(v63 + 72) = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  v66 = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(v63 + 85) = *(_QWORD *)(a2 + 85);
  *(_QWORD *)(v63 + 80) = v66;
  ++a1[5];
  return result;
}

void sub_1BEF343B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  void *v10;

  operator delete(v10);
  if (__p)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void std::deque<std::__state<char>>::pop_back(_QWORD *a1)
{
  unint64_t v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = a1[5] + a1[4] - 1;
  std::__destroy_at[abi:ne180100]<std::__state<char>,0>((_QWORD *)(*(_QWORD *)(a1[1] + 8 * (v2 / 0x2A))
                                                                 + 96 * (v2 % 0x2A)));
  v3 = a1[2];
  v4 = v3 == a1[1];
  v5 = 42 * ((v3 - a1[1]) >> 3) - 1;
  v7 = a1[4];
  v6 = a1[5];
  a1[5] = v6 - 1;
  if (v4)
    v5 = 0;
  if ((unint64_t)(v5 - (v6 + v7) - 83) <= 0xFFFFFFFFFFFFFFABLL)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<std::__state<char> *,std::allocator<std::__state<char> *>>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<IMSCallInfo *>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t std::deque<std::__state<char>>::~deque[abi:ne180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  char *v7;
  unint64_t v8;
  char *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (char *)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != (char *)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<std::__state<char>,0>(v7);
        v7 += 96;
        if (v7 - (_BYTE *)*v6 == 4032)
        {
          v9 = (char *)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != (char *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 21;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 42;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C7CD0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::~__func(uint64_t a1)
{
  std::__shared_weak_count *v2;

  *(_QWORD *)a1 = off_1E78C7CD0;
  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  JUMPOUT(0x1C3B87100);
}

_QWORD *std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;

  v1 = a1 + 8;
  v2 = operator new(0x40uLL);
  *v2 = off_1E78C7CD0;
  std::__compressed_pair_elem<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1BEF34908(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::__clone(uint64_t a1, _QWORD *a2)
{
  *a2 = off_1E78C7CD0;
  return std::__compressed_pair_elem<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy(uint64_t a1)
{
  std::__function::__alloc_func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy[abi:ne180100](a1 + 8);
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy[abi:ne180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

void std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::operator()(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;

  v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      v5 = v4;
      if (*(_QWORD *)(a1 + 48) && !*(_BYTE *)(a1 + 40))
      {
        v6 = *(_QWORD *)(v3 + 320);
        v7 = *(_QWORD *)(v6 + 208);
        v8 = *(std::__shared_weak_count **)(v6 + 216);
        if (v8)
        {
          p_shared_owners = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldxr(p_shared_owners);
          while (__stxr(v10 + 1, p_shared_owners));
        }
        v11 = *(_QWORD *)(v7 + 136);
        v12 = *(_QWORD *)(v11 + 208);
        v13 = *(std::__shared_weak_count **)(v11 + 216);
        if (v13)
        {
          v14 = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldxr(v14);
          while (__stxr(v15 + 1, v14));
        }
        SipLazuliManager::releasePowerAssertion(v12, (void **)(a1 + 16));
        if (v13)
        {
          v16 = (unint64_t *)&v13->__shared_owners_;
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 - 1, v16));
          if (!v17)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        if (v8)
        {
          v18 = (unint64_t *)&v8->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      v20 = (unint64_t *)&v5->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_1BEF34AA0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldaxr(p_shared_owners);
    while (__stlxr(v6 - 1, p_shared_owners));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
  {
    v7 = (unint64_t *)&v2->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v9 = (unint64_t *)&v1->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = *(_QWORD *)a2;
  v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  v6 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 48) = v6;
  if (v6)
  {
    v7 = (unint64_t *)(v6 + 16);
    do
      v8 = __ldxr(v7);
    while (__stxr(v8 + 1, v7));
  }
  return a1;
}

void std::__function::__alloc_func<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0,std::allocator<MessageSession::processIncomingSendRequestBody(std::string const&,std::string const&,std::string const&,std::string const&)::$_0>,void ()(void)>::destroy[abi:ne180100](uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::remove(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  int8x8_t v3;
  unint64_t v4;
  uint8x8_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;

  v3 = (int8x8_t)a2[1];
  v4 = a3[1];
  v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(_QWORD *)&v3)
      v4 %= *(_QWORD *)&v3;
  }
  else
  {
    v4 &= *(_QWORD *)&v3 - 1;
  }
  v6 = *(_QWORD **)(*a2 + 8 * v4);
  do
  {
    v7 = v6;
    v6 = (_QWORD *)*v6;
  }
  while (v6 != a3);
  if (v7 == a2 + 2)
    goto LABEL_18;
  v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(_QWORD *)&v3)
      v8 %= *(_QWORD *)&v3;
  }
  else
  {
    v8 &= *(_QWORD *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a3)
      goto LABEL_19;
    v9 = *(_QWORD *)(*a3 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v3)
        v9 %= *(_QWORD *)&v3;
    }
    else
    {
      v9 &= *(_QWORD *)&v3 - 1;
    }
    if (v9 != v4)
LABEL_19:
      *(_QWORD *)(*a2 + 8 * v4) = 0;
  }
  v10 = *a3;
  if (*a3)
  {
    v11 = *(_QWORD *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(_QWORD *)&v3)
        v11 %= *(_QWORD *)&v3;
    }
    else
    {
      v11 &= *(_QWORD *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(_QWORD *)(*a2 + 8 * v11) = v7;
      v10 = *a3;
    }
  }
  *v7 = v10;
  *a3 = 0;
  --a2[3];
  *(_QWORD *)result = a3;
  *(_QWORD *)(result + 8) = a2 + 2;
  *(_BYTE *)(result + 16) = 1;
  return result;
}

void std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,MessageSession::SentMessageInfo>,0>((uint64_t)v1 + 16);
    operator delete(v1);
  }
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  __int128 *v16;
  _QWORD *v17;
  char *v18;
  std::string *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  uint64_t v43;

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v16 = *a3;
  v17 = (_QWORD *)(a1 + 16);
  v43 = 0;
  v18 = (char *)operator new(0x90uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *(_QWORD *)v18 = 0;
  *((_QWORD *)v18 + 1) = v8;
  v19 = (std::string *)(v18 + 16);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v20 = *v16;
    *((_QWORD *)v18 + 4) = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  *((_QWORD *)v18 + 17) = 0;
  *(_OWORD *)(v18 + 120) = 0u;
  *(_OWORD *)(v18 + 104) = 0u;
  *(_OWORD *)(v18 + 88) = 0u;
  *(_OWORD *)(v18 + 72) = 0u;
  *(_OWORD *)(v18 + 56) = 0u;
  *(_OWORD *)(v18 + 40) = 0u;
  LOBYTE(v43) = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v17;
          if (*v17)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v17;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v17;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9)
        v39 %= v9;
    }
    else
    {
      v39 &= v9 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1BEF3523C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,MessageSession::SentMessageInfo>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C7D50;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C7D50;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C7D50;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C7D50;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 160))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF35438(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_0>,void ()(std::string&)>::target_type()
{
}

_QWORD *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C7DD0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C7DD0;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C7DD0;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C7DD0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 160))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF356A0(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1,std::allocator<MessageSession::sendMessageBlob(std::string const&,std::string const&,std::string const&,unsigned int,std::string)::$_1>,void ()(std::string&)>::target_type()
{
}

unsigned __int8 *std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t a1, unsigned __int8 *a2, __int128 **a3)
{
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint8x8_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned __int8 **v13;
  unsigned __int8 *i;
  unint64_t v15;
  __int128 *v16;
  _QWORD *v17;
  _QWORD *v18;
  std::string *v19;
  __int128 v20;
  float v21;
  float v22;
  _BOOL8 v23;
  unint64_t v24;
  unint64_t v25;
  int8x8_t prime;
  void *v27;
  void *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint8x8_t v32;
  unint64_t v33;
  uint8x8_t v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  unsigned __int8 **v38;
  unint64_t v39;
  void *v41;
  _QWORD v42[2];
  uint64_t v43;

  v6 = (_QWORD *)(a1 + 24);
  v7 = std::__string_hash<char>::operator()[abi:ne180100](a1 + 24, (uint64_t)a2);
  v8 = v7;
  v9 = *(_QWORD *)(a1 + 8);
  if (v9)
  {
    v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      v12 = v7;
      if (v7 >= v9)
        v12 = v7 % v9;
    }
    else
    {
      v12 = (v9 - 1) & v7;
    }
    v13 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
    if (v13)
    {
      for (i = *v13; i; i = *(unsigned __int8 **)i)
      {
        v15 = *((_QWORD *)i + 1);
        if (v15 == v8)
        {
          if ((std::equal_to<std::string>::operator()[abi:ne180100](a1 + 32, i + 16, a2) & 1) != 0)
            return i;
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9)
              v15 %= v9;
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12)
            break;
        }
      }
    }
  }
  else
  {
    v12 = 0;
  }
  v16 = *a3;
  v17 = (_QWORD *)(a1 + 16);
  v43 = 0;
  v18 = operator new(0x38uLL);
  v42[0] = v18;
  v42[1] = a1 + 16;
  *v18 = 0;
  v18[1] = v8;
  v19 = (std::string *)(v18 + 2);
  if (*((char *)v16 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v19, *(const std::string::value_type **)v16, *((_QWORD *)v16 + 1));
  }
  else
  {
    v20 = *v16;
    v18[4] = *((_QWORD *)v16 + 2);
    *(_OWORD *)&v19->__r_.__value_.__l.__data_ = v20;
  }
  v18[5] = 0;
  v18[6] = 0;
  LOBYTE(v43) = 1;
  v21 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v22 = *(float *)(a1 + 32);
  if (!v9 || (float)(v22 * (float)v9) < v21)
  {
    v23 = 1;
    if (v9 >= 3)
      v23 = (v9 & (v9 - 1)) != 0;
    v24 = v23 | (2 * v9);
    v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25)
      prime = (int8x8_t)v25;
    else
      prime = (int8x8_t)v24;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
    }
    v9 = *(_QWORD *)(a1 + 8);
    if (*(_QWORD *)&prime > v9)
      goto LABEL_33;
    if (*(_QWORD *)&prime < v9)
    {
      v33 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
      if (v9 < 3 || (v34 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        v33 = std::__next_prime(v33);
      }
      else
      {
        v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2)
          v33 = v35;
      }
      if (*(_QWORD *)&prime <= v33)
        prime = (int8x8_t)v33;
      if (*(_QWORD *)&prime >= v9)
      {
        v9 = *(_QWORD *)(a1 + 8);
      }
      else
      {
        if (prime)
        {
LABEL_33:
          if (*(_QWORD *)&prime >> 61)
            std::__throw_bad_array_new_length[abi:ne180100]();
          v27 = operator new(8 * *(_QWORD *)&prime);
          v28 = *(void **)a1;
          *(_QWORD *)a1 = v27;
          if (v28)
            operator delete(v28);
          v29 = 0;
          *(int8x8_t *)(a1 + 8) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v29++) = 0;
          while (*(_QWORD *)&prime != v29);
          v30 = (_QWORD *)*v17;
          if (*v17)
          {
            v31 = v30[1];
            v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(_QWORD *)&prime)
                v31 %= *(_QWORD *)&prime;
            }
            else
            {
              v31 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v31) = v17;
            v36 = (_QWORD *)*v30;
            if (*v30)
            {
              do
              {
                v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(_QWORD *)&prime)
                    v37 %= *(_QWORD *)&prime;
                }
                else
                {
                  v37 &= *(_QWORD *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v37))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v37) = v30;
                    goto LABEL_58;
                  }
                  *v30 = *v36;
                  *v36 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v37);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v37) = v36;
                  v36 = v30;
                }
                v37 = v31;
LABEL_58:
                v30 = v36;
                v36 = (_QWORD *)*v36;
                v31 = v37;
              }
              while (v36);
            }
          }
          v9 = (unint64_t)prime;
          goto LABEL_62;
        }
        v41 = *(void **)a1;
        *(_QWORD *)a1 = 0;
        if (v41)
          operator delete(v41);
        v9 = 0;
        *(_QWORD *)(a1 + 8) = 0;
      }
    }
LABEL_62:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9)
        v12 = v8 % v9;
      else
        v12 = v8;
    }
    else
    {
      v12 = (v9 - 1) & v8;
    }
  }
  v38 = *(unsigned __int8 ***)(*(_QWORD *)a1 + 8 * v12);
  i = (unsigned __int8 *)v42[0];
  if (v38)
  {
    *(_QWORD *)v42[0] = *v38;
LABEL_75:
    *v38 = i;
    goto LABEL_76;
  }
  *(_QWORD *)v42[0] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(*(_QWORD *)a1 + 8 * v12) = v17;
  if (*(_QWORD *)i)
  {
    v39 = *(_QWORD *)(*(_QWORD *)i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v39 >= v9)
        v39 %= v9;
    }
    else
    {
      v39 &= v9 - 1;
    }
    v38 = (unsigned __int8 **)(*(_QWORD *)a1 + 8 * v39);
    goto LABEL_75;
  }
LABEL_76:
  v42[0] = 0;
  ++*v6;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v42);
  return i;
}

void sub_1BEF35B80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__hash_table<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::__unordered_map_hasher<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::hash<std::string>,std::equal_to<std::string>,true>,std::__unordered_map_equal<std::string,std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>,std::equal_to<std::string>,std::hash<std::string>,true>,std::allocator<std::__hash_value_type<std::string,std::shared_ptr<LazuliGroupParticipant>>>>::__erase_unique<std::string>(_QWORD *a1, unsigned __int8 *a2)
{
  _QWORD *v4;
  unint64_t v5;
  int8x8_t v6;
  unint64_t v7;
  uint8x8_t v8;
  unint64_t v9;
  unint64_t v10;
  unsigned __int8 **v11;
  unsigned __int8 *v12;
  unint64_t v13;
  uint64_t v14;
  int8x8_t v16;
  unint64_t v17;
  uint8x8_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  _QWORD v25[2];
  char v26;

  v4 = a1 + 3;
  v5 = std::__string_hash<char>::operator()[abi:ne180100]((uint64_t)(a1 + 3), (uint64_t)a2);
  v6 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v6)
    return 0;
  v7 = v5;
  v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  v9 = v8.u32[0];
  if (v8.u32[0] > 1uLL)
  {
    v10 = v5;
    if (v5 >= *(_QWORD *)&v6)
      v10 = v5 % *(_QWORD *)&v6;
  }
  else
  {
    v10 = (*(_QWORD *)&v6 - 1) & v5;
  }
  v11 = *(unsigned __int8 ***)(*a1 + 8 * v10);
  if (!v11)
    return 0;
  v12 = *v11;
  if (!*v11)
    return 0;
  while (1)
  {
    v13 = *((_QWORD *)v12 + 1);
    if (v13 == v7)
      break;
    if (v9 > 1)
    {
      if (v13 >= *(_QWORD *)&v6)
        v13 %= *(_QWORD *)&v6;
    }
    else
    {
      v13 &= *(_QWORD *)&v6 - 1;
    }
    if (v13 != v10)
      return 0;
LABEL_16:
    v12 = *(unsigned __int8 **)v12;
    if (!v12)
      return 0;
  }
  if ((std::equal_to<std::string>::operator()[abi:ne180100]((uint64_t)(a1 + 4), v12 + 16, a2) & 1) == 0)
    goto LABEL_16;
  v16 = (int8x8_t)a1[1];
  v17 = *((_QWORD *)v12 + 1);
  v18 = (uint8x8_t)vcnt_s8(v16);
  v18.i16[0] = vaddlv_u8(v18);
  if (v18.u32[0] > 1uLL)
  {
    if (v17 >= *(_QWORD *)&v16)
      v17 %= *(_QWORD *)&v16;
  }
  else
  {
    v17 &= *(_QWORD *)&v16 - 1;
  }
  v19 = *(unsigned __int8 **)(*a1 + 8 * v17);
  do
  {
    v20 = v19;
    v19 = *(unsigned __int8 **)v19;
  }
  while (v19 != v12);
  if (v20 == a1 + 2)
    goto LABEL_36;
  v21 = v20[1];
  if (v18.u32[0] > 1uLL)
  {
    if (v21 >= *(_QWORD *)&v16)
      v21 %= *(_QWORD *)&v16;
  }
  else
  {
    v21 &= *(_QWORD *)&v16 - 1;
  }
  if (v21 != v17)
  {
LABEL_36:
    if (!*(_QWORD *)v12)
      goto LABEL_37;
    v22 = *(_QWORD *)(*(_QWORD *)v12 + 8);
    if (v18.u32[0] > 1uLL)
    {
      if (v22 >= *(_QWORD *)&v16)
        v22 %= *(_QWORD *)&v16;
    }
    else
    {
      v22 &= *(_QWORD *)&v16 - 1;
    }
    if (v22 != v17)
LABEL_37:
      *(_QWORD *)(*a1 + 8 * v17) = 0;
  }
  v23 = *(unsigned __int8 **)v12;
  if (*(_QWORD *)v12)
  {
    v24 = *((_QWORD *)v23 + 1);
    if (v18.u32[0] > 1uLL)
    {
      if (v24 >= *(_QWORD *)&v16)
        v24 %= *(_QWORD *)&v16;
    }
    else
    {
      v24 &= *(_QWORD *)&v16 - 1;
    }
    if (v24 != v17)
    {
      *(_QWORD *)(*a1 + 8 * v24) = v20;
      v23 = *(unsigned __int8 **)v12;
    }
  }
  *v20 = v23;
  *(_QWORD *)v12 = 0;
  --*v4;
  v25[0] = v12;
  v25[1] = a1 + 2;
  v14 = 1;
  v26 = 1;
  std::unique_ptr<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>,std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<std::string,std::shared_ptr<MessageSession>>,void *>>>>::reset[abi:ne180100]((uint64_t)v25);
  return v14;
}

uint64_t ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_QWORD *)(a1 + 64) = 0;
  v2 = *(std::__shared_weak_count **)(a1 + 72);
  *(_QWORD *)(a1 + 72) = 0;
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a1 + 64);
  return a1;
}

uint64_t __cxx_global_var_init()
{
  uint64_t result;

  {
    return __cxa_atexit((void (*)(void *))ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>::~PthreadMutexGuardPolicy, &ctu::Singleton<ctu::XpcJetsamAssertion,ctu::XpcJetsamAssertion,ctu::PthreadMutexGuardPolicy<ctu::XpcJetsamAssertion>>::sInstance, &dword_1BEDF4000);
  }
  return result;
}

void IMSVirtualInterface::IMSVirtualInterface(IMSVirtualInterface *this)
{
  std::string __p;

  std::string::basic_string[abi:ne180100]<0>(&__p, "ipsec");
  ImsLogContainer::ImsLogContainer((uint64_t)this, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)this = &off_1E78C80C8;
  *(_OWORD *)((char *)this + 104) = 0u;
  *(_OWORD *)((char *)this + 120) = 0u;
  *(_OWORD *)((char *)this + 136) = 0u;
}

void sub_1BEF35F10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void IMSVirtualInterface::~IMSVirtualInterface(void **this)
{
  *this = &off_1E78C80C8;
  IMSVirtualInterface::deinitialize((IMSVirtualInterface *)this);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)(this + 17));
  if (*((char *)this + 135) < 0)
    operator delete(this[14]);
  *this = off_1E78CFE68;
  if (*((char *)this + 55) < 0)
    operator delete(this[4]);
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  IMSVirtualInterface::~IMSVirtualInterface(this);
  JUMPOUT(0x1C3B87100);
}

void IMSVirtualInterface::deinitialize(IMSVirtualInterface *this)
{
  uint64_t v2;

  if (*((_QWORD *)this + 13))
  {
    v2 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v2);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"deinitializing virtual interface", 32);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v2 + 17) = 0;
    VirtualInterfaceInvalidate(*((_QWORD *)this + 13));
    CFRelease(*((CFTypeRef *)this + 13));
    *((_QWORD *)this + 13) = 0;
    std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 17);
    if (*((char *)this + 135) < 0)
    {
      **((_BYTE **)this + 14) = 0;
      *((_QWORD *)this + 15) = 0;
    }
    else
    {
      *((_BYTE *)this + 112) = 0;
      *((_BYTE *)this + 135) = 0;
    }
  }
}

void IMSVirtualInterface::initialize(IMSVirtualInterface *this@<X0>, IpAddress **a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  IMSClientManager *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned __int16 *v21;
  int v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(uint64_t, std::string::size_type);
  uint64_t v28;
  int v29;
  uint64_t v30;
  const __CFString *v31;
  void **v32;
  std::__shared_weak_count *size;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  ImsResult *v37;
  ImsResult *v38;
  ImsResult *v39;
  ImsResult *v40;
  void (**v41)(ims::CFString *__hidden);
  const __CFString *v42;
  void (**v43)(ims::CFString *__hidden);
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  void *v47[2];
  uint64_t v48;
  std::string __p;
  __int128 v50;
  __int128 v51;
  __int128 v52;

  if (*((_QWORD *)this + 13))
  {
    v10 = *((_QWORD *)this + 17);
    if (v10 && (*(unsigned int (**)(uint64_t, IpAddress **, _QWORD))(*(_QWORD *)v10 + 104))(v10, a2, 0))
    {
      v11 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v11);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)"virtual interface ", 18);
      *(_BYTE *)(v11 + 17) = 0;
      LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 112));
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v11 + 40))(v11, &__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v11 + 8), (uint64_t)" already configured", 19);
      *(_BYTE *)(v11 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v11 + 64))(v11, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v11 + 17) = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      *(_OWORD *)(a5 + 24) = 0u;
      *(_OWORD *)(a5 + 40) = 0u;
      *(_OWORD *)(a5 + 56) = 0u;
      *(_QWORD *)a5 = &off_1E78B7238;
      *(_QWORD *)(a5 + 8) = &_bambiDomain;
      *(_DWORD *)(a5 + 16) = 0;
      return;
    }
    IMSVirtualInterface::deinitialize(this);
  }
  v12 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v12);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"creating virtual interface with mtu=", 36);
  *(_BYTE *)(v12 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v12 + 17) = 0;
  v13 = (IMSClientManager *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v12 + 17) = 0;
  v14 = VirtualInterfaceCreateNexus;
  v15 = *MEMORY[0x1E0C9AE00];
  IMSClientManager::instance(v13);
  IMSClientManager::queue((NSObject **)&__p);
  v16 = ((uint64_t (*)(uint64_t, uint64_t, std::string::size_type, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD, _QWORD))v14)(v15, 2, __p.__r_.__value_.__r.__words[0], 0, 1, 0, a3, 0, 0);
  *((_QWORD *)this + 13) = v16;
  if (__p.__r_.__value_.__r.__words[0])
  {
    dispatch_release((dispatch_object_t)__p.__r_.__value_.__l.__data_);
    v16 = *((_QWORD *)this + 13);
  }
  if (!v16)
  {
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
    v37 = (ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)&__p, "NEVirtualInterfaceCreate failed");
    ImsLogContainer::logResult(this, v37);
    ImsResult::ImsResult((ImsResult *)a5, v37);
    ImsResult::~ImsResult((ImsResult *)&__p);
    return;
  }
  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  IpAddress::asString(*a2, 0, v47);
  v45 = 0;
  v46 = 0;
  ims::CFString::CFString(&v45, (char *)v47, 0x8000100u);
  v17 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
  (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"adding ", 7);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(IpAddress *, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, v17);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)" to virtual interface", 21);
  *(_BYTE *)(v17 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v17 + 17) = 0;
  v43 = &off_1E78EAB58;
  v44 = 0;
  v18 = (*(uint64_t (**)(IpAddress *))(*(_QWORD *)*a2 + 128))(*a2);
  v19 = *(unsigned __int8 *)(v18 + 23);
  v20 = (char)v19;
  if ((v19 & 0x80u) != 0)
    v19 = *(_QWORD *)(v18 + 8);
  if (v19 == 3)
  {
    v21 = v20 >= 0 ? (unsigned __int16 *)v18 : *(unsigned __int16 **)v18;
    v22 = *v21;
    v23 = *((unsigned __int8 *)v21 + 2);
    if (v22 == 20553 && v23 == 54)
      ims::CFType::setRef((ims::CFType *)&v43, CFSTR("FFFF:FFFF:FFFF:FFFF::0"), 1);
  }
  if (VirtualInterfaceAddAddress(*((_QWORD *)this + 13), v46, v44))
  {
    v25 = *(unsigned __int8 *)(a4 + 23);
    if ((v25 & 0x80u) != 0)
      v25 = *(_QWORD *)(a4 + 8);
    if (!v25)
      goto LABEL_30;
    v26 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
    (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v26);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v26 + 8), (uint64_t)"setting delegate interface to ", 30);
    *(_BYTE *)(v26 + 17) = 0;
    LoggableString::LoggableString(&__p, (const std::string *)a4);
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v26 + 40))(v26, &__p);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v26 + 64))(v26, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v26 + 17) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v27 = (uint64_t (*)(uint64_t, std::string::size_type))VirtualInterfaceSetDelegateInterface;
    v28 = *((_QWORD *)this + 13);
    ims::CFString::CFString(&__p, (char *)a4, 0x8000100u);
    v29 = v27(v28, __p.__r_.__value_.__l.__size_);
    ims::CFType::~CFType((ims::CFType *)&__p);
    if (!v29)
    {
      IMSVirtualInterface::deinitialize(this);
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
      v40 = (ImsResult *)ImsResult::operator<<<char [46]>((uint64_t)&__p, "NEVirtualInterfaceSetDelegateInterface failed");
      ImsLogContainer::logResult(this, v40);
      ImsResult::ImsResult((ImsResult *)a5, v40);
    }
    else
    {
LABEL_30:
      VirtualInterfaceSetRankNever(*((_QWORD *)this + 13), 1);
      v30 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
      (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v30);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v30 + 8), (uint64_t)"updating configd", 16);
      *(_BYTE *)(v30 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v30 + 64))(v30, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v30 + 17) = 0;
      if (VirtualInterfaceUpdateAdHocService(*((_QWORD *)this + 13)))
      {
        v41 = 0;
        v42 = 0;
        v31 = (const __CFString *)VirtualInterfaceCopyName(*((_QWORD *)this + 13));
        v41 = &off_1E78EAB58;
        v42 = v31;
        ims::CFString::asString(v31, (const void *)0x8000100, &__p);
        v32 = (void **)((char *)this + 112);
        if (*((char *)this + 135) < 0)
          operator delete(*v32);
        *(_OWORD *)v32 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        *((_QWORD *)this + 16) = *((_QWORD *)&__p.__r_.__value_.__l + 2);
        (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*a2 + 32))(&__p);
        std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 136, (__int128 *)&__p);
        size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (__p.__r_.__value_.__l.__size_)
        {
          v34 = (unint64_t *)(__p.__r_.__value_.__l.__size_ + 8);
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
            std::__shared_weak_count::__release_weak(size);
          }
        }
        v36 = (*(uint64_t (**)(IMSVirtualInterface *))(*(_QWORD *)this + 64))(this);
        (*(void (**)(IMSVirtualInterface *, uint64_t))(*(_QWORD *)this + 16))(this, v36);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)"initialized virtual interface ", 30);
        *(_BYTE *)(v36 + 17) = 0;
        LoggableString::LoggableString(&__p, (const std::string *)((char *)this + 112));
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v36 + 40))(v36, &__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v36 + 8), (uint64_t)" with address ", 14);
        *(_BYTE *)(v36 + 17) = 0;
        (*(void (**)(IpAddress *, uint64_t))(*(_QWORD *)*a2 + 40))(*a2, v36);
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v36 + 64))(v36, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v36 + 17) = 0;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        *(_OWORD *)(a5 + 24) = 0u;
        *(_OWORD *)(a5 + 40) = 0u;
        *(_OWORD *)(a5 + 56) = 0u;
        *(_QWORD *)a5 = &off_1E78B7238;
        *(_QWORD *)(a5 + 8) = &_bambiDomain;
        *(_DWORD *)(a5 + 16) = 0;
        ims::CFType::~CFType((ims::CFType *)&v41);
        goto LABEL_46;
      }
      IMSVirtualInterface::deinitialize(this);
      v50 = 0u;
      v51 = 0u;
      v52 = 0u;
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
      __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
      LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
      v39 = (ImsResult *)ImsResult::operator<<<char [44]>((uint64_t)&__p, "NEVirtualInterfaceUpdateAdHocService failed");
      ImsLogContainer::logResult(this, v39);
      ImsResult::ImsResult((ImsResult *)a5, v39);
    }
  }
  else
  {
    IMSVirtualInterface::deinitialize(this);
    v50 = 0u;
    v51 = 0u;
    v52 = 0u;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B7238;
    __p.__r_.__value_.__l.__size_ = (std::string::size_type)&_bambiDomain;
    LODWORD(__p.__r_.__value_.__r.__words[2]) = 0x40000000;
    v38 = (ImsResult *)ImsResult::operator<<<char [36]>((uint64_t)&__p, "NEVirtualInterfaceAddAddress failed");
    ImsLogContainer::logResult(this, v38);
    ImsResult::ImsResult((ImsResult *)a5, v38);
  }
  ImsResult::~ImsResult((ImsResult *)&__p);
LABEL_46:
  ims::CFType::~CFType((ims::CFType *)&v43);
  ims::CFType::~CFType((ims::CFType *)&v45);
  if (SHIBYTE(v48) < 0)
    operator delete(v47[0]);
}

void sub_1BEF36890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,dispatch_object_t object,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  ims::CFType::~CFType((ims::CFType *)&a13);
  ims::CFType::~CFType((ims::CFType *)&a15);
  if (a22 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [46]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF36A04(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<char [44]>(uint64_t a1, char *__s)
{
  uint64_t v4;
  size_t v5;

  v4 = *(_QWORD *)(a1 + 24);
  if (!v4)
  {
    v4 = operator new();
    ImsStringOutStream::ImsStringOutStream((ImsStringOutStream *)v4, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v4;
  }
  v5 = strlen(__s);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)__s, v5);
  *(_BYTE *)(v4 + 17) = 0;
  return a1;
}

void sub_1BEF36AA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

_QWORD *IMSVirtualInterface::logPrefix(IMSVirtualInterface *this, ImsOutStream *a2)
{
  _QWORD *result;

  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"VirtualInterface ", 17);
  *((_BYTE *)a2 + 17) = 0;
  (*(void (**)(ImsOutStream *, char *))(*(_QWORD *)a2 + 32))(a2, (char *)this + 112);
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)": ", 2);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void IMSVirtualInterface::setMTU(IMSVirtualInterface *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  const ImsResult *v5;
  const ImsResult *v6;
  void (**v7)(ImsResult *__hidden);
  uint64_t *v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  int v13;

  v13 = a2;
  if (*((_QWORD *)this + 13))
  {
    if (a2 <= 0)
    {
      v10 = 0u;
      v11 = 0u;
      v12 = 0u;
      v7 = &off_1E78B7238;
      v8 = &_bambiDomain;
      v9 = 1073741825;
      v4 = ImsResult::operator<<<int>((uint64_t)&v7);
      v5 = (const ImsResult *)ImsResult::operator<<<char [20]>(v4, " is not a valid MTU");
      ImsResult::ImsResult((ImsResult *)a3, v5);
    }
    else
    {
      if (VirtualInterfaceSetMTU())
      {
        *(_OWORD *)(a3 + 24) = 0uLL;
        *(_OWORD *)(a3 + 40) = 0uLL;
        *(_OWORD *)(a3 + 56) = 0uLL;
        *(_QWORD *)a3 = &off_1E78B7238;
        *(_QWORD *)(a3 + 8) = &_bambiDomain;
        *(_DWORD *)(a3 + 16) = 0;
        return;
      }
      v10 = 0uLL;
      v11 = 0uLL;
      v12 = 0uLL;
      v7 = &off_1E78B7238;
      v8 = &_bambiDomain;
      v9 = 0x40000000;
      v6 = (const ImsResult *)ImsResult::operator<<<char [32]>((uint64_t)&v7, "NEVirtualInterfaceSetMTU failed");
      ImsResult::ImsResult((ImsResult *)a3, v6);
    }
    ImsResult::~ImsResult((ImsResult *)&v7);
  }
  else
  {
    *(_OWORD *)(a3 + 24) = 0u;
    *(_OWORD *)(a3 + 40) = 0u;
    *(_OWORD *)(a3 + 56) = 0u;
    *(_QWORD *)a3 = &off_1E78B7238;
    *(_QWORD *)(a3 + 8) = &_bambiDomain;
    *(_DWORD *)(a3 + 16) = 1073741827;
  }
}

void sub_1BEF36C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ImsResult::~ImsResult((ImsResult *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ImsResult::operator<<<int>(uint64_t a1)
{
  ImsStringOutStream *v2;

  v2 = *(ImsStringOutStream **)(a1 + 24);
  if (!v2)
  {
    v2 = (ImsStringOutStream *)operator new();
    ImsStringOutStream::ImsStringOutStream(v2, *(_BYTE *)(*(_QWORD *)(a1 + 8) + 32));
    *(_QWORD *)(a1 + 24) = v2;
  }
  std::ostream::operator<<();
  *((_BYTE *)v2 + 17) = 0;
  return a1;
}

void sub_1BEF36D00(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10A1C4082A5C483);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::AccessBarringHandler::listenForIndication(LegacyQMINasClient::AccessBarringHandler *this, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  _QWORD v11[4];
  char v12;
  void *__p;
  uint64_t v14;
  int v15;
  char v16;
  uint64_t v17;
  void *v18;
  _OWORD v19[2];
  void *aBlock[2];
  void (*v21)(uint64_t, uint64_t);
  void *v22;
  _QWORD *v23;

  if (*((unsigned __int8 *)this + 16) == (_DWORD)a2)
  {
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"already ", 8);
    *(_BYTE *)(v4 + 17) = 0;
    if ((_DWORD)a2)
      v5 = "";
    else
      v5 = "not ";
    if ((_DWORD)a2)
      v6 = 0;
    else
      v6 = 4;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)v5, v6);
    *(_BYTE *)(v4 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"listening for ", 14);
    *(_BYTE *)(v4 + 17) = 0;
    v7 = (*(uint64_t (**)(LegacyQMINasClient::AccessBarringHandler *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 32))(v4, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)" indication", 11);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v16 < 0)
      operator delete(__p);
    if (SHIBYTE(v21) < 0)
      operator delete(aBlock[0]);
  }
  else
  {
    *((_BYTE *)this + 16) = a2;
    memset(v19, 0, sizeof(v19));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
    (**(void (***)(LegacyQMINasClient::AccessBarringHandler *, _OWORD *, uint64_t))this)(this, v19, a2);
    std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(&__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v8 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"registering for ", 16);
    *(_BYTE *)(v8 + 17) = 0;
    v9 = (*(uint64_t (**)(LegacyQMINasClient::AccessBarringHandler *))(*(_QWORD *)this + 32))(this);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 32))(v8, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" change indication", 18);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    if (v16 < 0)
      operator delete(__p);
    if (SHIBYTE(v21) < 0)
      operator delete(aBlock[0]);
    __p = (void *)(*((_QWORD *)this + 1) + 72);
    v14 = QMIServiceMsg::create();
    v15 = 25000;
    v17 = 0;
    v18 = 0;
    v11[0] = MEMORY[0x1E0C809B0];
    v11[1] = 0x40000000;
    v11[2] = ___ZN18LegacyQMINasClient20AccessBarringHandler19listenForIndicationEb_block_invoke;
    v11[3] = &__block_descriptor_tmp_12;
    v12 = a2;
    aBlock[0] = (void *)MEMORY[0x1E0C809B0];
    aBlock[1] = (void *)0x40000000;
    v21 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    v22 = &unk_1E78C83E0;
    v23 = v11;
    v10 = _Block_copy(aBlock);
    v18 = v10;
    if (v14)
    {
      qmi::Client::send();
      v10 = v18;
    }
    if (v10)
      _Block_release(v10);
    (*(void (**)(LegacyQMINasClient::AccessBarringHandler *, uint64_t))(*(_QWORD *)this + 8))(this, a2);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
  }
}

void sub_1BEF3704C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a22);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMINasClient20AccessBarringHandler19listenForIndicationEb_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  uint64_t v6;
  const char *v7;
  void *__p[2];
  char v9;
  void *v10[2];
  char v11;

  if (*(_DWORD *)(a2 + 4))
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v2 = ImsLogger::error(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"Access Barring Indication Register request failed: ", 51);
    *(_BYTE *)(v2 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)" (", 2);
    *(_BYTE *)(v2 + 17) = 0;
    v3 = (const char *)qmi::asString();
    v4 = strlen(v3);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)v3, v4);
    *(_BYTE *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)")", 1);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v10, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)v10, (uint64_t)__p);
    v2 = v6;
    if (*(_BYTE *)(a1 + 32))
      v7 = "";
    else
      v7 = "not ";
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)v7, 4 * (*(_BYTE *)(a1 + 32) == 0));
    *(_BYTE *)(v2 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"listening for Access Barring indication", 39);
    *(_BYTE *)(v2 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  }
  *(_BYTE *)(v2 + 17) = 0;
  if (v9 < 0)
    operator delete(__p[0]);
  if (v11 < 0)
    operator delete(v10[0]);
}

void sub_1BEF372C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void qmi::Client::SendProxy::~SendProxy(qmi::Client::SendProxy *this)
{
  const void *v2;

  if (*((_QWORD *)this + 1))
    qmi::Client::send();
  v2 = (const void *)*((_QWORD *)this + 4);
  if (v2)
    _Block_release(v2);
}

_BYTE *LegacyQMINasClient::SsacHandler::initializeIndicationRegisterRequest(uint64_t a1, _QWORD *a2, char a3)
{
  _BYTE *result;

  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(a2, 42) = 0;
  result = (_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacChangeInfo>(a2, 48);
  *result = a3;
  return result;
}

uint64_t LegacyQMINasClient::SsacHandler::internalListenForIndication(LegacyQMINasClient::SsacHandler *this, int a2)
{
  uint64_t result;
  _QWORD v5[10];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN18LegacyQMINasClient11SsacHandler27internalListenForIndicationEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_18;
  v5[4] = this;
  v5[5] = MEMORY[0x1E0C809B0];
  v5[6] = 0x40000000;
  v5[7] = ___ZNK3qmi6Client13setIndHandlerIRKN3nas11SsacInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v5[8] = &unk_1E78C84B8;
  v5[9] = v5;
  result = qmi::Client::setIndHandler();
  if (a2)
    return (*(uint64_t (**)(LegacyQMINasClient::SsacHandler *))(*(_QWORD *)this + 40))(this);
  return result;
}

void ___ZN18LegacyQMINasClient11SsacHandler27internalListenForIndicationEb_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;
  _QWORD v9[5];
  uint64_t v10;
  __int16 *v11;
  uint64_t v12;
  uint64_t (*v13)(uint64_t, uint64_t);
  uint64_t (*v14)();
  uint64_t v15;
  uint64_t v16;
  int v17;

  v2 = *(_QWORD *)(a1 + 32);
  v10 = 0;
  v11 = (__int16 *)&v10;
  v12 = 0x4002000000;
  v13 = __Block_byref_object_copy__0;
  v14 = __Block_byref_object_dispose__0;
  v15 = 100;
  v16 = 0;
  v17 = 0;
  v9[0] = MEMORY[0x1E0C809B0];
  v9[1] = 0x40000000;
  v9[2] = ___ZN18LegacyQMINasClient11SsacHandler24handleSsacInfoIndicationERKN3nas11SsacInfoInd10IndicationE_block_invoke;
  v9[3] = &unk_1E78C8198;
  v9[4] = &v10;
  v7[0] = v9;
  qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(a2, 16, (uint64_t)v7);
  std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Got SSAC indication: ", 21);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)", ", 2);
  *(_BYTE *)(v3 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v6 < 0)
    operator delete(__p[0]);
  if (v8 < 0)
    operator delete(v7[0]);
  v4 = *(_QWORD **)(v2 + 8);
  if (v4)
    IMSNasClient::notifyDelegates(v4, 0, v11 + 20, 1);
  _Block_object_dispose(&v10, 8);
}

void sub_1BEF375D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (a21 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v21 - 80), 8);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::SsacHandler::requestCurrentBarringInfo(LegacyQMINasClient::SsacHandler *this)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[5];
  void *__p;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  void *v10;
  _OWORD v11[2];
  void *aBlock[2];
  void (*v13)(uint64_t, uint64_t);
  void *v14;
  _QWORD *v15;

  std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"requesting current SSAC info", 28);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v8 < 0)
    operator delete(__p);
  if (SHIBYTE(v13) < 0)
    operator delete(aBlock[0]);
  memset(v11, 0, sizeof(v11));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
  __p = (void *)(*((_QWORD *)this + 1) + 72);
  v6 = QMIServiceMsg::create();
  v7 = 25000;
  v9 = 0;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN18LegacyQMINasClient11SsacHandler25requestCurrentBarringInfoEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_24;
  v4[4] = this;
  aBlock[0] = (void *)MEMORY[0x1E0C809B0];
  aBlock[1] = (void *)0x40000000;
  v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11GetSsacInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v14 = &unk_1E78C84E0;
  v15 = v4;
  v3 = _Block_copy(aBlock);
  v10 = v3;
  if (v6)
  {
    qmi::Client::send();
    v3 = v10;
  }
  if (v3)
    _Block_release(v3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1BEF377A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a22);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMINasClient11SsacHandler25requestCurrentBarringInfoEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  const char *v10;
  size_t v11;
  void *v12[2];
  char v13;
  void *v14[2];
  char v15;
  void *__p[2];
  uint64_t (*v17)(uint64_t, unsigned __int8 *);
  void *v18;
  void **v19;
  void *v20;
  void **v21;
  uint64_t v22;
  uint64_t (*v23)(uint64_t, uint64_t);
  uint64_t (*v24)();
  uint64_t v25;
  uint64_t v26;
  int v27;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *((_DWORD *)a2 + 1);
  if (v4)
  {
    if (v4 == 74)
    {
      if (*(_QWORD *)(v3 + 8))
      {
        std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v20, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"no SSAC information available", 29);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
        std::string::basic_string[abi:ne180100]<0>(__p, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v5 = ImsLogger::error(ims::_logger, (uint64_t)&v20, (uint64_t)__p);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"no delegate", 11);
      }
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v9 = ImsLogger::error(ims::_logger, (uint64_t)&v20, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"GetSsacInfo request failed: ", 28);
      *(_BYTE *)(v9 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" (", 2);
      *(_BYTE *)(v9 + 17) = 0;
      v10 = (const char *)qmi::asString();
      v11 = strlen(v10);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)v10, v11);
      *(_BYTE *)(v9 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v9 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v9 + 17) = 0;
    }
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v20, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v20, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received GetSsacInfo response", 29);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22) < 0)
      operator delete(v20);
    v20 = 0;
    v21 = &v20;
    v22 = 0x4002000000;
    v23 = __Block_byref_object_copy__0;
    v24 = __Block_byref_object_dispose__0;
    v26 = 0;
    v27 = 0;
    v25 = 100;
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)0x40000000;
    v17 = ___ZN18LegacyQMINasClient11SsacHandler22handleSsacInfoResponseERKN3nas11GetSsacInfo8ResponseE_block_invoke;
    v18 = &unk_1E78C81C0;
    v19 = &v20;
    v14[0] = __p;
    qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(a2, 16, (uint64_t)v14);
    std::string::basic_string[abi:ne180100]<0>(v14, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v12, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v7 = ImsLogger::debug(ims::_logger, (uint64_t)v14, (uint64_t)v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Got SSAC response: ", 19);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)", ", 2);
    *(_BYTE *)(v7 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    if (v13 < 0)
      operator delete(v12[0]);
    if (v15 < 0)
      operator delete(v14[0]);
    v8 = *(_QWORD **)(v3 + 8);
    if (v8)
      IMSNasClient::notifyDelegates(v8, 0, (__int16 *)v21 + 20, 1);
    _Block_object_dispose(&v20, 8);
  }
}

void sub_1BEF37C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t __Block_byref_object_copy__0(uint64_t result, uint64_t a2)
{
  *(_WORD *)(result + 40) = 100;
  *(_DWORD *)(result + 44) = 0;
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 52) = 0;
  *(_BYTE *)(result + 56) = 0;
  *(_WORD *)(result + 40) = *(_WORD *)(a2 + 40);
  *(_DWORD *)(result + 44) = *(_DWORD *)(a2 + 44);
  *(_BYTE *)(result + 48) = *(_BYTE *)(a2 + 48);
  *(_DWORD *)(result + 52) = *(_DWORD *)(a2 + 52);
  *(_BYTE *)(result + 56) = *(_BYTE *)(a2 + 56);
  return result;
}

uint64_t ___ZN18LegacyQMINasClient11SsacHandler24handleSsacInfoIndicationERKN3nas11SsacInfoInd10IndicationE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 1;
  *(_BYTE *)(v2 + 56) = 1;
  if (v3 > 0x64 || v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN18LegacyQMINasClient11SsacHandler22handleSsacInfoResponseERKN3nas11GetSsacInfo8ResponseE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *a2;
  v4 = *((unsigned __int16 *)a2 + 1);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(_BYTE *)(v2 + 48) = 0;
  *(_DWORD *)(v2 + 52) = 1;
  *(_BYTE *)(v2 + 56) = 1;
  if (v3 > 0x64 || v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

_BYTE *LegacyQMINasClient::AcbHandler::initializeIndicationRegisterRequest(uint64_t a1, _QWORD *a2, char a3)
{
  _BYTE *result;

  *(_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(a2, 42) = 0;
  result = (_BYTE *)qmi::MutableMessageBase::getTLV<nas::tlv::RegAcbChangeInfo>(a2, 44);
  *result = a3;
  return result;
}

uint64_t LegacyQMINasClient::AcbHandler::internalListenForIndication(LegacyQMINasClient::AcbHandler *this, int a2)
{
  uint64_t result;
  _QWORD v5[10];

  v5[0] = MEMORY[0x1E0C809B0];
  v5[1] = 0x40000000;
  v5[2] = ___ZN18LegacyQMINasClient10AcbHandler27internalListenForIndicationEb_block_invoke;
  v5[3] = &__block_descriptor_tmp_35;
  v5[4] = this;
  v5[5] = MEMORY[0x1E0C809B0];
  v5[6] = 0x40000000;
  v5[7] = ___ZNK3qmi6Client13setIndHandlerIRKN3nas10AcbInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  v5[8] = &unk_1E78C8558;
  v5[9] = v5;
  result = qmi::Client::setIndHandler();
  if (a2)
    return (*(uint64_t (**)(LegacyQMINasClient::AcbHandler *))(*(_QWORD *)this + 40))(this);
  return result;
}

void ___ZN18LegacyQMINasClient10AcbHandler27internalListenForIndicationEb_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _QWORD *v8;
  void *v9[2];
  char v10;
  void *v11[2];
  char v12;
  void *v13[2];
  char v14;
  void *v15[2];
  uint64_t (*v16)(uint64_t, unsigned __int8 *);
  void *v17;
  uint64_t *v18;
  void *__p[2];
  char v20;
  _QWORD v21[5];
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t (*v25)(uint64_t, uint64_t);
  uint64_t (*v26)();
  uint64_t v27;
  uint64_t v28;
  int v29;

  v3 = *(_QWORD *)(a1 + 32);
  v22 = 0;
  v23 = &v22;
  v24 = 0x4002000000;
  v25 = __Block_byref_object_copy__0;
  v26 = __Block_byref_object_dispose__0;
  v27 = 100;
  v28 = 0;
  v29 = 0;
  v4 = (void *)MEMORY[0x1E0C809B0];
  v21[0] = MEMORY[0x1E0C809B0];
  v21[1] = 0x40000000;
  v21[2] = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke;
  v21[3] = &unk_1E78C85A8;
  v21[4] = &v22;
  v15[0] = v21;
  qmi::MessageBase::applyTlv<nas::tlv::AcbInfoSignaling,void({block_pointer}&)(nas::tlv::AcbInfoSignaling&)>(a2, v15);
  if (!*((_BYTE *)v23 + 56))
  {
    std::string::basic_string[abi:ne180100]<0>(v15, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v5 = ImsLogger::debug(ims::_logger, (uint64_t)v15, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Did not get a valid Signaling TLV. Trying the Data TLV.", 55);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    if (v20 < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v16) < 0)
      operator delete(v15[0]);
    v15[0] = v4;
    v15[1] = (void *)0x40000000;
    v16 = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke_2;
    v17 = &unk_1E78C85D0;
    v18 = &v22;
    __p[0] = v15;
    qmi::MessageBase::applyTlv<nas::tlv::AcbInfoData,void({block_pointer}&)(nas::tlv::AcbInfoData&)>(a2, __p);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v13, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v6 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v13);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Received ACB info: ", 19);
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Services : ", 11);
  *(_BYTE *)(v6 + 17) = 0;
  v7 = *((_DWORD *)v23 + 13);
  std::string::basic_string[abi:ne180100]<0>(v9, ",");
  BambiServices::namesForServiceMask(v7, (uint64_t)v9, v11);
  (*(void (**)(uint64_t, void **))(*(_QWORD *)v6 + 32))(v6, v11);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", Factor : ", 11);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", Time : ", 9);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)", SpecialAccessClass: ", 22);
  *(_BYTE *)(v6 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  if (v12 < 0)
    operator delete(v11[0]);
  if (v10 < 0)
    operator delete(v9[0]);
  if (v14 < 0)
    operator delete(v13[0]);
  if (v20 < 0)
    operator delete(__p[0]);
  v8 = *(_QWORD **)(v3 + 8);
  if (v8)
    IMSNasClient::notifyDelegates(v8, 0, (__int16 *)v23 + 20, 2);
  _Block_object_dispose(&v22, 8);
}

void sub_1BEF38258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a32 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v40 - 128), 8);
  _Unwind_Resume(a1);
}

void LegacyQMINasClient::AcbHandler::requestCurrentBarringInfo(LegacyQMINasClient::AcbHandler *this)
{
  uint64_t v2;
  void *v3;
  _QWORD v4[5];
  void *__p;
  uint64_t v6;
  int v7;
  char v8;
  uint64_t v9;
  void *v10;
  _OWORD v11[2];
  void *aBlock[2];
  void (*v13)(uint64_t, uint64_t);
  void *v14;
  _QWORD *v15;

  std::string::basic_string[abi:ne180100]<0>(aBlock, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(&__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)aBlock, (uint64_t)&__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"requesting current ACB info", 27);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v8 < 0)
    operator delete(__p);
  if (SHIBYTE(v13) < 0)
    operator delete(aBlock[0]);
  memset(v11, 0, sizeof(v11));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
  __p = (void *)(*((_QWORD *)this + 1) + 72);
  v6 = QMIServiceMsg::create();
  v7 = 25000;
  v9 = 0;
  v10 = 0;
  v4[0] = MEMORY[0x1E0C809B0];
  v4[1] = 0x40000000;
  v4[2] = ___ZN18LegacyQMINasClient10AcbHandler25requestCurrentBarringInfoEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_40;
  v4[4] = this;
  aBlock[0] = (void *)MEMORY[0x1E0C809B0];
  aBlock[1] = (void *)0x40000000;
  v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetAcbInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  v14 = &unk_1E78C8580;
  v15 = v4;
  v3 = _Block_copy(aBlock);
  v10 = v3;
  if (v6)
  {
    qmi::Client::send();
    v3 = v10;
  }
  if (v3)
    _Block_release(v3);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
}

void sub_1BEF3848C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,char a22)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a22);
  _Unwind_Resume(a1);
}

void ___ZN18LegacyQMINasClient10AcbHandler25requestCurrentBarringInfoEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _QWORD *v11;
  uint64_t v12;
  const char *v13;
  size_t v14;
  void *v15[2];
  char v16;
  void *v17[2];
  char v18;
  void *v19[2];
  char v20;
  void *v21[2];
  uint64_t (*v22)(uint64_t, unsigned __int8 *);
  void *v23;
  void **v24;
  void *v25[2];
  char v26;
  void *__p[2];
  uint64_t (*v28)(uint64_t, uint64_t);
  void *v29;
  void **v30;
  void *v31;
  void **v32;
  uint64_t v33;
  uint64_t (*v34)(uint64_t, uint64_t);
  uint64_t (*v35)();
  uint64_t v36;
  uint64_t v37;
  int v38;

  v3 = *(_QWORD *)(a1 + 32);
  v4 = *((_DWORD *)a2 + 1);
  if (v4)
  {
    if (v4 == 74)
    {
      if (!*(_QWORD *)(v3 + 8))
        return;
      std::string::basic_string[abi:ne180100]<0>(&v31, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v5 = ImsLogger::debug(ims::_logger, (uint64_t)&v31, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"no ACB information available", 28);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v31, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(__p, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v12 = ImsLogger::error(ims::_logger, (uint64_t)&v31, (uint64_t)__p);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"GetAcbInfo request failed: ", 27);
      *(_BYTE *)(v12 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)" (", 2);
      *(_BYTE *)(v12 + 17) = 0;
      v13 = (const char *)qmi::asString();
      v14 = strlen(v13);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)v13, v14);
      *(_BYTE *)(v12 + 17) = 0;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)")", 1);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
    }
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v33) < 0)
      operator delete(v31);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v31, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&v31, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"received GetAcbInfo response", 28);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (SHIBYTE(v28) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v33) < 0)
      operator delete(v31);
    v31 = 0;
    v32 = &v31;
    v33 = 0x4002000000;
    v34 = __Block_byref_object_copy__0;
    v35 = __Block_byref_object_dispose__0;
    v36 = 100;
    v37 = 0;
    v38 = 0;
    v7 = (void *)MEMORY[0x1E0C809B0];
    __p[0] = (void *)MEMORY[0x1E0C809B0];
    __p[1] = (void *)0x40000000;
    v28 = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke;
    v29 = &unk_1E78C85F8;
    v30 = &v31;
    v21[0] = __p;
    qmi::MessageBase::applyTlv<nas::tlv::AcbInfoSignaling,void({block_pointer}&)(nas::tlv::AcbInfoSignaling&)>(a2, v21);
    if (!*((_BYTE *)v32 + 56))
    {
      std::string::basic_string[abi:ne180100]<0>(v21, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(v25, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::debug(ims::_logger, (uint64_t)v21, (uint64_t)v25);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Did not get a valid Signaling TLV. Trying the Data TLV.", 55);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v26 < 0)
        operator delete(v25[0]);
      if (SHIBYTE(v22) < 0)
        operator delete(v21[0]);
      v21[0] = v7;
      v21[1] = (void *)0x40000000;
      v22 = ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke_2;
      v23 = &unk_1E78C8620;
      v24 = &v31;
      v25[0] = v21;
      qmi::MessageBase::applyTlv<nas::tlv::AcbInfoData,void({block_pointer}&)(nas::tlv::AcbInfoData&)>(a2, v25);
    }
    std::string::basic_string[abi:ne180100]<0>(v25, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v19, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v9 = ImsLogger::debug(ims::_logger, (uint64_t)v25, (uint64_t)v19);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Received ACB info: ", 19);
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Services : ", 11);
    *(_BYTE *)(v9 + 17) = 0;
    v10 = *((_DWORD *)v32 + 13);
    std::string::basic_string[abi:ne180100]<0>(v15, ",");
    BambiServices::namesForServiceMask(v10, (uint64_t)v15, v17);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 32))(v9, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)", Factor : ", 11);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)", Time : ", 9);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)", SpecialAccessClass: ", 22);
    *(_BYTE *)(v9 + 17) = 0;
    std::ostream::operator<<();
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (v18 < 0)
      operator delete(v17[0]);
    if (v16 < 0)
      operator delete(v15[0]);
    if (v20 < 0)
      operator delete(v19[0]);
    if (v26 < 0)
      operator delete(v25[0]);
    v11 = *(_QWORD **)(v3 + 8);
    if (v11)
      IMSNasClient::notifyDelegates(v11, 0, (__int16 *)v32 + 20, 2);
    _Block_object_dispose(&v31, 8);
  }
}

void sub_1BEF38A84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  uint64_t v46;

  if (a32 < 0)
    operator delete(__p);
  _Block_object_dispose((const void *)(v46 - 128), 8);
  _Unwind_Resume(a1);
}

uint64_t LegacyQMINasClient::LegacyQMINasClient(uint64_t a1, dispatch_object_t *a2)
{
  _QWORD *v3;

  *(_QWORD *)a1 = off_1E78C1DA0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 32;
  *(_QWORD *)(a1 + 48) = *a2;
  if (*a2)
    dispatch_retain(*a2);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_QWORD *)a1 = &off_1E78C8230;
  *(_QWORD *)(a1 + 112) = &off_1E78C82E0;
  *(_BYTE *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_BYTE *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 120) = a1;
  *(_BYTE *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = &off_1E78C8348;
  *(_QWORD *)(a1 + 144) = a1;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  v3 = operator new(8uLL);
  *v3 = a1 + 112;
  *(_QWORD *)(a1 + 168) = v3 + 1;
  *(_QWORD *)(a1 + 176) = v3 + 1;
  *(_QWORD *)(a1 + 160) = v3;
  return a1;
}

void sub_1BEF38C38(_Unwind_Exception *a1)
{
  IMSNasClient *v1;
  qmi::Client *v2;
  std::__shared_weak_count *v4;

  qmi::Client::~Client(v2);
  v4 = (std::__shared_weak_count *)*((_QWORD *)v1 + 8);
  if (v4)
    std::__shared_weak_count::__release_weak(v4);
  IMSNasClient::~IMSNasClient(v1);
  _Unwind_Resume(a1);
}

void IMSNasClient::~IMSNasClient(IMSNasClient *this)
{
  NSObject *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = off_1E78C1DA0;
  v2 = *((_QWORD *)this + 6);
  if (v2)
    dispatch_release(v2);
  std::__tree<std::string>::destroy((uint64_t)this + 24, *((char **)this + 4));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 2);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

void LegacyQMINasClient::~LegacyQMINasClient(LegacyQMINasClient *this)
{
  void *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78C8230;
  v2 = (void *)*((_QWORD *)this + 20);
  if (v2)
  {
    *((_QWORD *)this + 21) = v2;
    operator delete(v2);
  }
  qmi::Client::~Client((LegacyQMINasClient *)((char *)this + 72));
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 8);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  IMSNasClient::~IMSNasClient(this);
}

{
  LegacyQMINasClient::~LegacyQMINasClient(this);
  JUMPOUT(0x1C3B87100);
}

uint64_t LegacyQMINasClient::initialize(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL8 v3;
  uint64_t v6;
  NSObject *v7;
  char v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_weak_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t *v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  std::string v30;
  IPTelephonyManager *v31;
  std::__shared_weak_count *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  std::__shared_weak_count *v36;
  void *v37;
  char v38;
  dispatch_object_t object;
  std::string __p;
  void *v41[2];
  char v42;

  if (!*(_BYTE *)(a1 + 104))
  {
    std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v41, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v6 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v41);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"initializing LegacyQMINasClient", 31);
    *(_BYTE *)(v6 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v6 + 17) = 0;
    if (v42 < 0)
      operator delete(v41[0]);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v7 = sImsDispatchQueue;
    if (sImsDispatchQueue
      || (v7 = dispatch_queue_create("com.apple.ipTelephony.queue", 0), (sImsDispatchQueue = (uint64_t)v7) != 0))
    {
      dispatch_retain(v7);
      v8 = 0;
    }
    else
    {
      v8 = 1;
    }
    std::string::basic_string[abi:ne180100]<0>(v41, "IMSNasClient");
    object = v7;
    if ((v8 & 1) == 0)
      dispatch_retain(v7);
    std::string::basic_string[abi:ne180100]<0>(&v37, "ims");
    v9 = *(std::__shared_weak_count **)(a1 + 64);
    if (v9)
    {
      v10 = *(_QWORD *)(a1 + 56);
      p_shared_weak_owners = (unint64_t *)&v9->__shared_weak_owners_;
      do
        v12 = __ldxr(p_shared_weak_owners);
      while (__stxr(v12 + 1, p_shared_weak_owners));
      v35 = 0;
      v36 = 0;
      v13 = std::__shared_weak_count::lock(v9);
      v14 = v13;
      if (v13)
      {
        v15 = (unint64_t *)&v13->__shared_weak_owners_;
        do
          v16 = __ldxr(v15);
        while (__stxr(v16 + 1, v15));
      }
      else
      {
        v10 = 0;
      }
      v35 = v10;
      v36 = v13;
      std::__shared_weak_count::__release_weak(v9);
      if (v14)
      {
        p_shared_owners = (unint64_t *)&v14->__shared_owners_;
        do
          v18 = __ldaxr(p_shared_owners);
        while (__stlxr(v18 - 1, p_shared_owners));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
          std::__shared_weak_count::__release_weak(v14);
        }
      }
    }
    else
    {
      v35 = 0;
      v36 = 0;
    }
    IPTelephonyManager::getInstance((uint64_t *)&v31);
    IPTelephonyManager::getBBServerConnection(v31, &v33);
    qmi::Client::createWithQueueLocal();
    v19 = (uint64_t *)(a1 + 88);
    std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100](a1 + 88, (__int128 *)&__p.__r_.__value_.__r.__words[2]);
    qmi::Client::~Client((qmi::Client *)&__p);
    v20 = v34;
    if (v34)
    {
      v21 = (unint64_t *)&v34->__shared_owners_;
      do
        v22 = __ldaxr(v21);
      while (__stlxr(v22 - 1, v21));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
      }
    }
    v23 = v32;
    if (v32)
    {
      v24 = (unint64_t *)&v32->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
    }
    if (v36)
      std::__shared_weak_count::__release_weak(v36);
    if (v38 < 0)
      operator delete(v37);
    if (object)
      dispatch_release(object);
    if (v42 < 0)
      operator delete(v41[0]);
    v26 = *v19;
    v3 = *v19 != 0;
    if (v26)
    {
      memset(&__p, 0, sizeof(__p));
      if (*(char *)(a2 + 23) < 0)
        std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
      else
        __p = *(std::string *)a2;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v30, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      else
        v30 = __p;
      qmi::Client::setHandler();
      qmi::Client::start((qmi::Client *)(a1 + 72));
      *(_BYTE *)(a1 + 104) = 1;
      if ((SHIBYTE(v30.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      {
LABEL_60:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          if ((v8 & 1) != 0)
            return v3;
        }
        else if ((v8 & 1) != 0)
        {
          return v3;
        }
        dispatch_release(v7);
        return v3;
      }
      v28 = (void *)v30.__r_.__value_.__r.__words[0];
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(v41, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v27 = ImsLogger::error(ims::_logger, (uint64_t)&__p, (uint64_t)v41);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v27 + 8), (uint64_t)"unable to create NAS client", 27);
      *(_BYTE *)(v27 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v27 + 64))(v27, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v27 + 17) = 0;
      if ((v42 & 0x80000000) == 0)
        goto LABEL_60;
      v28 = v41[0];
    }
    operator delete(v28);
    goto LABEL_60;
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v41, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v2 = ImsLogger::debug(ims::_logger, (uint64_t)&__p, (uint64_t)v41);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v2 + 8), (uint64_t)"already initialized", 19);
  *(_BYTE *)(v2 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v2 + 64))(v2, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v2 + 17) = 0;
  if (v42 < 0)
    operator delete(v41[0]);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return 1;
}

void sub_1BEF39254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,dispatch_object_t object,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  NSObject *v38;
  char v39;

  if (a38 < 0)
    operator delete(__p);
  if ((v39 & 1) == 0)
    dispatch_release(v38);
  _Unwind_Resume(exception_object);
}

void ___ZN18LegacyQMINasClient10initializeERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEEj_block_invoke(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  void *__p[2];
  char v11;
  void *v12[2];
  char v13;

  v2 = *(_QWORD *)(a1 + 32);
  std::string::basic_string[abi:ne180100]<0>(v12, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(__p, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v3 = ImsLogger::debug(ims::_logger, (uint64_t)v12, (uint64_t)__p);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"QMI client started", 18);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v3 + 17) = 0;
  if (v11 < 0)
    operator delete(__p[0]);
  if (v13 < 0)
    operator delete(v12[0]);
  v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *(_QWORD *)(v2 + 8);
      if (v7)
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, a1 + 40);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
}

void sub_1BEF39488(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v23;

  p_shared_owners = (unint64_t *)&v20->__shared_owners_;
  do
    v23 = __ldaxr(p_shared_owners);
  while (__stlxr(v23 - 1, p_shared_owners));
  if (!v23)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  std::string *v2;
  __int128 v3;

  v2 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v3 = *(_OWORD *)(a2 + 40);
    v2->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_40c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
}

uint64_t LegacyQMINasClient::deinitialize(uint64_t this)
{
  uint64_t v1;
  LegacyQMINasClient::AccessBarringHandler **v2;
  LegacyQMINasClient::AccessBarringHandler **v3;
  LegacyQMINasClient::AccessBarringHandler *v4;

  if (*(_BYTE *)(this + 104))
  {
    v1 = this;
    v2 = *(LegacyQMINasClient::AccessBarringHandler ***)(this + 160);
    v3 = *(LegacyQMINasClient::AccessBarringHandler ***)(this + 168);
    while (v2 != v3)
    {
      v4 = *v2++;
      LegacyQMINasClient::AccessBarringHandler::listenForIndication(v4, 0);
    }
    *(_BYTE *)(v1 + 104) = 0;
    return qmi::Client::stop((qmi::Client *)(v1 + 72));
  }
  return this;
}

void LegacyQMINasClient::setAccessBarringType(LegacyQMINasClient *this, unsigned int a2, int a3)
{
  LegacyQMINasClient::AccessBarringHandler **v5;
  LegacyQMINasClient::AccessBarringHandler **v6;
  LegacyQMINasClient::AccessBarringHandler *v7;
  uint64_t v8;
  unint64_t v9;
  LegacyQMINasClient::AccessBarringHandler *v10;
  LegacyQMINasClient::AccessBarringHandler **v11;
  unint64_t v12;
  LegacyQMINasClient::AccessBarringHandler *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  char *v23;
  LegacyQMINasClient::AccessBarringHandler *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  char *v38;
  char *v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  LegacyQMINasClient::AccessBarringHandler **v54;
  LegacyQMINasClient::AccessBarringHandler **i;
  LegacyQMINasClient::AccessBarringHandler *v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  void *v63[2];
  char v64;
  void *__p[2];
  __int128 v66;
  __int128 v67;
  __int128 v68;
  void *v69[2];
  __int128 v70;
  __int128 v71;
  _BYTE v72[144];
  uint64_t v73;
  void *v74[2];
  char v75;
  void *v76[2];
  char v77;
  int v78;

  v78 = a3;
  v6 = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 20);
  v5 = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 21);
  if (v6 != v5)
  {
    do
    {
      v7 = *v6++;
      LegacyQMINasClient::AccessBarringHandler::listenForIndication(v7, 0);
    }
    while (v6 != v5);
    v6 = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 20);
  }
  *((_QWORD *)this + 21) = v6;
  if ((a3 & 2) != 0)
  {
    v12 = *((_QWORD *)this + 22);
    if ((a3 & 1) != 0)
    {
      v24 = (LegacyQMINasClient *)((char *)this + 112);
      if ((unint64_t)v6 >= v12)
      {
        v32 = v12 - (_QWORD)v6;
        v33 = v32 >> 2;
        if ((unint64_t)(v32 >> 2) <= 1)
          v33 = 1;
        if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF8)
          v34 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v34 = v33;
        v35 = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 176, v34);
        v37 = &v35[v36];
        *v35 = v24;
        v6 = (LegacyQMINasClient::AccessBarringHandler **)(v35 + 1);
        v39 = (char *)*((_QWORD *)this + 20);
        v38 = (char *)*((_QWORD *)this + 21);
        if (v38 != v39)
        {
          do
          {
            v40 = *((_QWORD *)v38 - 1);
            v38 -= 8;
            *--v35 = v40;
          }
          while (v38 != v39);
          v38 = (char *)*((_QWORD *)this + 20);
        }
        *((_QWORD *)this + 20) = v35;
        *((_QWORD *)this + 21) = v6;
        *((_QWORD *)this + 22) = v37;
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v6++ = v24;
      }
      *((_QWORD *)this + 21) = v6;
      v13 = (LegacyQMINasClient *)((char *)this + 136);
      v41 = *((_QWORD *)this + 22);
      if ((unint64_t)v6 >= v41)
      {
        v42 = *((_QWORD *)this + 20);
        v43 = ((uint64_t)v6 - v42) >> 3;
        if (!((unint64_t)(v43 + 1) >> 61))
        {
          v44 = v41 - v42;
          v45 = v44 >> 2;
          if (v44 >> 2 <= (unint64_t)(v43 + 1))
            v45 = v43 + 1;
          if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8)
            v46 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v46 = v45;
          if (v46)
            v47 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 176, v46);
          else
            v47 = 0;
          v48 = &v47[8 * v43];
          v49 = &v47[8 * v46];
          *(_QWORD *)v48 = v13;
          v11 = (LegacyQMINasClient::AccessBarringHandler **)(v48 + 8);
          v52 = (char *)*((_QWORD *)this + 20);
          v23 = (char *)*((_QWORD *)this + 21);
          if (v23 != v52)
          {
            do
            {
              v53 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v48 - 1) = v53;
              v48 -= 8;
            }
            while (v23 != v52);
            goto LABEL_70;
          }
LABEL_71:
          *((_QWORD *)this + 20) = v48;
          *((_QWORD *)this + 21) = v11;
          *((_QWORD *)this + 22) = v49;
          if (!v23)
            goto LABEL_73;
LABEL_72:
          operator delete(v23);
          goto LABEL_73;
        }
LABEL_93:
        std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
      }
    }
    else
    {
      v13 = (LegacyQMINasClient *)((char *)this + 136);
      if ((unint64_t)v6 >= v12)
      {
        v14 = v12 - (_QWORD)v6;
        v15 = v14 >> 2;
        if ((unint64_t)(v14 >> 2) <= 1)
          v15 = 1;
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
          v16 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        v17 = std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 176, v16);
        v19 = &v17[v18];
        *v17 = v13;
        v11 = (LegacyQMINasClient::AccessBarringHandler **)(v17 + 1);
        v21 = (char *)*((_QWORD *)this + 20);
        v20 = (char *)*((_QWORD *)this + 21);
        if (v20 != v21)
        {
          do
          {
            v22 = *((_QWORD *)v20 - 1);
            v20 -= 8;
            *--v17 = v22;
          }
          while (v20 != v21);
          v20 = (char *)*((_QWORD *)this + 20);
        }
        *((_QWORD *)this + 20) = v17;
        *((_QWORD *)this + 21) = v11;
        *((_QWORD *)this + 22) = v19;
        if (!v20)
          goto LABEL_73;
        v23 = v20;
        goto LABEL_72;
      }
    }
    *v6 = v13;
    v11 = v6 + 1;
    goto LABEL_73;
  }
  if (a3)
  {
    if ((a3 & 1) == 0)
    {
      std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
      std::string::basic_string[abi:ne180100]<0>(v76, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v8 = ImsLogger::error(ims::_logger, (uint64_t)__p, (uint64_t)v76);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"unknown access barring type ", 28);
      *(_BYTE *)(v8 + 17) = 0;
      ims::detail::to_string_impl<unsigned int,std::integral_constant<BOOL,false>>::operator()(v74);
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v8 + 32))(v8, v74);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)". Defaulting to SSAC.", 21);
      *(_BYTE *)(v8 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v8 + 17) = 0;
      if (v75 < 0)
        operator delete(v74[0]);
      if (v77 < 0)
        operator delete(v76[0]);
      if (SBYTE7(v66) < 0)
        operator delete(__p[0]);
      v6 = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 21);
    }
    v9 = *((_QWORD *)this + 22);
    v10 = (LegacyQMINasClient *)((char *)this + 112);
    if ((unint64_t)v6 < v9)
    {
      *v6 = v10;
      v11 = v6 + 1;
LABEL_73:
      *((_QWORD *)this + 21) = v11;
      goto LABEL_74;
    }
    v26 = *((_QWORD *)this + 20);
    v27 = ((uint64_t)v6 - v26) >> 3;
    if (!((unint64_t)(v27 + 1) >> 61))
    {
      v28 = v9 - v26;
      v29 = v28 >> 2;
      if (v28 >> 2 <= (unint64_t)(v27 + 1))
        v29 = v27 + 1;
      if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
        v30 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v30 = v29;
      if (v30)
        v31 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)this + 176, v30);
      else
        v31 = 0;
      v48 = &v31[8 * v27];
      v49 = &v31[8 * v30];
      *(_QWORD *)v48 = v10;
      v11 = (LegacyQMINasClient::AccessBarringHandler **)(v48 + 8);
      v50 = (char *)*((_QWORD *)this + 20);
      v23 = (char *)*((_QWORD *)this + 21);
      if (v23 != v50)
      {
        do
        {
          v51 = *((_QWORD *)v23 - 1);
          v23 -= 8;
          *((_QWORD *)v48 - 1) = v51;
          v48 -= 8;
        }
        while (v23 != v50);
LABEL_70:
        v23 = (char *)*((_QWORD *)this + 20);
        goto LABEL_71;
      }
      goto LABEL_71;
    }
    goto LABEL_93;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "qmi.nas");
  std::string::basic_string[abi:ne180100]<0>(v76, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v25 = ImsLogger::debug(ims::_logger, (uint64_t)__p, (uint64_t)v76);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v25 + 8), (uint64_t)"barring disabled", 16);
  *(_BYTE *)(v25 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v25 + 64))(v25, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v25 + 17) = 0;
  if (v77 < 0)
    operator delete(v76[0]);
  if (SBYTE7(v66) < 0)
    operator delete(__p[0]);
  v11 = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 21);
LABEL_74:
  if (*((LegacyQMINasClient::AccessBarringHandler ***)this + 20) != v11)
  {
    v73 = 0;
    memset(v72, 0, sizeof(v72));
    v70 = 0u;
    v71 = 0u;
    v68 = 0u;
    *(_OWORD *)v69 = 0u;
    v66 = 0u;
    v67 = 0u;
    *(_OWORD *)__p = 0u;
    std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)__p);
    v54 = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 20);
    for (i = (LegacyQMINasClient::AccessBarringHandler **)*((_QWORD *)this + 21); v54 != i; ++v54)
    {
      v56 = *v54;
      v57 = (*(uint64_t (**)(LegacyQMINasClient::AccessBarringHandler *))(*(_QWORD *)*v54 + 32))(*v54);
      v58 = *(char *)(v57 + 23);
      if (v58 >= 0)
        v59 = v57;
      else
        v59 = *(_QWORD *)v57;
      if (v58 >= 0)
        v60 = *(unsigned __int8 *)(v57 + 23);
      else
        v60 = *(_QWORD *)(v57 + 8);
      v61 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(__p, v59, v60);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v61, (uint64_t)" ", 1);
      LegacyQMINasClient::AccessBarringHandler::listenForIndication(v56, 1);
    }
    std::string::basic_string[abi:ne180100]<0>(v76, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(v74, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v62 = ImsLogger::debug(ims::_logger, (uint64_t)v76, (uint64_t)v74);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"set Access Barring type to ", 27);
    *(_BYTE *)(v62 + 17) = 0;
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&__p[1], v63);
    (*(void (**)(uint64_t, void **))(*(_QWORD *)v62 + 32))(v62, v63);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v62 + 17) = 0;
    if (v64 < 0)
      operator delete(v63[0]);
    if (v75 < 0)
      operator delete(v74[0]);
    if (v77 < 0)
      operator delete(v76[0]);
    __p[0] = *(void **)MEMORY[0x1E0DE4F60];
    *(void **)((char *)__p + *((_QWORD *)__p[0] - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    __p[1] = (void *)(MEMORY[0x1E0DE4FB8] + 16);
    if (SHIBYTE(v70) < 0)
      operator delete(v69[1]);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1C3B8707C](v72);
  }
}

void sub_1BEF39BC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  uint64_t v21;

  if (*(char *)(v21 - 57) < 0)
    operator delete(*(void **)(v21 - 80));
  if (a21 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LegacyQMINasClient::requestCurrentBarringInfo(LegacyQMINasClient *this)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  void *__p[2];
  char v6;
  void *v7[2];
  char v8;

  if (*((_BYTE *)this + 104))
  {
    v1 = (uint64_t *)*((_QWORD *)this + 20);
    v2 = (uint64_t *)*((_QWORD *)this + 21);
    while (v1 != v2)
    {
      v3 = *v1++;
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    }
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(v7, "qmi.nas");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v4 = ImsLogger::debug(ims::_logger, (uint64_t)v7, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"Client not initialized, can't get barring info", 46);
    *(_BYTE *)(v4 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v4 + 17) = 0;
    if (v6 < 0)
      operator delete(__p[0]);
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_1BEF39D68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void LegacyQMINasClient::SsacHandler::~SsacHandler(LegacyQMINasClient::SsacHandler *this)
{
  JUMPOUT(0x1C3B87100);
}

const char *LegacyQMINasClient::SsacHandler::name(LegacyQMINasClient::SsacHandler *this)
{
  return "SSAC";
}

void LegacyQMINasClient::AcbHandler::~AcbHandler(LegacyQMINasClient::AcbHandler *this)
{
  JUMPOUT(0x1C3B87100);
}

void *LegacyQMINasClient::AcbHandler::name(LegacyQMINasClient::AcbHandler *this)
{
  return &LegacyQMINasClient::AcbHandler::kName;
}

uint64_t LegacyQMINasClient::isInitialized(LegacyQMINasClient *this)
{
  return *((unsigned __int8 *)this + 104);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1BEF39E34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::IndicationRegister::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_1BEF39ED4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1BEF39F1C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1BEF39F5C(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacInfo>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacInfo>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacInfo>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacInfo>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_1E78C8438;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78C8438;
  return result;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::RegSsacChangeInfo>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacChangeInfo>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacChangeInfo>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::RegSsacChangeInfo>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_1E78C8488;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegSsacChangeInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78C8488;
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3nas11SsacInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::SsacInfoInd::Indication const&>::cast(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1BEF3A3F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::SsacInfoInd::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_1BEF3A498(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1BEF3A4E0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)144,nas::SsacInfoInd::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1BEF3A520(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11GetSsacInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::GetSsacInfo::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1BEF3A57C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::GetSsacInfo::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_1BEF3A61C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1BEF3A664(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)145,nas::GetSsacInfo::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1BEF3A6A4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  int v7;
  uint64_t v8;
  int v9;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v8 = result;
    v9 = v7;
    if (qmi::MessageBase::tryTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>((uint64_t)a1, (tlv *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<nas::tlv::SsacInfoVoice,void({block_pointer}&)(nas::tlv::SsacInfoVoice&)>(uint64_t a1, tlv *a2, int a3, uint64_t a4)
{
  tlv *v5;
  tlv *v7;

  v7 = a2;
  tlv::parseV<nas::tlv::SsacInfoVoice>(&v7, a3);
  v5 = v7;
  if (v7)
    (*(void (**)(void))(*(_QWORD *)a4 + 16))();
  return v5 != 0;
}

uint64_t qmi::MutableMessageBase::getTLV<nas::tlv::RegAcbChangeInfo>(_QWORD *a1, int a2)
{
  const void **v2;
  const void **v3;
  void *v4;

  v2 = (const void **)a1[1];
  v3 = (const void **)a1[2];
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3)
        return qmi::MutableMessageBase::createTLV<nas::tlv::RegAcbChangeInfo>(a1, a2);
    }
  }
  if (v2 == v3)
    return qmi::MutableMessageBase::createTLV<nas::tlv::RegAcbChangeInfo>(a1, a2);
  if (!v4)
    __cxa_bad_cast();
  return (uint64_t)v4 + 9;
}

uint64_t qmi::MutableMessageBase::createTLV<nas::tlv::RegAcbChangeInfo>(_QWORD *a1, char a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;

  v4 = operator new();
  *(_BYTE *)(v4 + 8) = a2;
  *(_BYTE *)(v4 + 9) = 0;
  *(_QWORD *)v4 = &off_1E78C8528;
  v5 = a1[3];
  v6 = (uint64_t *)a1[2];
  if ((unint64_t)v6 >= v5)
  {
    v8 = a1[1];
    v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v10 = v5 - v8;
    v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1))
      v11 = v9 + 1;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v11;
    if (v12)
      v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<XmlParserGenericItem *>>((uint64_t)(a1 + 3), v12);
    else
      v13 = 0;
    v14 = (uint64_t *)&v13[8 * v9];
    v15 = &v13[8 * v12];
    *v14 = v4;
    v7 = v14 + 1;
    v17 = (char *)a1[1];
    v16 = (char *)a1[2];
    if (v16 != v17)
    {
      do
      {
        v18 = *((_QWORD *)v16 - 1);
        v16 -= 8;
        *--v14 = v18;
      }
      while (v16 != v17);
      v16 = (char *)a1[1];
    }
    a1[1] = v14;
    a1[2] = v7;
    a1[3] = v15;
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v6 = v4;
    v7 = v6 + 1;
  }
  a1[2] = v7;
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::~TlvWrapper()
{
  JUMPOUT(0x1C3B87100);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::getSize()
{
  return 4;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::write(uint64_t result, uint64_t *a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_BYTE *)(result + 8);
  v3 = *a2;
  v4 = *a2 + 4;
  *(_BYTE *)(v3 + 3) = *(_BYTE *)(result + 9);
  *a2 = v4;
  *(_BYTE *)v3 = v2;
  *(_WORD *)(v3 + 1) = 1;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::RegAcbChangeInfo>::clone(uint64_t a1)
{
  uint64_t result;

  result = operator new();
  *(_WORD *)(result + 8) = *(_WORD *)(a1 + 8);
  *(_QWORD *)result = &off_1E78C8528;
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3nas10AcbInfoInd10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::AcbInfoInd::Indication const&>::cast(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1BEF3AA08(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::AcbInfoInd::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_1BEF3AAA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1BEF3AAF0(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)148,nas::AcbInfoInd::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1BEF3AB30(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetAcbInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BYTE v3[24];

  v2 = *(_QWORD *)(a1 + 32);
  cast_message_type<nas::GetAcbInfo::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, _BYTE *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_1BEF3AB8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::GetAcbInfo::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    QMIServiceMsg::serialize((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response(a2, 0);
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_1BEF3AC2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response(uint64_t a1)
{
  qmi::MessageBase *v2;

  v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_1BEF3AC74(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)148,nas::GetAcbInfo::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  qmi::MessageBase *v3;

  v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_1BEF3ACB4(_Unwind_Exception *a1)
{
  qmi::MessageBase *v1;

  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  char v5;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (*(_BYTE *)a2 == 100)
    v3 = 100;
  else
    v3 = 0;
  v4 = *(unsigned __int16 *)(a2 + 2);
  v5 = *(_BYTE *)(a2 + 4);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(_BYTE *)(v2 + 48) = v5;
  *(_DWORD *)(v2 + 52) = 1;
  *(_BYTE *)(v2 + 56) = 1;
  if (v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10AcbInfoInd10IndicationEEEvRKT__block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  unsigned int v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *a2;
  if (v3 == 100)
    v4 = 100;
  else
    v4 = 0;
  v5 = *((unsigned __int16 *)a2 + 1);
  v6 = a2[4];
  *(_WORD *)(v2 + 40) = v4;
  *(_DWORD *)(v2 + 44) = v5;
  *(_BYTE *)(v2 + 48) = v6;
  *(_DWORD *)(v2 + 52) = 1;
  *(_BYTE *)(v2 + 56) = 1;
  if (v5 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 1u;
  if (!v3)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 4u;
  return result;
}

uint64_t qmi::MessageBase::applyTlv<nas::tlv::AcbInfoSignaling,void({block_pointer}&)(nas::tlv::AcbInfoSignaling&)>(qmi::MessageBase *a1, _QWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v11 = result;
    v8 = tlv::parseV<nas::tlv::AcbInfoSignaling>(&v11, v5);
    v9 = v8;
    v10 = WORD2(v8);
    if (v11)
      return (*(uint64_t (**)(_QWORD))(*a2 + 16))(*a2);
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 17, v6, v7);
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<nas::tlv::AcbInfoData,void({block_pointer}&)(nas::tlv::AcbInfoData&)>(qmi::MessageBase *a1, _QWORD *a2)
{
  uint64_t result;
  int v5;
  uint64_t v6;
  int v7;
  unint64_t v8;
  int v9;
  __int16 v10;
  uint64_t v11;

  result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    v6 = result;
    v7 = v5;
    v11 = result;
    v8 = tlv::parseV<nas::tlv::AcbInfoData>(&v11, v5);
    v9 = v8;
    v10 = WORD2(v8);
    if (v11)
      return (*(uint64_t (**)(_QWORD))(*a2 + 16))(*a2);
    else
      return ((uint64_t (*)(_QWORD, uint64_t, uint64_t, _QWORD))*MEMORY[0x1E0DE2D28])(*(unsigned __int16 *)a1, 18, v6, v7);
  }
  return result;
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  __int16 v3;
  unsigned int v4;
  char v5;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  if (*(_BYTE *)a2 == 100)
    v3 = 100;
  else
    v3 = 0;
  v4 = *(unsigned __int16 *)(a2 + 2);
  v5 = *(_BYTE *)(a2 + 4);
  *(_WORD *)(v2 + 40) = v3;
  *(_DWORD *)(v2 + 44) = v4;
  *(_BYTE *)(v2 + 48) = v5;
  *(_DWORD *)(v2 + 52) = 1;
  *(_BYTE *)(v2 + 56) = 1;
  if (v4 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 1u;
  return result;
}

uint64_t ___ZN18LegacyQMINasClient10AcbHandler12checkAllTlvsIN3nas10GetAcbInfo8ResponseEEEvRKT__block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2;
  int v3;
  __int16 v4;
  unsigned int v5;
  unsigned __int8 v6;

  v2 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8);
  v3 = *a2;
  if (v3 == 100)
    v4 = 100;
  else
    v4 = 0;
  v5 = *((unsigned __int16 *)a2 + 1);
  v6 = a2[4];
  *(_WORD *)(v2 + 40) = v4;
  *(_DWORD *)(v2 + 44) = v5;
  *(_BYTE *)(v2 + 48) = v6;
  *(_DWORD *)(v2 + 52) = 1;
  *(_BYTE *)(v2 + 56) = 1;
  if (v5 >= 0x201)
  {
    *(_WORD *)(v2 + 40) = 100;
    *(_DWORD *)(v2 + 44) = 0;
    *(_BYTE *)(v2 + 48) = 0;
    *(_BYTE *)(v2 + 56) = 0;
    *(_DWORD *)(v2 + 52) = 0;
  }
  *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 1u;
  if (!v3)
    *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 32) + 8) + 52) |= 4u;
  return result;
}

BOOL SDPTemplateBuilder::generateEVSSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t (*v11)(__int128 *, void **);
  char v12;
  char v13;
  uint64_t v14;
  void *v16[2];
  char v17;
  void *v18[2];
  char v19;
  void *__p[2];
  char v21;
  __int128 v22;
  void *v23[2];
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  void *v30;
  void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned __int16 v36;
  unsigned __int16 v37;
  uint64_t *v38;
  char v39;
  std::string v40;
  __int16 v41;
  std::string v42;
  int v43;
  int v44;
  uint64_t v45;

  v6 = (__int16)this;
  v45 = *MEMORY[0x1E0C80C00];
  v37 = 8000;
  v36 = 1;
  extractRTPMapInfo(a2, &v37, &v36);
  v7 = v6 & 0xFFE0;
  if (v7 == 96)
  {
    v33 = 0;
    v34 = 0;
    v35 = 0;
    v30 = 0;
    v31 = 0;
    v32 = 0;
    ImsDictPref::keysAndValues((uint64_t)a2, &v33, (char **)&v30);
    v29 = 0;
    v27 = 0u;
    v28 = 0u;
    v26 = 0u;
    v24 = 0u;
    v25 = 0u;
    v22 = 0u;
    *(_OWORD *)v23 = 0u;
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v22, v6);
    v8 = v33;
    if (v34 != v33)
    {
      v9 = 0;
      v10 = 0;
      do
      {
        if (std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::evsFormatParameters, (void **)(v8 + v9)) != (void **)&qword_1ED70CD38)
        {
          v18[0] = (void *)(v33 + v9);
          v11 = (uint64_t (*)(__int128 *, void **))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatEVSParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::evsFormatParameters, (void **)(v33 + v9), (uint64_t)&std::piecewise_construct, (__int128 **)v18)[7];
          (*(void (**)(void **__return_ptr))(**((_QWORD **)v30 + v10) + 48))(__p);
          v12 = v11(&v22, __p);
          v13 = v12;
          if (v21 < 0)
          {
            operator delete(__p[0]);
            if ((v13 & 1) == 0)
            {
LABEL_9:
              std::string::basic_string[abi:ne180100]<0>(&v38, "sdp.templatebuilder");
              std::string::basic_string[abi:ne180100]<0>(v18, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v14 = ImsLogger::error(ims::_logger, (uint64_t)&v38, (uint64_t)v18);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"Unable to parse ", 16);
              *(_BYTE *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 32))(v14, v33 + v9);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)" format parameter for EVS codec", 31);
              *(_BYTE *)(v14 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v14 + 17) = 0;
              if (v19 < 0)
                operator delete(v18[0]);
              if (v40.__r_.__value_.__s.__data_[7] < 0)
                operator delete(v38);
            }
          }
          else if ((v12 & 1) == 0)
          {
            goto LABEL_9;
          }
        }
        ++v10;
        v8 = v33;
        v9 += 24;
      }
      while (v10 < 0xAAAAAAAAAAAAAAABLL * ((v34 - v33) >> 3));
    }
    SDPMediaFormatInfo::setPayloadType(a3, v6);
    std::string::basic_string[abi:ne180100]<0>(v16, "EVS");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v38, v6, (__int128 *)v16, v37, v36);
    *((_BYTE *)a3 + 24) = v39;
    std::string::operator=((std::string *)((char *)a3 + 32), &v40);
    *((_WORD *)a3 + 28) = v41;
    std::string::operator=((std::string *)((char *)a3 + 64), &v42);
    *((_DWORD *)a3 + 22) = v43;
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v38);
    if (v17 < 0)
      operator delete(v16[0]);
    SDPMediaFormatEVSParams::SDPMediaFormatEVSParams((SDPMediaFormatEVSParams *)&v38, (const SDPMediaFormatEVSParams *)&v22);
    v44 = 2;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)a3, (uint64_t)&v38);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v38);
    *(_QWORD *)&v22 = off_1E78ED0A8;
    if (SBYTE7(v24) < 0)
      operator delete(v23[0]);
    if (v30)
    {
      v31 = v30;
      operator delete(v30);
    }
    v38 = &v33;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v38);
    v7 = 96;
  }
  return v7 == 96;
}

void sub_1BEF3B380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50)
{
  uint64_t v50;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)(v50 - 232));
  if (a35 < 0)
    operator delete(__p);
  if (a47)
    operator delete(a47);
  *(_QWORD *)(v50 - 232) = &a50;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)(v50 - 232));
  _Unwind_Resume(a1);
}

BOOL SDPTemplateBuilder::generateAMRWBSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v6;
  _BOOL8 GenericAMRSDPMedia;
  void *__p[2];
  char v10;

  v6 = (__int16)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "AMR-WB");
  GenericAMRSDPMedia = SDPTemplateBuilder::generateGenericAMRSDPMedia(v6, (uint64_t)__p, a2, (uint64_t)a3);
  if (v10 < 0)
    operator delete(__p[0]);
  return GenericAMRSDPMedia;
}

void sub_1BEF3B4D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPTemplateBuilder::generateAMRNBSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v6;
  _BOOL8 GenericAMRSDPMedia;
  void *__p[2];
  char v10;

  v6 = (__int16)this;
  std::string::basic_string[abi:ne180100]<0>(__p, "AMR");
  GenericAMRSDPMedia = SDPTemplateBuilder::generateGenericAMRSDPMedia(v6, (uint64_t)__p, a2, (uint64_t)a3);
  if (v10 < 0)
    operator delete(__p[0]);
  return GenericAMRSDPMedia;
}

void sub_1BEF3B564(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPTemplateBuilder::generatePCMUSDPMedia(SDPTemplateBuilder *this, unsigned __int16 a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  void *__p[2];
  char v7;
  void *v8;
  char v9;
  std::string v10;
  __int16 v11;
  std::string v12;
  int v13;

  SDPMediaFormatInfo::setPayloadType(a3, 8);
  std::string::basic_string[abi:ne180100]<0>(__p, "PCMA");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v8, 8, (__int128 *)__p, 8000, 1);
  *((_BYTE *)a3 + 24) = v9;
  std::string::operator=((std::string *)((char *)a3 + 32), &v10);
  *((_WORD *)a3 + 28) = v11;
  std::string::operator=((std::string *)((char *)a3 + 64), &v12);
  *((_DWORD *)a3 + 22) = v13;
  SDPMediaRTPMap::~SDPMediaRTPMap(&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1BEF3B62C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPTemplateBuilder::generatePCMASDPMedia(SDPTemplateBuilder *this, unsigned __int16 a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  void *__p[2];
  char v7;
  void *v8;
  char v9;
  std::string v10;
  __int16 v11;
  std::string v12;
  int v13;

  SDPMediaFormatInfo::setPayloadType(a3, 0);
  std::string::basic_string[abi:ne180100]<0>(__p, "PCMU");
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v8, 0, (__int128 *)__p, 8000, 1);
  *((_BYTE *)a3 + 24) = v9;
  std::string::operator=((std::string *)((char *)a3 + 32), &v10);
  *((_WORD *)a3 + 28) = v11;
  std::string::operator=((std::string *)((char *)a3 + 64), &v12);
  *((_DWORD *)a3 + 22) = v13;
  SDPMediaRTPMap::~SDPMediaRTPMap(&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  return 1;
}

void sub_1BEF3B704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPTemplateBuilder::generateDTMFSDPMedia(SDPTemplateBuilder *this, ImsDictPref *a2, const ImsDictPref *a3, SDPMediaFormatInfo *a4)
{
  __int16 v5;
  void *__p[2];
  char v8;
  void *v9;
  char v10;
  std::string v11;
  __int16 v12;
  std::string v13;
  int v14;
  unsigned __int16 v15;

  v5 = (__int16)this;
  v15 = 8000;
  extractRTPMapInfo(a2, &v15, 0);
  if ((v5 & 0xFFE0) == 0x60)
  {
    SDPMediaFormatInfo::setPayloadType(a3, v5);
    std::string::basic_string[abi:ne180100]<0>(__p, "telephone-event");
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v9, v5, (__int128 *)__p, v15, 1);
    *((_BYTE *)a3 + 24) = v10;
    std::string::operator=((std::string *)((char *)a3 + 32), &v11);
    *((_WORD *)a3 + 28) = v12;
    std::string::operator=((std::string *)((char *)a3 + 64), &v13);
    *((_DWORD *)a3 + 22) = v14;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v9);
    if (v8 < 0)
      operator delete(__p[0]);
  }
  return (v5 & 0xFFE0) == 96;
}

void sub_1BEF3B814(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t std::map<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>::~map[abi:ne180100](uint64_t a1)
{
  std::__tree<std::__value_type<std::string,BOOL>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL>>>::destroy(*(char **)(a1 + 8));
  return a1;
}

void SDPTemplateBuilder::createSDPTemplate(SDPTemplateBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  void **AllowIPv6UnicastAddressKey;
  void *v6;
  unsigned __int8 v7;
  uint64_t v8;
  uint64_t v9;
  SDPModel *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  ImsPrefs *v18;
  void *AudioCodecsKey;
  ImsPrefs *v20;
  uint64_t v21;
  void **AudioCodecListKey;
  void *v23;
  std::vector<std::string>::pointer end;
  std::vector<std::string>::pointer begin;
  __int128 v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  char v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t **v36;
  std::string *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t (*v40)(_QWORD, void *, std::__split_buffer<std::string> *);
  std::string *v41;
  unsigned __int16 v42;
  ImsPrefs *v43;
  uint64_t v44;
  __int128 *v45;
  int v46;
  int v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  void **OrderEVSCodecsByCodecIDKey;
  void *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  unint64_t v63;
  uint64_t v64;
  void **v65;
  void *v66;
  uint64_t *v67;
  _QWORD *v68;
  _QWORD *v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  unint64_t i;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t j;
  uint64_t *v82;
  SDPTemplateBuilder *v83;
  void *v84[2];
  char v85;
  void *v86[2];
  char v87;
  void *v88[2];
  char v89;
  void *v90[2];
  char v91;
  void *v92[2];
  char v93;
  void *v94[2];
  char v95;
  void *v96[2];
  char v97;
  void *v98[2];
  char v99;
  __int128 v100;
  uint64_t v101;
  std::string v102;
  uint64_t *v103;
  _QWORD *v104[2];
  uint64_t v105;
  unint64_t v106;
  unint64_t v107;
  uint64_t *v108;
  _QWORD *v109[2];
  std::vector<std::string> v110;
  std::string v111;
  std::__compressed_pair<std::string *> v112;
  std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *v113;
  std::string __str;
  void *__p[2];
  char v116;
  std::string __s;
  std::string v118[2];
  __int128 v119;
  __int128 v120;
  __int128 v121;
  __int128 v122;
  __int128 v123;
  std::__split_buffer<std::string> __v;
  std::__compressed_pair_elem<std::allocator<std::string> &, 1, false> *v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD v132[9];
  __int128 v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x1E0C80C00];
  AllowIPv6UnicastAddressKey = (void **)ImsPrefs::getAllowIPv6UnicastAddressKey(this);
  v6 = ImsPrefs::prefWithKey(this, AllowIPv6UnicastAddressKey);
  if (v6)
    v7 = (*(uint64_t (**)(void *))(*(_QWORD *)v6 + 40))(v6);
  else
    v7 = *((_BYTE *)AllowIPv6UnicastAddressKey + 57) != 0;
  *a2 = 0;
  a2[1] = 0;
  _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a2);
  v8 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__s, "0.0.0.0");
  v118[0].__r_.__value_.__s.__data_[8] = 1;
  v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78D19C0;
  *(std::string::size_type *)((char *)&v118[0].__r_.__value_.__r.__words[1] + 4) = 0x100000001;
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    std::string::__init_copy_ctor_external(&v118[1], __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
  else
    v118[1] = __s;
  LOWORD(v119) = v7;
  std::string::basic_string[abi:ne180100]<0>(__p, "user");
  SDPOrigin::SDPOrigin((std::string *)&__v, (uint64_t)v118, (__int128 *)__p, 0, 0);
  SDPModel::setOrigin(v8, (uint64_t)&__v);
  SDPOrigin::~SDPOrigin((void **)&__v.__first_);
  if (v116 < 0)
    operator delete(__p[0]);
  v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E78D19C0;
  if (SHIBYTE(v118[1].__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118[1].__r_.__value_.__l.__data_);
  if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s.__r_.__value_.__l.__data_);
  v9 = *a2;
  std::string::basic_string[abi:ne180100]<0>(&__str, "-");
  std::string::operator=((std::string *)(v9 + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v10 = (SDPModel *)*a2;
  std::string::basic_string[abi:ne180100]<0>(&v112, "0.0.0.0");
  LOBYTE(__v.__begin_) = 1;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)off_1E78D19C0;
  *(std::__split_buffer<std::string>::pointer *)((char *)&__v.__begin_ + 4) = (std::__split_buffer<std::string>::pointer)0x100000001;
  if (SHIBYTE(v113) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&__v.__end_cap_, (const std::string::value_type *)v112.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_, (std::string::size_type)v112.std::__1::__compressed_pair_elem<std::allocator<std::string> &, 1, false>::__value_);
  }
  else
  {
    __v.__end_cap_ = v112;
    v125 = v113;
  }
  LOWORD(v126) = v7;
  SDPModel::addSDPConnection(v10, (const SDPConnection *)&__v);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)off_1E78D19C0;
  if (SHIBYTE(v125) < 0)
    operator delete(__v.__end_cap_.__value_);
  if (SHIBYTE(v113) < 0)
    operator delete(v112.std::__1::__compressed_pair_elem<std::string *, 0, false>::__value_);
  v11 = *a2;
  v12 = *a2 + 320;
  LOBYTE(__v.__begin_) = 1;
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&off_1E78EDC20;
  __v.__end_cap_.__value_ = 0;
  __v.__end_ = 0;
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
  v125 = &__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>;
  v126 = 0;
  v13 = std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(v12, 0, 0, (const SDPTiming *)&__v);
  v13[1] = v12;
  v14 = *(_QWORD *)(v11 + 320);
  *v13 = v14;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v11 + 320) = v13;
  ++*(_QWORD *)(v11 + 336);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&off_1E78EDC20;
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)&__v.__end_cap_.std::__compressed_pair_elem<std::allocator<std::string> &, 1, false>);
  v15 = *a2;
  SDPMedia::SDPMedia((uint64_t)&__v, 2, 1, 0, 3);
  v16 = *(_QWORD *)(v15 + 424);
  if (v16 >= *(_QWORD *)(v15 + 432))
  {
    v17 = std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>((uint64_t *)(v15 + 416), (const SDPMedia *)&__v);
  }
  else
  {
    SDPMedia::SDPMedia(*(SDPMedia **)(v15 + 424), (const SDPMedia *)&__v);
    v17 = v16 + 200;
    *(_QWORD *)(v15 + 424) = v16 + 200;
  }
  *(_QWORD *)(v15 + 424) = v17;
  SDPMedia::~SDPMedia((SDPMedia *)&__v);
  AudioCodecsKey = ImsPrefs::getAudioCodecsKey(v18);
  v20 = (ImsPrefs *)ImsPrefs::typedPrefWithKey<ImsDictPref>(this, (void **)AudioCodecsKey);
  if (v20)
    v21 = (uint64_t)v20;
  else
    v21 = *((_QWORD *)AudioCodecsKey + 11);
  if (!v21)
    return;
  memset(&v111, 0, sizeof(v111));
  AudioCodecListKey = (void **)ImsPrefs::getAudioCodecListKey(v20);
  ImsPrefs::stringValue(this, AudioCodecListKey);
  v82 = a2;
  v83 = this;
  memset(&v110, 0, sizeof(v110));
  ImsDictPref::keys(v21, (uint64_t *)&v110);
  v109[0] = 0;
  v109[1] = 0;
  v107 = 0;
  v108 = (uint64_t *)v109;
  v105 = 0;
  v106 = 0;
  v104[0] = 0;
  v104[1] = 0;
  v103 = (uint64_t *)v104;
  begin = v110.__begin_;
  end = v110.__end_;
  if (v110.__begin_ != v110.__end_)
  {
    while (1)
    {
      memset(&v102, 0, sizeof(v102));
      if (SHIBYTE(begin->__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::__init_copy_ctor_external(&v102, begin->__r_.__value_.__l.__data_, begin->__r_.__value_.__l.__size_);
      }
      else
      {
        v26 = *(_OWORD *)&begin->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = begin->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = v26;
      }
      v23 = (void *)(*(uint64_t (**)(uint64_t, std::string *))(*(_QWORD *)v21 + 88))(v21, &v102);
      if (v23)
      {
        if (v23)
          break;
      }
LABEL_86:
      if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v102.__r_.__value_.__l.__data_);
      if (++begin == end)
        goto LABEL_110;
    }
    v27 = v23;
    std::string::basic_string[abi:ne180100]<0>(&__v, "EncodingName");
    v28 = (*(uint64_t (**)(void *, std::__split_buffer<std::string> *))(*(_QWORD *)v27 + 88))(v27, &__v);
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
    v100 = 0uLL;
    v101 = 0;
    if (v28)
      (*(void (**)(__int128 *__return_ptr, uint64_t))(*(_QWORD *)v28 + 48))(&v100, v28);
    else
      std::string::basic_string[abi:ne180100]<0>(&v100, "");
    v29 = HIBYTE(v101);
    if (v101 < 0)
      v29 = *((_QWORD *)&v100 + 1);
    if (!v29)
      goto LABEL_56;
    v30 = qword_1ED70E720;
    if (!qword_1ED70E720)
      goto LABEL_56;
    v31 = &qword_1ED70E720;
    do
    {
      v32 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>((_QWORD *)(v30 + 32), (void **)&v100);
      if (v32 >= 0)
        v33 = (uint64_t *)v30;
      else
        v33 = (uint64_t *)(v30 + 8);
      if (v32 >= 0)
        v31 = (uint64_t *)v30;
      v30 = *v33;
    }
    while (*v33);
    if (v31 == &qword_1ED70E720
      || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v100, (void **)v31 + 4) & 0x80) != 0)
    {
LABEL_56:
      std::string::basic_string[abi:ne180100]<0>(&__v, "sdp.template");
      std::string::basic_string[abi:ne180100]<0>(v118, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v38 = ImsLogger::warn(ims::_logger, (uint64_t)&__v, (uint64_t)v118);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v38 + 8), (uint64_t)"Unable to create SDP media entry for codec type '", 49);
      *(_BYTE *)(v38 + 17) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v38 + 32))(v38, &v100);
      v39 = *(_QWORD **)(v38 + 8);
      LOBYTE(v98[0]) = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v39, (uint64_t)v98, 1);
      *(_BYTE *)(v38 + 17) = 0;
      v23 = (void *)(*(uint64_t (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v38 + 64))(v38, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v38 + 17) = 0;
      if (SHIBYTE(v118[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118[0].__r_.__value_.__l.__data_);
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      goto LABEL_84;
    }
    v136 = 0;
    v134 = 0u;
    v135 = 0u;
    v133 = 0u;
    v131 = 0x10000;
    v127 = 255;
    __v.__end_cap_.__value_ = (std::string *)1;
    __v.__begin_ = (std::__split_buffer<std::string>::pointer)255;
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&off_1E78E2080;
    v125 = 0;
    v126 = 0;
    __v.__end_cap_.__value_ = 0;
    __v.__end_ = (std::__split_buffer<std::string>::pointer)&off_1E78EE990;
    v129 = 0;
    v130 = 0;
    v128 = 0;
    v132[5] = 255;
    v132[1] = 1;
    memset(&v132[2], 0, 24);
    v132[0] = &off_1E78B8590;
    memset(&v132[6], 0, 24);
    v118[0].__r_.__value_.__r.__words[0] = 0;
    v34 = std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__find_equal<std::string>((uint64_t **)v118, (void **)&v100);
    v35 = (uint64_t *)*v34;
    if (!*v34)
    {
      v36 = (uint64_t **)v34;
      v35 = (uint64_t *)operator new(0x40uLL);
      v37 = (std::string *)(v35 + 4);
      if (SHIBYTE(v101) < 0)
      {
        std::string::__init_copy_ctor_external(v37, (const std::string::value_type *)v100, *((std::string::size_type *)&v100 + 1));
      }
      else
      {
        *(_OWORD *)&v37->__r_.__value_.__l.__data_ = v100;
        v35[6] = v101;
      }
      v35[7] = 0;
      std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__insert_node_at((uint64_t)v118[0].__r_.__value_.__l.__data_, v36, v35);
    }
    v40 = (uint64_t (*)(_QWORD, void *, std::__split_buffer<std::string> *))v35[7];
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v41 = &v102;
    else
      v41 = (std::string *)v102.__r_.__value_.__r.__words[0];
    v42 = strtoul((const char *)v41, 0, 10);
    v43 = (ImsPrefs *)v40(v42, v27, &__v);
    if (!(_DWORD)v43)
    {
      std::string::basic_string[abi:ne180100]<0>(v118, "sdp.template");
      std::string::basic_string[abi:ne180100]<0>(v98, "");
      pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
      v53 = ImsLogger::warn(ims::_logger, (uint64_t)v118, (uint64_t)v98);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v53 + 8), (uint64_t)"Failed to create SDP media entry for codec type '", 49);
      *(_BYTE *)(v53 + 17) = 0;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v53 + 32))(v53, &v100);
      v54 = *(_QWORD **)(v53 + 8);
      LOBYTE(v96[0]) = 39;
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v54, (uint64_t)v96, 1);
      *(_BYTE *)(v53 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v53 + 64))(v53, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v53 + 17) = 0;
      if (v99 < 0)
        operator delete(v98[0]);
      if (SHIBYTE(v118[0].__r_.__value_.__r.__words[2]) < 0)
        operator delete(v118[0].__r_.__value_.__l.__data_);
      goto LABEL_83;
    }
    v44 = HIBYTE(v101);
    if (v101 < 0)
      v44 = *((_QWORD *)&v100 + 1);
    if (v44 != 3)
      goto LABEL_75;
    v45 = &v100;
    if (v101 < 0)
      v45 = (__int128 *)v100;
    v46 = *(unsigned __int16 *)v45;
    v47 = *((unsigned __int8 *)v45 + 2);
    v48 = v46 == 22085 && v47 == 83;
    if (!v48)
      goto LABEL_75;
    OrderEVSCodecsByCodecIDKey = (void **)ImsPrefs::getOrderEVSCodecsByCodecIDKey(v43);
    v56 = ImsPrefs::prefWithKey(v83, OrderEVSCodecsByCodecIDKey);
    if (v56)
    {
      if (((*(uint64_t (**)(void *))(*(_QWORD *)v56 + 40))(v56) & 1) == 0)
        goto LABEL_94;
    }
    else if (!*((_BYTE *)OrderEVSCodecsByCodecIDKey + 57))
    {
LABEL_94:
      v122 = 0u;
      v123 = 0u;
      v120 = 0u;
      v121 = 0u;
      v119 = 0u;
      memset(v118, 0, sizeof(v118));
      std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v118, (unsigned int *)v132);
      if (DWORD2(v123) == 2)
      {
        switch((__int16)v123)
        {
          case 0:
            LOWORD(v98[0]) = 0;
            v57 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v108, 0, v98);
            SDPMediaFormatInfo::operator=((uint64_t)(v57 + 5), (uint64_t)&__v);
            break;
          case 1:
            LOWORD(v98[0]) = 1;
            v62 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v108, 1, v98);
            SDPMediaFormatInfo::operator=((uint64_t)(v62 + 5), (uint64_t)&__v);
            break;
          case 2:
            LOWORD(v98[0]) = 2;
            v60 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v108, 2, v98);
            SDPMediaFormatInfo::operator=((uint64_t)(v60 + 5), (uint64_t)&__v);
            break;
          case 3:
            LOWORD(v98[0]) = 3;
            v61 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v108, 3, v98);
            SDPMediaFormatInfo::operator=((uint64_t)(v61 + 5), (uint64_t)&__v);
            break;
          case 4:
            LOWORD(v98[0]) = 4;
            v59 = std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(&v108, 4, v98);
            SDPMediaFormatInfo::operator=((uint64_t)(v59 + 5), (uint64_t)&__v);
            break;
          default:
            v63 = v106;
            if (v106 >= v107)
            {
              v64 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(&v105, (uint64_t)&__v);
            }
            else
            {
              SDPMediaFormatInfo::SDPMediaFormatInfo(v106, (uint64_t)&__v);
              v64 = v63 + 224;
            }
            v106 = v64;
            break;
        }
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(v98, "sdp.template");
        std::string::basic_string[abi:ne180100]<0>(v96, "");
        pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
        v58 = ImsLogger::error(ims::_logger, (uint64_t)v98, (uint64_t)v96);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v58 + 8), (uint64_t)"EVS SDPMediaFormatParams is null", 32);
        *(_BYTE *)(v58 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v58 + 64))(v58, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v58 + 17) = 0;
        if (v97 < 0)
          operator delete(v96[0]);
        if (v99 < 0)
          operator delete(v98[0]);
      }
      std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v118);
      goto LABEL_83;
    }
LABEL_75:
    v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v100;
    v49 = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(&v103, (void **)&v100, (__int128 **)v118);
    v50 = v49;
    v51 = v49[8];
    if (v51 >= v49[9])
    {
      v52 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(v49 + 7, (uint64_t)&__v);
    }
    else
    {
      SDPMediaFormatInfo::SDPMediaFormatInfo(v49[8], (uint64_t)&__v);
      v52 = v51 + 224;
      v50[8] = v51 + 224;
    }
    v50[8] = v52;
LABEL_83:
    __v.__first_ = (std::__split_buffer<std::string>::pointer)&off_1E78E2080;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v132);
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)&__v.__end_);
LABEL_84:
    if (SHIBYTE(v101) < 0)
      operator delete((void *)v100);
    goto LABEL_86;
  }
LABEL_110:
  v65 = (void **)ImsPrefs::getOrderEVSCodecsByCodecIDKey((ImsPrefs *)v23);
  v66 = ImsPrefs::prefWithKey(v83, v65);
  if (v66)
  {
    if (((*(uint64_t (**)(void *))(*(_QWORD *)v66 + 40))(v66) & 1) != 0)
      goto LABEL_133;
  }
  else if (*((_BYTE *)v65 + 57))
  {
    goto LABEL_133;
  }
  v67 = v108;
  if (v108 != (uint64_t *)v109)
  {
    do
    {
      std::string::basic_string[abi:ne180100]<0>(&__v, "EVS");
      v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
      v68 = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v103, (void **)&__v.__first_, v118);
      v69 = v68;
      v70 = (uint64_t)(v67 + 5);
      v71 = v68[8];
      if (v71 >= v68[9])
      {
        v72 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(v68 + 7, v70);
      }
      else
      {
        SDPMediaFormatInfo::SDPMediaFormatInfo(v68[8], v70);
        v72 = v71 + 224;
        v69[8] = v71 + 224;
      }
      v69[8] = v72;
      if (SHIBYTE(__v.__end_) < 0)
        operator delete(__v.__first_);
      v73 = (uint64_t *)v67[1];
      if (v73)
      {
        do
        {
          v74 = v73;
          v73 = (uint64_t *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          v74 = (uint64_t *)v67[2];
          v48 = *v74 == (_QWORD)v67;
          v67 = v74;
        }
        while (!v48);
      }
      v67 = v74;
    }
    while (v74 != (uint64_t *)v109);
  }
  v76 = v105;
  for (i = v106; v76 != i; v76 += 224)
  {
    std::string::basic_string[abi:ne180100]<0>(&__v, "EVS");
    v118[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__v;
    v77 = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(&v103, (void **)&__v.__first_, v118);
    v78 = v77;
    v79 = v77[8];
    if (v79 >= v77[9])
    {
      v80 = std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(v77 + 7, v76);
    }
    else
    {
      SDPMediaFormatInfo::SDPMediaFormatInfo(v77[8], v76);
      v80 = v79 + 224;
      v78[8] = v79 + 224;
    }
    v78[8] = v80;
    if (SHIBYTE(__v.__end_) < 0)
      operator delete(__v.__first_);
  }
LABEL_133:
  for (j = *(_QWORD *)(*v82 + 416); j != *(_QWORD *)(*v82 + 424); j += 200)
  {
    if (*(_DWORD *)(j + 12) == 2)
      goto LABEL_138;
  }
  j = 0;
LABEL_138:
  std::string::basic_string[abi:ne180100]<0>(v94, "EVS");
  extractCodecsWithEncodingName(j, &v103, (__int128 *)v94);
  if (v95 < 0)
    operator delete(v94[0]);
  std::string::basic_string[abi:ne180100]<0>(v92, "AMR-WB");
  extractCodecsWithEncodingName(j, &v103, (__int128 *)v92);
  if (v93 < 0)
    operator delete(v92[0]);
  std::string::basic_string[abi:ne180100]<0>(v90, "AMR");
  extractCodecsWithEncodingName(j, &v103, (__int128 *)v90);
  if (v91 < 0)
    operator delete(v90[0]);
  std::string::basic_string[abi:ne180100]<0>(v88, "PCMU");
  extractCodecsWithEncodingName(j, &v103, (__int128 *)v88);
  if (v89 < 0)
    operator delete(v88[0]);
  std::string::basic_string[abi:ne180100]<0>(v86, "PCMA");
  extractCodecsWithEncodingName(j, &v103, (__int128 *)v86);
  if (v87 < 0)
    operator delete(v86[0]);
  std::string::basic_string[abi:ne180100]<0>(v84, "telephone-event");
  extractCodecsWithEncodingName(j, &v103, (__int128 *)v84);
  if (v85 < 0)
    operator delete(v84[0]);
  std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(v104[0]);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v105;
  std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(v109[0]);
  __v.__first_ = (std::__split_buffer<std::string>::pointer)&v110;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__v);
  if (SHIBYTE(v111.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v111.__r_.__value_.__l.__data_);
}

void sub_1BEF3C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void **a16, unsigned int *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,_QWORD *a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void **a61,_QWORD *a62,uint64_t a63)
{
  char a64;
  void *a67;
  char a72;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&STACK[0x220]);
  STACK[0x2A8] = (unint64_t)&off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(a17);
  SDPMediaRTPMap::~SDPMediaRTPMap(a16);
  if (a47 < 0)
    operator delete(__p);
  if (a53 < 0)
    operator delete(a48);
  std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(a56);
  STACK[0x2A8] = (unint64_t)&a58;
  std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x2A8]);
  std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(a62);
  a61 = (void **)&a64;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a61);
  if (a72 < 0)
    operator delete(a67);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](a9);
  _Unwind_Resume(a1);
}

uint64_t *extractCodecsWithEncodingName(uint64_t a1, uint64_t **a2, __int128 *a3)
{
  uint64_t *result;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  __int128 *v10;

  v10 = a3;
  result = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (void **)a3, &v10);
  if (result[8] != result[7])
  {
    v10 = a3;
    result = std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(a2, (void **)a3, &v10);
    v7 = result[7];
    for (i = result[8]; v7 != i; v7 += 224)
    {
      result = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a1 + 40, 0, 0, v7);
      result[1] = a1 + 40;
      v9 = *(_QWORD *)(a1 + 40);
      *result = v9;
      *(_QWORD *)(v9 + 8) = result;
      *(_QWORD *)(a1 + 40) = result;
      ++*(_QWORD *)(a1 + 56);
    }
  }
  return result;
}

void SDPTemplateBuilder::createLazuliSDPTemplate(int a1@<W1>, __int128 *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  SDPModel *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  int v13;
  uint64_t i;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  _BYTE v25[48];
  __int128 v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  void *v36[2];
  uint64_t v37;
  std::string __str;
  void *__p[2];
  char v40;
  __int128 v41;
  uint64_t v42;
  void (***v43)(SDPConnection *__hidden);
  uint64_t v44;
  void (**v45)(SDPConnection *__hidden);
  __int128 v46;
  __int128 v47;
  __int128 v48;
  _QWORD v49[3];
  _QWORD v50[3];
  _QWORD v51[3];
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  *a3 = 0;
  a3[1] = 0;
  _ZNSt3__115allocate_sharedB8ne180100I8SDPModelNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(a3);
  v6 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&v41, "0.0.0.0");
  LOBYTE(v46) = 1;
  v45 = off_1E78D19C0;
  *(_QWORD *)((char *)&v46 + 4) = 0x100000001;
  if (SHIBYTE(v42) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v47, (const std::string::value_type *)v41, *((std::string::size_type *)&v41 + 1));
  }
  else
  {
    v47 = v41;
    *(_QWORD *)&v48 = v42;
  }
  WORD4(v48) = 257;
  std::string::basic_string[abi:ne180100]<0>(__p, "user");
  SDPOrigin::SDPOrigin((std::string *)v25, (uint64_t)&v45, (__int128 *)__p, 0, 0);
  SDPModel::setOrigin(v6, (uint64_t)v25);
  SDPOrigin::~SDPOrigin((void **)v25);
  if (v40 < 0)
    operator delete(__p[0]);
  v45 = off_1E78D19C0;
  if (SBYTE7(v48) < 0)
    operator delete((void *)v47);
  if (SHIBYTE(v42) < 0)
    operator delete((void *)v41);
  v7 = *a3;
  std::string::basic_string[abi:ne180100]<0>(&__str, "-");
  std::string::operator=((std::string *)(v7 + 152), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  v8 = (SDPModel *)*a3;
  std::string::basic_string[abi:ne180100]<0>(v36, "0.0.0.0");
  v25[8] = 1;
  *(_QWORD *)v25 = off_1E78D19C0;
  *(_QWORD *)&v25[12] = 0x100000001;
  if (SHIBYTE(v37) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&v25[24], (const std::string::value_type *)v36[0], (std::string::size_type)v36[1]);
  }
  else
  {
    *(_OWORD *)&v25[24] = *(_OWORD *)v36;
    *(_QWORD *)&v25[40] = v37;
  }
  LOWORD(v26) = 257;
  SDPModel::addSDPConnection(v8, (const SDPConnection *)v25);
  *(_QWORD *)v25 = off_1E78D19C0;
  if ((v25[47] & 0x80000000) != 0)
    operator delete(*(void **)&v25[24]);
  if (SHIBYTE(v37) < 0)
    operator delete(v36[0]);
  v9 = *a3;
  v10 = *a3 + 320;
  v25[8] = 1;
  *(_QWORD *)v25 = &off_1E78EDC20;
  *(_QWORD *)&v25[16] = 0;
  *(_QWORD *)&v25[24] = 0;
  *(_QWORD *)&v25[32] = &v25[32];
  *(_QWORD *)&v25[40] = &v25[32];
  *(_QWORD *)&v26 = 0;
  v11 = std::__list_imp<SDPTiming>::__create_node[abi:ne180100]<SDPTiming>(v10, 0, 0, (const SDPTiming *)v25);
  v11[1] = v10;
  v12 = *(_QWORD *)(v9 + 320);
  *v11 = v12;
  *(_QWORD *)(v12 + 8) = v11;
  *(_QWORD *)(v9 + 320) = v11;
  ++*(_QWORD *)(v9 + 336);
  *(_QWORD *)v25 = &off_1E78EDC20;
  std::__list_imp<SDPRepeatTime>::clear((uint64_t *)&v25[32]);
  v35 = 0;
  v33 = 0u;
  v34 = 0u;
  v31 = 0u;
  v32 = 0u;
  v29 = 0u;
  v30 = 0u;
  v27 = 0u;
  v28 = 0u;
  *(_OWORD *)&v25[32] = 0u;
  v26 = 0u;
  if (a1)
    v13 = 8;
  else
    v13 = 7;
  memset(v25, 0, 32);
  SDPMedia::SDPMedia((uint64_t)v25, 6, 2855, 0, v13);
  std::string::basic_string[abi:ne180100]<0>(&v52, "message/cpim");
  v45 = 0;
  v46 = 0uLL;
  v43 = &v45;
  v44 = 0;
  v45 = (void (**)(SDPConnection *__hidden))operator new(0x18uLL);
  *(_QWORD *)&v46 = v45;
  *((_QWORD *)&v46 + 1) = v45 + 3;
  *(_QWORD *)&v46 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v46 + 8, &v52, &v54, (std::string *)v45);
  SDPMedia::setAcceptTypes(v25, (__int128 **)&v45);
  v43 = &v45;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  if (SHIBYTE(v53) < 0)
    operator delete((void *)v52);
  std::string::basic_string[abi:ne180100]<0>(&v45, "text/plain");
  std::string::basic_string[abi:ne180100]<0>(&v47, "message/imdn+xml");
  std::string::basic_string[abi:ne180100]<0>((_QWORD *)&v48 + 1, "application/im-iscomposing+xml");
  std::string::basic_string[abi:ne180100]<0>(v49, "application/vnd.gsma.rcs-ft-http+xml");
  std::string::basic_string[abi:ne180100]<0>(v50, "application/vnd.gsma.rcspushlocation+xml");
  std::string::basic_string[abi:ne180100]<0>(v51, "application/vnd.oma.cpm-groupdata+xml");
  v52 = 0uLL;
  v53 = 0;
  v43 = (void (***)(SDPConnection *__hidden))&v52;
  v44 = 0;
  *(_QWORD *)&v52 = operator new(0x90uLL);
  *((_QWORD *)&v52 + 1) = v52;
  v53 = v52 + 144;
  *((_QWORD *)&v52 + 1) = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>((uint64_t)&v53, (__int128 *)&v45, &v52, (std::string *)v52);
  SDPMedia::setAcceptWrappedTypes(v25, (__int128 **)&v52);
  v43 = (void (***)(SDPConnection *__hidden))&v52;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v43);
  for (i = 0; i != -18; i -= 3)
  {
    if (SHIBYTE(v51[i + 2]) < 0)
      operator delete((void *)v51[i]);
  }
  SDPMedia::setDirection((uint64_t)v25, 1);
  v45 = &off_1E78EF3C0;
  v46 = 0u;
  v47 = 0u;
  v48 = 0u;
  SDPMedia::setPath((SDPMedia *)v25, (const LazuliRouteSet *)&v45);
  std::string::basic_string[abi:ne180100]<0>(&v52, "active");
  SDPMedia::setSetupState(v25, &v52);
  if (SHIBYTE(v53) < 0)
  {
    operator delete((void *)v52);
    if (!a1)
      goto LABEL_33;
    goto LABEL_32;
  }
  if (a1)
LABEL_32:
    SDPMedia::setFingerprint(v25, a2, (__int128 *)((char *)a2 + 24));
LABEL_33:
  v15 = *a3;
  v17 = *(_QWORD *)(*a3 + 424);
  v16 = *(_QWORD *)(*a3 + 432);
  if (v17 >= v16)
  {
    v19 = *(_QWORD *)(v15 + 416);
    v20 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v17 - v19) >> 3);
    if (v20 + 1 > 0x147AE147AE147AELL)
      std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
    v21 = 0x8F5C28F5C28F5C29 * ((uint64_t)(v16 - v19) >> 3);
    v22 = 2 * v21;
    if (2 * v21 <= v20 + 1)
      v22 = v20 + 1;
    if (v21 >= 0xA3D70A3D70A3D7)
      v23 = 0x147AE147AE147AELL;
    else
      v23 = v22;
    *((_QWORD *)&v54 + 1) = v15 + 432;
    if (v23)
      v24 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(v15 + 432, v23);
    else
      v24 = 0;
    *(_QWORD *)&v52 = v24;
    *((_QWORD *)&v52 + 1) = &v24[200 * v20];
    v53 = *((_QWORD *)&v52 + 1);
    *(_QWORD *)&v54 = &v24[200 * v23];
    SDPMedia::SDPMedia(*((SDPMedia **)&v52 + 1), (const SDPMedia *)v25);
    v53 += 200;
    std::vector<SDPMedia>::__swap_out_circular_buffer((uint64_t *)(v15 + 416), &v52);
    v18 = *(_QWORD *)(v15 + 424);
    std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)&v52);
  }
  else
  {
    SDPMedia::SDPMedia(*(SDPMedia **)(*a3 + 424), (const SDPMedia *)v25);
    v18 = v17 + 200;
    *(_QWORD *)(v15 + 424) = v17 + 200;
  }
  *(_QWORD *)(v15 + 424) = v18;
  LazuliRouteSet::~LazuliRouteSet((LazuliRouteSet *)&v45);
  SDPMedia::~SDPMedia((SDPMedia *)v25);
}

void sub_1BEF3D29C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  uint64_t v40;

  if (a40 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v40);
  _Unwind_Resume(a1);
}

void SDPMedia::setDirection(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD v6[4];
  char v7;

  v3 = a1 + 136;
  SDPMediaDirection::SDPMediaDirection((uint64_t)v6, a2);
  v4 = std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaDirection>(v3, 0, 0, (uint64_t)v6);
  v4[1] = v3;
  v5 = *(_QWORD *)(a1 + 136);
  *v4 = v5;
  *(_QWORD *)(v5 + 8) = v4;
  *(_QWORD *)(a1 + 136) = v4;
  ++*(_QWORD *)(a1 + 152);
  v6[0] = off_1E78ED0A8;
  if (v7 < 0)
    operator delete((void *)v6[2]);
}

void sub_1BEF3D508(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void SDPTemplateBuilder::createSDPTextMedia(_QWORD *a1@<X0>, unsigned __int8 a2@<W1>, char a3@<W2>, ImsPrefs *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  ImsPrefs *v11;
  void **PayloadTypeTTYKey;
  ImsPrefs *v13;
  int v14;
  void *PayloadTypeTTYRedundancyKey;
  void *v16;
  __int16 v17;
  ImsPrefs *v18;
  void **SampleRateTTYKey;
  void *v20;
  int v21;
  _QWORD *v22;
  uint64_t v23;
  ImsPrefs *v24;
  void **v25;
  void *v26;
  int v27;
  ImsPrefs *v28;
  void **RTTBandwidthSpecifierASValueKey;
  void *v30;
  int v31;
  ImsPrefs *v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  void **EnableBandwidthSpecifiersKey;
  void *v38;
  int v39;
  ImsPrefs *v40;
  unint64_t *v41;
  unint64_t v42;
  void **SRTPCryptoSuiteKey;
  ImsPrefs *v44;
  uint64_t v45;
  void **v46;
  ImsPrefs *v47;
  void **SRTPUnencryptedSRTPKey;
  ImsPrefs *v49;
  char v50;
  void **SRTPUnencryptedSRTCPKey;
  ImsPrefs *v52;
  char v53;
  void **SRTPUnauthenticatedSRTPKey;
  ImsPrefs *v55;
  char v56;
  void **SRTPEndToAccessEdgeProtectionKey;
  void *v58;
  int v59;
  char v60;
  char v61;
  uint64_t v62;
  void *v63;
  char v64;
  _QWORD v65[2];
  void *v66[2];
  void *v67;
  char v68;
  unsigned __int16 v69;
  __int16 v70;
  int v71;
  std::string::size_type v72;
  void *v73[2];
  char v74;
  void *__p[2];
  char v76;
  void *v77;
  uint64_t v78;
  std::string v79;
  __int16 v80;
  __int16 v81;
  int v82;
  std::string v83;
  int v84;
  int v85;
  _QWORD v86[2];
  void (**v87)(SDPMediaRTPMap *__hidden);
  uint64_t v88;
  std::string v89;
  uint64_t v90;
  std::string v91;
  uint64_t v92;
  _QWORD v93[9];
  __int128 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  uint64_t v98;

  v98 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a5 + 192) = 0;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)a5 = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  v10 = SDPMedia::SDPMedia(a5, 4, 0, 0, 3);
  SDPMedia::setDirection(v10, 1);
  PayloadTypeTTYKey = (void **)ImsPrefs::getPayloadTypeTTYKey(v11);
  v13 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, PayloadTypeTTYKey);
  if (v13)
  {
    v13 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v13 + 56))(v13);
    LOWORD(v14) = (_WORD)v13;
  }
  else
  {
    v14 = *((_DWORD *)PayloadTypeTTYKey + 15);
  }
  PayloadTypeTTYRedundancyKey = ImsPrefs::getPayloadTypeTTYRedundancyKey(v13);
  v16 = ImsPrefs::prefWithKey(a4, (void **)PayloadTypeTTYRedundancyKey);
  if (v16)
    v17 = (*(uint64_t (**)(void *))(*(_QWORD *)v16 + 56))(v16);
  else
    v17 = *((_WORD *)PayloadTypeTTYRedundancyKey + 30);
  SDPMedia::setPort((SDPMedia *)a5, 3);
  v86[1] = 255;
  v88 = 1;
  v96 = 0u;
  v95 = 0u;
  v94 = 0u;
  v97 = 0;
  v92 = 0x10000;
  v90 = 255;
  v86[0] = &off_1E78E2080;
  memset(&v89, 0, sizeof(v89));
  v87 = &off_1E78EE990;
  memset(&v91, 0, sizeof(v91));
  v93[1] = 1;
  memset(&v93[2], 0, 24);
  v93[5] = 255;
  v93[0] = &off_1E78B8590;
  memset(&v93[6], 0, 24);
  if (v17 != 255)
  {
    SDPMediaFormatInfo::setPayloadType((SDPMediaFormatInfo *)v86, v17);
    v18 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(__p, "red");
    SampleRateTTYKey = (void **)ImsPrefs::getSampleRateTTYKey(v18);
    v20 = ImsPrefs::prefWithKey(a4, SampleRateTTYKey);
    if (v20)
      LOWORD(v21) = (*(uint64_t (**)(void *))(*(_QWORD *)v20 + 56))(v20);
    else
      v21 = *((_DWORD *)SampleRateTTYKey + 15);
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v77, v17, (__int128 *)__p, v21, 1);
    LOBYTE(v88) = v78;
    std::string::operator=(&v89, &v79);
    LOWORD(v90) = v80;
    std::string::operator=(&v91, &v83);
    LODWORD(v92) = v84;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v77);
    if (v76 < 0)
      operator delete(__p[0]);
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v66, v17);
    v66[0] = off_1E78E9B20;
    v70 = v14;
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v77, v69);
    v77 = off_1E78E9B20;
    v81 = v70;
    v85 = 5;
    SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)v86, (uint64_t)&v77);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v77);
    v66[0] = off_1E78ED0A8;
    if (v68 < 0)
      operator delete(v67);
    v22 = std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a5 + 40, 0, 0, (uint64_t)v86);
    v22[1] = a5 + 40;
    v23 = *(_QWORD *)(a5 + 40);
    *v22 = v23;
    *(_QWORD *)(v23 + 8) = v22;
    *(_QWORD *)(a5 + 40) = v22;
    ++*(_QWORD *)(a5 + 56);
  }
  SDPMediaFormatInfo::setPayloadType((SDPMediaFormatInfo *)v86, v14);
  v24 = (ImsPrefs *)std::string::basic_string[abi:ne180100]<0>(v73, "t140");
  v25 = (void **)ImsPrefs::getSampleRateTTYKey(v24);
  v26 = ImsPrefs::prefWithKey(a4, v25);
  if (v26)
    LOWORD(v27) = (*(uint64_t (**)(void *))(*(_QWORD *)v26 + 56))(v26);
  else
    v27 = *((_DWORD *)v25 + 15);
  SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v77, v14, (__int128 *)v73, v27, 1);
  LOBYTE(v88) = v78;
  std::string::operator=(&v89, &v79);
  LOWORD(v90) = v80;
  std::string::operator=(&v91, &v83);
  LODWORD(v92) = v84;
  SDPMediaRTPMap::~SDPMediaRTPMap(&v77);
  if (v74 < 0)
    operator delete(v73[0]);
  RTTBandwidthSpecifierASValueKey = (void **)ImsPrefs::getRTTBandwidthSpecifierASValueKey(v28);
  v30 = ImsPrefs::prefWithKey(a4, RTTBandwidthSpecifierASValueKey);
  if (v30)
    v31 = (*(uint64_t (**)(void *))(*(_QWORD *)v30 + 56))(v30);
  else
    v31 = *((_DWORD *)RTTBandwidthSpecifierASValueKey + 15);
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)v66, v14);
  v66[0] = off_1E78E9AA8;
  v71 = 0;
  v72 = v31;
  SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v77, v69);
  v77 = off_1E78E9AA8;
  v82 = v71;
  v83.__r_.__value_.__r.__words[0] = v72;
  v85 = 4;
  SDPMediaFormatInfo::setSDPMediaFormatParams((uint64_t)v86, (uint64_t)&v77);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v77);
  v66[0] = off_1E78ED0A8;
  if (v68 < 0)
    operator delete(v67);
  v32 = (ImsPrefs *)std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(a5 + 40, 0, 0, (uint64_t)v86);
  *((_QWORD *)v32 + 1) = a5 + 40;
  v33 = *(_QWORD *)(a5 + 40);
  *(_QWORD *)v32 = v33;
  *(_QWORD *)(v33 + 8) = v32;
  *(_QWORD *)(a5 + 40) = v32;
  ++*(_QWORD *)(a5 + 56);
  v34 = (std::__shared_weak_count *)a1[1];
  v65[0] = *a1;
  v65[1] = v34;
  if (v34)
  {
    p_shared_owners = (unint64_t *)&v34->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
  }
  EnableBandwidthSpecifiersKey = (void **)ImsPrefs::getEnableBandwidthSpecifiersKey(v32);
  v38 = ImsPrefs::prefWithKey(a4, EnableBandwidthSpecifiersKey);
  if (v38)
    v39 = (*(uint64_t (**)(void *))(*(_QWORD *)v38 + 40))(v38);
  else
    v39 = *((_BYTE *)EnableBandwidthSpecifiersKey + 57) != 0;
  v40 = (ImsPrefs *)SDPTemplateBuilder::addBandwidthSpecifiers(a5, v65, a2, v39, a3, a4);
  if (v34)
  {
    v41 = (unint64_t *)&v34->__shared_owners_;
    do
      v42 = __ldaxr(v41);
    while (__stlxr(v42 - 1, v41));
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  SRTPCryptoSuiteKey = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v40);
  v44 = (ImsPrefs *)ImsPrefs::stringValue(a4, SRTPCryptoSuiteKey);
  if (v79.__r_.__value_.__s.__data_[7] < 0)
  {
    v45 = v78;
    operator delete(v77);
    if (!v45)
      goto LABEL_61;
  }
  else if (!v79.__r_.__value_.__s.__data_[7])
  {
    goto LABEL_61;
  }
  v46 = (void **)ImsPrefs::getSRTPCryptoSuiteKey(v44);
  v47 = (ImsPrefs *)ImsPrefs::stringValue(a4, v46);
  SRTPUnencryptedSRTPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTPKey(v47);
  v49 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, SRTPUnencryptedSRTPKey);
  if (v49)
  {
    v49 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v49 + 40))(v49);
    v50 = (char)v49;
  }
  else
  {
    v50 = *((_BYTE *)SRTPUnencryptedSRTPKey + 57) != 0;
  }
  SRTPUnencryptedSRTCPKey = (void **)ImsPrefs::getSRTPUnencryptedSRTCPKey(v49);
  v52 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, SRTPUnencryptedSRTCPKey);
  if (v52)
  {
    v52 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v52 + 40))(v52);
    v53 = (char)v52;
  }
  else
  {
    v53 = *((_BYTE *)SRTPUnencryptedSRTCPKey + 57) != 0;
  }
  SRTPUnauthenticatedSRTPKey = (void **)ImsPrefs::getSRTPUnauthenticatedSRTPKey(v52);
  v55 = (ImsPrefs *)ImsPrefs::prefWithKey(a4, SRTPUnauthenticatedSRTPKey);
  if (v55)
  {
    v55 = (ImsPrefs *)(*(uint64_t (**)(ImsPrefs *))(*(_QWORD *)v55 + 40))(v55);
    v56 = (char)v55;
  }
  else
  {
    v56 = *((_BYTE *)SRTPUnauthenticatedSRTPKey + 57) != 0;
  }
  SRTPEndToAccessEdgeProtectionKey = (void **)ImsPrefs::getSRTPEndToAccessEdgeProtectionKey(v55);
  v58 = ImsPrefs::prefWithKey(a4, SRTPEndToAccessEdgeProtectionKey);
  if (v58)
    v59 = (*(uint64_t (**)(void *))(*(_QWORD *)v58 + 40))(v58);
  else
    v59 = *((_BYTE *)SRTPEndToAccessEdgeProtectionKey + 57) != 0;
  v60 = SDPMedia::enableEncryption(a5, (uint64_t)&v63, v50, v53, v56, v59);
  v61 = v60;
  if (v64 < 0)
  {
    operator delete(v63);
    if ((v61 & 1) != 0)
      goto LABEL_61;
  }
  else if ((v60 & 1) != 0)
  {
    goto LABEL_61;
  }
  std::string::basic_string[abi:ne180100]<0>(&v77, "sdp.templatebuilder");
  std::string::basic_string[abi:ne180100]<0>(v66, "");
  pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
  v62 = ImsLogger::error(ims::_logger, (uint64_t)&v77, (uint64_t)v66);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v62 + 8), (uint64_t)"Failed to add encryption to the text session", 44);
  *(_BYTE *)(v62 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v62 + 64))(v62, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v62 + 17) = 0;
  if (SHIBYTE(v67) < 0)
    operator delete(v66[0]);
  if (v79.__r_.__value_.__s.__data_[7] < 0)
    operator delete(v77);
LABEL_61:
  v86[0] = &off_1E78E2080;
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v93);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)&v87);
}

void sub_1BEF3DCD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned int *a9, void **a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60)
{
  SDPMedia *v60;

  if (a46 < 0)
    operator delete(__p);
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor(a9);
  SDPMediaRTPMap::~SDPMediaRTPMap(a10);
  SDPMedia::~SDPMedia(v60);
  _Unwind_Resume(a1);
}

uint64_t SDPTemplateBuilder::addBandwidthSpecifiers(uint64_t a1, _QWORD *a2, unsigned __int8 a3, int a4, char a5, ImsPrefs *a6)
{
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  ImsPrefs *v17;
  void **RTCPIntervalSecondsKey;
  void *v19;
  ImsPrefs *v20;
  void **SuppressBSUntilPreconditionsMetKey;
  void *v22;
  uint64_t v23;
  _BYTE *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  void **RTTBandwidthSpecifierRTCPPercentageKey;
  void *v29;
  int v30;
  _BYTE *v31;
  _BYTE *v32;
  uint64_t v33;
  void **v34;
  void *v35;
  int v36;
  _BYTE *v37;
  void **AddBWSpecsAtSessionLevelKey;
  void *v39;
  uint64_t result;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _BYTE *v46;
  _QWORD *v47;
  int v48;
  char v49;
  _BOOL4 v50;

  v11 = (uint64_t *)(a1 + 112);
  v12 = a1 + 40;
  v13 = *(_QWORD *)(a1 + 48);
  if (v13 == a1 + 40)
  {
    v15 = 0;
  }
  else
  {
    v15 = 0;
    do
    {
      v16 = SDPMediaFormatInfo::bandwidthAS((SDPMediaFormatInfo *)(v13 + 16), a3);
      if (v16 > v15)
        v15 = v16;
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13 != v12);
  }
  std::__list_imp<SDPRepeatTime>::clear(v11);
  RTCPIntervalSecondsKey = (void **)ImsPrefs::getRTCPIntervalSecondsKey(v17);
  v19 = ImsPrefs::prefWithKey(a6, RTCPIntervalSecondsKey);
  if (v19)
    v20 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v19 + 56))(v19);
  else
    v20 = (ImsPrefs *)*((unsigned int *)RTCPIntervalSecondsKey + 15);
  v50 = (int)v20 < 1;
  SuppressBSUntilPreconditionsMetKey = (void **)ImsPrefs::getSuppressBSUntilPreconditionsMetKey(v20);
  v22 = ImsPrefs::prefWithKey(a6, SuppressBSUntilPreconditionsMetKey);
  if (v22)
    LOBYTE(v23) = (*(uint64_t (**)(void *))(*(_QWORD *)v22 + 40))(v22);
  else
    v23 = *((_BYTE *)SuppressBSUntilPreconditionsMetKey + 57) != 0;
  v49 = (v23 | a5) ^ 1;
  v24 = operator new(0x38uLL);
  v24[24] = 1;
  *((_QWORD *)v24 + 1) = v11;
  *((_QWORD *)v24 + 2) = &off_1E78BFAB0;
  *((_DWORD *)v24 + 7) = 2;
  v24[32] = v15 != 0;
  *((_QWORD *)v24 + 5) = v15;
  *((_DWORD *)v24 + 12) = 1;
  *((_WORD *)v24 + 26) = 5;
  v25 = *(_QWORD *)(a1 + 112);
  *(_QWORD *)v24 = v25;
  *(_QWORD *)(v25 + 8) = v24;
  *(_QWORD *)(a1 + 112) = v24;
  v26 = *(_QWORD *)(a1 + 128) + 1;
  *(_QWORD *)(a1 + 128) = v26;
  if ((a4 & 1) != 0)
  {
    v47 = a2;
    v27 = *(_DWORD *)(a1 + 12);
    v48 = a4;
    if (v27 == 4)
    {
      RTTBandwidthSpecifierRTCPPercentageKey = (void **)ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey((ImsPrefs *)v24);
      v29 = ImsPrefs::prefWithKey(a6, RTTBandwidthSpecifierRTCPPercentageKey);
      if (v29)
        LOWORD(v30) = (*(uint64_t (**)(void *))(*(_QWORD *)v29 + 56))(v29);
      else
        v30 = *((_DWORD *)RTTBandwidthSpecifierRTCPPercentageKey + 15);
      v31 = *(_BYTE **)(a1 + 112);
      v26 = *(_QWORD *)(a1 + 128);
      v27 = *(_DWORD *)(a1 + 12);
    }
    else
    {
      v31 = v24;
      LOWORD(v30) = 5;
    }
    v32 = operator new(0x38uLL);
    v32[24] = 1;
    *((_QWORD *)v32 + 1) = v11;
    *((_QWORD *)v32 + 2) = &off_1E78BFAB0;
    *((_DWORD *)v32 + 7) = 3;
    v32[32] = v49;
    *((_QWORD *)v32 + 5) = v15;
    *((_DWORD *)v32 + 12) = v50;
    *((_WORD *)v32 + 26) = v30;
    *(_QWORD *)v32 = v31;
    *((_QWORD *)v31 + 1) = v32;
    *(_QWORD *)(a1 + 112) = v32;
    v33 = v26 + 1;
    *(_QWORD *)(a1 + 128) = v33;
    if (v27 == 4)
    {
      v34 = (void **)ImsPrefs::getRTTBandwidthSpecifierRTCPPercentageKey((ImsPrefs *)v32);
      v35 = ImsPrefs::prefWithKey(a6, v34);
      a4 = v48;
      a2 = v47;
      if (v35)
        LOWORD(v36) = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 56))(v35);
      else
        v36 = *((_DWORD *)v34 + 15);
      v37 = *(_BYTE **)(a1 + 112);
      v33 = *(_QWORD *)(a1 + 128);
    }
    else
    {
      v37 = v32;
      LOWORD(v36) = 5;
      a4 = v48;
      a2 = v47;
    }
    v24 = operator new(0x38uLL);
    v24[24] = 1;
    *((_QWORD *)v24 + 1) = v11;
    *((_QWORD *)v24 + 2) = &off_1E78BFAB0;
    *((_DWORD *)v24 + 7) = 4;
    v24[32] = v49;
    *((_QWORD *)v24 + 5) = v15;
    *((_DWORD *)v24 + 12) = v50;
    *((_WORD *)v24 + 26) = v36;
    *(_QWORD *)v24 = v37;
    *((_QWORD *)v37 + 1) = v24;
    *(_QWORD *)(a1 + 112) = v24;
    *(_QWORD *)(a1 + 128) = v33 + 1;
  }
  AddBWSpecsAtSessionLevelKey = (void **)ImsPrefs::getAddBWSpecsAtSessionLevelKey((ImsPrefs *)v24);
  v39 = ImsPrefs::prefWithKey(a6, AddBWSpecsAtSessionLevelKey);
  if (v39)
  {
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v39 + 40))(v39);
    if (!(_DWORD)result)
      return result;
  }
  else
  {
    result = *((_BYTE *)AddBWSpecsAtSessionLevelKey + 57) != 0;
    if (!*((_BYTE *)AddBWSpecsAtSessionLevelKey + 57))
      return result;
  }
  if (*(_DWORD *)(a1 + 12) == 2)
  {
    v41 = *a2;
    v42 = (uint64_t *)(*a2 + 296);
    std::__list_imp<SDPRepeatTime>::clear(v42);
    result = (uint64_t)operator new(0x38uLL);
    *(_BYTE *)(result + 24) = 1;
    *(_QWORD *)(result + 16) = &off_1E78BFAB0;
    *(_DWORD *)(result + 28) = 2;
    *(_BYTE *)(result + 32) = v15 != 0;
    *(_QWORD *)(result + 40) = v15;
    *(_DWORD *)(result + 48) = 1;
    *(_WORD *)(result + 52) = 5;
    v43 = *(_QWORD *)(v41 + 296);
    *(_QWORD *)result = v43;
    *(_QWORD *)(result + 8) = v42;
    *(_QWORD *)(v43 + 8) = result;
    *(_QWORD *)(v41 + 296) = result;
    v44 = *(_QWORD *)(v41 + 312);
    *(_QWORD *)(v41 + 312) = v44 + 1;
    if (a4)
    {
      v45 = result;
      v46 = operator new(0x38uLL);
      v46[24] = 1;
      *((_QWORD *)v46 + 1) = v42;
      *((_QWORD *)v46 + 2) = &off_1E78BFAB0;
      *((_DWORD *)v46 + 7) = 3;
      v46[32] = v49;
      *((_QWORD *)v46 + 5) = v15;
      *((_DWORD *)v46 + 12) = v50;
      *((_WORD *)v46 + 26) = 5;
      *(_QWORD *)v46 = v45;
      *(_QWORD *)(v45 + 8) = v46;
      *(_QWORD *)(v41 + 296) = v46;
      *(_QWORD *)(v41 + 312) = v44 + 2;
      result = (uint64_t)operator new(0x38uLL);
      *(_BYTE *)(result + 24) = 1;
      *(_QWORD *)(result + 8) = v42;
      *(_QWORD *)(result + 16) = &off_1E78BFAB0;
      *(_DWORD *)(result + 28) = 4;
      *(_BYTE *)(result + 32) = v49;
      *(_QWORD *)(result + 40) = v15;
      *(_DWORD *)(result + 48) = v50;
      *(_WORD *)(result + 52) = 5;
      *(_QWORD *)result = v46;
      *((_QWORD *)v46 + 1) = result;
      *(_QWORD *)(v41 + 296) = result;
      *(_QWORD *)(v41 + 312) = v44 + 3;
    }
  }
  return result;
}

void SDPTemplateBuilder::createInitialSettings(uint64_t a1@<X0>, const std::string *a2@<X1>, int a3@<W2>, ImsPrefs *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  ImsPrefs *v17;
  int v18;
  void **PayloadTypeDTMF8KKey;
  int v20;
  void *v21;
  ImsPrefs *v22;
  void **PayloadTypeDTMF16KKey;
  void **v24;
  void *v25;
  ImsPrefs *v26;
  void **MaxPacketizationTimeKey;
  void *v28;
  int v29;
  unsigned int *v30;
  void **PreferredAMRWBModeKey;
  __int128 v32;
  __int128 v33;
  void **v34;
  void *v35;
  int v36;
  std::string v37;
  _BYTE __p[48];
  __int128 v39;
  __int16 v40;
  void *v41[6];
  __int128 v42;
  __int128 v43;
  _OWORD v44[14];
  uint64_t v45;
  int v46;
  int v47;
  void (**v48)(SDPMediaAMRSettings *__hidden);
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;

  v59 = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 416);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 424);
  if (v7 == v6)
  {
LABEL_5:
    std::string::basic_string[abi:ne180100]<0>(v41, "sdp.templatebuilder");
    std::string::basic_string[abi:ne180100]<0>(__p, "");
    pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
    v14 = ImsLogger::error(ims::_logger, (uint64_t)v41, (uint64_t)__p);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v14 + 8), (uint64_t)"SDPTemplateBuilder::createInitialSettings Audio is null", 55);
    *(_BYTE *)(v14 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v14 + 64))(v14, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v14 + 17) = 0;
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (SHIBYTE(v41[2]) < 0)
      operator delete(v41[0]);
LABEL_13:
    *(_BYTE *)a5 = 0;
    *(_BYTE *)(a5 + 432) = 0;
    return;
  }
  v12 = v7 + 40;
  while (*(_DWORD *)(v12 - 28) != 2)
  {
    v13 = v12 + 160;
    v12 += 200;
    if (v13 == v6)
      goto LABEL_5;
  }
  v15 = *(_QWORD *)(v12 + 8);
  if (v12 == v15)
    goto LABEL_13;
  *(_QWORD *)(a5 + 432) = 0;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 368) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(_OWORD *)(a5 + 352) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  v55 = 0;
  v56 = 0;
  HIDWORD(v53) = 0;
  v49 = 0u;
  v50 = 0;
  v47 = 0;
  HIDWORD(v41[5]) = 0;
  *(_OWORD *)&v41[3] = 0u;
  HIDWORD(v41[3]) = 16711935;
  v58 = 0;
  *(_OWORD *)&v41[1] = 0u;
  *(void **)((char *)&v41[4] + 4) = (void *)0x100000001;
  v42 = 0u;
  v43 = 0u;
  memset(v44, 0, sizeof(v44));
  v41[0] = &off_1E78B97D0;
  v45 = 0x1F401F4000FF00FFLL;
  v46 = 15728660;
  v48 = &off_1E78B9808;
  *(_DWORD *)((char *)&v49 + 6) = 0x20000;
  WORD5(v49) = 2;
  *(_QWORD *)((char *)&v53 + 5) = 0;
  v52 = 0;
  *(_QWORD *)&v53 = 0;
  v51 = 0;
  v54 = xmmword_1BF29C680;
  v57 = 131074;
  SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)a5, (const SDPMediaAudioSettings *)v41);
  *(_BYTE *)(a5 + 432) = 1;
  SDPMediaAudioSettings::~SDPMediaAudioSettings(v41);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)(v15 + 32) + 24))(v15 + 32))
  {
    if (*(char *)(v15 + 103) < 0)
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(v15 + 80), *(_QWORD *)(v15 + 88));
    else
      v37 = *(std::string *)(v15 + 80);
  }
  else
  {
    if (*(_WORD *)(v15 + 24) == 8)
      v16 = "PCMA";
    else
      v16 = "PCMU";
    std::string::basic_string[abi:ne180100]<0>(&v37, v16);
  }
  std::string::operator=((std::string *)(a5 + 280), &v37);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  std::string::operator=((std::string *)(a5 + 72), a2);
  *(_WORD *)(a5 + 28) = *(_WORD *)(v15 + 24);
  v17 = (ImsPrefs *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)(v15 + 32) + 24))(v15 + 32);
  if (!(_DWORD)v17 || (v18 = *(unsigned __int16 *)(v15 + 104), !*(_WORD *)(v15 + 104)))
  {
    *(_WORD *)(a5 + 308) = 8000;
    goto LABEL_27;
  }
  *(_WORD *)(a5 + 308) = v18;
  if (v18 != 16000)
  {
LABEL_27:
    PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v17);
    v20 = 0;
    goto LABEL_28;
  }
  PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v17);
  v20 = 1;
LABEL_28:
  v21 = ImsPrefs::prefWithKey(a4, PayloadTypeDTMF8KKey);
  if (v21)
    v22 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v21 + 56))(v21);
  else
    v22 = (ImsPrefs *)*((unsigned int *)PayloadTypeDTMF8KKey + 15);
  *(_WORD *)(a5 + 304) = (_WORD)v22;
  if (v20)
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v22);
  else
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v22);
  v24 = PayloadTypeDTMF16KKey;
  v25 = ImsPrefs::prefWithKey(a4, PayloadTypeDTMF16KKey);
  if (v25)
    v26 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v25 + 56))(v25);
  else
    v26 = (ImsPrefs *)*((unsigned int *)v24 + 15);
  *(_WORD *)(a5 + 306) = (_WORD)v26;
  MaxPacketizationTimeKey = (void **)ImsPrefs::getMaxPacketizationTimeKey(v26);
  v28 = ImsPrefs::prefWithKey(a4, MaxPacketizationTimeKey);
  if (v28)
    LOWORD(v29) = (*(uint64_t (**)(void *))(*(_QWORD *)v28 + 56))(v28);
  else
    v29 = *((_DWORD *)MaxPacketizationTimeKey + 15);
  *(_WORD *)(a5 + 314) = v29;
  *(_QWORD *)(a5 + 96) = *(_QWORD *)(*(_QWORD *)a1 + 144);
  v43 = 0u;
  memset(v44, 0, 48);
  v42 = 0u;
  memset(v41, 0, sizeof(v41));
  v30 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v41, (unsigned int *)(v15 + 112));
  if (DWORD2(v44[2]) == 2)
  {
    SDPMediaEVSSettings::SDPMediaEVSSettings((SDPMediaEVSSettings *)__p, (const SDPMediaFormatEVSParams *)v41, (const SDPMediaFormatEVSParams *)v41, a3, a4);
    *(_WORD *)(a5 + 424) = v40;
    v32 = v39;
    *(_OWORD *)(a5 + 392) = *(_OWORD *)&__p[32];
    *(_OWORD *)(a5 + 408) = v32;
    v33 = *(_OWORD *)&__p[16];
    *(_OWORD *)(a5 + 360) = *(_OWORD *)__p;
    *(_OWORD *)(a5 + 376) = v33;
  }
  else if (DWORD2(v44[2]) == 1)
  {
    if (v20)
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRWBModeKey((ImsPrefs *)v30);
    else
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRNBModeKey((ImsPrefs *)v30);
    v34 = PreferredAMRWBModeKey;
    v35 = ImsPrefs::prefWithKey(a4, PreferredAMRWBModeKey);
    if (v35)
      LOWORD(v36) = (*(uint64_t (**)(void *))(*(_QWORD *)v35 + 56))(v35);
    else
      v36 = *((_DWORD *)v34 + 15);
    SDPMediaAMRSettings::SDPMediaAMRSettings((SDPMediaAMRSettings *)__p, (const SDPMediaFormatAMRParams *)v41, (const SDPMediaFormatAMRParams *)v41, v20, a3, v36);
    *(_OWORD *)(a5 + 328) = *(_OWORD *)&__p[8];
    *(_OWORD *)(a5 + 344) = *(_OWORD *)&__p[24];
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v41);
}

void sub_1BEF3E740(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  uint64_t v32;

  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&a27);
  if (*(_BYTE *)(v32 + 432))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v32);
  _Unwind_Resume(a1);
}

uint64_t SDPTemplateBuilder::createInitialTTYSettings@<X0>(SDPTemplateBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5;
  void **RTTBandwidthSpecifierASValueKey;
  void *v7;
  ImsPrefs *v8;
  void **BandwidthSpecifierRRValueKey;
  void *v10;
  ImsPrefs *v11;
  void **BandwidthSpecifierRSValueKey;
  void *v13;
  ImsPrefs *v14;
  void **PayloadTypeTTYKey;
  void *v16;
  ImsPrefs *v17;
  void **PayloadTypeTTYRedundancyKey;
  void *v19;
  uint64_t result;

  *(_OWORD *)(a2 + 248) = 0u;
  *(_OWORD *)(a2 + 232) = 0u;
  *(_OWORD *)(a2 + 216) = 0u;
  *(_OWORD *)(a2 + 200) = 0u;
  *(_OWORD *)(a2 + 184) = 0u;
  *(_OWORD *)(a2 + 168) = 0u;
  *(_OWORD *)(a2 + 152) = 0u;
  *(_OWORD *)(a2 + 136) = 0u;
  *(_OWORD *)(a2 + 120) = 0u;
  *(_OWORD *)(a2 + 104) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 56) = 0u;
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(_OWORD *)(a2 + 8) = 0u;
  v5 = a2 + 8;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 272) = 0u;
  *(_DWORD *)(a2 + 28) = 16711935;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_QWORD *)(a2 + 36) = 0x100000001;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 89) = 0u;
  *(_QWORD *)a2 = &off_1E78BE690;
  *(_QWORD *)(a2 + 280) = 0x2800000028;
  *(_DWORD *)(a2 + 288) = 16711935;
  *(_BYTE *)(a2 + 292) = 1;
  RTTBandwidthSpecifierASValueKey = (void **)ImsPrefs::getRTTBandwidthSpecifierASValueKey(this);
  v7 = ImsPrefs::prefWithKey(this, RTTBandwidthSpecifierASValueKey);
  if (v7)
    v8 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v7 + 56))(v7);
  else
    v8 = (ImsPrefs *)*((unsigned int *)RTTBandwidthSpecifierASValueKey + 15);
  *(_QWORD *)(a2 + 48) = (int)v8;
  BandwidthSpecifierRRValueKey = (void **)ImsPrefs::getBandwidthSpecifierRRValueKey(v8);
  v10 = ImsPrefs::prefWithKey(this, BandwidthSpecifierRRValueKey);
  if (v10)
    v11 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v10 + 56))(v10);
  else
    v11 = (ImsPrefs *)*((unsigned int *)BandwidthSpecifierRRValueKey + 15);
  *(_QWORD *)(a2 + 56) = (int)v11;
  *(_BYTE *)(a2 + 32) = 1;
  BandwidthSpecifierRSValueKey = (void **)ImsPrefs::getBandwidthSpecifierRSValueKey(v11);
  v13 = ImsPrefs::prefWithKey(this, BandwidthSpecifierRSValueKey);
  if (v13)
    v14 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v13 + 56))(v13);
  else
    v14 = (ImsPrefs *)*((unsigned int *)BandwidthSpecifierRSValueKey + 15);
  *(_QWORD *)(a2 + 64) = (int)v14;
  *(_BYTE *)(a2 + 33) = 1;
  PayloadTypeTTYKey = (void **)ImsPrefs::getPayloadTypeTTYKey(v14);
  v16 = ImsPrefs::prefWithKey(this, PayloadTypeTTYKey);
  if (v16)
    v17 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v16 + 56))(v16);
  else
    v17 = (ImsPrefs *)*((unsigned int *)PayloadTypeTTYKey + 15);
  *(_WORD *)(a2 + 28) = (_WORD)v17;
  PayloadTypeTTYRedundancyKey = (void **)ImsPrefs::getPayloadTypeTTYRedundancyKey(v17);
  v19 = ImsPrefs::prefWithKey(this, PayloadTypeTTYRedundancyKey);
  if (v19)
    result = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 56))(v19);
  else
    result = *((unsigned int *)PayloadTypeTTYRedundancyKey + 15);
  *(_WORD *)(a2 + 288) = result;
  return result;
}

void sub_1BEF3E994(_Unwind_Exception *a1)
{
  SDPMediaSettings *v1;

  SDPMediaSettings::~SDPMediaSettings(v1);
  _Unwind_Resume(a1);
}

void SDPTemplateBuilder::createInitialSecondAudioSettings(uint64_t a1@<X0>, int a2@<W1>, int a3@<W2>, ImsPrefs *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  int v17;
  _BOOL4 v18;
  ImsPrefs *v19;
  ImsPrefs *v20;
  void **PayloadTypeDTMF16KKey;
  void **v22;
  void *v23;
  ImsPrefs *v24;
  void **PayloadTypeDTMF8KKey;
  void **v26;
  void *v27;
  int v28;
  unsigned int *v29;
  void **PreferredAMRWBModeKey;
  void **v31;
  void *v32;
  int v33;
  _OWORD v36[3];
  std::string::value_type *__s[2];
  __int128 v38;
  _BYTE v39[8];
  __int128 v40;
  __int128 v41;
  std::string v42[2];
  __int128 v43;
  __int128 v44;
  _OWORD v45[14];
  uint64_t v46;
  int v47;
  int v48;
  void (**v49)(SDPMediaAMRSettings *__hidden);
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a5 + 432) = 0;
  *(_OWORD *)(a5 + 400) = 0u;
  *(_OWORD *)(a5 + 416) = 0u;
  *(_OWORD *)(a5 + 368) = 0u;
  *(_OWORD *)(a5 + 384) = 0u;
  *(_OWORD *)(a5 + 336) = 0u;
  *(_OWORD *)(a5 + 352) = 0u;
  *(_OWORD *)(a5 + 304) = 0u;
  *(_OWORD *)(a5 + 320) = 0u;
  *(_OWORD *)(a5 + 272) = 0u;
  *(_OWORD *)(a5 + 288) = 0u;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  *(_OWORD *)(a5 + 208) = 0u;
  *(_OWORD *)(a5 + 224) = 0u;
  *(_OWORD *)(a5 + 176) = 0u;
  *(_OWORD *)(a5 + 192) = 0u;
  *(_OWORD *)(a5 + 144) = 0u;
  *(_OWORD *)(a5 + 160) = 0u;
  *(_OWORD *)(a5 + 112) = 0u;
  *(_OWORD *)(a5 + 128) = 0u;
  *(_OWORD *)(a5 + 80) = 0u;
  *(_OWORD *)(a5 + 96) = 0u;
  *(_OWORD *)(a5 + 48) = 0u;
  *(_OWORD *)(a5 + 64) = 0u;
  *(_OWORD *)(a5 + 16) = 0u;
  *(_OWORD *)(a5 + 32) = 0u;
  *(_OWORD *)a5 = 0u;
  v7 = *(_QWORD *)(*(_QWORD *)a1 + 416);
  v6 = *(_QWORD *)(*(_QWORD *)a1 + 424);
  if (v7 == v6)
    return;
  for (i = v7 + 40; *(_DWORD *)(i - 28) != 2; i += 200)
  {
    v10 = i + 160;
    if (v10 == v6)
      return;
  }
  v11 = *(_QWORD *)(i + 8);
  if (i == v11)
    return;
  while (1)
  {
    *(_OWORD *)__s = 0u;
    v38 = 0u;
    memset(v36, 0, sizeof(v36));
    SDPMediaRTPMap::SDPMediaRTPMap((SDPMediaRTPMap *)v36, (const SDPMediaRTPMap *)(v11 + 32));
    if (SBYTE7(v38) < 0)
      break;
    if (BYTE7(v38))
    {
      *(_OWORD *)&v42[0].__r_.__value_.__l.__data_ = *(_OWORD *)__s;
      v42[0].__r_.__value_.__r.__words[2] = v38;
      goto LABEL_12;
    }
LABEL_26:
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)v36);
    v11 = *(_QWORD *)(v11 + 8);
    if (i == v11)
      return;
  }
  if (!__s[1])
    goto LABEL_26;
  std::string::__init_copy_ctor_external(v42, __s[0], (std::string::size_type)__s[1]);
LABEL_12:
  size = HIBYTE(v42[0].__r_.__value_.__r.__words[2]);
  if ((v42[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v42[0].__r_.__value_.__l.__size_;
  if (size != 15)
    goto LABEL_21;
  v13 = (std::string *)v42[0].__r_.__value_.__r.__words[0];
  if ((v42[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v13 = v42;
  v14 = v13->__r_.__value_.__r.__words[0];
  v15 = *(std::string::size_type *)((char *)v13->__r_.__value_.__r.__words + 7);
  if (v14 == 0x6E6F6870656C6574 && v15 == 0x746E6576652D656ELL)
  {
    v18 = 0;
    if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_24;
  }
  else
  {
LABEL_21:
    v17 = WORD4(v38);
    if (!WORD4(v38))
      v17 = 8000;
    v18 = v17 == a2;
    if (SHIBYTE(v42[0].__r_.__value_.__r.__words[2]) < 0)
LABEL_24:
      operator delete(v42[0].__r_.__value_.__l.__data_);
  }
  if (!v18)
    goto LABEL_26;
  v56 = 0;
  v57 = 0;
  HIDWORD(v54) = 0;
  v50 = 0u;
  v51 = 0;
  v48 = 0;
  HIDWORD(v42[1].__r_.__value_.__r.__words[2]) = 0;
  *(_OWORD *)&v42[1].__r_.__value_.__l.__data_ = 0u;
  HIDWORD(v42[1].__r_.__value_.__r.__words[0]) = 16711935;
  v59 = 0;
  *(_OWORD *)&v42[0].__r_.__value_.__r.__words[1] = 0u;
  *(std::string::size_type *)((char *)&v42[1].__r_.__value_.__r.__words[1] + 4) = 0x100000001;
  v43 = 0u;
  v44 = 0u;
  memset(v45, 0, sizeof(v45));
  v42[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E78B97D0;
  v46 = 0x1F401F4000FF00FFLL;
  v47 = 15728660;
  v49 = &off_1E78B9808;
  *(_DWORD *)((char *)&v50 + 6) = 0x20000;
  WORD5(v50) = 2;
  *(_QWORD *)((char *)&v54 + 5) = 0;
  v53 = 0;
  *(_QWORD *)&v54 = 0;
  v52 = 0;
  v55 = xmmword_1BF29C680;
  v58 = 131074;
  if (*(_BYTE *)(a5 + 432))
  {
    SDPMediaAudioSettings::operator=(a5, (uint64_t)v42);
    v19 = a4;
  }
  else
  {
    SDPMediaAudioSettings::SDPMediaAudioSettings((SDPMediaAudioSettings *)a5, (const SDPMediaAudioSettings *)v42);
    v19 = a4;
    *(_BYTE *)(a5 + 432) = 1;
  }
  SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)&v42[0].__r_.__value_.__l.__data_);
  *(_WORD *)(a5 + 28) = *(_WORD *)(v11 + 24);
  *(_WORD *)(a5 + 308) = a2;
  if (a2 == 16000)
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v20);
  else
    PayloadTypeDTMF16KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v20);
  v22 = PayloadTypeDTMF16KKey;
  v23 = ImsPrefs::prefWithKey(v19, PayloadTypeDTMF16KKey);
  if (v23)
    v24 = (ImsPrefs *)(*(uint64_t (**)(void *))(*(_QWORD *)v23 + 56))(v23);
  else
    v24 = (ImsPrefs *)*((unsigned int *)v22 + 15);
  *(_WORD *)(a5 + 304) = (_WORD)v24;
  if (a2 == 16000)
    PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF16KKey(v24);
  else
    PayloadTypeDTMF8KKey = (void **)ImsPrefs::getPayloadTypeDTMF8KKey(v24);
  v26 = PayloadTypeDTMF8KKey;
  v27 = ImsPrefs::prefWithKey(v19, PayloadTypeDTMF8KKey);
  if (v27)
    LOWORD(v28) = (*(uint64_t (**)(void *))(*(_QWORD *)v27 + 56))(v27);
  else
    v28 = *((_DWORD *)v26 + 15);
  *(_WORD *)(a5 + 306) = v28;
  v44 = 0u;
  memset(v45, 0, 48);
  v43 = 0u;
  memset(v42, 0, sizeof(v42));
  v29 = std::__variant_detail::__copy_constructor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::__copy_constructor((unsigned int *)v42, (unsigned int *)(v11 + 112));
  if (DWORD2(v45[2]) == 1)
  {
    if (a2 == 16000)
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRWBModeKey((ImsPrefs *)v29);
    else
      PreferredAMRWBModeKey = (void **)ImsPrefs::getPreferredAMRNBModeKey((ImsPrefs *)v29);
    v31 = PreferredAMRWBModeKey;
    v32 = ImsPrefs::prefWithKey(v19, PreferredAMRWBModeKey);
    if (v32)
      LOWORD(v33) = (*(uint64_t (**)(void *))(*(_QWORD *)v32 + 56))(v32);
    else
      v33 = *((_DWORD *)v31 + 15);
    SDPMediaAMRSettings::SDPMediaAMRSettings((SDPMediaAMRSettings *)v39, (const SDPMediaFormatAMRParams *)v42, (const SDPMediaFormatAMRParams *)v42, a2 == 16000, a3, v33);
    *(_OWORD *)(a5 + 328) = v40;
    *(_OWORD *)(a5 + 344) = v41;
  }
  std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)v42);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)v36);
}

void sub_1BEF3EE20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  SDPMediaRTPMap::~SDPMediaRTPMap((void **)va);
  if (*(_BYTE *)(v3 + 432))
    SDPMediaAudioSettings::~SDPMediaAudioSettings((void **)v3);
  _Unwind_Resume(a1);
}

void extractRTPMapInfo(const ImsDictPref *a1, unsigned __int16 *a2, unsigned __int16 *a3)
{
  uint64_t v6;
  uint64_t v7;
  void *__p[2];
  char v9;

  if (a2)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "SampleRate");
    v6 = (*(uint64_t (**)(const ImsDictPref *, void **))(*(_QWORD *)a1 + 88))(a1, __p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (v6)
      *a2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 56))(v6);
  }
  if (a3)
  {
    std::string::basic_string[abi:ne180100]<0>(__p, "Channel");
    v7 = (*(uint64_t (**)(const ImsDictPref *, void **))(*(_QWORD *)a1 + 88))(a1, __p);
    if (v9 < 0)
      operator delete(__p[0]);
    if (v7)
      *a3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  }
}

void sub_1BEF3EF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL SDPTemplateBuilder::generateGenericAMRSDPMedia(__int16 a1, uint64_t a2, ImsDictPref *a3, uint64_t a4)
{
  int v8;
  uint64_t v9;
  int v10;
  const std::string::value_type *v11;
  int v12;
  int v13;
  _BOOL4 v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t (*v19)(__int128 *, void **);
  char v20;
  char v21;
  uint64_t v22;
  std::string v24;
  void *v25[2];
  char v26;
  void *__p[2];
  char v28;
  __int128 v29;
  void *v30[2];
  unsigned __int16 v31[16];
  void *v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int16 v38;
  unsigned __int16 v39;
  void *v40;
  char v41;
  std::string v42;
  __int16 v43;
  char v44;
  __int16 v45;
  int v46;
  char v47;
  unsigned __int16 v48;
  char v49;
  unsigned __int16 v50;
  char v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;

  v55 = *MEMORY[0x1E0C80C00];
  v39 = 8000;
  v38 = 1;
  extractRTPMapInfo(a3, &v39, &v38);
  v8 = a1 & 0xFFE0;
  if (v8 == 96)
  {
    v35 = 0;
    v36 = 0;
    v37 = 0;
    v32 = 0;
    v33 = 0;
    v34 = 0;
    ImsDictPref::keysAndValues((uint64_t)a3, &v35, (char **)&v32);
    memset(v31, 0, sizeof(v31));
    v29 = 0u;
    *(_OWORD *)v30 = 0u;
    v9 = *(unsigned __int8 *)(a2 + 23);
    v10 = (char)v9;
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 8);
    if (v9 == 6)
    {
      if (v10 >= 0)
        v11 = (const std::string::value_type *)a2;
      else
        v11 = *(const std::string::value_type **)a2;
      v12 = *(_DWORD *)v11;
      v13 = *((unsigned __int16 *)v11 + 2);
      v15 = v12 == 760368449 && v13 == 16983;
    }
    else
    {
      v15 = 0;
    }
    SDPMediaFormatAMRParams::SDPMediaFormatAMRParams((SDPMediaFormatAMRParams *)&v29, a1, v15);
    v16 = v35;
    if (v36 != v35)
    {
      v17 = 0;
      v18 = 0;
      do
      {
        if (std::__tree<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::list<SipLazuliManager::OutgoingMsrp>>>>::find<std::string>((uint64_t)&SDPParser::amrFormatParameters, (void **)(v16 + v17)) != (void **)&qword_1ED70CD20)
        {
          v25[0] = (void *)(v35 + v17);
          v19 = (uint64_t (*)(__int128 *, void **))std::__tree<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(SDPMediaFormatAMRParams *,std::string)>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>((uint64_t **)&SDPParser::amrFormatParameters, (void **)(v35 + v17), (uint64_t)&std::piecewise_construct, (__int128 **)v25)[7];
          (*(void (**)(void **__return_ptr))(**((_QWORD **)v32 + v18) + 48))(__p);
          v20 = v19(&v29, __p);
          v21 = v20;
          if (v28 < 0)
          {
            operator delete(__p[0]);
            if ((v21 & 1) == 0)
            {
LABEL_22:
              std::string::basic_string[abi:ne180100]<0>(&v40, "sdp.templatebuilder");
              std::string::basic_string[abi:ne180100]<0>(v25, "");
              pthread_once(&ims::_driverInit, (void (*)(void))ims::createInstance);
              v22 = ImsLogger::error(ims::_logger, (uint64_t)&v40, (uint64_t)v25);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)"Unable to parse ", 16);
              *(_BYTE *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, v35 + v17);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" format parameter for ", 22);
              *(_BYTE *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v22 + 32))(v22, a2);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" codec", 6);
              *(_BYTE *)(v22 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v22 + 17) = 0;
              if (v26 < 0)
                operator delete(v25[0]);
              if (v42.__r_.__value_.__s.__data_[7] < 0)
                operator delete(v40);
            }
          }
          else if ((v20 & 1) == 0)
          {
            goto LABEL_22;
          }
        }
        ++v18;
        v16 = v35;
        v17 += 24;
      }
      while (v18 < 0xAAAAAAAAAAAAAAABLL * ((v36 - v35) >> 3));
    }
    SDPMediaFormatInfo::setPayloadType((SDPMediaFormatInfo *)a4, a1);
    if (*(char *)(a2 + 23) < 0)
      std::string::__init_copy_ctor_external(&v24, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
    else
      v24 = *(std::string *)a2;
    SDPMediaRTPMap::SDPMediaRTPMap((uint64_t)&v40, a1, (__int128 *)&v24, v39, v38);
    *(_BYTE *)(a4 + 24) = v41;
    std::string::operator=((std::string *)(a4 + 32), &v42);
    *(_WORD *)(a4 + 56) = v43;
    std::string::operator=((std::string *)(a4 + 64), (const std::string *)((char *)&v46 + 2));
    *(_DWORD *)(a4 + 88) = v53;
    SDPMediaRTPMap::~SDPMediaRTPMap(&v40);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v24.__r_.__value_.__l.__data_);
    SDPMediaFormatParams::SDPMediaFormatParams((SDPMediaFormatParams *)&v40, v31[4]);
    v40 = off_1E78E9958;
    v44 = v31[5];
    v45 = *(unsigned __int16 *)((char *)&v31[5] + 1);
    v46 = *(_DWORD *)&v31[7];
    v47 = v31[9];
    v48 = v31[10];
    v49 = v31[11];
    v50 = v31[12];
    v51 = v31[13];
    v52 = *(_DWORD *)&v31[14];
    v54 = 1;
    SDPMediaFormatInfo::setSDPMediaFormatParams(a4, (uint64_t)&v40);
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)&v40);
    *(_QWORD *)&v29 = off_1E78ED0A8;
    if (SHIBYTE(v31[3]) < 0)
      operator delete(v30[0]);
    if (v32)
    {
      v33 = v32;
      operator delete(v32);
    }
    v40 = &v35;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&v40);
    v8 = 96;
  }
  return v8 == 96;
}

void sub_1BEF3F3DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,char *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53)
{
  if (a37 < 0)
    operator delete(__p);
  if (a41)
    operator delete(a41);
  a48 = &a44;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&a48);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SDPMedia>::__emplace_back_slow_path<SDPMedia>(uint64_t *a1, const SDPMedia *a2)
{
  uint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  char *v13;
  SDPMedia *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v3 = *a1;
  v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x147AE147AE147AELL)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  v7 = (uint64_t)(a1 + 2);
  v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5)
    v5 = 2 * v8;
  if (v8 >= 0xA3D70A3D70A3D7)
    v9 = 0x147AE147AE147AELL;
  else
    v9 = v5;
  v17 = a1 + 2;
  if (v9)
    v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<SDPMedia>>(v7, v9);
  else
    v10 = 0;
  v13 = v10;
  v14 = (SDPMedia *)&v10[200 * v4];
  v16 = &v10[200 * v9];
  SDPMedia::SDPMedia(v14, a2);
  v15 = (char *)v14 + 200;
  std::vector<SDPMedia>::__swap_out_circular_buffer(a1, &v13);
  v11 = a1[1];
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)&v13);
  return v11;
}

void sub_1BEF3F5CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  std::__split_buffer<SDPMedia>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::vector<SDPMediaFormatInfo>::__push_back_slow_path<SDPMediaFormatInfo const&>(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  uint64_t v15;
  char *v16;
  _BYTE v17[24];
  _QWORD *v18;

  v2 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[1] - *a1) >> 5);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x124924924924924)
    std::vector<bambi::XmlParserNamespace>::__throw_length_error[abi:ne180100]();
  if (0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 5) > v3)
    v3 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(a1[2] - *a1) >> 5);
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[2] - *a1) >> 5)) >= 0x92492492492492)
    v6 = 0x124924924924924;
  else
    v6 = v3;
  v18 = a1 + 2;
  if (v6)
  {
    if (v6 > 0x124924924924924)
      std::__throw_bad_array_new_length[abi:ne180100]();
    v7 = (char *)operator new(224 * v6);
  }
  else
  {
    v7 = 0;
  }
  v16 = v7;
  *(_QWORD *)v17 = &v7[224 * v2];
  *(_QWORD *)&v17[16] = &v7[224 * v6];
  SDPMediaFormatInfo::SDPMediaFormatInfo(*(uint64_t *)v17, a2);
  v8 = 0;
  *(_QWORD *)&v17[8] = *(_QWORD *)v17 + 224;
  v10 = *a1;
  for (i = a1[1]; i + v8 != v10; SDPMediaFormatInfo::SDPMediaFormatInfo(v8 + *(_QWORD *)v17, v8 + i))
    v8 -= 224;
  v11 = a1[2];
  v12 = *(_OWORD *)&v17[8];
  v15 = *(_QWORD *)&v17[8];
  v13 = *(_OWORD *)a1;
  *a1 = *(_QWORD *)v17 + v8;
  *(_OWORD *)v17 = v13;
  *(_OWORD *)(a1 + 1) = v12;
  *(_QWORD *)&v17[16] = v11;
  v16 = (char *)v13;
  std::__split_buffer<SDPMediaFormatInfo>::~__split_buffer((uint64_t)&v16);
  return v15;
}

void sub_1BEF3F744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  std::__split_buffer<SDPMediaFormatInfo>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t std::__split_buffer<SDPMediaFormatInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t i;
  uint64_t v3;
  void (**v4)(void);

  v3 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v3; i = *(_QWORD *)(a1 + 16))
  {
    v4 = *(void (***)(void))(i - 224);
    *(_QWORD *)(a1 + 16) = i - 224;
    (*v4)();
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;
  char *v7;
  void (**v8)(char *);
  BOOL v9;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      v6 = v4 - 224;
      v7 = v4 - 224;
      do
      {
        v8 = *(void (***)(char *))v7;
        v7 -= 224;
        (*v8)(v6);
        v9 = v6 == v2;
        v6 = v7;
      }
      while (!v9);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string const*,std::string const*,std::string*>(uint64_t a1, __int128 *a2, __int128 *a3, std::string *this)
{
  std::string *v4;
  __int128 *v6;
  __int128 v7;
  _QWORD v9[3];
  uint64_t v10;
  std::string *v11;
  std::string *v12;

  v4 = this;
  v11 = this;
  v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  v9[2] = &v12;
  v10 = 0;
  if (a2 != a3)
  {
    v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((_QWORD *)v6 + 1));
        v4 = v12;
      }
      else
      {
        v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((_QWORD *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      v6 = (__int128 *)((char *)v6 + 24);
      v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_1BEF3F904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *std::__list_imp<std::variant<SDPRTCPXR,SDPUnsupportedAttribute,SDPMediaCandidate,SDPMediaCrypto,SDPMediaDirection,SDPMediaEndToAccessEdgeProtection,SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams,SDPMediaRTPMap,SDPPacketizationTimeAttribute,SDPMediaPath,SDPMediaAcceptTypes,SDPMediaAcceptWrappedTypes,SDPMediaSetup,SDPMediaFingerprint>>::__create_node[abi:ne180100]<SDPMediaDirection>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0x90uLL);
  *v7 = a2;
  v7[1] = a3;
  std::__variant_detail::__alt<4ul,SDPMediaDirection>::__alt[abi:ne180100]<SDPMediaDirection>((uint64_t)(v7 + 2), a4);
  *((_DWORD *)v7 + 34) = 4;
  return v7;
}

void sub_1BEF3F968(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__variant_detail::__alt<4ul,SDPMediaDirection>::__alt[abi:ne180100]<SDPMediaDirection>(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;

  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  *(_QWORD *)a1 = off_1E78ED0A8;
  v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_QWORD *)a1 = off_1E78CE390;
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  return a1;
}

uint64_t SDPMediaDirection::SDPMediaDirection(uint64_t a1, int a2)
{
  std::string *v4;
  void *__p[2];
  uint64_t v7;

  std::string::basic_string[abi:ne180100]<0>(__p, "");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  v4 = (std::string *)(a1 + 16);
  if (SHIBYTE(v7) < 0)
  {
    std::string::__init_copy_ctor_external(v4, (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v7) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v7;
  }
  *(_QWORD *)a1 = off_1E78CE390;
  *(_DWORD *)(a1 + 40) = a2;
  return a1;
}

void sub_1BEF3FA88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaRTPMap::SDPMediaRTPMap(uint64_t a1, __int16 a2, __int128 *a3, __int16 a4, __int16 a5)
{
  std::string *v10;
  __int128 v11;
  void *__p[2];
  uint64_t v14;

  std::string::basic_string[abi:ne180100]<0>(__p, "rtpmap");
  *(_BYTE *)(a1 + 8) = 1;
  *(_QWORD *)a1 = off_1E78ED0A8;
  if (SHIBYTE(v14) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)(a1 + 16), (const std::string::value_type *)__p[0], (std::string::size_type)__p[1]);
    if (SHIBYTE(v14) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 32) = v14;
  }
  *(_QWORD *)a1 = &off_1E78EE990;
  *(_WORD *)(a1 + 40) = a2;
  v10 = (std::string *)(a1 + 48);
  if (*((char *)a3 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)a3, *((_QWORD *)a3 + 1));
  }
  else
  {
    v11 = *a3;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a3 + 2);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  *(_WORD *)(a1 + 72) = a4;
  *(_WORD *)(a1 + 74) = a5;
  return a1;
}

void sub_1BEF3FB94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;
  void **v16;
  uint64_t v17;

  *(_QWORD *)v15 = v17;
  if (*(char *)(v15 + 39) < 0)
    operator delete(*v16);
  _Unwind_Resume(exception_object);
}

uint64_t SDPMediaAudioSettings::operator=(uint64_t a1, uint64_t a2)
{
  void **v4;
  __int128 v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;

  SDPMediaSettings::operator=(a1, a2);
  v4 = (void **)(a1 + 280);
  if (*(char *)(a1 + 303) < 0)
    operator delete(*v4);
  v5 = *(_OWORD *)(a2 + 280);
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a2 + 296);
  *(_OWORD *)v4 = v5;
  *(_BYTE *)(a2 + 303) = 0;
  *(_BYTE *)(a2 + 280) = 0;
  v6 = *(_QWORD *)(a2 + 304);
  *(_QWORD *)(a1 + 309) = *(_QWORD *)(a2 + 309);
  *(_QWORD *)(a1 + 304) = v6;
  v7 = *(_OWORD *)(a2 + 328);
  *(_OWORD *)(a1 + 344) = *(_OWORD *)(a2 + 344);
  *(_OWORD *)(a1 + 328) = v7;
  v9 = *(_OWORD *)(a2 + 392);
  v8 = *(_OWORD *)(a2 + 408);
  v10 = *(_OWORD *)(a2 + 376);
  *(_WORD *)(a1 + 424) = *(_WORD *)(a2 + 424);
  *(_OWORD *)(a1 + 392) = v9;
  *(_OWORD *)(a1 + 408) = v8;
  *(_OWORD *)(a1 + 376) = v10;
  *(_OWORD *)(a1 + 360) = *(_OWORD *)(a2 + 360);
  return a1;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__insert_node_at(uint64_t a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t *result;

  *a3 = 0;
  a3[1] = 0;
  a3[2] = a1;
  *a2 = a3;
  if (*(_QWORD *)SDPTemplateBuilder::_mediaGenerators)
  {
    SDPTemplateBuilder::_mediaGenerators = *(_QWORD *)SDPTemplateBuilder::_mediaGenerators;
    a3 = *a2;
  }
  result = std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>((uint64_t *)qword_1ED70E720, a3);
  ++qword_1ED70E728;
  return result;
}

uint64_t *std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__find_equal<std::string>(uint64_t **a1, void **a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v6;
  _QWORD *v7;

  v3 = &qword_1ED70E720;
  v4 = qword_1ED70E720;
  if (qword_1ED70E720)
  {
    v6 = &qword_1ED70E720;
    do
    {
      while (1)
      {
        v3 = (uint64_t *)v4;
        v7 = (_QWORD *)(v4 + 32);
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, (void **)(v4 + 32)) & 0x80) == 0)
          break;
        v4 = *v3;
        v6 = v3;
        if (!*v3)
          goto LABEL_10;
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v7, a2) & 0x80) == 0)
        break;
      v6 = v3 + 1;
      v4 = v3[1];
    }
    while (v4);
  }
  else
  {
    v6 = &qword_1ED70E720;
  }
LABEL_10:
  *a1 = v3;
  return v6;
}

uint64_t *std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string const&>,std::tuple<>>(uint64_t **a1, void **a2, __int128 **a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t **v7;
  __int128 *v8;
  std::string *v9;
  __int128 v10;
  _QWORD v12[2];
  uint64_t v13;
  uint64_t v14;

  v14 = 0;
  v5 = (uint64_t **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v14, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = v5;
    v8 = *a3;
    v13 = 0;
    v6 = (uint64_t *)operator new(0x50uLL);
    v12[0] = v6;
    v12[1] = a1 + 1;
    v9 = (std::string *)(v6 + 4);
    if (*((char *)v8 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *(const std::string::value_type **)v8, *((_QWORD *)v8 + 1));
    }
    else
    {
      v10 = *v8;
      v6[6] = *((_QWORD *)v8 + 2);
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
    }
    v6[7] = 0;
    v6[8] = 0;
    v6[9] = 0;
    LOBYTE(v13) = 1;
    std::__tree<unsigned int>::__insert_node_at(a1, v14, v7, v6);
    v12[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v12);
  }
  return v6;
}

void sub_1BEF3FEE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SDPMediaFormatInfo>>,0>((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SDPMediaFormatInfo>>,0>(uint64_t a1)
{
  void **v2;

  v2 = (void **)(a1 + 24);
  std::vector<SDPMediaFormatInfo>::__destroy_vector::operator()[abi:ne180100](&v2);
  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
}

_QWORD *std::__list_imp<SDPMediaFormatInfo>::__create_node[abi:ne180100]<SDPMediaFormatInfo const&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;

  v7 = operator new(0xF0uLL);
  *v7 = a2;
  v7[1] = a3;
  SDPMediaFormatInfo::SDPMediaFormatInfo((uint64_t)(v7 + 2), a4);
  return v7;
}

void sub_1BEF3FFD8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(*a1);
    std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::destroy(a1[1]);
    a1[5] = &off_1E78E2080;
    std::__variant_detail::__dtor<std::__variant_detail::__traits<SDPMediaFormatUnknownParams,SDPMediaFormatAMRParams,SDPMediaFormatEVSParams,SDPMediaFormatDTMFParams,SDPMediaFormatTTYParams,SDPMediaFormatTTYRedParams>,(std::__variant_detail::_Trait)1>::~__dtor((unsigned int *)a1 + 34);
    SDPMediaRTPMap::~SDPMediaRTPMap((void **)a1 + 7);
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(_QWORD *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(*a1);
    std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::destroy(a1[1]);
    std::__destroy_at[abi:ne180100]<std::pair<std::string const,std::vector<SDPMediaFormatInfo>>,0>((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

_QWORD *std::__tree<std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::__map_value_compare<EVSConfigName,std::__value_type<EVSConfigName,SDPMediaFormatInfo>,std::less<EVSConfigName>,true>,std::allocator<std::__value_type<EVSConfigName,SDPMediaFormatInfo>>>::__emplace_unique_key_args<EVSConfigName,std::piecewise_construct_t const&,std::tuple<EVSConfigName&&>,std::tuple<>>(uint64_t **a1, __int16 a2, _WORD *a3)
{
  __int16 *v5;
  uint64_t **v6;
  _QWORD *v7;
  int v8;
  _QWORD *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = (__int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = v5;
        v8 = v5[16];
        if (v8 <= a2)
          break;
        v5 = (__int16 *)*v7;
        v6 = (uint64_t **)v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = (__int16 *)v7[1];
      if (!v5)
      {
        v6 = (uint64_t **)(v7 + 1);
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = v7;
    v7 = operator new(0x108uLL);
    *((_WORD *)v7 + 16) = *a3;
    *((_OWORD *)v7 + 3) = 0u;
    *((_OWORD *)v7 + 4) = 0u;
    *((_OWORD *)v7 + 5) = 0u;
    *((_OWORD *)v7 + 6) = 0u;
    *((_OWORD *)v7 + 7) = 0u;
    *((_OWORD *)v7 + 8) = 0u;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((_OWORD *)v7 + 11) = 0u;
    *((_OWORD *)v7 + 12) = 0u;
    *((_OWORD *)v7 + 13) = 0u;
    *((_OWORD *)v7 + 14) = 0u;
    *((_OWORD *)v7 + 15) = 0u;
    v7[32] = 0;
    v7[5] = &off_1E78E2080;
    *((_WORD *)v7 + 24) = 255;
    *((_BYTE *)v7 + 64) = 1;
    v7[9] = 0;
    v7[10] = 0;
    v7[11] = 0;
    v7[7] = &off_1E78EE990;
    *((_WORD *)v7 + 48) = 255;
    v7[13] = 0;
    v7[14] = 0;
    v7[15] = 0;
    *((_DWORD *)v7 + 32) = 0x10000;
    *((_OWORD *)v7 + 9) = 0u;
    *((_OWORD *)v7 + 10) = 0u;
    *((_BYTE *)v7 + 144) = 1;
    v7[20] = 0;
    v7[21] = 0;
    v7[19] = 0;
    v7[22] = 0;
    v7[23] = 0;
    *((_WORD *)v7 + 88) = 255;
    v7[17] = &off_1E78B8590;
    v7[24] = 0;
    v7[25] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = v7;
    v10 = v7;
    v11 = (uint64_t *)**a1;
    if (v11)
    {
      *a1 = v11;
      v10 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

_OWORD *std::__tree<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::__map_value_compare<std::string,std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>>>::__emplace_unique_key_args<std::string,std::piecewise_construct_t const&,std::tuple<std::string&&>,std::tuple<>>(uint64_t **a1, void **a2, _OWORD **a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD v11[3];
  uint64_t v12;

  v12 = 0;
  v5 = (void **)std::__tree<std::__value_type<std::string,std::string>,std::__map_value_compare<std::string,std::__value_type<std::string,std::string>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,std::string>>>::__find_equal<std::string>((uint64_t)a1, &v12, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v11[2] = 1;
    v6 = operator new(0x50uLL);
    v11[1] = a1 + 1;
    v8 = *a3;
    v9 = *((_QWORD *)*a3 + 2);
    v6[2] = **a3;
    *((_QWORD *)v6 + 6) = v9;
    *v8 = 0;
    v8[1] = 0;
    v8[2] = 0;
    *((_QWORD *)v6 + 8) = 0;
    *((_QWORD *)v6 + 9) = 0;
    *((_QWORD *)v6 + 7) = 0;
    std::__tree<unsigned int>::__insert_node_at(a1, v12, v7, (uint64_t *)v6);
    v11[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<std::string,std::vector<SDPMediaFormatInfo>>,void *>>>>::reset[abi:ne180100]((uint64_t)v11);
  }
  return v6;
}

uint64_t _GLOBAL__sub_I_SDPTemplateBuilder_cpp()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t *v2;
  const std::string::value_type **v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  BOOL v7;
  uint64_t *v8;
  std::string *v9;
  uint64_t i;
  uint64_t *v12;
  _QWORD v13[4];
  _QWORD v14[4];
  _QWORD v15[4];
  _QWORD v16[4];
  _QWORD v17[4];
  _QWORD v18[5];

  v18[4] = *MEMORY[0x1E0C80C00];
  std::string::basic_string[abi:ne180100]<0>(v13, "EVS");
  v13[3] = SDPTemplateBuilder::generateEVSSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v14, "AMR-WB");
  v14[3] = SDPTemplateBuilder::generateAMRWBSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v15, "AMR");
  v15[3] = SDPTemplateBuilder::generateAMRNBSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v16, "PCMU");
  v16[3] = SDPTemplateBuilder::generatePCMUSDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v17, "PCMA");
  v17[3] = SDPTemplateBuilder::generatePCMASDPMedia;
  std::string::basic_string[abi:ne180100]<0>(v18, "telephone-event");
  v0 = 0;
  v1 = 0;
  v18[3] = SDPTemplateBuilder::generateDTMFSDPMedia;
  qword_1ED70E720 = 0;
  v2 = &qword_1ED70E720;
  qword_1ED70E728 = 0;
  SDPTemplateBuilder::_mediaGenerators = (uint64_t)&qword_1ED70E720;
  while (1)
  {
    v3 = (const std::string::value_type **)&v13[4 * v1];
    v12 = 0;
    if (v2 == &qword_1ED70E720)
    {
      v4 = &qword_1ED70E720;
      if (v0)
        goto LABEL_7;
    }
    else
    {
      if (v0)
      {
        do
        {
          v4 = (uint64_t *)v0;
          v0 = *(_QWORD *)(v0 + 8);
        }
        while (v0);
      }
      else
      {
        v6 = &qword_1ED70E720;
        do
        {
          v4 = (uint64_t *)v6[2];
          v7 = *v4 == (_QWORD)v6;
          v6 = v4;
        }
        while (v7);
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v4 + 4, (void **)&v13[4 * v1]) & 0x80) == 0)
      {
        v5 = std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__find_equal<std::string>(&v12, (void **)&v13[4 * v1]);
LABEL_12:
        if (*v5)
          goto LABEL_20;
        goto LABEL_16;
      }
      if (qword_1ED70E720)
      {
LABEL_7:
        v12 = v4;
        v5 = v4 + 1;
        goto LABEL_12;
      }
    }
    v12 = &qword_1ED70E720;
    v5 = &qword_1ED70E720;
LABEL_16:
    v8 = (uint64_t *)operator new(0x40uLL);
    v9 = (std::string *)(v8 + 4);
    if (*((char *)v3 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(v9, *v3, (std::string::size_type)v3[1]);
    }
    else
    {
      *(_OWORD *)&v9->__r_.__value_.__l.__data_ = *(_OWORD *)v3;
      v8[6] = (uint64_t)v3[2];
    }
    v8[7] = v13[4 * v1 + 3];
    std::__tree<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::__map_value_compare<std::string,std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>>>::__insert_node_at((uint64_t)v12, (uint64_t **)v5, v8);
LABEL_20:
    if (++v1 == 6)
      break;
    v2 = (uint64_t *)SDPTemplateBuilder::_mediaGenerators;
    v0 = qword_1ED70E720;
  }
  for (i = 0; i != -24; i -= 4)
  {
    if (SHIBYTE(v18[i + 2]) < 0)
      operator delete((void *)v18[i]);
  }
  return __cxa_atexit((void (*)(void *))std::map<std::string,BOOL (*)(unsigned short,ImsDictPref const*,SDPMediaFormatInfo &)>::~map[abi:ne180100], &SDPTemplateBuilder::_mediaGenerators, &dword_1BEDF4000);
}

void sub_1BEF40528(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  char *v10;

  while (1)
  {
    if (*(v10 - 9) < 0)
      operator delete(*((void **)v10 - 4));
    v10 -= 32;
    if (v10 == &a10)
      _Unwind_Resume(exception_object);
  }
}

uint64_t BambiConferenceParticipant::create@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  std::allocate_shared[abi:ne180100]<BambiConferenceParticipant,std::allocator<BambiConferenceParticipant>,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,void>(a1, a2, a3, a4);
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a4 + 80))(*a4);
}

void sub_1BEF40604(_Unwind_Exception *a1)
{
  uint64_t v1;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::~BambiConferenceParticipant(BambiConferenceParticipant *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  SipSession *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  _BYTE v18[72];

  *(_QWORD *)this = &off_1E78C8668;
  *((_QWORD *)this + 1) = &unk_1E78C86F0;
  v2 = (char *)this + 8;
  *((_QWORD *)this + 2) = &unk_1E78C8828;
  *((_QWORD *)this + 3) = &unk_1E78C8858;
  v3 = (char *)this + 24;
  v4 = ImsLogContainer::debugStream((BambiConferenceParticipant *)((char *)this + 24));
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v4);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v4 + 8), (uint64_t)"~BambiConferenceParticipant", 27);
  *(_BYTE *)(v4 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v4 + 64))(v4, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v4 + 17) = 0;
  v5 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v5)
  {
    v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      v7 = *((_QWORD *)this + 18);
      if (v7)
      {
        if (*(char **)(v7 + 400) == v2)
          *(_QWORD *)(v7 + 400) = *((_QWORD *)this + 26);
      }
    }
  }
  else
  {
    v6 = 0;
  }
  SipTimerContainer::cancelAllTimers((BambiConferenceParticipant *)((char *)this + 1096));
  v8 = (SipSession *)*((_QWORD *)this + 159);
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 160);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  if (v8)
  {
    v12 = (*(uint64_t (**)(char *))(*(_QWORD *)v3 + 64))(v3);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v3 + 16))(v3, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"silent hangup headless session", 30);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    SipSession::silentHangUp(v8, 8, (uint64_t)v18);
    ImsResult::~ImsResult((ImsResult *)v18);
  }
  if (v9)
  {
    v13 = (unint64_t *)&v9->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v6)
  {
    v15 = (unint64_t *)&v6->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock((uint64_t)this + 1240);
  SipTimerContainer::~SipTimerContainer((BambiConferenceParticipant *)((char *)this + 1096));
  SipUri::~SipUri((BambiConferenceParticipant *)((char *)this + 672));
  SipUri::~SipUri((BambiConferenceParticipant *)((char *)this + 264));
  v17 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v17)
    std::__shared_weak_count::__release_weak(v17);
  BambiCallParticipant::~BambiCallParticipant(this);
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant(this);
  JUMPOUT(0x1C3B87100);
}

void `non-virtual thunk to'BambiConferenceParticipant::~BambiConferenceParticipant(BambiConferenceParticipant *this)
{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 8));
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 16));
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 24));
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 8));
  JUMPOUT(0x1C3B87100);
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 16));
  JUMPOUT(0x1C3B87100);
}

{
  BambiConferenceParticipant::~BambiConferenceParticipant((BambiConferenceParticipant *)((char *)this - 24));
  JUMPOUT(0x1C3B87100);
}

uint64_t BambiConferenceParticipant::start(std::__shared_weak_count **this)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  void (**v13)(ImsResult *__hidden);
  uint64_t *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;

  v23 = 0;
  v21 = 0u;
  v22 = 0u;
  v19 = 0u;
  v20 = 0u;
  ((void (*)(__int128 *__return_ptr, std::__shared_weak_count **, uint64_t))(*this)[4].__vftable)(&v19, this, 1);
  v16 = 0u;
  v17 = 0u;
  v18 = 0u;
  v13 = &off_1E78B7238;
  v14 = &_bambiDomain;
  v15 = 1073741826;
  if (*((uint64_t **)&v19 + 1) != &_bambiDomain)
  {
    ImsResult::~ImsResult((ImsResult *)&v13);
    goto LABEL_5;
  }
  v2 = v20;
  ImsResult::~ImsResult((ImsResult *)&v13);
  if (v2 != 1073741826)
  {
LABEL_5:
    if (((*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)&v19 + 1) + 24))(*((_QWORD *)&v19 + 1), v20) & 1) != 0)
    {
      v4 = 0;
      goto LABEL_19;
    }
    v13 = 0;
    v14 = 0;
    v5 = this[19];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      v14 = (uint64_t *)v6;
      if (v6)
      {
        v7 = this[18];
        v13 = (void (**)(ImsResult *__hidden))v7;
        if (v7)
        {
          if ((v7[18].__shared_owners_ & 0xFFFFFFFE) != 2)
          {
            v8 = ((uint64_t (*)(char *))this[3][2].__shared_weak_owners_)((char *)this + 24);
            ((void (*)(char *, uint64_t))this[3]->__shared_weak_owners_)((char *)this + 24, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Putting participant ", 20);
            *(_BYTE *)(v8 + 17) = 0;
            ((void (*)(char *, uint64_t))this[33][1].__shared_weak_owners_)((char *)this + 264, v8);
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)" on hold", 8);
            *(_BYTE *)(v8 + 17) = 0;
            (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
            *(_BYTE *)(v8 + 17) = 0;
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      v6 = 0;
    }
    v9 = ((uint64_t (*)(char *))this[3][2].__shared_weak_owners_)((char *)this + 24);
    ((void (*)(char *, uint64_t))this[3]->__shared_weak_owners_)((char *)this + 24, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"participant ", 12);
    *(_BYTE *)(v9 + 17) = 0;
    ((void (*)(char *, uint64_t))this[33][1].__shared_weak_owners_)((char *)this + 264, v9);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" is already held", 16);
    *(_BYTE *)(v9 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v9 + 17) = 0;
    if (!v6)
    {
LABEL_18:
      v4 = 1;
      goto LABEL_19;
    }
LABEL_14:
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
    goto LABEL_18;
  }
  v3 = ((uint64_t (*)(char *))this[3][2].__shared_weak_owners_)((char *)this + 24);
  ((void (*)(char *, uint64_t))this[3]->__shared_weak_owners_)((char *)this + 24, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Participant ", 12);
  *(_BYTE *)(v3 + 17) = 0;
  ((void (*)(char *, uint64_t))this[33][1].__shared_weak_owners_)((char *)this + 264, v3);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)" has already joined conference", 30);
  *(_BYTE *)(v3 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  v4 = 0;
  *(_BYTE *)(v3 + 17) = 0;
LABEL_19:
  ImsResult::~ImsResult((ImsResult *)&v19);
  return v4;
}

void sub_1BEF40C04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  ImsResult::~ImsResult((ImsResult *)va);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleParticipantLeftConference(BambiConferenceParticipant *this, uint64_t a2)
{
  void *v4;
  void **p_lpsrc;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  _QWORD *v19;
  std::__shared_weak_count *v20;
  BambiCall *v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  char v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  BambiCall *v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  void *lpsrc;
  std::__shared_weak_count *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  uint64_t v58;
  std::__shared_weak_count *v59;
  uint64_t v60;
  std::__shared_weak_count *v61;

  v60 = 0;
  v61 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)this + 16);
  if (lpsrc
  {
    v60 = (uint64_t)v4;
    v61 = v55;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v60;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v6 = v55;
  if (v55)
  {
    p_shared_owners = (unint64_t *)&v55->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (!v60)
  {
    v16 = *((_QWORD *)this + 3);
    v15 = (char *)this + 24;
    v17 = (*(uint64_t (**)(char *))(v16 + 56))(v15);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v15 + 16))(v15, v17);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v17 + 8), (uint64_t)"Conference participant is null. Can't handle ParticipantLeftConference", 70);
    *(_BYTE *)(v17 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v17 + 64))(v17, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v17 + 17) = 0;
    goto LABEL_62;
  }
  v9 = *((_QWORD *)this + 135);
  if (v9)
  {
    v58 = v60;
    v59 = v61;
    if (v61)
    {
      v10 = (unint64_t *)&v61->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)v9 + 16))(v9, &v58, a2);
    v12 = v59;
    if (v59)
    {
      v13 = (unint64_t *)&v59->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      goto LABEL_44;
    }
  }
  else if (*((_BYTE *)this + 1088))
  {
    lpsrc = 0;
    v55 = 0;
    v18 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (v18)
    {
      v55 = std::__shared_weak_count::lock(v18);
      if (v55)
      {
        v19 = (_QWORD *)*((_QWORD *)this + 18);
        lpsrc = v19;
        if (v19)
        {
          if ((BambiConferenceParticipant *)v19[50] == (BambiConferenceParticipant *)((char *)this + 8))
          {
            v19[50] = *((_QWORD *)this + 26);
            v52 = 0;
            v53 = 0;
            std::shared_ptr<IpAddress>::operator=[abi:ne180100](v19 + 184, &v52);
            v45 = v53;
            if (v53)
            {
              v46 = (unint64_t *)&v53->__shared_owners_;
              do
                v47 = __ldaxr(v46);
              while (__stlxr(v47 - 1, v46));
              if (!v47)
              {
                ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
                std::__shared_weak_count::__release_weak(v45);
              }
            }
          }
        }
      }
    }
    v50 = 0;
    v51 = 0;
    v20 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (v20)
    {
      v51 = std::__shared_weak_count::lock(v20);
      if (v51)
      {
        v21 = (BambiCall *)*((_QWORD *)this + 31);
        v50 = v21;
        if (v21)
        {
          v48 = v60;
          v49 = v61;
          if (v61)
          {
            v22 = (unint64_t *)&v61->__shared_owners_;
            do
              v23 = __ldxr(v22);
            while (__stxr(v23 + 1, v22));
          }
          BambiConferenceCall::setParticipantState(v21, &v48, 10);
          v24 = v49;
          if (v49)
          {
            v25 = (unint64_t *)&v49->__shared_owners_;
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
            if (!v26)
            {
              ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
              std::__shared_weak_count::__release_weak(v24);
            }
          }
        }
      }
    }
    v27 = v51;
    if (v51)
    {
      v28 = (unint64_t *)&v51->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v12 = v55;
    if (v55)
    {
      v30 = (unint64_t *)&v55->__shared_owners_;
      do
        v14 = __ldaxr(v30);
      while (__stlxr(v14 - 1, v30));
LABEL_44:
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else
  {
    bzero(&lpsrc, 0x250uLL);
    BambiCallSessionTerminationBaseEvent::BambiCallSessionTerminationBaseEvent((uint64_t)&lpsrc, 15, 11);
    lpsrc = &off_1E78BD2A8;
    v31 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (v31 && (v32 = std::__shared_weak_count::lock(v31)) != 0)
    {
      v33 = v32;
      v34 = *((_QWORD *)this + 18);
      p_shared_weak_owners = (unint64_t *)&v32->__shared_weak_owners_;
      do
        v36 = __ldxr(p_shared_weak_owners);
      while (__stxr(v36 + 1, p_shared_weak_owners));
      v37 = 0;
    }
    else
    {
      v33 = 0;
      v34 = 0;
      v37 = 1;
    }
    v38 = v57;
    v56 = v34;
    v57 = v33;
    if (v38)
      std::__shared_weak_count::__release_weak(v38);
    if ((v37 & 1) == 0)
    {
      v39 = (unint64_t *)&v33->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
        std::__shared_weak_count::__release_weak(v33);
      }
    }
    v41 = *((_QWORD *)this + 26);
    if (v41)
      (*(void (**)(uint64_t, void **))(*(_QWORD *)v41 + 16))(v41, &lpsrc);
    BambiCallSessionTerminationBaseEvent::~BambiCallSessionTerminationBaseEvent((BambiCallSessionTerminationBaseEvent *)&lpsrc);
  }
LABEL_62:
  v42 = v61;
  if (v61)
  {
    v43 = (unint64_t *)&v61->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
}

void sub_1BEF41030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  uint64_t v15;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a11);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a15);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v15 - 48);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleReferFailed(BambiConferenceParticipant *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  char *v5;
  int v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  std::__shared_weak_count **v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  BambiCall *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  ImsPrefs *v17;
  void **EndConferenceOn405Key;
  void *v19;
  int v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  BambiCall *v24;
  unint64_t *v25;
  _BYTE v26[72];
  void *__p;
  std::__shared_weak_count *v28;
  char v29;
  _QWORD v30[9];
  BambiCall *v31;
  std::__shared_weak_count *v32;

  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  v5 = (char *)this + 24;
  v4 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 29) = 0;
  v6 = *((_DWORD *)this + 60);
  v7 = (*(uint64_t (**)(char *))(v4 + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v7);
  if (v6 != 7)
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Unable to add ", 14);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" to conference.", 15);
    *(_BYTE *)(v7 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v7 + 17) = 0;
    v31 = 0;
    v32 = 0;
    v12 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (v12)
    {
      v13 = std::__shared_weak_count::lock(v12);
      v32 = v13;
      if (v13)
      {
        v14 = (BambiCall *)*((_QWORD *)this + 18);
        v31 = v14;
        if (v14)
        {
          if (!*((_QWORD *)this + 26))
          {
            std::string::basic_string[abi:ne180100]<0>(&__p, "ReferFailed");
            BambiCall::endWithReason(v14, (uint64_t)&__p, (uint64_t)v26);
            ImsResult::~ImsResult((ImsResult *)v26);
            if (v29 < 0)
              operator delete(__p);
LABEL_19:
            p_shared_owners = (unint64_t *)&v13->__shared_owners_;
            do
              v16 = __ldaxr(p_shared_owners);
            while (__stlxr(v16 - 1, p_shared_owners));
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      v13 = 0;
    }
    BambiCallParticipant::setState((uint64_t)this, 10, 1);
    if (!v13)
      return;
    goto LABEL_19;
  }
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" is booted. Swallow refer error, go back to Joined state.", 57);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  BambiCallParticipant::setState((uint64_t)this, 6, 0);
  v31 = 0;
  v32 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v8)
  {
    v32 = std::__shared_weak_count::lock(v8);
    if (v32)
    {
      v9 = (std::__shared_weak_count **)*((_QWORD *)this + 31);
      v31 = (BambiCall *)v9;
      if (v9)
      {
        __p = 0;
        v28 = 0;
        v10 = v9[45];
        if (v10)
        {
          v10 = std::__shared_weak_count::lock(v10);
          v11 = v10;
          v28 = v10;
          if (v10)
          {
            v10 = v9[44];
            __p = v10;
          }
        }
        else
        {
          v11 = 0;
        }
        v17 = (ImsPrefs *)SipStack::prefs((SipStack *)v10);
        EndConferenceOn405Key = (void **)ImsPrefs::getEndConferenceOn405Key(v17);
        v19 = ImsPrefs::prefWithKey(v17, EndConferenceOn405Key);
        if (v19)
        {
          v20 = (*(uint64_t (**)(void *))(*(_QWORD *)v19 + 40))(v19);
          if (!v11)
            goto LABEL_31;
        }
        else
        {
          v20 = *((_BYTE *)EndConferenceOn405Key + 57) != 0;
          if (!v11)
          {
LABEL_31:
            if (v20)
            {
              v23 = (*(uint64_t (**)(char *))(*(_QWORD *)v5 + 56))(v5);
              (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v23);
              std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Ending conference due to error response", 39);
              *(_BYTE *)(v23 + 17) = 0;
              (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
              *(_BYTE *)(v23 + 17) = 0;
              v24 = v31;
              std::string::basic_string[abi:ne180100]<0>(&__p, "EmptyConference");
              (*(void (**)(_QWORD *__return_ptr, BambiCall *, void **))(*(_QWORD *)v24 + 80))(v30, v24, &__p);
              ImsResult::~ImsResult((ImsResult *)v30);
              if (v29 < 0)
                operator delete(__p);
            }
            goto LABEL_34;
          }
        }
        v21 = (unint64_t *)&v11->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
        goto LABEL_31;
      }
    }
  }
LABEL_34:
  v13 = v32;
  if (!v32)
    return;
  v25 = (unint64_t *)&v32->__shared_owners_;
  do
    v16 = __ldaxr(v25);
  while (__stlxr(v16 - 1, v25));
LABEL_37:
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
}

void sub_1BEF41400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v24;

  if (a24 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v24 - 48);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleReferNotification(BambiConferenceParticipant *this, const SipMessage *lpsrc)
{
  _DWORD *v3;
  uint64_t v4;
  char *v5;
  _DWORD *v6;
  uint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  std::__shared_weak_count *v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  BambiConferenceParticipant *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v5 = (char *)this + 24;
  v4 = *((_QWORD *)this + 3);
  if (!v3)
  {
    v12 = (*(uint64_t (**)(char *))(v4 + 56))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v12);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"recevied refer notification that isn't a response", 49);
    *(_BYTE *)(v12 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v12 + 17) = 0;
    return;
  }
  v6 = v3;
  v7 = (*(uint64_t (**)(char *))(v4 + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v7);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)"Got ", 4);
  *(_BYTE *)(v7 + 17) = 0;
  std::ostream::operator<<();
  *(_BYTE *)(v7 + 17) = 0;
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v7 + 8), (uint64_t)" refer event for ", 17);
  *(_BYTE *)(v7 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v7);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v7 + 64))(v7, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v7 + 17) = 0;
  v8 = *((_DWORD *)this + 60);
  if ((v8 - 3) >= 2)
  {
    if (v8 != 7)
      return;
    v13 = v6[22];
    if (v13 - 200 > 0x63)
    {
      if (v13 < 0x12C)
        return;
      v19 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)"Unable to remove ", 17);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v19);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v19 + 8), (uint64_t)" from conference.", 17);
      *(_BYTE *)(v19 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v19 + 64))(v19, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v19 + 17) = 0;
      v14 = this;
      v15 = 10;
    }
    else
    {
      v14 = this;
      v15 = 8;
    }
    BambiCallParticipant::setState((uint64_t)v14, v15, 1);
    return;
  }
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v9)
  {
    v10 = 0;
    goto LABEL_13;
  }
  v10 = std::__shared_weak_count::lock(v9);
  if (!v10 || !*((_QWORD *)this + 18))
  {
LABEL_13:
    v16 = (*(uint64_t (**)(char *))(*(_QWORD *)v5 + 48))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v16);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v16 + 8), (uint64_t)"got refer notification without a call object", 44);
    *(_BYTE *)(v16 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v16 + 64))(v16, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v16 + 17) = 0;
    if (!v10)
      return;
    goto LABEL_14;
  }
  v11 = v6[22];
  if (v11 - 200 > 0x63)
  {
    if (v11 >= 0x12C)
    {
      v20 = (*(uint64_t (**)(char *))(*(_QWORD *)v5 + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))((char *)this + 24, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)"Unable to add ", 14);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v20);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v20 + 8), (uint64_t)" to conference.", 15);
      *(_BYTE *)(v20 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v20 + 64))(v20, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v20 + 17) = 0;
      BambiCallParticipant::setState((uint64_t)this, 10, 1);
    }
  }
  else
  {
    BambiConferenceParticipant::joinedSuccessfully(this);
  }
LABEL_14:
  p_shared_owners = (unint64_t *)&v10->__shared_owners_;
  do
    v18 = __ldaxr(p_shared_owners);
  while (__stlxr(v18 - 1, p_shared_owners));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
    std::__shared_weak_count::__release_weak(v10);
  }
}

void sub_1BEF4182C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::joinedSuccessfully(BambiConferenceParticipant *this)
{
  void *v2;
  uint64_t *v3;
  char *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  std::__shared_weak_count *v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  unint64_t *p_shared_weak_owners;
  unint64_t v21;
  char v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  BambiCall *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  SipUri *v31;
  SipUri *v32;
  std::__shared_weak_count *v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  void *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t *v72;
  unint64_t v73;
  uint64_t v74;
  std::__shared_weak_count *v75;
  void *__p;
  std::__shared_weak_count *v77;
  char v78;
  _QWORD v79[10];
  std::__shared_weak_count *v80;
  uint64_t v81;
  std::__shared_weak_count *v82;
  BambiCall *v83;
  std::__shared_weak_count *v84;
  uint64_t v85[2];
  __int128 v86;
  __int128 v87;
  __int128 v88;
  std::__shared_weak_count *v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  std::__shared_weak_count *v95;

  if ((*((_DWORD *)this + 60) - 3) >= 3)
  {
    v4 = (char *)this + 24;
    v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v4 + 16))(v4, v5);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)"Swallow duplicate join successful event", 39);
    *(_BYTE *)(v5 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v5 + 17) = 0;
    return;
  }
  SipTimerContainer::cancelAllTimers((BambiConferenceParticipant *)((char *)this + 1096));
  v90 = 0;
  v91 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&v86, (_QWORD *)this + 16);
  if ((_QWORD)v86
  {
    v90 = (uint64_t)v2;
    v91 = *((_QWORD *)&v86 + 1);
    v3 = (uint64_t *)&v86;
  }
  else
  {
    v3 = &v90;
  }
  *v3 = 0;
  v3[1] = 0;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v86 + 1);
  if (*((_QWORD *)&v86 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v86 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  if (v90)
  {
    v89 = 0;
    v87 = 0u;
    v88 = 0u;
    v86 = 0u;
    v9 = (std::__shared_weak_count *)v91;
    v85[0] = v90;
    v85[1] = v91;
    if (v91)
    {
      v10 = (unint64_t *)(v91 + 8);
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      BambiCallJoinedConferenceEvent::BambiCallJoinedConferenceEvent((uint64_t)&v86, v85);
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    else
    {
      BambiCallJoinedConferenceEvent::BambiCallJoinedConferenceEvent((uint64_t)&v86, v85);
    }
    v16 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (v16 && (v17 = std::__shared_weak_count::lock(v16)) != 0)
    {
      v18 = v17;
      v19 = *((_QWORD *)this + 18);
      p_shared_weak_owners = (unint64_t *)&v17->__shared_weak_owners_;
      do
        v21 = __ldxr(p_shared_weak_owners);
      while (__stxr(v21 + 1, p_shared_weak_owners));
      v22 = 0;
    }
    else
    {
      v18 = 0;
      v19 = 0;
      v22 = 1;
    }
    v23 = (std::__shared_weak_count *)*((_QWORD *)&v87 + 1);
    *(_QWORD *)&v87 = v19;
    *((_QWORD *)&v87 + 1) = v18;
    if (v23)
      std::__shared_weak_count::__release_weak(v23);
    if ((v22 & 1) == 0)
    {
      p_shared_owners = (unint64_t *)&v18->__shared_owners_;
      do
        v25 = __ldaxr(p_shared_owners);
      while (__stlxr(v25 - 1, p_shared_owners));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    v26 = *((_QWORD *)this + 26);
    if (v26)
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 16))(v26, &v86);
    BambiCallParticipant::setState((uint64_t)this, 6, 1);
    v83 = 0;
    v84 = 0;
    v27 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    if (v27 && (v84 = std::__shared_weak_count::lock(v27)) != 0)
    {
      v28 = (BambiCall *)*((_QWORD *)this + 18);
      v83 = v28;
    }
    else
    {
      v28 = 0;
    }
    v81 = 0;
    v82 = 0;
    v29 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
    if (v29
      && (v82 = std::__shared_weak_count::lock(v29)) != 0
      && (v30 = *((_QWORD *)this + 31), (v81 = v30) != 0)
      && (v31 = *(SipUri **)(v30 + 1840), v32 = *(SipUri **)(v30 + 1848), v31 != v32))
    {
      while (!SipUri::equals(v31, (BambiConferenceParticipant *)((char *)this + 264), 1))
      {
        v31 = (SipUri *)((char *)v31 + 432);
        if (v31 == v32)
          goto LABEL_47;
      }
      v46 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v46);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v46 + 8), (uint64_t)"keeping headless participant session", 36);
      *(_BYTE *)(v46 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v46 + 64))(v46, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v46 + 17) = 0;
      if (!v28)
        goto LABEL_57;
      BambiCall::terminateMediaSession((RTPManager **)v28);
      v47 = *((_QWORD *)v28 + 48);
      v48 = (std::__shared_weak_count *)*((_QWORD *)v28 + 49);
      v79[9] = v47;
      v80 = v48;
      if (v48)
      {
        v49 = (unint64_t *)&v48->__shared_owners_;
        do
          v50 = __ldxr(v49);
        while (__stxr(v50 + 1, v49));
        v92 = v47;
        v93 = v48;
        do
          v51 = __ldxr(v49);
        while (__stxr(v51 + 1, v49));
      }
      else
      {
        v92 = v47;
        v93 = 0;
      }
      v52 = *((_QWORD *)this + 159);
      if (v52 != v47)
      {
        if (v52)
        {
          v53 = v52 + 104;
          v54 = (std::__shared_weak_count *)*((_QWORD *)this + 160);
          __p = (void *)(v52 + 104);
          v77 = v54;
          if (v54)
          {
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
            std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 159);
            v95 = v54;
            do
              v57 = __ldxr(v55);
            while (__stxr(v57 + 1, v55));
          }
          else
          {
            std::shared_ptr<SipLazuliManager::OutgoingPager>::reset[abi:ne180100]((_QWORD *)this + 159);
            v95 = 0;
          }
          v94 = v53;
          (*(void (**)(uint64_t, char *))(*(_QWORD *)v53 + 40))(v53, (char *)this + 1248);
          if (v54)
          {
            v58 = (unint64_t *)&v54->__shared_owners_;
            do
              v59 = __ldaxr(v58);
            while (__stlxr(v59 - 1, v58));
            if (!v59)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
          if (v77)
          {
            v60 = &v77->__shared_owners_;
            do
              v61 = __ldaxr((unint64_t *)v60);
            while (__stlxr(v61 - 1, (unint64_t *)v60));
            if (!v61)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v47 = v92;
        }
        if (v47)
        {
          std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)this + 159, &v92);
          v62 = *((_QWORD *)this + 159);
          if (v62)
            v63 = (void *)(v62 + 104);
          else
            v63 = 0;
          v64 = (std::__shared_weak_count *)*((_QWORD *)this + 160);
          __p = v63;
          v77 = v64;
          if (v64)
          {
            v65 = (unint64_t *)&v64->__shared_owners_;
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          if (v62)
            (*(void (**)(uint64_t, char *))(*(_QWORD *)(v62 + 104) + 32))(v62 + 104, (char *)this + 1248);
          if (v64)
          {
            v67 = (unint64_t *)&v64->__shared_owners_;
            do
              v68 = __ldaxr(v67);
            while (__stlxr(v68 - 1, v67));
            if (!v68)
            {
              ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
              std::__shared_weak_count::__release_weak(v64);
            }
          }
        }
      }
      v69 = v93;
      if (v93)
      {
        v70 = (unint64_t *)&v93->__shared_owners_;
        do
          v71 = __ldaxr(v70);
        while (__stlxr(v71 - 1, v70));
        if (!v71)
        {
          ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
          std::__shared_weak_count::__release_weak(v69);
        }
      }
      if (v80)
      {
        v72 = &v80->__shared_owners_;
        do
          v73 = __ldaxr((unint64_t *)v72);
        while (__stlxr(v73 - 1, (unint64_t *)v72));
        if (!v73)
        {
          ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
          std::__shared_weak_count::__release_weak(v80);
        }
      }
      v28 = v83;
      BambiCall::detachSipSession(v83);
      if (!v83)
        goto LABEL_57;
    }
    else
    {
LABEL_47:
      if (!v28)
      {
LABEL_57:
        v37 = v82;
        if (v82)
        {
          v38 = (unint64_t *)&v82->__shared_owners_;
          do
            v39 = __ldaxr(v38);
          while (__stlxr(v39 - 1, v38));
          if (!v39)
          {
            ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
            std::__shared_weak_count::__release_weak(v37);
          }
        }
        v40 = v84;
        if (v84)
        {
          v41 = (unint64_t *)&v84->__shared_owners_;
          do
            v42 = __ldaxr(v41);
          while (__stlxr(v42 - 1, v41));
          if (!v42)
          {
            ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
            std::__shared_weak_count::__release_weak(v40);
          }
        }
        *(_QWORD *)&v86 = &off_1E78C89C0;
        if (v89)
          std::__shared_weak_count::__release_weak(v89);
        *(_QWORD *)&v86 = &off_1E78BD300;
        if (*((_QWORD *)&v87 + 1))
          std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v87 + 1));
        goto LABEL_71;
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "JoinedConference");
      (*(void (**)(_QWORD *__return_ptr, BambiCall *, void **))(*(_QWORD *)v28 + 80))(v79, v28, &__p);
      ImsResult::~ImsResult((ImsResult *)v79);
      if (v78 < 0)
        operator delete(__p);
    }
    *((_QWORD *)v28 + 50) = 0;
    v33 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
    *((_QWORD *)this + 18) = 0;
    *((_QWORD *)this + 19) = 0;
    if (v33)
      std::__shared_weak_count::__release_weak(v33);
    v74 = 0;
    v75 = 0;
    SipTypedTerminationLock<SipLockable>::set((uint64_t)this + 160, &v74);
    v34 = v75;
    if (v75)
    {
      v35 = (unint64_t *)&v75->__shared_owners_;
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    goto LABEL_57;
  }
  v14 = *((_QWORD *)this + 3);
  v13 = (char *)this + 24;
  v15 = (*(uint64_t (**)(char *))(v14 + 64))(v13);
  (*(void (**)(char *, uint64_t))(*(_QWORD *)v13 + 16))(v13, v15);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)"Failed to set join. Conference participant is null", 50);
  *(_BYTE *)(v15 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v15 + 17) = 0;
LABEL_71:
  v43 = (std::__shared_weak_count *)v91;
  if (v91)
  {
    v44 = (unint64_t *)(v91 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
    if (!v45)
    {
      ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
      std::__shared_weak_count::__release_weak(v43);
    }
  }
}

void sub_1BEF41F94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,char a28,uint64_t a29,char a30)
{
  uint64_t v30;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 80);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a26);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a28);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a30);
  BambiCallJoinedConferenceEvent::~BambiCallJoinedConferenceEvent((BambiCallJoinedConferenceEvent *)(v30 - 160));
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v30 - 96);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleReferSubscriptionTerminated(BambiConferenceParticipant *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  BambiCall *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  void *__p[2];
  char v16;
  _BYTE v17[72];
  BambiCall *v18;
  std::__shared_weak_count *v19;

  v2 = *((_QWORD *)this + 29);
  if (v2)
  {
    v3 = *(std::__shared_weak_count **)(v2 + 48);
    *(_QWORD *)(v2 + 40) = 0;
    *(_QWORD *)(v2 + 48) = 0;
    if (v3)
      std::__shared_weak_count::__release_weak(v3);
  }
  *((_QWORD *)this + 29) = 0;
  v4 = *((_DWORD *)this + 60);
  if (v4 != 3)
  {
    if (v4 == 7)
    {
      v5 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v5);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v5);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v5 + 8), (uint64_t)" is booted. Swallow refer termination, go back to Joined state.", 63);
      *(_BYTE *)(v5 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v5 + 64))(v5, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v5 + 17) = 0;
      BambiCallParticipant::setState((uint64_t)this, 6, 1);
    }
    else
    {
      v11 = *((_QWORD *)this + 3);
      v10 = (char *)this + 24;
      v12 = (*(uint64_t (**)(char *))(v11 + 64))(v10);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v10 + 16))(v10, v12);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v12 + 8), (uint64_t)"REFER subscription terminated", 29);
      *(_BYTE *)(v12 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v12 + 64))(v12, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v12 + 17) = 0;
    }
    return;
  }
  v6 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Unable to add ", 14);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 33) + 40))((char *)this + 264, v6);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)" to conference. REFER subscription terminated early.", 52);
  *(_BYTE *)(v6 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v6 + 17) = 0;
  v18 = 0;
  v19 = 0;
  v7 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (!v7)
  {
    v8 = 0;
    goto LABEL_15;
  }
  v8 = std::__shared_weak_count::lock(v7);
  v19 = v8;
  if (!v8 || (v9 = (BambiCall *)*((_QWORD *)this + 18), (v18 = v9) == 0) || *((_QWORD *)this + 26))
  {
LABEL_15:
    BambiCallParticipant::setState((uint64_t)this, 10, 1);
    if (!v8)
      return;
    goto LABEL_16;
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "ReferFailed");
  BambiCall::endWithReason(v9, (uint64_t)__p, (uint64_t)v17);
  ImsResult::~ImsResult((ImsResult *)v17);
  if (v16 < 0)
    operator delete(__p[0]);
LABEL_16:
  p_shared_owners = (unint64_t *)&v8->__shared_owners_;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_1BEF422C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v14 - 48);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleEvent(BambiConferenceParticipant *this, BambiCallEvent *a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_weak_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD **v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  uint64_t v17;
  _BYTE *v18;
  BambiConferenceParticipant *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  std::string v25;
  void *__p;
  char v27;
  std::string v28;
  std::string v29;
  uint64_t v30;
  std::__shared_weak_count *v31;

  v4 = (std::__shared_weak_count *)*((_QWORD *)a2 + 3);
  if (v4)
  {
    v5 = *((_QWORD *)a2 + 2);
    p_shared_weak_owners = (unint64_t *)&v4->__shared_weak_owners_;
    do
      v7 = __ldxr(p_shared_weak_owners);
    while (__stxr(v7 + 1, p_shared_weak_owners));
    v30 = 0;
    v8 = std::__shared_weak_count::lock(v4);
    v31 = v8;
    if (v8)
    {
      v30 = v5;
      std::__shared_weak_count::__release_weak(v4);
      if (v5)
      {
        v9 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v9);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Event ", 6);
        *(_BYTE *)(v9 + 17) = 0;
        (*(void (**)(std::string *__return_ptr, BambiCallEvent *))(*(_QWORD *)a2 + 40))(&v28, a2);
        LoggableString::LoggableString(&v29, &v28);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 40))(v9, &v29);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)" for participant call ", 22);
        *(_BYTE *)(v9 + 17) = 0;
        ObfuscatedString::ObfuscatedString((uint64_t)&v25, (const std::string *)(v5 + 464));
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v9 + 56))(v9, &v25);
        if (v27 < 0)
          operator delete(__p);
        if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v25.__r_.__value_.__l.__data_);
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v29.__r_.__value_.__l.__data_);
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v28.__r_.__value_.__l.__data_);
LABEL_21:
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v12 = __ldaxr(p_shared_owners);
        while (__stlxr(v12 - 1, p_shared_owners));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        goto LABEL_25;
      }
    }
    else
    {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  else
  {
    v8 = 0;
    v30 = 0;
    v31 = 0;
  }
  v10 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v10);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)"Event ", 6);
  *(_BYTE *)(v10 + 17) = 0;
  (*(void (**)(std::string *__return_ptr, BambiCallEvent *))(*(_QWORD *)a2 + 40))(&v29, a2);
  LoggableString::LoggableString(&v25, &v29);
  (*(void (**)(uint64_t, std::string *))(*(_QWORD *)v10 + 40))(v10, &v25);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v10 + 8), (uint64_t)" for participant call [UnknownCall]", 35);
  *(_BYTE *)(v10 + 17) = 0;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v29.__r_.__value_.__l.__data_);
  if (v8)
    goto LABEL_21;
LABEL_25:
  switch(*((_DWORD *)a2 + 2))
  {
    case 0xA:
    case 0xC:
    case 0x12:
    case 0x13:
    case 0x19:
    case 0x1A:
      if (*((_QWORD *)this + 26))
      {
        v14 = *((_QWORD *)this + 3);
        v13 = (_QWORD **)((char *)this + 24);
        v15 = (*(uint64_t (**)(_QWORD **))(v14 + 64))(v13);
        ((void (*)(_QWORD **, uint64_t))(*v13)[2])(v13, v15);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v15 + 8), (uint64_t)" passed on to old delegate ", 27);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v15 + 64))(v15, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v15 + 17) = 0;
        (*(void (**)(_QWORD *, BambiCallEvent *))(*v13[23] + 16))(v13[23], a2);
      }
      break;
    case 0xD:
      if (*((_DWORD *)this + 60) == 1)
      {
        v19 = this;
        v20 = 2;
        goto LABEL_38;
      }
      break;
    case 0xE:
      *((_BYTE *)this + 1088) = 0;
      if (*((_DWORD *)this + 60) != 6)
      {
        v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v21);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)" enter error state ", 19);
        *(_BYTE *)(v21 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v21 + 17) = 0;
        goto LABEL_37;
      }
      break;
    case 0xF:
      *((_BYTE *)this + 1088) = 0;
      if (*((int *)this + 60) <= 2)
      {
        v22 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v22);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v22 + 8), (uint64_t)" before sending join request.", 29);
        *(_BYTE *)(v22 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v22 + 64))(v22, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v22 + 17) = 0;
        if (*((_QWORD *)this + 26))
        {
          v23 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
          (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v23);
          std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v23 + 8), (uint64_t)"Pass event to old delegate ", 27);
          *(_BYTE *)(v23 + 17) = 0;
          (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v23 + 64))(v23, std::endl[abi:ne180100]<char,std::char_traits<char>>);
          *(_BYTE *)(v23 + 17) = 0;
          (*(void (**)(_QWORD, BambiCallEvent *))(**((_QWORD **)this + 26) + 16))(*((_QWORD *)this + 26), a2);
        }
        v24 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
        (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v24);
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v24 + 8), (uint64_t)"Transition participant to Error state.", 38);
        *(_BYTE *)(v24 + 17) = 0;
        (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v24 + 64))(v24, std::endl[abi:ne180100]<char,std::char_traits<char>>);
        *(_BYTE *)(v24 + 17) = 0;
LABEL_37:
        v19 = this;
        v20 = 10;
LABEL_38:
        BambiCallParticipant::setState((uint64_t)v19, v20, 1);
      }
      break;
    default:
      v17 = *((_QWORD *)this + 3);
      v16 = (char *)this + 24;
      v18 = (_BYTE *)(*(uint64_t (**)(char *))(v17 + 64))(v16);
      (*(void (**)(char *, _BYTE *))(*(_QWORD *)v16 + 16))(v16, v18);
      (*(void (**)(_BYTE *, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v18 + 64))(v18, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      v18[17] = 0;
      break;
  }
}

void sub_1BEF42828(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  uint64_t v29;

  ims::AccessNetwork::~AccessNetwork(&a9);
  if (a29 < 0)
    operator delete(__p);
  if (a23 < 0)
    operator delete(a18);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 64);
  _Unwind_Resume(a1);
}

void `non-virtual thunk to'BambiConferenceParticipant::handleEvent(BambiConferenceParticipant *this, BambiCallEvent *a2)
{
  BambiConferenceParticipant::handleEvent((BambiConferenceParticipant *)((char *)this - 8), a2);
}

uint64_t BambiConferenceParticipant::joinConference(BambiConferenceParticipant *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  BambiCall *v4;
  SipUri *v5;
  SipUri *v6;
  char v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  char v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  void *v22;
  void **p_lpsrc;
  uint64_t v24;
  std::__shared_weak_count *v25;
  int v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unsigned int v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  BambiCall *v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  std::__shared_weak_count *v48;
  uint64_t v49;
  unint64_t *p_shared_weak_owners;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  uint64_t v63;
  uint64_t v64;
  std::__shared_weak_count *v65;
  void *lpsrc;
  std::__shared_weak_count *v67;
  BambiCall *v68;
  std::__shared_weak_count *v69;
  uint64_t v70;
  std::__shared_weak_count *v71;
  uint64_t v72;
  std::__shared_weak_count *v73;
  BambiCall *v74;
  std::__shared_weak_count *v75;
  void (**v76)(ImsResult *__hidden);
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  _BYTE v85[24];
  _BYTE *v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  v78 = 0;
  v79 = 0;
  v83 = 0;
  v84 = 0;
  v81 = 0;
  v82 = 0;
  v76 = &off_1E78B7238;
  v77 = &_bambiDomain;
  v80 = 0;
  if (*((_DWORD *)this + 60) != 2)
  {
    v7 = 0;
    goto LABEL_92;
  }
  v74 = 0;
  v75 = 0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (!v2)
  {
    v4 = 0;
    v3 = 0;
    goto LABEL_12;
  }
  v3 = std::__shared_weak_count::lock(v2);
  v75 = v3;
  if (!v3)
  {
    v4 = 0;
    goto LABEL_12;
  }
  v4 = (BambiCall *)*((_QWORD *)this + 31);
  v74 = v4;
  if (!v4)
  {
LABEL_12:
    v7 = 1;
    goto LABEL_13;
  }
  v5 = (SipUri *)*((_QWORD *)v4 + 230);
  v6 = (SipUri *)*((_QWORD *)v4 + 231);
  if (v5 != v6)
  {
    while (!SipUri::equals(v5, (BambiConferenceParticipant *)((char *)this + 264), 1))
    {
      v5 = (SipUri *)((char *)v5 + 432);
      if (v5 == v6)
        goto LABEL_8;
    }
    BambiCallParticipant::setState((uint64_t)this, 5, 1);
    if (!BambiConferenceCall::supportsConferenceEvents(v4))
    {
      v63 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v63);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v63 + 8), (uint64_t)"call doesn't support conference events, and we have no REFER. Assuming participant join was successful", 102);
      *(_BYTE *)(v63 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v63 + 64))(v63, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v63 + 17) = 0;
      BambiConferenceParticipant::joinedSuccessfully(this);
    }
    v7 = 1;
    goto LABEL_88;
  }
LABEL_8:
  v7 = 0;
LABEL_13:
  v72 = 0;
  v73 = 0;
  v8 = (std::__shared_weak_count *)*((_QWORD *)this + 19);
  if (v8)
  {
    v73 = std::__shared_weak_count::lock(v8);
    if (v73)
    {
      v9 = *((_QWORD *)this + 18);
      v72 = v9;
      v10 = v9 ? v7 : 1;
      if ((v10 & 1) == 0)
      {
        v68 = v4;
        v69 = v3;
        if (v3)
        {
          p_shared_owners = (unint64_t *)&v3->__shared_owners_;
          do
            v12 = __ldxr(p_shared_owners);
          while (__stxr(v12 + 1, p_shared_owners));
        }
        v13 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v9 + 360));
        lpsrc = *(void **)(v9 + 352);
        v67 = v13;
        v14 = SipUserAgent::config(*((SipUserAgent **)lpsrc + 18));
        (*(void (**)(uint64_t *__return_ptr, BambiConferenceParticipant *, BambiCall **, _QWORD))(*(_QWORD *)this + 104))(&v70, this, &v68, *(unsigned __int8 *)(v14 + 617));
        ImsResult::operator=((uint64_t)&v76, (uint64_t)&v70);
        ImsResult::~ImsResult((ImsResult *)&v70);
        v15 = (unint64_t *)&v13->__shared_owners_;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
        v17 = v69;
        if (v69)
        {
          v18 = (unint64_t *)&v69->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
    }
  }
  if (((*(uint64_t (**)(uint64_t *, _QWORD))(*v77 + 24))(v77, v78) & 1) == 0)
  {
    v24 = v72;
    if (v72)
    {
      v25 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v72 + 360));
      v70 = *(_QWORD *)(v24 + 352);
      v71 = v25;
      v26 = *(_DWORD *)(SipUserAgent::config(*(SipUserAgent **)(v70 + 144)) + 624);
      v27 = (unint64_t *)&v25->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (v28)
      {
        if (v26)
        {
LABEL_40:
          v29 = v72;
          v30 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(v72 + 360));
          v70 = *(_QWORD *)(v29 + 352);
          v71 = v30;
          v31 = *(_DWORD *)(SipUserAgent::config(*(SipUserAgent **)(v70 + 144)) + 624);
          v32 = (unint64_t *)&v30->__shared_owners_;
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
            std::__shared_weak_count::__release_weak(v30);
          }
LABEL_69:
          v49 = *((_QWORD *)this + 16);
          v48 = (std::__shared_weak_count *)*((_QWORD *)this + 17);
          if (v48)
          {
            p_shared_weak_owners = (unint64_t *)&v48->__shared_weak_owners_;
            do
              v51 = __ldxr(p_shared_weak_owners);
            while (__stxr(v51 + 1, p_shared_weak_owners));
            do
              v52 = __ldxr(p_shared_weak_owners);
            while (__stxr(v52 + 1, p_shared_weak_owners));
            do
              v53 = __ldxr(p_shared_weak_owners);
            while (__stxr(v53 + 1, p_shared_weak_owners));
          }
          v86 = 0;
          v54 = operator new(0x20uLL);
          *v54 = &off_1E78C8940;
          v54[1] = this;
          v54[2] = v49;
          v54[3] = v48;
          v86 = v54;
          SipTimerContainer::startTimer((_QWORD *)this + 137, (uint64_t)"WaitForAddSuccessTimer", (uint64_t)v85, v31, 1);
          v55 = v86;
          if (v86 == v85)
          {
            v56 = 4;
            v55 = v85;
          }
          else
          {
            if (!v86)
              goto LABEL_79;
            v56 = 5;
          }
          (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_79:
          if (v48)
          {
            std::__shared_weak_count::__release_weak(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
          goto LABEL_81;
        }
      }
      else
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        if (v26)
          goto LABEL_40;
      }
    }
    v31 = 5000;
    goto LABEL_69;
  }
  v20 = (char *)this + 24;
  v21 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
  (*(void (**)(char *, uint64_t))(*((_QWORD *)this + 3) + 16))((char *)this + 24, v21);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v21 + 8), (uint64_t)"Failed to send refer. ", 22);
  *(_BYTE *)(v21 + 17) = 0;
  ((void (*)(void (***)(ImsResult *__hidden), uint64_t))v76[2])(&v76, v21);
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v21 + 64))(v21, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v21 + 17) = 0;
  v70 = 0;
  v71 = 0;
  std::shared_ptr<RTPSharedPointerBase>::shared_ptr[abi:ne180100]<RTPSharedPointerBase,void>(&lpsrc, (_QWORD *)this + 16);
  if (lpsrc
  {
    v70 = (uint64_t)v22;
    v71 = v67;
    p_lpsrc = &lpsrc;
  }
  else
  {
    p_lpsrc = (void **)&v70;
  }
  *p_lpsrc = 0;
  p_lpsrc[1] = 0;
  v34 = v67;
  if (v67)
  {
    v35 = (unint64_t *)&v67->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
      std::__shared_weak_count::__release_weak(v34);
    }
  }
  v37 = v70;
  if (v70)
  {
    v38 = v74;
    v64 = v70;
    v65 = v71;
    if (v71)
    {
      v39 = (unint64_t *)&v71->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
    }
    BambiConferenceCall::setParticipantState(v38, &v64, 10);
    v41 = v65;
    if (v65)
    {
      v42 = (unint64_t *)&v65->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
  }
  else
  {
    v44 = (*(uint64_t (**)(char *))(*(_QWORD *)v20 + 64))(v20);
    (*(void (**)(char *, uint64_t))(*(_QWORD *)v20 + 16))(v20, v44);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v44 + 8), (uint64_t)"Failed to set Error state. ", 27);
    *(_BYTE *)(v44 + 17) = 0;
    ((void (*)(void (***)(ImsResult *__hidden), uint64_t))v76[2])(&v76, v44);
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v44 + 64))(v44, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v44 + 17) = 0;
    v7 = (*(uint64_t (**)(uint64_t *, _QWORD))(*v77 + 24))(v77, v78) ^ 1;
  }
  v45 = v71;
  if (!v71)
    goto LABEL_65;
  v46 = (unint64_t *)&v71->__shared_owners_;
  do
    v47 = __ldaxr(v46);
  while (__stlxr(v47 - 1, v46));
  if (!v47)
  {
    ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
    std::__shared_weak_count::__release_weak(v45);
    if (!v37)
      goto LABEL_82;
  }
  else
  {
LABEL_65:
    if (!v37)
      goto LABEL_82;
  }
LABEL_81:
  v7 = (*(uint64_t (**)(uint64_t *, _QWORD))(*v77 + 24))(v77, v78) ^ 1;
LABEL_82:
  v57 = v73;
  if (v73)
  {
    v58 = (unint64_t *)&v73->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
  v3 = v75;
  if (v75)
  {
LABEL_88:
    v60 = (unint64_t *)&v3->__shared_owners_;
    do
      v61 = __ldaxr(v60);
    while (__stlxr(v61 - 1, v60));
    if (!v61)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
LABEL_92:
  ImsResult::~ImsResult((ImsResult *)&v76);
  return v7 & 1;
}

void sub_1BEF42FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char a27,uint64_t a28,char a29)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a16);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a25);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a27);
  ImsResult::~ImsResult((ImsResult *)&a29);
  _Unwind_Resume(a1);
}

void BambiConferenceParticipant::handleDisconnectedNotification(BambiConferenceParticipant *this)
{
  int v1;
  char *v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_DWORD *)this + 60);
  if (v1 == 6)
  {
    v4 = 8;
  }
  else
  {
    if (v1 == 7)
    {
      v2 = (char *)this + 24;
      v3 = (*(uint64_t (**)(char *))(*((_QWORD *)this + 3) + 64))((char *)this + 24);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v2 + 16))(v2, v3);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v3 + 8), (uint64_t)"Swallow disconnected event in kStateLeaving", 43);
      *(_BYTE *)(v3 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v3 + 64))(v3, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v3 + 17) = 0;
      return;
    }
    v4 = 10;
  }
  BambiCallParticipant::setState((uint64_t)this, v4, 1);
}

uint64_t BambiConferenceParticipant::handleConferenceNotification(BambiConferenceParticipant *this, uint64_t a2, SipUri *a3)
{
  char *v5;
  uint64_t v6;

  if ((_DWORD)a2 != 1)
  {
    if ((_DWORD)a2 == 9)
    {
      BambiConferenceParticipant::handleDisconnectedNotification(this);
    }
    else
    {
      v5 = (char *)this + 24;
      v6 = (*(uint64_t (**)(char *, uint64_t, SipUri *))(*((_QWORD *)this + 3) + 64))((char *)this + 24, a2, a3);
      (*(void (**)(char *, uint64_t))(*(_QWORD *)v5 + 16))(v5, v6);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v6 + 8), (uint64_t)"Ignoring the conference event status ", 37);
      *(_BYTE *)(v6 + 17) = 0;
      std::ostream::operator<<();
      *(_BYTE *)(v6 + 17) = 0;
      (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v6 + 64))(v6, std::endl[abi:ne180100]<char,std::char_traits<char>>);
      *(_BYTE *)(v6 + 17) = 0;
    }
    return 1;
  }
  if (*((char *)this + 799) < 0)
  {
    if (*((_QWORD *)this + 98))
      return SipUri::equals(a3, (BambiConferenceParticipant *)((char *)this + 672), 1);
  }
  else if (*((_BYTE *)this + 799))
  {
    return SipUri::equals(a3, (BambiConferenceParticipant *)((char *)this + 672), 1);
  }
  SipUri::operator=((BambiConferenceParticipant *)((char *)this + 672), (uint64_t)a3);
  BambiConferenceParticipant::joinedSuccessfully(this);
  return 1;
}

void BambiCallJoinedConferenceEvent::~BambiCallJoinedConferenceEvent(BambiCallJoinedConferenceEvent *this)
{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78C89C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;

  *(_QWORD *)this = &off_1E78C89C0;
  v2 = (std::__shared_weak_count *)*((_QWORD *)this + 6);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  *(_QWORD *)this = &off_1E78BD300;
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 3);
  if (v3)
    std::__shared_weak_count::__release_weak(v3);
  JUMPOUT(0x1C3B87100);
}

void BambiConferenceParticipant::handleTimer(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3;
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v3 = a2[23];
  if ((v3 & 0x80u) == 0)
    v4 = a2[23];
  else
    v4 = *((_QWORD *)a2 + 1);
  if (v4 != 22)
    goto LABEL_12;
  if ((v3 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, "WaitForAddSuccessTimer", *((_QWORD *)a2 + 1)))
      goto LABEL_13;
LABEL_12:
    v7 = *(_QWORD *)(a1 + 24);
    v6 = a1 + 24;
    v8 = (*(uint64_t (**)(uint64_t))(v7 + 56))(v6);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, v8);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v8 + 8), (uint64_t)"Unknown timer fired", 19);
    *(_BYTE *)(v8 + 17) = 0;
    (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v8 + 64))(v8, std::endl[abi:ne180100]<char,std::char_traits<char>>);
    *(_BYTE *)(v8 + 17) = 0;
    return;
  }
  if (a2[23])
  {
    v5 = "WaitForAddSuccessTimer";
    while (*a2 == *(unsigned __int8 *)v5)
    {
      ++a2;
      ++v5;
      if (!--v3)
        goto LABEL_13;
    }
    goto LABEL_12;
  }
LABEL_13:
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 24) + 56))(a1 + 24);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(a1 + 24) + 16))(a1 + 24, v9);
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*(_QWORD **)(v9 + 8), (uint64_t)"Participant failed to join", 26);
  *(_BYTE *)(v9 + 17) = 0;
  (*(void (**)(uint64_t, _QWORD *(*)(_QWORD *)))(*(_QWORD *)v9 + 64))(v9, std::endl[abi:ne180100]<char,std::char_traits<char>>);
  *(_BYTE *)(v9 + 17) = 0;
  BambiCallParticipant::setState(a1, 10, 1);
}

_QWORD *BambiConferenceParticipant::logPrefix(BambiConferenceParticipant *this, ImsOutStream *a2)
{
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *result;

  v4 = (std::__shared_weak_count *)*((_QWORD *)this + 32);
  if (v4)
  {
    v5 = std::__shared_weak_count::lock(v4);
    if (v5)
    {
      v6 = v5;
      v7 = *((_QWORD *)this + 31);
      if (v7)
        (*(void (**)(uint64_t, ImsOutStream *))(*(_QWORD *)v7 + 72))(v7, a2);
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
      }
    }
  }
  result = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(*((_QWORD **)a2 + 1), (uint64_t)"ConferenceParticipant: ", 23);
  *((_BYTE *)a2 + 17) = 0;
  return result;
}

void sub_1BEF434B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *`non-virtual thunk to'BambiConferenceParticipant::logPrefix(BambiConferenceParticipant *this, ImsOutStream *a2)
{
  return BambiConferenceParticipant::logPrefix((BambiConferenceParticipant *)((char *)this - 24), a2);
}

void BambiCallJoinedConferenceEvent::clone(BambiCallJoinedConferenceEvent *this)
{
  BambiCallEvent *v2;
  _QWORD *v3;

  v2 = (BambiCallEvent *)operator new();
  BambiCallEvent::BambiCallEvent(v2, this);
  *v3 = &off_1E78C89C0;
  v3[5] = 0;
  v3[6] = 0;
}

void SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(uint64_t a1)
{
  SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t SipTypedTerminationLock<SipSession>::~SipTypedTerminationLock(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  *(_QWORD *)a1 = &off_1E78C88B8;
  v3 = a1 + 32;
  v2 = *(_QWORD *)(a1 + 32);
  v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  if (v2)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v2 + 104) + 40))(v2 + 104, a1 + 8);
  if (v4)
  {
    v7 = (unint64_t *)&v4->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  *(_QWORD *)a1 = off_1E78BC5D8;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void std::allocate_shared[abi:ne180100]<BambiConferenceParticipant,std::allocator<BambiConferenceParticipant>,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,void>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t a3@<X3>, _QWORD *a4@<X8>)
{
  _QWORD *v8;

  v8 = operator new(0x528uLL);
  std::__shared_ptr_emplace<BambiConferenceParticipant>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,std::allocator<BambiConferenceParticipant>,0>(v8, a1, a2, a3);
  *a4 = v8 + 3;
  a4[1] = v8;
  std::shared_ptr<MessageSession>::__enable_weak_this[abi:ne180100]<MessageSession,MessageSession,void>((uint64_t)a4, v8 + 19, (uint64_t)(v8 + 3));
}

void sub_1BEF436D0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

_QWORD *std::__shared_ptr_emplace<BambiConferenceParticipant>::__shared_ptr_emplace[abi:ne180100]<std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,std::allocator<BambiConferenceParticipant>,0>(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = &off_1E78C88F0;
  std::construct_at[abi:ne180100]<BambiConferenceParticipant,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,BambiConferenceParticipant*>((uint64_t)(a1 + 3), a2, a3, a4);
  return a1;
}

void sub_1BEF43718(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;

  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<BambiConferenceParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C88F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BambiConferenceParticipant>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_1E78C88F0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x1C3B87100);
}

uint64_t std::__shared_ptr_emplace<BambiConferenceParticipant>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t std::construct_at[abi:ne180100]<BambiConferenceParticipant,std::shared_ptr<BambiCall> &,std::shared_ptr<BambiConferenceCall> &,SipUri const&,BambiConferenceParticipant*>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *p_shared_weak_owners;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  uint64_t v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  std::string __p;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  std::__shared_weak_count *v51;

  v7 = *a2;
  v6 = (std::__shared_weak_count *)a2[1];
  v41 = *a2;
  v42 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v10 = *a3;
  v11 = (std::__shared_weak_count *)a3[1];
  v40 = *a3;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v48 = v7;
  v49 = v6;
  if (v6)
  {
    v14 = (unint64_t *)&v6->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = v10 + 1824;
  if (!v10)
    v16 = 0;
  v46 = v16;
  v47 = v11;
  if (v11)
  {
    p_shared_weak_owners = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v18 = __ldxr(p_shared_weak_owners);
    while (__stxr(v18 + 1, p_shared_weak_owners));
  }
  BambiCallParticipant::BambiCallParticipant(a1, &v48, &v46);
  if (v47)
    std::__shared_weak_count::__release_weak(v47);
  v19 = v49;
  if (v49)
  {
    v20 = (unint64_t *)&v49->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  *(_QWORD *)a1 = &off_1E78C8668;
  *(_QWORD *)(a1 + 8) = &unk_1E78C86F0;
  *(_QWORD *)(a1 + 16) = &unk_1E78C8828;
  *(_QWORD *)(a1 + 24) = &unk_1E78C8858;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 0;
  *(_QWORD *)(a1 + 288) = 0;
  *(_QWORD *)(a1 + 296) = 0;
  *(_QWORD *)(a1 + 272) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 280) = 0;
  *(_WORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 344) = 0;
  *(_QWORD *)(a1 + 352) = 0;
  *(_QWORD *)(a1 + 328) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 336) = a1 + 344;
  *(_BYTE *)(a1 + 361) = 1;
  *(_QWORD *)(a1 + 264) = &off_1E78BFCE8;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_QWORD *)(a1 + 576) = 0;
  *(_QWORD *)(a1 + 592) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 608) = 0;
  *(_QWORD *)(a1 + 616) = 0;
  *(_QWORD *)(a1 + 600) = a1 + 608;
  *(_QWORD *)(a1 + 632) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 656) = 0;
  *(_QWORD *)(a1 + 648) = 0;
  *(_QWORD *)(a1 + 640) = a1 + 648;
  *(_BYTE *)(a1 + 360) = 1;
  *(_WORD *)(a1 + 624) = 257;
  *(_WORD *)(a1 + 664) = 257;
  *(_BYTE *)(a1 + 584) = 0;
  *(_QWORD *)(a1 + 680) = &off_1E78D08F8;
  *(_QWORD *)(a1 + 720) = 0;
  *(_QWORD *)(a1 + 728) = 0;
  *(_WORD *)(a1 + 712) = 0;
  *(_QWORD *)(a1 + 704) = 0;
  *(_QWORD *)(a1 + 688) = 0;
  *(_QWORD *)(a1 + 696) = 0;
  *(_QWORD *)(a1 + 736) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 760) = 0;
  *(_QWORD *)(a1 + 752) = 0;
  *(_QWORD *)(a1 + 744) = a1 + 752;
  *(_BYTE *)(a1 + 769) = 1;
  *(_QWORD *)(a1 + 672) = &off_1E78BFCE8;
  *(_QWORD *)(a1 + 984) = 0;
  *(_OWORD *)(a1 + 920) = 0u;
  *(_OWORD *)(a1 + 904) = 0u;
  *(_OWORD *)(a1 + 888) = 0u;
  *(_OWORD *)(a1 + 872) = 0u;
  *(_OWORD *)(a1 + 856) = 0u;
  *(_OWORD *)(a1 + 840) = 0u;
  *(_OWORD *)(a1 + 824) = 0u;
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 792) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(_OWORD *)(a1 + 952) = 0u;
  *(_OWORD *)(a1 + 968) = 0u;
  *(_OWORD *)(a1 + 936) = 0u;
  *(_QWORD *)(a1 + 1000) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1024) = 0;
  *(_QWORD *)(a1 + 1016) = 0;
  *(_QWORD *)(a1 + 1008) = a1 + 1016;
  *(_BYTE *)(a1 + 1033) = 1;
  *(_QWORD *)(a1 + 1040) = &off_1E78B82D8;
  *(_QWORD *)(a1 + 1064) = 0;
  *(_QWORD *)(a1 + 1056) = 0;
  *(_QWORD *)(a1 + 1048) = a1 + 1056;
  *(_BYTE *)(a1 + 1073) = 1;
  *(_BYTE *)(a1 + 768) = 1;
  *(_BYTE *)(a1 + 1032) = 1;
  *(_BYTE *)(a1 + 1072) = 1;
  *(_BYTE *)(a1 + 992) = 0;
  SipTimerContainer::SipTimerContainer((SipTimerContainer *)(a1 + 1096));
  v44 = 0;
  v45 = 0;
  LoggableString::LoggableString((LoggableString *)&__p, "ConferenceParticipantHeadlessSession");
  SipTerminationLockBase::SipTerminationLockBase((SipTerminationLockBase *)(a1 + 1240), &__p);
  *(_QWORD *)(a1 + 1240) = &off_1E78C88B8;
  *(_QWORD *)(a1 + 1280) = 0;
  *(_QWORD *)(a1 + 1272) = 0;
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(a1 + 1272), &v44);
  v22 = *(_QWORD *)(a1 + 1272);
  if (v22)
    v23 = v22 + 104;
  else
    v23 = 0;
  v24 = *(std::__shared_weak_count **)(a1 + 1280);
  v50 = v23;
  v51 = v24;
  if (v24)
  {
    v25 = (unint64_t *)&v24->__shared_owners_;
    do
      v26 = __ldxr(v25);
    while (__stxr(v26 + 1, v25));
  }
  if (v22)
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)(v22 + 104) + 32))(v22 + 104, a1 + 1248);
  if (v24)
  {
    v27 = (unint64_t *)&v24->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v29 = v45;
  if (v45)
  {
    v30 = (unint64_t *)&v45->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  *(_BYTE *)(a1 + 1288) = 0;
  *(_DWORD *)(a1 + 1292) = 0;
  if (v11)
  {
    v32 = (unint64_t *)&v11->__shared_weak_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v34 = *(std::__shared_weak_count **)(a1 + 256);
  *(_QWORD *)(a1 + 248) = v40;
  *(_QWORD *)(a1 + 256) = v11;
  if (v34)
    std::__shared_weak_count::__release_weak(v34);
  *(_QWORD *)(a1 + 1080) = 0;
  *(_BYTE *)(a1 + 1088) = 1;
  SipUri::operator=((SipUri *)(a1 + 264), a4);
  *(_QWORD *)(a1 + 1200) = a1 + 16;
  std::string::basic_string[abi:ne180100]<0>(&__p, "ims.call");
  std::string::operator=((std::string *)(a1 + 1144), &__p);
  std::string::operator=((std::string *)(a1 + 1168), (const std::string *)(v41 + 104));
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v41)
    *(_BYTE *)(a1 + 1288) = *(_BYTE *)(v41 + 1488);
  if (v11)
  {
    v35 = (unint64_t *)&v11->__shared_owners_;
    do
      v36 = __ldaxr(v35);
    while (__stlxr(v36 - 1, v35));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  if (v42)
  {
    v37 = (unint64_t *)&v42->__shared_owners_;
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  return a1;
}

void sub_1BEF43C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, SipUri *a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,char a24)
{
  uint64_t v24;
  SipUri *v25;
  SipTimerContainer *v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  std::__shared_weak_count *v31;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v29 - 96);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v27);
  *(_QWORD *)(v24 + 1240) = off_1E78BC5D8;
  if (*(char *)(v24 + 1271) < 0)
    operator delete(*v28);
  if (a19 < 0)
    operator delete(__p);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a20);
  SipTimerContainer::~SipTimerContainer(v26);
  SipUri::~SipUri(v25);
  SipUri::~SipUri(a9);
  v31 = *(std::__shared_weak_count **)(v24 + 256);
  if (v31)
    std::__shared_weak_count::__release_weak(v31);
  BambiCallParticipant::~BambiCallParticipant((BambiCallParticipant *)v24);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a10);
  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100]((uint64_t)&a12);
  _Unwind_Resume(a1);
}

_QWORD *std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v2;

  *a1 = &off_1E78C8940;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::~__func(_QWORD *a1)
{
  std::__shared_weak_count *v1;

  *a1 = &off_1E78C8940;
  v1 = (std::__shared_weak_count *)a1[3];
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
  JUMPOUT(0x1C3B87100);
}

char *std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::__clone(uint64_t a1)
{
  char *result;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  result = (char *)operator new(0x20uLL);
  *(_QWORD *)result = &off_1E78C8940;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 24);
  *((_QWORD *)result + 3) = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 16);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

uint64_t std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)a2 = &off_1E78C8940;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 24);
  *(_QWORD *)(a2 + 24) = v2;
  if (v2)
  {
    v3 = (unint64_t *)(v2 + 16);
    do
      v4 = __ldxr(v3);
    while (__stxr(v4 + 1, v3));
  }
  return result;
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::destroy(uint64_t a1)
{
  std::__shared_weak_count *v1;

  v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
    std::__shared_weak_count::__release_weak(v1);
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::destroy_deallocate(_QWORD *__p)
{
  std::__shared_weak_count *v2;

  v2 = (std::__shared_weak_count *)__p[3];
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  operator delete(__p);
}

void std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::operator()(_QWORD *a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    v5 = a1[1];
    v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      v7 = v6;
      if (a1[2])
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 112))(v5, a2);
      p_shared_owners = (unint64_t *)&v7->__shared_owners_;
      do
        v9 = __ldaxr(p_shared_owners);
      while (__stlxr(v9 - 1, p_shared_owners));
      if (!v9)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
  }
}

void sub_1BEF43F10(_Unwind_Exception *exception_object)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;

  p_shared_owners = (unint64_t *)&v1->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<BambiConferenceParticipant::joinConference(void)::$_0,std::allocator<BambiConferenceParticipant::joinConference(void)::$_0>,void ()(std::string &)>::target_type()
{
}

void XcapCBRule::XcapCBRule(XcapCBRule *this)
{
  char *v2;
  uint64_t **v3;
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  __int128 v7;
  unsigned __int8 v8;

  *(_QWORD *)this = &off_1E78CE278;
  v2 = (char *)this + 8;
  v8 = 1;
  *(_QWORD *)&v7 = &v8;
  v3 = std::__tree<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::__map_value_compare<XcapNs::nsType,std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>,std::less<XcapNs::nsType>,true>,std::allocator<std::__value_type<XcapNs::nsType,bambi::XmlTreeNs>>>::__emplace_unique_key_args<XcapNs::nsType,std::piecewise_construct_t const&,std::tuple<XcapNs::nsType const&>,std::tuple<>>((uint64_t **)&XcapNs::_allNamespaces, &v8, (uint64_t)&std::piecewise_construct, (char **)&v7);
  bambi::XmlTreeItem::XmlTreeItem((uint64_t)v2, (__int128 *)"rule", (__int128 *)(v3 + 5));
  *(_QWORD *)this = off_1E78C8A30;
  *((_QWORD *)this + 1) = &unk_1E78C8AA8;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  _ZNSt3__115allocate_sharedB8ne180100I15XcapCBConditionNS_9allocatorIS1_EEJEvEENS_10shared_ptrIT_EERKT0_DpOT1_(&v7);
  std::shared_ptr<SipClientTransaction>::operator=[abi:ne180100]((uint64_t)this + 88, &v7);
  v4 = (std::__shared_weak_count *)*((_QWORD *)&v7 + 1);
  if (*((_QWORD *)&v7 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&v7 + 1) + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

void sub_1BEF44098(_Unwind_Exception *a1)
{
  uint64_t v1;
  void **v2;
  uint64_t v3;
  void **v4;

  std::shared_ptr<RTPManager>::~shared_ptr[abi:ne180100](v3);
  if (*(char *)(v1 + 87) < 0)
    operator delete(*v4);
  bambi::XmlTreeItem::~XmlTreeItem(v2);
  _Unwind_Resume(a1);
}

uint64_t XcapCBRule::clone(XcapCBRule *this)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v10;
  std::__shared_weak_count *v11;

  v2 = operator new();
  XcapCBRule::XcapCBRule((XcapCBRule *)v2);
  std::string::operator=((std::string *)(v2 + 64), (const std::string *)((char *)this + 64));
  *(_BYTE *)(v2 + 104) = *((_BYTE *)this + 104);
  v3 = (std::__shared_weak_count *)*((_QWORD *)this + 12);
  v10 = *((_QWORD *)this + 11);
  v11 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
  }
  std::shared_ptr<IpAddress>::operator=[abi:ne180100]((_QWORD *)(v2 + 88), &v10);
  v6 = v11;
  if (v11)
  {
    v7 = (unint64_t *)&v11->__shared_owners_;
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return v2;
}

void sub_1BEF44184(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x1C3B87100](v1, 0x10B3C40B88DE452);
  _Unwind_Resume(a1);
}

void XcapCBRule::setAttribute(uint64_t a1, uint64_t a2, const std::string *a3)
{
  std::string::size_type size;
  uint64_t v6;
  int v7;
  int v8;
  void *v10;
  int v11;
  std::string __p;

  XcapNs::stripXcapNs(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    size = __p.__r_.__value_.__l.__size_;
  if (size == 2)
  {
    if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v10 = (void *)__p.__r_.__value_.__r.__words[0];
      v11 = memcmp(__p.__r_.__value_.__l.__data_, XcapCBRule::kId, __p.__r_.__value_.__l.__size_);
      operator delete(v10);
      if (v11)
        return;
    }
    else if (*((_BYTE *)&__p.__r_.__value_.__s + 23))
    {
      v6 = 0;
      do
      {
        v7 = __p.__r_.__value_.__s.__data_[v6];
        v8 = XcapCBRule::kId[v6];
      }
      while (v7 == v8 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v6++);
      if (v7 != v8)
        return;
    }
    std::string::operator=((std::string *)(a1 + 64), a3);
    return;
  }
  if ((*((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

uint64_t XcapCBRule::createChild(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  std::string::size_type size;
  uint64_t v6;
  std::string *v7;
  const char *v8;
  std::string *p_s1;
  const char *v10;
  void *v11;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v3 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  v4 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    size = __s1.__r_.__value_.__l.__size_;
  if (size == 10)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      v11 = (void *)__s1.__r_.__value_.__r.__words[0];
      if (memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
      {
        a1 = 0;
        goto LABEL_29;
      }
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      p_s1 = &__s1;
      v10 = "conditions";
      while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        p_s1 = (std::string *)((char *)p_s1 + 1);
        ++v10;
        if (!--v3)
          goto LABEL_26;
      }
      goto LABEL_19;
    }
LABEL_26:
    v6 = *(_QWORD *)(a1 + 88);
    if ((v4 & 0x80) == 0)
      return v6;
LABEL_27:
    v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    goto LABEL_28;
  }
  v6 = 0;
  if (size != 7)
    goto LABEL_20;
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v11 = (void *)__s1.__r_.__value_.__r.__words[0];
    if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_))
    {
      v6 = 0;
LABEL_28:
      a1 = v6;
    }
LABEL_29:
    operator delete(v11);
    return a1;
  }
  if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
  {
    v7 = &__s1;
    v8 = "actions";
    while (v7->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v8)
    {
      v7 = (std::string *)((char *)v7 + 1);
      ++v8;
      if (!--v3)
      {
        v6 = a1;
        if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
          return v6;
        goto LABEL_27;
      }
    }
LABEL_19:
    v6 = 0;
LABEL_20:
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
      return v6;
    goto LABEL_27;
  }
  return a1;
}

void XcapCBRule::parseChild(_BYTE *a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6;
  size_t size;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  std::string *v11;
  const char *v12;
  uint64_t v13;
  const void *v14;
  std::string *p_s1;
  const char *v16;
  uint64_t v17;
  int v18;
  unsigned __int8 *p_p;
  int v20;
  int v21;
  char v23;
  void *__p;
  uint64_t v25;
  uint64_t v26;
  std::string __s1;

  memset(&__s1, 0, sizeof(__s1));
  XcapNs::stripXcapNs(a2, &__s1);
  v6 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  size = __s1.__r_.__value_.__l.__size_;
  if ((__s1.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v8 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  else
    v8 = __s1.__r_.__value_.__l.__size_;
  if (v8 == 5)
  {
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) == 0)
    {
      if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
      {
        p_s1 = &__s1;
        v16 = "allow";
        while (p_s1->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v16)
        {
          p_s1 = (std::string *)((char *)p_s1 + 1);
          ++v16;
          if (!--v6)
            goto LABEL_34;
        }
        goto LABEL_46;
      }
LABEL_34:
      __p = 0;
      v25 = 0;
      v26 = 0;
      (*(void (**)(_BYTE *, uint64_t, uint64_t *, void **))(*(_QWORD *)a1 + 72))(a1, a2, a3, &__p);
      v17 = HIBYTE(v26);
      v18 = SHIBYTE(v26);
      if (v26 < 0)
        v17 = v25;
      if (v17 != 5)
        goto LABEL_43;
      p_p = (unsigned __int8 *)__p;
      if (v26 >= 0)
        p_p = (unsigned __int8 *)&__p;
      v20 = *(_DWORD *)p_p;
      v21 = p_p[4];
      if (v20 == 1936482662 && v21 == 101)
        v23 = 0;
      else
LABEL_43:
        v23 = 1;
      a1[104] = v23;
      if (v18 < 0)
        operator delete(__p);
      goto LABEL_46;
    }
    v14 = (const void *)__s1.__r_.__value_.__r.__words[0];
LABEL_33:
    if (memcmp(v14, "allow", size))
      goto LABEL_46;
    goto LABEL_34;
  }
  if (v8 != 10)
  {
    if (v8 != 7)
      goto LABEL_46;
    if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
    {
      if (memcmp(__s1.__r_.__value_.__l.__data_, "actions", __s1.__r_.__value_.__l.__size_))
        goto LABEL_46;
    }
    else if (*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    {
      v9 = &__s1;
      v10 = "actions";
      while (v9->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v10)
      {
        v9 = (std::string *)((char *)v9 + 1);
        ++v10;
        if (!--v6)
          goto LABEL_24;
      }
      goto LABEL_46;
    }
LABEL_24:
    bambi::XmlParserItem::parseChild((uint64_t)a1, a2, a3);
    goto LABEL_46;
  }
  if ((*((_BYTE *)&__s1.__r_.__value_.__s + 23) & 0x80) != 0)
  {
    v14 = (const void *)__s1.__r_.__value_.__r.__words[0];
    if (!memcmp(__s1.__r_.__value_.__l.__data_, "conditions", __s1.__r_.__value_.__l.__size_))
      goto LABEL_24;
    if (size != 5)
      goto LABEL_46;
    goto LABEL_33;
  }
  if (!*((_BYTE *)&__s1.__r_.__value_.__s + 23))
    goto LABEL_24;
  v11 = &__s1;
  v12 = "conditions";
  v13 = HIBYTE(__s1.__r_.__value_.__r.__words[2]);
  while (v11->__r_.__value_.__s.__data_[0] == *(unsigned __int8 *)v12)
  {
    v11 = (std::string *)((char *)v11 + 1);
    ++v12;
    if (!--v13)
      goto LABEL_24;
  }
LABEL_46:
  if (SHIBYTE(__s1.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__s1.__r_.__value_.__l.__data_);
}

